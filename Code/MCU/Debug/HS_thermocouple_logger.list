
HS_thermocouple_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000126d8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  080128b8  080128b8  000228b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ef8  08012ef8  00030368  2**0
                  CONTENTS
  4 .ARM          00000000  08012ef8  08012ef8  00030368  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012ef8  08012ef8  00030368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ef8  08012ef8  00022ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012efc  08012efc  00022efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  08012f00  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f58  20000368  08013268  00030368  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  200052c0  08013268  000352c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030368  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030398  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020a4f  00000000  00000000  000303db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a5f  00000000  00000000  00050e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001da8  00000000  00000000  00055890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016c1  00000000  00000000  00057638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cfe9  00000000  00000000  00058cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002488f  00000000  00000000  00085ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00119c14  00000000  00000000  000aa571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009414  00000000  00000000  001c4188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001cd59c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000368 	.word	0x20000368
 80001fc:	00000000 	.word	0x00000000
 8000200:	080128a0 	.word	0x080128a0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000036c 	.word	0x2000036c
 800021c:	080128a0 	.word	0x080128a0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfe:	f002 f822 	bl	8002d46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d02:	f000 f8af 	bl	8000e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d06:	f000 fbf1 	bl	80014ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000d0a:	f000 fbad 	bl	8001468 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d0e:	f000 f8f5 	bl	8000efc <MX_ADC1_Init>
  MX_ADC3_Init();
 8000d12:	f000 f9e9 	bl	80010e8 <MX_ADC3_Init>
  MX_ADC4_Init();
 8000d16:	f000 fa6d 	bl	80011f4 <MX_ADC4_Init>
  MX_TIM2_Init();
 8000d1a:	f000 fb59 	bl	80013d0 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8000d1e:	f00d f9d5 	bl	800e0cc <MX_USB_Device_Init>
  MX_I2C3_Init();
 8000d22:	f000 fb15 	bl	8001350 <MX_I2C3_Init>
  MX_DAC1_Init();
 8000d26:	f000 fad7 	bl	80012d8 <MX_DAC1_Init>
  MX_ADC2_Init();
 8000d2a:	f000 f96b 	bl	8001004 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  ResetStates();
 8000d2e:	f001 faaf 	bl	8002290 <ResetStates>

  int full_channels = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(prog_state == CFG_RECEIVED){
 8000d36:	4b42      	ldr	r3, [pc, #264]	; (8000e40 <main+0x148>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d101      	bne.n	8000d44 <main+0x4c>
		  InterpretConfig();
 8000d40:	f000 fc80 	bl	8001644 <InterpretConfig>
	  }
	  if(prog_state == CFG_INTERPRETED){
 8000d44:	4b3e      	ldr	r3, [pc, #248]	; (8000e40 <main+0x148>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d101      	bne.n	8000d52 <main+0x5a>
		  SetupMeasurement();
 8000d4e:	f000 fd9f 	bl	8001890 <SetupMeasurement>
	  }
	  if(prog_state == PARAMETERS_SET){
 8000d52:	4b3b      	ldr	r3, [pc, #236]	; (8000e40 <main+0x148>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	d101      	bne.n	8000d60 <main+0x68>
		  SendParameters();
 8000d5c:	f001 f880 	bl	8001e60 <SendParameters>
	  }
	  if(prog_state == ARMED){
 8000d60:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <main+0x148>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	d106      	bne.n	8000d78 <main+0x80>
		  while(!measurement_activated);
 8000d6a:	bf00      	nop
 8000d6c:	4b35      	ldr	r3, [pc, #212]	; (8000e44 <main+0x14c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d0fb      	beq.n	8000d6c <main+0x74>
		  StartMeasurement();
 8000d74:	f001 f8de 	bl	8001f34 <StartMeasurement>
	  }
	  if(prog_state == MEASURING){
 8000d78:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <main+0x148>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b05      	cmp	r3, #5
 8000d80:	d14a      	bne.n	8000e18 <main+0x120>
		 full_channels = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
		 for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 8000d86:	2300      	movs	r3, #0
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	e02a      	b.n	8000de2 <main+0xea>
			 if(!channel_enabled_status[i])
 8000d8c:	4a2e      	ldr	r2, [pc, #184]	; (8000e48 <main+0x150>)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d020      	beq.n	8000dda <main+0xe2>
				 continue;
			 if(adc_states[i] == EMPTY)
 8000d98:	4a2c      	ldr	r2, [pc, #176]	; (8000e4c <main+0x154>)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d022      	beq.n	8000dea <main+0xf2>
				 break;

			 if(usb_transmition_state == EMPTY){
 8000da4:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <main+0x158>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d106      	bne.n	8000dba <main+0xc2>
				 usb_transmition_state = adc_states[i];
 8000dac:	4a27      	ldr	r2, [pc, #156]	; (8000e4c <main+0x154>)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	4413      	add	r3, r2
 8000db2:	781a      	ldrb	r2, [r3, #0]
 8000db4:	4b26      	ldr	r3, [pc, #152]	; (8000e50 <main+0x158>)
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e00b      	b.n	8000dd2 <main+0xda>
			 }
			 else if(adc_states[i] != usb_transmition_state){
 8000dba:	4a24      	ldr	r2, [pc, #144]	; (8000e4c <main+0x154>)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <main+0x158>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d003      	beq.n	8000dd2 <main+0xda>
				 transmission_error = 1;
 8000dca:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <main+0x15c>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	601a      	str	r2, [r3, #0]
				 break;
 8000dd0:	e00c      	b.n	8000dec <main+0xf4>
			 }

			 full_channels++;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	e000      	b.n	8000ddc <main+0xe4>
				 continue;
 8000dda:	bf00      	nop
		 for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	3301      	adds	r3, #1
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	ddd1      	ble.n	8000d8c <main+0x94>
 8000de8:	e000      	b.n	8000dec <main+0xf4>
				 break;
 8000dea:	bf00      	nop
		 }

		 if(full_channels == channel_enabled_count){
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <main+0x160>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d107      	bne.n	8000e06 <main+0x10e>
			 SendData(usb_transmition_state);
 8000df6:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <main+0x158>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 f98c 	bl	8002118 <SendData>
			 usb_transmition_state = EMPTY;
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <main+0x158>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
		 }

		 if(current_packet_count >= target_packet_count) {
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <main+0x164>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <main+0x168>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	db02      	blt.n	8000e18 <main+0x120>
			 prog_state = REPORTING;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <main+0x148>)
 8000e14:	2206      	movs	r2, #6
 8000e16:	701a      	strb	r2, [r3, #0]
		 }
	  }
	  if(prog_state == REPORTING){
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <main+0x148>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d104      	bne.n	8000e2c <main+0x134>
		  SendTrasmissionReport();
 8000e22:	f001 fa07 	bl	8002234 <SendTrasmissionReport>
		  prog_state = DONE;
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <main+0x148>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	701a      	strb	r2, [r3, #0]
	  }
	  if(prog_state == DONE){
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <main+0x148>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b07      	cmp	r3, #7
 8000e34:	f47f af7f 	bne.w	8000d36 <main+0x3e>

		  ResetStates();
 8000e38:	f001 fa2a 	bl	8002290 <ResetStates>
	  if(prog_state == CFG_RECEIVED){
 8000e3c:	e77b      	b.n	8000d36 <main+0x3e>
 8000e3e:	bf00      	nop
 8000e40:	200027b4 	.word	0x200027b4
 8000e44:	200027e4 	.word	0x200027e4
 8000e48:	200027cc 	.word	0x200027cc
 8000e4c:	200027c4 	.word	0x200027c4
 8000e50:	200027c0 	.word	0x200027c0
 8000e54:	200027dc 	.word	0x200027dc
 8000e58:	200027c8 	.word	0x200027c8
 8000e5c:	20000768 	.word	0x20000768
 8000e60:	2000076c 	.word	0x2000076c

08000e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b094      	sub	sp, #80	; 0x50
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 0318 	add.w	r3, r7, #24
 8000e6e:	2238      	movs	r2, #56	; 0x38
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f00e fc73 	bl	800f75e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e86:	2000      	movs	r0, #0
 8000e88:	f007 fd60 	bl	800894c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000e8c:	2321      	movs	r3, #33	; 0x21
 8000e8e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e94:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e96:	2301      	movs	r3, #1
 8000e98:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 78;
 8000ea6:	234e      	movs	r3, #78	; 0x4e
 8000ea8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000eaa:	2306      	movs	r3, #6
 8000eac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb6:	f107 0318 	add.w	r3, r7, #24
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f007 fdfa 	bl	8008ab4 <HAL_RCC_OscConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ec6:	f001 fa45 	bl	8002354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eca:	230f      	movs	r3, #15
 8000ecc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f008 f8f8 	bl	80090d8 <HAL_RCC_ClockConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000eee:	f001 fa31 	bl	8002354 <Error_Handler>
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3750      	adds	r7, #80	; 0x50
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	; 0x30
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2220      	movs	r2, #32
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f00e fc22 	bl	800f75e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f1a:	4b38      	ldr	r3, [pc, #224]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f22:	4b36      	ldr	r3, [pc, #216]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f28:	4b34      	ldr	r3, [pc, #208]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f2e:	4b33      	ldr	r3, [pc, #204]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f34:	4b31      	ldr	r3, [pc, #196]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f3a:	4b30      	ldr	r3, [pc, #192]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f40:	4b2e      	ldr	r3, [pc, #184]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f42:	2204      	movs	r2, #4
 8000f44:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f46:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f4c:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f52:	4b2a      	ldr	r3, [pc, #168]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f58:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000f60:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f62:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f68:	4b24      	ldr	r3, [pc, #144]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f6e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f70:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f78:	4b20      	ldr	r3, [pc, #128]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f88:	2210      	movs	r2, #16
 8000f8a:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f8e:	2220      	movs	r2, #32
 8000f90:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000f92:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f9e:	4817      	ldr	r0, [pc, #92]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000fa0:	f002 fa1c 	bl	80033dc <HAL_ADC_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000faa:	f001 f9d3 	bl	8002354 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4810      	ldr	r0, [pc, #64]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000fba:	f003 fdb7 	bl	8004b2c <HAL_ADCEx_MultiModeConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000fc4:	f001 f9c6 	bl	8002354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <MX_ADC1_Init+0x104>)
 8000fca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fcc:	2306      	movs	r3, #6
 8000fce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fd4:	237f      	movs	r3, #127	; 0x7f
 8000fd6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000fe6:	f002 fe67 	bl	8003cb8 <HAL_ADC_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000ff0:	f001 f9b0 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	3730      	adds	r7, #48	; 0x30
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000384 	.word	0x20000384
 8001000:	04300002 	.word	0x04300002

08001004 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800100a:	463b      	mov	r3, r7
 800100c:	2220      	movs	r2, #32
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f00e fba4 	bl	800f75e <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001016:	4b31      	ldr	r3, [pc, #196]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001018:	4a31      	ldr	r2, [pc, #196]	; (80010e0 <MX_ADC2_Init+0xdc>)
 800101a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800101c:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <MX_ADC2_Init+0xd8>)
 800101e:	2200      	movs	r2, #0
 8001020:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001022:	4b2e      	ldr	r3, [pc, #184]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001028:	4b2c      	ldr	r3, [pc, #176]	; (80010dc <MX_ADC2_Init+0xd8>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800102e:	4b2b      	ldr	r3, [pc, #172]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001034:	4b29      	ldr	r3, [pc, #164]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800103a:	4b28      	ldr	r3, [pc, #160]	; (80010dc <MX_ADC2_Init+0xd8>)
 800103c:	2204      	movs	r2, #4
 800103e:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001040:	4b26      	ldr	r3, [pc, #152]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001042:	2200      	movs	r2, #0
 8001044:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001046:	4b25      	ldr	r3, [pc, #148]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001048:	2200      	movs	r2, #0
 800104a:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800104c:	4b23      	ldr	r3, [pc, #140]	; (80010dc <MX_ADC2_Init+0xd8>)
 800104e:	2201      	movs	r2, #1
 8001050:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001052:	4b22      	ldr	r3, [pc, #136]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <MX_ADC2_Init+0xd8>)
 800105c:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8001060:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001064:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001068:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <MX_ADC2_Init+0xd8>)
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001074:	2200      	movs	r2, #0
 8001076:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <MX_ADC2_Init+0xd8>)
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001082:	2210      	movs	r2, #16
 8001084:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001088:	2220      	movs	r2, #32
 800108a:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <MX_ADC2_Init+0xd8>)
 800108e:	2200      	movs	r2, #0
 8001090:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001092:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001094:	2201      	movs	r2, #1
 8001096:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001098:	4810      	ldr	r0, [pc, #64]	; (80010dc <MX_ADC2_Init+0xd8>)
 800109a:	f002 f99f 	bl	80033dc <HAL_ADC_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 80010a4:	f001 f956 	bl	8002354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_ADC2_Init+0xe0>)
 80010aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ac:	2306      	movs	r3, #6
 80010ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010b4:	237f      	movs	r3, #127	; 0x7f
 80010b6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010b8:	2304      	movs	r3, #4
 80010ba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010c0:	463b      	mov	r3, r7
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_ADC2_Init+0xd8>)
 80010c6:	f002 fdf7 	bl	8003cb8 <HAL_ADC_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 80010d0:	f001 f940 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200003f0 	.word	0x200003f0
 80010e0:	50000100 	.word	0x50000100
 80010e4:	0c900008 	.word	0x0c900008

080010e8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2220      	movs	r2, #32
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f00e fb2c 	bl	800f75e <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001106:	4b38      	ldr	r3, [pc, #224]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001108:	4a38      	ldr	r2, [pc, #224]	; (80011ec <MX_ADC3_Init+0x104>)
 800110a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800110c:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <MX_ADC3_Init+0x100>)
 800110e:	2200      	movs	r2, #0
 8001110:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001112:	4b35      	ldr	r3, [pc, #212]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001118:	4b33      	ldr	r3, [pc, #204]	; (80011e8 <MX_ADC3_Init+0x100>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 800111e:	4b32      	ldr	r3, [pc, #200]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001124:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001126:	2200      	movs	r2, #0
 8001128:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112a:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <MX_ADC3_Init+0x100>)
 800112c:	2204      	movs	r2, #4
 800112e:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001130:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001132:	2200      	movs	r2, #0
 8001134:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001136:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001138:	2200      	movs	r2, #0
 800113a:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800113c:	4b2a      	ldr	r3, [pc, #168]	; (80011e8 <MX_ADC3_Init+0x100>)
 800113e:	2201      	movs	r2, #1
 8001140:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001142:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800114a:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <MX_ADC3_Init+0x100>)
 800114c:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8001150:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001152:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001154:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001158:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800115a:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <MX_ADC3_Init+0x100>)
 800115c:	2201      	movs	r2, #1
 800115e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001164:	2200      	movs	r2, #0
 8001166:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_ADC3_Init+0x100>)
 800116a:	2201      	movs	r2, #1
 800116c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001172:	2210      	movs	r2, #16
 8001174:	645a      	str	r2, [r3, #68]	; 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001178:	2220      	movs	r2, #32
 800117a:	649a      	str	r2, [r3, #72]	; 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_ADC3_Init+0x100>)
 800117e:	2200      	movs	r2, #0
 8001180:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001184:	2201      	movs	r2, #1
 8001186:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001188:	4817      	ldr	r0, [pc, #92]	; (80011e8 <MX_ADC3_Init+0x100>)
 800118a:	f002 f927 	bl	80033dc <HAL_ADC_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001194:	f001 f8de 	bl	8002354 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800119c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a0:	4619      	mov	r1, r3
 80011a2:	4811      	ldr	r0, [pc, #68]	; (80011e8 <MX_ADC3_Init+0x100>)
 80011a4:	f003 fcc2 	bl	8004b2c <HAL_ADCEx_MultiModeConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_ADC3_Init+0xca>
  {
    Error_Handler();
 80011ae:	f001 f8d1 	bl	8002354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_ADC3_Init+0x108>)
 80011b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b6:	2306      	movs	r3, #6
 80011b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011be:	237f      	movs	r3, #127	; 0x7f
 80011c0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011c2:	2304      	movs	r3, #4
 80011c4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	4619      	mov	r1, r3
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <MX_ADC3_Init+0x100>)
 80011d0:	f002 fd72 	bl	8003cb8 <HAL_ADC_ConfigChannel>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_ADC3_Init+0xf6>
  {
    Error_Handler();
 80011da:	f001 f8bb 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	3730      	adds	r7, #48	; 0x30
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000045c 	.word	0x2000045c
 80011ec:	50000400 	.word	0x50000400
 80011f0:	04300002 	.word	0x04300002

080011f4 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011fa:	463b      	mov	r3, r7
 80011fc:	2220      	movs	r2, #32
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f00e faac 	bl	800f75e <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001206:	4b31      	ldr	r3, [pc, #196]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001208:	4a31      	ldr	r2, [pc, #196]	; (80012d0 <MX_ADC4_Init+0xdc>)
 800120a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800120c:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <MX_ADC4_Init+0xd8>)
 800120e:	2200      	movs	r2, #0
 8001210:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001218:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <MX_ADC4_Init+0xd8>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001224:	4b29      	ldr	r3, [pc, #164]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800122a:	4b28      	ldr	r3, [pc, #160]	; (80012cc <MX_ADC4_Init+0xd8>)
 800122c:	2204      	movs	r2, #4
 800122e:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001230:	4b26      	ldr	r3, [pc, #152]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001232:	2200      	movs	r2, #0
 8001234:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8001236:	4b25      	ldr	r3, [pc, #148]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001238:	2200      	movs	r2, #0
 800123a:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <MX_ADC4_Init+0xd8>)
 800123e:	2201      	movs	r2, #1
 8001240:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <MX_ADC4_Init+0xd8>)
 800124c:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8001250:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001252:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001254:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001258:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <MX_ADC4_Init+0xd8>)
 800125c:	2201      	movs	r2, #1
 800125e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001264:	2200      	movs	r2, #0
 8001266:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = ENABLE;
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <MX_ADC4_Init+0xd8>)
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc4.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001272:	2210      	movs	r2, #16
 8001274:	645a      	str	r2, [r3, #68]	; 0x44
  hadc4.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001278:	2220      	movs	r2, #32
 800127a:	649a      	str	r2, [r3, #72]	; 0x48
  hadc4.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_ADC4_Init+0xd8>)
 800127e:	2200      	movs	r2, #0
 8001280:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc4.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001284:	2201      	movs	r2, #1
 8001286:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001288:	4810      	ldr	r0, [pc, #64]	; (80012cc <MX_ADC4_Init+0xd8>)
 800128a:	f002 f8a7 	bl	80033dc <HAL_ADC_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ADC4_Init+0xa4>
  {
    Error_Handler();
 8001294:	f001 f85e 	bl	8002354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001298:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_ADC4_Init+0xe0>)
 800129a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800129c:	2306      	movs	r3, #6
 800129e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012a4:	237f      	movs	r3, #127	; 0x7f
 80012a6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012a8:	2304      	movs	r3, #4
 80012aa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_ADC4_Init+0xd8>)
 80012b6:	f002 fcff 	bl	8003cb8 <HAL_ADC_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_ADC4_Init+0xd0>
  {
    Error_Handler();
 80012c0:	f001 f848 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200004c8 	.word	0x200004c8
 80012d0:	50000500 	.word	0x50000500
 80012d4:	14f00020 	.word	0x14f00020

080012d8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08c      	sub	sp, #48	; 0x30
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012de:	463b      	mov	r3, r7
 80012e0:	2230      	movs	r2, #48	; 0x30
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f00e fa3a 	bl	800f75e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <MX_DAC1_Init+0x70>)
 80012ec:	4a17      	ldr	r2, [pc, #92]	; (800134c <MX_DAC1_Init+0x74>)
 80012ee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80012f0:	4815      	ldr	r0, [pc, #84]	; (8001348 <MX_DAC1_Init+0x70>)
 80012f2:	f003 fe32 	bl	8004f5a <HAL_DAC_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80012fc:	f001 f82a 	bl	8002354 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001300:	2302      	movs	r3, #2
 8001302:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800131c:	2301      	movs	r3, #1
 800131e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_USER;
 8001320:	2301      	movs	r3, #1
 8001322:	61fb      	str	r3, [r7, #28]
  sConfig.DAC_TrimmingValue = 1;
 8001324:	2301      	movs	r3, #1
 8001326:	623b      	str	r3, [r7, #32]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001328:	463b      	mov	r3, r7
 800132a:	2200      	movs	r2, #0
 800132c:	4619      	mov	r1, r3
 800132e:	4806      	ldr	r0, [pc, #24]	; (8001348 <MX_DAC1_Init+0x70>)
 8001330:	f003 fed0 	bl	80050d4 <HAL_DAC_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_DAC1_Init+0x66>
  {
    Error_Handler();
 800133a:	f001 f80b 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	3730      	adds	r7, #48	; 0x30
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200006b4 	.word	0x200006b4
 800134c:	50000800 	.word	0x50000800

08001350 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_I2C3_Init+0x74>)
 8001356:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <MX_I2C3_Init+0x78>)
 8001358:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x40707EB4;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <MX_I2C3_Init+0x74>)
 800135c:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <MX_I2C3_Init+0x7c>)
 800135e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 144;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_I2C3_Init+0x74>)
 8001362:	2290      	movs	r2, #144	; 0x90
 8001364:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_I2C3_Init+0x74>)
 8001368:	2201      	movs	r2, #1
 800136a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_I2C3_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_I2C3_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_I2C3_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_I2C3_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_I2C3_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800138a:	480e      	ldr	r0, [pc, #56]	; (80013c4 <MX_I2C3_Init+0x74>)
 800138c:	f004 ff87 	bl	800629e <HAL_I2C_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001396:	f000 ffdd 	bl	8002354 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800139a:	2100      	movs	r1, #0
 800139c:	4809      	ldr	r0, [pc, #36]	; (80013c4 <MX_I2C3_Init+0x74>)
 800139e:	f005 fd09 	bl	8006db4 <HAL_I2CEx_ConfigAnalogFilter>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80013a8:	f000 ffd4 	bl	8002354 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80013ac:	2100      	movs	r1, #0
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_I2C3_Init+0x74>)
 80013b0:	f005 fd4b 	bl	8006e4a <HAL_I2CEx_ConfigDigitalFilter>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80013ba:	f000 ffcb 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200006c8 	.word	0x200006c8
 80013c8:	40007800 	.word	0x40007800
 80013cc:	40707eb4 	.word	0x40707eb4

080013d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ee:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <MX_TIM2_Init+0x94>)
 80013f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 156 - 1;
 80013f6:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <MX_TIM2_Init+0x94>)
 80013f8:	229b      	movs	r2, #155	; 0x9b
 80013fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <MX_TIM2_Init+0x94>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <MX_TIM2_Init+0x94>)
 8001404:	2209      	movs	r2, #9
 8001406:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <MX_TIM2_Init+0x94>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <MX_TIM2_Init+0x94>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001414:	4813      	ldr	r0, [pc, #76]	; (8001464 <MX_TIM2_Init+0x94>)
 8001416:	f008 fa9d 	bl	8009954 <HAL_TIM_Base_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001420:	f000 ff98 	bl	8002354 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001428:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	4619      	mov	r1, r3
 8001430:	480c      	ldr	r0, [pc, #48]	; (8001464 <MX_TIM2_Init+0x94>)
 8001432:	f008 fb8f 	bl	8009b54 <HAL_TIM_ConfigClockSource>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800143c:	f000 ff8a 	bl	8002354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001440:	2320      	movs	r3, #32
 8001442:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	4619      	mov	r1, r3
 800144c:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_TIM2_Init+0x94>)
 800144e:	f008 fde7 	bl	800a020 <HAL_TIMEx_MasterConfigSynchronization>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001458:	f000 ff7c 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800145c:	bf00      	nop
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	2000071c 	.word	0x2000071c

08001468 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800146e:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <MX_DMA_Init+0x80>)
 8001470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001472:	4a1d      	ldr	r2, [pc, #116]	; (80014e8 <MX_DMA_Init+0x80>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6493      	str	r3, [r2, #72]	; 0x48
 800147a:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <MX_DMA_Init+0x80>)
 800147c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <MX_DMA_Init+0x80>)
 8001488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800148a:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <MX_DMA_Init+0x80>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6493      	str	r3, [r2, #72]	; 0x48
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <MX_DMA_Init+0x80>)
 8001494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	200b      	movs	r0, #11
 80014a4:	f003 fd25 	bl	8004ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014a8:	200b      	movs	r0, #11
 80014aa:	f003 fd3c 	bl	8004f26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	200c      	movs	r0, #12
 80014b4:	f003 fd1d 	bl	8004ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014b8:	200c      	movs	r0, #12
 80014ba:	f003 fd34 	bl	8004f26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	200d      	movs	r0, #13
 80014c4:	f003 fd15 	bl	8004ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80014c8:	200d      	movs	r0, #13
 80014ca:	f003 fd2c 	bl	8004f26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	200e      	movs	r0, #14
 80014d4:	f003 fd0d 	bl	8004ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80014d8:	200e      	movs	r0, #14
 80014da:	f003 fd24 	bl	8004f26 <HAL_NVIC_EnableIRQ>

}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000

080014ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001502:	4b4d      	ldr	r3, [pc, #308]	; (8001638 <MX_GPIO_Init+0x14c>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	4a4c      	ldr	r2, [pc, #304]	; (8001638 <MX_GPIO_Init+0x14c>)
 8001508:	f043 0320 	orr.w	r3, r3, #32
 800150c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150e:	4b4a      	ldr	r3, [pc, #296]	; (8001638 <MX_GPIO_Init+0x14c>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	f003 0320 	and.w	r3, r3, #32
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	4b47      	ldr	r3, [pc, #284]	; (8001638 <MX_GPIO_Init+0x14c>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	4a46      	ldr	r2, [pc, #280]	; (8001638 <MX_GPIO_Init+0x14c>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001526:	4b44      	ldr	r3, [pc, #272]	; (8001638 <MX_GPIO_Init+0x14c>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <MX_GPIO_Init+0x14c>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	4a40      	ldr	r2, [pc, #256]	; (8001638 <MX_GPIO_Init+0x14c>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153e:	4b3e      	ldr	r3, [pc, #248]	; (8001638 <MX_GPIO_Init+0x14c>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	4b3b      	ldr	r3, [pc, #236]	; (8001638 <MX_GPIO_Init+0x14c>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	4a3a      	ldr	r2, [pc, #232]	; (8001638 <MX_GPIO_Init+0x14c>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001556:	4b38      	ldr	r3, [pc, #224]	; (8001638 <MX_GPIO_Init+0x14c>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ERRATA_FIX1_Pin|ERRATA_FIX2_Pin|ERRATA_FIX3_Pin|ERRATA_FIX4_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 41d8 	mov.w	r1, #27648	; 0x6c00
 8001568:	4834      	ldr	r0, [pc, #208]	; (800163c <MX_GPIO_Init+0x150>)
 800156a:	f004 fe5d 	bl	8006228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IND_LED_R_Pin|IND_LED_G_Pin|IND_LED_B_Pin, GPIO_PIN_SET);
 800156e:	2201      	movs	r2, #1
 8001570:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001574:	4832      	ldr	r0, [pc, #200]	; (8001640 <MX_GPIO_Init+0x154>)
 8001576:	f004 fe57 	bl	8006228 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ERRATA_FIX1_Pin ERRATA_FIX2_Pin ERRATA_FIX3_Pin ERRATA_FIX4_Pin */
  GPIO_InitStruct.Pin = ERRATA_FIX1_Pin|ERRATA_FIX2_Pin|ERRATA_FIX3_Pin|ERRATA_FIX4_Pin;
 800157a:	f44f 43d8 	mov.w	r3, #27648	; 0x6c00
 800157e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	482a      	ldr	r0, [pc, #168]	; (800163c <MX_GPIO_Init+0x150>)
 8001594:	f004 fbe4 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_ALERT_Pin */
  GPIO_InitStruct.Pin = TEMP_ALERT_Pin;
 8001598:	f44f 7380 	mov.w	r3, #256	; 0x100
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_ALERT_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b0:	f004 fbd6 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : IND_LED_R_Pin IND_LED_G_Pin IND_LED_B_Pin */
  GPIO_InitStruct.Pin = IND_LED_R_Pin|IND_LED_G_Pin|IND_LED_B_Pin;
 80015b4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	481c      	ldr	r0, [pc, #112]	; (8001640 <MX_GPIO_Init+0x154>)
 80015ce:	f004 fbc7 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_SHORT_Pin */
  GPIO_InitStruct.Pin = TRIG_SHORT_Pin;
 80015d2:	2320      	movs	r3, #32
 80015d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_SHORT_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	4815      	ldr	r0, [pc, #84]	; (800163c <MX_GPIO_Init+0x150>)
 80015e8:	f004 fbba 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_EXT_2_Pin */
  GPIO_InitStruct.Pin = TRIG_EXT_2_Pin;
 80015ec:	2340      	movs	r3, #64	; 0x40
 80015ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_EXT_2_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	480e      	ldr	r0, [pc, #56]	; (800163c <MX_GPIO_Init+0x150>)
 8001602:	f004 fbad 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_EXT_1_Pin */
  GPIO_InitStruct.Pin = TRIG_EXT_1_Pin;
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800160a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800160e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001610:	2302      	movs	r3, #2
 8001612:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_EXT_1_GPIO_Port, &GPIO_InitStruct);
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4619      	mov	r1, r3
 800161a:	4808      	ldr	r0, [pc, #32]	; (800163c <MX_GPIO_Init+0x150>)
 800161c:	f004 fba0 	bl	8005d60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	2017      	movs	r0, #23
 8001626:	f003 fc64 	bl	8004ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800162a:	2017      	movs	r0, #23
 800162c:	f003 fc7b 	bl	8004f26 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001630:	bf00      	nop
 8001632:	3728      	adds	r7, #40	; 0x28
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40021000 	.word	0x40021000
 800163c:	48000400 	.word	0x48000400
 8001640:	48000800 	.word	0x48000800

08001644 <InterpretConfig>:

/* USER CODE BEGIN 4 */

int InterpretConfig(void) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b0a6      	sub	sp, #152	; 0x98
 8001648:	af00      	add	r7, sp, #0
	char variable_name[CFG_VAR_SIZE];
	char variable_value[CFG_VAR_SIZE];
	memset(variable_name, 0, sizeof(variable_name));
 800164a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800164e:	2240      	movs	r2, #64	; 0x40
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f00e f883 	bl	800f75e <memset>
	memset(variable_value, 0, sizeof(variable_value));
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	2240      	movs	r2, #64	; 0x40
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f00e f87c 	bl	800f75e <memset>
	int variable_name_indexes[2] = {0, 0};
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
	int variable_value_indexes[2] = {0, 0};
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
	char reading_status = 'n';
 8001676:	236e      	movs	r3, #110	; 0x6e
 8001678:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	for(int i = 0; i < USB_RX_BUFFER_SIZE; i++){
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001682:	e077      	b.n	8001774 <InterpretConfig+0x130>
		if(rx_buffer[i] == '\0'){
 8001684:	4a42      	ldr	r2, [pc, #264]	; (8001790 <InterpretConfig+0x14c>)
 8001686:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800168a:	4413      	add	r3, r2
 800168c:	f993 3000 	ldrsb.w	r3, [r3]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d074      	beq.n	800177e <InterpretConfig+0x13a>
			break;
		}
		// Reading the variable name
		if(reading_status == 'n'){
 8001694:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001698:	2b6e      	cmp	r3, #110	; 0x6e
 800169a:	d112      	bne.n	80016c2 <InterpretConfig+0x7e>
			if(rx_buffer[i] == ':') {
 800169c:	4a3c      	ldr	r2, [pc, #240]	; (8001790 <InterpretConfig+0x14c>)
 800169e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016a2:	4413      	add	r3, r2
 80016a4:	f993 3000 	ldrsb.w	r3, [r3]
 80016a8:	2b3a      	cmp	r3, #58	; 0x3a
 80016aa:	d15e      	bne.n	800176a <InterpretConfig+0x126>
				variable_name_indexes[1] = i;
 80016ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016b0:	60fb      	str	r3, [r7, #12]
				variable_value_indexes[0] = i+1;
 80016b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016b6:	3301      	adds	r3, #1
 80016b8:	603b      	str	r3, [r7, #0]
				reading_status = 'v';
 80016ba:	2376      	movs	r3, #118	; 0x76
 80016bc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80016c0:	e053      	b.n	800176a <InterpretConfig+0x126>
			}
		}
		// Reading the variable value
		else if(reading_status == 'v'){
 80016c2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80016c6:	2b76      	cmp	r3, #118	; 0x76
 80016c8:	d14f      	bne.n	800176a <InterpretConfig+0x126>
			if(rx_buffer[i] == ';') {
 80016ca:	4a31      	ldr	r2, [pc, #196]	; (8001790 <InterpretConfig+0x14c>)
 80016cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016d0:	4413      	add	r3, r2
 80016d2:	f993 3000 	ldrsb.w	r3, [r3]
 80016d6:	2b3b      	cmp	r3, #59	; 0x3b
 80016d8:	d147      	bne.n	800176a <InterpretConfig+0x126>
				variable_value_indexes[1] = i;
 80016da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016de:	607b      	str	r3, [r7, #4]

				strncpy(variable_name, ((char*)rx_buffer + variable_name_indexes[0]), (variable_name_indexes[1] - variable_name_indexes[0]));
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <InterpretConfig+0x14c>)
 80016e6:	18d1      	adds	r1, r2, r3
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	461a      	mov	r2, r3
 80016f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00e f83a 	bl	800f76e <strncpy>
				variable_name[variable_name_indexes[1] + 1] = '\0';
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3301      	adds	r3, #1
 80016fe:	3398      	adds	r3, #152	; 0x98
 8001700:	443b      	add	r3, r7
 8001702:	2200      	movs	r2, #0
 8001704:	f803 2c48 	strb.w	r2, [r3, #-72]
				strncpy(variable_value, ((char*)rx_buffer + variable_value_indexes[0]), (variable_value_indexes[1] - variable_value_indexes[0]));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	4b20      	ldr	r3, [pc, #128]	; (8001790 <InterpretConfig+0x14c>)
 800170e:	18d1      	adds	r1, r2, r3
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	461a      	mov	r2, r3
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	4618      	mov	r0, r3
 800171e:	f00e f826 	bl	800f76e <strncpy>
				variable_value[variable_value_indexes[1] + 1] = '\0';
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3301      	adds	r3, #1
 8001726:	3398      	adds	r3, #152	; 0x98
 8001728:	443b      	add	r3, r7
 800172a:	2200      	movs	r2, #0
 800172c:	f803 2c88 	strb.w	r2, [r3, #-136]

				InterpretVariable(variable_name, variable_value);
 8001730:	f107 0210 	add.w	r2, r7, #16
 8001734:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001738:	4611      	mov	r1, r2
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f82c 	bl	8001798 <InterpretVariable>
				memset(variable_name, 0, sizeof(variable_name));
 8001740:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001744:	2240      	movs	r2, #64	; 0x40
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f00e f808 	bl	800f75e <memset>
				memset(variable_value, 0, sizeof(variable_value));
 800174e:	f107 0310 	add.w	r3, r7, #16
 8001752:	2240      	movs	r2, #64	; 0x40
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f00e f801 	bl	800f75e <memset>
				variable_name_indexes[0] = i + 1;
 800175c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001760:	3301      	adds	r3, #1
 8001762:	60bb      	str	r3, [r7, #8]
				reading_status = 'n';
 8001764:	236e      	movs	r3, #110	; 0x6e
 8001766:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	for(int i = 0; i < USB_RX_BUFFER_SIZE; i++){
 800176a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800176e:	3301      	adds	r3, #1
 8001770:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001774:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001778:	2bff      	cmp	r3, #255	; 0xff
 800177a:	dd83      	ble.n	8001684 <InterpretConfig+0x40>
 800177c:	e000      	b.n	8001780 <InterpretConfig+0x13c>
			break;
 800177e:	bf00      	nop
			}
		}
	}

	prog_state = CFG_INTERPRETED;
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <InterpretConfig+0x150>)
 8001782:	2202      	movs	r2, #2
 8001784:	701a      	strb	r2, [r3, #0]
	return 1;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	3798      	adds	r7, #152	; 0x98
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	200026b4 	.word	0x200026b4
 8001794:	200027b4 	.word	0x200027b4

08001798 <InterpretVariable>:

int InterpretVariable(char name[CFG_VAR_SIZE], char value[CFG_VAR_SIZE]) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
	if(strcmp(name, "RecLen") == 0) {
 80017a2:	4931      	ldr	r1, [pc, #196]	; (8001868 <InterpretVariable+0xd0>)
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7fe fd3b 	bl	8000220 <strcmp>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d107      	bne.n	80017c0 <InterpretVariable+0x28>
		record_length_ms = (uint16_t)atoi(value);
 80017b0:	6838      	ldr	r0, [r7, #0]
 80017b2:	f00d f9b9 	bl	800eb28 <atoi>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	4b2c      	ldr	r3, [pc, #176]	; (800186c <InterpretVariable+0xd4>)
 80017bc:	801a      	strh	r2, [r3, #0]
 80017be:	e04e      	b.n	800185e <InterpretVariable+0xc6>
	}
	else if(strcmp(name, "RecInt") == 0) {
 80017c0:	492b      	ldr	r1, [pc, #172]	; (8001870 <InterpretVariable+0xd8>)
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7fe fd2c 	bl	8000220 <strcmp>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d107      	bne.n	80017de <InterpretVariable+0x46>
		record_interval_us = (uint16_t)atoi(value);
 80017ce:	6838      	ldr	r0, [r7, #0]
 80017d0:	f00d f9aa 	bl	800eb28 <atoi>
 80017d4:	4603      	mov	r3, r0
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	4b26      	ldr	r3, [pc, #152]	; (8001874 <InterpretVariable+0xdc>)
 80017da:	801a      	strh	r2, [r3, #0]
 80017dc:	e03f      	b.n	800185e <InterpretVariable+0xc6>
	}
	else if(strcmp(name, "TcType") == 0) {
 80017de:	4926      	ldr	r1, [pc, #152]	; (8001878 <InterpretVariable+0xe0>)
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7fe fd1d 	bl	8000220 <strcmp>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d104      	bne.n	80017f6 <InterpretVariable+0x5e>
		tc_type = value[0];
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	4b22      	ldr	r3, [pc, #136]	; (800187c <InterpretVariable+0xe4>)
 80017f2:	701a      	strb	r2, [r3, #0]
 80017f4:	e033      	b.n	800185e <InterpretVariable+0xc6>
	}
	else if(strcmp(name, "EnChan") == 0) {
 80017f6:	4922      	ldr	r1, [pc, #136]	; (8001880 <InterpretVariable+0xe8>)
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7fe fd11 	bl	8000220 <strcmp>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d12c      	bne.n	800185e <InterpretVariable+0xc6>
		int channel_index = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
		char *channel_status = strtok(value, "|");
 8001808:	491e      	ldr	r1, [pc, #120]	; (8001884 <InterpretVariable+0xec>)
 800180a:	6838      	ldr	r0, [r7, #0]
 800180c:	f00d ffc2 	bl	800f794 <strtok>
 8001810:	6138      	str	r0, [r7, #16]

		while(channel_status != NULL) {
 8001812:	e00f      	b.n	8001834 <InterpretVariable+0x9c>
			channel_enabled_status[channel_index] = channel_status[0] - '0';
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	3b30      	subs	r3, #48	; 0x30
 800181a:	4619      	mov	r1, r3
 800181c:	4a1a      	ldr	r2, [pc, #104]	; (8001888 <InterpretVariable+0xf0>)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			channel_status = strtok(NULL, "|");
 8001824:	4917      	ldr	r1, [pc, #92]	; (8001884 <InterpretVariable+0xec>)
 8001826:	2000      	movs	r0, #0
 8001828:	f00d ffb4 	bl	800f794 <strtok>
 800182c:	6138      	str	r0, [r7, #16]
			channel_index++;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3301      	adds	r3, #1
 8001832:	617b      	str	r3, [r7, #20]
		while(channel_status != NULL) {
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1ec      	bne.n	8001814 <InterpretVariable+0x7c>
		}

		for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	e00b      	b.n	8001858 <InterpretVariable+0xc0>
			channel_enabled_count += channel_enabled_status[i];
 8001840:	4a11      	ldr	r2, [pc, #68]	; (8001888 <InterpretVariable+0xf0>)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <InterpretVariable+0xf4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4413      	add	r3, r2
 800184e:	4a0f      	ldr	r2, [pc, #60]	; (800188c <InterpretVariable+0xf4>)
 8001850:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3301      	adds	r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b03      	cmp	r3, #3
 800185c:	ddf0      	ble.n	8001840 <InterpretVariable+0xa8>
		}
	}

	return 1;
 800185e:	2301      	movs	r3, #1
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	080128b8 	.word	0x080128b8
 800186c:	20000004 	.word	0x20000004
 8001870:	080128c0 	.word	0x080128c0
 8001874:	20000006 	.word	0x20000006
 8001878:	080128c8 	.word	0x080128c8
 800187c:	20000008 	.word	0x20000008
 8001880:	080128d0 	.word	0x080128d0
 8001884:	080128d8 	.word	0x080128d8
 8001888:	200027cc 	.word	0x200027cc
 800188c:	200027c8 	.word	0x200027c8

08001890 <SetupMeasurement>:

int SetupMeasurement(void){
 8001890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001894:	b09c      	sub	sp, #112	; 0x70
 8001896:	af04      	add	r7, sp, #16
	// > Set the correct analog reference voltage and get the relevant coefficients

	const double *used_coefficients;
	uint8_t coefficients_count;
	if(tc_type == 'E') {
 8001898:	4b65      	ldr	r3, [pc, #404]	; (8001a30 <SetupMeasurement+0x1a0>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b45      	cmp	r3, #69	; 0x45
 800189e:	d108      	bne.n	80018b2 <SetupMeasurement+0x22>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2); // 2.9V
 80018a0:	2020      	movs	r0, #32
 80018a2:	f001 fae3 	bl	8002e6c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		used_coefficients = type_e_coefficients;
 80018a6:	4b63      	ldr	r3, [pc, #396]	; (8001a34 <SetupMeasurement+0x1a4>)
 80018a8:	65fb      	str	r3, [r7, #92]	; 0x5c
		coefficients_count = type_e_coefficients_count;
 80018aa:	230e      	movs	r3, #14
 80018ac:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80018b0:	e025      	b.n	80018fe <SetupMeasurement+0x6e>
	}
	else if(tc_type == 'J') {
 80018b2:	4b5f      	ldr	r3, [pc, #380]	; (8001a30 <SetupMeasurement+0x1a0>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b4a      	cmp	r3, #74	; 0x4a
 80018b8:	d108      	bne.n	80018cc <SetupMeasurement+0x3c>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1); // 2.5V
 80018ba:	2010      	movs	r0, #16
 80018bc:	f001 fad6 	bl	8002e6c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		used_coefficients = type_j_coefficients;
 80018c0:	4b5d      	ldr	r3, [pc, #372]	; (8001a38 <SetupMeasurement+0x1a8>)
 80018c2:	65fb      	str	r3, [r7, #92]	; 0x5c
		coefficients_count = type_j_coefficients_count;
 80018c4:	2309      	movs	r3, #9
 80018c6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80018ca:	e018      	b.n	80018fe <SetupMeasurement+0x6e>
	}
	else if(tc_type == 'K') {
 80018cc:	4b58      	ldr	r3, [pc, #352]	; (8001a30 <SetupMeasurement+0x1a0>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b4b      	cmp	r3, #75	; 0x4b
 80018d2:	d108      	bne.n	80018e6 <SetupMeasurement+0x56>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0); // 2.048V
 80018d4:	2000      	movs	r0, #0
 80018d6:	f001 fac9 	bl	8002e6c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		used_coefficients = type_k_coefficients;
 80018da:	4b58      	ldr	r3, [pc, #352]	; (8001a3c <SetupMeasurement+0x1ac>)
 80018dc:	65fb      	str	r3, [r7, #92]	; 0x5c
		coefficients_count = type_k_coefficients_count;
 80018de:	230b      	movs	r3, #11
 80018e0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80018e4:	e00b      	b.n	80018fe <SetupMeasurement+0x6e>
	}
	else if(tc_type == 'T') {
 80018e6:	4b52      	ldr	r3, [pc, #328]	; (8001a30 <SetupMeasurement+0x1a0>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b54      	cmp	r3, #84	; 0x54
 80018ec:	d107      	bne.n	80018fe <SetupMeasurement+0x6e>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0); // 2.048V
 80018ee:	2000      	movs	r0, #0
 80018f0:	f001 fabc 	bl	8002e6c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		used_coefficients = type_t_coefficients;
 80018f4:	4b52      	ldr	r3, [pc, #328]	; (8001a40 <SetupMeasurement+0x1b0>)
 80018f6:	65fb      	str	r3, [r7, #92]	; 0x5c
		coefficients_count = type_t_coefficients_count;
 80018f8:	230f      	movs	r3, #15
 80018fa:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	}

	// Measure the actual analog reference voltage
	HAL_Delay(100);
 80018fe:	2064      	movs	r0, #100	; 0x64
 8001900:	f001 fa92 	bl	8002e28 <HAL_Delay>
	analog_reference_voltage = MeasureVref();
 8001904:	f000 f9e8 	bl	8001cd8 <MeasureVref>
 8001908:	eef0 7a40 	vmov.f32	s15, s0
 800190c:	4b4d      	ldr	r3, [pc, #308]	; (8001a44 <SetupMeasurement+0x1b4>)
 800190e:	edc3 7a00 	vstr	s15, [r3]
	adc_states[0] = EMPTY;
 8001912:	4b4d      	ldr	r3, [pc, #308]	; (8001a48 <SetupMeasurement+0x1b8>)
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
	dropped_packet_count = 0;
 8001918:	4b4c      	ldr	r3, [pc, #304]	; (8001a4c <SetupMeasurement+0x1bc>)
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]

	// > Calculate and set ADC sync timer
	__HAL_TIM_SET_AUTORELOAD(&htim2, record_interval_us - 1);
 800191e:	4b4c      	ldr	r3, [pc, #304]	; (8001a50 <SetupMeasurement+0x1c0>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	1e5a      	subs	r2, r3, #1
 8001924:	4b4b      	ldr	r3, [pc, #300]	; (8001a54 <SetupMeasurement+0x1c4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	62da      	str	r2, [r3, #44]	; 0x2c
 800192a:	4b49      	ldr	r3, [pc, #292]	; (8001a50 <SetupMeasurement+0x1c0>)
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	3b01      	subs	r3, #1
 8001930:	461a      	mov	r2, r3
 8001932:	4b48      	ldr	r3, [pc, #288]	; (8001a54 <SetupMeasurement+0x1c4>)
 8001934:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(&htim2, record_interval_us - 1);
 8001936:	4b46      	ldr	r3, [pc, #280]	; (8001a50 <SetupMeasurement+0x1c0>)
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	1e5a      	subs	r2, r3, #1
 800193c:	4b45      	ldr	r3, [pc, #276]	; (8001a54 <SetupMeasurement+0x1c4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	625a      	str	r2, [r3, #36]	; 0x24

	// > Calculate and set DAC value

	// Initiate a one shot temperature conversion
	uint8_t one_shot_conversion_command = 0b01000100;
 8001942:	2344      	movs	r3, #68	; 0x44
 8001944:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	HAL_I2C_Mem_Write(&hi2c3, (TEMP_SENSOR_ADDR << 1), 0x1, I2C_MEMADD_SIZE_8BIT, &one_shot_conversion_command, 1, HAL_MAX_DELAY);
 8001948:	f04f 33ff 	mov.w	r3, #4294967295
 800194c:	9302      	str	r3, [sp, #8]
 800194e:	2301      	movs	r3, #1
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2301      	movs	r3, #1
 800195a:	2201      	movs	r2, #1
 800195c:	2190      	movs	r1, #144	; 0x90
 800195e:	483e      	ldr	r0, [pc, #248]	; (8001a58 <SetupMeasurement+0x1c8>)
 8001960:	f004 fd38 	bl	80063d4 <HAL_I2C_Mem_Write>
	// Read the temperature
	uint8_t temp_buffer[2];
	HAL_I2C_Mem_Read(&hi2c3, (TEMP_SENSOR_ADDR << 1), 0x0, I2C_MEMADD_SIZE_8BIT, temp_buffer, 2, HAL_MAX_DELAY);
 8001964:	f04f 33ff 	mov.w	r3, #4294967295
 8001968:	9302      	str	r3, [sp, #8]
 800196a:	2302      	movs	r3, #2
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2301      	movs	r3, #1
 8001976:	2200      	movs	r2, #0
 8001978:	2190      	movs	r1, #144	; 0x90
 800197a:	4837      	ldr	r0, [pc, #220]	; (8001a58 <SetupMeasurement+0x1c8>)
 800197c:	f004 fe3e 	bl	80065fc <HAL_I2C_Mem_Read>

	// Calculate the temperature in C
	uint8_t negative_temperature_flag = temp_buffer[0] >> 7;
 8001980:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001984:	09db      	lsrs	r3, r3, #7
 8001986:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	temp_buffer[0] &= 0b01111111;
 800198a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800198e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001992:	b2db      	uxtb	r3, r3
 8001994:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	uint16_t sensor_output = (temp_buffer[0] << 2) | (temp_buffer[1] >> 6);
 8001998:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	b21a      	sxth	r2, r3
 80019a0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80019a4:	099b      	lsrs	r3, r3, #6
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	4313      	orrs	r3, r2
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

	if(negative_temperature_flag) {
 80019b2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d015      	beq.n	80019e6 <SetupMeasurement+0x156>
		cold_junction_temp = (sensor_output - 512)/4.0;
 80019ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80019be:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fde6 	bl	8000594 <__aeabi_i2d>
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <SetupMeasurement+0x1cc>)
 80019ce:	f7fe ff75 	bl	80008bc <__aeabi_ddiv>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	f7ff f93d 	bl	8000c58 <__aeabi_d2f>
 80019de:	4603      	mov	r3, r0
 80019e0:	4a1f      	ldr	r2, [pc, #124]	; (8001a60 <SetupMeasurement+0x1d0>)
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	e012      	b.n	8001a0c <SetupMeasurement+0x17c>
	}
	else{
		cold_junction_temp = (sensor_output)/4.0;
 80019e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fdd2 	bl	8000594 <__aeabi_i2d>
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <SetupMeasurement+0x1cc>)
 80019f6:	f7fe ff61 	bl	80008bc <__aeabi_ddiv>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	f7ff f929 	bl	8000c58 <__aeabi_d2f>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4a15      	ldr	r2, [pc, #84]	; (8001a60 <SetupMeasurement+0x1d0>)
 8001a0a:	6013      	str	r3, [r2, #0]
	}

	// Calculate the required DAC offset
	float cjc_offset_temperature = MINIMUM_TEMPERATURE - cold_junction_temp;
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <SetupMeasurement+0x1d0>)
 8001a0e:	edd3 7a00 	vldr	s15, [r3]
 8001a12:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8001a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a1a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	double cjc_offset_voltage = 0;
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	for(int i = 0; i < coefficients_count; i++) {
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a2e:	e042      	b.n	8001ab6 <SetupMeasurement+0x226>
 8001a30:	20000008 	.word	0x20000008
 8001a34:	08012a78 	.word	0x08012a78
 8001a38:	08012960 	.word	0x08012960
 8001a3c:	080129a8 	.word	0x080129a8
 8001a40:	08012a00 	.word	0x08012a00
 8001a44:	20000000 	.word	0x20000000
 8001a48:	200027c4 	.word	0x200027c4
 8001a4c:	20000770 	.word	0x20000770
 8001a50:	20000006 	.word	0x20000006
 8001a54:	2000071c 	.word	0x2000071c
 8001a58:	200006c8 	.word	0x200006c8
 8001a5c:	40100000 	.word	0x40100000
 8001a60:	200027b8 	.word	0x200027b8
		cjc_offset_voltage += used_coefficients[i] * pow(cjc_offset_temperature, i);
 8001a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a6a:	4413      	add	r3, r2
 8001a6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001a70:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a72:	f7fe fda1 	bl	80005b8 <__aeabi_f2d>
 8001a76:	4682      	mov	sl, r0
 8001a78:	468b      	mov	fp, r1
 8001a7a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a7c:	f7fe fd8a 	bl	8000594 <__aeabi_i2d>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	ec43 2b11 	vmov	d1, r2, r3
 8001a88:	ec4b ab10 	vmov	d0, sl, fp
 8001a8c:	f00f ffd0 	bl	8011a30 <pow>
 8001a90:	ec53 2b10 	vmov	r2, r3, d0
 8001a94:	4640      	mov	r0, r8
 8001a96:	4649      	mov	r1, r9
 8001a98:	f7fe fde6 	bl	8000668 <__aeabi_dmul>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001aa4:	f7fe fc2a 	bl	80002fc <__adddf3>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	for(int i = 0; i < coefficients_count; i++) {
 8001ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ab6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001aba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001abc:	429a      	cmp	r2, r3
 8001abe:	dbd1      	blt.n	8001a64 <SetupMeasurement+0x1d4>
	}

	double total_offset_calc = INAMP_OUTPUT_BUFFER_OFFSET + ((-1) * (cjc_offset_voltage * pow(10, -6)) * INAMP_GAIN);
 8001ac0:	a37f      	add	r3, pc, #508	; (adr r3, 8001cc0 <SetupMeasurement+0x430>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001aca:	f7fe fdcd 	bl	8000668 <__aeabi_dmul>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4614      	mov	r4, r2
 8001ad4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001ad8:	a37b      	add	r3, pc, #492	; (adr r3, 8001cc8 <SetupMeasurement+0x438>)
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	4620      	mov	r0, r4
 8001ae0:	4629      	mov	r1, r5
 8001ae2:	f7fe fdc1 	bl	8000668 <__aeabi_dmul>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	a378      	add	r3, pc, #480	; (adr r3, 8001cd0 <SetupMeasurement+0x440>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe fc02 	bl	80002fc <__adddf3>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	uint32_t offset = (uint32_t)(total_offset_calc * 4096) / analog_reference_voltage;
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	4b62      	ldr	r3, [pc, #392]	; (8001c90 <SetupMeasurement+0x400>)
 8001b06:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b0a:	f7fe fdad 	bl	8000668 <__aeabi_dmul>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	f7ff f87f 	bl	8000c18 <__aeabi_d2uiz>
 8001b1a:	ee07 0a90 	vmov	s15, r0
 8001b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b22:	4b5c      	ldr	r3, [pc, #368]	; (8001c94 <SetupMeasurement+0x404>)
 8001b24:	ed93 7a00 	vldr	s14, [r3]
 8001b28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b30:	ee17 3a90 	vmov	r3, s15
 8001b34:	637b      	str	r3, [r7, #52]	; 0x34
	applied_voltage_offset = (float)(offset * analog_reference_voltage) / 4096;
 8001b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b38:	ee07 3a90 	vmov	s15, r3
 8001b3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b40:	4b54      	ldr	r3, [pc, #336]	; (8001c94 <SetupMeasurement+0x404>)
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b4a:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001c98 <SetupMeasurement+0x408>
 8001b4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b52:	4b52      	ldr	r3, [pc, #328]	; (8001c9c <SetupMeasurement+0x40c>)
 8001b54:	edc3 7a00 	vstr	s15, [r3]

	// Calibrate the DAC
	DAC_ChannelConfTypeDef sConfig = {0};
 8001b58:	463b      	mov	r3, r7
 8001b5a:	2230      	movs	r2, #48	; 0x30
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f00d fdfd 	bl	800f75e <memset>
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001b64:	2302      	movs	r3, #2
 8001b66:	603b      	str	r3, [r7, #0]
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	713b      	strb	r3, [r7, #4]
	sConfig.DAC_SignedFormat = DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	717b      	strb	r3, [r7, #5]
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	613b      	str	r3, [r7, #16]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001b80:	2301      	movs	r3, #1
 8001b82:	61bb      	str	r3, [r7, #24]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_USER;
 8001b84:	2301      	movs	r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001b88:	463b      	mov	r3, r7
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4844      	ldr	r0, [pc, #272]	; (8001ca0 <SetupMeasurement+0x410>)
 8001b90:	f003 faa0 	bl	80050d4 <HAL_DAC_ConfigChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <SetupMeasurement+0x30e>
	{
	Error_Handler();
 8001b9a:	f000 fbdb 	bl	8002354 <Error_Handler>
	}
	HAL_DACEx_SelfCalibrate(&hdac1, &sConfig, DAC_CHANNEL_1);
 8001b9e:	463b      	mov	r3, r7
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	483e      	ldr	r0, [pc, #248]	; (8001ca0 <SetupMeasurement+0x410>)
 8001ba6:	f003 fc4d 	bl	8005444 <HAL_DACEx_SelfCalibrate>

	// Set the DAC voltage
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, offset);
 8001baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bac:	2200      	movs	r2, #0
 8001bae:	2100      	movs	r1, #0
 8001bb0:	483b      	ldr	r0, [pc, #236]	; (8001ca0 <SetupMeasurement+0x410>)
 8001bb2:	f003 fa61 	bl	8005078 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4839      	ldr	r0, [pc, #228]	; (8001ca0 <SetupMeasurement+0x410>)
 8001bba:	f003 f9f1 	bl	8004fa0 <HAL_DAC_Start>


	// Calculate the target packet number
	target_packet_count = (record_length_ms * 1000.0 / record_interval_us) / (ADC_BUFFER_SIZE / 2);
 8001bbe:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <SetupMeasurement+0x414>)
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fce6 	bl	8000594 <__aeabi_i2d>
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	4b36      	ldr	r3, [pc, #216]	; (8001ca8 <SetupMeasurement+0x418>)
 8001bce:	f7fe fd4b 	bl	8000668 <__aeabi_dmul>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4614      	mov	r4, r2
 8001bd8:	461d      	mov	r5, r3
 8001bda:	4b34      	ldr	r3, [pc, #208]	; (8001cac <SetupMeasurement+0x41c>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fcd8 	bl	8000594 <__aeabi_i2d>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4620      	mov	r0, r4
 8001bea:	4629      	mov	r1, r5
 8001bec:	f7fe fe66 	bl	80008bc <__aeabi_ddiv>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	4b2c      	ldr	r3, [pc, #176]	; (8001cb0 <SetupMeasurement+0x420>)
 8001bfe:	f7fe fe5d 	bl	80008bc <__aeabi_ddiv>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f7fe ffdd 	bl	8000bc8 <__aeabi_d2iz>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4a28      	ldr	r2, [pc, #160]	; (8001cb4 <SetupMeasurement+0x424>)
 8001c12:	6013      	str	r3, [r2, #0]
	if((int)(record_length_ms * 1000.0 / record_interval_us) % (ADC_BUFFER_SIZE / 2) != 0){
 8001c14:	4b23      	ldr	r3, [pc, #140]	; (8001ca4 <SetupMeasurement+0x414>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fcbb 	bl	8000594 <__aeabi_i2d>
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <SetupMeasurement+0x418>)
 8001c24:	f7fe fd20 	bl	8000668 <__aeabi_dmul>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4614      	mov	r4, r2
 8001c2e:	461d      	mov	r5, r3
 8001c30:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <SetupMeasurement+0x41c>)
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fcad 	bl	8000594 <__aeabi_i2d>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4620      	mov	r0, r4
 8001c40:	4629      	mov	r1, r5
 8001c42:	f7fe fe3b 	bl	80008bc <__aeabi_ddiv>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f7fe ffbb 	bl	8000bc8 <__aeabi_d2iz>
 8001c52:	4602      	mov	r2, r0
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <SetupMeasurement+0x428>)
 8001c56:	fb83 1302 	smull	r1, r3, r3, r2
 8001c5a:	1159      	asrs	r1, r3, #5
 8001c5c:	17d3      	asrs	r3, r2, #31
 8001c5e:	1acb      	subs	r3, r1, r3
 8001c60:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c64:	fb01 f303 	mul.w	r3, r1, r3
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d004      	beq.n	8001c78 <SetupMeasurement+0x3e8>
		target_packet_count += 1;
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <SetupMeasurement+0x424>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	3301      	adds	r3, #1
 8001c74:	4a0f      	ldr	r2, [pc, #60]	; (8001cb4 <SetupMeasurement+0x424>)
 8001c76:	6013      	str	r3, [r2, #0]
	}

	prog_state = PARAMETERS_SET;
 8001c78:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <SetupMeasurement+0x42c>)
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	701a      	strb	r2, [r3, #0]
	return 1;
 8001c7e:	2301      	movs	r3, #1
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3760      	adds	r7, #96	; 0x60
 8001c84:	46bd      	mov	sp, r7
 8001c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c8a:	bf00      	nop
 8001c8c:	f3af 8000 	nop.w
 8001c90:	40b00000 	.word	0x40b00000
 8001c94:	20000000 	.word	0x20000000
 8001c98:	45800000 	.word	0x45800000
 8001c9c:	200027bc 	.word	0x200027bc
 8001ca0:	200006b4 	.word	0x200006b4
 8001ca4:	20000004 	.word	0x20000004
 8001ca8:	408f4000 	.word	0x408f4000
 8001cac:	20000006 	.word	0x20000006
 8001cb0:	407f4000 	.word	0x407f4000
 8001cb4:	2000076c 	.word	0x2000076c
 8001cb8:	10624dd3 	.word	0x10624dd3
 8001cbc:	200027b4 	.word	0x200027b4
 8001cc0:	a0b5ed8d 	.word	0xa0b5ed8d
 8001cc4:	3eb0c6f7 	.word	0x3eb0c6f7
 8001cc8:	e6d1d609 	.word	0xe6d1d609
 8001ccc:	4066aa7d 	.word	0x4066aa7d
 8001cd0:	9999999a 	.word	0x9999999a
 8001cd4:	3fc99999 	.word	0x3fc99999

08001cd8 <MeasureVref>:

float MeasureVref(void) {
 8001cd8:	b5b0      	push	{r4, r5, r7, lr}
 8001cda:	b08e      	sub	sp, #56	; 0x38
 8001cdc:	af00      	add	r7, sp, #0
	HAL_ADC_DeInit(&hadc1);
 8001cde:	485c      	ldr	r0, [pc, #368]	; (8001e50 <MeasureVref+0x178>)
 8001ce0:	f001 fd38 	bl	8003754 <HAL_ADC_DeInit>

	// Measure Vref
	hadc1.Instance = ADC1;
 8001ce4:	4b5a      	ldr	r3, [pc, #360]	; (8001e50 <MeasureVref+0x178>)
 8001ce6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001cea:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001cec:	4b58      	ldr	r3, [pc, #352]	; (8001e50 <MeasureVref+0x178>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cf2:	4b57      	ldr	r3, [pc, #348]	; (8001e50 <MeasureVref+0x178>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cf8:	4b55      	ldr	r3, [pc, #340]	; (8001e50 <MeasureVref+0x178>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 8001cfe:	4b54      	ldr	r3, [pc, #336]	; (8001e50 <MeasureVref+0x178>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d04:	4b52      	ldr	r3, [pc, #328]	; (8001e50 <MeasureVref+0x178>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d0a:	4b51      	ldr	r3, [pc, #324]	; (8001e50 <MeasureVref+0x178>)
 8001d0c:	2204      	movs	r2, #4
 8001d0e:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d10:	4b4f      	ldr	r3, [pc, #316]	; (8001e50 <MeasureVref+0x178>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001d16:	4b4e      	ldr	r3, [pc, #312]	; (8001e50 <MeasureVref+0x178>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 1;
 8001d1c:	4b4c      	ldr	r3, [pc, #304]	; (8001e50 <MeasureVref+0x178>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d22:	4b4b      	ldr	r3, [pc, #300]	; (8001e50 <MeasureVref+0x178>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d2a:	4b49      	ldr	r3, [pc, #292]	; (8001e50 <MeasureVref+0x178>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d30:	4b47      	ldr	r3, [pc, #284]	; (8001e50 <MeasureVref+0x178>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <MeasureVref+0x178>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d3e:	4b44      	ldr	r3, [pc, #272]	; (8001e50 <MeasureVref+0x178>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8001d44:	4b42      	ldr	r3, [pc, #264]	; (8001e50 <MeasureVref+0x178>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001d4c:	4840      	ldr	r0, [pc, #256]	; (8001e50 <MeasureVref+0x178>)
 8001d4e:	f001 fb45 	bl	80033dc <HAL_ADC_Init>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MeasureVref+0x84>
		Error_Handler();
 8001d58:	f000 fafc 	bl	8002354 <Error_Handler>
	}

	ADC_MultiModeTypeDef multimode = {0};
 8001d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]

	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d70:	4619      	mov	r1, r3
 8001d72:	4837      	ldr	r0, [pc, #220]	; (8001e50 <MeasureVref+0x178>)
 8001d74:	f002 feda 	bl	8004b2c <HAL_ADCEx_MultiModeConfigChannel>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MeasureVref+0xaa>
		Error_Handler();
 8001d7e:	f000 fae9 	bl	8002354 <Error_Handler>
	}

	ADC_ChannelConfTypeDef sConfig = {0};
 8001d82:	1d3b      	adds	r3, r7, #4
 8001d84:	2220      	movs	r2, #32
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f00d fce8 	bl	800f75e <memset>

	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001d8e:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <MeasureVref+0x17c>)
 8001d90:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d92:	2306      	movs	r3, #6
 8001d94:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001d96:	2307      	movs	r3, #7
 8001d98:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d9a:	237f      	movs	r3, #127	; 0x7f
 8001d9c:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d9e:	2304      	movs	r3, #4
 8001da0:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	4619      	mov	r1, r3
 8001daa:	4829      	ldr	r0, [pc, #164]	; (8001e50 <MeasureVref+0x178>)
 8001dac:	f001 ff84 	bl	8003cb8 <HAL_ADC_ConfigChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MeasureVref+0xe2>
		Error_Handler();
 8001db6:	f000 facd 	bl	8002354 <Error_Handler>
	}

	uint16_t vrefint_data = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	807b      	strh	r3, [r7, #2]
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001dbe:	217f      	movs	r1, #127	; 0x7f
 8001dc0:	4823      	ldr	r0, [pc, #140]	; (8001e50 <MeasureVref+0x178>)
 8001dc2:	f002 fe51 	bl	8004a68 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&vrefint_data, 1);
 8001dc6:	1cbb      	adds	r3, r7, #2
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4820      	ldr	r0, [pc, #128]	; (8001e50 <MeasureVref+0x178>)
 8001dce:	f001 fe33 	bl	8003a38 <HAL_ADC_Start_DMA>
	HAL_Delay(1);
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	f001 f828 	bl	8002e28 <HAL_Delay>
	HAL_ADC_Stop_DMA(&hadc1);
 8001dd8:	481d      	ldr	r0, [pc, #116]	; (8001e50 <MeasureVref+0x178>)
 8001dda:	f001 ff01 	bl	8003be0 <HAL_ADC_Stop_DMA>

	uint16_t vrefint_cal;
	vrefint_cal= *((uint16_t*)VREFINT_CAL_ADDR);
 8001dde:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <MeasureVref+0x180>)
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	86fb      	strh	r3, [r7, #54]	; 0x36

	float vref = (VREFINT_CAL_VREF / 1000.0) * (float)vrefint_cal / (float)vrefint_data;
 8001de4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001de6:	ee07 3a90 	vmov	s15, r3
 8001dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dee:	ee17 0a90 	vmov	r0, s15
 8001df2:	f7fe fbe1 	bl	80005b8 <__aeabi_f2d>
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <MeasureVref+0x184>)
 8001dfc:	f7fe fc34 	bl	8000668 <__aeabi_dmul>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4614      	mov	r4, r2
 8001e06:	461d      	mov	r5, r3
 8001e08:	887b      	ldrh	r3, [r7, #2]
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e12:	ee17 0a90 	vmov	r0, s15
 8001e16:	f7fe fbcf 	bl	80005b8 <__aeabi_f2d>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4620      	mov	r0, r4
 8001e20:	4629      	mov	r1, r5
 8001e22:	f7fe fd4b 	bl	80008bc <__aeabi_ddiv>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f7fe ff13 	bl	8000c58 <__aeabi_d2f>
 8001e32:	4603      	mov	r3, r0
 8001e34:	633b      	str	r3, [r7, #48]	; 0x30

	// Return ADC to initial state
	HAL_ADC_DeInit(&hadc1);
 8001e36:	4806      	ldr	r0, [pc, #24]	; (8001e50 <MeasureVref+0x178>)
 8001e38:	f001 fc8c 	bl	8003754 <HAL_ADC_DeInit>
	MX_ADC1_Init();
 8001e3c:	f7ff f85e 	bl	8000efc <MX_ADC1_Init>

	return vref;
 8001e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e42:	ee07 3a90 	vmov	s15, r3
}
 8001e46:	eeb0 0a67 	vmov.f32	s0, s15
 8001e4a:	3738      	adds	r7, #56	; 0x38
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e50:	20000384 	.word	0x20000384
 8001e54:	cb840000 	.word	0xcb840000
 8001e58:	1fff75aa 	.word	0x1fff75aa
 8001e5c:	40080000 	.word	0x40080000

08001e60 <SendParameters>:

int SendParameters(void) {
 8001e60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e64:	b0c8      	sub	sp, #288	; 0x120
 8001e66:	af06      	add	r7, sp, #24
	unsigned char parameters_msg[PARAMETERS_MSG_SIZE];

	sprintf((char *)parameters_msg, "CjcTmp:%.2f;AlgRfr:%.3f;AplOfs:%.4f;AdcBuf:%d;PktCnt:%d\n",
 8001e68:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <SendParameters+0xb4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fba3 	bl	80005b8 <__aeabi_f2d>
 8001e72:	4680      	mov	r8, r0
 8001e74:	4689      	mov	r9, r1
 8001e76:	4b28      	ldr	r3, [pc, #160]	; (8001f18 <SendParameters+0xb8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fb9c 	bl	80005b8 <__aeabi_f2d>
 8001e80:	4604      	mov	r4, r0
 8001e82:	460d      	mov	r5, r1
 8001e84:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <SendParameters+0xbc>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb95 	bl	80005b8 <__aeabi_f2d>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4923      	ldr	r1, [pc, #140]	; (8001f20 <SendParameters+0xc0>)
 8001e94:	6809      	ldr	r1, [r1, #0]
 8001e96:	1d38      	adds	r0, r7, #4
 8001e98:	9105      	str	r1, [sp, #20]
 8001e9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e9e:	9104      	str	r1, [sp, #16]
 8001ea0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ea4:	e9cd 4500 	strd	r4, r5, [sp]
 8001ea8:	4642      	mov	r2, r8
 8001eaa:	464b      	mov	r3, r9
 8001eac:	491d      	ldr	r1, [pc, #116]	; (8001f24 <SendParameters+0xc4>)
 8001eae:	f00d fbf3 	bl	800f698 <siprintf>
									cold_junction_temp,
									analog_reference_voltage,
									applied_voltage_offset,
									ADC_BUFFER_SIZE,
									target_packet_count);
	uint16_t line_len = strlen((char *)parameters_msg);
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe fa13 	bl	80002e0 <strlen>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
	while(CDC_Transmit_FS(parameters_msg, line_len) != USBD_OK);
 8001ec0:	bf00      	nop
 8001ec2:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f00c f9d8 	bl	800e280 <CDC_Transmit_FS>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f5      	bne.n	8001ec2 <SendParameters+0x62>

	HAL_GPIO_WritePin(IND_LED_G_GPIO_Port, IND_LED_G_Pin, GPIO_PIN_SET);
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001edc:	4812      	ldr	r0, [pc, #72]	; (8001f28 <SendParameters+0xc8>)
 8001ede:	f004 f9a3 	bl	8006228 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_LED_R_GPIO_Port, IND_LED_R_Pin, GPIO_PIN_SET);
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ee8:	480f      	ldr	r0, [pc, #60]	; (8001f28 <SendParameters+0xc8>)
 8001eea:	f004 f99d 	bl	8006228 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_LED_B_GPIO_Port, IND_LED_B_Pin, GPIO_PIN_RESET);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ef4:	480c      	ldr	r0, [pc, #48]	; (8001f28 <SendParameters+0xc8>)
 8001ef6:	f004 f997 	bl	8006228 <HAL_GPIO_WritePin>
	measurement_activated = 0;
 8001efa:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <SendParameters+0xcc>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
	prog_state = ARMED;
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <SendParameters+0xd0>)
 8001f02:	2204      	movs	r2, #4
 8001f04:	701a      	strb	r2, [r3, #0]

	return 1;
 8001f06:	2301      	movs	r3, #1
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f14:	200027b8 	.word	0x200027b8
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	200027bc 	.word	0x200027bc
 8001f20:	2000076c 	.word	0x2000076c
 8001f24:	080128dc 	.word	0x080128dc
 8001f28:	48000800 	.word	0x48000800
 8001f2c:	200027e4 	.word	0x200027e4
 8001f30:	200027b4 	.word	0x200027b4

08001f34 <StartMeasurement>:

int StartMeasurement(void) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IND_LED_G_GPIO_Port, IND_LED_G_Pin, GPIO_PIN_SET);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f3e:	4828      	ldr	r0, [pc, #160]	; (8001fe0 <StartMeasurement+0xac>)
 8001f40:	f004 f972 	bl	8006228 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_LED_R_GPIO_Port, IND_LED_R_Pin, GPIO_PIN_RESET);
 8001f44:	2200      	movs	r2, #0
 8001f46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f4a:	4825      	ldr	r0, [pc, #148]	; (8001fe0 <StartMeasurement+0xac>)
 8001f4c:	f004 f96c 	bl	8006228 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_LED_B_GPIO_Port, IND_LED_B_Pin, GPIO_PIN_SET);
 8001f50:	2201      	movs	r2, #1
 8001f52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f56:	4822      	ldr	r0, [pc, #136]	; (8001fe0 <StartMeasurement+0xac>)
 8001f58:	f004 f966 	bl	8006228 <HAL_GPIO_WritePin>

	// Setup ADCs
	if(channel_enabled_status[0]){
 8001f5c:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <StartMeasurement+0xb0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d009      	beq.n	8001f78 <StartMeasurement+0x44>
		HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001f64:	217f      	movs	r1, #127	; 0x7f
 8001f66:	4820      	ldr	r0, [pc, #128]	; (8001fe8 <StartMeasurement+0xb4>)
 8001f68:	f002 fd7e 	bl	8004a68 <HAL_ADCEx_Calibration_Start>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffers[0], ADC_BUFFER_SIZE);
 8001f6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f70:	491e      	ldr	r1, [pc, #120]	; (8001fec <StartMeasurement+0xb8>)
 8001f72:	481d      	ldr	r0, [pc, #116]	; (8001fe8 <StartMeasurement+0xb4>)
 8001f74:	f001 fd60 	bl	8003a38 <HAL_ADC_Start_DMA>
	}
	if(channel_enabled_status[1]){
 8001f78:	4b1a      	ldr	r3, [pc, #104]	; (8001fe4 <StartMeasurement+0xb0>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d009      	beq.n	8001f94 <StartMeasurement+0x60>
		HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001f80:	217f      	movs	r1, #127	; 0x7f
 8001f82:	481b      	ldr	r0, [pc, #108]	; (8001ff0 <StartMeasurement+0xbc>)
 8001f84:	f002 fd70 	bl	8004a68 <HAL_ADCEx_Calibration_Start>
		HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_buffers[1], ADC_BUFFER_SIZE);
 8001f88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f8c:	4919      	ldr	r1, [pc, #100]	; (8001ff4 <StartMeasurement+0xc0>)
 8001f8e:	4818      	ldr	r0, [pc, #96]	; (8001ff0 <StartMeasurement+0xbc>)
 8001f90:	f001 fd52 	bl	8003a38 <HAL_ADC_Start_DMA>
	}
	if(channel_enabled_status[2]){
 8001f94:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <StartMeasurement+0xb0>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d009      	beq.n	8001fb0 <StartMeasurement+0x7c>
		HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8001f9c:	217f      	movs	r1, #127	; 0x7f
 8001f9e:	4816      	ldr	r0, [pc, #88]	; (8001ff8 <StartMeasurement+0xc4>)
 8001fa0:	f002 fd62 	bl	8004a68 <HAL_ADCEx_Calibration_Start>
		HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc_buffers[2], ADC_BUFFER_SIZE);
 8001fa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fa8:	4914      	ldr	r1, [pc, #80]	; (8001ffc <StartMeasurement+0xc8>)
 8001faa:	4813      	ldr	r0, [pc, #76]	; (8001ff8 <StartMeasurement+0xc4>)
 8001fac:	f001 fd44 	bl	8003a38 <HAL_ADC_Start_DMA>
	}
	if(channel_enabled_status[3]){
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <StartMeasurement+0xb0>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d009      	beq.n	8001fcc <StartMeasurement+0x98>
		HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8001fb8:	217f      	movs	r1, #127	; 0x7f
 8001fba:	4811      	ldr	r0, [pc, #68]	; (8002000 <StartMeasurement+0xcc>)
 8001fbc:	f002 fd54 	bl	8004a68 <HAL_ADCEx_Calibration_Start>
		HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc_buffers[3], ADC_BUFFER_SIZE);
 8001fc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fc4:	490f      	ldr	r1, [pc, #60]	; (8002004 <StartMeasurement+0xd0>)
 8001fc6:	480e      	ldr	r0, [pc, #56]	; (8002000 <StartMeasurement+0xcc>)
 8001fc8:	f001 fd36 	bl	8003a38 <HAL_ADC_Start_DMA>
	}

	HAL_TIM_Base_Start_IT(&htim2);
 8001fcc:	480e      	ldr	r0, [pc, #56]	; (8002008 <StartMeasurement+0xd4>)
 8001fce:	f007 fd19 	bl	8009a04 <HAL_TIM_Base_Start_IT>

	prog_state = MEASURING;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <StartMeasurement+0xd8>)
 8001fd4:	2205      	movs	r2, #5
 8001fd6:	701a      	strb	r2, [r3, #0]

	return 1;
 8001fd8:	2301      	movs	r3, #1
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	48000800 	.word	0x48000800
 8001fe4:	200027cc 	.word	0x200027cc
 8001fe8:	20000384 	.word	0x20000384
 8001fec:	20000774 	.word	0x20000774
 8001ff0:	200003f0 	.word	0x200003f0
 8001ff4:	20000f44 	.word	0x20000f44
 8001ff8:	2000045c 	.word	0x2000045c
 8001ffc:	20001714 	.word	0x20001714
 8002000:	200004c8 	.word	0x200004c8
 8002004:	20001ee4 	.word	0x20001ee4
 8002008:	2000071c 	.word	0x2000071c
 800200c:	200027b4 	.word	0x200027b4

08002010 <HAL_ADC_ConvHalfCpltCallback>:

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	int adc_index;

	if (hadc == &hadc1){
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a18      	ldr	r2, [pc, #96]	; (800207c <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d102      	bne.n	8002026 <HAL_ADC_ConvHalfCpltCallback+0x16>
		adc_index = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	e013      	b.n	800204e <HAL_ADC_ConvHalfCpltCallback+0x3e>
	}
	else if(hadc == &hadc2){
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a15      	ldr	r2, [pc, #84]	; (8002080 <HAL_ADC_ConvHalfCpltCallback+0x70>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d102      	bne.n	8002034 <HAL_ADC_ConvHalfCpltCallback+0x24>
		adc_index = 1;
 800202e:	2301      	movs	r3, #1
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	e00c      	b.n	800204e <HAL_ADC_ConvHalfCpltCallback+0x3e>
	}
	else if(hadc == &hadc3){
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a13      	ldr	r2, [pc, #76]	; (8002084 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d102      	bne.n	8002042 <HAL_ADC_ConvHalfCpltCallback+0x32>
		adc_index = 2;
 800203c:	2302      	movs	r3, #2
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	e005      	b.n	800204e <HAL_ADC_ConvHalfCpltCallback+0x3e>
	}
	else if(hadc == &hadc4){
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a10      	ldr	r2, [pc, #64]	; (8002088 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <HAL_ADC_ConvHalfCpltCallback+0x3e>
		adc_index = 3;
 800204a:	2303      	movs	r3, #3
 800204c:	60fb      	str	r3, [r7, #12]
	}

	if (adc_states[adc_index] != EMPTY)
 800204e:	4a0f      	ldr	r2, [pc, #60]	; (800208c <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4413      	add	r3, r2
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d004      	beq.n	8002064 <HAL_ADC_ConvHalfCpltCallback+0x54>
		dropped_packet_count++;
 800205a:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <HAL_ADC_ConvHalfCpltCallback+0x80>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	3301      	adds	r3, #1
 8002060:	4a0b      	ldr	r2, [pc, #44]	; (8002090 <HAL_ADC_ConvHalfCpltCallback+0x80>)
 8002062:	6013      	str	r3, [r2, #0]
	adc_states[adc_index] = START_FULL;
 8002064:	4a09      	ldr	r2, [pc, #36]	; (800208c <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4413      	add	r3, r2
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
}
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000384 	.word	0x20000384
 8002080:	200003f0 	.word	0x200003f0
 8002084:	2000045c 	.word	0x2000045c
 8002088:	200004c8 	.word	0x200004c8
 800208c:	200027c4 	.word	0x200027c4
 8002090:	20000770 	.word	0x20000770

08002094 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	int adc_index;

	if (hadc == &hadc1){
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a18      	ldr	r2, [pc, #96]	; (8002100 <HAL_ADC_ConvCpltCallback+0x6c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d102      	bne.n	80020aa <HAL_ADC_ConvCpltCallback+0x16>
		adc_index = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	e013      	b.n	80020d2 <HAL_ADC_ConvCpltCallback+0x3e>
	}
	else if(hadc == &hadc2){
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a15      	ldr	r2, [pc, #84]	; (8002104 <HAL_ADC_ConvCpltCallback+0x70>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d102      	bne.n	80020b8 <HAL_ADC_ConvCpltCallback+0x24>
		adc_index = 1;
 80020b2:	2301      	movs	r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	e00c      	b.n	80020d2 <HAL_ADC_ConvCpltCallback+0x3e>
	}
	else if(hadc == &hadc3){
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a13      	ldr	r2, [pc, #76]	; (8002108 <HAL_ADC_ConvCpltCallback+0x74>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d102      	bne.n	80020c6 <HAL_ADC_ConvCpltCallback+0x32>
		adc_index = 2;
 80020c0:	2302      	movs	r3, #2
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	e005      	b.n	80020d2 <HAL_ADC_ConvCpltCallback+0x3e>
	}
	else if(hadc == &hadc4){
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a10      	ldr	r2, [pc, #64]	; (800210c <HAL_ADC_ConvCpltCallback+0x78>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d101      	bne.n	80020d2 <HAL_ADC_ConvCpltCallback+0x3e>
		adc_index = 3;
 80020ce:	2303      	movs	r3, #3
 80020d0:	60fb      	str	r3, [r7, #12]
	}

	if (adc_states[adc_index] != EMPTY)
 80020d2:	4a0f      	ldr	r2, [pc, #60]	; (8002110 <HAL_ADC_ConvCpltCallback+0x7c>)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4413      	add	r3, r2
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d004      	beq.n	80020e8 <HAL_ADC_ConvCpltCallback+0x54>
		dropped_packet_count++;
 80020de:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <HAL_ADC_ConvCpltCallback+0x80>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	3301      	adds	r3, #1
 80020e4:	4a0b      	ldr	r2, [pc, #44]	; (8002114 <HAL_ADC_ConvCpltCallback+0x80>)
 80020e6:	6013      	str	r3, [r2, #0]
	adc_states[adc_index] = END_FULL;
 80020e8:	4a09      	ldr	r2, [pc, #36]	; (8002110 <HAL_ADC_ConvCpltCallback+0x7c>)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4413      	add	r3, r2
 80020ee:	2202      	movs	r2, #2
 80020f0:	701a      	strb	r2, [r3, #0]
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000384 	.word	0x20000384
 8002104:	200003f0 	.word	0x200003f0
 8002108:	2000045c 	.word	0x2000045c
 800210c:	200004c8 	.word	0x200004c8
 8002110:	200027c4 	.word	0x200027c4
 8002114:	20000770 	.word	0x20000770

08002118 <SendData>:

unsigned char usb_buffer[USB_BUFFER_SIZE];
unsigned int usb_buffer_index;
unsigned int adc_buffer_start_index;

int SendData(enum ADC_BUFFER_STATE usb_transmition_state) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
	// > Create the USB buffer data
	if(usb_transmition_state == START_FULL){
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d103      	bne.n	8002130 <SendData+0x18>
		adc_buffer_start_index = 0;
 8002128:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <SendData+0x100>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	e006      	b.n	800213e <SendData+0x26>
	}
	else if(usb_transmition_state == END_FULL){
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d103      	bne.n	800213e <SendData+0x26>
		adc_buffer_start_index = ADC_BUFFER_SIZE/2;
 8002136:	4b38      	ldr	r3, [pc, #224]	; (8002218 <SendData+0x100>)
 8002138:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800213c:	601a      	str	r2, [r3, #0]
	}

	usb_buffer_index = 0;
 800213e:	4b37      	ldr	r3, [pc, #220]	; (800221c <SendData+0x104>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
	for(int channel_index = 0; channel_index < MAX_CHANNEL_COUNT; channel_index++) {
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	e04e      	b.n	80021e8 <SendData+0xd0>
		if(!channel_enabled_status[channel_index])
 800214a:	4a35      	ldr	r2, [pc, #212]	; (8002220 <SendData+0x108>)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d044      	beq.n	80021e0 <SendData+0xc8>
			continue;

		for(int i = 0; i < ADC_BUFFER_SIZE/2; i++){
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	e031      	b.n	80021c0 <SendData+0xa8>
			usb_buffer[usb_buffer_index + (i*2) + 1] = (uint8_t)(adc_buffers[channel_index][adc_buffer_start_index + i] & 0x00FF);
 800215c:	4b2e      	ldr	r3, [pc, #184]	; (8002218 <SendData+0x100>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	4413      	add	r3, r2
 8002164:	492f      	ldr	r1, [pc, #188]	; (8002224 <SendData+0x10c>)
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800216c:	fb00 f202 	mul.w	r2, r0, r2
 8002170:	4413      	add	r3, r2
 8002172:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4619      	mov	r1, r3
 800217c:	4b27      	ldr	r3, [pc, #156]	; (800221c <SendData+0x104>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	440b      	add	r3, r1
 8002182:	3301      	adds	r3, #1
 8002184:	b2d1      	uxtb	r1, r2
 8002186:	4a28      	ldr	r2, [pc, #160]	; (8002228 <SendData+0x110>)
 8002188:	54d1      	strb	r1, [r2, r3]
			usb_buffer[usb_buffer_index + i*2] = (uint8_t)((adc_buffers[channel_index][adc_buffer_start_index + i] >> 8) & 0x00FF);
 800218a:	4b23      	ldr	r3, [pc, #140]	; (8002218 <SendData+0x100>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	4413      	add	r3, r2
 8002192:	4924      	ldr	r1, [pc, #144]	; (8002224 <SendData+0x10c>)
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800219a:	fb00 f202 	mul.w	r2, r0, r2
 800219e:	4413      	add	r3, r2
 80021a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4619      	mov	r1, r3
 80021ae:	4b1b      	ldr	r3, [pc, #108]	; (800221c <SendData+0x104>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	440b      	add	r3, r1
 80021b4:	b2d1      	uxtb	r1, r2
 80021b6:	4a1c      	ldr	r2, [pc, #112]	; (8002228 <SendData+0x110>)
 80021b8:	54d1      	strb	r1, [r2, r3]
		for(int i = 0; i < ADC_BUFFER_SIZE/2; i++){
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	3301      	adds	r3, #1
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021c6:	dbc9      	blt.n	800215c <SendData+0x44>
		}
		adc_states[channel_index] = EMPTY;
 80021c8:	4a18      	ldr	r2, [pc, #96]	; (800222c <SendData+0x114>)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4413      	add	r3, r2
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
		usb_buffer_index += ADC_BUFFER_SIZE;
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <SendData+0x104>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80021da:	4a10      	ldr	r2, [pc, #64]	; (800221c <SendData+0x104>)
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	e000      	b.n	80021e2 <SendData+0xca>
			continue;
 80021e0:	bf00      	nop
	for(int channel_index = 0; channel_index < MAX_CHANNEL_COUNT; channel_index++) {
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3301      	adds	r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	ddad      	ble.n	800214a <SendData+0x32>
	}

	while(CDC_Transmit_FS(usb_buffer, usb_buffer_index) != USBD_OK);
 80021ee:	bf00      	nop
 80021f0:	4b0a      	ldr	r3, [pc, #40]	; (800221c <SendData+0x104>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	4619      	mov	r1, r3
 80021f8:	480b      	ldr	r0, [pc, #44]	; (8002228 <SendData+0x110>)
 80021fa:	f00c f841 	bl	800e280 <CDC_Transmit_FS>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f5      	bne.n	80021f0 <SendData+0xd8>

	current_packet_count++;
 8002204:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <SendData+0x118>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	3301      	adds	r3, #1
 800220a:	4a09      	ldr	r2, [pc, #36]	; (8002230 <SendData+0x118>)
 800220c:	6013      	str	r3, [r2, #0]

	return 1;
 800220e:	2301      	movs	r3, #1
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	2000378c 	.word	0x2000378c
 800221c:	20003788 	.word	0x20003788
 8002220:	200027cc 	.word	0x200027cc
 8002224:	20000774 	.word	0x20000774
 8002228:	200027e8 	.word	0x200027e8
 800222c:	200027c4 	.word	0x200027c4
 8002230:	20000768 	.word	0x20000768

08002234 <SendTrasmissionReport>:

int SendTrasmissionReport(void) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b0c2      	sub	sp, #264	; 0x108
 8002238:	af00      	add	r7, sp, #0
	unsigned char report_msg[REPORT_MSG_SIZE];

	sprintf((char *)report_msg, "TrsErr:%d;DrpPkt:%d\n",
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <SendTrasmissionReport+0x4c>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	4b11      	ldr	r3, [pc, #68]	; (8002284 <SendTrasmissionReport+0x50>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	1d38      	adds	r0, r7, #4
 8002244:	4910      	ldr	r1, [pc, #64]	; (8002288 <SendTrasmissionReport+0x54>)
 8002246:	f00d fa27 	bl	800f698 <siprintf>
									transmission_error,
									dropped_packet_count);
	uint16_t line_len = strlen((char *)report_msg);
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe f847 	bl	80002e0 <strlen>
 8002252:	4603      	mov	r3, r0
 8002254:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
	while(CDC_Transmit_FS(report_msg, line_len) != USBD_OK);
 8002258:	bf00      	nop
 800225a:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	4611      	mov	r1, r2
 8002262:	4618      	mov	r0, r3
 8002264:	f00c f80c 	bl	800e280 <CDC_Transmit_FS>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f5      	bne.n	800225a <SendTrasmissionReport+0x26>

	prog_state = DONE;
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <SendTrasmissionReport+0x58>)
 8002270:	2207      	movs	r2, #7
 8002272:	701a      	strb	r2, [r3, #0]

	return 1;
 8002274:	2301      	movs	r3, #1
}
 8002276:	4618      	mov	r0, r3
 8002278:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	200027dc 	.word	0x200027dc
 8002284:	20000770 	.word	0x20000770
 8002288:	08012918 	.word	0x08012918
 800228c:	200027b4 	.word	0x200027b4

08002290 <ResetStates>:

int ResetStates(void) {
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Stop_IT(&htim2);
 8002294:	4820      	ldr	r0, [pc, #128]	; (8002318 <ResetStates+0x88>)
 8002296:	f007 fc2d 	bl	8009af4 <HAL_TIM_Base_Stop_IT>
	  HAL_ADC_Stop_DMA(&hadc1);
 800229a:	4820      	ldr	r0, [pc, #128]	; (800231c <ResetStates+0x8c>)
 800229c:	f001 fca0 	bl	8003be0 <HAL_ADC_Stop_DMA>
	  HAL_ADC_Stop_DMA(&hadc2);
 80022a0:	481f      	ldr	r0, [pc, #124]	; (8002320 <ResetStates+0x90>)
 80022a2:	f001 fc9d 	bl	8003be0 <HAL_ADC_Stop_DMA>
	  HAL_ADC_Stop_DMA(&hadc3);
 80022a6:	481f      	ldr	r0, [pc, #124]	; (8002324 <ResetStates+0x94>)
 80022a8:	f001 fc9a 	bl	8003be0 <HAL_ADC_Stop_DMA>
	  HAL_ADC_Stop_DMA(&hadc4);
 80022ac:	481e      	ldr	r0, [pc, #120]	; (8002328 <ResetStates+0x98>)
 80022ae:	f001 fc97 	bl	8003be0 <HAL_ADC_Stop_DMA>
	  memset(adc_buffers, 0, sizeof(adc_buffers));
 80022b2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80022b6:	2100      	movs	r1, #0
 80022b8:	481c      	ldr	r0, [pc, #112]	; (800232c <ResetStates+0x9c>)
 80022ba:	f00d fa50 	bl	800f75e <memset>
	  prog_state = IDLE;
 80022be:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <ResetStates+0xa0>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
	  conv_count_reached = 0;
 80022c4:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <ResetStates+0xa4>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
	  target_packet_count = 0;
 80022ca:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <ResetStates+0xa8>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
	  current_packet_count = 0;
 80022d0:	4b1a      	ldr	r3, [pc, #104]	; (800233c <ResetStates+0xac>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
	  measurement_activated = 0;
 80022d6:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <ResetStates+0xb0>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
	  channel_enabled_count = 0;
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <ResetStates+0xb4>)
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
	  dropped_packet_count = 0;
 80022e2:	4b19      	ldr	r3, [pc, #100]	; (8002348 <ResetStates+0xb8>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
	  transmission_error = 0;
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <ResetStates+0xbc>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]

	  HAL_GPIO_WritePin(IND_LED_G_GPIO_Port, IND_LED_G_Pin, GPIO_PIN_RESET);
 80022ee:	2200      	movs	r2, #0
 80022f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022f4:	4816      	ldr	r0, [pc, #88]	; (8002350 <ResetStates+0xc0>)
 80022f6:	f003 ff97 	bl	8006228 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IND_LED_R_GPIO_Port, IND_LED_R_Pin, GPIO_PIN_SET);
 80022fa:	2201      	movs	r2, #1
 80022fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002300:	4813      	ldr	r0, [pc, #76]	; (8002350 <ResetStates+0xc0>)
 8002302:	f003 ff91 	bl	8006228 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IND_LED_B_GPIO_Port, IND_LED_B_Pin, GPIO_PIN_SET);
 8002306:	2201      	movs	r2, #1
 8002308:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800230c:	4810      	ldr	r0, [pc, #64]	; (8002350 <ResetStates+0xc0>)
 800230e:	f003 ff8b 	bl	8006228 <HAL_GPIO_WritePin>

	  return 1;
 8002312:	2301      	movs	r3, #1
}
 8002314:	4618      	mov	r0, r3
 8002316:	bd80      	pop	{r7, pc}
 8002318:	2000071c 	.word	0x2000071c
 800231c:	20000384 	.word	0x20000384
 8002320:	200003f0 	.word	0x200003f0
 8002324:	2000045c 	.word	0x2000045c
 8002328:	200004c8 	.word	0x200004c8
 800232c:	20000774 	.word	0x20000774
 8002330:	200027b4 	.word	0x200027b4
 8002334:	200027e0 	.word	0x200027e0
 8002338:	2000076c 	.word	0x2000076c
 800233c:	20000768 	.word	0x20000768
 8002340:	200027e4 	.word	0x200027e4
 8002344:	200027c8 	.word	0x200027c8
 8002348:	20000770 	.word	0x20000770
 800234c:	200027dc 	.word	0x200027dc
 8002350:	48000800 	.word	0x48000800

08002354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002358:	b672      	cpsid	i
}
 800235a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800235c:	e7fe      	b.n	800235c <Error_Handler+0x8>
	...

08002360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002366:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <HAL_MspInit+0x54>)
 8002368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236a:	4a12      	ldr	r2, [pc, #72]	; (80023b4 <HAL_MspInit+0x54>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6613      	str	r3, [r2, #96]	; 0x60
 8002372:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <HAL_MspInit+0x54>)
 8002374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800237e:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <HAL_MspInit+0x54>)
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002382:	4a0c      	ldr	r2, [pc, #48]	; (80023b4 <HAL_MspInit+0x54>)
 8002384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002388:	6593      	str	r3, [r2, #88]	; 0x58
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_MspInit+0x54>)
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8002396:	2020      	movs	r0, #32
 8002398:	f000 fd68 	bl	8002e6c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 800239c:	f000 fd8e 	bl	8002ebc <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80023a0:	2000      	movs	r0, #0
 80023a2:	f000 fd77 	bl	8002e94 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80023a6:	f006 fb75 	bl	8008a94 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000

080023b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b0a4      	sub	sp, #144	; 0x90
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023d4:	2254      	movs	r2, #84	; 0x54
 80023d6:	2100      	movs	r1, #0
 80023d8:	4618      	mov	r0, r3
 80023da:	f00d f9c0 	bl	800f75e <memset>
  if(hadc->Instance==ADC1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023e6:	d16c      	bne.n	80024c2 <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80023e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80023ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80023f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023f8:	4618      	mov	r0, r3
 80023fa:	f007 f85d 	bl	80094b8 <HAL_RCCEx_PeriphCLKConfig>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002404:	f7ff ffa6 	bl	8002354 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002408:	4b9f      	ldr	r3, [pc, #636]	; (8002688 <HAL_ADC_MspInit+0x2d0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	3301      	adds	r3, #1
 800240e:	4a9e      	ldr	r2, [pc, #632]	; (8002688 <HAL_ADC_MspInit+0x2d0>)
 8002410:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002412:	4b9d      	ldr	r3, [pc, #628]	; (8002688 <HAL_ADC_MspInit+0x2d0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d10b      	bne.n	8002432 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800241a:	4b9c      	ldr	r3, [pc, #624]	; (800268c <HAL_ADC_MspInit+0x2d4>)
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	4a9b      	ldr	r2, [pc, #620]	; (800268c <HAL_ADC_MspInit+0x2d4>)
 8002420:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002426:	4b99      	ldr	r3, [pc, #612]	; (800268c <HAL_ADC_MspInit+0x2d4>)
 8002428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002432:	4b96      	ldr	r3, [pc, #600]	; (800268c <HAL_ADC_MspInit+0x2d4>)
 8002434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002436:	4a95      	ldr	r2, [pc, #596]	; (800268c <HAL_ADC_MspInit+0x2d4>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800243e:	4b93      	ldr	r3, [pc, #588]	; (800268c <HAL_ADC_MspInit+0x2d4>)
 8002440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	623b      	str	r3, [r7, #32]
 8002448:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800244a:	2301      	movs	r3, #1
 800244c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800244e:	2303      	movs	r3, #3
 8002450:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800245e:	4619      	mov	r1, r3
 8002460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002464:	f003 fc7c 	bl	8005d60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002468:	4b89      	ldr	r3, [pc, #548]	; (8002690 <HAL_ADC_MspInit+0x2d8>)
 800246a:	4a8a      	ldr	r2, [pc, #552]	; (8002694 <HAL_ADC_MspInit+0x2dc>)
 800246c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800246e:	4b88      	ldr	r3, [pc, #544]	; (8002690 <HAL_ADC_MspInit+0x2d8>)
 8002470:	2205      	movs	r2, #5
 8002472:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002474:	4b86      	ldr	r3, [pc, #536]	; (8002690 <HAL_ADC_MspInit+0x2d8>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800247a:	4b85      	ldr	r3, [pc, #532]	; (8002690 <HAL_ADC_MspInit+0x2d8>)
 800247c:	2200      	movs	r2, #0
 800247e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002480:	4b83      	ldr	r3, [pc, #524]	; (8002690 <HAL_ADC_MspInit+0x2d8>)
 8002482:	2280      	movs	r2, #128	; 0x80
 8002484:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002486:	4b82      	ldr	r3, [pc, #520]	; (8002690 <HAL_ADC_MspInit+0x2d8>)
 8002488:	f44f 7280 	mov.w	r2, #256	; 0x100
 800248c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800248e:	4b80      	ldr	r3, [pc, #512]	; (8002690 <HAL_ADC_MspInit+0x2d8>)
 8002490:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002494:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002496:	4b7e      	ldr	r3, [pc, #504]	; (8002690 <HAL_ADC_MspInit+0x2d8>)
 8002498:	2220      	movs	r2, #32
 800249a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800249c:	4b7c      	ldr	r3, [pc, #496]	; (8002690 <HAL_ADC_MspInit+0x2d8>)
 800249e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80024a4:	487a      	ldr	r0, [pc, #488]	; (8002690 <HAL_ADC_MspInit+0x2d8>)
 80024a6:	f003 f8f9 	bl	800569c <HAL_DMA_Init>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80024b0:	f7ff ff50 	bl	8002354 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a76      	ldr	r2, [pc, #472]	; (8002690 <HAL_ADC_MspInit+0x2d8>)
 80024b8:	655a      	str	r2, [r3, #84]	; 0x54
 80024ba:	4a75      	ldr	r2, [pc, #468]	; (8002690 <HAL_ADC_MspInit+0x2d8>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80024c0:	e16b      	b.n	800279a <HAL_ADC_MspInit+0x3e2>
  else if(hadc->Instance==ADC2)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a74      	ldr	r2, [pc, #464]	; (8002698 <HAL_ADC_MspInit+0x2e0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d16b      	bne.n	80025a4 <HAL_ADC_MspInit+0x1ec>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80024cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024d0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80024d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80024d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024dc:	4618      	mov	r0, r3
 80024de:	f006 ffeb 	bl	80094b8 <HAL_RCCEx_PeriphCLKConfig>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_ADC_MspInit+0x134>
      Error_Handler();
 80024e8:	f7ff ff34 	bl	8002354 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80024ec:	4b66      	ldr	r3, [pc, #408]	; (8002688 <HAL_ADC_MspInit+0x2d0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	3301      	adds	r3, #1
 80024f2:	4a65      	ldr	r2, [pc, #404]	; (8002688 <HAL_ADC_MspInit+0x2d0>)
 80024f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80024f6:	4b64      	ldr	r3, [pc, #400]	; (8002688 <HAL_ADC_MspInit+0x2d0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d10b      	bne.n	8002516 <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80024fe:	4b63      	ldr	r3, [pc, #396]	; (800268c <HAL_ADC_MspInit+0x2d4>)
 8002500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002502:	4a62      	ldr	r2, [pc, #392]	; (800268c <HAL_ADC_MspInit+0x2d4>)
 8002504:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800250a:	4b60      	ldr	r3, [pc, #384]	; (800268c <HAL_ADC_MspInit+0x2d4>)
 800250c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002512:	61fb      	str	r3, [r7, #28]
 8002514:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	4b5d      	ldr	r3, [pc, #372]	; (800268c <HAL_ADC_MspInit+0x2d4>)
 8002518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251a:	4a5c      	ldr	r2, [pc, #368]	; (800268c <HAL_ADC_MspInit+0x2d4>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002522:	4b5a      	ldr	r3, [pc, #360]	; (800268c <HAL_ADC_MspInit+0x2d4>)
 8002524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800252e:	2340      	movs	r3, #64	; 0x40
 8002530:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002532:	2303      	movs	r3, #3
 8002534:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002542:	4619      	mov	r1, r3
 8002544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002548:	f003 fc0a 	bl	8005d60 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800254c:	4b53      	ldr	r3, [pc, #332]	; (800269c <HAL_ADC_MspInit+0x2e4>)
 800254e:	4a54      	ldr	r2, [pc, #336]	; (80026a0 <HAL_ADC_MspInit+0x2e8>)
 8002550:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002552:	4b52      	ldr	r3, [pc, #328]	; (800269c <HAL_ADC_MspInit+0x2e4>)
 8002554:	2224      	movs	r2, #36	; 0x24
 8002556:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002558:	4b50      	ldr	r3, [pc, #320]	; (800269c <HAL_ADC_MspInit+0x2e4>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800255e:	4b4f      	ldr	r3, [pc, #316]	; (800269c <HAL_ADC_MspInit+0x2e4>)
 8002560:	2200      	movs	r2, #0
 8002562:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002564:	4b4d      	ldr	r3, [pc, #308]	; (800269c <HAL_ADC_MspInit+0x2e4>)
 8002566:	2280      	movs	r2, #128	; 0x80
 8002568:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800256a:	4b4c      	ldr	r3, [pc, #304]	; (800269c <HAL_ADC_MspInit+0x2e4>)
 800256c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002570:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002572:	4b4a      	ldr	r3, [pc, #296]	; (800269c <HAL_ADC_MspInit+0x2e4>)
 8002574:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002578:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800257a:	4b48      	ldr	r3, [pc, #288]	; (800269c <HAL_ADC_MspInit+0x2e4>)
 800257c:	2220      	movs	r2, #32
 800257e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002580:	4b46      	ldr	r3, [pc, #280]	; (800269c <HAL_ADC_MspInit+0x2e4>)
 8002582:	2200      	movs	r2, #0
 8002584:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002586:	4845      	ldr	r0, [pc, #276]	; (800269c <HAL_ADC_MspInit+0x2e4>)
 8002588:	f003 f888 	bl	800569c <HAL_DMA_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_ADC_MspInit+0x1de>
      Error_Handler();
 8002592:	f7ff fedf 	bl	8002354 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a40      	ldr	r2, [pc, #256]	; (800269c <HAL_ADC_MspInit+0x2e4>)
 800259a:	655a      	str	r2, [r3, #84]	; 0x54
 800259c:	4a3f      	ldr	r2, [pc, #252]	; (800269c <HAL_ADC_MspInit+0x2e4>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80025a2:	e0fa      	b.n	800279a <HAL_ADC_MspInit+0x3e2>
  else if(hadc->Instance==ADC3)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a3e      	ldr	r2, [pc, #248]	; (80026a4 <HAL_ADC_MspInit+0x2ec>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	f040 8084 	bne.w	80026b8 <HAL_ADC_MspInit+0x300>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80025b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80025b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025ba:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025c0:	4618      	mov	r0, r3
 80025c2:	f006 ff79 	bl	80094b8 <HAL_RCCEx_PeriphCLKConfig>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_ADC_MspInit+0x218>
      Error_Handler();
 80025cc:	f7ff fec2 	bl	8002354 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80025d0:	4b35      	ldr	r3, [pc, #212]	; (80026a8 <HAL_ADC_MspInit+0x2f0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3301      	adds	r3, #1
 80025d6:	4a34      	ldr	r2, [pc, #208]	; (80026a8 <HAL_ADC_MspInit+0x2f0>)
 80025d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80025da:	4b33      	ldr	r3, [pc, #204]	; (80026a8 <HAL_ADC_MspInit+0x2f0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d10b      	bne.n	80025fa <HAL_ADC_MspInit+0x242>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80025e2:	4b2a      	ldr	r3, [pc, #168]	; (800268c <HAL_ADC_MspInit+0x2d4>)
 80025e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e6:	4a29      	ldr	r2, [pc, #164]	; (800268c <HAL_ADC_MspInit+0x2d4>)
 80025e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ee:	4b27      	ldr	r3, [pc, #156]	; (800268c <HAL_ADC_MspInit+0x2d4>)
 80025f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fa:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_ADC_MspInit+0x2d4>)
 80025fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fe:	4a23      	ldr	r2, [pc, #140]	; (800268c <HAL_ADC_MspInit+0x2d4>)
 8002600:	f043 0302 	orr.w	r3, r3, #2
 8002604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002606:	4b21      	ldr	r3, [pc, #132]	; (800268c <HAL_ADC_MspInit+0x2d4>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002612:	2302      	movs	r3, #2
 8002614:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002616:	2303      	movs	r3, #3
 8002618:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002622:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002626:	4619      	mov	r1, r3
 8002628:	4820      	ldr	r0, [pc, #128]	; (80026ac <HAL_ADC_MspInit+0x2f4>)
 800262a:	f003 fb99 	bl	8005d60 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <HAL_ADC_MspInit+0x2f8>)
 8002630:	4a20      	ldr	r2, [pc, #128]	; (80026b4 <HAL_ADC_MspInit+0x2fc>)
 8002632:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002634:	4b1e      	ldr	r3, [pc, #120]	; (80026b0 <HAL_ADC_MspInit+0x2f8>)
 8002636:	2225      	movs	r2, #37	; 0x25
 8002638:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800263a:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <HAL_ADC_MspInit+0x2f8>)
 800263c:	2200      	movs	r2, #0
 800263e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002640:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <HAL_ADC_MspInit+0x2f8>)
 8002642:	2200      	movs	r2, #0
 8002644:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002646:	4b1a      	ldr	r3, [pc, #104]	; (80026b0 <HAL_ADC_MspInit+0x2f8>)
 8002648:	2280      	movs	r2, #128	; 0x80
 800264a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800264c:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <HAL_ADC_MspInit+0x2f8>)
 800264e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002652:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002654:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <HAL_ADC_MspInit+0x2f8>)
 8002656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800265a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800265c:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <HAL_ADC_MspInit+0x2f8>)
 800265e:	2220      	movs	r2, #32
 8002660:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8002662:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <HAL_ADC_MspInit+0x2f8>)
 8002664:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002668:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800266a:	4811      	ldr	r0, [pc, #68]	; (80026b0 <HAL_ADC_MspInit+0x2f8>)
 800266c:	f003 f816 	bl	800569c <HAL_DMA_Init>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_ADC_MspInit+0x2c2>
      Error_Handler();
 8002676:	f7ff fe6d 	bl	8002354 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a0c      	ldr	r2, [pc, #48]	; (80026b0 <HAL_ADC_MspInit+0x2f8>)
 800267e:	655a      	str	r2, [r3, #84]	; 0x54
 8002680:	4a0b      	ldr	r2, [pc, #44]	; (80026b0 <HAL_ADC_MspInit+0x2f8>)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002686:	e088      	b.n	800279a <HAL_ADC_MspInit+0x3e2>
 8002688:	20003790 	.word	0x20003790
 800268c:	40021000 	.word	0x40021000
 8002690:	20000534 	.word	0x20000534
 8002694:	40020008 	.word	0x40020008
 8002698:	50000100 	.word	0x50000100
 800269c:	20000594 	.word	0x20000594
 80026a0:	4002001c 	.word	0x4002001c
 80026a4:	50000400 	.word	0x50000400
 80026a8:	20003794 	.word	0x20003794
 80026ac:	48000400 	.word	0x48000400
 80026b0:	200005f4 	.word	0x200005f4
 80026b4:	40020030 	.word	0x40020030
  else if(hadc->Instance==ADC4)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a39      	ldr	r2, [pc, #228]	; (80027a4 <HAL_ADC_MspInit+0x3ec>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d16b      	bne.n	800279a <HAL_ADC_MspInit+0x3e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80026c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026c6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80026c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026cc:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026d2:	4618      	mov	r0, r3
 80026d4:	f006 fef0 	bl	80094b8 <HAL_RCCEx_PeriphCLKConfig>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_ADC_MspInit+0x32a>
      Error_Handler();
 80026de:	f7ff fe39 	bl	8002354 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80026e2:	4b31      	ldr	r3, [pc, #196]	; (80027a8 <HAL_ADC_MspInit+0x3f0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3301      	adds	r3, #1
 80026e8:	4a2f      	ldr	r2, [pc, #188]	; (80027a8 <HAL_ADC_MspInit+0x3f0>)
 80026ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80026ec:	4b2e      	ldr	r3, [pc, #184]	; (80027a8 <HAL_ADC_MspInit+0x3f0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d10b      	bne.n	800270c <HAL_ADC_MspInit+0x354>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80026f4:	4b2d      	ldr	r3, [pc, #180]	; (80027ac <HAL_ADC_MspInit+0x3f4>)
 80026f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f8:	4a2c      	ldr	r2, [pc, #176]	; (80027ac <HAL_ADC_MspInit+0x3f4>)
 80026fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002700:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <HAL_ADC_MspInit+0x3f4>)
 8002702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800270c:	4b27      	ldr	r3, [pc, #156]	; (80027ac <HAL_ADC_MspInit+0x3f4>)
 800270e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002710:	4a26      	ldr	r2, [pc, #152]	; (80027ac <HAL_ADC_MspInit+0x3f4>)
 8002712:	f043 0302 	orr.w	r3, r3, #2
 8002716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002718:	4b24      	ldr	r3, [pc, #144]	; (80027ac <HAL_ADC_MspInit+0x3f4>)
 800271a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002724:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002728:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800272a:	2303      	movs	r3, #3
 800272c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002736:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800273a:	4619      	mov	r1, r3
 800273c:	481c      	ldr	r0, [pc, #112]	; (80027b0 <HAL_ADC_MspInit+0x3f8>)
 800273e:	f003 fb0f 	bl	8005d60 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8002742:	4b1c      	ldr	r3, [pc, #112]	; (80027b4 <HAL_ADC_MspInit+0x3fc>)
 8002744:	4a1c      	ldr	r2, [pc, #112]	; (80027b8 <HAL_ADC_MspInit+0x400>)
 8002746:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8002748:	4b1a      	ldr	r3, [pc, #104]	; (80027b4 <HAL_ADC_MspInit+0x3fc>)
 800274a:	2226      	movs	r2, #38	; 0x26
 800274c:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800274e:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_ADC_MspInit+0x3fc>)
 8002750:	2200      	movs	r2, #0
 8002752:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002754:	4b17      	ldr	r3, [pc, #92]	; (80027b4 <HAL_ADC_MspInit+0x3fc>)
 8002756:	2200      	movs	r2, #0
 8002758:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800275a:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <HAL_ADC_MspInit+0x3fc>)
 800275c:	2280      	movs	r2, #128	; 0x80
 800275e:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002760:	4b14      	ldr	r3, [pc, #80]	; (80027b4 <HAL_ADC_MspInit+0x3fc>)
 8002762:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002766:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_ADC_MspInit+0x3fc>)
 800276a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800276e:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8002770:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <HAL_ADC_MspInit+0x3fc>)
 8002772:	2220      	movs	r2, #32
 8002774:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_HIGH;
 8002776:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <HAL_ADC_MspInit+0x3fc>)
 8002778:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800277c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800277e:	480d      	ldr	r0, [pc, #52]	; (80027b4 <HAL_ADC_MspInit+0x3fc>)
 8002780:	f002 ff8c 	bl	800569c <HAL_DMA_Init>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_ADC_MspInit+0x3d6>
      Error_Handler();
 800278a:	f7ff fde3 	bl	8002354 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a08      	ldr	r2, [pc, #32]	; (80027b4 <HAL_ADC_MspInit+0x3fc>)
 8002792:	655a      	str	r2, [r3, #84]	; 0x54
 8002794:	4a07      	ldr	r2, [pc, #28]	; (80027b4 <HAL_ADC_MspInit+0x3fc>)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6293      	str	r3, [r2, #40]	; 0x28
}
 800279a:	bf00      	nop
 800279c:	3790      	adds	r7, #144	; 0x90
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	50000500 	.word	0x50000500
 80027a8:	20003794 	.word	0x20003794
 80027ac:	40021000 	.word	0x40021000
 80027b0:	48000400 	.word	0x48000400
 80027b4:	20000654 	.word	0x20000654
 80027b8:	40020044 	.word	0x40020044

080027bc <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027cc:	d119      	bne.n	8002802 <HAL_ADC_MspDeInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_ADC12_CLK_ENABLED--;
 80027ce:	4b3c      	ldr	r3, [pc, #240]	; (80028c0 <HAL_ADC_MspDeInit+0x104>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	4a3a      	ldr	r2, [pc, #232]	; (80028c0 <HAL_ADC_MspDeInit+0x104>)
 80027d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==0){
 80027d8:	4b39      	ldr	r3, [pc, #228]	; (80028c0 <HAL_ADC_MspDeInit+0x104>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <HAL_ADC_MspDeInit+0x30>
      __HAL_RCC_ADC12_CLK_DISABLE();
 80027e0:	4b38      	ldr	r3, [pc, #224]	; (80028c4 <HAL_ADC_MspDeInit+0x108>)
 80027e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e4:	4a37      	ldr	r2, [pc, #220]	; (80028c4 <HAL_ADC_MspDeInit+0x108>)
 80027e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027ea:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 80027ec:	2101      	movs	r1, #1
 80027ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027f2:	f003 fc37 	bl	8006064 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fa:	4618      	mov	r0, r3
 80027fc:	f002 fff6 	bl	80057ec <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC4_MspDeInit 1 */

  /* USER CODE END ADC4_MspDeInit 1 */
  }

}
 8002800:	e05a      	b.n	80028b8 <HAL_ADC_MspDeInit+0xfc>
  else if(hadc->Instance==ADC2)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a30      	ldr	r2, [pc, #192]	; (80028c8 <HAL_ADC_MspDeInit+0x10c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d119      	bne.n	8002840 <HAL_ADC_MspDeInit+0x84>
    HAL_RCC_ADC12_CLK_ENABLED--;
 800280c:	4b2c      	ldr	r3, [pc, #176]	; (80028c0 <HAL_ADC_MspDeInit+0x104>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	3b01      	subs	r3, #1
 8002812:	4a2b      	ldr	r2, [pc, #172]	; (80028c0 <HAL_ADC_MspDeInit+0x104>)
 8002814:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==0){
 8002816:	4b2a      	ldr	r3, [pc, #168]	; (80028c0 <HAL_ADC_MspDeInit+0x104>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d105      	bne.n	800282a <HAL_ADC_MspDeInit+0x6e>
      __HAL_RCC_ADC12_CLK_DISABLE();
 800281e:	4b29      	ldr	r3, [pc, #164]	; (80028c4 <HAL_ADC_MspDeInit+0x108>)
 8002820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002822:	4a28      	ldr	r2, [pc, #160]	; (80028c4 <HAL_ADC_MspDeInit+0x108>)
 8002824:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002828:	64d3      	str	r3, [r2, #76]	; 0x4c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 800282a:	2140      	movs	r1, #64	; 0x40
 800282c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002830:	f003 fc18 	bl	8006064 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002838:	4618      	mov	r0, r3
 800283a:	f002 ffd7 	bl	80057ec <HAL_DMA_DeInit>
}
 800283e:	e03b      	b.n	80028b8 <HAL_ADC_MspDeInit+0xfc>
  else if(hadc->Instance==ADC3)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a21      	ldr	r2, [pc, #132]	; (80028cc <HAL_ADC_MspDeInit+0x110>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d118      	bne.n	800287c <HAL_ADC_MspDeInit+0xc0>
    HAL_RCC_ADC345_CLK_ENABLED--;
 800284a:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <HAL_ADC_MspDeInit+0x114>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	3b01      	subs	r3, #1
 8002850:	4a1f      	ldr	r2, [pc, #124]	; (80028d0 <HAL_ADC_MspDeInit+0x114>)
 8002852:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==0){
 8002854:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <HAL_ADC_MspDeInit+0x114>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d105      	bne.n	8002868 <HAL_ADC_MspDeInit+0xac>
      __HAL_RCC_ADC345_CLK_DISABLE();
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <HAL_ADC_MspDeInit+0x108>)
 800285e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002860:	4a18      	ldr	r2, [pc, #96]	; (80028c4 <HAL_ADC_MspDeInit+0x108>)
 8002862:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002866:	64d3      	str	r3, [r2, #76]	; 0x4c
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_1);
 8002868:	2102      	movs	r1, #2
 800286a:	481a      	ldr	r0, [pc, #104]	; (80028d4 <HAL_ADC_MspDeInit+0x118>)
 800286c:	f003 fbfa 	bl	8006064 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002874:	4618      	mov	r0, r3
 8002876:	f002 ffb9 	bl	80057ec <HAL_DMA_DeInit>
}
 800287a:	e01d      	b.n	80028b8 <HAL_ADC_MspDeInit+0xfc>
  else if(hadc->Instance==ADC4)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a15      	ldr	r2, [pc, #84]	; (80028d8 <HAL_ADC_MspDeInit+0x11c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d118      	bne.n	80028b8 <HAL_ADC_MspDeInit+0xfc>
    HAL_RCC_ADC345_CLK_ENABLED--;
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_ADC_MspDeInit+0x114>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	3b01      	subs	r3, #1
 800288c:	4a10      	ldr	r2, [pc, #64]	; (80028d0 <HAL_ADC_MspDeInit+0x114>)
 800288e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==0){
 8002890:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <HAL_ADC_MspDeInit+0x114>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d105      	bne.n	80028a4 <HAL_ADC_MspDeInit+0xe8>
      __HAL_RCC_ADC345_CLK_DISABLE();
 8002898:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <HAL_ADC_MspDeInit+0x108>)
 800289a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289c:	4a09      	ldr	r2, [pc, #36]	; (80028c4 <HAL_ADC_MspDeInit+0x108>)
 800289e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028a2:	64d3      	str	r3, [r2, #76]	; 0x4c
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15);
 80028a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028a8:	480a      	ldr	r0, [pc, #40]	; (80028d4 <HAL_ADC_MspDeInit+0x118>)
 80028aa:	f003 fbdb 	bl	8006064 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hadc->DMA_Handle);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b2:	4618      	mov	r0, r3
 80028b4:	f002 ff9a 	bl	80057ec <HAL_DMA_DeInit>
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20003790 	.word	0x20003790
 80028c4:	40021000 	.word	0x40021000
 80028c8:	50000100 	.word	0x50000100
 80028cc:	50000400 	.word	0x50000400
 80028d0:	20003794 	.word	0x20003794
 80028d4:	48000400 	.word	0x48000400
 80028d8:	50000500 	.word	0x50000500

080028dc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	; 0x28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	f107 0314 	add.w	r3, r7, #20
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a15      	ldr	r2, [pc, #84]	; (8002950 <HAL_DAC_MspInit+0x74>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d124      	bne.n	8002948 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80028fe:	4b15      	ldr	r3, [pc, #84]	; (8002954 <HAL_DAC_MspInit+0x78>)
 8002900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002902:	4a14      	ldr	r2, [pc, #80]	; (8002954 <HAL_DAC_MspInit+0x78>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800290a:	4b12      	ldr	r3, [pc, #72]	; (8002954 <HAL_DAC_MspInit+0x78>)
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002916:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <HAL_DAC_MspInit+0x78>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <HAL_DAC_MspInit+0x78>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002922:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <HAL_DAC_MspInit+0x78>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800292e:	2310      	movs	r3, #16
 8002930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002932:	2303      	movs	r3, #3
 8002934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293a:	f107 0314 	add.w	r3, r7, #20
 800293e:	4619      	mov	r1, r3
 8002940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002944:	f003 fa0c 	bl	8005d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002948:	bf00      	nop
 800294a:	3728      	adds	r7, #40	; 0x28
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	50000800 	.word	0x50000800
 8002954:	40021000 	.word	0x40021000

08002958 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b09e      	sub	sp, #120	; 0x78
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002970:	f107 0310 	add.w	r3, r7, #16
 8002974:	2254      	movs	r2, #84	; 0x54
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f00c fef0 	bl	800f75e <memset>
  if(hi2c->Instance==I2C3)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a1f      	ldr	r2, [pc, #124]	; (8002a00 <HAL_I2C_MspInit+0xa8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d137      	bne.n	80029f8 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800298c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800298e:	2300      	movs	r3, #0
 8002990:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002992:	f107 0310 	add.w	r3, r7, #16
 8002996:	4618      	mov	r0, r3
 8002998:	f006 fd8e 	bl	80094b8 <HAL_RCCEx_PeriphCLKConfig>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80029a2:	f7ff fcd7 	bl	8002354 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a6:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <HAL_I2C_MspInit+0xac>)
 80029a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029aa:	4a16      	ldr	r2, [pc, #88]	; (8002a04 <HAL_I2C_MspInit+0xac>)
 80029ac:	f043 0304 	orr.w	r3, r3, #4
 80029b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029b2:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <HAL_I2C_MspInit+0xac>)
 80029b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = TEMP_SCL_Pin|TEMP_SDA_Pin;
 80029be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029c2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029c4:	2312      	movs	r3, #18
 80029c6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029cc:	2300      	movs	r3, #0
 80029ce:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80029d0:	2308      	movs	r3, #8
 80029d2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80029d8:	4619      	mov	r1, r3
 80029da:	480b      	ldr	r0, [pc, #44]	; (8002a08 <HAL_I2C_MspInit+0xb0>)
 80029dc:	f003 f9c0 	bl	8005d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <HAL_I2C_MspInit+0xac>)
 80029e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e4:	4a07      	ldr	r2, [pc, #28]	; (8002a04 <HAL_I2C_MspInit+0xac>)
 80029e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029ea:	6593      	str	r3, [r2, #88]	; 0x58
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_I2C_MspInit+0xac>)
 80029ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80029f8:	bf00      	nop
 80029fa:	3778      	adds	r7, #120	; 0x78
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40007800 	.word	0x40007800
 8002a04:	40021000 	.word	0x40021000
 8002a08:	48000800 	.word	0x48000800

08002a0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1c:	d10b      	bne.n	8002a36 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a1e:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <HAL_TIM_Base_MspInit+0x38>)
 8002a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a22:	4a08      	ldr	r2, [pc, #32]	; (8002a44 <HAL_TIM_Base_MspInit+0x38>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6593      	str	r3, [r2, #88]	; 0x58
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_TIM_Base_MspInit+0x38>)
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000

08002a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a4c:	e7fe      	b.n	8002a4c <NMI_Handler+0x4>

08002a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a52:	e7fe      	b.n	8002a52 <HardFault_Handler+0x4>

08002a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a58:	e7fe      	b.n	8002a58 <MemManage_Handler+0x4>

08002a5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a5e:	e7fe      	b.n	8002a5e <BusFault_Handler+0x4>

08002a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a64:	e7fe      	b.n	8002a64 <UsageFault_Handler+0x4>

08002a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a66:	b480      	push	{r7}
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a94:	f000 f9aa 	bl	8002dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a98:	bf00      	nop
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002aa0:	4804      	ldr	r0, [pc, #16]	; (8002ab4 <DMA1_Channel1_IRQHandler+0x18>)
 8002aa2:	f003 f80d 	bl	8005ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  dma_int_counter++;
 8002aa6:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <DMA1_Channel1_IRQHandler+0x1c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	4a02      	ldr	r2, [pc, #8]	; (8002ab8 <DMA1_Channel1_IRQHandler+0x1c>)
 8002aae:	6013      	str	r3, [r2, #0]
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ab0:	bf00      	nop
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20000534 	.word	0x20000534
 8002ab8:	20003798 	.word	0x20003798

08002abc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002ac0:	4802      	ldr	r0, [pc, #8]	; (8002acc <DMA1_Channel2_IRQHandler+0x10>)
 8002ac2:	f002 fffd 	bl	8005ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000594 	.word	0x20000594

08002ad0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002ad4:	4802      	ldr	r0, [pc, #8]	; (8002ae0 <DMA1_Channel3_IRQHandler+0x10>)
 8002ad6:	f002 fff3 	bl	8005ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	200005f4 	.word	0x200005f4

08002ae4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8002ae8:	4802      	ldr	r0, [pc, #8]	; (8002af4 <DMA1_Channel4_IRQHandler+0x10>)
 8002aea:	f002 ffe9 	bl	8005ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000654 	.word	0x20000654

08002af8 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002afc:	4802      	ldr	r0, [pc, #8]	; (8002b08 <USB_HP_IRQHandler+0x10>)
 8002afe:	f004 fae0 	bl	80070c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20004c78 	.word	0x20004c78

08002b0c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002b10:	4802      	ldr	r0, [pc, #8]	; (8002b1c <USB_LP_IRQHandler+0x10>)
 8002b12:	f004 fad6 	bl	80070c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20004c78 	.word	0x20004c78

08002b20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TRIG_SHORT_Pin);
 8002b24:	2020      	movs	r0, #32
 8002b26:	f003 fb97 	bl	8006258 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TRIG_EXT_2_Pin);
 8002b2a:	2040      	movs	r0, #64	; 0x40
 8002b2c:	f003 fb94 	bl	8006258 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TRIG_EXT_1_Pin);
 8002b30:	2080      	movs	r0, #128	; 0x80
 8002b32:	f003 fb91 	bl	8006258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  measurement_activated = 1;
 8002b36:	4b02      	ldr	r3, [pc, #8]	; (8002b40 <EXTI9_5_IRQHandler+0x20>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b3c:	bf00      	nop
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	200027e4 	.word	0x200027e4

08002b44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return 1;
 8002b48:	2301      	movs	r3, #1
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <_kill>:

int _kill(int pid, int sig)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b5e:	f00c febf 	bl	800f8e0 <__errno>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2216      	movs	r2, #22
 8002b66:	601a      	str	r2, [r3, #0]
  return -1;
 8002b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <_exit>:

void _exit (int status)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff ffe7 	bl	8002b54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b86:	e7fe      	b.n	8002b86 <_exit+0x12>

08002b88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	e00a      	b.n	8002bb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b9a:	f3af 8000 	nop.w
 8002b9e:	4601      	mov	r1, r0
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	60ba      	str	r2, [r7, #8]
 8002ba6:	b2ca      	uxtb	r2, r1
 8002ba8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	3301      	adds	r3, #1
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	dbf0      	blt.n	8002b9a <_read+0x12>
  }

  return len;
 8002bb8:	687b      	ldr	r3, [r7, #4]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b086      	sub	sp, #24
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	e009      	b.n	8002be8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	60ba      	str	r2, [r7, #8]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	3301      	adds	r3, #1
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	dbf1      	blt.n	8002bd4 <_write+0x12>
  }
  return len;
 8002bf0:	687b      	ldr	r3, [r7, #4]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <_close>:

int _close(int file)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c22:	605a      	str	r2, [r3, #4]
  return 0;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <_isatty>:

int _isatty(int file)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c3a:	2301      	movs	r3, #1
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c6c:	4a14      	ldr	r2, [pc, #80]	; (8002cc0 <_sbrk+0x5c>)
 8002c6e:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <_sbrk+0x60>)
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c78:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <_sbrk+0x64>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c80:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <_sbrk+0x64>)
 8002c82:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <_sbrk+0x68>)
 8002c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c86:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <_sbrk+0x64>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d207      	bcs.n	8002ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c94:	f00c fe24 	bl	800f8e0 <__errno>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	220c      	movs	r2, #12
 8002c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca2:	e009      	b.n	8002cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ca4:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <_sbrk+0x64>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002caa:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <_sbrk+0x64>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	4a05      	ldr	r2, [pc, #20]	; (8002cc8 <_sbrk+0x64>)
 8002cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20020000 	.word	0x20020000
 8002cc4:	00001000 	.word	0x00001000
 8002cc8:	2000379c 	.word	0x2000379c
 8002ccc:	200052c0 	.word	0x200052c0

08002cd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <SystemInit+0x20>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cda:	4a05      	ldr	r2, [pc, #20]	; (8002cf0 <SystemInit+0x20>)
 8002cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ce4:	bf00      	nop
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002cf4:	480d      	ldr	r0, [pc, #52]	; (8002d2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cf6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cf8:	f7ff ffea 	bl	8002cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cfc:	480c      	ldr	r0, [pc, #48]	; (8002d30 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cfe:	490d      	ldr	r1, [pc, #52]	; (8002d34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d00:	4a0d      	ldr	r2, [pc, #52]	; (8002d38 <LoopForever+0xe>)
  movs r3, #0
 8002d02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002d04:	e002      	b.n	8002d0c <LoopCopyDataInit>

08002d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d0a:	3304      	adds	r3, #4

08002d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d10:	d3f9      	bcc.n	8002d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d12:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d14:	4c0a      	ldr	r4, [pc, #40]	; (8002d40 <LoopForever+0x16>)
  movs r3, #0
 8002d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d18:	e001      	b.n	8002d1e <LoopFillZerobss>

08002d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d1c:	3204      	adds	r2, #4

08002d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d20:	d3fb      	bcc.n	8002d1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d22:	f00c fde3 	bl	800f8ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d26:	f7fd ffe7 	bl	8000cf8 <main>

08002d2a <LoopForever>:

LoopForever:
    b LoopForever
 8002d2a:	e7fe      	b.n	8002d2a <LoopForever>
  ldr   r0, =_estack
 8002d2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d34:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 8002d38:	08012f00 	.word	0x08012f00
  ldr r2, =_sbss
 8002d3c:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 8002d40:	200052c0 	.word	0x200052c0

08002d44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d44:	e7fe      	b.n	8002d44 <ADC1_2_IRQHandler>

08002d46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d50:	2003      	movs	r0, #3
 8002d52:	f002 f8c3 	bl	8004edc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d56:	2000      	movs	r0, #0
 8002d58:	f000 f80e 	bl	8002d78 <HAL_InitTick>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	71fb      	strb	r3, [r7, #7]
 8002d66:	e001      	b.n	8002d6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d68:	f7ff fafa 	bl	8002360 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d6c:	79fb      	ldrb	r3, [r7, #7]

}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002d84:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <HAL_InitTick+0x68>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d022      	beq.n	8002dd2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002d8c:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <HAL_InitTick+0x6c>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <HAL_InitTick+0x68>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d98:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da0:	4618      	mov	r0, r3
 8002da2:	f002 f8ce 	bl	8004f42 <HAL_SYSTICK_Config>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10f      	bne.n	8002dcc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b0f      	cmp	r3, #15
 8002db0:	d809      	bhi.n	8002dc6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002db2:	2200      	movs	r2, #0
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dba:	f002 f89a 	bl	8004ef2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002dbe:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <HAL_InitTick+0x70>)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	e007      	b.n	8002dd6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]
 8002dca:	e004      	b.n	8002dd6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]
 8002dd0:	e001      	b.n	8002dd6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	20000014 	.word	0x20000014
 8002de4:	2000000c 	.word	0x2000000c
 8002de8:	20000010 	.word	0x20000010

08002dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_IncTick+0x1c>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_IncTick+0x20>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4413      	add	r3, r2
 8002dfa:	4a03      	ldr	r2, [pc, #12]	; (8002e08 <HAL_IncTick+0x1c>)
 8002dfc:	6013      	str	r3, [r2, #0]
}
 8002dfe:	bf00      	nop
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	200037a0 	.word	0x200037a0
 8002e0c:	20000014 	.word	0x20000014

08002e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return uwTick;
 8002e14:	4b03      	ldr	r3, [pc, #12]	; (8002e24 <HAL_GetTick+0x14>)
 8002e16:	681b      	ldr	r3, [r3, #0]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	200037a0 	.word	0x200037a0

08002e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e30:	f7ff ffee 	bl	8002e10 <HAL_GetTick>
 8002e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e40:	d004      	beq.n	8002e4c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e42:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <HAL_Delay+0x40>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4413      	add	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e4c:	bf00      	nop
 8002e4e:	f7ff ffdf 	bl	8002e10 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d8f7      	bhi.n	8002e4e <HAL_Delay+0x26>
  {
  }
}
 8002e5e:	bf00      	nop
 8002e60:	bf00      	nop
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20000014 	.word	0x20000014

08002e6c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e7c:	4904      	ldr	r1, [pc, #16]	; (8002e90 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	600b      	str	r3, [r1, #0]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	40010030 	.word	0x40010030

08002e94 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f023 0202 	bic.w	r2, r3, #2
 8002ea4:	4904      	ldr	r1, [pc, #16]	; (8002eb8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	600b      	str	r3, [r1, #0]
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	40010030 	.word	0x40010030

08002ebc <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002ec2:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a0e      	ldr	r2, [pc, #56]	; (8002f00 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ece:	f7ff ff9f 	bl	8002e10 <HAL_GetTick>
 8002ed2:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8002ed4:	e008      	b.n	8002ee8 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8002ed6:	f7ff ff9b 	bl	8002e10 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b0a      	cmp	r3, #10
 8002ee2:	d901      	bls.n	8002ee8 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e006      	b.n	8002ef6 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40010030 	.word	0x40010030

08002f04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	609a      	str	r2, [r3, #8]
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	609a      	str	r2, [r3, #8]
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	3360      	adds	r3, #96	; 0x60
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <LL_ADC_SetOffset+0x44>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002fa4:	bf00      	nop
 8002fa6:	371c      	adds	r7, #28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	03fff000 	.word	0x03fff000

08002fb4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3360      	adds	r3, #96	; 0x60
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b087      	sub	sp, #28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	3360      	adds	r3, #96	; 0x60
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	431a      	orrs	r2, r3
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800300a:	bf00      	nop
 800300c:	371c      	adds	r7, #28
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003016:	b480      	push	{r7}
 8003018:	b087      	sub	sp, #28
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	3360      	adds	r3, #96	; 0x60
 8003026:	461a      	mov	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	431a      	orrs	r2, r3
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	3360      	adds	r3, #96	; 0x60
 800305c:	461a      	mov	r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	431a      	orrs	r2, r3
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003076:	bf00      	nop
 8003078:	371c      	adds	r7, #28
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	615a      	str	r2, [r3, #20]
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80030bc:	2301      	movs	r3, #1
 80030be:	e000      	b.n	80030c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b087      	sub	sp, #28
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	3330      	adds	r3, #48	; 0x30
 80030de:	461a      	mov	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	f003 030c 	and.w	r3, r3, #12
 80030ea:	4413      	add	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	211f      	movs	r1, #31
 80030fa:	fa01 f303 	lsl.w	r3, r1, r3
 80030fe:	43db      	mvns	r3, r3
 8003100:	401a      	ands	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	0e9b      	lsrs	r3, r3, #26
 8003106:	f003 011f 	and.w	r1, r3, #31
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f003 031f 	and.w	r3, r3, #31
 8003110:	fa01 f303 	lsl.w	r3, r1, r3
 8003114:	431a      	orrs	r2, r3
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800311a:	bf00      	nop
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003126:	b480      	push	{r7}
 8003128:	b087      	sub	sp, #28
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	3314      	adds	r3, #20
 8003136:	461a      	mov	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	0e5b      	lsrs	r3, r3, #25
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	4413      	add	r3, r2
 8003144:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	0d1b      	lsrs	r3, r3, #20
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	2107      	movs	r1, #7
 8003154:	fa01 f303 	lsl.w	r3, r1, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	401a      	ands	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	0d1b      	lsrs	r3, r3, #20
 8003160:	f003 031f 	and.w	r3, r3, #31
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	fa01 f303 	lsl.w	r3, r1, r3
 800316a:	431a      	orrs	r2, r3
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003170:	bf00      	nop
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003194:	43db      	mvns	r3, r3
 8003196:	401a      	ands	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f003 0318 	and.w	r3, r3, #24
 800319e:	4908      	ldr	r1, [pc, #32]	; (80031c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80031a0:	40d9      	lsrs	r1, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	400b      	ands	r3, r1
 80031a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031aa:	431a      	orrs	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80031b2:	bf00      	nop
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	0007ffff 	.word	0x0007ffff

080031c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 031f 	and.w	r3, r3, #31
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80031f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6093      	str	r3, [r2, #8]
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003218:	d101      	bne.n	800321e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800323c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003240:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003264:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003268:	d101      	bne.n	800326e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800328c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003290:	f043 0201 	orr.w	r2, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032b8:	f043 0202 	orr.w	r2, r3, #2
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <LL_ADC_IsEnabled+0x18>
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <LL_ADC_IsEnabled+0x1a>
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b02      	cmp	r3, #2
 8003304:	d101      	bne.n	800330a <LL_ADC_IsDisableOngoing+0x18>
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <LL_ADC_IsDisableOngoing+0x1a>
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003328:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800332c:	f043 0204 	orr.w	r2, r3, #4
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003350:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003354:	f043 0210 	orr.w	r2, r3, #16
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b04      	cmp	r3, #4
 800337a:	d101      	bne.n	8003380 <LL_ADC_REG_IsConversionOngoing+0x18>
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800339e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033a2:	f043 0220 	orr.w	r2, r3, #32
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d101      	bne.n	80033ce <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033dc:	b590      	push	{r4, r7, lr}
 80033de:	b089      	sub	sp, #36	; 0x24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e1a9      	b.n	800374a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003400:	2b00      	cmp	r3, #0
 8003402:	d109      	bne.n	8003418 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7fe ffd7 	bl	80023b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff fef1 	bl	8003204 <LL_ADC_IsDeepPowerDownEnabled>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d004      	beq.n	8003432 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff fed7 	bl	80031e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff ff0c 	bl	8003254 <LL_ADC_IsInternalRegulatorEnabled>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d115      	bne.n	800346e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff fef0 	bl	800322c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800344c:	4b9c      	ldr	r3, [pc, #624]	; (80036c0 <HAL_ADC_Init+0x2e4>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	099b      	lsrs	r3, r3, #6
 8003452:	4a9c      	ldr	r2, [pc, #624]	; (80036c4 <HAL_ADC_Init+0x2e8>)
 8003454:	fba2 2303 	umull	r2, r3, r2, r3
 8003458:	099b      	lsrs	r3, r3, #6
 800345a:	3301      	adds	r3, #1
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003460:	e002      	b.n	8003468 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	3b01      	subs	r3, #1
 8003466:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f9      	bne.n	8003462 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff feee 	bl	8003254 <LL_ADC_IsInternalRegulatorEnabled>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10d      	bne.n	800349a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003482:	f043 0210 	orr.w	r2, r3, #16
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800348e:	f043 0201 	orr.w	r2, r3, #1
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff ff62 	bl	8003368 <LL_ADC_REG_IsConversionOngoing>
 80034a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f040 8142 	bne.w	8003738 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f040 813e 	bne.w	8003738 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80034c4:	f043 0202 	orr.w	r2, r3, #2
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fefb 	bl	80032cc <LL_ADC_IsEnabled>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d141      	bne.n	8003560 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034e4:	d004      	beq.n	80034f0 <HAL_ADC_Init+0x114>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a77      	ldr	r2, [pc, #476]	; (80036c8 <HAL_ADC_Init+0x2ec>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d10f      	bne.n	8003510 <HAL_ADC_Init+0x134>
 80034f0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80034f4:	f7ff feea 	bl	80032cc <LL_ADC_IsEnabled>
 80034f8:	4604      	mov	r4, r0
 80034fa:	4873      	ldr	r0, [pc, #460]	; (80036c8 <HAL_ADC_Init+0x2ec>)
 80034fc:	f7ff fee6 	bl	80032cc <LL_ADC_IsEnabled>
 8003500:	4603      	mov	r3, r0
 8003502:	4323      	orrs	r3, r4
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf0c      	ite	eq
 8003508:	2301      	moveq	r3, #1
 800350a:	2300      	movne	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	e012      	b.n	8003536 <HAL_ADC_Init+0x15a>
 8003510:	486e      	ldr	r0, [pc, #440]	; (80036cc <HAL_ADC_Init+0x2f0>)
 8003512:	f7ff fedb 	bl	80032cc <LL_ADC_IsEnabled>
 8003516:	4604      	mov	r4, r0
 8003518:	486d      	ldr	r0, [pc, #436]	; (80036d0 <HAL_ADC_Init+0x2f4>)
 800351a:	f7ff fed7 	bl	80032cc <LL_ADC_IsEnabled>
 800351e:	4603      	mov	r3, r0
 8003520:	431c      	orrs	r4, r3
 8003522:	486c      	ldr	r0, [pc, #432]	; (80036d4 <HAL_ADC_Init+0x2f8>)
 8003524:	f7ff fed2 	bl	80032cc <LL_ADC_IsEnabled>
 8003528:	4603      	mov	r3, r0
 800352a:	4323      	orrs	r3, r4
 800352c:	2b00      	cmp	r3, #0
 800352e:	bf0c      	ite	eq
 8003530:	2301      	moveq	r3, #1
 8003532:	2300      	movne	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d012      	beq.n	8003560 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003542:	d004      	beq.n	800354e <HAL_ADC_Init+0x172>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a5f      	ldr	r2, [pc, #380]	; (80036c8 <HAL_ADC_Init+0x2ec>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d101      	bne.n	8003552 <HAL_ADC_Init+0x176>
 800354e:	4a62      	ldr	r2, [pc, #392]	; (80036d8 <HAL_ADC_Init+0x2fc>)
 8003550:	e000      	b.n	8003554 <HAL_ADC_Init+0x178>
 8003552:	4a62      	ldr	r2, [pc, #392]	; (80036dc <HAL_ADC_Init+0x300>)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4619      	mov	r1, r3
 800355a:	4610      	mov	r0, r2
 800355c:	f7ff fcd2 	bl	8002f04 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	7f5b      	ldrb	r3, [r3, #29]
 8003564:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800356a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003570:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003576:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800357e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003580:	4313      	orrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800358a:	2b01      	cmp	r3, #1
 800358c:	d106      	bne.n	800359c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003592:	3b01      	subs	r3, #1
 8003594:	045b      	lsls	r3, r3, #17
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d009      	beq.n	80035b8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	4b48      	ldr	r3, [pc, #288]	; (80036e0 <HAL_ADC_Init+0x304>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6812      	ldr	r2, [r2, #0]
 80035c6:	69b9      	ldr	r1, [r7, #24]
 80035c8:	430b      	orrs	r3, r1
 80035ca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fee5 	bl	80033b6 <LL_ADC_INJ_IsConversionOngoing>
 80035ec:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d17f      	bne.n	80036f4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d17c      	bne.n	80036f4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80035fe:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003606:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003608:	4313      	orrs	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003616:	f023 0302 	bic.w	r3, r3, #2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	69b9      	ldr	r1, [r7, #24]
 8003620:	430b      	orrs	r3, r1
 8003622:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d017      	beq.n	800365c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800363a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003644:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003648:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6911      	ldr	r1, [r2, #16]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	430b      	orrs	r3, r1
 8003656:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800365a:	e013      	b.n	8003684 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691a      	ldr	r2, [r3, #16]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800366a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800367c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003680:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800368a:	2b01      	cmp	r3, #1
 800368c:	d12a      	bne.n	80036e4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003698:	f023 0304 	bic.w	r3, r3, #4
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80036a4:	4311      	orrs	r1, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80036aa:	4311      	orrs	r1, r2
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036b0:	430a      	orrs	r2, r1
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0201 	orr.w	r2, r2, #1
 80036bc:	611a      	str	r2, [r3, #16]
 80036be:	e019      	b.n	80036f4 <HAL_ADC_Init+0x318>
 80036c0:	2000000c 	.word	0x2000000c
 80036c4:	053e2d63 	.word	0x053e2d63
 80036c8:	50000100 	.word	0x50000100
 80036cc:	50000400 	.word	0x50000400
 80036d0:	50000500 	.word	0x50000500
 80036d4:	50000600 	.word	0x50000600
 80036d8:	50000300 	.word	0x50000300
 80036dc:	50000700 	.word	0x50000700
 80036e0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0201 	bic.w	r2, r2, #1
 80036f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d10c      	bne.n	8003716 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	f023 010f 	bic.w	r1, r3, #15
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	1e5a      	subs	r2, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
 8003714:	e007      	b.n	8003726 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 020f 	bic.w	r2, r2, #15
 8003724:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372a:	f023 0303 	bic.w	r3, r3, #3
 800372e:	f043 0201 	orr.w	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	65da      	str	r2, [r3, #92]	; 0x5c
 8003736:	e007      	b.n	8003748 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373c:	f043 0210 	orr.w	r2, r3, #16
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003748:	7ffb      	ldrb	r3, [r7, #31]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3724      	adds	r7, #36	; 0x24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd90      	pop	{r4, r7, pc}
 8003752:	bf00      	nop

08003754 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003754:	b590      	push	{r4, r7, lr}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e14d      	b.n	8003a02 <HAL_ADC_DeInit+0x2ae>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376a:	f043 0202 	orr.w	r2, r3, #2
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003772:	2103      	movs	r1, #3
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fedf 	bl	8004538 <ADC_ConversionStop>
 800377a:	4603      	mov	r3, r0
 800377c:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800378c:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800378e:	7bfb      	ldrb	r3, [r7, #15]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10a      	bne.n	80037aa <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f001 f821 	bl	80047dc <ADC_Disable>
 800379a:	4603      	mov	r3, r0
 800379c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d102      	bne.n	80037aa <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	65da      	str	r2, [r3, #92]	; 0x5c
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80037b8:	f023 0307 	bic.w	r3, r3, #7
 80037bc:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80037c6:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 42a0 	bic.w	r2, r2, #1342177280	; 0x50000000
 80037d6:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80037e6:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_FIELDS);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68d9      	ldr	r1, [r3, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	4b86      	ldr	r3, [pc, #536]	; (8003a0c <HAL_ADC_DeInit+0x2b8>)
 80037f4:	400b      	ands	r3, r1
 80037f6:	60d3      	str	r3, [r2, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003806:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6812      	ldr	r2, [r2, #0]
 8003812:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003816:	f023 0307 	bic.w	r3, r3, #7
 800381a:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695a      	ldr	r2, [r3, #20]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800382a:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 800383a:	619a      	str	r2, [r3, #24]
            ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
            ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10);

  /* Reset register TR1 */
  CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6a1a      	ldr	r2, [r3, #32]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800384a:	621a      	str	r2, [r3, #32]

  /* Reset register TR2 */
  CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 800385a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset register TR3 */
  CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 800386a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	4b66      	ldr	r3, [pc, #408]	; (8003a10 <HAL_ADC_DeInit+0x2bc>)
 8003878:	400b      	ands	r3, r1
 800387a:	6313      	str	r3, [r2, #48]	; 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	4b63      	ldr	r3, [pc, #396]	; (8003a14 <HAL_ADC_DeInit+0x2c0>)
 8003888:	400b      	ands	r3, r1
 800388a:	6353      	str	r3, [r2, #52]	; 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	4b5f      	ldr	r3, [pc, #380]	; (8003a14 <HAL_ADC_DeInit+0x2c0>)
 8003898:	400b      	ands	r3, r1
 800389a:	6393      	str	r3, [r2, #56]	; 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	f423 63fb 	bic.w	r3, r3, #2008	; 0x7d8
 80038aa:	f023 0307 	bic.w	r3, r3, #7
 80038ae:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	4b57      	ldr	r3, [pc, #348]	; (8003a18 <HAL_ADC_DeInit+0x2c4>)
 80038bc:	400b      	ands	r3, r1
 80038be:	6613      	str	r3, [r2, #96]	; 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	4b53      	ldr	r3, [pc, #332]	; (8003a18 <HAL_ADC_DeInit+0x2c4>)
 80038cc:	400b      	ands	r3, r1
 80038ce:	6653      	str	r3, [r2, #100]	; 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	4b4f      	ldr	r3, [pc, #316]	; (8003a18 <HAL_ADC_DeInit+0x2c4>)
 80038dc:	400b      	ands	r3, r1
 80038de:	6693      	str	r3, [r2, #104]	; 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	4b4b      	ldr	r3, [pc, #300]	; (8003a18 <HAL_ADC_DeInit+0x2c4>)
 80038ec:	400b      	ands	r3, r1
 80038ee:	66d3      	str	r3, [r2, #108]	; 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6812      	ldr	r2, [r2, #0]
 80038fc:	0cdb      	lsrs	r3, r3, #19
 80038fe:	04db      	lsls	r3, r3, #19
 8003900:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	0cdb      	lsrs	r3, r3, #19
 8003912:	04db      	lsls	r3, r3, #19
 8003914:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6812      	ldr	r2, [r2, #0]
 8003924:	0cdb      	lsrs	r3, r3, #19
 8003926:	04db      	lsls	r3, r3, #19
 8003928:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 800393c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003948:	d004      	beq.n	8003954 <HAL_ADC_DeInit+0x200>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a33      	ldr	r2, [pc, #204]	; (8003a1c <HAL_ADC_DeInit+0x2c8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d10f      	bne.n	8003974 <HAL_ADC_DeInit+0x220>
 8003954:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003958:	f7ff fcb8 	bl	80032cc <LL_ADC_IsEnabled>
 800395c:	4604      	mov	r4, r0
 800395e:	482f      	ldr	r0, [pc, #188]	; (8003a1c <HAL_ADC_DeInit+0x2c8>)
 8003960:	f7ff fcb4 	bl	80032cc <LL_ADC_IsEnabled>
 8003964:	4603      	mov	r3, r0
 8003966:	4323      	orrs	r3, r4
 8003968:	2b00      	cmp	r3, #0
 800396a:	bf0c      	ite	eq
 800396c:	2301      	moveq	r3, #1
 800396e:	2300      	movne	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	e012      	b.n	800399a <HAL_ADC_DeInit+0x246>
 8003974:	482a      	ldr	r0, [pc, #168]	; (8003a20 <HAL_ADC_DeInit+0x2cc>)
 8003976:	f7ff fca9 	bl	80032cc <LL_ADC_IsEnabled>
 800397a:	4604      	mov	r4, r0
 800397c:	4829      	ldr	r0, [pc, #164]	; (8003a24 <HAL_ADC_DeInit+0x2d0>)
 800397e:	f7ff fca5 	bl	80032cc <LL_ADC_IsEnabled>
 8003982:	4603      	mov	r3, r0
 8003984:	431c      	orrs	r4, r3
 8003986:	4828      	ldr	r0, [pc, #160]	; (8003a28 <HAL_ADC_DeInit+0x2d4>)
 8003988:	f7ff fca0 	bl	80032cc <LL_ADC_IsEnabled>
 800398c:	4603      	mov	r3, r0
 800398e:	4323      	orrs	r3, r4
 8003990:	2b00      	cmp	r3, #0
 8003992:	bf0c      	ite	eq
 8003994:	2301      	moveq	r3, #1
 8003996:	2300      	movne	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d020      	beq.n	80039e0 <HAL_ADC_DeInit+0x28c>
      - multimode related parameters (when this feature is available): MDMA,
        DMACFG, DELAY, DUAL (set by HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039a6:	d004      	beq.n	80039b2 <HAL_ADC_DeInit+0x25e>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a1b      	ldr	r2, [pc, #108]	; (8003a1c <HAL_ADC_DeInit+0x2c8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d101      	bne.n	80039b6 <HAL_ADC_DeInit+0x262>
 80039b2:	4b1e      	ldr	r3, [pc, #120]	; (8003a2c <HAL_ADC_DeInit+0x2d8>)
 80039b4:	e000      	b.n	80039b8 <HAL_ADC_DeInit+0x264>
 80039b6:	4b1e      	ldr	r3, [pc, #120]	; (8003a30 <HAL_ADC_DeInit+0x2dc>)
 80039b8:	6899      	ldr	r1, [r3, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039c2:	d004      	beq.n	80039ce <HAL_ADC_DeInit+0x27a>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a14      	ldr	r2, [pc, #80]	; (8003a1c <HAL_ADC_DeInit+0x2c8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d101      	bne.n	80039d2 <HAL_ADC_DeInit+0x27e>
 80039ce:	4a17      	ldr	r2, [pc, #92]	; (8003a2c <HAL_ADC_DeInit+0x2d8>)
 80039d0:	e000      	b.n	80039d4 <HAL_ADC_DeInit+0x280>
 80039d2:	4a17      	ldr	r2, [pc, #92]	; (8003a30 <HAL_ADC_DeInit+0x2dc>)
 80039d4:	4b17      	ldr	r3, [pc, #92]	; (8003a34 <HAL_ADC_DeInit+0x2e0>)
 80039d6:	400b      	ands	r3, r1
 80039d8:	6093      	str	r3, [r2, #8]

    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fe feee 	bl	80027bc <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	665a      	str	r2, [r3, #100]	; 0x64
  hadc->InjectionConfig.ChannelCount = 0;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd90      	pop	{r4, r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	80000004 	.word	0x80000004
 8003a10:	e0820830 	.word	0xe0820830
 8003a14:	e0820820 	.word	0xe0820820
 8003a18:	03fff000 	.word	0x03fff000
 8003a1c:	50000100 	.word	0x50000100
 8003a20:	50000400 	.word	0x50000400
 8003a24:	50000500 	.word	0x50000500
 8003a28:	50000600 	.word	0x50000600
 8003a2c:	50000300 	.word	0x50000300
 8003a30:	50000700 	.word	0x50000700
 8003a34:	fe0010e0 	.word	0xfe0010e0

08003a38 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a4c:	d004      	beq.n	8003a58 <HAL_ADC_Start_DMA+0x20>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a5a      	ldr	r2, [pc, #360]	; (8003bbc <HAL_ADC_Start_DMA+0x184>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d101      	bne.n	8003a5c <HAL_ADC_Start_DMA+0x24>
 8003a58:	4b59      	ldr	r3, [pc, #356]	; (8003bc0 <HAL_ADC_Start_DMA+0x188>)
 8003a5a:	e000      	b.n	8003a5e <HAL_ADC_Start_DMA+0x26>
 8003a5c:	4b59      	ldr	r3, [pc, #356]	; (8003bc4 <HAL_ADC_Start_DMA+0x18c>)
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff fbb0 	bl	80031c4 <LL_ADC_GetMultimode>
 8003a64:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff fc7c 	bl	8003368 <LL_ADC_REG_IsConversionOngoing>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f040 809b 	bne.w	8003bae <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d101      	bne.n	8003a86 <HAL_ADC_Start_DMA+0x4e>
 8003a82:	2302      	movs	r3, #2
 8003a84:	e096      	b.n	8003bb4 <HAL_ADC_Start_DMA+0x17c>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a4d      	ldr	r2, [pc, #308]	; (8003bc8 <HAL_ADC_Start_DMA+0x190>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d008      	beq.n	8003aaa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d005      	beq.n	8003aaa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	2b05      	cmp	r3, #5
 8003aa2:	d002      	beq.n	8003aaa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	2b09      	cmp	r3, #9
 8003aa8:	d17a      	bne.n	8003ba0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 fe00 	bl	80046b0 <ADC_Enable>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003ab4:	7dfb      	ldrb	r3, [r7, #23]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d16d      	bne.n	8003b96 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ac2:	f023 0301 	bic.w	r3, r3, #1
 8003ac6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a3a      	ldr	r2, [pc, #232]	; (8003bbc <HAL_ADC_Start_DMA+0x184>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d009      	beq.n	8003aec <HAL_ADC_Start_DMA+0xb4>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a3b      	ldr	r2, [pc, #236]	; (8003bcc <HAL_ADC_Start_DMA+0x194>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d002      	beq.n	8003ae8 <HAL_ADC_Start_DMA+0xb0>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	e003      	b.n	8003af0 <HAL_ADC_Start_DMA+0xb8>
 8003ae8:	4b39      	ldr	r3, [pc, #228]	; (8003bd0 <HAL_ADC_Start_DMA+0x198>)
 8003aea:	e001      	b.n	8003af0 <HAL_ADC_Start_DMA+0xb8>
 8003aec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d002      	beq.n	8003afe <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d105      	bne.n	8003b0a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d006      	beq.n	8003b24 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b1a:	f023 0206 	bic.w	r2, r3, #6
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	661a      	str	r2, [r3, #96]	; 0x60
 8003b22:	e002      	b.n	8003b2a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2e:	4a29      	ldr	r2, [pc, #164]	; (8003bd4 <HAL_ADC_Start_DMA+0x19c>)
 8003b30:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b36:	4a28      	ldr	r2, [pc, #160]	; (8003bd8 <HAL_ADC_Start_DMA+0x1a0>)
 8003b38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3e:	4a27      	ldr	r2, [pc, #156]	; (8003bdc <HAL_ADC_Start_DMA+0x1a4>)
 8003b40:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	221c      	movs	r2, #28
 8003b48:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 0210 	orr.w	r2, r2, #16
 8003b60:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0201 	orr.w	r2, r2, #1
 8003b70:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3340      	adds	r3, #64	; 0x40
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f001 fec9 	bl	8005918 <HAL_DMA_Start_IT>
 8003b86:	4603      	mov	r3, r0
 8003b88:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff fbc2 	bl	8003318 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003b94:	e00d      	b.n	8003bb2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003b9e:	e008      	b.n	8003bb2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003bac:	e001      	b.n	8003bb2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003bae:	2302      	movs	r3, #2
 8003bb0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	50000100 	.word	0x50000100
 8003bc0:	50000300 	.word	0x50000300
 8003bc4:	50000700 	.word	0x50000700
 8003bc8:	50000600 	.word	0x50000600
 8003bcc:	50000500 	.word	0x50000500
 8003bd0:	50000400 	.word	0x50000400
 8003bd4:	0800489b 	.word	0x0800489b
 8003bd8:	08004973 	.word	0x08004973
 8003bdc:	0800498f 	.word	0x0800498f

08003be0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_ADC_Stop_DMA+0x16>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e051      	b.n	8003c9a <HAL_ADC_Stop_DMA+0xba>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003bfe:	2103      	movs	r1, #3
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 fc99 	bl	8004538 <ADC_ConversionStop>
 8003c06:	4603      	mov	r3, r0
 8003c08:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d13f      	bne.n	8003c90 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0201 	bic.w	r2, r2, #1
 8003c1e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d10f      	bne.n	8003c4e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c32:	4618      	mov	r0, r3
 8003c34:	f001 feeb 	bl	8005a0e <HAL_DMA_Abort>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d005      	beq.n	8003c4e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0210 	bic.w	r2, r2, #16
 8003c5c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d105      	bne.n	8003c70 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 fdb9 	bl	80047dc <ADC_Disable>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	73fb      	strb	r3, [r7, #15]
 8003c6e:	e002      	b.n	8003c76 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 fdb3 	bl	80047dc <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003c76:	7bfb      	ldrb	r3, [r7, #15]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d109      	bne.n	8003c90 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c80:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	f043 0201 	orr.w	r2, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
	...

08003cb8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b0b6      	sub	sp, #216	; 0xd8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d102      	bne.n	8003cdc <HAL_ADC_ConfigChannel+0x24>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	f000 bc13 	b.w	8004502 <HAL_ADC_ConfigChannel+0x84a>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fb3d 	bl	8003368 <LL_ADC_REG_IsConversionOngoing>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f040 83f3 	bne.w	80044dc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6859      	ldr	r1, [r3, #4]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	f7ff f9e3 	bl	80030ce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff fb2b 	bl	8003368 <LL_ADC_REG_IsConversionOngoing>
 8003d12:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff fb4b 	bl	80033b6 <LL_ADC_INJ_IsConversionOngoing>
 8003d20:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f040 81d9 	bne.w	80040e0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f040 81d4 	bne.w	80040e0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d40:	d10f      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f7ff f9ea 	bl	8003126 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff f991 	bl	8003082 <LL_ADC_SetSamplingTimeCommonConfig>
 8003d60:	e00e      	b.n	8003d80 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6818      	ldr	r0, [r3, #0]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	6819      	ldr	r1, [r3, #0]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f7ff f9d9 	bl	8003126 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff f981 	bl	8003082 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	695a      	ldr	r2, [r3, #20]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	08db      	lsrs	r3, r3, #3
 8003d8c:	f003 0303 	and.w	r3, r3, #3
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d022      	beq.n	8003de8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6919      	ldr	r1, [r3, #16]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003db2:	f7ff f8db 	bl	8002f6c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	6919      	ldr	r1, [r3, #16]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	f7ff f927 	bl	8003016 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d102      	bne.n	8003dde <HAL_ADC_ConfigChannel+0x126>
 8003dd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ddc:	e000      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x128>
 8003dde:	2300      	movs	r3, #0
 8003de0:	461a      	mov	r2, r3
 8003de2:	f7ff f933 	bl	800304c <LL_ADC_SetOffsetSaturation>
 8003de6:	e17b      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2100      	movs	r1, #0
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff f8e0 	bl	8002fb4 <LL_ADC_GetOffsetChannel>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10a      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x15c>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2100      	movs	r1, #0
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff f8d5 	bl	8002fb4 <LL_ADC_GetOffsetChannel>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	0e9b      	lsrs	r3, r3, #26
 8003e0e:	f003 021f 	and.w	r2, r3, #31
 8003e12:	e01e      	b.n	8003e52 <HAL_ADC_ConfigChannel+0x19a>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2100      	movs	r1, #0
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff f8ca 	bl	8002fb4 <LL_ADC_GetOffsetChannel>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e2a:	fa93 f3a3 	rbit	r3, r3
 8003e2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003e42:	2320      	movs	r3, #32
 8003e44:	e004      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003e46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e4a:	fab3 f383 	clz	r3, r3
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d105      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x1b2>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	0e9b      	lsrs	r3, r3, #26
 8003e64:	f003 031f 	and.w	r3, r3, #31
 8003e68:	e018      	b.n	8003e9c <HAL_ADC_ConfigChannel+0x1e4>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e76:	fa93 f3a3 	rbit	r3, r3
 8003e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003e7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003e86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003e8e:	2320      	movs	r3, #32
 8003e90:	e004      	b.n	8003e9c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003e92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e96:	fab3 f383 	clz	r3, r3
 8003e9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d106      	bne.n	8003eae <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff f899 	bl	8002fe0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff f87d 	bl	8002fb4 <LL_ADC_GetOffsetChannel>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10a      	bne.n	8003eda <HAL_ADC_ConfigChannel+0x222>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2101      	movs	r1, #1
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff f872 	bl	8002fb4 <LL_ADC_GetOffsetChannel>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	0e9b      	lsrs	r3, r3, #26
 8003ed4:	f003 021f 	and.w	r2, r3, #31
 8003ed8:	e01e      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x260>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2101      	movs	r1, #1
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff f867 	bl	8002fb4 <LL_ADC_GetOffsetChannel>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ef0:	fa93 f3a3 	rbit	r3, r3
 8003ef4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003ef8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003efc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003f00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003f08:	2320      	movs	r3, #32
 8003f0a:	e004      	b.n	8003f16 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003f0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f10:	fab3 f383 	clz	r3, r3
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d105      	bne.n	8003f30 <HAL_ADC_ConfigChannel+0x278>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	0e9b      	lsrs	r3, r3, #26
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	e018      	b.n	8003f62 <HAL_ADC_ConfigChannel+0x2aa>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f3c:	fa93 f3a3 	rbit	r3, r3
 8003f40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003f44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003f4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003f54:	2320      	movs	r3, #32
 8003f56:	e004      	b.n	8003f62 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003f58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f5c:	fab3 f383 	clz	r3, r3
 8003f60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d106      	bne.n	8003f74 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff f836 	bl	8002fe0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2102      	movs	r1, #2
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff f81a 	bl	8002fb4 <LL_ADC_GetOffsetChannel>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x2e8>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2102      	movs	r1, #2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff f80f 	bl	8002fb4 <LL_ADC_GetOffsetChannel>
 8003f96:	4603      	mov	r3, r0
 8003f98:	0e9b      	lsrs	r3, r3, #26
 8003f9a:	f003 021f 	and.w	r2, r3, #31
 8003f9e:	e01e      	b.n	8003fde <HAL_ADC_ConfigChannel+0x326>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2102      	movs	r1, #2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff f804 	bl	8002fb4 <LL_ADC_GetOffsetChannel>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fb6:	fa93 f3a3 	rbit	r3, r3
 8003fba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003fbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003fc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003fce:	2320      	movs	r3, #32
 8003fd0:	e004      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003fd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fd6:	fab3 f383 	clz	r3, r3
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d105      	bne.n	8003ff6 <HAL_ADC_ConfigChannel+0x33e>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	0e9b      	lsrs	r3, r3, #26
 8003ff0:	f003 031f 	and.w	r3, r3, #31
 8003ff4:	e016      	b.n	8004024 <HAL_ADC_ConfigChannel+0x36c>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004002:	fa93 f3a3 	rbit	r3, r3
 8004006:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004008:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800400a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800400e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004016:	2320      	movs	r3, #32
 8004018:	e004      	b.n	8004024 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800401a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800401e:	fab3 f383 	clz	r3, r3
 8004022:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004024:	429a      	cmp	r2, r3
 8004026:	d106      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2200      	movs	r2, #0
 800402e:	2102      	movs	r1, #2
 8004030:	4618      	mov	r0, r3
 8004032:	f7fe ffd5 	bl	8002fe0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2103      	movs	r1, #3
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe ffb9 	bl	8002fb4 <LL_ADC_GetOffsetChannel>
 8004042:	4603      	mov	r3, r0
 8004044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x3aa>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2103      	movs	r1, #3
 8004052:	4618      	mov	r0, r3
 8004054:	f7fe ffae 	bl	8002fb4 <LL_ADC_GetOffsetChannel>
 8004058:	4603      	mov	r3, r0
 800405a:	0e9b      	lsrs	r3, r3, #26
 800405c:	f003 021f 	and.w	r2, r3, #31
 8004060:	e017      	b.n	8004092 <HAL_ADC_ConfigChannel+0x3da>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2103      	movs	r1, #3
 8004068:	4618      	mov	r0, r3
 800406a:	f7fe ffa3 	bl	8002fb4 <LL_ADC_GetOffsetChannel>
 800406e:	4603      	mov	r3, r0
 8004070:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004074:	fa93 f3a3 	rbit	r3, r3
 8004078:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800407a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800407c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800407e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004084:	2320      	movs	r3, #32
 8004086:	e003      	b.n	8004090 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800408a:	fab3 f383 	clz	r3, r3
 800408e:	b2db      	uxtb	r3, r3
 8004090:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800409a:	2b00      	cmp	r3, #0
 800409c:	d105      	bne.n	80040aa <HAL_ADC_ConfigChannel+0x3f2>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	0e9b      	lsrs	r3, r3, #26
 80040a4:	f003 031f 	and.w	r3, r3, #31
 80040a8:	e011      	b.n	80040ce <HAL_ADC_ConfigChannel+0x416>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040b2:	fa93 f3a3 	rbit	r3, r3
 80040b6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80040b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80040bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80040c2:	2320      	movs	r3, #32
 80040c4:	e003      	b.n	80040ce <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80040c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c8:	fab3 f383 	clz	r3, r3
 80040cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d106      	bne.n	80040e0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2200      	movs	r2, #0
 80040d8:	2103      	movs	r1, #3
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fe ff80 	bl	8002fe0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff f8f1 	bl	80032cc <LL_ADC_IsEnabled>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f040 813d 	bne.w	800436c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6818      	ldr	r0, [r3, #0]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	6819      	ldr	r1, [r3, #0]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	461a      	mov	r2, r3
 8004100:	f7ff f83c 	bl	800317c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	4aa2      	ldr	r2, [pc, #648]	; (8004394 <HAL_ADC_ConfigChannel+0x6dc>)
 800410a:	4293      	cmp	r3, r2
 800410c:	f040 812e 	bne.w	800436c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10b      	bne.n	8004138 <HAL_ADC_ConfigChannel+0x480>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	0e9b      	lsrs	r3, r3, #26
 8004126:	3301      	adds	r3, #1
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	2b09      	cmp	r3, #9
 800412e:	bf94      	ite	ls
 8004130:	2301      	movls	r3, #1
 8004132:	2300      	movhi	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	e019      	b.n	800416c <HAL_ADC_ConfigChannel+0x4b4>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004140:	fa93 f3a3 	rbit	r3, r3
 8004144:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004146:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004148:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800414a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004150:	2320      	movs	r3, #32
 8004152:	e003      	b.n	800415c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004154:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004156:	fab3 f383 	clz	r3, r3
 800415a:	b2db      	uxtb	r3, r3
 800415c:	3301      	adds	r3, #1
 800415e:	f003 031f 	and.w	r3, r3, #31
 8004162:	2b09      	cmp	r3, #9
 8004164:	bf94      	ite	ls
 8004166:	2301      	movls	r3, #1
 8004168:	2300      	movhi	r3, #0
 800416a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800416c:	2b00      	cmp	r3, #0
 800416e:	d079      	beq.n	8004264 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004178:	2b00      	cmp	r3, #0
 800417a:	d107      	bne.n	800418c <HAL_ADC_ConfigChannel+0x4d4>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	0e9b      	lsrs	r3, r3, #26
 8004182:	3301      	adds	r3, #1
 8004184:	069b      	lsls	r3, r3, #26
 8004186:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800418a:	e015      	b.n	80041b8 <HAL_ADC_ConfigChannel+0x500>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004194:	fa93 f3a3 	rbit	r3, r3
 8004198:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800419a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800419c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800419e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80041a4:	2320      	movs	r3, #32
 80041a6:	e003      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80041a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041aa:	fab3 f383 	clz	r3, r3
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	3301      	adds	r3, #1
 80041b2:	069b      	lsls	r3, r3, #26
 80041b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d109      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x520>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	0e9b      	lsrs	r3, r3, #26
 80041ca:	3301      	adds	r3, #1
 80041cc:	f003 031f 	and.w	r3, r3, #31
 80041d0:	2101      	movs	r1, #1
 80041d2:	fa01 f303 	lsl.w	r3, r1, r3
 80041d6:	e017      	b.n	8004208 <HAL_ADC_ConfigChannel+0x550>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041e0:	fa93 f3a3 	rbit	r3, r3
 80041e4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80041e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80041ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80041f0:	2320      	movs	r3, #32
 80041f2:	e003      	b.n	80041fc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80041f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f6:	fab3 f383 	clz	r3, r3
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	3301      	adds	r3, #1
 80041fe:	f003 031f 	and.w	r3, r3, #31
 8004202:	2101      	movs	r1, #1
 8004204:	fa01 f303 	lsl.w	r3, r1, r3
 8004208:	ea42 0103 	orr.w	r1, r2, r3
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10a      	bne.n	800422e <HAL_ADC_ConfigChannel+0x576>
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	0e9b      	lsrs	r3, r3, #26
 800421e:	3301      	adds	r3, #1
 8004220:	f003 021f 	and.w	r2, r3, #31
 8004224:	4613      	mov	r3, r2
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	4413      	add	r3, r2
 800422a:	051b      	lsls	r3, r3, #20
 800422c:	e018      	b.n	8004260 <HAL_ADC_ConfigChannel+0x5a8>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004236:	fa93 f3a3 	rbit	r3, r3
 800423a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800423c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800423e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004246:	2320      	movs	r3, #32
 8004248:	e003      	b.n	8004252 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800424a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800424c:	fab3 f383 	clz	r3, r3
 8004250:	b2db      	uxtb	r3, r3
 8004252:	3301      	adds	r3, #1
 8004254:	f003 021f 	and.w	r2, r3, #31
 8004258:	4613      	mov	r3, r2
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	4413      	add	r3, r2
 800425e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004260:	430b      	orrs	r3, r1
 8004262:	e07e      	b.n	8004362 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800426c:	2b00      	cmp	r3, #0
 800426e:	d107      	bne.n	8004280 <HAL_ADC_ConfigChannel+0x5c8>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	0e9b      	lsrs	r3, r3, #26
 8004276:	3301      	adds	r3, #1
 8004278:	069b      	lsls	r3, r3, #26
 800427a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800427e:	e015      	b.n	80042ac <HAL_ADC_ConfigChannel+0x5f4>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004288:	fa93 f3a3 	rbit	r3, r3
 800428c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800428e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004290:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004298:	2320      	movs	r3, #32
 800429a:	e003      	b.n	80042a4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429e:	fab3 f383 	clz	r3, r3
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	3301      	adds	r3, #1
 80042a6:	069b      	lsls	r3, r3, #26
 80042a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d109      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x614>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	0e9b      	lsrs	r3, r3, #26
 80042be:	3301      	adds	r3, #1
 80042c0:	f003 031f 	and.w	r3, r3, #31
 80042c4:	2101      	movs	r1, #1
 80042c6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ca:	e017      	b.n	80042fc <HAL_ADC_ConfigChannel+0x644>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	fa93 f3a3 	rbit	r3, r3
 80042d8:	61fb      	str	r3, [r7, #28]
  return result;
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80042e4:	2320      	movs	r3, #32
 80042e6:	e003      	b.n	80042f0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	fab3 f383 	clz	r3, r3
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	3301      	adds	r3, #1
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	2101      	movs	r1, #1
 80042f8:	fa01 f303 	lsl.w	r3, r1, r3
 80042fc:	ea42 0103 	orr.w	r1, r2, r3
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10d      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x670>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	0e9b      	lsrs	r3, r3, #26
 8004312:	3301      	adds	r3, #1
 8004314:	f003 021f 	and.w	r2, r3, #31
 8004318:	4613      	mov	r3, r2
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	4413      	add	r3, r2
 800431e:	3b1e      	subs	r3, #30
 8004320:	051b      	lsls	r3, r3, #20
 8004322:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004326:	e01b      	b.n	8004360 <HAL_ADC_ConfigChannel+0x6a8>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	fa93 f3a3 	rbit	r3, r3
 8004334:	613b      	str	r3, [r7, #16]
  return result;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004340:	2320      	movs	r3, #32
 8004342:	e003      	b.n	800434c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	fab3 f383 	clz	r3, r3
 800434a:	b2db      	uxtb	r3, r3
 800434c:	3301      	adds	r3, #1
 800434e:	f003 021f 	and.w	r2, r3, #31
 8004352:	4613      	mov	r3, r2
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	4413      	add	r3, r2
 8004358:	3b1e      	subs	r3, #30
 800435a:	051b      	lsls	r3, r3, #20
 800435c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004360:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004366:	4619      	mov	r1, r3
 8004368:	f7fe fedd 	bl	8003126 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	4b09      	ldr	r3, [pc, #36]	; (8004398 <HAL_ADC_ConfigChannel+0x6e0>)
 8004372:	4013      	ands	r3, r2
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80be 	beq.w	80044f6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004382:	d004      	beq.n	800438e <HAL_ADC_ConfigChannel+0x6d6>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a04      	ldr	r2, [pc, #16]	; (800439c <HAL_ADC_ConfigChannel+0x6e4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d10a      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0x6ec>
 800438e:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <HAL_ADC_ConfigChannel+0x6e8>)
 8004390:	e009      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x6ee>
 8004392:	bf00      	nop
 8004394:	407f0000 	.word	0x407f0000
 8004398:	80080000 	.word	0x80080000
 800439c:	50000100 	.word	0x50000100
 80043a0:	50000300 	.word	0x50000300
 80043a4:	4b59      	ldr	r3, [pc, #356]	; (800450c <HAL_ADC_ConfigChannel+0x854>)
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fe fdd2 	bl	8002f50 <LL_ADC_GetCommonPathInternalCh>
 80043ac:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a56      	ldr	r2, [pc, #344]	; (8004510 <HAL_ADC_ConfigChannel+0x858>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d004      	beq.n	80043c4 <HAL_ADC_ConfigChannel+0x70c>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a55      	ldr	r2, [pc, #340]	; (8004514 <HAL_ADC_ConfigChannel+0x85c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d13a      	bne.n	800443a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d134      	bne.n	800443a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043d8:	d005      	beq.n	80043e6 <HAL_ADC_ConfigChannel+0x72e>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a4e      	ldr	r2, [pc, #312]	; (8004518 <HAL_ADC_ConfigChannel+0x860>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	f040 8085 	bne.w	80044f0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043ee:	d004      	beq.n	80043fa <HAL_ADC_ConfigChannel+0x742>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a49      	ldr	r2, [pc, #292]	; (800451c <HAL_ADC_ConfigChannel+0x864>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d101      	bne.n	80043fe <HAL_ADC_ConfigChannel+0x746>
 80043fa:	4a49      	ldr	r2, [pc, #292]	; (8004520 <HAL_ADC_ConfigChannel+0x868>)
 80043fc:	e000      	b.n	8004400 <HAL_ADC_ConfigChannel+0x748>
 80043fe:	4a43      	ldr	r2, [pc, #268]	; (800450c <HAL_ADC_ConfigChannel+0x854>)
 8004400:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004404:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004408:	4619      	mov	r1, r3
 800440a:	4610      	mov	r0, r2
 800440c:	f7fe fd8d 	bl	8002f2a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004410:	4b44      	ldr	r3, [pc, #272]	; (8004524 <HAL_ADC_ConfigChannel+0x86c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	099b      	lsrs	r3, r3, #6
 8004416:	4a44      	ldr	r2, [pc, #272]	; (8004528 <HAL_ADC_ConfigChannel+0x870>)
 8004418:	fba2 2303 	umull	r2, r3, r2, r3
 800441c:	099b      	lsrs	r3, r3, #6
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	4613      	mov	r3, r2
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800442a:	e002      	b.n	8004432 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	3b01      	subs	r3, #1
 8004430:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1f9      	bne.n	800442c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004438:	e05a      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a3b      	ldr	r2, [pc, #236]	; (800452c <HAL_ADC_ConfigChannel+0x874>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d125      	bne.n	8004490 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004444:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d11f      	bne.n	8004490 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a31      	ldr	r2, [pc, #196]	; (800451c <HAL_ADC_ConfigChannel+0x864>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d104      	bne.n	8004464 <HAL_ADC_ConfigChannel+0x7ac>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a34      	ldr	r2, [pc, #208]	; (8004530 <HAL_ADC_ConfigChannel+0x878>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d047      	beq.n	80044f4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800446c:	d004      	beq.n	8004478 <HAL_ADC_ConfigChannel+0x7c0>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a2a      	ldr	r2, [pc, #168]	; (800451c <HAL_ADC_ConfigChannel+0x864>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d101      	bne.n	800447c <HAL_ADC_ConfigChannel+0x7c4>
 8004478:	4a29      	ldr	r2, [pc, #164]	; (8004520 <HAL_ADC_ConfigChannel+0x868>)
 800447a:	e000      	b.n	800447e <HAL_ADC_ConfigChannel+0x7c6>
 800447c:	4a23      	ldr	r2, [pc, #140]	; (800450c <HAL_ADC_ConfigChannel+0x854>)
 800447e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004486:	4619      	mov	r1, r3
 8004488:	4610      	mov	r0, r2
 800448a:	f7fe fd4e 	bl	8002f2a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800448e:	e031      	b.n	80044f4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a27      	ldr	r2, [pc, #156]	; (8004534 <HAL_ADC_ConfigChannel+0x87c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d12d      	bne.n	80044f6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800449a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800449e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d127      	bne.n	80044f6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1c      	ldr	r2, [pc, #112]	; (800451c <HAL_ADC_ConfigChannel+0x864>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d022      	beq.n	80044f6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044b8:	d004      	beq.n	80044c4 <HAL_ADC_ConfigChannel+0x80c>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a17      	ldr	r2, [pc, #92]	; (800451c <HAL_ADC_ConfigChannel+0x864>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d101      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x810>
 80044c4:	4a16      	ldr	r2, [pc, #88]	; (8004520 <HAL_ADC_ConfigChannel+0x868>)
 80044c6:	e000      	b.n	80044ca <HAL_ADC_ConfigChannel+0x812>
 80044c8:	4a10      	ldr	r2, [pc, #64]	; (800450c <HAL_ADC_ConfigChannel+0x854>)
 80044ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044d2:	4619      	mov	r1, r3
 80044d4:	4610      	mov	r0, r2
 80044d6:	f7fe fd28 	bl	8002f2a <LL_ADC_SetCommonPathInternalCh>
 80044da:	e00c      	b.n	80044f6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e0:	f043 0220 	orr.w	r2, r3, #32
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80044ee:	e002      	b.n	80044f6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044f0:	bf00      	nop
 80044f2:	e000      	b.n	80044f6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80044fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004502:	4618      	mov	r0, r3
 8004504:	37d8      	adds	r7, #216	; 0xd8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	50000700 	.word	0x50000700
 8004510:	c3210000 	.word	0xc3210000
 8004514:	90c00010 	.word	0x90c00010
 8004518:	50000600 	.word	0x50000600
 800451c:	50000100 	.word	0x50000100
 8004520:	50000300 	.word	0x50000300
 8004524:	2000000c 	.word	0x2000000c
 8004528:	053e2d63 	.word	0x053e2d63
 800452c:	c7520000 	.word	0xc7520000
 8004530:	50000500 	.word	0x50000500
 8004534:	cb840000 	.word	0xcb840000

08004538 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004542:	2300      	movs	r3, #0
 8004544:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f7fe ff0a 	bl	8003368 <LL_ADC_REG_IsConversionOngoing>
 8004554:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f7fe ff2b 	bl	80033b6 <LL_ADC_INJ_IsConversionOngoing>
 8004560:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d103      	bne.n	8004570 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 8098 	beq.w	80046a0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d02a      	beq.n	80045d4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	7f5b      	ldrb	r3, [r3, #29]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d126      	bne.n	80045d4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	7f1b      	ldrb	r3, [r3, #28]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d122      	bne.n	80045d4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800458e:	2301      	movs	r3, #1
 8004590:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004592:	e014      	b.n	80045be <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	4a45      	ldr	r2, [pc, #276]	; (80046ac <ADC_ConversionStop+0x174>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d90d      	bls.n	80045b8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a0:	f043 0210 	orr.w	r2, r3, #16
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ac:	f043 0201 	orr.w	r2, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e074      	b.n	80046a2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	3301      	adds	r3, #1
 80045bc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d1e3      	bne.n	8004594 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2240      	movs	r2, #64	; 0x40
 80045d2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d014      	beq.n	8004604 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fe fec2 	bl	8003368 <LL_ADC_REG_IsConversionOngoing>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00c      	beq.n	8004604 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fe fe7f 	bl	80032f2 <LL_ADC_IsDisableOngoing>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d104      	bne.n	8004604 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe fe9e 	bl	8003340 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d014      	beq.n	8004634 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f7fe fed1 	bl	80033b6 <LL_ADC_INJ_IsConversionOngoing>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00c      	beq.n	8004634 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f7fe fe67 	bl	80032f2 <LL_ADC_IsDisableOngoing>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d104      	bne.n	8004634 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4618      	mov	r0, r3
 8004630:	f7fe fead 	bl	800338e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d005      	beq.n	8004646 <ADC_ConversionStop+0x10e>
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	2b03      	cmp	r3, #3
 800463e:	d105      	bne.n	800464c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004640:	230c      	movs	r3, #12
 8004642:	617b      	str	r3, [r7, #20]
        break;
 8004644:	e005      	b.n	8004652 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004646:	2308      	movs	r3, #8
 8004648:	617b      	str	r3, [r7, #20]
        break;
 800464a:	e002      	b.n	8004652 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800464c:	2304      	movs	r3, #4
 800464e:	617b      	str	r3, [r7, #20]
        break;
 8004650:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004652:	f7fe fbdd 	bl	8002e10 <HAL_GetTick>
 8004656:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004658:	e01b      	b.n	8004692 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800465a:	f7fe fbd9 	bl	8002e10 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b05      	cmp	r3, #5
 8004666:	d914      	bls.n	8004692 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	4013      	ands	r3, r2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00d      	beq.n	8004692 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467a:	f043 0210 	orr.w	r2, r3, #16
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004686:	f043 0201 	orr.w	r2, r3, #1
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e007      	b.n	80046a2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	4013      	ands	r3, r2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1dc      	bne.n	800465a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3720      	adds	r7, #32
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	a33fffff 	.word	0xa33fffff

080046b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fe fe03 	bl	80032cc <LL_ADC_IsEnabled>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d176      	bne.n	80047ba <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	4b3c      	ldr	r3, [pc, #240]	; (80047c4 <ADC_Enable+0x114>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00d      	beq.n	80046f6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046de:	f043 0210 	orr.w	r2, r3, #16
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ea:	f043 0201 	orr.w	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e062      	b.n	80047bc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fe fdbe 	bl	800327c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004708:	d004      	beq.n	8004714 <ADC_Enable+0x64>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a2e      	ldr	r2, [pc, #184]	; (80047c8 <ADC_Enable+0x118>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d101      	bne.n	8004718 <ADC_Enable+0x68>
 8004714:	4b2d      	ldr	r3, [pc, #180]	; (80047cc <ADC_Enable+0x11c>)
 8004716:	e000      	b.n	800471a <ADC_Enable+0x6a>
 8004718:	4b2d      	ldr	r3, [pc, #180]	; (80047d0 <ADC_Enable+0x120>)
 800471a:	4618      	mov	r0, r3
 800471c:	f7fe fc18 	bl	8002f50 <LL_ADC_GetCommonPathInternalCh>
 8004720:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004722:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004726:	2b00      	cmp	r3, #0
 8004728:	d013      	beq.n	8004752 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800472a:	4b2a      	ldr	r3, [pc, #168]	; (80047d4 <ADC_Enable+0x124>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	099b      	lsrs	r3, r3, #6
 8004730:	4a29      	ldr	r2, [pc, #164]	; (80047d8 <ADC_Enable+0x128>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	099b      	lsrs	r3, r3, #6
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	4613      	mov	r3, r2
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004744:	e002      	b.n	800474c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	3b01      	subs	r3, #1
 800474a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f9      	bne.n	8004746 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004752:	f7fe fb5d 	bl	8002e10 <HAL_GetTick>
 8004756:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004758:	e028      	b.n	80047ac <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f7fe fdb4 	bl	80032cc <LL_ADC_IsEnabled>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d104      	bne.n	8004774 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f7fe fd84 	bl	800327c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004774:	f7fe fb4c 	bl	8002e10 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d914      	bls.n	80047ac <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b01      	cmp	r3, #1
 800478e:	d00d      	beq.n	80047ac <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004794:	f043 0210 	orr.w	r2, r3, #16
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a0:	f043 0201 	orr.w	r2, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e007      	b.n	80047bc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d1cf      	bne.n	800475a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	8000003f 	.word	0x8000003f
 80047c8:	50000100 	.word	0x50000100
 80047cc:	50000300 	.word	0x50000300
 80047d0:	50000700 	.word	0x50000700
 80047d4:	2000000c 	.word	0x2000000c
 80047d8:	053e2d63 	.word	0x053e2d63

080047dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fe fd82 	bl	80032f2 <LL_ADC_IsDisableOngoing>
 80047ee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7fe fd69 	bl	80032cc <LL_ADC_IsEnabled>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d047      	beq.n	8004890 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d144      	bne.n	8004890 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 030d 	and.w	r3, r3, #13
 8004810:	2b01      	cmp	r3, #1
 8004812:	d10c      	bne.n	800482e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f7fe fd43 	bl	80032a4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2203      	movs	r2, #3
 8004824:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004826:	f7fe faf3 	bl	8002e10 <HAL_GetTick>
 800482a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800482c:	e029      	b.n	8004882 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004832:	f043 0210 	orr.w	r2, r3, #16
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800483e:	f043 0201 	orr.w	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e023      	b.n	8004892 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800484a:	f7fe fae1 	bl	8002e10 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d914      	bls.n	8004882 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00d      	beq.n	8004882 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486a:	f043 0210 	orr.w	r2, r3, #16
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004876:	f043 0201 	orr.w	r2, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e007      	b.n	8004892 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1dc      	bne.n	800484a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b084      	sub	sp, #16
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d14b      	bne.n	800494c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d021      	beq.n	8004912 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fe fbe8 	bl	80030a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d032      	beq.n	8004944 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d12b      	bne.n	8004944 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d11f      	bne.n	8004944 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004908:	f043 0201 	orr.w	r2, r3, #1
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004910:	e018      	b.n	8004944 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d111      	bne.n	8004944 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004924:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d105      	bne.n	8004944 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493c:	f043 0201 	orr.w	r2, r3, #1
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f7fd fba5 	bl	8002094 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800494a:	e00e      	b.n	800496a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f7ff f9a2 	bl	8003ca2 <HAL_ADC_ErrorCallback>
}
 800495e:	e004      	b.n	800496a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	4798      	blx	r3
}
 800496a:	bf00      	nop
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b084      	sub	sp, #16
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f7fd fb45 	bl	8002010 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004986:	bf00      	nop
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b084      	sub	sp, #16
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ac:	f043 0204 	orr.w	r2, r3, #4
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f7ff f974 	bl	8003ca2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049ba:	bf00      	nop
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <LL_ADC_IsEnabled>:
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <LL_ADC_IsEnabled+0x18>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <LL_ADC_IsEnabled+0x1a>
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <LL_ADC_StartCalibration>:
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80049fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	609a      	str	r2, [r3, #8]
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <LL_ADC_IsCalibrationOnGoing>:
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a2e:	d101      	bne.n	8004a34 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <LL_ADC_REG_IsConversionOngoing>:
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d101      	bne.n	8004a5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004a72:	2300      	movs	r3, #0
 8004a74:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <HAL_ADCEx_Calibration_Start+0x1c>
 8004a80:	2302      	movs	r3, #2
 8004a82:	e04d      	b.n	8004b20 <HAL_ADCEx_Calibration_Start+0xb8>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7ff fea5 	bl	80047dc <ADC_Disable>
 8004a92:	4603      	mov	r3, r0
 8004a94:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d136      	bne.n	8004b0a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004aa4:	f023 0302 	bic.w	r3, r3, #2
 8004aa8:	f043 0202 	orr.w	r2, r3, #2
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6839      	ldr	r1, [r7, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff ff96 	bl	80049e8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004abc:	e014      	b.n	8004ae8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4a18      	ldr	r2, [pc, #96]	; (8004b28 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d90d      	bls.n	8004ae8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad0:	f023 0312 	bic.w	r3, r3, #18
 8004ad4:	f043 0210 	orr.w	r2, r3, #16
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e01b      	b.n	8004b20 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff ff94 	bl	8004a1a <LL_ADC_IsCalibrationOnGoing>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e2      	bne.n	8004abe <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afc:	f023 0303 	bic.w	r3, r3, #3
 8004b00:	f043 0201 	orr.w	r2, r3, #1
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b08:	e005      	b.n	8004b16 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0e:	f043 0210 	orr.w	r2, r3, #16
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	0004de01 	.word	0x0004de01

08004b2c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004b2c:	b590      	push	{r4, r7, lr}
 8004b2e:	b0a1      	sub	sp, #132	; 0x84
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e0e7      	b.n	8004d1a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004b52:	2300      	movs	r3, #0
 8004b54:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004b56:	2300      	movs	r3, #0
 8004b58:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b62:	d102      	bne.n	8004b6a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004b64:	4b6f      	ldr	r3, [pc, #444]	; (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b66:	60bb      	str	r3, [r7, #8]
 8004b68:	e009      	b.n	8004b7e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a6e      	ldr	r2, [pc, #440]	; (8004d28 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d102      	bne.n	8004b7a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004b74:	4b6d      	ldr	r3, [pc, #436]	; (8004d2c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004b76:	60bb      	str	r3, [r7, #8]
 8004b78:	e001      	b.n	8004b7e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10b      	bne.n	8004b9c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b88:	f043 0220 	orr.w	r2, r3, #32
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e0be      	b.n	8004d1a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff ff4f 	bl	8004a42 <LL_ADC_REG_IsConversionOngoing>
 8004ba4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff ff49 	bl	8004a42 <LL_ADC_REG_IsConversionOngoing>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f040 80a0 	bne.w	8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f040 809c 	bne.w	8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bc8:	d004      	beq.n	8004bd4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a55      	ldr	r2, [pc, #340]	; (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d101      	bne.n	8004bd8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004bd4:	4b56      	ldr	r3, [pc, #344]	; (8004d30 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004bd6:	e000      	b.n	8004bda <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004bd8:	4b56      	ldr	r3, [pc, #344]	; (8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004bda:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d04b      	beq.n	8004c7c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	6859      	ldr	r1, [r3, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bf6:	035b      	lsls	r3, r3, #13
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bfe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c08:	d004      	beq.n	8004c14 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a45      	ldr	r2, [pc, #276]	; (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d10f      	bne.n	8004c34 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004c14:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004c18:	f7ff fed3 	bl	80049c2 <LL_ADC_IsEnabled>
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	4841      	ldr	r0, [pc, #260]	; (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c20:	f7ff fecf 	bl	80049c2 <LL_ADC_IsEnabled>
 8004c24:	4603      	mov	r3, r0
 8004c26:	4323      	orrs	r3, r4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	e012      	b.n	8004c5a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004c34:	483c      	ldr	r0, [pc, #240]	; (8004d28 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004c36:	f7ff fec4 	bl	80049c2 <LL_ADC_IsEnabled>
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	483b      	ldr	r0, [pc, #236]	; (8004d2c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004c3e:	f7ff fec0 	bl	80049c2 <LL_ADC_IsEnabled>
 8004c42:	4603      	mov	r3, r0
 8004c44:	431c      	orrs	r4, r3
 8004c46:	483c      	ldr	r0, [pc, #240]	; (8004d38 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004c48:	f7ff febb 	bl	80049c2 <LL_ADC_IsEnabled>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	4323      	orrs	r3, r4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	bf0c      	ite	eq
 8004c54:	2301      	moveq	r3, #1
 8004c56:	2300      	movne	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d056      	beq.n	8004d0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004c66:	f023 030f 	bic.w	r3, r3, #15
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	6811      	ldr	r1, [r2, #0]
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	6892      	ldr	r2, [r2, #8]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	431a      	orrs	r2, r3
 8004c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c78:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c7a:	e047      	b.n	8004d0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c86:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c90:	d004      	beq.n	8004c9c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a23      	ldr	r2, [pc, #140]	; (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d10f      	bne.n	8004cbc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004c9c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004ca0:	f7ff fe8f 	bl	80049c2 <LL_ADC_IsEnabled>
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	481f      	ldr	r0, [pc, #124]	; (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ca8:	f7ff fe8b 	bl	80049c2 <LL_ADC_IsEnabled>
 8004cac:	4603      	mov	r3, r0
 8004cae:	4323      	orrs	r3, r4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	bf0c      	ite	eq
 8004cb4:	2301      	moveq	r3, #1
 8004cb6:	2300      	movne	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	e012      	b.n	8004ce2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004cbc:	481a      	ldr	r0, [pc, #104]	; (8004d28 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004cbe:	f7ff fe80 	bl	80049c2 <LL_ADC_IsEnabled>
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	4819      	ldr	r0, [pc, #100]	; (8004d2c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004cc6:	f7ff fe7c 	bl	80049c2 <LL_ADC_IsEnabled>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	431c      	orrs	r4, r3
 8004cce:	481a      	ldr	r0, [pc, #104]	; (8004d38 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004cd0:	f7ff fe77 	bl	80049c2 <LL_ADC_IsEnabled>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	4323      	orrs	r3, r4
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	bf0c      	ite	eq
 8004cdc:	2301      	moveq	r3, #1
 8004cde:	2300      	movne	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d012      	beq.n	8004d0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004ce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004cee:	f023 030f 	bic.w	r3, r3, #15
 8004cf2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004cf4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cf6:	e009      	b.n	8004d0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfc:	f043 0220 	orr.w	r2, r3, #32
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004d0a:	e000      	b.n	8004d0e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004d16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3784      	adds	r7, #132	; 0x84
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd90      	pop	{r4, r7, pc}
 8004d22:	bf00      	nop
 8004d24:	50000100 	.word	0x50000100
 8004d28:	50000400 	.word	0x50000400
 8004d2c:	50000500 	.word	0x50000500
 8004d30:	50000300 	.word	0x50000300
 8004d34:	50000700 	.word	0x50000700
 8004d38:	50000600 	.word	0x50000600

08004d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d4c:	4b0c      	ldr	r3, [pc, #48]	; (8004d80 <__NVIC_SetPriorityGrouping+0x44>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d58:	4013      	ands	r3, r2
 8004d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d6e:	4a04      	ldr	r2, [pc, #16]	; (8004d80 <__NVIC_SetPriorityGrouping+0x44>)
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	60d3      	str	r3, [r2, #12]
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	e000ed00 	.word	0xe000ed00

08004d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d88:	4b04      	ldr	r3, [pc, #16]	; (8004d9c <__NVIC_GetPriorityGrouping+0x18>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	0a1b      	lsrs	r3, r3, #8
 8004d8e:	f003 0307 	and.w	r3, r3, #7
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	e000ed00 	.word	0xe000ed00

08004da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	4603      	mov	r3, r0
 8004da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	db0b      	blt.n	8004dca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	f003 021f 	and.w	r2, r3, #31
 8004db8:	4907      	ldr	r1, [pc, #28]	; (8004dd8 <__NVIC_EnableIRQ+0x38>)
 8004dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	2001      	movs	r0, #1
 8004dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8004dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	e000e100 	.word	0xe000e100

08004ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	4603      	mov	r3, r0
 8004de4:	6039      	str	r1, [r7, #0]
 8004de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	db0a      	blt.n	8004e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	490c      	ldr	r1, [pc, #48]	; (8004e28 <__NVIC_SetPriority+0x4c>)
 8004df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dfa:	0112      	lsls	r2, r2, #4
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	440b      	add	r3, r1
 8004e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e04:	e00a      	b.n	8004e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	4908      	ldr	r1, [pc, #32]	; (8004e2c <__NVIC_SetPriority+0x50>)
 8004e0c:	79fb      	ldrb	r3, [r7, #7]
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	3b04      	subs	r3, #4
 8004e14:	0112      	lsls	r2, r2, #4
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	440b      	add	r3, r1
 8004e1a:	761a      	strb	r2, [r3, #24]
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	e000e100 	.word	0xe000e100
 8004e2c:	e000ed00 	.word	0xe000ed00

08004e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b089      	sub	sp, #36	; 0x24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f1c3 0307 	rsb	r3, r3, #7
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	bf28      	it	cs
 8004e4e:	2304      	movcs	r3, #4
 8004e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	3304      	adds	r3, #4
 8004e56:	2b06      	cmp	r3, #6
 8004e58:	d902      	bls.n	8004e60 <NVIC_EncodePriority+0x30>
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	3b03      	subs	r3, #3
 8004e5e:	e000      	b.n	8004e62 <NVIC_EncodePriority+0x32>
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e64:	f04f 32ff 	mov.w	r2, #4294967295
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6e:	43da      	mvns	r2, r3
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	401a      	ands	r2, r3
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e78:	f04f 31ff 	mov.w	r1, #4294967295
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e82:	43d9      	mvns	r1, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e88:	4313      	orrs	r3, r2
         );
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3724      	adds	r7, #36	; 0x24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
	...

08004e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ea8:	d301      	bcc.n	8004eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e00f      	b.n	8004ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004eae:	4a0a      	ldr	r2, [pc, #40]	; (8004ed8 <SysTick_Config+0x40>)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004eb6:	210f      	movs	r1, #15
 8004eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ebc:	f7ff ff8e 	bl	8004ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ec0:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <SysTick_Config+0x40>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ec6:	4b04      	ldr	r3, [pc, #16]	; (8004ed8 <SysTick_Config+0x40>)
 8004ec8:	2207      	movs	r2, #7
 8004eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	e000e010 	.word	0xe000e010

08004edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7ff ff29 	bl	8004d3c <__NVIC_SetPriorityGrouping>
}
 8004eea:	bf00      	nop
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b086      	sub	sp, #24
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	4603      	mov	r3, r0
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	607a      	str	r2, [r7, #4]
 8004efe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f00:	f7ff ff40 	bl	8004d84 <__NVIC_GetPriorityGrouping>
 8004f04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	6978      	ldr	r0, [r7, #20]
 8004f0c:	f7ff ff90 	bl	8004e30 <NVIC_EncodePriority>
 8004f10:	4602      	mov	r2, r0
 8004f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f16:	4611      	mov	r1, r2
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff ff5f 	bl	8004ddc <__NVIC_SetPriority>
}
 8004f1e:	bf00      	nop
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b082      	sub	sp, #8
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff ff33 	bl	8004da0 <__NVIC_EnableIRQ>
}
 8004f3a:	bf00      	nop
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b082      	sub	sp, #8
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff ffa4 	bl	8004e98 <SysTick_Config>
 8004f50:	4603      	mov	r3, r0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b082      	sub	sp, #8
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e014      	b.n	8004f96 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	791b      	ldrb	r3, [r3, #4]
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d105      	bne.n	8004f82 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7fd fcad 	bl	80028dc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2202      	movs	r2, #2
 8004f86:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e056      	b.n	8005062 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	795b      	ldrb	r3, [r3, #5]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d101      	bne.n	8004fc0 <HAL_DAC_Start+0x20>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	e050      	b.n	8005062 <HAL_DAC_Start+0xc2>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2202      	movs	r2, #2
 8004fca:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6819      	ldr	r1, [r3, #0]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	2201      	movs	r2, #1
 8004fda:	409a      	lsls	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004fe4:	4b22      	ldr	r3, [pc, #136]	; (8005070 <HAL_DAC_Start+0xd0>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	099b      	lsrs	r3, r3, #6
 8004fea:	4a22      	ldr	r2, [pc, #136]	; (8005074 <HAL_DAC_Start+0xd4>)
 8004fec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff0:	099b      	lsrs	r3, r3, #6
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8004ff6:	e002      	b.n	8004ffe <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1f9      	bne.n	8004ff8 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10f      	bne.n	800502a <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005014:	2b02      	cmp	r3, #2
 8005016:	d11d      	bne.n	8005054 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0201 	orr.w	r2, r2, #1
 8005026:	605a      	str	r2, [r3, #4]
 8005028:	e014      	b.n	8005054 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	f003 0310 	and.w	r3, r3, #16
 800503a:	2102      	movs	r1, #2
 800503c:	fa01 f303 	lsl.w	r3, r1, r3
 8005040:	429a      	cmp	r2, r3
 8005042:	d107      	bne.n	8005054 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0202 	orr.w	r2, r2, #2
 8005052:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	2000000c 	.word	0x2000000c
 8005074:	053e2d63 	.word	0x053e2d63

08005078 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005086:	2300      	movs	r3, #0
 8005088:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e018      	b.n	80050c6 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d105      	bne.n	80050b2 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4413      	add	r3, r2
 80050ac:	3308      	adds	r3, #8
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	e004      	b.n	80050bc <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4413      	add	r3, r2
 80050b8:	3314      	adds	r3, #20
 80050ba:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	461a      	mov	r2, r3
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
	...

080050d4 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08a      	sub	sp, #40	; 0x28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <HAL_DAC_ConfigChannel+0x1c>
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e19e      	b.n	8005432 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	795b      	ldrb	r3, [r3, #5]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d101      	bne.n	8005100 <HAL_DAC_ConfigChannel+0x2c>
 80050fc:	2302      	movs	r3, #2
 80050fe:	e198      	b.n	8005432 <HAL_DAC_ConfigChannel+0x35e>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2201      	movs	r2, #1
 8005104:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2202      	movs	r2, #2
 800510a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	2b04      	cmp	r3, #4
 8005112:	d17a      	bne.n	800520a <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005114:	f7fd fe7c 	bl	8002e10 <HAL_GetTick>
 8005118:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d13d      	bne.n	800519c <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005120:	e018      	b.n	8005154 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005122:	f7fd fe75 	bl	8002e10 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b01      	cmp	r3, #1
 800512e:	d911      	bls.n	8005154 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f043 0208 	orr.w	r2, r3, #8
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2203      	movs	r2, #3
 800514e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e16e      	b.n	8005432 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1df      	bne.n	8005122 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800516a:	641a      	str	r2, [r3, #64]	; 0x40
 800516c:	e020      	b.n	80051b0 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800516e:	f7fd fe4f 	bl	8002e10 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b01      	cmp	r3, #1
 800517a:	d90f      	bls.n	800519c <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005182:	2b00      	cmp	r3, #0
 8005184:	da0a      	bge.n	800519c <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f043 0208 	orr.w	r2, r3, #8
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2203      	movs	r2, #3
 8005196:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e14a      	b.n	8005432 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	dbe3      	blt.n	800516e <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051ae:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80051c0:	fa01 f303 	lsl.w	r3, r1, r3
 80051c4:	43db      	mvns	r3, r3
 80051c6:	ea02 0103 	and.w	r1, r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	409a      	lsls	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f003 0310 	and.w	r3, r3, #16
 80051ea:	21ff      	movs	r1, #255	; 0xff
 80051ec:	fa01 f303 	lsl.w	r3, r1, r3
 80051f0:	43db      	mvns	r3, r3
 80051f2:	ea02 0103 	and.w	r1, r2, r3
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	409a      	lsls	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d11d      	bne.n	800524e <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f003 0310 	and.w	r3, r3, #16
 8005220:	221f      	movs	r2, #31
 8005222:	fa02 f303 	lsl.w	r3, r2, r3
 8005226:	43db      	mvns	r3, r3
 8005228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522a:	4013      	ands	r3, r2
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f003 0310 	and.w	r3, r3, #16
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005242:	4313      	orrs	r3, r2
 8005244:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f003 0310 	and.w	r3, r3, #16
 800525c:	2207      	movs	r2, #7
 800525e:	fa02 f303 	lsl.w	r3, r2, r3
 8005262:	43db      	mvns	r3, r3
 8005264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005266:	4013      	ands	r3, r2
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d102      	bne.n	8005278 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8005272:	2300      	movs	r3, #0
 8005274:	623b      	str	r3, [r7, #32]
 8005276:	e00f      	b.n	8005298 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	2b02      	cmp	r3, #2
 800527e:	d102      	bne.n	8005286 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005280:	2301      	movs	r3, #1
 8005282:	623b      	str	r3, [r7, #32]
 8005284:	e008      	b.n	8005298 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d102      	bne.n	8005294 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800528e:	2301      	movs	r3, #1
 8005290:	623b      	str	r3, [r7, #32]
 8005292:	e001      	b.n	8005298 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005294:	2300      	movs	r3, #0
 8005296:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	6a3a      	ldr	r2, [r7, #32]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f003 0310 	and.w	r3, r3, #16
 80052ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052b2:	fa02 f303 	lsl.w	r3, r2, r3
 80052b6:	43db      	mvns	r3, r3
 80052b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ba:	4013      	ands	r3, r2
 80052bc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	791b      	ldrb	r3, [r3, #4]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d102      	bne.n	80052cc <HAL_DAC_ConfigChannel+0x1f8>
 80052c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052ca:	e000      	b.n	80052ce <HAL_DAC_ConfigChannel+0x1fa>
 80052cc:	2300      	movs	r3, #0
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f003 0310 	and.w	r3, r3, #16
 80052da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052de:	fa02 f303 	lsl.w	r3, r2, r3
 80052e2:	43db      	mvns	r3, r3
 80052e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e6:	4013      	ands	r3, r2
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	795b      	ldrb	r3, [r3, #5]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d102      	bne.n	80052f8 <HAL_DAC_ConfigChannel+0x224>
 80052f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052f6:	e000      	b.n	80052fa <HAL_DAC_ConfigChannel+0x226>
 80052f8:	2300      	movs	r3, #0
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005306:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b02      	cmp	r3, #2
 800530e:	d114      	bne.n	800533a <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005310:	f004 f880 	bl	8009414 <HAL_RCC_GetHCLKFreq>
 8005314:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	4a48      	ldr	r2, [pc, #288]	; (800543c <HAL_DAC_ConfigChannel+0x368>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d904      	bls.n	8005328 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
 8005326:	e00f      	b.n	8005348 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	4a45      	ldr	r2, [pc, #276]	; (8005440 <HAL_DAC_ConfigChannel+0x36c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d90a      	bls.n	8005346 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005336:	627b      	str	r3, [r7, #36]	; 0x24
 8005338:	e006      	b.n	8005348 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005340:	4313      	orrs	r3, r2
 8005342:	627b      	str	r3, [r7, #36]	; 0x24
 8005344:	e000      	b.n	8005348 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005346:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f003 0310 	and.w	r3, r3, #16
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	fa02 f303 	lsl.w	r3, r2, r3
 8005354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005356:	4313      	orrs	r3, r2
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005360:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6819      	ldr	r1, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f003 0310 	and.w	r3, r3, #16
 800536e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005372:	fa02 f303 	lsl.w	r3, r2, r3
 8005376:	43da      	mvns	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	400a      	ands	r2, r1
 800537e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f003 0310 	and.w	r3, r3, #16
 800538e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005392:	fa02 f303 	lsl.w	r3, r2, r3
 8005396:	43db      	mvns	r3, r3
 8005398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539a:	4013      	ands	r3, r2
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f003 0310 	and.w	r3, r3, #16
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	fa02 f303 	lsl.w	r3, r2, r3
 80053b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b2:	4313      	orrs	r3, r2
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053bc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6819      	ldr	r1, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f003 0310 	and.w	r3, r3, #16
 80053ca:	22c0      	movs	r2, #192	; 0xc0
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	43da      	mvns	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	400a      	ands	r2, r1
 80053d8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	089b      	lsrs	r3, r3, #2
 80053e0:	f003 030f 	and.w	r3, r3, #15
 80053e4:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	089b      	lsrs	r3, r3, #2
 80053ec:	021b      	lsls	r3, r3, #8
 80053ee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005408:	fa01 f303 	lsl.w	r3, r1, r3
 800540c:	43db      	mvns	r3, r3
 800540e:	ea02 0103 	and.w	r1, r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f003 0310 	and.w	r3, r3, #16
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	409a      	lsls	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2201      	movs	r2, #1
 8005428:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005430:	7ffb      	ldrb	r3, [r7, #31]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3728      	adds	r7, #40	; 0x28
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	09896800 	.word	0x09896800
 8005440:	04c4b400 	.word	0x04c4b400

08005444 <HAL_DACEx_SelfCalibrate>:
  * @retval Updates DAC_TrimmingValue. , DAC_UserTrimming set to DAC_UserTrimming
  * @retval HAL status
  * @note   Calibration runs about 7 ms.
  */
HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b08a      	sub	sp, #40	; 0x28
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Check the DAC handle allocation */
  /* Check if DAC running */
  if ((hdac == NULL) || (sConfig == NULL))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <HAL_DACEx_SelfCalibrate+0x1e>
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d103      	bne.n	800546a <HAL_DACEx_SelfCalibrate+0x26>
  {
    status = HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005468:	e10e      	b.n	8005688 <HAL_DACEx_SelfCalibrate+0x244>
  }
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	791b      	ldrb	r3, [r3, #4]
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d103      	bne.n	800547c <HAL_DACEx_SelfCalibrate+0x38>
  {
    status = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800547a:	e105      	b.n	8005688 <HAL_DACEx_SelfCalibrate+0x244>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hdac);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	795b      	ldrb	r3, [r3, #5]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <HAL_DACEx_SelfCalibrate+0x44>
 8005484:	2302      	movs	r3, #2
 8005486:	e101      	b.n	800568c <HAL_DACEx_SelfCalibrate+0x248>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2201      	movs	r2, #1
 800548c:	715a      	strb	r2, [r3, #5]

    /* Store configuration */
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f003 0310 	and.w	r3, r3, #16
 800549a:	2107      	movs	r1, #7
 800549c:	fa01 f303 	lsl.w	r3, r1, r3
 80054a0:	4013      	ands	r3, r2
 80054a2:	61bb      	str	r3, [r7, #24]

    /* Disable the selected DAC channel */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6819      	ldr	r1, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f003 0310 	and.w	r3, r3, #16
 80054b0:	2201      	movs	r2, #1
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	43da      	mvns	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	400a      	ands	r2, r1
 80054be:	601a      	str	r2, [r3, #0]
    /* Wait for ready bit to be de-asserted */
    HAL_Delay(1);
 80054c0:	2001      	movs	r0, #1
 80054c2:	f7fd fcb1 	bl	8002e28 <HAL_Delay>

    /* Set mode in MCR  for calibration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f003 0310 	and.w	r3, r3, #16
 80054d2:	2207      	movs	r2, #7
 80054d4:	fa02 f303 	lsl.w	r3, r2, r3
 80054d8:	43da      	mvns	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	400a      	ands	r2, r1
 80054e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Enable the selected DAC channel calibration */
    /* i.e. set DAC_CR_CENx bit */
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6819      	ldr	r1, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f003 0310 	and.w	r3, r3, #16
 80054ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80054f2:	409a      	lsls	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	601a      	str	r2, [r3, #0]

    /* Init trimming counter */
    /* Medium value */
    trimmingvalue = 16UL;
 80054fc:	2310      	movs	r3, #16
 80054fe:	623b      	str	r3, [r7, #32]
    delta = 8UL;
 8005500:	2308      	movs	r3, #8
 8005502:	61fb      	str	r3, [r7, #28]
    while (delta != 0UL)
 8005504:	e047      	b.n	8005596 <HAL_DACEx_SelfCalibrate+0x152>
    {
      /* Set candidate trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f003 0310 	and.w	r3, r3, #16
 8005512:	211f      	movs	r1, #31
 8005514:	fa01 f303 	lsl.w	r3, r1, r3
 8005518:	43db      	mvns	r3, r3
 800551a:	ea02 0103 	and.w	r1, r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	6a3a      	ldr	r2, [r7, #32]
 8005526:	409a      	lsls	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Wait minimum time needed between two calibration steps (OTRIM) */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed */
      /*       32 bits register capacity and handle low frequency. */
      wait_loop_index = ((DAC_DELAY_TRIM_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005530:	4b58      	ldr	r3, [pc, #352]	; (8005694 <HAL_DACEx_SelfCalibrate+0x250>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	099b      	lsrs	r3, r3, #6
 8005536:	4a58      	ldr	r2, [pc, #352]	; (8005698 <HAL_DACEx_SelfCalibrate+0x254>)
 8005538:	fba2 2303 	umull	r2, r3, r2, r3
 800553c:	099b      	lsrs	r3, r3, #6
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8005548:	e002      	b.n	8005550 <HAL_DACEx_SelfCalibrate+0x10c>
      {
        wait_loop_index--;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	3b01      	subs	r3, #1
 800554e:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1f9      	bne.n	800554a <HAL_DACEx_SelfCalibrate+0x106>
      }

      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f003 0310 	and.w	r3, r3, #16
 8005562:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005566:	fa01 f303 	lsl.w	r3, r1, r3
 800556a:	401a      	ands	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f003 0310 	and.w	r3, r3, #16
 8005572:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005576:	fa01 f303 	lsl.w	r3, r1, r3
 800557a:	429a      	cmp	r2, r3
 800557c:	d104      	bne.n	8005588 <HAL_DACEx_SelfCalibrate+0x144>
      {
        /* DAC_SR_CAL_FLAGx is HIGH try higher trimming */
        trimmingvalue -= delta;
 800557e:	6a3a      	ldr	r2, [r7, #32]
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	623b      	str	r3, [r7, #32]
 8005586:	e003      	b.n	8005590 <HAL_DACEx_SelfCalibrate+0x14c>
      }
      else
      {
        /* DAC_SR_CAL_FLAGx is LOW try lower trimming */
        trimmingvalue += delta;
 8005588:	6a3a      	ldr	r2, [r7, #32]
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	4413      	add	r3, r2
 800558e:	623b      	str	r3, [r7, #32]
      }
      delta >>= 1UL;
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	085b      	lsrs	r3, r3, #1
 8005594:	61fb      	str	r3, [r7, #28]
    while (delta != 0UL)
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1b4      	bne.n	8005506 <HAL_DACEx_SelfCalibrate+0xc2>
    }

    /* Still need to check if right calibration is current value or one step below */
    /* Indeed the first value that causes the DAC_SR_CAL_FLAGx bit to change from 0 to 1  */
    /* Set candidate trimming */
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f003 0310 	and.w	r3, r3, #16
 80055a8:	211f      	movs	r1, #31
 80055aa:	fa01 f303 	lsl.w	r3, r1, r3
 80055ae:	43db      	mvns	r3, r3
 80055b0:	ea02 0103 	and.w	r1, r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f003 0310 	and.w	r3, r3, #16
 80055ba:	6a3a      	ldr	r2, [r7, #32]
 80055bc:	409a      	lsls	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Wait minimum time needed between two calibration steps (OTRIM) */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed */
    /*       32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_TRIM_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80055c6:	4b33      	ldr	r3, [pc, #204]	; (8005694 <HAL_DACEx_SelfCalibrate+0x250>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	099b      	lsrs	r3, r3, #6
 80055cc:	4a32      	ldr	r2, [pc, #200]	; (8005698 <HAL_DACEx_SelfCalibrate+0x254>)
 80055ce:	fba2 2303 	umull	r2, r3, r2, r3
 80055d2:	099b      	lsrs	r3, r3, #6
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	4613      	mov	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80055de:	e002      	b.n	80055e6 <HAL_DACEx_SelfCalibrate+0x1a2>
    {
      wait_loop_index--;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1f9      	bne.n	80055e0 <HAL_DACEx_SelfCalibrate+0x19c>
    }

    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f003 0310 	and.w	r3, r3, #16
 80055f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005600:	4013      	ands	r3, r2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d117      	bne.n	8005636 <HAL_DACEx_SelfCalibrate+0x1f2>
    {
      /* Trimming is actually one value more */
      trimmingvalue++;
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	3301      	adds	r3, #1
 800560a:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	211f      	movs	r1, #31
 800561a:	fa01 f303 	lsl.w	r3, r1, r3
 800561e:	43db      	mvns	r3, r3
 8005620:	ea02 0103 	and.w	r1, r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f003 0310 	and.w	r3, r3, #16
 800562a:	6a3a      	ldr	r2, [r7, #32]
 800562c:	409a      	lsls	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Disable the selected DAC channel calibration */
    /* i.e. clear DAC_CR_CENx bit */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6819      	ldr	r1, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f003 0310 	and.w	r3, r3, #16
 8005642:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005646:	fa02 f303 	lsl.w	r3, r2, r3
 800564a:	43da      	mvns	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	400a      	ands	r2, r1
 8005652:	601a      	str	r2, [r3, #0]

    sConfig->DAC_TrimmingValue = trimmingvalue;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	6a3a      	ldr	r2, [r7, #32]
 8005658:	621a      	str	r2, [r3, #32]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2201      	movs	r2, #1
 800565e:	61da      	str	r2, [r3, #28]

    /* Restore configuration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f003 0310 	and.w	r3, r3, #16
 800566c:	2107      	movs	r1, #7
 800566e:	fa01 f303 	lsl.w	r3, r1, r3
 8005672:	43db      	mvns	r3, r3
 8005674:	ea02 0103 	and.w	r1, r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	430a      	orrs	r2, r1
 8005680:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process unlocked */
    __HAL_UNLOCK(hdac);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	715a      	strb	r2, [r3, #5]
  }

  return status;
 8005688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800568c:	4618      	mov	r0, r3
 800568e:	3728      	adds	r7, #40	; 0x28
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	2000000c 	.word	0x2000000c
 8005698:	053e2d63 	.word	0x053e2d63

0800569c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e08d      	b.n	80057ca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	4b47      	ldr	r3, [pc, #284]	; (80057d4 <HAL_DMA_Init+0x138>)
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d80f      	bhi.n	80056da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	4b45      	ldr	r3, [pc, #276]	; (80057d8 <HAL_DMA_Init+0x13c>)
 80056c2:	4413      	add	r3, r2
 80056c4:	4a45      	ldr	r2, [pc, #276]	; (80057dc <HAL_DMA_Init+0x140>)
 80056c6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ca:	091b      	lsrs	r3, r3, #4
 80056cc:	009a      	lsls	r2, r3, #2
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a42      	ldr	r2, [pc, #264]	; (80057e0 <HAL_DMA_Init+0x144>)
 80056d6:	641a      	str	r2, [r3, #64]	; 0x40
 80056d8:	e00e      	b.n	80056f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	461a      	mov	r2, r3
 80056e0:	4b40      	ldr	r3, [pc, #256]	; (80057e4 <HAL_DMA_Init+0x148>)
 80056e2:	4413      	add	r3, r2
 80056e4:	4a3d      	ldr	r2, [pc, #244]	; (80057dc <HAL_DMA_Init+0x140>)
 80056e6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ea:	091b      	lsrs	r3, r3, #4
 80056ec:	009a      	lsls	r2, r3, #2
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a3c      	ldr	r2, [pc, #240]	; (80057e8 <HAL_DMA_Init+0x14c>)
 80056f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800570e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005712:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800571c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005728:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005734:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 faa6 	bl	8005c9c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005758:	d102      	bne.n	8005760 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005774:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d010      	beq.n	80057a0 <HAL_DMA_Init+0x104>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2b04      	cmp	r3, #4
 8005784:	d80c      	bhi.n	80057a0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fac6 	bl	8005d18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005790:	2200      	movs	r2, #0
 8005792:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800579c:	605a      	str	r2, [r3, #4]
 800579e:	e008      	b.n	80057b2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	40020407 	.word	0x40020407
 80057d8:	bffdfff8 	.word	0xbffdfff8
 80057dc:	cccccccd 	.word	0xcccccccd
 80057e0:	40020000 	.word	0x40020000
 80057e4:	bffdfbf8 	.word	0xbffdfbf8
 80057e8:	40020400 	.word	0x40020400

080057ec <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e07b      	b.n	80058f6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 0201 	bic.w	r2, r2, #1
 800580c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	4b3a      	ldr	r3, [pc, #232]	; (8005900 <HAL_DMA_DeInit+0x114>)
 8005816:	429a      	cmp	r2, r3
 8005818:	d80f      	bhi.n	800583a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	461a      	mov	r2, r3
 8005820:	4b38      	ldr	r3, [pc, #224]	; (8005904 <HAL_DMA_DeInit+0x118>)
 8005822:	4413      	add	r3, r2
 8005824:	4a38      	ldr	r2, [pc, #224]	; (8005908 <HAL_DMA_DeInit+0x11c>)
 8005826:	fba2 2303 	umull	r2, r3, r2, r3
 800582a:	091b      	lsrs	r3, r3, #4
 800582c:	009a      	lsls	r2, r3, #2
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a35      	ldr	r2, [pc, #212]	; (800590c <HAL_DMA_DeInit+0x120>)
 8005836:	641a      	str	r2, [r3, #64]	; 0x40
 8005838:	e00e      	b.n	8005858 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	4b33      	ldr	r3, [pc, #204]	; (8005910 <HAL_DMA_DeInit+0x124>)
 8005842:	4413      	add	r3, r2
 8005844:	4a30      	ldr	r2, [pc, #192]	; (8005908 <HAL_DMA_DeInit+0x11c>)
 8005846:	fba2 2303 	umull	r2, r3, r2, r3
 800584a:	091b      	lsrs	r3, r3, #4
 800584c:	009a      	lsls	r2, r3, #2
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a2f      	ldr	r2, [pc, #188]	; (8005914 <HAL_DMA_DeInit+0x128>)
 8005856:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2200      	movs	r2, #0
 800585e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005864:	f003 021f 	and.w	r2, r3, #31
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	2101      	movs	r1, #1
 800586e:	fa01 f202 	lsl.w	r2, r1, r2
 8005872:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fa11 	bl	8005c9c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800588a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00f      	beq.n	80058b4 <HAL_DMA_DeInit+0xc8>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	2b04      	cmp	r3, #4
 800589a:	d80b      	bhi.n	80058b4 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fa3b 	bl	8005d18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80058b2:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	40020407 	.word	0x40020407
 8005904:	bffdfff8 	.word	0xbffdfff8
 8005908:	cccccccd 	.word	0xcccccccd
 800590c:	40020000 	.word	0x40020000
 8005910:	bffdfbf8 	.word	0xbffdfbf8
 8005914:	40020400 	.word	0x40020400

08005918 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005926:	2300      	movs	r3, #0
 8005928:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_DMA_Start_IT+0x20>
 8005934:	2302      	movs	r3, #2
 8005936:	e066      	b.n	8005a06 <HAL_DMA_Start_IT+0xee>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b01      	cmp	r3, #1
 800594a:	d155      	bne.n	80059f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0201 	bic.w	r2, r2, #1
 8005968:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	68b9      	ldr	r1, [r7, #8]
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 f954 	bl	8005c1e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597a:	2b00      	cmp	r3, #0
 800597c:	d008      	beq.n	8005990 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 020e 	orr.w	r2, r2, #14
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	e00f      	b.n	80059b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0204 	bic.w	r2, r2, #4
 800599e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 020a 	orr.w	r2, r2, #10
 80059ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d007      	beq.n	80059ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d007      	beq.n	80059e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f042 0201 	orr.w	r2, r2, #1
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	e005      	b.n	8005a04 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005a00:	2302      	movs	r3, #2
 8005a02:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b085      	sub	sp, #20
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d005      	beq.n	8005a32 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2204      	movs	r2, #4
 8005a2a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	73fb      	strb	r3, [r7, #15]
 8005a30:	e037      	b.n	8005aa2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 020e 	bic.w	r2, r2, #14
 8005a40:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a50:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0201 	bic.w	r2, r2, #1
 8005a60:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a66:	f003 021f 	and.w	r2, r3, #31
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	2101      	movs	r1, #1
 8005a70:	fa01 f202 	lsl.w	r2, r1, r2
 8005a74:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005a7e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00c      	beq.n	8005aa2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a96:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005aa0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005adc:	f003 031f 	and.w	r3, r3, #31
 8005ae0:	2204      	movs	r2, #4
 8005ae2:	409a      	lsls	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d026      	beq.n	8005b3a <HAL_DMA_IRQHandler+0x7a>
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f003 0304 	and.w	r3, r3, #4
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d021      	beq.n	8005b3a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0320 	and.w	r3, r3, #32
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d107      	bne.n	8005b14 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0204 	bic.w	r2, r2, #4
 8005b12:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b18:	f003 021f 	and.w	r2, r3, #31
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b20:	2104      	movs	r1, #4
 8005b22:	fa01 f202 	lsl.w	r2, r1, r2
 8005b26:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d071      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005b38:	e06c      	b.n	8005c14 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3e:	f003 031f 	and.w	r3, r3, #31
 8005b42:	2202      	movs	r2, #2
 8005b44:	409a      	lsls	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d02e      	beq.n	8005bac <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d029      	beq.n	8005bac <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10b      	bne.n	8005b7e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 020a 	bic.w	r2, r2, #10
 8005b74:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b82:	f003 021f 	and.w	r2, r3, #31
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	2102      	movs	r1, #2
 8005b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b90:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d038      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005baa:	e033      	b.n	8005c14 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb0:	f003 031f 	and.w	r3, r3, #31
 8005bb4:	2208      	movs	r2, #8
 8005bb6:	409a      	lsls	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d02a      	beq.n	8005c16 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d025      	beq.n	8005c16 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 020e 	bic.w	r2, r2, #14
 8005bd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bde:	f003 021f 	and.w	r2, r3, #31
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	2101      	movs	r1, #1
 8005be8:	fa01 f202 	lsl.w	r2, r1, r2
 8005bec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d004      	beq.n	8005c16 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005c14:	bf00      	nop
 8005c16:	bf00      	nop
}
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	60f8      	str	r0, [r7, #12]
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	607a      	str	r2, [r7, #4]
 8005c2a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005c34:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d004      	beq.n	8005c48 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005c46:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4c:	f003 021f 	and.w	r2, r3, #31
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c54:	2101      	movs	r1, #1
 8005c56:	fa01 f202 	lsl.w	r2, r1, r2
 8005c5a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	2b10      	cmp	r3, #16
 8005c6a:	d108      	bne.n	8005c7e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005c7c:	e007      	b.n	8005c8e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	60da      	str	r2, [r3, #12]
}
 8005c8e:	bf00      	nop
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
	...

08005c9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	4b16      	ldr	r3, [pc, #88]	; (8005d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d802      	bhi.n	8005cb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005cb0:	4b15      	ldr	r3, [pc, #84]	; (8005d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005cb2:	617b      	str	r3, [r7, #20]
 8005cb4:	e001      	b.n	8005cba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005cb6:	4b15      	ldr	r3, [pc, #84]	; (8005d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005cb8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	3b08      	subs	r3, #8
 8005cc6:	4a12      	ldr	r2, [pc, #72]	; (8005d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ccc:	091b      	lsrs	r3, r3, #4
 8005cce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd4:	089b      	lsrs	r3, r3, #2
 8005cd6:	009a      	lsls	r2, r3, #2
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	4413      	add	r3, r2
 8005cdc:	461a      	mov	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a0b      	ldr	r2, [pc, #44]	; (8005d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005ce6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f003 031f 	and.w	r3, r3, #31
 8005cee:	2201      	movs	r2, #1
 8005cf0:	409a      	lsls	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005cf6:	bf00      	nop
 8005cf8:	371c      	adds	r7, #28
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	40020407 	.word	0x40020407
 8005d08:	40020800 	.word	0x40020800
 8005d0c:	40020820 	.word	0x40020820
 8005d10:	cccccccd 	.word	0xcccccccd
 8005d14:	40020880 	.word	0x40020880

08005d18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4b0b      	ldr	r3, [pc, #44]	; (8005d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005d2c:	4413      	add	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	461a      	mov	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a08      	ldr	r2, [pc, #32]	; (8005d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005d3a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	f003 031f 	and.w	r3, r3, #31
 8005d44:	2201      	movs	r2, #1
 8005d46:	409a      	lsls	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005d4c:	bf00      	nop
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	1000823f 	.word	0x1000823f
 8005d5c:	40020940 	.word	0x40020940

08005d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d6e:	e15a      	b.n	8006026 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	2101      	movs	r1, #1
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	fa01 f303 	lsl.w	r3, r1, r3
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 814c 	beq.w	8006020 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f003 0303 	and.w	r3, r3, #3
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d005      	beq.n	8005da0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d130      	bne.n	8005e02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	2203      	movs	r2, #3
 8005dac:	fa02 f303 	lsl.w	r3, r2, r3
 8005db0:	43db      	mvns	r3, r3
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4013      	ands	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	fa02 f303 	lsl.w	r3, r2, r3
 8005dde:	43db      	mvns	r3, r3
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4013      	ands	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	091b      	lsrs	r3, r3, #4
 8005dec:	f003 0201 	and.w	r2, r3, #1
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d017      	beq.n	8005e3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	005b      	lsls	r3, r3, #1
 8005e18:	2203      	movs	r2, #3
 8005e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1e:	43db      	mvns	r3, r3
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	4013      	ands	r3, r2
 8005e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	689a      	ldr	r2, [r3, #8]
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f003 0303 	and.w	r3, r3, #3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d123      	bne.n	8005e92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	08da      	lsrs	r2, r3, #3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	3208      	adds	r2, #8
 8005e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	220f      	movs	r2, #15
 8005e62:	fa02 f303 	lsl.w	r3, r2, r3
 8005e66:	43db      	mvns	r3, r3
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	691a      	ldr	r2, [r3, #16]
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	08da      	lsrs	r2, r3, #3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3208      	adds	r2, #8
 8005e8c:	6939      	ldr	r1, [r7, #16]
 8005e8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	2203      	movs	r2, #3
 8005e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea2:	43db      	mvns	r3, r3
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f003 0203 	and.w	r2, r3, #3
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 80a6 	beq.w	8006020 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ed4:	4b5b      	ldr	r3, [pc, #364]	; (8006044 <HAL_GPIO_Init+0x2e4>)
 8005ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed8:	4a5a      	ldr	r2, [pc, #360]	; (8006044 <HAL_GPIO_Init+0x2e4>)
 8005eda:	f043 0301 	orr.w	r3, r3, #1
 8005ede:	6613      	str	r3, [r2, #96]	; 0x60
 8005ee0:	4b58      	ldr	r3, [pc, #352]	; (8006044 <HAL_GPIO_Init+0x2e4>)
 8005ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	60bb      	str	r3, [r7, #8]
 8005eea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005eec:	4a56      	ldr	r2, [pc, #344]	; (8006048 <HAL_GPIO_Init+0x2e8>)
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	089b      	lsrs	r3, r3, #2
 8005ef2:	3302      	adds	r3, #2
 8005ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f003 0303 	and.w	r3, r3, #3
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	220f      	movs	r2, #15
 8005f04:	fa02 f303 	lsl.w	r3, r2, r3
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005f16:	d01f      	beq.n	8005f58 <HAL_GPIO_Init+0x1f8>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a4c      	ldr	r2, [pc, #304]	; (800604c <HAL_GPIO_Init+0x2ec>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d019      	beq.n	8005f54 <HAL_GPIO_Init+0x1f4>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a4b      	ldr	r2, [pc, #300]	; (8006050 <HAL_GPIO_Init+0x2f0>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d013      	beq.n	8005f50 <HAL_GPIO_Init+0x1f0>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a4a      	ldr	r2, [pc, #296]	; (8006054 <HAL_GPIO_Init+0x2f4>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d00d      	beq.n	8005f4c <HAL_GPIO_Init+0x1ec>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a49      	ldr	r2, [pc, #292]	; (8006058 <HAL_GPIO_Init+0x2f8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d007      	beq.n	8005f48 <HAL_GPIO_Init+0x1e8>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a48      	ldr	r2, [pc, #288]	; (800605c <HAL_GPIO_Init+0x2fc>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d101      	bne.n	8005f44 <HAL_GPIO_Init+0x1e4>
 8005f40:	2305      	movs	r3, #5
 8005f42:	e00a      	b.n	8005f5a <HAL_GPIO_Init+0x1fa>
 8005f44:	2306      	movs	r3, #6
 8005f46:	e008      	b.n	8005f5a <HAL_GPIO_Init+0x1fa>
 8005f48:	2304      	movs	r3, #4
 8005f4a:	e006      	b.n	8005f5a <HAL_GPIO_Init+0x1fa>
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e004      	b.n	8005f5a <HAL_GPIO_Init+0x1fa>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e002      	b.n	8005f5a <HAL_GPIO_Init+0x1fa>
 8005f54:	2301      	movs	r3, #1
 8005f56:	e000      	b.n	8005f5a <HAL_GPIO_Init+0x1fa>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	f002 0203 	and.w	r2, r2, #3
 8005f60:	0092      	lsls	r2, r2, #2
 8005f62:	4093      	lsls	r3, r2
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f6a:	4937      	ldr	r1, [pc, #220]	; (8006048 <HAL_GPIO_Init+0x2e8>)
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	089b      	lsrs	r3, r3, #2
 8005f70:	3302      	adds	r3, #2
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f78:	4b39      	ldr	r3, [pc, #228]	; (8006060 <HAL_GPIO_Init+0x300>)
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	43db      	mvns	r3, r3
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	4013      	ands	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f9c:	4a30      	ldr	r2, [pc, #192]	; (8006060 <HAL_GPIO_Init+0x300>)
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005fa2:	4b2f      	ldr	r3, [pc, #188]	; (8006060 <HAL_GPIO_Init+0x300>)
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	43db      	mvns	r3, r3
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	4013      	ands	r3, r2
 8005fb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005fc6:	4a26      	ldr	r2, [pc, #152]	; (8006060 <HAL_GPIO_Init+0x300>)
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005fcc:	4b24      	ldr	r3, [pc, #144]	; (8006060 <HAL_GPIO_Init+0x300>)
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	43db      	mvns	r3, r3
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	4013      	ands	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ff0:	4a1b      	ldr	r2, [pc, #108]	; (8006060 <HAL_GPIO_Init+0x300>)
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005ff6:	4b1a      	ldr	r3, [pc, #104]	; (8006060 <HAL_GPIO_Init+0x300>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	43db      	mvns	r3, r3
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	4013      	ands	r3, r2
 8006004:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	4313      	orrs	r3, r2
 8006018:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800601a:	4a11      	ldr	r2, [pc, #68]	; (8006060 <HAL_GPIO_Init+0x300>)
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	3301      	adds	r3, #1
 8006024:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	fa22 f303 	lsr.w	r3, r2, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	f47f ae9d 	bne.w	8005d70 <HAL_GPIO_Init+0x10>
  }
}
 8006036:	bf00      	nop
 8006038:	bf00      	nop
 800603a:	371c      	adds	r7, #28
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	40021000 	.word	0x40021000
 8006048:	40010000 	.word	0x40010000
 800604c:	48000400 	.word	0x48000400
 8006050:	48000800 	.word	0x48000800
 8006054:	48000c00 	.word	0x48000c00
 8006058:	48001000 	.word	0x48001000
 800605c:	48001400 	.word	0x48001400
 8006060:	40010400 	.word	0x40010400

08006064 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800606e:	2300      	movs	r3, #0
 8006070:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8006072:	e0bd      	b.n	80061f0 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8006074:	2201      	movs	r2, #1
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	fa02 f303 	lsl.w	r3, r2, r3
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	4013      	ands	r3, r2
 8006080:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 80b0 	beq.w	80061ea <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800608a:	4a60      	ldr	r2, [pc, #384]	; (800620c <HAL_GPIO_DeInit+0x1a8>)
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	089b      	lsrs	r3, r3, #2
 8006090:	3302      	adds	r3, #2
 8006092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006096:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	220f      	movs	r2, #15
 80060a2:	fa02 f303 	lsl.w	r3, r2, r3
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	4013      	ands	r3, r2
 80060aa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80060b2:	d01f      	beq.n	80060f4 <HAL_GPIO_DeInit+0x90>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a56      	ldr	r2, [pc, #344]	; (8006210 <HAL_GPIO_DeInit+0x1ac>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d019      	beq.n	80060f0 <HAL_GPIO_DeInit+0x8c>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a55      	ldr	r2, [pc, #340]	; (8006214 <HAL_GPIO_DeInit+0x1b0>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d013      	beq.n	80060ec <HAL_GPIO_DeInit+0x88>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a54      	ldr	r2, [pc, #336]	; (8006218 <HAL_GPIO_DeInit+0x1b4>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00d      	beq.n	80060e8 <HAL_GPIO_DeInit+0x84>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a53      	ldr	r2, [pc, #332]	; (800621c <HAL_GPIO_DeInit+0x1b8>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d007      	beq.n	80060e4 <HAL_GPIO_DeInit+0x80>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a52      	ldr	r2, [pc, #328]	; (8006220 <HAL_GPIO_DeInit+0x1bc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d101      	bne.n	80060e0 <HAL_GPIO_DeInit+0x7c>
 80060dc:	2305      	movs	r3, #5
 80060de:	e00a      	b.n	80060f6 <HAL_GPIO_DeInit+0x92>
 80060e0:	2306      	movs	r3, #6
 80060e2:	e008      	b.n	80060f6 <HAL_GPIO_DeInit+0x92>
 80060e4:	2304      	movs	r3, #4
 80060e6:	e006      	b.n	80060f6 <HAL_GPIO_DeInit+0x92>
 80060e8:	2303      	movs	r3, #3
 80060ea:	e004      	b.n	80060f6 <HAL_GPIO_DeInit+0x92>
 80060ec:	2302      	movs	r3, #2
 80060ee:	e002      	b.n	80060f6 <HAL_GPIO_DeInit+0x92>
 80060f0:	2301      	movs	r3, #1
 80060f2:	e000      	b.n	80060f6 <HAL_GPIO_DeInit+0x92>
 80060f4:	2300      	movs	r3, #0
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	f002 0203 	and.w	r2, r2, #3
 80060fc:	0092      	lsls	r2, r2, #2
 80060fe:	4093      	lsls	r3, r2
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	429a      	cmp	r2, r3
 8006104:	d132      	bne.n	800616c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006106:	4b47      	ldr	r3, [pc, #284]	; (8006224 <HAL_GPIO_DeInit+0x1c0>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	43db      	mvns	r3, r3
 800610e:	4945      	ldr	r1, [pc, #276]	; (8006224 <HAL_GPIO_DeInit+0x1c0>)
 8006110:	4013      	ands	r3, r2
 8006112:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006114:	4b43      	ldr	r3, [pc, #268]	; (8006224 <HAL_GPIO_DeInit+0x1c0>)
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	43db      	mvns	r3, r3
 800611c:	4941      	ldr	r1, [pc, #260]	; (8006224 <HAL_GPIO_DeInit+0x1c0>)
 800611e:	4013      	ands	r3, r2
 8006120:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006122:	4b40      	ldr	r3, [pc, #256]	; (8006224 <HAL_GPIO_DeInit+0x1c0>)
 8006124:	68da      	ldr	r2, [r3, #12]
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	43db      	mvns	r3, r3
 800612a:	493e      	ldr	r1, [pc, #248]	; (8006224 <HAL_GPIO_DeInit+0x1c0>)
 800612c:	4013      	ands	r3, r2
 800612e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8006130:	4b3c      	ldr	r3, [pc, #240]	; (8006224 <HAL_GPIO_DeInit+0x1c0>)
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	43db      	mvns	r3, r3
 8006138:	493a      	ldr	r1, [pc, #232]	; (8006224 <HAL_GPIO_DeInit+0x1c0>)
 800613a:	4013      	ands	r3, r2
 800613c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f003 0303 	and.w	r3, r3, #3
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	220f      	movs	r2, #15
 8006148:	fa02 f303 	lsl.w	r3, r2, r3
 800614c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800614e:	4a2f      	ldr	r2, [pc, #188]	; (800620c <HAL_GPIO_DeInit+0x1a8>)
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	089b      	lsrs	r3, r3, #2
 8006154:	3302      	adds	r3, #2
 8006156:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	43da      	mvns	r2, r3
 800615e:	482b      	ldr	r0, [pc, #172]	; (800620c <HAL_GPIO_DeInit+0x1a8>)
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	089b      	lsrs	r3, r3, #2
 8006164:	400a      	ands	r2, r1
 8006166:	3302      	adds	r3, #2
 8006168:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	2103      	movs	r1, #3
 8006176:	fa01 f303 	lsl.w	r3, r1, r3
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	08da      	lsrs	r2, r3, #3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	3208      	adds	r2, #8
 8006188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f003 0307 	and.w	r3, r3, #7
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	220f      	movs	r2, #15
 8006196:	fa02 f303 	lsl.w	r3, r2, r3
 800619a:	43db      	mvns	r3, r3
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	08d2      	lsrs	r2, r2, #3
 80061a0:	4019      	ands	r1, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	3208      	adds	r2, #8
 80061a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	2103      	movs	r1, #3
 80061b4:	fa01 f303 	lsl.w	r3, r1, r3
 80061b8:	43db      	mvns	r3, r3
 80061ba:	401a      	ands	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	2101      	movs	r1, #1
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	fa01 f303 	lsl.w	r3, r1, r3
 80061cc:	43db      	mvns	r3, r3
 80061ce:	401a      	ands	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	2103      	movs	r1, #3
 80061de:	fa01 f303 	lsl.w	r3, r1, r3
 80061e2:	43db      	mvns	r3, r3
 80061e4:	401a      	ands	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	609a      	str	r2, [r3, #8]
    }

    position++;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	3301      	adds	r3, #1
 80061ee:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	fa22 f303 	lsr.w	r3, r2, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f47f af3b 	bne.w	8006074 <HAL_GPIO_DeInit+0x10>
  }
}
 80061fe:	bf00      	nop
 8006200:	bf00      	nop
 8006202:	371c      	adds	r7, #28
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	40010000 	.word	0x40010000
 8006210:	48000400 	.word	0x48000400
 8006214:	48000800 	.word	0x48000800
 8006218:	48000c00 	.word	0x48000c00
 800621c:	48001000 	.word	0x48001000
 8006220:	48001400 	.word	0x48001400
 8006224:	40010400 	.word	0x40010400

08006228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	460b      	mov	r3, r1
 8006232:	807b      	strh	r3, [r7, #2]
 8006234:	4613      	mov	r3, r2
 8006236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006238:	787b      	ldrb	r3, [r7, #1]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800623e:	887a      	ldrh	r2, [r7, #2]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006244:	e002      	b.n	800624c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006246:	887a      	ldrh	r2, [r7, #2]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	4603      	mov	r3, r0
 8006260:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006262:	4b08      	ldr	r3, [pc, #32]	; (8006284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006264:	695a      	ldr	r2, [r3, #20]
 8006266:	88fb      	ldrh	r3, [r7, #6]
 8006268:	4013      	ands	r3, r2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d006      	beq.n	800627c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800626e:	4a05      	ldr	r2, [pc, #20]	; (8006284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006270:	88fb      	ldrh	r3, [r7, #6]
 8006272:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006274:	88fb      	ldrh	r3, [r7, #6]
 8006276:	4618      	mov	r0, r3
 8006278:	f000 f806 	bl	8006288 <HAL_GPIO_EXTI_Callback>
  }
}
 800627c:	bf00      	nop
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	40010400 	.word	0x40010400

08006288 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	4603      	mov	r3, r0
 8006290:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006292:	bf00      	nop
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b082      	sub	sp, #8
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e08d      	b.n	80063cc <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d106      	bne.n	80062ca <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7fc fb47 	bl	8002958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2224      	movs	r2, #36	; 0x24
 80062ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 0201 	bic.w	r2, r2, #1
 80062e0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80062ee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062fe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d107      	bne.n	8006318 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006314:	609a      	str	r2, [r3, #8]
 8006316:	e006      	b.n	8006326 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006324:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	2b02      	cmp	r3, #2
 800632c:	d108      	bne.n	8006340 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800633c:	605a      	str	r2, [r3, #4]
 800633e:	e007      	b.n	8006350 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800634e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	6812      	ldr	r2, [r2, #0]
 800635a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800635e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006362:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68da      	ldr	r2, [r3, #12]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006372:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691a      	ldr	r2, [r3, #16]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	430a      	orrs	r2, r1
 800638c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	69d9      	ldr	r1, [r3, #28]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1a      	ldr	r2, [r3, #32]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f042 0201 	orr.w	r2, r2, #1
 80063ac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b088      	sub	sp, #32
 80063d8:	af02      	add	r7, sp, #8
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	4608      	mov	r0, r1
 80063de:	4611      	mov	r1, r2
 80063e0:	461a      	mov	r2, r3
 80063e2:	4603      	mov	r3, r0
 80063e4:	817b      	strh	r3, [r7, #10]
 80063e6:	460b      	mov	r3, r1
 80063e8:	813b      	strh	r3, [r7, #8]
 80063ea:	4613      	mov	r3, r2
 80063ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b20      	cmp	r3, #32
 80063f8:	f040 80f9 	bne.w	80065ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <HAL_I2C_Mem_Write+0x34>
 8006402:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006404:	2b00      	cmp	r3, #0
 8006406:	d105      	bne.n	8006414 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800640e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e0ed      	b.n	80065f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800641a:	2b01      	cmp	r3, #1
 800641c:	d101      	bne.n	8006422 <HAL_I2C_Mem_Write+0x4e>
 800641e:	2302      	movs	r3, #2
 8006420:	e0e6      	b.n	80065f0 <HAL_I2C_Mem_Write+0x21c>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800642a:	f7fc fcf1 	bl	8002e10 <HAL_GetTick>
 800642e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	2319      	movs	r3, #25
 8006436:	2201      	movs	r2, #1
 8006438:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 fac3 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e0d1      	b.n	80065f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2221      	movs	r2, #33	; 0x21
 8006450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2240      	movs	r2, #64	; 0x40
 8006458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6a3a      	ldr	r2, [r7, #32]
 8006466:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800646c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006474:	88f8      	ldrh	r0, [r7, #6]
 8006476:	893a      	ldrh	r2, [r7, #8]
 8006478:	8979      	ldrh	r1, [r7, #10]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	9301      	str	r3, [sp, #4]
 800647e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	4603      	mov	r3, r0
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 f9d3 	bl	8006830 <I2C_RequestMemoryWrite>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d005      	beq.n	800649c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e0a9      	b.n	80065f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	2bff      	cmp	r3, #255	; 0xff
 80064a4:	d90e      	bls.n	80064c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	22ff      	movs	r2, #255	; 0xff
 80064aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	8979      	ldrh	r1, [r7, #10]
 80064b4:	2300      	movs	r3, #0
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 fc47 	bl	8006d50 <I2C_TransferConfig>
 80064c2:	e00f      	b.n	80064e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	8979      	ldrh	r1, [r7, #10]
 80064d6:	2300      	movs	r3, #0
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 fc36 	bl	8006d50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 fac6 	bl	8006a7a <I2C_WaitOnTXISFlagUntilTimeout>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e07b      	b.n	80065f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	781a      	ldrb	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006512:	b29b      	uxth	r3, r3
 8006514:	3b01      	subs	r3, #1
 8006516:	b29a      	uxth	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006520:	3b01      	subs	r3, #1
 8006522:	b29a      	uxth	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d034      	beq.n	800659c <HAL_I2C_Mem_Write+0x1c8>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006536:	2b00      	cmp	r3, #0
 8006538:	d130      	bne.n	800659c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	2200      	movs	r2, #0
 8006542:	2180      	movs	r1, #128	; 0x80
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 fa3f 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e04d      	b.n	80065f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006558:	b29b      	uxth	r3, r3
 800655a:	2bff      	cmp	r3, #255	; 0xff
 800655c:	d90e      	bls.n	800657c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	22ff      	movs	r2, #255	; 0xff
 8006562:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006568:	b2da      	uxtb	r2, r3
 800656a:	8979      	ldrh	r1, [r7, #10]
 800656c:	2300      	movs	r3, #0
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 fbeb 	bl	8006d50 <I2C_TransferConfig>
 800657a:	e00f      	b.n	800659c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800658a:	b2da      	uxtb	r2, r3
 800658c:	8979      	ldrh	r1, [r7, #10]
 800658e:	2300      	movs	r3, #0
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 fbda 	bl	8006d50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d19e      	bne.n	80064e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 faac 	bl	8006b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e01a      	b.n	80065f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2220      	movs	r2, #32
 80065c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6859      	ldr	r1, [r3, #4]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <HAL_I2C_Mem_Write+0x224>)
 80065ce:	400b      	ands	r3, r1
 80065d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2220      	movs	r2, #32
 80065d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	e000      	b.n	80065f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80065ee:	2302      	movs	r3, #2
  }
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	fe00e800 	.word	0xfe00e800

080065fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af02      	add	r7, sp, #8
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	4608      	mov	r0, r1
 8006606:	4611      	mov	r1, r2
 8006608:	461a      	mov	r2, r3
 800660a:	4603      	mov	r3, r0
 800660c:	817b      	strh	r3, [r7, #10]
 800660e:	460b      	mov	r3, r1
 8006610:	813b      	strh	r3, [r7, #8]
 8006612:	4613      	mov	r3, r2
 8006614:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b20      	cmp	r3, #32
 8006620:	f040 80fd 	bne.w	800681e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <HAL_I2C_Mem_Read+0x34>
 800662a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800662c:	2b00      	cmp	r3, #0
 800662e:	d105      	bne.n	800663c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006636:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e0f1      	b.n	8006820 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006642:	2b01      	cmp	r3, #1
 8006644:	d101      	bne.n	800664a <HAL_I2C_Mem_Read+0x4e>
 8006646:	2302      	movs	r3, #2
 8006648:	e0ea      	b.n	8006820 <HAL_I2C_Mem_Read+0x224>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006652:	f7fc fbdd 	bl	8002e10 <HAL_GetTick>
 8006656:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	2319      	movs	r3, #25
 800665e:	2201      	movs	r2, #1
 8006660:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 f9af 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e0d5      	b.n	8006820 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2222      	movs	r2, #34	; 0x22
 8006678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2240      	movs	r2, #64	; 0x40
 8006680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6a3a      	ldr	r2, [r7, #32]
 800668e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006694:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800669c:	88f8      	ldrh	r0, [r7, #6]
 800669e:	893a      	ldrh	r2, [r7, #8]
 80066a0:	8979      	ldrh	r1, [r7, #10]
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	9301      	str	r3, [sp, #4]
 80066a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	4603      	mov	r3, r0
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 f913 	bl	80068d8 <I2C_RequestMemoryRead>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d005      	beq.n	80066c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e0ad      	b.n	8006820 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	2bff      	cmp	r3, #255	; 0xff
 80066cc:	d90e      	bls.n	80066ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	22ff      	movs	r2, #255	; 0xff
 80066d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	8979      	ldrh	r1, [r7, #10]
 80066dc:	4b52      	ldr	r3, [pc, #328]	; (8006828 <HAL_I2C_Mem_Read+0x22c>)
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 fb33 	bl	8006d50 <I2C_TransferConfig>
 80066ea:	e00f      	b.n	800670c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	8979      	ldrh	r1, [r7, #10]
 80066fe:	4b4a      	ldr	r3, [pc, #296]	; (8006828 <HAL_I2C_Mem_Read+0x22c>)
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 fb22 	bl	8006d50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006712:	2200      	movs	r2, #0
 8006714:	2104      	movs	r1, #4
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 f956 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e07c      	b.n	8006820 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	b2d2      	uxtb	r2, r2
 8006732:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006742:	3b01      	subs	r3, #1
 8006744:	b29a      	uxth	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800674e:	b29b      	uxth	r3, r3
 8006750:	3b01      	subs	r3, #1
 8006752:	b29a      	uxth	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800675c:	b29b      	uxth	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d034      	beq.n	80067cc <HAL_I2C_Mem_Read+0x1d0>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006766:	2b00      	cmp	r3, #0
 8006768:	d130      	bne.n	80067cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006770:	2200      	movs	r2, #0
 8006772:	2180      	movs	r1, #128	; 0x80
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 f927 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e04d      	b.n	8006820 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006788:	b29b      	uxth	r3, r3
 800678a:	2bff      	cmp	r3, #255	; 0xff
 800678c:	d90e      	bls.n	80067ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	22ff      	movs	r2, #255	; 0xff
 8006792:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006798:	b2da      	uxtb	r2, r3
 800679a:	8979      	ldrh	r1, [r7, #10]
 800679c:	2300      	movs	r3, #0
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 fad3 	bl	8006d50 <I2C_TransferConfig>
 80067aa:	e00f      	b.n	80067cc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	8979      	ldrh	r1, [r7, #10]
 80067be:	2300      	movs	r3, #0
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 fac2 	bl	8006d50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d19a      	bne.n	800670c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 f994 	bl	8006b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e01a      	b.n	8006820 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2220      	movs	r2, #32
 80067f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6859      	ldr	r1, [r3, #4]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	4b0b      	ldr	r3, [pc, #44]	; (800682c <HAL_I2C_Mem_Read+0x230>)
 80067fe:	400b      	ands	r3, r1
 8006800:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2220      	movs	r2, #32
 8006806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	e000      	b.n	8006820 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800681e:	2302      	movs	r3, #2
  }
}
 8006820:	4618      	mov	r0, r3
 8006822:	3718      	adds	r7, #24
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	80002400 	.word	0x80002400
 800682c:	fe00e800 	.word	0xfe00e800

08006830 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af02      	add	r7, sp, #8
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	4608      	mov	r0, r1
 800683a:	4611      	mov	r1, r2
 800683c:	461a      	mov	r2, r3
 800683e:	4603      	mov	r3, r0
 8006840:	817b      	strh	r3, [r7, #10]
 8006842:	460b      	mov	r3, r1
 8006844:	813b      	strh	r3, [r7, #8]
 8006846:	4613      	mov	r3, r2
 8006848:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800684a:	88fb      	ldrh	r3, [r7, #6]
 800684c:	b2da      	uxtb	r2, r3
 800684e:	8979      	ldrh	r1, [r7, #10]
 8006850:	4b20      	ldr	r3, [pc, #128]	; (80068d4 <I2C_RequestMemoryWrite+0xa4>)
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f000 fa79 	bl	8006d50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800685e:	69fa      	ldr	r2, [r7, #28]
 8006860:	69b9      	ldr	r1, [r7, #24]
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f000 f909 	bl	8006a7a <I2C_WaitOnTXISFlagUntilTimeout>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e02c      	b.n	80068cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006872:	88fb      	ldrh	r3, [r7, #6]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d105      	bne.n	8006884 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006878:	893b      	ldrh	r3, [r7, #8]
 800687a:	b2da      	uxtb	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	629a      	str	r2, [r3, #40]	; 0x28
 8006882:	e015      	b.n	80068b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006884:	893b      	ldrh	r3, [r7, #8]
 8006886:	0a1b      	lsrs	r3, r3, #8
 8006888:	b29b      	uxth	r3, r3
 800688a:	b2da      	uxtb	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006892:	69fa      	ldr	r2, [r7, #28]
 8006894:	69b9      	ldr	r1, [r7, #24]
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 f8ef 	bl	8006a7a <I2C_WaitOnTXISFlagUntilTimeout>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e012      	b.n	80068cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80068a6:	893b      	ldrh	r3, [r7, #8]
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	2200      	movs	r2, #0
 80068b8:	2180      	movs	r1, #128	; 0x80
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 f884 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e000      	b.n	80068cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	80002000 	.word	0x80002000

080068d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af02      	add	r7, sp, #8
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	4608      	mov	r0, r1
 80068e2:	4611      	mov	r1, r2
 80068e4:	461a      	mov	r2, r3
 80068e6:	4603      	mov	r3, r0
 80068e8:	817b      	strh	r3, [r7, #10]
 80068ea:	460b      	mov	r3, r1
 80068ec:	813b      	strh	r3, [r7, #8]
 80068ee:	4613      	mov	r3, r2
 80068f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80068f2:	88fb      	ldrh	r3, [r7, #6]
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	8979      	ldrh	r1, [r7, #10]
 80068f8:	4b20      	ldr	r3, [pc, #128]	; (800697c <I2C_RequestMemoryRead+0xa4>)
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	2300      	movs	r3, #0
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 fa26 	bl	8006d50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006904:	69fa      	ldr	r2, [r7, #28]
 8006906:	69b9      	ldr	r1, [r7, #24]
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 f8b6 	bl	8006a7a <I2C_WaitOnTXISFlagUntilTimeout>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e02c      	b.n	8006972 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006918:	88fb      	ldrh	r3, [r7, #6]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d105      	bne.n	800692a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800691e:	893b      	ldrh	r3, [r7, #8]
 8006920:	b2da      	uxtb	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	629a      	str	r2, [r3, #40]	; 0x28
 8006928:	e015      	b.n	8006956 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800692a:	893b      	ldrh	r3, [r7, #8]
 800692c:	0a1b      	lsrs	r3, r3, #8
 800692e:	b29b      	uxth	r3, r3
 8006930:	b2da      	uxtb	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006938:	69fa      	ldr	r2, [r7, #28]
 800693a:	69b9      	ldr	r1, [r7, #24]
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 f89c 	bl	8006a7a <I2C_WaitOnTXISFlagUntilTimeout>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e012      	b.n	8006972 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800694c:	893b      	ldrh	r3, [r7, #8]
 800694e:	b2da      	uxtb	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	2200      	movs	r2, #0
 800695e:	2140      	movs	r1, #64	; 0x40
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 f831 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e000      	b.n	8006972 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	80002000 	.word	0x80002000

08006980 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b02      	cmp	r3, #2
 8006994:	d103      	bne.n	800699e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2200      	movs	r2, #0
 800699c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d007      	beq.n	80069bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	699a      	ldr	r2, [r3, #24]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f042 0201 	orr.w	r2, r2, #1
 80069ba:	619a      	str	r2, [r3, #24]
  }
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	603b      	str	r3, [r7, #0]
 80069d4:	4613      	mov	r3, r2
 80069d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069d8:	e03b      	b.n	8006a52 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80069da:	69ba      	ldr	r2, [r7, #24]
 80069dc:	6839      	ldr	r1, [r7, #0]
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 f8d6 	bl	8006b90 <I2C_IsErrorOccurred>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e041      	b.n	8006a72 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f4:	d02d      	beq.n	8006a52 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069f6:	f7fc fa0b 	bl	8002e10 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d302      	bcc.n	8006a0c <I2C_WaitOnFlagUntilTimeout+0x44>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d122      	bne.n	8006a52 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699a      	ldr	r2, [r3, #24]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	4013      	ands	r3, r2
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	bf0c      	ite	eq
 8006a1c:	2301      	moveq	r3, #1
 8006a1e:	2300      	movne	r3, #0
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	461a      	mov	r2, r3
 8006a24:	79fb      	ldrb	r3, [r7, #7]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d113      	bne.n	8006a52 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2e:	f043 0220 	orr.w	r2, r3, #32
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e00f      	b.n	8006a72 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	699a      	ldr	r2, [r3, #24]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	bf0c      	ite	eq
 8006a62:	2301      	moveq	r3, #1
 8006a64:	2300      	movne	r3, #0
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	461a      	mov	r2, r3
 8006a6a:	79fb      	ldrb	r3, [r7, #7]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d0b4      	beq.n	80069da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a86:	e033      	b.n	8006af0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	68b9      	ldr	r1, [r7, #8]
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 f87f 	bl	8006b90 <I2C_IsErrorOccurred>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e031      	b.n	8006b00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa2:	d025      	beq.n	8006af0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aa4:	f7fc f9b4 	bl	8002e10 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d302      	bcc.n	8006aba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d11a      	bne.n	8006af0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	f003 0302 	and.w	r3, r3, #2
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d013      	beq.n	8006af0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006acc:	f043 0220 	orr.w	r2, r3, #32
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e007      	b.n	8006b00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	f003 0302 	and.w	r3, r3, #2
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d1c4      	bne.n	8006a88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b14:	e02f      	b.n	8006b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	68b9      	ldr	r1, [r7, #8]
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f000 f838 	bl	8006b90 <I2C_IsErrorOccurred>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e02d      	b.n	8006b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b2a:	f7fc f971 	bl	8002e10 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d302      	bcc.n	8006b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d11a      	bne.n	8006b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	f003 0320 	and.w	r3, r3, #32
 8006b4a:	2b20      	cmp	r3, #32
 8006b4c:	d013      	beq.n	8006b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b52:	f043 0220 	orr.w	r2, r3, #32
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e007      	b.n	8006b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	f003 0320 	and.w	r3, r3, #32
 8006b80:	2b20      	cmp	r3, #32
 8006b82:	d1c8      	bne.n	8006b16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
	...

08006b90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b08a      	sub	sp, #40	; 0x28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006baa:	2300      	movs	r3, #0
 8006bac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	f003 0310 	and.w	r3, r3, #16
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d068      	beq.n	8006c8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2210      	movs	r2, #16
 8006bc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006bc4:	e049      	b.n	8006c5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bcc:	d045      	beq.n	8006c5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006bce:	f7fc f91f 	bl	8002e10 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d302      	bcc.n	8006be4 <I2C_IsErrorOccurred+0x54>
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d13a      	bne.n	8006c5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bf6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c06:	d121      	bne.n	8006c4c <I2C_IsErrorOccurred+0xbc>
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c0e:	d01d      	beq.n	8006c4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006c10:	7cfb      	ldrb	r3, [r7, #19]
 8006c12:	2b20      	cmp	r3, #32
 8006c14:	d01a      	beq.n	8006c4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006c26:	f7fc f8f3 	bl	8002e10 <HAL_GetTick>
 8006c2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c2c:	e00e      	b.n	8006c4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006c2e:	f7fc f8ef 	bl	8002e10 <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	2b19      	cmp	r3, #25
 8006c3a:	d907      	bls.n	8006c4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	f043 0320 	orr.w	r3, r3, #32
 8006c42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006c4a:	e006      	b.n	8006c5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	f003 0320 	and.w	r3, r3, #32
 8006c56:	2b20      	cmp	r3, #32
 8006c58:	d1e9      	bne.n	8006c2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	f003 0320 	and.w	r3, r3, #32
 8006c64:	2b20      	cmp	r3, #32
 8006c66:	d003      	beq.n	8006c70 <I2C_IsErrorOccurred+0xe0>
 8006c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d0aa      	beq.n	8006bc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006c70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d103      	bne.n	8006c80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	f043 0304 	orr.w	r3, r3, #4
 8006c86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00b      	beq.n	8006cb8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	f043 0301 	orr.w	r3, r3, #1
 8006ca6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00b      	beq.n	8006cda <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	f043 0308 	orr.w	r3, r3, #8
 8006cc8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00b      	beq.n	8006cfc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	f043 0302 	orr.w	r3, r3, #2
 8006cea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cf4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d01c      	beq.n	8006d3e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f7ff fe3b 	bl	8006980 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	6859      	ldr	r1, [r3, #4]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	4b0d      	ldr	r3, [pc, #52]	; (8006d4c <I2C_IsErrorOccurred+0x1bc>)
 8006d16:	400b      	ands	r3, r1
 8006d18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d1e:	6a3b      	ldr	r3, [r7, #32]
 8006d20:	431a      	orrs	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3728      	adds	r7, #40	; 0x28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	fe00e800 	.word	0xfe00e800

08006d50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b087      	sub	sp, #28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	607b      	str	r3, [r7, #4]
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	817b      	strh	r3, [r7, #10]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006d62:	897b      	ldrh	r3, [r7, #10]
 8006d64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006d68:	7a7b      	ldrb	r3, [r7, #9]
 8006d6a:	041b      	lsls	r3, r3, #16
 8006d6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006d70:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d7e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	0d5b      	lsrs	r3, r3, #21
 8006d8a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006d8e:	4b08      	ldr	r3, [pc, #32]	; (8006db0 <I2C_TransferConfig+0x60>)
 8006d90:	430b      	orrs	r3, r1
 8006d92:	43db      	mvns	r3, r3
 8006d94:	ea02 0103 	and.w	r1, r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006da2:	bf00      	nop
 8006da4:	371c      	adds	r7, #28
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	03ff63ff 	.word	0x03ff63ff

08006db4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b20      	cmp	r3, #32
 8006dc8:	d138      	bne.n	8006e3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d101      	bne.n	8006dd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	e032      	b.n	8006e3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2224      	movs	r2, #36	; 0x24
 8006de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f022 0201 	bic.w	r2, r2, #1
 8006df6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6819      	ldr	r1, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	430a      	orrs	r2, r1
 8006e16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f042 0201 	orr.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	e000      	b.n	8006e3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e3c:	2302      	movs	r3, #2
  }
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b085      	sub	sp, #20
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b20      	cmp	r3, #32
 8006e5e:	d139      	bne.n	8006ed4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d101      	bne.n	8006e6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	e033      	b.n	8006ed6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2224      	movs	r2, #36	; 0x24
 8006e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 0201 	bic.w	r2, r2, #1
 8006e8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	021b      	lsls	r3, r3, #8
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f042 0201 	orr.w	r2, r2, #1
 8006ebe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	e000      	b.n	8006ed6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006ed4:	2302      	movs	r3, #2
  }
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b084      	sub	sp, #16
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d101      	bne.n	8006ef4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e0c0      	b.n	8007076 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d106      	bne.n	8006f0e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f007 fb01 	bl	800e510 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2203      	movs	r2, #3
 8006f12:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f003 f92d 	bl	800a17a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f20:	2300      	movs	r3, #0
 8006f22:	73fb      	strb	r3, [r7, #15]
 8006f24:	e03e      	b.n	8006fa4 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006f26:	7bfa      	ldrb	r2, [r7, #15]
 8006f28:	6879      	ldr	r1, [r7, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	00db      	lsls	r3, r3, #3
 8006f32:	440b      	add	r3, r1
 8006f34:	3311      	adds	r3, #17
 8006f36:	2201      	movs	r2, #1
 8006f38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006f3a:	7bfa      	ldrb	r2, [r7, #15]
 8006f3c:	6879      	ldr	r1, [r7, #4]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	00db      	lsls	r3, r3, #3
 8006f46:	440b      	add	r3, r1
 8006f48:	3310      	adds	r3, #16
 8006f4a:	7bfa      	ldrb	r2, [r7, #15]
 8006f4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006f4e:	7bfa      	ldrb	r2, [r7, #15]
 8006f50:	6879      	ldr	r1, [r7, #4]
 8006f52:	4613      	mov	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	00db      	lsls	r3, r3, #3
 8006f5a:	440b      	add	r3, r1
 8006f5c:	3313      	adds	r3, #19
 8006f5e:	2200      	movs	r2, #0
 8006f60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006f62:	7bfa      	ldrb	r2, [r7, #15]
 8006f64:	6879      	ldr	r1, [r7, #4]
 8006f66:	4613      	mov	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	00db      	lsls	r3, r3, #3
 8006f6e:	440b      	add	r3, r1
 8006f70:	3320      	adds	r3, #32
 8006f72:	2200      	movs	r2, #0
 8006f74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006f76:	7bfa      	ldrb	r2, [r7, #15]
 8006f78:	6879      	ldr	r1, [r7, #4]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	00db      	lsls	r3, r3, #3
 8006f82:	440b      	add	r3, r1
 8006f84:	3324      	adds	r3, #36	; 0x24
 8006f86:	2200      	movs	r2, #0
 8006f88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
 8006f8c:	6879      	ldr	r1, [r7, #4]
 8006f8e:	1c5a      	adds	r2, r3, #1
 8006f90:	4613      	mov	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	440b      	add	r3, r1
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f9e:	7bfb      	ldrb	r3, [r7, #15]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	73fb      	strb	r3, [r7, #15]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	791b      	ldrb	r3, [r3, #4]
 8006fa8:	7bfa      	ldrb	r2, [r7, #15]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d3bb      	bcc.n	8006f26 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fae:	2300      	movs	r3, #0
 8006fb0:	73fb      	strb	r3, [r7, #15]
 8006fb2:	e044      	b.n	800703e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006fb4:	7bfa      	ldrb	r2, [r7, #15]
 8006fb6:	6879      	ldr	r1, [r7, #4]
 8006fb8:	4613      	mov	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	00db      	lsls	r3, r3, #3
 8006fc0:	440b      	add	r3, r1
 8006fc2:	f203 1351 	addw	r3, r3, #337	; 0x151
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006fca:	7bfa      	ldrb	r2, [r7, #15]
 8006fcc:	6879      	ldr	r1, [r7, #4]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	4413      	add	r3, r2
 8006fd4:	00db      	lsls	r3, r3, #3
 8006fd6:	440b      	add	r3, r1
 8006fd8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fdc:	7bfa      	ldrb	r2, [r7, #15]
 8006fde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006fe0:	7bfa      	ldrb	r2, [r7, #15]
 8006fe2:	6879      	ldr	r1, [r7, #4]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	00db      	lsls	r3, r3, #3
 8006fec:	440b      	add	r3, r1
 8006fee:	f203 1353 	addw	r3, r3, #339	; 0x153
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006ff6:	7bfa      	ldrb	r2, [r7, #15]
 8006ff8:	6879      	ldr	r1, [r7, #4]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	00db      	lsls	r3, r3, #3
 8007002:	440b      	add	r3, r1
 8007004:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8007008:	2200      	movs	r2, #0
 800700a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800700c:	7bfa      	ldrb	r2, [r7, #15]
 800700e:	6879      	ldr	r1, [r7, #4]
 8007010:	4613      	mov	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	00db      	lsls	r3, r3, #3
 8007018:	440b      	add	r3, r1
 800701a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800701e:	2200      	movs	r2, #0
 8007020:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007022:	7bfa      	ldrb	r2, [r7, #15]
 8007024:	6879      	ldr	r1, [r7, #4]
 8007026:	4613      	mov	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	00db      	lsls	r3, r3, #3
 800702e:	440b      	add	r3, r1
 8007030:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007034:	2200      	movs	r2, #0
 8007036:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007038:	7bfb      	ldrb	r3, [r7, #15]
 800703a:	3301      	adds	r3, #1
 800703c:	73fb      	strb	r3, [r7, #15]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	791b      	ldrb	r3, [r3, #4]
 8007042:	7bfa      	ldrb	r2, [r7, #15]
 8007044:	429a      	cmp	r2, r3
 8007046:	d3b5      	bcc.n	8006fb4 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6818      	ldr	r0, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	3304      	adds	r3, #4
 8007050:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007054:	f003 f8ac 	bl	800a1b0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	7a9b      	ldrb	r3, [r3, #10]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d102      	bne.n	8007074 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f001 fc41 	bl	80088f6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b082      	sub	sp, #8
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800708c:	2b01      	cmp	r3, #1
 800708e:	d101      	bne.n	8007094 <HAL_PCD_Start+0x16>
 8007090:	2302      	movs	r3, #2
 8007092:	e012      	b.n	80070ba <HAL_PCD_Start+0x3c>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f003 f853 	bl	800a14c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f005 fb13 	bl	800c6d6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b084      	sub	sp, #16
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f005 fb18 	bl	800c704 <USB_ReadInterrupts>
 80070d4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d003      	beq.n	80070e8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fb04 	bl	80076ee <PCD_EP_ISR_Handler>

    return;
 80070e6:	e110      	b.n	800730a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d013      	beq.n	800711a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007104:	b292      	uxth	r2, r2
 8007106:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f007 fa99 	bl	800e642 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007110:	2100      	movs	r1, #0
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f8fc 	bl	8007310 <HAL_PCD_SetAddress>

    return;
 8007118:	e0f7      	b.n	800730a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00c      	beq.n	800713e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800712c:	b29a      	uxth	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007136:	b292      	uxth	r2, r2
 8007138:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800713c:	e0e5      	b.n	800730a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00c      	beq.n	8007162 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007150:	b29a      	uxth	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800715a:	b292      	uxth	r2, r2
 800715c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007160:	e0d3      	b.n	800730a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d034      	beq.n	80071d6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007174:	b29a      	uxth	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 0204 	bic.w	r2, r2, #4
 800717e:	b292      	uxth	r2, r2
 8007180:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800718c:	b29a      	uxth	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 0208 	bic.w	r2, r2, #8
 8007196:	b292      	uxth	r2, r2
 8007198:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d107      	bne.n	80071b6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80071ae:	2100      	movs	r1, #0
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f007 fc39 	bl	800ea28 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f007 fa7c 	bl	800e6b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80071ce:	b292      	uxth	r2, r2
 80071d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80071d4:	e099      	b.n	800730a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d027      	beq.n	8007230 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f042 0208 	orr.w	r2, r2, #8
 80071f2:	b292      	uxth	r2, r2
 80071f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007200:	b29a      	uxth	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800720a:	b292      	uxth	r2, r2
 800720c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007218:	b29a      	uxth	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f042 0204 	orr.w	r2, r2, #4
 8007222:	b292      	uxth	r2, r2
 8007224:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f007 fa29 	bl	800e680 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800722e:	e06c      	b.n	800730a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007236:	2b00      	cmp	r3, #0
 8007238:	d040      	beq.n	80072bc <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007242:	b29a      	uxth	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800724c:	b292      	uxth	r2, r2
 800724e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8007258:	2b00      	cmp	r3, #0
 800725a:	d12b      	bne.n	80072b4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007264:	b29a      	uxth	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0204 	orr.w	r2, r2, #4
 800726e:	b292      	uxth	r2, r2
 8007270:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800727c:	b29a      	uxth	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f042 0208 	orr.w	r2, r2, #8
 8007286:	b292      	uxth	r2, r2
 8007288:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800729c:	b29b      	uxth	r3, r3
 800729e:	089b      	lsrs	r3, r3, #2
 80072a0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80072aa:	2101      	movs	r1, #1
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f007 fbbb 	bl	800ea28 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80072b2:	e02a      	b.n	800730a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f007 f9e3 	bl	800e680 <HAL_PCD_SuspendCallback>
    return;
 80072ba:	e026      	b.n	800730a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00f      	beq.n	80072e6 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80072d8:	b292      	uxth	r2, r2
 80072da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f007 f9a1 	bl	800e626 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80072e4:	e011      	b.n	800730a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00c      	beq.n	800730a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007302:	b292      	uxth	r2, r2
 8007304:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007308:	bf00      	nop
  }
}
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8007322:	2b01      	cmp	r3, #1
 8007324:	d101      	bne.n	800732a <HAL_PCD_SetAddress+0x1a>
 8007326:	2302      	movs	r3, #2
 8007328:	e012      	b.n	8007350 <HAL_PCD_SetAddress+0x40>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	78fa      	ldrb	r2, [r7, #3]
 8007336:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	78fa      	ldrb	r2, [r7, #3]
 800733e:	4611      	mov	r1, r2
 8007340:	4618      	mov	r0, r3
 8007342:	f005 f9b4 	bl	800c6ae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	4608      	mov	r0, r1
 8007362:	4611      	mov	r1, r2
 8007364:	461a      	mov	r2, r3
 8007366:	4603      	mov	r3, r0
 8007368:	70fb      	strb	r3, [r7, #3]
 800736a:	460b      	mov	r3, r1
 800736c:	803b      	strh	r3, [r7, #0]
 800736e:	4613      	mov	r3, r2
 8007370:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007376:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800737a:	2b00      	cmp	r3, #0
 800737c:	da0e      	bge.n	800739c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800737e:	78fb      	ldrb	r3, [r7, #3]
 8007380:	f003 0207 	and.w	r2, r3, #7
 8007384:	4613      	mov	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	00db      	lsls	r3, r3, #3
 800738c:	3310      	adds	r3, #16
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	4413      	add	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2201      	movs	r2, #1
 8007398:	705a      	strb	r2, [r3, #1]
 800739a:	e00e      	b.n	80073ba <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800739c:	78fb      	ldrb	r3, [r7, #3]
 800739e:	f003 0207 	and.w	r2, r3, #7
 80073a2:	4613      	mov	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	00db      	lsls	r3, r3, #3
 80073aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	4413      	add	r3, r2
 80073b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80073ba:	78fb      	ldrb	r3, [r7, #3]
 80073bc:	f003 0307 	and.w	r3, r3, #7
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80073c6:	883a      	ldrh	r2, [r7, #0]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	78ba      	ldrb	r2, [r7, #2]
 80073d0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80073d2:	78bb      	ldrb	r3, [r7, #2]
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d102      	bne.n	80073de <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d101      	bne.n	80073ec <HAL_PCD_EP_Open+0x94>
 80073e8:	2302      	movs	r3, #2
 80073ea:	e00e      	b.n	800740a <HAL_PCD_EP_Open+0xb2>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68f9      	ldr	r1, [r7, #12]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f002 fef6 	bl	800a1ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8007408:	7afb      	ldrb	r3, [r7, #11]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b084      	sub	sp, #16
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	460b      	mov	r3, r1
 800741c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800741e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007422:	2b00      	cmp	r3, #0
 8007424:	da0e      	bge.n	8007444 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007426:	78fb      	ldrb	r3, [r7, #3]
 8007428:	f003 0207 	and.w	r2, r3, #7
 800742c:	4613      	mov	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	00db      	lsls	r3, r3, #3
 8007434:	3310      	adds	r3, #16
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	4413      	add	r3, r2
 800743a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2201      	movs	r2, #1
 8007440:	705a      	strb	r2, [r3, #1]
 8007442:	e00e      	b.n	8007462 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007444:	78fb      	ldrb	r3, [r7, #3]
 8007446:	f003 0207 	and.w	r2, r3, #7
 800744a:	4613      	mov	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4413      	add	r3, r2
 8007450:	00db      	lsls	r3, r3, #3
 8007452:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	4413      	add	r3, r2
 800745a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007462:	78fb      	ldrb	r3, [r7, #3]
 8007464:	f003 0307 	and.w	r3, r3, #7
 8007468:	b2da      	uxtb	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8007474:	2b01      	cmp	r3, #1
 8007476:	d101      	bne.n	800747c <HAL_PCD_EP_Close+0x6a>
 8007478:	2302      	movs	r3, #2
 800747a:	e00e      	b.n	800749a <HAL_PCD_EP_Close+0x88>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68f9      	ldr	r1, [r7, #12]
 800748a:	4618      	mov	r0, r3
 800748c:	f003 fa72 	bl	800a974 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b086      	sub	sp, #24
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	607a      	str	r2, [r7, #4]
 80074ac:	603b      	str	r3, [r7, #0]
 80074ae:	460b      	mov	r3, r1
 80074b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074b2:	7afb      	ldrb	r3, [r7, #11]
 80074b4:	f003 0207 	and.w	r2, r3, #7
 80074b8:	4613      	mov	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	00db      	lsls	r3, r3, #3
 80074c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	4413      	add	r3, r2
 80074c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	2200      	movs	r2, #0
 80074da:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	2200      	movs	r2, #0
 80074e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80074e2:	7afb      	ldrb	r3, [r7, #11]
 80074e4:	f003 0307 	and.w	r3, r3, #7
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6979      	ldr	r1, [r7, #20]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f003 fc2a 	bl	800ad4e <USB_EPStartXfer>

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3718      	adds	r7, #24
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	460b      	mov	r3, r1
 800750e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007510:	78fb      	ldrb	r3, [r7, #3]
 8007512:	f003 0207 	and.w	r2, r3, #7
 8007516:	6879      	ldr	r1, [r7, #4]
 8007518:	4613      	mov	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	00db      	lsls	r3, r3, #3
 8007520:	440b      	add	r3, r1
 8007522:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8007526:	681b      	ldr	r3, [r3, #0]
}
 8007528:	4618      	mov	r0, r3
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	607a      	str	r2, [r7, #4]
 800753e:	603b      	str	r3, [r7, #0]
 8007540:	460b      	mov	r3, r1
 8007542:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007544:	7afb      	ldrb	r3, [r7, #11]
 8007546:	f003 0207 	and.w	r2, r3, #7
 800754a:	4613      	mov	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	00db      	lsls	r3, r3, #3
 8007552:	3310      	adds	r3, #16
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	4413      	add	r3, r2
 8007558:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	2200      	movs	r2, #0
 8007578:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2201      	movs	r2, #1
 800757e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007580:	7afb      	ldrb	r3, [r7, #11]
 8007582:	f003 0307 	and.w	r3, r3, #7
 8007586:	b2da      	uxtb	r2, r3
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6979      	ldr	r1, [r7, #20]
 8007592:	4618      	mov	r0, r3
 8007594:	f003 fbdb 	bl	800ad4e <USB_EPStartXfer>

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b084      	sub	sp, #16
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	460b      	mov	r3, r1
 80075ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80075ae:	78fb      	ldrb	r3, [r7, #3]
 80075b0:	f003 0307 	and.w	r3, r3, #7
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	7912      	ldrb	r2, [r2, #4]
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d901      	bls.n	80075c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e03e      	b.n	800763e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80075c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	da0e      	bge.n	80075e6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075c8:	78fb      	ldrb	r3, [r7, #3]
 80075ca:	f003 0207 	and.w	r2, r3, #7
 80075ce:	4613      	mov	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4413      	add	r3, r2
 80075d4:	00db      	lsls	r3, r3, #3
 80075d6:	3310      	adds	r3, #16
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	4413      	add	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2201      	movs	r2, #1
 80075e2:	705a      	strb	r2, [r3, #1]
 80075e4:	e00c      	b.n	8007600 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80075e6:	78fa      	ldrb	r2, [r7, #3]
 80075e8:	4613      	mov	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	00db      	lsls	r3, r3, #3
 80075f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	4413      	add	r3, r2
 80075f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2201      	movs	r2, #1
 8007604:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007606:	78fb      	ldrb	r3, [r7, #3]
 8007608:	f003 0307 	and.w	r3, r3, #7
 800760c:	b2da      	uxtb	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8007618:	2b01      	cmp	r3, #1
 800761a:	d101      	bne.n	8007620 <HAL_PCD_EP_SetStall+0x7e>
 800761c:	2302      	movs	r3, #2
 800761e:	e00e      	b.n	800763e <HAL_PCD_EP_SetStall+0x9c>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68f9      	ldr	r1, [r7, #12]
 800762e:	4618      	mov	r0, r3
 8007630:	f004 ff3e 	bl	800c4b0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	460b      	mov	r3, r1
 8007650:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007652:	78fb      	ldrb	r3, [r7, #3]
 8007654:	f003 030f 	and.w	r3, r3, #15
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	7912      	ldrb	r2, [r2, #4]
 800765c:	4293      	cmp	r3, r2
 800765e:	d901      	bls.n	8007664 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e040      	b.n	80076e6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007668:	2b00      	cmp	r3, #0
 800766a:	da0e      	bge.n	800768a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800766c:	78fb      	ldrb	r3, [r7, #3]
 800766e:	f003 0207 	and.w	r2, r3, #7
 8007672:	4613      	mov	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	00db      	lsls	r3, r3, #3
 800767a:	3310      	adds	r3, #16
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	4413      	add	r3, r2
 8007680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2201      	movs	r2, #1
 8007686:	705a      	strb	r2, [r3, #1]
 8007688:	e00e      	b.n	80076a8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800768a:	78fb      	ldrb	r3, [r7, #3]
 800768c:	f003 0207 	and.w	r2, r3, #7
 8007690:	4613      	mov	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	00db      	lsls	r3, r3, #3
 8007698:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	4413      	add	r3, r2
 80076a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80076ae:	78fb      	ldrb	r3, [r7, #3]
 80076b0:	f003 0307 	and.w	r3, r3, #7
 80076b4:	b2da      	uxtb	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d101      	bne.n	80076c8 <HAL_PCD_EP_ClrStall+0x82>
 80076c4:	2302      	movs	r3, #2
 80076c6:	e00e      	b.n	80076e6 <HAL_PCD_EP_ClrStall+0xa0>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68f9      	ldr	r1, [r7, #12]
 80076d6:	4618      	mov	r0, r3
 80076d8:	f004 ff3b 	bl	800c552 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b096      	sub	sp, #88	; 0x58
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80076f6:	e3ae      	b.n	8007e56 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007700:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007704:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007708:	b2db      	uxtb	r3, r3
 800770a:	f003 030f 	and.w	r3, r3, #15
 800770e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8007712:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007716:	2b00      	cmp	r3, #0
 8007718:	f040 8170 	bne.w	80079fc <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800771c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007720:	f003 0310 	and.w	r3, r3, #16
 8007724:	2b00      	cmp	r3, #0
 8007726:	d14d      	bne.n	80077c4 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	b29b      	uxth	r3, r3
 8007730:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007738:	81fb      	strh	r3, [r7, #14]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	89fb      	ldrh	r3, [r7, #14]
 8007740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007748:	b29b      	uxth	r3, r3
 800774a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	3310      	adds	r3, #16
 8007750:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800775a:	b29b      	uxth	r3, r3
 800775c:	461a      	mov	r2, r3
 800775e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	00db      	lsls	r3, r3, #3
 8007764:	4413      	add	r3, r2
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	6812      	ldr	r2, [r2, #0]
 800776a:	4413      	add	r3, r2
 800776c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007770:	881b      	ldrh	r3, [r3, #0]
 8007772:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007778:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800777a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800777c:	695a      	ldr	r2, [r3, #20]
 800777e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	441a      	add	r2, r3
 8007784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007786:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007788:	2100      	movs	r1, #0
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f006 ff31 	bl	800e5f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	7b1b      	ldrb	r3, [r3, #12]
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b00      	cmp	r3, #0
 8007798:	f000 835d 	beq.w	8007e56 <PCD_EP_ISR_Handler+0x768>
 800779c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f040 8358 	bne.w	8007e56 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	7b1b      	ldrb	r3, [r3, #12]
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	b292      	uxth	r2, r2
 80077b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	731a      	strb	r2, [r3, #12]
 80077c2:	e348      	b.n	8007e56 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077ca:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	881b      	ldrh	r3, [r3, #0]
 80077d2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80077d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80077da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d032      	beq.n	8007848 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	461a      	mov	r2, r3
 80077ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	00db      	lsls	r3, r3, #3
 80077f4:	4413      	add	r3, r2
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	6812      	ldr	r2, [r2, #0]
 80077fa:	4413      	add	r3, r2
 80077fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007808:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6818      	ldr	r0, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8007814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007816:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800781a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800781c:	b29b      	uxth	r3, r3
 800781e:	f004 ffc3 	bl	800c7a8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	881b      	ldrh	r3, [r3, #0]
 8007828:	b29a      	uxth	r2, r3
 800782a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800782e:	4013      	ands	r3, r2
 8007830:	823b      	strh	r3, [r7, #16]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	8a3a      	ldrh	r2, [r7, #16]
 8007838:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800783c:	b292      	uxth	r2, r2
 800783e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f006 fea9 	bl	800e598 <HAL_PCD_SetupStageCallback>
 8007846:	e306      	b.n	8007e56 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007848:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800784c:	2b00      	cmp	r3, #0
 800784e:	f280 8302 	bge.w	8007e56 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	881b      	ldrh	r3, [r3, #0]
 8007858:	b29a      	uxth	r2, r3
 800785a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800785e:	4013      	ands	r3, r2
 8007860:	83fb      	strh	r3, [r7, #30]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	8bfa      	ldrh	r2, [r7, #30]
 8007868:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800786c:	b292      	uxth	r2, r2
 800786e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007878:	b29b      	uxth	r3, r3
 800787a:	461a      	mov	r2, r3
 800787c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	00db      	lsls	r3, r3, #3
 8007882:	4413      	add	r3, r2
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	6812      	ldr	r2, [r2, #0]
 8007888:	4413      	add	r3, r2
 800788a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007896:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800789a:	69db      	ldr	r3, [r3, #28]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d019      	beq.n	80078d4 <PCD_EP_ISR_Handler+0x1e6>
 80078a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078a2:	695b      	ldr	r3, [r3, #20]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d015      	beq.n	80078d4 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6818      	ldr	r0, [r3, #0]
 80078ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078ae:	6959      	ldr	r1, [r3, #20]
 80078b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078b2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80078b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078b6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	f004 ff75 	bl	800c7a8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80078be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078c0:	695a      	ldr	r2, [r3, #20]
 80078c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	441a      	add	r2, r3
 80078c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078ca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80078cc:	2100      	movs	r1, #0
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f006 fe74 	bl	800e5bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80078de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80078e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f040 82b5 	bne.w	8007e56 <PCD_EP_ISR_Handler+0x768>
 80078ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80078f0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80078f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078f8:	f000 82ad 	beq.w	8007e56 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	61bb      	str	r3, [r7, #24]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800790a:	b29b      	uxth	r3, r3
 800790c:	461a      	mov	r2, r3
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	4413      	add	r3, r2
 8007912:	61bb      	str	r3, [r7, #24]
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800791a:	617b      	str	r3, [r7, #20]
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	881b      	ldrh	r3, [r3, #0]
 8007920:	b29b      	uxth	r3, r3
 8007922:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007926:	b29a      	uxth	r2, r3
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	801a      	strh	r2, [r3, #0]
 800792c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	2b3e      	cmp	r3, #62	; 0x3e
 8007932:	d91d      	bls.n	8007970 <PCD_EP_ISR_Handler+0x282>
 8007934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	095b      	lsrs	r3, r3, #5
 800793a:	647b      	str	r3, [r7, #68]	; 0x44
 800793c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	f003 031f 	and.w	r3, r3, #31
 8007944:	2b00      	cmp	r3, #0
 8007946:	d102      	bne.n	800794e <PCD_EP_ISR_Handler+0x260>
 8007948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800794a:	3b01      	subs	r3, #1
 800794c:	647b      	str	r3, [r7, #68]	; 0x44
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	881b      	ldrh	r3, [r3, #0]
 8007952:	b29a      	uxth	r2, r3
 8007954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007956:	b29b      	uxth	r3, r3
 8007958:	029b      	lsls	r3, r3, #10
 800795a:	b29b      	uxth	r3, r3
 800795c:	4313      	orrs	r3, r2
 800795e:	b29b      	uxth	r3, r3
 8007960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007968:	b29a      	uxth	r2, r3
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	801a      	strh	r2, [r3, #0]
 800796e:	e026      	b.n	80079be <PCD_EP_ISR_Handler+0x2d0>
 8007970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10a      	bne.n	800798e <PCD_EP_ISR_Handler+0x2a0>
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	b29b      	uxth	r3, r3
 800797e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007986:	b29a      	uxth	r2, r3
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	801a      	strh	r2, [r3, #0]
 800798c:	e017      	b.n	80079be <PCD_EP_ISR_Handler+0x2d0>
 800798e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	085b      	lsrs	r3, r3, #1
 8007994:	647b      	str	r3, [r7, #68]	; 0x44
 8007996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <PCD_EP_ISR_Handler+0x2ba>
 80079a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079a4:	3301      	adds	r3, #1
 80079a6:	647b      	str	r3, [r7, #68]	; 0x44
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	881b      	ldrh	r3, [r3, #0]
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	029b      	lsls	r3, r3, #10
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	4313      	orrs	r3, r2
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ce:	827b      	strh	r3, [r7, #18]
 80079d0:	8a7b      	ldrh	r3, [r7, #18]
 80079d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80079d6:	827b      	strh	r3, [r7, #18]
 80079d8:	8a7b      	ldrh	r3, [r7, #18]
 80079da:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80079de:	827b      	strh	r3, [r7, #18]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	8a7b      	ldrh	r3, [r7, #18]
 80079e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	8013      	strh	r3, [r2, #0]
 80079fa:	e22c      	b.n	8007e56 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	461a      	mov	r2, r3
 8007a02:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4413      	add	r3, r2
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007a10:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f280 80f6 	bge.w	8007c06 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	4413      	add	r3, r2
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007a30:	4013      	ands	r3, r2
 8007a32:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007a48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a4c:	b292      	uxth	r2, r2
 8007a4e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007a50:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8007a54:	4613      	mov	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	4413      	add	r3, r2
 8007a64:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a68:	7b1b      	ldrb	r3, [r3, #12]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d123      	bne.n	8007ab6 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	461a      	mov	r2, r3
 8007a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	00db      	lsls	r3, r3, #3
 8007a80:	4413      	add	r3, r2
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	6812      	ldr	r2, [r2, #0]
 8007a86:	4413      	add	r3, r2
 8007a88:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a8c:	881b      	ldrh	r3, [r3, #0]
 8007a8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a92:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8007a96:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f000 808e 	beq.w	8007bbc <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6818      	ldr	r0, [r3, #0]
 8007aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aa6:	6959      	ldr	r1, [r3, #20]
 8007aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aaa:	88da      	ldrh	r2, [r3, #6]
 8007aac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007ab0:	f004 fe7a 	bl	800c7a8 <USB_ReadPMA>
 8007ab4:	e082      	b.n	8007bbc <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ab8:	78db      	ldrb	r3, [r3, #3]
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d10a      	bne.n	8007ad4 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007abe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f9d3 	bl	8007e72 <HAL_PCD_EP_DB_Receive>
 8007acc:	4603      	mov	r3, r0
 8007ace:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8007ad2:	e073      	b.n	8007bbc <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	881b      	ldrh	r3, [r3, #0]
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aee:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	441a      	add	r2, r3
 8007b00:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d022      	beq.n	8007b78 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	00db      	lsls	r3, r3, #3
 8007b44:	4413      	add	r3, r2
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	6812      	ldr	r2, [r2, #0]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b50:	881b      	ldrh	r3, [r3, #0]
 8007b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b56:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8007b5a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d02c      	beq.n	8007bbc <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6818      	ldr	r0, [r3, #0]
 8007b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b68:	6959      	ldr	r1, [r3, #20]
 8007b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b6c:	891a      	ldrh	r2, [r3, #8]
 8007b6e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007b72:	f004 fe19 	bl	800c7a8 <USB_ReadPMA>
 8007b76:	e021      	b.n	8007bbc <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	461a      	mov	r2, r3
 8007b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	00db      	lsls	r3, r3, #3
 8007b8a:	4413      	add	r3, r2
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6812      	ldr	r2, [r2, #0]
 8007b90:	4413      	add	r3, r2
 8007b92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b96:	881b      	ldrh	r3, [r3, #0]
 8007b98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b9c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8007ba0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d009      	beq.n	8007bbc <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6818      	ldr	r0, [r3, #0]
 8007bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bae:	6959      	ldr	r1, [r3, #20]
 8007bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bb2:	895a      	ldrh	r2, [r3, #10]
 8007bb4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007bb8:	f004 fdf6 	bl	800c7a8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bbe:	69da      	ldr	r2, [r3, #28]
 8007bc0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007bc4:	441a      	add	r2, r3
 8007bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bc8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bcc:	695a      	ldr	r2, [r3, #20]
 8007bce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007bd2:	441a      	add	r2, r3
 8007bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bd6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d005      	beq.n	8007bec <PCD_EP_ISR_Handler+0x4fe>
 8007be0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8007be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d206      	bcs.n	8007bfa <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f006 fce2 	bl	800e5bc <HAL_PCD_DataOutStageCallback>
 8007bf8:	e005      	b.n	8007c06 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c00:	4618      	mov	r0, r3
 8007c02:	f003 f8a4 	bl	800ad4e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007c06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 8121 	beq.w	8007e56 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8007c14:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8007c18:	4613      	mov	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4413      	add	r3, r2
 8007c1e:	00db      	lsls	r3, r3, #3
 8007c20:	3310      	adds	r3, #16
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	4413      	add	r3, r2
 8007c26:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4413      	add	r3, r2
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	441a      	add	r2, r3
 8007c54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c66:	78db      	ldrb	r3, [r3, #3]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	f040 80a2 	bne.w	8007db2 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8007c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c70:	2200      	movs	r2, #0
 8007c72:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c76:	7b1b      	ldrb	r3, [r3, #12]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 8093 	beq.w	8007da4 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007c7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d046      	beq.n	8007d18 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c8c:	785b      	ldrb	r3, [r3, #1]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d126      	bne.n	8007ce0 <PCD_EP_ISR_Handler+0x5f2>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	627b      	str	r3, [r7, #36]	; 0x24
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca6:	4413      	add	r3, r2
 8007ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8007caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	00da      	lsls	r2, r3, #3
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007cb8:	623b      	str	r3, [r7, #32]
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	881b      	ldrh	r3, [r3, #0]
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	801a      	strh	r2, [r3, #0]
 8007cca:	6a3b      	ldr	r3, [r7, #32]
 8007ccc:	881b      	ldrh	r3, [r3, #0]
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	801a      	strh	r2, [r3, #0]
 8007cde:	e061      	b.n	8007da4 <PCD_EP_ISR_Handler+0x6b6>
 8007ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ce2:	785b      	ldrb	r3, [r3, #1]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d15d      	bne.n	8007da4 <PCD_EP_ISR_Handler+0x6b6>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfc:	4413      	add	r3, r2
 8007cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	00da      	lsls	r2, r3, #3
 8007d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d08:	4413      	add	r3, r2
 8007d0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d12:	2200      	movs	r2, #0
 8007d14:	801a      	strh	r2, [r3, #0]
 8007d16:	e045      	b.n	8007da4 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d20:	785b      	ldrb	r3, [r3, #1]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d126      	bne.n	8007d74 <PCD_EP_ISR_Handler+0x686>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	461a      	mov	r2, r3
 8007d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3a:	4413      	add	r3, r2
 8007d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	00da      	lsls	r2, r3, #3
 8007d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d46:	4413      	add	r3, r2
 8007d48:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d4c:	633b      	str	r3, [r7, #48]	; 0x30
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d50:	881b      	ldrh	r3, [r3, #0]
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5c:	801a      	strh	r2, [r3, #0]
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d60:	881b      	ldrh	r3, [r3, #0]
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d70:	801a      	strh	r2, [r3, #0]
 8007d72:	e017      	b.n	8007da4 <PCD_EP_ISR_Handler+0x6b6>
 8007d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d76:	785b      	ldrb	r3, [r3, #1]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d113      	bne.n	8007da4 <PCD_EP_ISR_Handler+0x6b6>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	461a      	mov	r2, r3
 8007d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d8a:	4413      	add	r3, r2
 8007d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	00da      	lsls	r2, r3, #3
 8007d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d96:	4413      	add	r3, r2
 8007d98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da0:	2200      	movs	r2, #0
 8007da2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	4619      	mov	r1, r3
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f006 fc21 	bl	800e5f2 <HAL_PCD_DataInStageCallback>
 8007db0:	e051      	b.n	8007e56 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007db2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d144      	bne.n	8007e48 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	461a      	mov	r2, r3
 8007dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	00db      	lsls	r3, r3, #3
 8007dd0:	4413      	add	r3, r2
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	6812      	ldr	r2, [r2, #0]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ddc:	881b      	ldrh	r3, [r3, #0]
 8007dde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007de2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8007de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007de8:	699a      	ldr	r2, [r3, #24]
 8007dea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d907      	bls.n	8007e02 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8007df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007df4:	699a      	ldr	r2, [r3, #24]
 8007df6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007dfa:	1ad2      	subs	r2, r2, r3
 8007dfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dfe:	619a      	str	r2, [r3, #24]
 8007e00:	e002      	b.n	8007e08 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8007e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e04:	2200      	movs	r2, #0
 8007e06:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d106      	bne.n	8007e1e <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	4619      	mov	r1, r3
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f006 fbeb 	bl	800e5f2 <HAL_PCD_DataInStageCallback>
 8007e1c:	e01b      	b.n	8007e56 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e20:	695a      	ldr	r2, [r3, #20]
 8007e22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007e26:	441a      	add	r2, r3
 8007e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e2a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e2e:	69da      	ldr	r2, [r3, #28]
 8007e30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007e34:	441a      	add	r2, r3
 8007e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e38:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e40:	4618      	mov	r0, r3
 8007e42:	f002 ff84 	bl	800ad4e <USB_EPStartXfer>
 8007e46:	e006      	b.n	8007e56 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007e48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f917 	bl	8008084 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	b21b      	sxth	r3, r3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f6ff ac48 	blt.w	80076f8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3758      	adds	r7, #88	; 0x58
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b088      	sub	sp, #32
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	60f8      	str	r0, [r7, #12]
 8007e7a:	60b9      	str	r1, [r7, #8]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007e80:	88fb      	ldrh	r3, [r7, #6]
 8007e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d07c      	beq.n	8007f84 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	461a      	mov	r2, r3
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	00db      	lsls	r3, r3, #3
 8007e9c:	4413      	add	r3, r2
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	6812      	ldr	r2, [r2, #0]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ea8:	881b      	ldrh	r3, [r3, #0]
 8007eaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007eae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	699a      	ldr	r2, [r3, #24]
 8007eb4:	8b7b      	ldrh	r3, [r7, #26]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d306      	bcc.n	8007ec8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	699a      	ldr	r2, [r3, #24]
 8007ebe:	8b7b      	ldrh	r3, [r7, #26]
 8007ec0:	1ad2      	subs	r2, r2, r3
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	619a      	str	r2, [r3, #24]
 8007ec6:	e002      	b.n	8007ece <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d123      	bne.n	8007f1e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	461a      	mov	r2, r3
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	881b      	ldrh	r3, [r3, #0]
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef0:	833b      	strh	r3, [r7, #24]
 8007ef2:	8b3b      	ldrh	r3, [r7, #24]
 8007ef4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ef8:	833b      	strh	r3, [r7, #24]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	461a      	mov	r2, r3
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	441a      	add	r2, r3
 8007f08:	8b3b      	ldrh	r3, [r7, #24]
 8007f0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007f1e:	88fb      	ldrh	r3, [r7, #6]
 8007f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d01f      	beq.n	8007f68 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4413      	add	r3, r2
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f42:	82fb      	strh	r3, [r7, #22]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	461a      	mov	r2, r3
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	441a      	add	r2, r3
 8007f52:	8afb      	ldrh	r3, [r7, #22]
 8007f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007f68:	8b7b      	ldrh	r3, [r7, #26]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f000 8085 	beq.w	800807a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6818      	ldr	r0, [r3, #0]
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	6959      	ldr	r1, [r3, #20]
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	891a      	ldrh	r2, [r3, #8]
 8007f7c:	8b7b      	ldrh	r3, [r7, #26]
 8007f7e:	f004 fc13 	bl	800c7a8 <USB_ReadPMA>
 8007f82:	e07a      	b.n	800807a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	461a      	mov	r2, r3
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	00db      	lsls	r3, r3, #3
 8007f96:	4413      	add	r3, r2
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	6812      	ldr	r2, [r2, #0]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fa8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	699a      	ldr	r2, [r3, #24]
 8007fae:	8b7b      	ldrh	r3, [r7, #26]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d306      	bcc.n	8007fc2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	699a      	ldr	r2, [r3, #24]
 8007fb8:	8b7b      	ldrh	r3, [r7, #26]
 8007fba:	1ad2      	subs	r2, r2, r3
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	619a      	str	r2, [r3, #24]
 8007fc0:	e002      	b.n	8007fc8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d123      	bne.n	8008018 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fea:	83fb      	strh	r3, [r7, #30]
 8007fec:	8bfb      	ldrh	r3, [r7, #30]
 8007fee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ff2:	83fb      	strh	r3, [r7, #30]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	441a      	add	r2, r3
 8008002:	8bfb      	ldrh	r3, [r7, #30]
 8008004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800800c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008014:	b29b      	uxth	r3, r3
 8008016:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008018:	88fb      	ldrh	r3, [r7, #6]
 800801a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800801e:	2b00      	cmp	r3, #0
 8008020:	d11f      	bne.n	8008062 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	b29b      	uxth	r3, r3
 8008034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800803c:	83bb      	strh	r3, [r7, #28]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	441a      	add	r2, r3
 800804c:	8bbb      	ldrh	r3, [r7, #28]
 800804e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800805a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800805e:	b29b      	uxth	r3, r3
 8008060:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008062:	8b7b      	ldrh	r3, [r7, #26]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d008      	beq.n	800807a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6818      	ldr	r0, [r3, #0]
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	6959      	ldr	r1, [r3, #20]
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	895a      	ldrh	r2, [r3, #10]
 8008074:	8b7b      	ldrh	r3, [r7, #26]
 8008076:	f004 fb97 	bl	800c7a8 <USB_ReadPMA>
    }
  }

  return count;
 800807a:	8b7b      	ldrh	r3, [r7, #26]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3720      	adds	r7, #32
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b0a4      	sub	sp, #144	; 0x90
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	4613      	mov	r3, r2
 8008090:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008092:	88fb      	ldrh	r3, [r7, #6]
 8008094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 81db 	beq.w	8008454 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	461a      	mov	r2, r3
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	00db      	lsls	r3, r3, #3
 80080b0:	4413      	add	r3, r2
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	6812      	ldr	r2, [r2, #0]
 80080b6:	4413      	add	r3, r2
 80080b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080c2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	699a      	ldr	r2, [r3, #24]
 80080ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d907      	bls.n	80080e2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	699a      	ldr	r2, [r3, #24]
 80080d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80080da:	1ad2      	subs	r2, r2, r3
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	619a      	str	r2, [r3, #24]
 80080e0:	e002      	b.n	80080e8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	2200      	movs	r2, #0
 80080e6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f040 80b9 	bne.w	8008264 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	785b      	ldrb	r3, [r3, #1]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d126      	bne.n	8008148 <HAL_PCD_EP_DB_Transmit+0xc4>
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008108:	b29b      	uxth	r3, r3
 800810a:	461a      	mov	r2, r3
 800810c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810e:	4413      	add	r3, r2
 8008110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	00da      	lsls	r2, r3, #3
 8008118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811a:	4413      	add	r3, r2
 800811c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008120:	62bb      	str	r3, [r7, #40]	; 0x28
 8008122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008124:	881b      	ldrh	r3, [r3, #0]
 8008126:	b29b      	uxth	r3, r3
 8008128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800812c:	b29a      	uxth	r2, r3
 800812e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008130:	801a      	strh	r2, [r3, #0]
 8008132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	b29b      	uxth	r3, r3
 8008138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800813c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008140:	b29a      	uxth	r2, r3
 8008142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008144:	801a      	strh	r2, [r3, #0]
 8008146:	e01a      	b.n	800817e <HAL_PCD_EP_DB_Transmit+0xfa>
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	785b      	ldrb	r3, [r3, #1]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d116      	bne.n	800817e <HAL_PCD_EP_DB_Transmit+0xfa>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	637b      	str	r3, [r7, #52]	; 0x34
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800815e:	b29b      	uxth	r3, r3
 8008160:	461a      	mov	r2, r3
 8008162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008164:	4413      	add	r3, r2
 8008166:	637b      	str	r3, [r7, #52]	; 0x34
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	00da      	lsls	r2, r3, #3
 800816e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008170:	4413      	add	r3, r2
 8008172:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008176:	633b      	str	r3, [r7, #48]	; 0x30
 8008178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817a:	2200      	movs	r2, #0
 800817c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	627b      	str	r3, [r7, #36]	; 0x24
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	785b      	ldrb	r3, [r3, #1]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d126      	bne.n	80081da <HAL_PCD_EP_DB_Transmit+0x156>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	61fb      	str	r3, [r7, #28]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800819a:	b29b      	uxth	r3, r3
 800819c:	461a      	mov	r2, r3
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	4413      	add	r3, r2
 80081a2:	61fb      	str	r3, [r7, #28]
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	00da      	lsls	r2, r3, #3
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	4413      	add	r3, r2
 80081ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80081b2:	61bb      	str	r3, [r7, #24]
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	881b      	ldrh	r3, [r3, #0]
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081be:	b29a      	uxth	r2, r3
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	801a      	strh	r2, [r3, #0]
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	881b      	ldrh	r3, [r3, #0]
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	801a      	strh	r2, [r3, #0]
 80081d8:	e017      	b.n	800820a <HAL_PCD_EP_DB_Transmit+0x186>
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	785b      	ldrb	r3, [r3, #1]
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d113      	bne.n	800820a <HAL_PCD_EP_DB_Transmit+0x186>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	461a      	mov	r2, r3
 80081ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f0:	4413      	add	r3, r2
 80081f2:	627b      	str	r3, [r7, #36]	; 0x24
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	00da      	lsls	r2, r3, #3
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	4413      	add	r3, r2
 80081fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008202:	623b      	str	r3, [r7, #32]
 8008204:	6a3b      	ldr	r3, [r7, #32]
 8008206:	2200      	movs	r2, #0
 8008208:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	4619      	mov	r1, r3
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f006 f9ee 	bl	800e5f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008216:	88fb      	ldrh	r3, [r7, #6]
 8008218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 82fa 	beq.w	8008816 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	461a      	mov	r2, r3
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	881b      	ldrh	r3, [r3, #0]
 8008232:	b29b      	uxth	r3, r3
 8008234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800823c:	82fb      	strh	r3, [r7, #22]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	461a      	mov	r2, r3
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	441a      	add	r2, r3
 800824c:	8afb      	ldrh	r3, [r7, #22]
 800824e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008256:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800825a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800825e:	b29b      	uxth	r3, r3
 8008260:	8013      	strh	r3, [r2, #0]
 8008262:	e2d8      	b.n	8008816 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008264:	88fb      	ldrh	r3, [r7, #6]
 8008266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d021      	beq.n	80082b2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	461a      	mov	r2, r3
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	881b      	ldrh	r3, [r3, #0]
 800827e:	b29b      	uxth	r3, r3
 8008280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008288:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	461a      	mov	r2, r3
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	441a      	add	r2, r3
 800829a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800829e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	f040 82ac 	bne.w	8008816 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	695a      	ldr	r2, [r3, #20]
 80082c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80082c6:	441a      	add	r2, r3
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	69da      	ldr	r2, [r3, #28]
 80082d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80082d4:	441a      	add	r2, r3
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	6a1a      	ldr	r2, [r3, #32]
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d30b      	bcc.n	80082fe <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	6a1a      	ldr	r2, [r3, #32]
 80082f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082f6:	1ad2      	subs	r2, r2, r3
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	621a      	str	r2, [r3, #32]
 80082fc:	e017      	b.n	800832e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	6a1b      	ldr	r3, [r3, #32]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d108      	bne.n	8008318 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8008306:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800830a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008316:	e00a      	b.n	800832e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	6a1b      	ldr	r3, [r3, #32]
 8008324:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2200      	movs	r2, #0
 800832c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	785b      	ldrb	r3, [r3, #1]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d165      	bne.n	8008402 <HAL_PCD_EP_DB_Transmit+0x37e>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008344:	b29b      	uxth	r3, r3
 8008346:	461a      	mov	r2, r3
 8008348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800834a:	4413      	add	r3, r2
 800834c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	00da      	lsls	r2, r3, #3
 8008354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008356:	4413      	add	r3, r2
 8008358:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800835c:	63bb      	str	r3, [r7, #56]	; 0x38
 800835e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	b29b      	uxth	r3, r3
 8008364:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008368:	b29a      	uxth	r2, r3
 800836a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836c:	801a      	strh	r2, [r3, #0]
 800836e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008372:	2b3e      	cmp	r3, #62	; 0x3e
 8008374:	d91d      	bls.n	80083b2 <HAL_PCD_EP_DB_Transmit+0x32e>
 8008376:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800837a:	095b      	lsrs	r3, r3, #5
 800837c:	64bb      	str	r3, [r7, #72]	; 0x48
 800837e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008382:	f003 031f 	and.w	r3, r3, #31
 8008386:	2b00      	cmp	r3, #0
 8008388:	d102      	bne.n	8008390 <HAL_PCD_EP_DB_Transmit+0x30c>
 800838a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800838c:	3b01      	subs	r3, #1
 800838e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008392:	881b      	ldrh	r3, [r3, #0]
 8008394:	b29a      	uxth	r2, r3
 8008396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008398:	b29b      	uxth	r3, r3
 800839a:	029b      	lsls	r3, r3, #10
 800839c:	b29b      	uxth	r3, r3
 800839e:	4313      	orrs	r3, r2
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ae:	801a      	strh	r2, [r3, #0]
 80083b0:	e044      	b.n	800843c <HAL_PCD_EP_DB_Transmit+0x3b8>
 80083b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10a      	bne.n	80083d0 <HAL_PCD_EP_DB_Transmit+0x34c>
 80083ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083bc:	881b      	ldrh	r3, [r3, #0]
 80083be:	b29b      	uxth	r3, r3
 80083c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083cc:	801a      	strh	r2, [r3, #0]
 80083ce:	e035      	b.n	800843c <HAL_PCD_EP_DB_Transmit+0x3b8>
 80083d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083d4:	085b      	lsrs	r3, r3, #1
 80083d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80083d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083dc:	f003 0301 	and.w	r3, r3, #1
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d002      	beq.n	80083ea <HAL_PCD_EP_DB_Transmit+0x366>
 80083e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083e6:	3301      	adds	r3, #1
 80083e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80083ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ec:	881b      	ldrh	r3, [r3, #0]
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	029b      	lsls	r3, r3, #10
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	4313      	orrs	r3, r2
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fe:	801a      	strh	r2, [r3, #0]
 8008400:	e01c      	b.n	800843c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	785b      	ldrb	r3, [r3, #1]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d118      	bne.n	800843c <HAL_PCD_EP_DB_Transmit+0x3b8>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	647b      	str	r3, [r7, #68]	; 0x44
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008418:	b29b      	uxth	r3, r3
 800841a:	461a      	mov	r2, r3
 800841c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800841e:	4413      	add	r3, r2
 8008420:	647b      	str	r3, [r7, #68]	; 0x44
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	00da      	lsls	r2, r3, #3
 8008428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800842a:	4413      	add	r3, r2
 800842c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008430:	643b      	str	r3, [r7, #64]	; 0x40
 8008432:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008436:	b29a      	uxth	r2, r3
 8008438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800843a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6818      	ldr	r0, [r3, #0]
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	6959      	ldr	r1, [r3, #20]
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	891a      	ldrh	r2, [r3, #8]
 8008448:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800844c:	b29b      	uxth	r3, r3
 800844e:	f004 f969 	bl	800c724 <USB_WritePMA>
 8008452:	e1e0      	b.n	8008816 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800845c:	b29b      	uxth	r3, r3
 800845e:	461a      	mov	r2, r3
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	00db      	lsls	r3, r3, #3
 8008466:	4413      	add	r3, r2
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	6812      	ldr	r2, [r2, #0]
 800846c:	4413      	add	r3, r2
 800846e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008472:	881b      	ldrh	r3, [r3, #0]
 8008474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008478:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	699a      	ldr	r2, [r3, #24]
 8008480:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008484:	429a      	cmp	r2, r3
 8008486:	d307      	bcc.n	8008498 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	699a      	ldr	r2, [r3, #24]
 800848c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008490:	1ad2      	subs	r2, r2, r3
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	619a      	str	r2, [r3, #24]
 8008496:	e002      	b.n	800849e <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	2200      	movs	r2, #0
 800849c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f040 80c0 	bne.w	8008628 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	785b      	ldrb	r3, [r3, #1]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d126      	bne.n	80084fe <HAL_PCD_EP_DB_Transmit+0x47a>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084be:	b29b      	uxth	r3, r3
 80084c0:	461a      	mov	r2, r3
 80084c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084c4:	4413      	add	r3, r2
 80084c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	00da      	lsls	r2, r3, #3
 80084ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084d0:	4413      	add	r3, r2
 80084d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80084d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80084d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	b29b      	uxth	r3, r3
 80084de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084e6:	801a      	strh	r2, [r3, #0]
 80084e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084ea:	881b      	ldrh	r3, [r3, #0]
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084fa:	801a      	strh	r2, [r3, #0]
 80084fc:	e01a      	b.n	8008534 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	785b      	ldrb	r3, [r3, #1]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d116      	bne.n	8008534 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	667b      	str	r3, [r7, #100]	; 0x64
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008514:	b29b      	uxth	r3, r3
 8008516:	461a      	mov	r2, r3
 8008518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800851a:	4413      	add	r3, r2
 800851c:	667b      	str	r3, [r7, #100]	; 0x64
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	00da      	lsls	r2, r3, #3
 8008524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008526:	4413      	add	r3, r2
 8008528:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800852c:	663b      	str	r3, [r7, #96]	; 0x60
 800852e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008530:	2200      	movs	r2, #0
 8008532:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	677b      	str	r3, [r7, #116]	; 0x74
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	785b      	ldrb	r3, [r3, #1]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d12b      	bne.n	800859a <HAL_PCD_EP_DB_Transmit+0x516>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008550:	b29b      	uxth	r3, r3
 8008552:	461a      	mov	r2, r3
 8008554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008556:	4413      	add	r3, r2
 8008558:	66fb      	str	r3, [r7, #108]	; 0x6c
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	00da      	lsls	r2, r3, #3
 8008560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008562:	4413      	add	r3, r2
 8008564:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008568:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800856c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	b29b      	uxth	r3, r3
 8008574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008578:	b29a      	uxth	r2, r3
 800857a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800857e:	801a      	strh	r2, [r3, #0]
 8008580:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008584:	881b      	ldrh	r3, [r3, #0]
 8008586:	b29b      	uxth	r3, r3
 8008588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800858c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008590:	b29a      	uxth	r2, r3
 8008592:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008596:	801a      	strh	r2, [r3, #0]
 8008598:	e017      	b.n	80085ca <HAL_PCD_EP_DB_Transmit+0x546>
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	785b      	ldrb	r3, [r3, #1]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d113      	bne.n	80085ca <HAL_PCD_EP_DB_Transmit+0x546>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	461a      	mov	r2, r3
 80085ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085b0:	4413      	add	r3, r2
 80085b2:	677b      	str	r3, [r7, #116]	; 0x74
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	00da      	lsls	r2, r3, #3
 80085ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085bc:	4413      	add	r3, r2
 80085be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80085c2:	673b      	str	r3, [r7, #112]	; 0x70
 80085c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085c6:	2200      	movs	r2, #0
 80085c8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	4619      	mov	r1, r3
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f006 f80e 	bl	800e5f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80085d6:	88fb      	ldrh	r3, [r7, #6]
 80085d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f040 811a 	bne.w	8008816 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	461a      	mov	r2, r3
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	881b      	ldrh	r3, [r3, #0]
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085fc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	461a      	mov	r2, r3
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	441a      	add	r2, r3
 800860e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8008612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800861a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800861e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008622:	b29b      	uxth	r3, r3
 8008624:	8013      	strh	r3, [r2, #0]
 8008626:	e0f6      	b.n	8008816 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008628:	88fb      	ldrh	r3, [r7, #6]
 800862a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800862e:	2b00      	cmp	r3, #0
 8008630:	d121      	bne.n	8008676 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	461a      	mov	r2, r3
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4413      	add	r3, r2
 8008640:	881b      	ldrh	r3, [r3, #0]
 8008642:	b29b      	uxth	r3, r3
 8008644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800864c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	461a      	mov	r2, r3
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	441a      	add	r2, r3
 800865e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008662:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008666:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800866a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800866e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008672:	b29b      	uxth	r3, r3
 8008674:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800867c:	2b01      	cmp	r3, #1
 800867e:	f040 80ca 	bne.w	8008816 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	695a      	ldr	r2, [r3, #20]
 8008686:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800868a:	441a      	add	r2, r3
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	69da      	ldr	r2, [r3, #28]
 8008694:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008698:	441a      	add	r2, r3
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	6a1a      	ldr	r2, [r3, #32]
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d30b      	bcc.n	80086c2 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	6a1a      	ldr	r2, [r3, #32]
 80086b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086ba:	1ad2      	subs	r2, r2, r3
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	621a      	str	r2, [r3, #32]
 80086c0:	e017      	b.n	80086f2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d108      	bne.n	80086dc <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80086ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80086ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80086da:	e00a      	b.n	80086f2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	6a1b      	ldr	r3, [r3, #32]
 80086e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2200      	movs	r2, #0
 80086e8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	657b      	str	r3, [r7, #84]	; 0x54
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	785b      	ldrb	r3, [r3, #1]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d165      	bne.n	80087cc <HAL_PCD_EP_DB_Transmit+0x748>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800870e:	b29b      	uxth	r3, r3
 8008710:	461a      	mov	r2, r3
 8008712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008714:	4413      	add	r3, r2
 8008716:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	00da      	lsls	r2, r3, #3
 800871e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008720:	4413      	add	r3, r2
 8008722:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008726:	65bb      	str	r3, [r7, #88]	; 0x58
 8008728:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800872a:	881b      	ldrh	r3, [r3, #0]
 800872c:	b29b      	uxth	r3, r3
 800872e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008732:	b29a      	uxth	r2, r3
 8008734:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008736:	801a      	strh	r2, [r3, #0]
 8008738:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800873c:	2b3e      	cmp	r3, #62	; 0x3e
 800873e:	d91d      	bls.n	800877c <HAL_PCD_EP_DB_Transmit+0x6f8>
 8008740:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008744:	095b      	lsrs	r3, r3, #5
 8008746:	66bb      	str	r3, [r7, #104]	; 0x68
 8008748:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800874c:	f003 031f 	and.w	r3, r3, #31
 8008750:	2b00      	cmp	r3, #0
 8008752:	d102      	bne.n	800875a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8008754:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008756:	3b01      	subs	r3, #1
 8008758:	66bb      	str	r3, [r7, #104]	; 0x68
 800875a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800875c:	881b      	ldrh	r3, [r3, #0]
 800875e:	b29a      	uxth	r2, r3
 8008760:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008762:	b29b      	uxth	r3, r3
 8008764:	029b      	lsls	r3, r3, #10
 8008766:	b29b      	uxth	r3, r3
 8008768:	4313      	orrs	r3, r2
 800876a:	b29b      	uxth	r3, r3
 800876c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008774:	b29a      	uxth	r2, r3
 8008776:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008778:	801a      	strh	r2, [r3, #0]
 800877a:	e041      	b.n	8008800 <HAL_PCD_EP_DB_Transmit+0x77c>
 800877c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10a      	bne.n	800879a <HAL_PCD_EP_DB_Transmit+0x716>
 8008784:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	b29b      	uxth	r3, r3
 800878a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800878e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008792:	b29a      	uxth	r2, r3
 8008794:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008796:	801a      	strh	r2, [r3, #0]
 8008798:	e032      	b.n	8008800 <HAL_PCD_EP_DB_Transmit+0x77c>
 800879a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800879e:	085b      	lsrs	r3, r3, #1
 80087a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80087a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d002      	beq.n	80087b4 <HAL_PCD_EP_DB_Transmit+0x730>
 80087ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087b0:	3301      	adds	r3, #1
 80087b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80087b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087b6:	881b      	ldrh	r3, [r3, #0]
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087bc:	b29b      	uxth	r3, r3
 80087be:	029b      	lsls	r3, r3, #10
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	4313      	orrs	r3, r2
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087c8:	801a      	strh	r2, [r3, #0]
 80087ca:	e019      	b.n	8008800 <HAL_PCD_EP_DB_Transmit+0x77c>
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	785b      	ldrb	r3, [r3, #1]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d115      	bne.n	8008800 <HAL_PCD_EP_DB_Transmit+0x77c>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087dc:	b29b      	uxth	r3, r3
 80087de:	461a      	mov	r2, r3
 80087e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087e2:	4413      	add	r3, r2
 80087e4:	657b      	str	r3, [r7, #84]	; 0x54
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	00da      	lsls	r2, r3, #3
 80087ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087ee:	4413      	add	r3, r2
 80087f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80087f4:	653b      	str	r3, [r7, #80]	; 0x50
 80087f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087fe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6818      	ldr	r0, [r3, #0]
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	6959      	ldr	r1, [r3, #20]
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	895a      	ldrh	r2, [r3, #10]
 800880c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008810:	b29b      	uxth	r3, r3
 8008812:	f003 ff87 	bl	800c724 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4413      	add	r3, r2
 8008824:	881b      	ldrh	r3, [r3, #0]
 8008826:	b29b      	uxth	r3, r3
 8008828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800882c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008830:	82bb      	strh	r3, [r7, #20]
 8008832:	8abb      	ldrh	r3, [r7, #20]
 8008834:	f083 0310 	eor.w	r3, r3, #16
 8008838:	82bb      	strh	r3, [r7, #20]
 800883a:	8abb      	ldrh	r3, [r7, #20]
 800883c:	f083 0320 	eor.w	r3, r3, #32
 8008840:	82bb      	strh	r3, [r7, #20]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	461a      	mov	r2, r3
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	441a      	add	r2, r3
 8008850:	8abb      	ldrh	r3, [r7, #20]
 8008852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008856:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800885a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800885e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008862:	b29b      	uxth	r3, r3
 8008864:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3790      	adds	r7, #144	; 0x90
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008870:	b480      	push	{r7}
 8008872:	b087      	sub	sp, #28
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	607b      	str	r3, [r7, #4]
 800887a:	460b      	mov	r3, r1
 800887c:	817b      	strh	r3, [r7, #10]
 800887e:	4613      	mov	r3, r2
 8008880:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008882:	897b      	ldrh	r3, [r7, #10]
 8008884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008888:	b29b      	uxth	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00b      	beq.n	80088a6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800888e:	897b      	ldrh	r3, [r7, #10]
 8008890:	f003 0207 	and.w	r2, r3, #7
 8008894:	4613      	mov	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	4413      	add	r3, r2
 800889a:	00db      	lsls	r3, r3, #3
 800889c:	3310      	adds	r3, #16
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	4413      	add	r3, r2
 80088a2:	617b      	str	r3, [r7, #20]
 80088a4:	e009      	b.n	80088ba <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80088a6:	897a      	ldrh	r2, [r7, #10]
 80088a8:	4613      	mov	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	00db      	lsls	r3, r3, #3
 80088b0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	4413      	add	r3, r2
 80088b8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80088ba:	893b      	ldrh	r3, [r7, #8]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d107      	bne.n	80088d0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	2200      	movs	r2, #0
 80088c4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	80da      	strh	r2, [r3, #6]
 80088ce:	e00b      	b.n	80088e8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	2201      	movs	r2, #1
 80088d4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	b29a      	uxth	r2, r3
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	0c1b      	lsrs	r3, r3, #16
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	371c      	adds	r7, #28
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b085      	sub	sp, #20
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800891a:	b29b      	uxth	r3, r3
 800891c:	f043 0301 	orr.w	r3, r3, #1
 8008920:	b29a      	uxth	r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800892e:	b29b      	uxth	r3, r3
 8008930:	f043 0302 	orr.w	r3, r3, #2
 8008934:	b29a      	uxth	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3714      	adds	r7, #20
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
	...

0800894c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d141      	bne.n	80089de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800895a:	4b4b      	ldr	r3, [pc, #300]	; (8008a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008966:	d131      	bne.n	80089cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008968:	4b47      	ldr	r3, [pc, #284]	; (8008a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800896a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800896e:	4a46      	ldr	r2, [pc, #280]	; (8008a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008974:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008978:	4b43      	ldr	r3, [pc, #268]	; (8008a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008980:	4a41      	ldr	r2, [pc, #260]	; (8008a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008986:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008988:	4b40      	ldr	r3, [pc, #256]	; (8008a8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2232      	movs	r2, #50	; 0x32
 800898e:	fb02 f303 	mul.w	r3, r2, r3
 8008992:	4a3f      	ldr	r2, [pc, #252]	; (8008a90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008994:	fba2 2303 	umull	r2, r3, r2, r3
 8008998:	0c9b      	lsrs	r3, r3, #18
 800899a:	3301      	adds	r3, #1
 800899c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800899e:	e002      	b.n	80089a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	3b01      	subs	r3, #1
 80089a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80089a6:	4b38      	ldr	r3, [pc, #224]	; (8008a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089b2:	d102      	bne.n	80089ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1f2      	bne.n	80089a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80089ba:	4b33      	ldr	r3, [pc, #204]	; (8008a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089c6:	d158      	bne.n	8008a7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e057      	b.n	8008a7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80089cc:	4b2e      	ldr	r3, [pc, #184]	; (8008a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089d2:	4a2d      	ldr	r2, [pc, #180]	; (8008a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80089dc:	e04d      	b.n	8008a7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089e4:	d141      	bne.n	8008a6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80089e6:	4b28      	ldr	r3, [pc, #160]	; (8008a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80089ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089f2:	d131      	bne.n	8008a58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80089f4:	4b24      	ldr	r3, [pc, #144]	; (8008a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089fa:	4a23      	ldr	r2, [pc, #140]	; (8008a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008a04:	4b20      	ldr	r3, [pc, #128]	; (8008a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008a0c:	4a1e      	ldr	r2, [pc, #120]	; (8008a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008a14:	4b1d      	ldr	r3, [pc, #116]	; (8008a8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2232      	movs	r2, #50	; 0x32
 8008a1a:	fb02 f303 	mul.w	r3, r2, r3
 8008a1e:	4a1c      	ldr	r2, [pc, #112]	; (8008a90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008a20:	fba2 2303 	umull	r2, r3, r2, r3
 8008a24:	0c9b      	lsrs	r3, r3, #18
 8008a26:	3301      	adds	r3, #1
 8008a28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a2a:	e002      	b.n	8008a32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a32:	4b15      	ldr	r3, [pc, #84]	; (8008a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a3e:	d102      	bne.n	8008a46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1f2      	bne.n	8008a2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008a46:	4b10      	ldr	r3, [pc, #64]	; (8008a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a48:	695b      	ldr	r3, [r3, #20]
 8008a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a52:	d112      	bne.n	8008a7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e011      	b.n	8008a7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008a58:	4b0b      	ldr	r3, [pc, #44]	; (8008a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a5e:	4a0a      	ldr	r2, [pc, #40]	; (8008a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008a68:	e007      	b.n	8008a7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008a6a:	4b07      	ldr	r3, [pc, #28]	; (8008a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008a72:	4a05      	ldr	r2, [pc, #20]	; (8008a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a78:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3714      	adds	r7, #20
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr
 8008a88:	40007000 	.word	0x40007000
 8008a8c:	2000000c 	.word	0x2000000c
 8008a90:	431bde83 	.word	0x431bde83

08008a94 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008a94:	b480      	push	{r7}
 8008a96:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008a98:	4b05      	ldr	r3, [pc, #20]	; (8008ab0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	4a04      	ldr	r2, [pc, #16]	; (8008ab0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008a9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008aa2:	6093      	str	r3, [r2, #8]
}
 8008aa4:	bf00      	nop
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	40007000 	.word	0x40007000

08008ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b088      	sub	sp, #32
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d101      	bne.n	8008ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e2fe      	b.n	80090c4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d075      	beq.n	8008bbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ad2:	4b97      	ldr	r3, [pc, #604]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f003 030c 	and.w	r3, r3, #12
 8008ada:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008adc:	4b94      	ldr	r3, [pc, #592]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f003 0303 	and.w	r3, r3, #3
 8008ae4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	2b0c      	cmp	r3, #12
 8008aea:	d102      	bne.n	8008af2 <HAL_RCC_OscConfig+0x3e>
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	d002      	beq.n	8008af8 <HAL_RCC_OscConfig+0x44>
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	2b08      	cmp	r3, #8
 8008af6:	d10b      	bne.n	8008b10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008af8:	4b8d      	ldr	r3, [pc, #564]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d05b      	beq.n	8008bbc <HAL_RCC_OscConfig+0x108>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d157      	bne.n	8008bbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e2d9      	b.n	80090c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b18:	d106      	bne.n	8008b28 <HAL_RCC_OscConfig+0x74>
 8008b1a:	4b85      	ldr	r3, [pc, #532]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a84      	ldr	r2, [pc, #528]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b24:	6013      	str	r3, [r2, #0]
 8008b26:	e01d      	b.n	8008b64 <HAL_RCC_OscConfig+0xb0>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b30:	d10c      	bne.n	8008b4c <HAL_RCC_OscConfig+0x98>
 8008b32:	4b7f      	ldr	r3, [pc, #508]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a7e      	ldr	r2, [pc, #504]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b3c:	6013      	str	r3, [r2, #0]
 8008b3e:	4b7c      	ldr	r3, [pc, #496]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a7b      	ldr	r2, [pc, #492]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b48:	6013      	str	r3, [r2, #0]
 8008b4a:	e00b      	b.n	8008b64 <HAL_RCC_OscConfig+0xb0>
 8008b4c:	4b78      	ldr	r3, [pc, #480]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a77      	ldr	r2, [pc, #476]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b56:	6013      	str	r3, [r2, #0]
 8008b58:	4b75      	ldr	r3, [pc, #468]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a74      	ldr	r2, [pc, #464]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d013      	beq.n	8008b94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b6c:	f7fa f950 	bl	8002e10 <HAL_GetTick>
 8008b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b72:	e008      	b.n	8008b86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b74:	f7fa f94c 	bl	8002e10 <HAL_GetTick>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	2b64      	cmp	r3, #100	; 0x64
 8008b80:	d901      	bls.n	8008b86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e29e      	b.n	80090c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b86:	4b6a      	ldr	r3, [pc, #424]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d0f0      	beq.n	8008b74 <HAL_RCC_OscConfig+0xc0>
 8008b92:	e014      	b.n	8008bbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b94:	f7fa f93c 	bl	8002e10 <HAL_GetTick>
 8008b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008b9a:	e008      	b.n	8008bae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b9c:	f7fa f938 	bl	8002e10 <HAL_GetTick>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	2b64      	cmp	r3, #100	; 0x64
 8008ba8:	d901      	bls.n	8008bae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e28a      	b.n	80090c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008bae:	4b60      	ldr	r3, [pc, #384]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1f0      	bne.n	8008b9c <HAL_RCC_OscConfig+0xe8>
 8008bba:	e000      	b.n	8008bbe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f003 0302 	and.w	r3, r3, #2
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d075      	beq.n	8008cb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bca:	4b59      	ldr	r3, [pc, #356]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	f003 030c 	and.w	r3, r3, #12
 8008bd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008bd4:	4b56      	ldr	r3, [pc, #344]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	f003 0303 	and.w	r3, r3, #3
 8008bdc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	2b0c      	cmp	r3, #12
 8008be2:	d102      	bne.n	8008bea <HAL_RCC_OscConfig+0x136>
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	d002      	beq.n	8008bf0 <HAL_RCC_OscConfig+0x13c>
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	2b04      	cmp	r3, #4
 8008bee:	d11f      	bne.n	8008c30 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008bf0:	4b4f      	ldr	r3, [pc, #316]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d005      	beq.n	8008c08 <HAL_RCC_OscConfig+0x154>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d101      	bne.n	8008c08 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e25d      	b.n	80090c4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c08:	4b49      	ldr	r3, [pc, #292]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	061b      	lsls	r3, r3, #24
 8008c16:	4946      	ldr	r1, [pc, #280]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008c1c:	4b45      	ldr	r3, [pc, #276]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fa f8a9 	bl	8002d78 <HAL_InitTick>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d043      	beq.n	8008cb4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e249      	b.n	80090c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d023      	beq.n	8008c80 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c38:	4b3d      	ldr	r3, [pc, #244]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a3c      	ldr	r2, [pc, #240]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c44:	f7fa f8e4 	bl	8002e10 <HAL_GetTick>
 8008c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c4a:	e008      	b.n	8008c5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c4c:	f7fa f8e0 	bl	8002e10 <HAL_GetTick>
 8008c50:	4602      	mov	r2, r0
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d901      	bls.n	8008c5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e232      	b.n	80090c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c5e:	4b34      	ldr	r3, [pc, #208]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d0f0      	beq.n	8008c4c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c6a:	4b31      	ldr	r3, [pc, #196]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	061b      	lsls	r3, r3, #24
 8008c78:	492d      	ldr	r1, [pc, #180]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	604b      	str	r3, [r1, #4]
 8008c7e:	e01a      	b.n	8008cb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c80:	4b2b      	ldr	r3, [pc, #172]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a2a      	ldr	r2, [pc, #168]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008c86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c8c:	f7fa f8c0 	bl	8002e10 <HAL_GetTick>
 8008c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c92:	e008      	b.n	8008ca6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c94:	f7fa f8bc 	bl	8002e10 <HAL_GetTick>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d901      	bls.n	8008ca6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e20e      	b.n	80090c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008ca6:	4b22      	ldr	r3, [pc, #136]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1f0      	bne.n	8008c94 <HAL_RCC_OscConfig+0x1e0>
 8008cb2:	e000      	b.n	8008cb6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cb4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 0308 	and.w	r3, r3, #8
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d041      	beq.n	8008d46 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	695b      	ldr	r3, [r3, #20]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d01c      	beq.n	8008d04 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008cca:	4b19      	ldr	r3, [pc, #100]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cd0:	4a17      	ldr	r2, [pc, #92]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008cd2:	f043 0301 	orr.w	r3, r3, #1
 8008cd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cda:	f7fa f899 	bl	8002e10 <HAL_GetTick>
 8008cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008ce0:	e008      	b.n	8008cf4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ce2:	f7fa f895 	bl	8002e10 <HAL_GetTick>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	1ad3      	subs	r3, r2, r3
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d901      	bls.n	8008cf4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	e1e7      	b.n	80090c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008cf4:	4b0e      	ldr	r3, [pc, #56]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cfa:	f003 0302 	and.w	r3, r3, #2
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d0ef      	beq.n	8008ce2 <HAL_RCC_OscConfig+0x22e>
 8008d02:	e020      	b.n	8008d46 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d04:	4b0a      	ldr	r3, [pc, #40]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d0a:	4a09      	ldr	r2, [pc, #36]	; (8008d30 <HAL_RCC_OscConfig+0x27c>)
 8008d0c:	f023 0301 	bic.w	r3, r3, #1
 8008d10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d14:	f7fa f87c 	bl	8002e10 <HAL_GetTick>
 8008d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008d1a:	e00d      	b.n	8008d38 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d1c:	f7fa f878 	bl	8002e10 <HAL_GetTick>
 8008d20:	4602      	mov	r2, r0
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	1ad3      	subs	r3, r2, r3
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d906      	bls.n	8008d38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	e1ca      	b.n	80090c4 <HAL_RCC_OscConfig+0x610>
 8008d2e:	bf00      	nop
 8008d30:	40021000 	.word	0x40021000
 8008d34:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008d38:	4b8c      	ldr	r3, [pc, #560]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d3e:	f003 0302 	and.w	r3, r3, #2
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1ea      	bne.n	8008d1c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0304 	and.w	r3, r3, #4
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f000 80a6 	beq.w	8008ea0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d54:	2300      	movs	r3, #0
 8008d56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008d58:	4b84      	ldr	r3, [pc, #528]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d101      	bne.n	8008d68 <HAL_RCC_OscConfig+0x2b4>
 8008d64:	2301      	movs	r3, #1
 8008d66:	e000      	b.n	8008d6a <HAL_RCC_OscConfig+0x2b6>
 8008d68:	2300      	movs	r3, #0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00d      	beq.n	8008d8a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d6e:	4b7f      	ldr	r3, [pc, #508]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d72:	4a7e      	ldr	r2, [pc, #504]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d78:	6593      	str	r3, [r2, #88]	; 0x58
 8008d7a:	4b7c      	ldr	r3, [pc, #496]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d82:	60fb      	str	r3, [r7, #12]
 8008d84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008d86:	2301      	movs	r3, #1
 8008d88:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d8a:	4b79      	ldr	r3, [pc, #484]	; (8008f70 <HAL_RCC_OscConfig+0x4bc>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d118      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d96:	4b76      	ldr	r3, [pc, #472]	; (8008f70 <HAL_RCC_OscConfig+0x4bc>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a75      	ldr	r2, [pc, #468]	; (8008f70 <HAL_RCC_OscConfig+0x4bc>)
 8008d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008da2:	f7fa f835 	bl	8002e10 <HAL_GetTick>
 8008da6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008da8:	e008      	b.n	8008dbc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008daa:	f7fa f831 	bl	8002e10 <HAL_GetTick>
 8008dae:	4602      	mov	r2, r0
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d901      	bls.n	8008dbc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008db8:	2303      	movs	r3, #3
 8008dba:	e183      	b.n	80090c4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008dbc:	4b6c      	ldr	r3, [pc, #432]	; (8008f70 <HAL_RCC_OscConfig+0x4bc>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d0f0      	beq.n	8008daa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d108      	bne.n	8008de2 <HAL_RCC_OscConfig+0x32e>
 8008dd0:	4b66      	ldr	r3, [pc, #408]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dd6:	4a65      	ldr	r2, [pc, #404]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008dd8:	f043 0301 	orr.w	r3, r3, #1
 8008ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008de0:	e024      	b.n	8008e2c <HAL_RCC_OscConfig+0x378>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	2b05      	cmp	r3, #5
 8008de8:	d110      	bne.n	8008e0c <HAL_RCC_OscConfig+0x358>
 8008dea:	4b60      	ldr	r3, [pc, #384]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008df0:	4a5e      	ldr	r2, [pc, #376]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008df2:	f043 0304 	orr.w	r3, r3, #4
 8008df6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008dfa:	4b5c      	ldr	r3, [pc, #368]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e00:	4a5a      	ldr	r2, [pc, #360]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008e02:	f043 0301 	orr.w	r3, r3, #1
 8008e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008e0a:	e00f      	b.n	8008e2c <HAL_RCC_OscConfig+0x378>
 8008e0c:	4b57      	ldr	r3, [pc, #348]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e12:	4a56      	ldr	r2, [pc, #344]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008e14:	f023 0301 	bic.w	r3, r3, #1
 8008e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008e1c:	4b53      	ldr	r3, [pc, #332]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e22:	4a52      	ldr	r2, [pc, #328]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008e24:	f023 0304 	bic.w	r3, r3, #4
 8008e28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d016      	beq.n	8008e62 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e34:	f7f9 ffec 	bl	8002e10 <HAL_GetTick>
 8008e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e3a:	e00a      	b.n	8008e52 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e3c:	f7f9 ffe8 	bl	8002e10 <HAL_GetTick>
 8008e40:	4602      	mov	r2, r0
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d901      	bls.n	8008e52 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008e4e:	2303      	movs	r3, #3
 8008e50:	e138      	b.n	80090c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e52:	4b46      	ldr	r3, [pc, #280]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e58:	f003 0302 	and.w	r3, r3, #2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d0ed      	beq.n	8008e3c <HAL_RCC_OscConfig+0x388>
 8008e60:	e015      	b.n	8008e8e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e62:	f7f9 ffd5 	bl	8002e10 <HAL_GetTick>
 8008e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e68:	e00a      	b.n	8008e80 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e6a:	f7f9 ffd1 	bl	8002e10 <HAL_GetTick>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d901      	bls.n	8008e80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	e121      	b.n	80090c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e80:	4b3a      	ldr	r3, [pc, #232]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e86:	f003 0302 	and.w	r3, r3, #2
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1ed      	bne.n	8008e6a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008e8e:	7ffb      	ldrb	r3, [r7, #31]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d105      	bne.n	8008ea0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e94:	4b35      	ldr	r3, [pc, #212]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e98:	4a34      	ldr	r2, [pc, #208]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 0320 	and.w	r3, r3, #32
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d03c      	beq.n	8008f26 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	699b      	ldr	r3, [r3, #24]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d01c      	beq.n	8008eee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008eb4:	4b2d      	ldr	r3, [pc, #180]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008eba:	4a2c      	ldr	r2, [pc, #176]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008ebc:	f043 0301 	orr.w	r3, r3, #1
 8008ec0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ec4:	f7f9 ffa4 	bl	8002e10 <HAL_GetTick>
 8008ec8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008eca:	e008      	b.n	8008ede <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ecc:	f7f9 ffa0 	bl	8002e10 <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d901      	bls.n	8008ede <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008eda:	2303      	movs	r3, #3
 8008edc:	e0f2      	b.n	80090c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008ede:	4b23      	ldr	r3, [pc, #140]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008ee0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ee4:	f003 0302 	and.w	r3, r3, #2
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d0ef      	beq.n	8008ecc <HAL_RCC_OscConfig+0x418>
 8008eec:	e01b      	b.n	8008f26 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008eee:	4b1f      	ldr	r3, [pc, #124]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008ef0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ef4:	4a1d      	ldr	r2, [pc, #116]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008ef6:	f023 0301 	bic.w	r3, r3, #1
 8008efa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008efe:	f7f9 ff87 	bl	8002e10 <HAL_GetTick>
 8008f02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008f04:	e008      	b.n	8008f18 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008f06:	f7f9 ff83 	bl	8002e10 <HAL_GetTick>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	1ad3      	subs	r3, r2, r3
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d901      	bls.n	8008f18 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008f14:	2303      	movs	r3, #3
 8008f16:	e0d5      	b.n	80090c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008f18:	4b14      	ldr	r3, [pc, #80]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008f1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f1e:	f003 0302 	and.w	r3, r3, #2
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1ef      	bne.n	8008f06 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	69db      	ldr	r3, [r3, #28]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f000 80c9 	beq.w	80090c2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f30:	4b0e      	ldr	r3, [pc, #56]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	f003 030c 	and.w	r3, r3, #12
 8008f38:	2b0c      	cmp	r3, #12
 8008f3a:	f000 8083 	beq.w	8009044 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	69db      	ldr	r3, [r3, #28]
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d15e      	bne.n	8009004 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f46:	4b09      	ldr	r3, [pc, #36]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a08      	ldr	r2, [pc, #32]	; (8008f6c <HAL_RCC_OscConfig+0x4b8>)
 8008f4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f52:	f7f9 ff5d 	bl	8002e10 <HAL_GetTick>
 8008f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f58:	e00c      	b.n	8008f74 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f5a:	f7f9 ff59 	bl	8002e10 <HAL_GetTick>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	1ad3      	subs	r3, r2, r3
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d905      	bls.n	8008f74 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e0ab      	b.n	80090c4 <HAL_RCC_OscConfig+0x610>
 8008f6c:	40021000 	.word	0x40021000
 8008f70:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f74:	4b55      	ldr	r3, [pc, #340]	; (80090cc <HAL_RCC_OscConfig+0x618>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d1ec      	bne.n	8008f5a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f80:	4b52      	ldr	r3, [pc, #328]	; (80090cc <HAL_RCC_OscConfig+0x618>)
 8008f82:	68da      	ldr	r2, [r3, #12]
 8008f84:	4b52      	ldr	r3, [pc, #328]	; (80090d0 <HAL_RCC_OscConfig+0x61c>)
 8008f86:	4013      	ands	r3, r2
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	6a11      	ldr	r1, [r2, #32]
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f90:	3a01      	subs	r2, #1
 8008f92:	0112      	lsls	r2, r2, #4
 8008f94:	4311      	orrs	r1, r2
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008f9a:	0212      	lsls	r2, r2, #8
 8008f9c:	4311      	orrs	r1, r2
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008fa2:	0852      	lsrs	r2, r2, #1
 8008fa4:	3a01      	subs	r2, #1
 8008fa6:	0552      	lsls	r2, r2, #21
 8008fa8:	4311      	orrs	r1, r2
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008fae:	0852      	lsrs	r2, r2, #1
 8008fb0:	3a01      	subs	r2, #1
 8008fb2:	0652      	lsls	r2, r2, #25
 8008fb4:	4311      	orrs	r1, r2
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008fba:	06d2      	lsls	r2, r2, #27
 8008fbc:	430a      	orrs	r2, r1
 8008fbe:	4943      	ldr	r1, [pc, #268]	; (80090cc <HAL_RCC_OscConfig+0x618>)
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008fc4:	4b41      	ldr	r3, [pc, #260]	; (80090cc <HAL_RCC_OscConfig+0x618>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a40      	ldr	r2, [pc, #256]	; (80090cc <HAL_RCC_OscConfig+0x618>)
 8008fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008fd0:	4b3e      	ldr	r3, [pc, #248]	; (80090cc <HAL_RCC_OscConfig+0x618>)
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	4a3d      	ldr	r2, [pc, #244]	; (80090cc <HAL_RCC_OscConfig+0x618>)
 8008fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fda:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fdc:	f7f9 ff18 	bl	8002e10 <HAL_GetTick>
 8008fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008fe2:	e008      	b.n	8008ff6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fe4:	f7f9 ff14 	bl	8002e10 <HAL_GetTick>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	1ad3      	subs	r3, r2, r3
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	d901      	bls.n	8008ff6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	e066      	b.n	80090c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ff6:	4b35      	ldr	r3, [pc, #212]	; (80090cc <HAL_RCC_OscConfig+0x618>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d0f0      	beq.n	8008fe4 <HAL_RCC_OscConfig+0x530>
 8009002:	e05e      	b.n	80090c2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009004:	4b31      	ldr	r3, [pc, #196]	; (80090cc <HAL_RCC_OscConfig+0x618>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a30      	ldr	r2, [pc, #192]	; (80090cc <HAL_RCC_OscConfig+0x618>)
 800900a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800900e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009010:	f7f9 fefe 	bl	8002e10 <HAL_GetTick>
 8009014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009016:	e008      	b.n	800902a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009018:	f7f9 fefa 	bl	8002e10 <HAL_GetTick>
 800901c:	4602      	mov	r2, r0
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	2b02      	cmp	r3, #2
 8009024:	d901      	bls.n	800902a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8009026:	2303      	movs	r3, #3
 8009028:	e04c      	b.n	80090c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800902a:	4b28      	ldr	r3, [pc, #160]	; (80090cc <HAL_RCC_OscConfig+0x618>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1f0      	bne.n	8009018 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009036:	4b25      	ldr	r3, [pc, #148]	; (80090cc <HAL_RCC_OscConfig+0x618>)
 8009038:	68da      	ldr	r2, [r3, #12]
 800903a:	4924      	ldr	r1, [pc, #144]	; (80090cc <HAL_RCC_OscConfig+0x618>)
 800903c:	4b25      	ldr	r3, [pc, #148]	; (80090d4 <HAL_RCC_OscConfig+0x620>)
 800903e:	4013      	ands	r3, r2
 8009040:	60cb      	str	r3, [r1, #12]
 8009042:	e03e      	b.n	80090c2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	69db      	ldr	r3, [r3, #28]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d101      	bne.n	8009050 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	e039      	b.n	80090c4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009050:	4b1e      	ldr	r3, [pc, #120]	; (80090cc <HAL_RCC_OscConfig+0x618>)
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	f003 0203 	and.w	r2, r3, #3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6a1b      	ldr	r3, [r3, #32]
 8009060:	429a      	cmp	r2, r3
 8009062:	d12c      	bne.n	80090be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906e:	3b01      	subs	r3, #1
 8009070:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009072:	429a      	cmp	r2, r3
 8009074:	d123      	bne.n	80090be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009080:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009082:	429a      	cmp	r2, r3
 8009084:	d11b      	bne.n	80090be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009090:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009092:	429a      	cmp	r2, r3
 8009094:	d113      	bne.n	80090be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a0:	085b      	lsrs	r3, r3, #1
 80090a2:	3b01      	subs	r3, #1
 80090a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d109      	bne.n	80090be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b4:	085b      	lsrs	r3, r3, #1
 80090b6:	3b01      	subs	r3, #1
 80090b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d001      	beq.n	80090c2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	e000      	b.n	80090c4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3720      	adds	r7, #32
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	40021000 	.word	0x40021000
 80090d0:	019f800c 	.word	0x019f800c
 80090d4:	feeefffc 	.word	0xfeeefffc

080090d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80090e2:	2300      	movs	r3, #0
 80090e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d101      	bne.n	80090f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e11e      	b.n	800932e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80090f0:	4b91      	ldr	r3, [pc, #580]	; (8009338 <HAL_RCC_ClockConfig+0x260>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 030f 	and.w	r3, r3, #15
 80090f8:	683a      	ldr	r2, [r7, #0]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d910      	bls.n	8009120 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090fe:	4b8e      	ldr	r3, [pc, #568]	; (8009338 <HAL_RCC_ClockConfig+0x260>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f023 020f 	bic.w	r2, r3, #15
 8009106:	498c      	ldr	r1, [pc, #560]	; (8009338 <HAL_RCC_ClockConfig+0x260>)
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	4313      	orrs	r3, r2
 800910c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800910e:	4b8a      	ldr	r3, [pc, #552]	; (8009338 <HAL_RCC_ClockConfig+0x260>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 030f 	and.w	r3, r3, #15
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	429a      	cmp	r2, r3
 800911a:	d001      	beq.n	8009120 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	e106      	b.n	800932e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 0301 	and.w	r3, r3, #1
 8009128:	2b00      	cmp	r3, #0
 800912a:	d073      	beq.n	8009214 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	2b03      	cmp	r3, #3
 8009132:	d129      	bne.n	8009188 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009134:	4b81      	ldr	r3, [pc, #516]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e0f4      	b.n	800932e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009144:	f000 f972 	bl	800942c <RCC_GetSysClockFreqFromPLLSource>
 8009148:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	4a7c      	ldr	r2, [pc, #496]	; (8009340 <HAL_RCC_ClockConfig+0x268>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d93f      	bls.n	80091d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009152:	4b7a      	ldr	r3, [pc, #488]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d009      	beq.n	8009172 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009166:	2b00      	cmp	r3, #0
 8009168:	d033      	beq.n	80091d2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800916e:	2b00      	cmp	r3, #0
 8009170:	d12f      	bne.n	80091d2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009172:	4b72      	ldr	r3, [pc, #456]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800917a:	4a70      	ldr	r2, [pc, #448]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 800917c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009180:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009182:	2380      	movs	r3, #128	; 0x80
 8009184:	617b      	str	r3, [r7, #20]
 8009186:	e024      	b.n	80091d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	2b02      	cmp	r3, #2
 800918e:	d107      	bne.n	80091a0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009190:	4b6a      	ldr	r3, [pc, #424]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009198:	2b00      	cmp	r3, #0
 800919a:	d109      	bne.n	80091b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	e0c6      	b.n	800932e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091a0:	4b66      	ldr	r3, [pc, #408]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d101      	bne.n	80091b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e0be      	b.n	800932e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80091b0:	f000 f8ce 	bl	8009350 <HAL_RCC_GetSysClockFreq>
 80091b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	4a61      	ldr	r2, [pc, #388]	; (8009340 <HAL_RCC_ClockConfig+0x268>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d909      	bls.n	80091d2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80091be:	4b5f      	ldr	r3, [pc, #380]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091c6:	4a5d      	ldr	r2, [pc, #372]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 80091c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80091ce:	2380      	movs	r3, #128	; 0x80
 80091d0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80091d2:	4b5a      	ldr	r3, [pc, #360]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f023 0203 	bic.w	r2, r3, #3
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	4957      	ldr	r1, [pc, #348]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 80091e0:	4313      	orrs	r3, r2
 80091e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091e4:	f7f9 fe14 	bl	8002e10 <HAL_GetTick>
 80091e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091ea:	e00a      	b.n	8009202 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091ec:	f7f9 fe10 	bl	8002e10 <HAL_GetTick>
 80091f0:	4602      	mov	r2, r0
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d901      	bls.n	8009202 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80091fe:	2303      	movs	r3, #3
 8009200:	e095      	b.n	800932e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009202:	4b4e      	ldr	r3, [pc, #312]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	f003 020c 	and.w	r2, r3, #12
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	429a      	cmp	r2, r3
 8009212:	d1eb      	bne.n	80091ec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0302 	and.w	r3, r3, #2
 800921c:	2b00      	cmp	r3, #0
 800921e:	d023      	beq.n	8009268 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0304 	and.w	r3, r3, #4
 8009228:	2b00      	cmp	r3, #0
 800922a:	d005      	beq.n	8009238 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800922c:	4b43      	ldr	r3, [pc, #268]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	4a42      	ldr	r2, [pc, #264]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 8009232:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009236:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 0308 	and.w	r3, r3, #8
 8009240:	2b00      	cmp	r3, #0
 8009242:	d007      	beq.n	8009254 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009244:	4b3d      	ldr	r3, [pc, #244]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800924c:	4a3b      	ldr	r2, [pc, #236]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 800924e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009252:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009254:	4b39      	ldr	r3, [pc, #228]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	4936      	ldr	r1, [pc, #216]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 8009262:	4313      	orrs	r3, r2
 8009264:	608b      	str	r3, [r1, #8]
 8009266:	e008      	b.n	800927a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	2b80      	cmp	r3, #128	; 0x80
 800926c:	d105      	bne.n	800927a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800926e:	4b33      	ldr	r3, [pc, #204]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	4a32      	ldr	r2, [pc, #200]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 8009274:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009278:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800927a:	4b2f      	ldr	r3, [pc, #188]	; (8009338 <HAL_RCC_ClockConfig+0x260>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 030f 	and.w	r3, r3, #15
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	429a      	cmp	r2, r3
 8009286:	d21d      	bcs.n	80092c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009288:	4b2b      	ldr	r3, [pc, #172]	; (8009338 <HAL_RCC_ClockConfig+0x260>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f023 020f 	bic.w	r2, r3, #15
 8009290:	4929      	ldr	r1, [pc, #164]	; (8009338 <HAL_RCC_ClockConfig+0x260>)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	4313      	orrs	r3, r2
 8009296:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009298:	f7f9 fdba 	bl	8002e10 <HAL_GetTick>
 800929c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800929e:	e00a      	b.n	80092b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092a0:	f7f9 fdb6 	bl	8002e10 <HAL_GetTick>
 80092a4:	4602      	mov	r2, r0
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d901      	bls.n	80092b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80092b2:	2303      	movs	r3, #3
 80092b4:	e03b      	b.n	800932e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092b6:	4b20      	ldr	r3, [pc, #128]	; (8009338 <HAL_RCC_ClockConfig+0x260>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f003 030f 	and.w	r3, r3, #15
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d1ed      	bne.n	80092a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 0304 	and.w	r3, r3, #4
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d008      	beq.n	80092e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80092d0:	4b1a      	ldr	r3, [pc, #104]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	4917      	ldr	r1, [pc, #92]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 80092de:	4313      	orrs	r3, r2
 80092e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 0308 	and.w	r3, r3, #8
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d009      	beq.n	8009302 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80092ee:	4b13      	ldr	r3, [pc, #76]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	00db      	lsls	r3, r3, #3
 80092fc:	490f      	ldr	r1, [pc, #60]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 80092fe:	4313      	orrs	r3, r2
 8009300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009302:	f000 f825 	bl	8009350 <HAL_RCC_GetSysClockFreq>
 8009306:	4602      	mov	r2, r0
 8009308:	4b0c      	ldr	r3, [pc, #48]	; (800933c <HAL_RCC_ClockConfig+0x264>)
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	091b      	lsrs	r3, r3, #4
 800930e:	f003 030f 	and.w	r3, r3, #15
 8009312:	490c      	ldr	r1, [pc, #48]	; (8009344 <HAL_RCC_ClockConfig+0x26c>)
 8009314:	5ccb      	ldrb	r3, [r1, r3]
 8009316:	f003 031f 	and.w	r3, r3, #31
 800931a:	fa22 f303 	lsr.w	r3, r2, r3
 800931e:	4a0a      	ldr	r2, [pc, #40]	; (8009348 <HAL_RCC_ClockConfig+0x270>)
 8009320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009322:	4b0a      	ldr	r3, [pc, #40]	; (800934c <HAL_RCC_ClockConfig+0x274>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4618      	mov	r0, r3
 8009328:	f7f9 fd26 	bl	8002d78 <HAL_InitTick>
 800932c:	4603      	mov	r3, r0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3718      	adds	r7, #24
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	40022000 	.word	0x40022000
 800933c:	40021000 	.word	0x40021000
 8009340:	04c4b400 	.word	0x04c4b400
 8009344:	08012ae8 	.word	0x08012ae8
 8009348:	2000000c 	.word	0x2000000c
 800934c:	20000010 	.word	0x20000010

08009350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009350:	b480      	push	{r7}
 8009352:	b087      	sub	sp, #28
 8009354:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009356:	4b2c      	ldr	r3, [pc, #176]	; (8009408 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	f003 030c 	and.w	r3, r3, #12
 800935e:	2b04      	cmp	r3, #4
 8009360:	d102      	bne.n	8009368 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009362:	4b2a      	ldr	r3, [pc, #168]	; (800940c <HAL_RCC_GetSysClockFreq+0xbc>)
 8009364:	613b      	str	r3, [r7, #16]
 8009366:	e047      	b.n	80093f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009368:	4b27      	ldr	r3, [pc, #156]	; (8009408 <HAL_RCC_GetSysClockFreq+0xb8>)
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	f003 030c 	and.w	r3, r3, #12
 8009370:	2b08      	cmp	r3, #8
 8009372:	d102      	bne.n	800937a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009374:	4b26      	ldr	r3, [pc, #152]	; (8009410 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009376:	613b      	str	r3, [r7, #16]
 8009378:	e03e      	b.n	80093f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800937a:	4b23      	ldr	r3, [pc, #140]	; (8009408 <HAL_RCC_GetSysClockFreq+0xb8>)
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	f003 030c 	and.w	r3, r3, #12
 8009382:	2b0c      	cmp	r3, #12
 8009384:	d136      	bne.n	80093f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009386:	4b20      	ldr	r3, [pc, #128]	; (8009408 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	f003 0303 	and.w	r3, r3, #3
 800938e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009390:	4b1d      	ldr	r3, [pc, #116]	; (8009408 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	091b      	lsrs	r3, r3, #4
 8009396:	f003 030f 	and.w	r3, r3, #15
 800939a:	3301      	adds	r3, #1
 800939c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2b03      	cmp	r3, #3
 80093a2:	d10c      	bne.n	80093be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80093a4:	4a1a      	ldr	r2, [pc, #104]	; (8009410 <HAL_RCC_GetSysClockFreq+0xc0>)
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ac:	4a16      	ldr	r2, [pc, #88]	; (8009408 <HAL_RCC_GetSysClockFreq+0xb8>)
 80093ae:	68d2      	ldr	r2, [r2, #12]
 80093b0:	0a12      	lsrs	r2, r2, #8
 80093b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80093b6:	fb02 f303 	mul.w	r3, r2, r3
 80093ba:	617b      	str	r3, [r7, #20]
      break;
 80093bc:	e00c      	b.n	80093d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80093be:	4a13      	ldr	r2, [pc, #76]	; (800940c <HAL_RCC_GetSysClockFreq+0xbc>)
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80093c6:	4a10      	ldr	r2, [pc, #64]	; (8009408 <HAL_RCC_GetSysClockFreq+0xb8>)
 80093c8:	68d2      	ldr	r2, [r2, #12]
 80093ca:	0a12      	lsrs	r2, r2, #8
 80093cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80093d0:	fb02 f303 	mul.w	r3, r2, r3
 80093d4:	617b      	str	r3, [r7, #20]
      break;
 80093d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80093d8:	4b0b      	ldr	r3, [pc, #44]	; (8009408 <HAL_RCC_GetSysClockFreq+0xb8>)
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	0e5b      	lsrs	r3, r3, #25
 80093de:	f003 0303 	and.w	r3, r3, #3
 80093e2:	3301      	adds	r3, #1
 80093e4:	005b      	lsls	r3, r3, #1
 80093e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80093e8:	697a      	ldr	r2, [r7, #20]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f0:	613b      	str	r3, [r7, #16]
 80093f2:	e001      	b.n	80093f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80093f4:	2300      	movs	r3, #0
 80093f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80093f8:	693b      	ldr	r3, [r7, #16]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	371c      	adds	r7, #28
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	40021000 	.word	0x40021000
 800940c:	00f42400 	.word	0x00f42400
 8009410:	007a1200 	.word	0x007a1200

08009414 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009414:	b480      	push	{r7}
 8009416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009418:	4b03      	ldr	r3, [pc, #12]	; (8009428 <HAL_RCC_GetHCLKFreq+0x14>)
 800941a:	681b      	ldr	r3, [r3, #0]
}
 800941c:	4618      	mov	r0, r3
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop
 8009428:	2000000c 	.word	0x2000000c

0800942c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800942c:	b480      	push	{r7}
 800942e:	b087      	sub	sp, #28
 8009430:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009432:	4b1e      	ldr	r3, [pc, #120]	; (80094ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	f003 0303 	and.w	r3, r3, #3
 800943a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800943c:	4b1b      	ldr	r3, [pc, #108]	; (80094ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	091b      	lsrs	r3, r3, #4
 8009442:	f003 030f 	and.w	r3, r3, #15
 8009446:	3301      	adds	r3, #1
 8009448:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	2b03      	cmp	r3, #3
 800944e:	d10c      	bne.n	800946a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009450:	4a17      	ldr	r2, [pc, #92]	; (80094b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	fbb2 f3f3 	udiv	r3, r2, r3
 8009458:	4a14      	ldr	r2, [pc, #80]	; (80094ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800945a:	68d2      	ldr	r2, [r2, #12]
 800945c:	0a12      	lsrs	r2, r2, #8
 800945e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009462:	fb02 f303 	mul.w	r3, r2, r3
 8009466:	617b      	str	r3, [r7, #20]
    break;
 8009468:	e00c      	b.n	8009484 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800946a:	4a12      	ldr	r2, [pc, #72]	; (80094b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009472:	4a0e      	ldr	r2, [pc, #56]	; (80094ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009474:	68d2      	ldr	r2, [r2, #12]
 8009476:	0a12      	lsrs	r2, r2, #8
 8009478:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800947c:	fb02 f303 	mul.w	r3, r2, r3
 8009480:	617b      	str	r3, [r7, #20]
    break;
 8009482:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009484:	4b09      	ldr	r3, [pc, #36]	; (80094ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	0e5b      	lsrs	r3, r3, #25
 800948a:	f003 0303 	and.w	r3, r3, #3
 800948e:	3301      	adds	r3, #1
 8009490:	005b      	lsls	r3, r3, #1
 8009492:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	fbb2 f3f3 	udiv	r3, r2, r3
 800949c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800949e:	687b      	ldr	r3, [r7, #4]
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	371c      	adds	r7, #28
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr
 80094ac:	40021000 	.word	0x40021000
 80094b0:	007a1200 	.word	0x007a1200
 80094b4:	00f42400 	.word	0x00f42400

080094b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b086      	sub	sp, #24
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80094c0:	2300      	movs	r3, #0
 80094c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80094c4:	2300      	movs	r3, #0
 80094c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f000 8098 	beq.w	8009606 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80094d6:	2300      	movs	r3, #0
 80094d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094da:	4b43      	ldr	r3, [pc, #268]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d10d      	bne.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094e6:	4b40      	ldr	r3, [pc, #256]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ea:	4a3f      	ldr	r2, [pc, #252]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094f0:	6593      	str	r3, [r2, #88]	; 0x58
 80094f2:	4b3d      	ldr	r3, [pc, #244]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094fa:	60bb      	str	r3, [r7, #8]
 80094fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80094fe:	2301      	movs	r3, #1
 8009500:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009502:	4b3a      	ldr	r3, [pc, #232]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a39      	ldr	r2, [pc, #228]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800950c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800950e:	f7f9 fc7f 	bl	8002e10 <HAL_GetTick>
 8009512:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009514:	e009      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009516:	f7f9 fc7b 	bl	8002e10 <HAL_GetTick>
 800951a:	4602      	mov	r2, r0
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	1ad3      	subs	r3, r2, r3
 8009520:	2b02      	cmp	r3, #2
 8009522:	d902      	bls.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009524:	2303      	movs	r3, #3
 8009526:	74fb      	strb	r3, [r7, #19]
        break;
 8009528:	e005      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800952a:	4b30      	ldr	r3, [pc, #192]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009532:	2b00      	cmp	r3, #0
 8009534:	d0ef      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009536:	7cfb      	ldrb	r3, [r7, #19]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d159      	bne.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800953c:	4b2a      	ldr	r3, [pc, #168]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800953e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009546:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d01e      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009552:	697a      	ldr	r2, [r7, #20]
 8009554:	429a      	cmp	r2, r3
 8009556:	d019      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009558:	4b23      	ldr	r3, [pc, #140]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800955a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800955e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009562:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009564:	4b20      	ldr	r3, [pc, #128]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800956a:	4a1f      	ldr	r2, [pc, #124]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800956c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009574:	4b1c      	ldr	r3, [pc, #112]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800957a:	4a1b      	ldr	r2, [pc, #108]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800957c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009584:	4a18      	ldr	r2, [pc, #96]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	f003 0301 	and.w	r3, r3, #1
 8009592:	2b00      	cmp	r3, #0
 8009594:	d016      	beq.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009596:	f7f9 fc3b 	bl	8002e10 <HAL_GetTick>
 800959a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800959c:	e00b      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800959e:	f7f9 fc37 	bl	8002e10 <HAL_GetTick>
 80095a2:	4602      	mov	r2, r0
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d902      	bls.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80095b0:	2303      	movs	r3, #3
 80095b2:	74fb      	strb	r3, [r7, #19]
            break;
 80095b4:	e006      	b.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80095b6:	4b0c      	ldr	r3, [pc, #48]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095bc:	f003 0302 	and.w	r3, r3, #2
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d0ec      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80095c4:	7cfb      	ldrb	r3, [r7, #19]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10b      	bne.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095ca:	4b07      	ldr	r3, [pc, #28]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095d8:	4903      	ldr	r1, [pc, #12]	; (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80095e0:	e008      	b.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80095e2:	7cfb      	ldrb	r3, [r7, #19]
 80095e4:	74bb      	strb	r3, [r7, #18]
 80095e6:	e005      	b.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80095e8:	40021000 	.word	0x40021000
 80095ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095f0:	7cfb      	ldrb	r3, [r7, #19]
 80095f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80095f4:	7c7b      	ldrb	r3, [r7, #17]
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d105      	bne.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80095fa:	4ba7      	ldr	r3, [pc, #668]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095fe:	4aa6      	ldr	r2, [pc, #664]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009604:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00a      	beq.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009612:	4ba1      	ldr	r3, [pc, #644]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009618:	f023 0203 	bic.w	r2, r3, #3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	499d      	ldr	r1, [pc, #628]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009622:	4313      	orrs	r3, r2
 8009624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f003 0302 	and.w	r3, r3, #2
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00a      	beq.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009634:	4b98      	ldr	r3, [pc, #608]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800963a:	f023 020c 	bic.w	r2, r3, #12
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	4995      	ldr	r1, [pc, #596]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009644:	4313      	orrs	r3, r2
 8009646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0304 	and.w	r3, r3, #4
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00a      	beq.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009656:	4b90      	ldr	r3, [pc, #576]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800965c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	498c      	ldr	r1, [pc, #560]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009666:	4313      	orrs	r3, r2
 8009668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 0308 	and.w	r3, r3, #8
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00a      	beq.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009678:	4b87      	ldr	r3, [pc, #540]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800967a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800967e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	691b      	ldr	r3, [r3, #16]
 8009686:	4984      	ldr	r1, [pc, #528]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009688:	4313      	orrs	r3, r2
 800968a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f003 0310 	and.w	r3, r3, #16
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00a      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800969a:	4b7f      	ldr	r3, [pc, #508]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800969c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	695b      	ldr	r3, [r3, #20]
 80096a8:	497b      	ldr	r1, [pc, #492]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096aa:	4313      	orrs	r3, r2
 80096ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 0320 	and.w	r3, r3, #32
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00a      	beq.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80096bc:	4b76      	ldr	r3, [pc, #472]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	699b      	ldr	r3, [r3, #24]
 80096ca:	4973      	ldr	r1, [pc, #460]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096cc:	4313      	orrs	r3, r2
 80096ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00a      	beq.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80096de:	4b6e      	ldr	r3, [pc, #440]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	69db      	ldr	r3, [r3, #28]
 80096ec:	496a      	ldr	r1, [pc, #424]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096ee:	4313      	orrs	r3, r2
 80096f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d00a      	beq.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009700:	4b65      	ldr	r3, [pc, #404]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009706:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a1b      	ldr	r3, [r3, #32]
 800970e:	4962      	ldr	r1, [pc, #392]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009710:	4313      	orrs	r3, r2
 8009712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00a      	beq.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009722:	4b5d      	ldr	r3, [pc, #372]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009728:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009730:	4959      	ldr	r1, [pc, #356]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009732:	4313      	orrs	r3, r2
 8009734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00a      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009744:	4b54      	ldr	r3, [pc, #336]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009746:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800974a:	f023 0203 	bic.w	r2, r3, #3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009752:	4951      	ldr	r1, [pc, #324]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009754:	4313      	orrs	r3, r2
 8009756:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00a      	beq.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009766:	4b4c      	ldr	r3, [pc, #304]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800976c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009774:	4948      	ldr	r1, [pc, #288]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009776:	4313      	orrs	r3, r2
 8009778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009784:	2b00      	cmp	r3, #0
 8009786:	d015      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009788:	4b43      	ldr	r3, [pc, #268]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800978a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800978e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009796:	4940      	ldr	r1, [pc, #256]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009798:	4313      	orrs	r3, r2
 800979a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097a6:	d105      	bne.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80097a8:	4b3b      	ldr	r3, [pc, #236]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	4a3a      	ldr	r2, [pc, #232]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d015      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80097c0:	4b35      	ldr	r3, [pc, #212]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ce:	4932      	ldr	r1, [pc, #200]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097d0:	4313      	orrs	r3, r2
 80097d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097de:	d105      	bne.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80097e0:	4b2d      	ldr	r3, [pc, #180]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	4a2c      	ldr	r2, [pc, #176]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097ea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d015      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80097f8:	4b27      	ldr	r3, [pc, #156]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009806:	4924      	ldr	r1, [pc, #144]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009808:	4313      	orrs	r3, r2
 800980a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009812:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009816:	d105      	bne.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009818:	4b1f      	ldr	r3, [pc, #124]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	4a1e      	ldr	r2, [pc, #120]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800981e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009822:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800982c:	2b00      	cmp	r3, #0
 800982e:	d015      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009830:	4b19      	ldr	r3, [pc, #100]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009836:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800983e:	4916      	ldr	r1, [pc, #88]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009840:	4313      	orrs	r3, r2
 8009842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800984a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800984e:	d105      	bne.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009850:	4b11      	ldr	r3, [pc, #68]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	4a10      	ldr	r2, [pc, #64]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800985a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d019      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009868:	4b0b      	ldr	r3, [pc, #44]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800986a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800986e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009876:	4908      	ldr	r1, [pc, #32]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009878:	4313      	orrs	r3, r2
 800987a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009882:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009886:	d109      	bne.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009888:	4b03      	ldr	r3, [pc, #12]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	4a02      	ldr	r2, [pc, #8]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800988e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009892:	60d3      	str	r3, [r2, #12]
 8009894:	e002      	b.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009896:	bf00      	nop
 8009898:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d015      	beq.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80098a8:	4b29      	ldr	r3, [pc, #164]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098b6:	4926      	ldr	r1, [pc, #152]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098b8:	4313      	orrs	r3, r2
 80098ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098c6:	d105      	bne.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80098c8:	4b21      	ldr	r3, [pc, #132]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	4a20      	ldr	r2, [pc, #128]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098d2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d015      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80098e0:	4b1b      	ldr	r3, [pc, #108]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098e6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098ee:	4918      	ldr	r1, [pc, #96]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098f0:	4313      	orrs	r3, r2
 80098f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098fe:	d105      	bne.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009900:	4b13      	ldr	r3, [pc, #76]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	4a12      	ldr	r2, [pc, #72]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800990a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009914:	2b00      	cmp	r3, #0
 8009916:	d015      	beq.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009918:	4b0d      	ldr	r3, [pc, #52]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800991a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800991e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009926:	490a      	ldr	r1, [pc, #40]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009928:	4313      	orrs	r3, r2
 800992a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009932:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009936:	d105      	bne.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009938:	4b05      	ldr	r3, [pc, #20]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	4a04      	ldr	r2, [pc, #16]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800993e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009942:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009944:	7cbb      	ldrb	r3, [r7, #18]
}
 8009946:	4618      	mov	r0, r3
 8009948:	3718      	adds	r7, #24
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	40021000 	.word	0x40021000

08009954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d101      	bne.n	8009966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e049      	b.n	80099fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d106      	bne.n	8009980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7f9 f846 	bl	8002a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2202      	movs	r2, #2
 8009984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	3304      	adds	r3, #4
 8009990:	4619      	mov	r1, r3
 8009992:	4610      	mov	r0, r2
 8009994:	f000 f9f4 	bl	8009d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2201      	movs	r2, #1
 80099f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3708      	adds	r7, #8
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
	...

08009a04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d001      	beq.n	8009a1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e054      	b.n	8009ac6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2202      	movs	r2, #2
 8009a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68da      	ldr	r2, [r3, #12]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f042 0201 	orr.w	r2, r2, #1
 8009a32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a26      	ldr	r2, [pc, #152]	; (8009ad4 <HAL_TIM_Base_Start_IT+0xd0>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d022      	beq.n	8009a84 <HAL_TIM_Base_Start_IT+0x80>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a46:	d01d      	beq.n	8009a84 <HAL_TIM_Base_Start_IT+0x80>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a22      	ldr	r2, [pc, #136]	; (8009ad8 <HAL_TIM_Base_Start_IT+0xd4>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d018      	beq.n	8009a84 <HAL_TIM_Base_Start_IT+0x80>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a21      	ldr	r2, [pc, #132]	; (8009adc <HAL_TIM_Base_Start_IT+0xd8>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d013      	beq.n	8009a84 <HAL_TIM_Base_Start_IT+0x80>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a1f      	ldr	r2, [pc, #124]	; (8009ae0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d00e      	beq.n	8009a84 <HAL_TIM_Base_Start_IT+0x80>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a1e      	ldr	r2, [pc, #120]	; (8009ae4 <HAL_TIM_Base_Start_IT+0xe0>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d009      	beq.n	8009a84 <HAL_TIM_Base_Start_IT+0x80>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a1c      	ldr	r2, [pc, #112]	; (8009ae8 <HAL_TIM_Base_Start_IT+0xe4>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d004      	beq.n	8009a84 <HAL_TIM_Base_Start_IT+0x80>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a1b      	ldr	r2, [pc, #108]	; (8009aec <HAL_TIM_Base_Start_IT+0xe8>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d115      	bne.n	8009ab0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	689a      	ldr	r2, [r3, #8]
 8009a8a:	4b19      	ldr	r3, [pc, #100]	; (8009af0 <HAL_TIM_Base_Start_IT+0xec>)
 8009a8c:	4013      	ands	r3, r2
 8009a8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2b06      	cmp	r3, #6
 8009a94:	d015      	beq.n	8009ac2 <HAL_TIM_Base_Start_IT+0xbe>
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a9c:	d011      	beq.n	8009ac2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f042 0201 	orr.w	r2, r2, #1
 8009aac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aae:	e008      	b.n	8009ac2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f042 0201 	orr.w	r2, r2, #1
 8009abe:	601a      	str	r2, [r3, #0]
 8009ac0:	e000      	b.n	8009ac4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ac2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3714      	adds	r7, #20
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	40012c00 	.word	0x40012c00
 8009ad8:	40000400 	.word	0x40000400
 8009adc:	40000800 	.word	0x40000800
 8009ae0:	40000c00 	.word	0x40000c00
 8009ae4:	40013400 	.word	0x40013400
 8009ae8:	40014000 	.word	0x40014000
 8009aec:	40015000 	.word	0x40015000
 8009af0:	00010007 	.word	0x00010007

08009af4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	68da      	ldr	r2, [r3, #12]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f022 0201 	bic.w	r2, r2, #1
 8009b0a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6a1a      	ldr	r2, [r3, #32]
 8009b12:	f241 1311 	movw	r3, #4369	; 0x1111
 8009b16:	4013      	ands	r3, r2
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10f      	bne.n	8009b3c <HAL_TIM_Base_Stop_IT+0x48>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6a1a      	ldr	r2, [r3, #32]
 8009b22:	f244 4344 	movw	r3, #17476	; 0x4444
 8009b26:	4013      	ands	r3, r2
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d107      	bne.n	8009b3c <HAL_TIM_Base_Stop_IT+0x48>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f022 0201 	bic.w	r2, r2, #1
 8009b3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	370c      	adds	r7, #12
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr
	...

08009b54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d101      	bne.n	8009b70 <HAL_TIM_ConfigClockSource+0x1c>
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	e0f6      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x20a>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2202      	movs	r2, #2
 8009b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009b8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009b92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	68ba      	ldr	r2, [r7, #8]
 8009ba2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a6f      	ldr	r2, [pc, #444]	; (8009d68 <HAL_TIM_ConfigClockSource+0x214>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	f000 80c1 	beq.w	8009d32 <HAL_TIM_ConfigClockSource+0x1de>
 8009bb0:	4a6d      	ldr	r2, [pc, #436]	; (8009d68 <HAL_TIM_ConfigClockSource+0x214>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	f200 80c6 	bhi.w	8009d44 <HAL_TIM_ConfigClockSource+0x1f0>
 8009bb8:	4a6c      	ldr	r2, [pc, #432]	; (8009d6c <HAL_TIM_ConfigClockSource+0x218>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	f000 80b9 	beq.w	8009d32 <HAL_TIM_ConfigClockSource+0x1de>
 8009bc0:	4a6a      	ldr	r2, [pc, #424]	; (8009d6c <HAL_TIM_ConfigClockSource+0x218>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	f200 80be 	bhi.w	8009d44 <HAL_TIM_ConfigClockSource+0x1f0>
 8009bc8:	4a69      	ldr	r2, [pc, #420]	; (8009d70 <HAL_TIM_ConfigClockSource+0x21c>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	f000 80b1 	beq.w	8009d32 <HAL_TIM_ConfigClockSource+0x1de>
 8009bd0:	4a67      	ldr	r2, [pc, #412]	; (8009d70 <HAL_TIM_ConfigClockSource+0x21c>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	f200 80b6 	bhi.w	8009d44 <HAL_TIM_ConfigClockSource+0x1f0>
 8009bd8:	4a66      	ldr	r2, [pc, #408]	; (8009d74 <HAL_TIM_ConfigClockSource+0x220>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	f000 80a9 	beq.w	8009d32 <HAL_TIM_ConfigClockSource+0x1de>
 8009be0:	4a64      	ldr	r2, [pc, #400]	; (8009d74 <HAL_TIM_ConfigClockSource+0x220>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	f200 80ae 	bhi.w	8009d44 <HAL_TIM_ConfigClockSource+0x1f0>
 8009be8:	4a63      	ldr	r2, [pc, #396]	; (8009d78 <HAL_TIM_ConfigClockSource+0x224>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	f000 80a1 	beq.w	8009d32 <HAL_TIM_ConfigClockSource+0x1de>
 8009bf0:	4a61      	ldr	r2, [pc, #388]	; (8009d78 <HAL_TIM_ConfigClockSource+0x224>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	f200 80a6 	bhi.w	8009d44 <HAL_TIM_ConfigClockSource+0x1f0>
 8009bf8:	4a60      	ldr	r2, [pc, #384]	; (8009d7c <HAL_TIM_ConfigClockSource+0x228>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	f000 8099 	beq.w	8009d32 <HAL_TIM_ConfigClockSource+0x1de>
 8009c00:	4a5e      	ldr	r2, [pc, #376]	; (8009d7c <HAL_TIM_ConfigClockSource+0x228>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	f200 809e 	bhi.w	8009d44 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c08:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009c0c:	f000 8091 	beq.w	8009d32 <HAL_TIM_ConfigClockSource+0x1de>
 8009c10:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009c14:	f200 8096 	bhi.w	8009d44 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c1c:	f000 8089 	beq.w	8009d32 <HAL_TIM_ConfigClockSource+0x1de>
 8009c20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c24:	f200 808e 	bhi.w	8009d44 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c2c:	d03e      	beq.n	8009cac <HAL_TIM_ConfigClockSource+0x158>
 8009c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c32:	f200 8087 	bhi.w	8009d44 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c3a:	f000 8086 	beq.w	8009d4a <HAL_TIM_ConfigClockSource+0x1f6>
 8009c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c42:	d87f      	bhi.n	8009d44 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c44:	2b70      	cmp	r3, #112	; 0x70
 8009c46:	d01a      	beq.n	8009c7e <HAL_TIM_ConfigClockSource+0x12a>
 8009c48:	2b70      	cmp	r3, #112	; 0x70
 8009c4a:	d87b      	bhi.n	8009d44 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c4c:	2b60      	cmp	r3, #96	; 0x60
 8009c4e:	d050      	beq.n	8009cf2 <HAL_TIM_ConfigClockSource+0x19e>
 8009c50:	2b60      	cmp	r3, #96	; 0x60
 8009c52:	d877      	bhi.n	8009d44 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c54:	2b50      	cmp	r3, #80	; 0x50
 8009c56:	d03c      	beq.n	8009cd2 <HAL_TIM_ConfigClockSource+0x17e>
 8009c58:	2b50      	cmp	r3, #80	; 0x50
 8009c5a:	d873      	bhi.n	8009d44 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c5c:	2b40      	cmp	r3, #64	; 0x40
 8009c5e:	d058      	beq.n	8009d12 <HAL_TIM_ConfigClockSource+0x1be>
 8009c60:	2b40      	cmp	r3, #64	; 0x40
 8009c62:	d86f      	bhi.n	8009d44 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c64:	2b30      	cmp	r3, #48	; 0x30
 8009c66:	d064      	beq.n	8009d32 <HAL_TIM_ConfigClockSource+0x1de>
 8009c68:	2b30      	cmp	r3, #48	; 0x30
 8009c6a:	d86b      	bhi.n	8009d44 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c6c:	2b20      	cmp	r3, #32
 8009c6e:	d060      	beq.n	8009d32 <HAL_TIM_ConfigClockSource+0x1de>
 8009c70:	2b20      	cmp	r3, #32
 8009c72:	d867      	bhi.n	8009d44 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d05c      	beq.n	8009d32 <HAL_TIM_ConfigClockSource+0x1de>
 8009c78:	2b10      	cmp	r3, #16
 8009c7a:	d05a      	beq.n	8009d32 <HAL_TIM_ConfigClockSource+0x1de>
 8009c7c:	e062      	b.n	8009d44 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c8e:	f000 f9a7 	bl	8009fe0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009ca0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68ba      	ldr	r2, [r7, #8]
 8009ca8:	609a      	str	r2, [r3, #8]
      break;
 8009caa:	e04f      	b.n	8009d4c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009cbc:	f000 f990 	bl	8009fe0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	689a      	ldr	r2, [r3, #8]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009cce:	609a      	str	r2, [r3, #8]
      break;
 8009cd0:	e03c      	b.n	8009d4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cde:	461a      	mov	r2, r3
 8009ce0:	f000 f902 	bl	8009ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2150      	movs	r1, #80	; 0x50
 8009cea:	4618      	mov	r0, r3
 8009cec:	f000 f95b 	bl	8009fa6 <TIM_ITRx_SetConfig>
      break;
 8009cf0:	e02c      	b.n	8009d4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cfe:	461a      	mov	r2, r3
 8009d00:	f000 f921 	bl	8009f46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2160      	movs	r1, #96	; 0x60
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f000 f94b 	bl	8009fa6 <TIM_ITRx_SetConfig>
      break;
 8009d10:	e01c      	b.n	8009d4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d1e:	461a      	mov	r2, r3
 8009d20:	f000 f8e2 	bl	8009ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2140      	movs	r1, #64	; 0x40
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f000 f93b 	bl	8009fa6 <TIM_ITRx_SetConfig>
      break;
 8009d30:	e00c      	b.n	8009d4c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	f000 f932 	bl	8009fa6 <TIM_ITRx_SetConfig>
      break;
 8009d42:	e003      	b.n	8009d4c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009d44:	2301      	movs	r3, #1
 8009d46:	73fb      	strb	r3, [r7, #15]
      break;
 8009d48:	e000      	b.n	8009d4c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009d4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	00100070 	.word	0x00100070
 8009d6c:	00100060 	.word	0x00100060
 8009d70:	00100050 	.word	0x00100050
 8009d74:	00100040 	.word	0x00100040
 8009d78:	00100030 	.word	0x00100030
 8009d7c:	00100020 	.word	0x00100020

08009d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4a4c      	ldr	r2, [pc, #304]	; (8009ec4 <TIM_Base_SetConfig+0x144>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d017      	beq.n	8009dc8 <TIM_Base_SetConfig+0x48>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d9e:	d013      	beq.n	8009dc8 <TIM_Base_SetConfig+0x48>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a49      	ldr	r2, [pc, #292]	; (8009ec8 <TIM_Base_SetConfig+0x148>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d00f      	beq.n	8009dc8 <TIM_Base_SetConfig+0x48>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a48      	ldr	r2, [pc, #288]	; (8009ecc <TIM_Base_SetConfig+0x14c>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d00b      	beq.n	8009dc8 <TIM_Base_SetConfig+0x48>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a47      	ldr	r2, [pc, #284]	; (8009ed0 <TIM_Base_SetConfig+0x150>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d007      	beq.n	8009dc8 <TIM_Base_SetConfig+0x48>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a46      	ldr	r2, [pc, #280]	; (8009ed4 <TIM_Base_SetConfig+0x154>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d003      	beq.n	8009dc8 <TIM_Base_SetConfig+0x48>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a45      	ldr	r2, [pc, #276]	; (8009ed8 <TIM_Base_SetConfig+0x158>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d108      	bne.n	8009dda <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a39      	ldr	r2, [pc, #228]	; (8009ec4 <TIM_Base_SetConfig+0x144>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d023      	beq.n	8009e2a <TIM_Base_SetConfig+0xaa>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009de8:	d01f      	beq.n	8009e2a <TIM_Base_SetConfig+0xaa>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a36      	ldr	r2, [pc, #216]	; (8009ec8 <TIM_Base_SetConfig+0x148>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d01b      	beq.n	8009e2a <TIM_Base_SetConfig+0xaa>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4a35      	ldr	r2, [pc, #212]	; (8009ecc <TIM_Base_SetConfig+0x14c>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d017      	beq.n	8009e2a <TIM_Base_SetConfig+0xaa>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a34      	ldr	r2, [pc, #208]	; (8009ed0 <TIM_Base_SetConfig+0x150>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d013      	beq.n	8009e2a <TIM_Base_SetConfig+0xaa>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a33      	ldr	r2, [pc, #204]	; (8009ed4 <TIM_Base_SetConfig+0x154>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d00f      	beq.n	8009e2a <TIM_Base_SetConfig+0xaa>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4a33      	ldr	r2, [pc, #204]	; (8009edc <TIM_Base_SetConfig+0x15c>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d00b      	beq.n	8009e2a <TIM_Base_SetConfig+0xaa>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a32      	ldr	r2, [pc, #200]	; (8009ee0 <TIM_Base_SetConfig+0x160>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d007      	beq.n	8009e2a <TIM_Base_SetConfig+0xaa>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a31      	ldr	r2, [pc, #196]	; (8009ee4 <TIM_Base_SetConfig+0x164>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d003      	beq.n	8009e2a <TIM_Base_SetConfig+0xaa>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a2c      	ldr	r2, [pc, #176]	; (8009ed8 <TIM_Base_SetConfig+0x158>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d108      	bne.n	8009e3c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	695b      	ldr	r3, [r3, #20]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	689a      	ldr	r2, [r3, #8]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4a18      	ldr	r2, [pc, #96]	; (8009ec4 <TIM_Base_SetConfig+0x144>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d013      	beq.n	8009e90 <TIM_Base_SetConfig+0x110>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4a1a      	ldr	r2, [pc, #104]	; (8009ed4 <TIM_Base_SetConfig+0x154>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d00f      	beq.n	8009e90 <TIM_Base_SetConfig+0x110>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4a1a      	ldr	r2, [pc, #104]	; (8009edc <TIM_Base_SetConfig+0x15c>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d00b      	beq.n	8009e90 <TIM_Base_SetConfig+0x110>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4a19      	ldr	r2, [pc, #100]	; (8009ee0 <TIM_Base_SetConfig+0x160>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d007      	beq.n	8009e90 <TIM_Base_SetConfig+0x110>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a18      	ldr	r2, [pc, #96]	; (8009ee4 <TIM_Base_SetConfig+0x164>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d003      	beq.n	8009e90 <TIM_Base_SetConfig+0x110>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a13      	ldr	r2, [pc, #76]	; (8009ed8 <TIM_Base_SetConfig+0x158>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d103      	bne.n	8009e98 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	691a      	ldr	r2, [r3, #16]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	691b      	ldr	r3, [r3, #16]
 8009ea2:	f003 0301 	and.w	r3, r3, #1
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d105      	bne.n	8009eb6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	f023 0201 	bic.w	r2, r3, #1
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	611a      	str	r2, [r3, #16]
  }
}
 8009eb6:	bf00      	nop
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	40012c00 	.word	0x40012c00
 8009ec8:	40000400 	.word	0x40000400
 8009ecc:	40000800 	.word	0x40000800
 8009ed0:	40000c00 	.word	0x40000c00
 8009ed4:	40013400 	.word	0x40013400
 8009ed8:	40015000 	.word	0x40015000
 8009edc:	40014000 	.word	0x40014000
 8009ee0:	40014400 	.word	0x40014400
 8009ee4:	40014800 	.word	0x40014800

08009ee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b087      	sub	sp, #28
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6a1b      	ldr	r3, [r3, #32]
 8009ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6a1b      	ldr	r3, [r3, #32]
 8009efe:	f023 0201 	bic.w	r2, r3, #1
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	011b      	lsls	r3, r3, #4
 8009f18:	693a      	ldr	r2, [r7, #16]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	f023 030a 	bic.w	r3, r3, #10
 8009f24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f26:	697a      	ldr	r2, [r7, #20]
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	697a      	ldr	r2, [r7, #20]
 8009f38:	621a      	str	r2, [r3, #32]
}
 8009f3a:	bf00      	nop
 8009f3c:	371c      	adds	r7, #28
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr

08009f46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f46:	b480      	push	{r7}
 8009f48:	b087      	sub	sp, #28
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	60f8      	str	r0, [r7, #12]
 8009f4e:	60b9      	str	r1, [r7, #8]
 8009f50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6a1b      	ldr	r3, [r3, #32]
 8009f56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6a1b      	ldr	r3, [r3, #32]
 8009f5c:	f023 0210 	bic.w	r2, r3, #16
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	031b      	lsls	r3, r3, #12
 8009f76:	693a      	ldr	r2, [r7, #16]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	011b      	lsls	r3, r3, #4
 8009f88:	697a      	ldr	r2, [r7, #20]
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	697a      	ldr	r2, [r7, #20]
 8009f98:	621a      	str	r2, [r3, #32]
}
 8009f9a:	bf00      	nop
 8009f9c:	371c      	adds	r7, #28
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009fa6:	b480      	push	{r7}
 8009fa8:	b085      	sub	sp, #20
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
 8009fae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	f043 0307 	orr.w	r3, r3, #7
 8009fcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	609a      	str	r2, [r3, #8]
}
 8009fd4:	bf00      	nop
 8009fd6:	3714      	adds	r7, #20
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b087      	sub	sp, #28
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]
 8009fec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ffa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	021a      	lsls	r2, r3, #8
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	431a      	orrs	r2, r3
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	4313      	orrs	r3, r2
 800a008:	697a      	ldr	r2, [r7, #20]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	697a      	ldr	r2, [r7, #20]
 800a012:	609a      	str	r2, [r3, #8]
}
 800a014:	bf00      	nop
 800a016:	371c      	adds	r7, #28
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a020:	b480      	push	{r7}
 800a022:	b085      	sub	sp, #20
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a030:	2b01      	cmp	r3, #1
 800a032:	d101      	bne.n	800a038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a034:	2302      	movs	r3, #2
 800a036:	e074      	b.n	800a122 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2201      	movs	r2, #1
 800a03c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2202      	movs	r2, #2
 800a044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a34      	ldr	r2, [pc, #208]	; (800a130 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d009      	beq.n	800a076 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a33      	ldr	r2, [pc, #204]	; (800a134 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d004      	beq.n	800a076 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a31      	ldr	r2, [pc, #196]	; (800a138 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d108      	bne.n	800a088 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a07c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	4313      	orrs	r3, r2
 800a086:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a08e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	68fa      	ldr	r2, [r7, #12]
 800a09a:	4313      	orrs	r3, r2
 800a09c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a21      	ldr	r2, [pc, #132]	; (800a130 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d022      	beq.n	800a0f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0b8:	d01d      	beq.n	800a0f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a1f      	ldr	r2, [pc, #124]	; (800a13c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d018      	beq.n	800a0f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a1d      	ldr	r2, [pc, #116]	; (800a140 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d013      	beq.n	800a0f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a1c      	ldr	r2, [pc, #112]	; (800a144 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d00e      	beq.n	800a0f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a15      	ldr	r2, [pc, #84]	; (800a134 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d009      	beq.n	800a0f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a18      	ldr	r2, [pc, #96]	; (800a148 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d004      	beq.n	800a0f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a11      	ldr	r2, [pc, #68]	; (800a138 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d10c      	bne.n	800a110 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	4313      	orrs	r3, r2
 800a106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	68ba      	ldr	r2, [r7, #8]
 800a10e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3714      	adds	r7, #20
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	40012c00 	.word	0x40012c00
 800a134:	40013400 	.word	0x40013400
 800a138:	40015000 	.word	0x40015000
 800a13c:	40000400 	.word	0x40000400
 800a140:	40000800 	.word	0x40000800
 800a144:	40000c00 	.word	0x40000c00
 800a148:	40014000 	.word	0x40014000

0800a14c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a15c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a160:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	b29a      	uxth	r2, r3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3714      	adds	r7, #20
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr

0800a17a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a17a:	b480      	push	{r7}
 800a17c:	b085      	sub	sp, #20
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a182:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a186:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a18e:	b29a      	uxth	r2, r3
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	b29b      	uxth	r3, r3
 800a194:	43db      	mvns	r3, r3
 800a196:	b29b      	uxth	r3, r3
 800a198:	4013      	ands	r3, r2
 800a19a:	b29a      	uxth	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3714      	adds	r7, #20
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	1d3b      	adds	r3, r7, #4
 800a1ba:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3714      	adds	r7, #20
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b09d      	sub	sp, #116	; 0x74
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	4413      	add	r3, r2
 800a206:	881b      	ldrh	r3, [r3, #0]
 800a208:	b29b      	uxth	r3, r3
 800a20a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a20e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a212:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	78db      	ldrb	r3, [r3, #3]
 800a21a:	2b03      	cmp	r3, #3
 800a21c:	d81f      	bhi.n	800a25e <USB_ActivateEndpoint+0x72>
 800a21e:	a201      	add	r2, pc, #4	; (adr r2, 800a224 <USB_ActivateEndpoint+0x38>)
 800a220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a224:	0800a235 	.word	0x0800a235
 800a228:	0800a251 	.word	0x0800a251
 800a22c:	0800a267 	.word	0x0800a267
 800a230:	0800a243 	.word	0x0800a243
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a234:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a238:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a23c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a240:	e012      	b.n	800a268 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a242:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a246:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a24a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a24e:	e00b      	b.n	800a268 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a250:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a254:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a258:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a25c:	e004      	b.n	800a268 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a264:	e000      	b.n	800a268 <USB_ActivateEndpoint+0x7c>
      break;
 800a266:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	441a      	add	r2, r3
 800a272:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a276:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a27a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a27e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a286:	b29b      	uxth	r3, r3
 800a288:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	4413      	add	r3, r2
 800a294:	881b      	ldrh	r3, [r3, #0]
 800a296:	b29b      	uxth	r3, r3
 800a298:	b21b      	sxth	r3, r3
 800a29a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a29e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2a2:	b21a      	sxth	r2, r3
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	b21b      	sxth	r3, r3
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	b21b      	sxth	r3, r3
 800a2ae:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	441a      	add	r2, r3
 800a2bc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a2c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	7b1b      	ldrb	r3, [r3, #12]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f040 8178 	bne.w	800a5ce <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	785b      	ldrb	r3, [r3, #1]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f000 8084 	beq.w	800a3f0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	61bb      	str	r3, [r7, #24]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	61bb      	str	r3, [r7, #24]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	00da      	lsls	r2, r3, #3
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	4413      	add	r3, r2
 800a306:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a30a:	617b      	str	r3, [r7, #20]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	88db      	ldrh	r3, [r3, #6]
 800a310:	085b      	lsrs	r3, r3, #1
 800a312:	b29b      	uxth	r3, r3
 800a314:	005b      	lsls	r3, r3, #1
 800a316:	b29a      	uxth	r2, r3
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	4413      	add	r3, r2
 800a326:	881b      	ldrh	r3, [r3, #0]
 800a328:	827b      	strh	r3, [r7, #18]
 800a32a:	8a7b      	ldrh	r3, [r7, #18]
 800a32c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a330:	2b00      	cmp	r3, #0
 800a332:	d01b      	beq.n	800a36c <USB_ActivateEndpoint+0x180>
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	4413      	add	r3, r2
 800a33e:	881b      	ldrh	r3, [r3, #0]
 800a340:	b29b      	uxth	r3, r3
 800a342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a34a:	823b      	strh	r3, [r7, #16]
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	441a      	add	r2, r3
 800a356:	8a3b      	ldrh	r3, [r7, #16]
 800a358:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a35c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a364:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a368:	b29b      	uxth	r3, r3
 800a36a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	78db      	ldrb	r3, [r3, #3]
 800a370:	2b01      	cmp	r3, #1
 800a372:	d020      	beq.n	800a3b6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4413      	add	r3, r2
 800a37e:	881b      	ldrh	r3, [r3, #0]
 800a380:	b29b      	uxth	r3, r3
 800a382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a38a:	81bb      	strh	r3, [r7, #12]
 800a38c:	89bb      	ldrh	r3, [r7, #12]
 800a38e:	f083 0320 	eor.w	r3, r3, #32
 800a392:	81bb      	strh	r3, [r7, #12]
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	441a      	add	r2, r3
 800a39e:	89bb      	ldrh	r3, [r7, #12]
 800a3a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	8013      	strh	r3, [r2, #0]
 800a3b4:	e2d5      	b.n	800a962 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	4413      	add	r3, r2
 800a3c0:	881b      	ldrh	r3, [r3, #0]
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3cc:	81fb      	strh	r3, [r7, #14]
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	441a      	add	r2, r3
 800a3d8:	89fb      	ldrh	r3, [r7, #14]
 800a3da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	8013      	strh	r3, [r2, #0]
 800a3ee:	e2b8      	b.n	800a962 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	633b      	str	r3, [r7, #48]	; 0x30
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a400:	4413      	add	r3, r2
 800a402:	633b      	str	r3, [r7, #48]	; 0x30
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	00da      	lsls	r2, r3, #3
 800a40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40c:	4413      	add	r3, r2
 800a40e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a412:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	88db      	ldrh	r3, [r3, #6]
 800a418:	085b      	lsrs	r3, r3, #1
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	005b      	lsls	r3, r3, #1
 800a41e:	b29a      	uxth	r2, r3
 800a420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a422:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	62bb      	str	r3, [r7, #40]	; 0x28
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a42e:	b29b      	uxth	r3, r3
 800a430:	461a      	mov	r2, r3
 800a432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a434:	4413      	add	r3, r2
 800a436:	62bb      	str	r3, [r7, #40]	; 0x28
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	00da      	lsls	r2, r3, #3
 800a43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a440:	4413      	add	r3, r2
 800a442:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a446:	627b      	str	r3, [r7, #36]	; 0x24
 800a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44a:	881b      	ldrh	r3, [r3, #0]
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a452:	b29a      	uxth	r2, r3
 800a454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a456:	801a      	strh	r2, [r3, #0]
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	691b      	ldr	r3, [r3, #16]
 800a45c:	2b3e      	cmp	r3, #62	; 0x3e
 800a45e:	d91d      	bls.n	800a49c <USB_ActivateEndpoint+0x2b0>
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	095b      	lsrs	r3, r3, #5
 800a466:	66bb      	str	r3, [r7, #104]	; 0x68
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	691b      	ldr	r3, [r3, #16]
 800a46c:	f003 031f 	and.w	r3, r3, #31
 800a470:	2b00      	cmp	r3, #0
 800a472:	d102      	bne.n	800a47a <USB_ActivateEndpoint+0x28e>
 800a474:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a476:	3b01      	subs	r3, #1
 800a478:	66bb      	str	r3, [r7, #104]	; 0x68
 800a47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47c:	881b      	ldrh	r3, [r3, #0]
 800a47e:	b29a      	uxth	r2, r3
 800a480:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a482:	b29b      	uxth	r3, r3
 800a484:	029b      	lsls	r3, r3, #10
 800a486:	b29b      	uxth	r3, r3
 800a488:	4313      	orrs	r3, r2
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a494:	b29a      	uxth	r2, r3
 800a496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a498:	801a      	strh	r2, [r3, #0]
 800a49a:	e026      	b.n	800a4ea <USB_ActivateEndpoint+0x2fe>
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	691b      	ldr	r3, [r3, #16]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10a      	bne.n	800a4ba <USB_ActivateEndpoint+0x2ce>
 800a4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a6:	881b      	ldrh	r3, [r3, #0]
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b6:	801a      	strh	r2, [r3, #0]
 800a4b8:	e017      	b.n	800a4ea <USB_ActivateEndpoint+0x2fe>
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	085b      	lsrs	r3, r3, #1
 800a4c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	f003 0301 	and.w	r3, r3, #1
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d002      	beq.n	800a4d4 <USB_ActivateEndpoint+0x2e8>
 800a4ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d6:	881b      	ldrh	r3, [r3, #0]
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	029b      	lsls	r3, r3, #10
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	b29a      	uxth	r2, r3
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	4413      	add	r3, r2
 800a4f4:	881b      	ldrh	r3, [r3, #0]
 800a4f6:	847b      	strh	r3, [r7, #34]	; 0x22
 800a4f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a4fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d01b      	beq.n	800a53a <USB_ActivateEndpoint+0x34e>
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	4413      	add	r3, r2
 800a50c:	881b      	ldrh	r3, [r3, #0]
 800a50e:	b29b      	uxth	r3, r3
 800a510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a518:	843b      	strh	r3, [r7, #32]
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	441a      	add	r2, r3
 800a524:	8c3b      	ldrh	r3, [r7, #32]
 800a526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a52a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a52e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a536:	b29b      	uxth	r3, r3
 800a538:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d124      	bne.n	800a58c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	4413      	add	r3, r2
 800a54c:	881b      	ldrh	r3, [r3, #0]
 800a54e:	b29b      	uxth	r3, r3
 800a550:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a558:	83bb      	strh	r3, [r7, #28]
 800a55a:	8bbb      	ldrh	r3, [r7, #28]
 800a55c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a560:	83bb      	strh	r3, [r7, #28]
 800a562:	8bbb      	ldrh	r3, [r7, #28]
 800a564:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a568:	83bb      	strh	r3, [r7, #28]
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	441a      	add	r2, r3
 800a574:	8bbb      	ldrh	r3, [r7, #28]
 800a576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a57a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a57e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a586:	b29b      	uxth	r3, r3
 800a588:	8013      	strh	r3, [r2, #0]
 800a58a:	e1ea      	b.n	800a962 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	4413      	add	r3, r2
 800a596:	881b      	ldrh	r3, [r3, #0]
 800a598:	b29b      	uxth	r3, r3
 800a59a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a59e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5a2:	83fb      	strh	r3, [r7, #30]
 800a5a4:	8bfb      	ldrh	r3, [r7, #30]
 800a5a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a5aa:	83fb      	strh	r3, [r7, #30]
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	441a      	add	r2, r3
 800a5b6:	8bfb      	ldrh	r3, [r7, #30]
 800a5b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	8013      	strh	r3, [r2, #0]
 800a5cc:	e1c9      	b.n	800a962 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	78db      	ldrb	r3, [r3, #3]
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d11e      	bne.n	800a614 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	4413      	add	r3, r2
 800a5e0:	881b      	ldrh	r3, [r3, #0]
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ec:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	441a      	add	r2, r3
 800a5fa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a5fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a606:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a60a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a60e:	b29b      	uxth	r3, r3
 800a610:	8013      	strh	r3, [r2, #0]
 800a612:	e01d      	b.n	800a650 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	4413      	add	r3, r2
 800a61e:	881b      	ldrh	r3, [r3, #0]
 800a620:	b29b      	uxth	r3, r3
 800a622:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a62a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	441a      	add	r2, r3
 800a638:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a63c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	461a      	mov	r2, r3
 800a65e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a660:	4413      	add	r3, r2
 800a662:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	00da      	lsls	r2, r3, #3
 800a66a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a66c:	4413      	add	r3, r2
 800a66e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a672:	65bb      	str	r3, [r7, #88]	; 0x58
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	891b      	ldrh	r3, [r3, #8]
 800a678:	085b      	lsrs	r3, r3, #1
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	005b      	lsls	r3, r3, #1
 800a67e:	b29a      	uxth	r2, r3
 800a680:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a682:	801a      	strh	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	657b      	str	r3, [r7, #84]	; 0x54
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a68e:	b29b      	uxth	r3, r3
 800a690:	461a      	mov	r2, r3
 800a692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a694:	4413      	add	r3, r2
 800a696:	657b      	str	r3, [r7, #84]	; 0x54
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	00da      	lsls	r2, r3, #3
 800a69e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6a0:	4413      	add	r3, r2
 800a6a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a6a6:	653b      	str	r3, [r7, #80]	; 0x50
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	895b      	ldrh	r3, [r3, #10]
 800a6ac:	085b      	lsrs	r3, r3, #1
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	005b      	lsls	r3, r3, #1
 800a6b2:	b29a      	uxth	r2, r3
 800a6b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6b6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	785b      	ldrb	r3, [r3, #1]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	f040 8093 	bne.w	800a7e8 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	4413      	add	r3, r2
 800a6cc:	881b      	ldrh	r3, [r3, #0]
 800a6ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a6d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a6d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d01b      	beq.n	800a716 <USB_ActivateEndpoint+0x52a>
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	4413      	add	r3, r2
 800a6e8:	881b      	ldrh	r3, [r3, #0]
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	441a      	add	r2, r3
 800a700:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a70a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a70e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a712:	b29b      	uxth	r3, r3
 800a714:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	4413      	add	r3, r2
 800a720:	881b      	ldrh	r3, [r3, #0]
 800a722:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a724:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d01b      	beq.n	800a766 <USB_ActivateEndpoint+0x57a>
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	4413      	add	r3, r2
 800a738:	881b      	ldrh	r3, [r3, #0]
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a744:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	441a      	add	r2, r3
 800a750:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a752:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a756:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a75a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a75e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a762:	b29b      	uxth	r3, r3
 800a764:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	4413      	add	r3, r2
 800a770:	881b      	ldrh	r3, [r3, #0]
 800a772:	b29b      	uxth	r3, r3
 800a774:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a77c:	873b      	strh	r3, [r7, #56]	; 0x38
 800a77e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a780:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a784:	873b      	strh	r3, [r7, #56]	; 0x38
 800a786:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a788:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a78c:	873b      	strh	r3, [r7, #56]	; 0x38
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	441a      	add	r2, r3
 800a798:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a79a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a79e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	781b      	ldrb	r3, [r3, #0]
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	4413      	add	r3, r2
 800a7b8:	881b      	ldrh	r3, [r3, #0]
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7c4:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	441a      	add	r2, r3
 800a7d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a7d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	8013      	strh	r3, [r2, #0]
 800a7e6:	e0bc      	b.n	800a962 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	4413      	add	r3, r2
 800a7f2:	881b      	ldrh	r3, [r3, #0]
 800a7f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a7f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a7fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a800:	2b00      	cmp	r3, #0
 800a802:	d01d      	beq.n	800a840 <USB_ActivateEndpoint+0x654>
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	4413      	add	r3, r2
 800a80e:	881b      	ldrh	r3, [r3, #0]
 800a810:	b29b      	uxth	r3, r3
 800a812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a81a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	441a      	add	r2, r3
 800a828:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a82c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a834:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	4413      	add	r3, r2
 800a84a:	881b      	ldrh	r3, [r3, #0]
 800a84c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a850:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d01d      	beq.n	800a898 <USB_ActivateEndpoint+0x6ac>
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	4413      	add	r3, r2
 800a866:	881b      	ldrh	r3, [r3, #0]
 800a868:	b29b      	uxth	r3, r3
 800a86a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a86e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a872:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	441a      	add	r2, r3
 800a880:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a88c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a890:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a894:	b29b      	uxth	r3, r3
 800a896:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	78db      	ldrb	r3, [r3, #3]
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d024      	beq.n	800a8ea <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	4413      	add	r3, r2
 800a8aa:	881b      	ldrh	r3, [r3, #0]
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a8ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a8be:	f083 0320 	eor.w	r3, r3, #32
 800a8c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	441a      	add	r2, r3
 800a8d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a8d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	8013      	strh	r3, [r2, #0]
 800a8e8:	e01d      	b.n	800a926 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	4413      	add	r3, r2
 800a8f4:	881b      	ldrh	r3, [r3, #0]
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a900:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	441a      	add	r2, r3
 800a90e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a91a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a91e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a922:	b29b      	uxth	r3, r3
 800a924:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	4413      	add	r3, r2
 800a930:	881b      	ldrh	r3, [r3, #0]
 800a932:	b29b      	uxth	r3, r3
 800a934:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a93c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	441a      	add	r2, r3
 800a94a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a94e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a95a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a95e:	b29b      	uxth	r3, r3
 800a960:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a962:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800a966:	4618      	mov	r0, r3
 800a968:	3774      	adds	r7, #116	; 0x74
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop

0800a974 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a974:	b480      	push	{r7}
 800a976:	b08d      	sub	sp, #52	; 0x34
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	7b1b      	ldrb	r3, [r3, #12]
 800a982:	2b00      	cmp	r3, #0
 800a984:	f040 808e 	bne.w	800aaa4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	785b      	ldrb	r3, [r3, #1]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d044      	beq.n	800aa1a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	4413      	add	r3, r2
 800a99a:	881b      	ldrh	r3, [r3, #0]
 800a99c:	81bb      	strh	r3, [r7, #12]
 800a99e:	89bb      	ldrh	r3, [r7, #12]
 800a9a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d01b      	beq.n	800a9e0 <USB_DeactivateEndpoint+0x6c>
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	4413      	add	r3, r2
 800a9b2:	881b      	ldrh	r3, [r3, #0]
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9be:	817b      	strh	r3, [r7, #10]
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	441a      	add	r2, r3
 800a9ca:	897b      	ldrh	r3, [r7, #10]
 800a9cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	4413      	add	r3, r2
 800a9ea:	881b      	ldrh	r3, [r3, #0]
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9f6:	813b      	strh	r3, [r7, #8]
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	441a      	add	r2, r3
 800aa02:	893b      	ldrh	r3, [r7, #8]
 800aa04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	8013      	strh	r3, [r2, #0]
 800aa18:	e192      	b.n	800ad40 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	4413      	add	r3, r2
 800aa24:	881b      	ldrh	r3, [r3, #0]
 800aa26:	827b      	strh	r3, [r7, #18]
 800aa28:	8a7b      	ldrh	r3, [r7, #18]
 800aa2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d01b      	beq.n	800aa6a <USB_DeactivateEndpoint+0xf6>
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	4413      	add	r3, r2
 800aa3c:	881b      	ldrh	r3, [r3, #0]
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa48:	823b      	strh	r3, [r7, #16]
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	441a      	add	r2, r3
 800aa54:	8a3b      	ldrh	r3, [r7, #16]
 800aa56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	4413      	add	r3, r2
 800aa74:	881b      	ldrh	r3, [r3, #0]
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa80:	81fb      	strh	r3, [r7, #14]
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	441a      	add	r2, r3
 800aa8c:	89fb      	ldrh	r3, [r7, #14]
 800aa8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	8013      	strh	r3, [r2, #0]
 800aaa2:	e14d      	b.n	800ad40 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	785b      	ldrb	r3, [r3, #1]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f040 80a5 	bne.w	800abf8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	4413      	add	r3, r2
 800aab8:	881b      	ldrh	r3, [r3, #0]
 800aaba:	843b      	strh	r3, [r7, #32]
 800aabc:	8c3b      	ldrh	r3, [r7, #32]
 800aabe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d01b      	beq.n	800aafe <USB_DeactivateEndpoint+0x18a>
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	4413      	add	r3, r2
 800aad0:	881b      	ldrh	r3, [r3, #0]
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aadc:	83fb      	strh	r3, [r7, #30]
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	441a      	add	r2, r3
 800aae8:	8bfb      	ldrh	r3, [r7, #30]
 800aaea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aaf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	4413      	add	r3, r2
 800ab08:	881b      	ldrh	r3, [r3, #0]
 800ab0a:	83bb      	strh	r3, [r7, #28]
 800ab0c:	8bbb      	ldrh	r3, [r7, #28]
 800ab0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d01b      	beq.n	800ab4e <USB_DeactivateEndpoint+0x1da>
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	4413      	add	r3, r2
 800ab20:	881b      	ldrh	r3, [r3, #0]
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab2c:	837b      	strh	r3, [r7, #26]
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	441a      	add	r2, r3
 800ab38:	8b7b      	ldrh	r3, [r7, #26]
 800ab3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	4413      	add	r3, r2
 800ab58:	881b      	ldrh	r3, [r3, #0]
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab64:	833b      	strh	r3, [r7, #24]
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	441a      	add	r2, r3
 800ab70:	8b3b      	ldrh	r3, [r7, #24]
 800ab72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	4413      	add	r3, r2
 800ab90:	881b      	ldrh	r3, [r3, #0]
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab9c:	82fb      	strh	r3, [r7, #22]
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	441a      	add	r2, r3
 800aba8:	8afb      	ldrh	r3, [r7, #22]
 800abaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abba:	b29b      	uxth	r3, r3
 800abbc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	4413      	add	r3, r2
 800abc8:	881b      	ldrh	r3, [r3, #0]
 800abca:	b29b      	uxth	r3, r3
 800abcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abd4:	82bb      	strh	r3, [r7, #20]
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	441a      	add	r2, r3
 800abe0:	8abb      	ldrh	r3, [r7, #20]
 800abe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	8013      	strh	r3, [r2, #0]
 800abf6:	e0a3      	b.n	800ad40 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	4413      	add	r3, r2
 800ac02:	881b      	ldrh	r3, [r3, #0]
 800ac04:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ac06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ac08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d01b      	beq.n	800ac48 <USB_DeactivateEndpoint+0x2d4>
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	4413      	add	r3, r2
 800ac1a:	881b      	ldrh	r3, [r3, #0]
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac26:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	441a      	add	r2, r3
 800ac32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ac34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	4413      	add	r3, r2
 800ac52:	881b      	ldrh	r3, [r3, #0]
 800ac54:	857b      	strh	r3, [r7, #42]	; 0x2a
 800ac56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ac58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d01b      	beq.n	800ac98 <USB_DeactivateEndpoint+0x324>
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	4413      	add	r3, r2
 800ac6a:	881b      	ldrh	r3, [r3, #0]
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac76:	853b      	strh	r3, [r7, #40]	; 0x28
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	441a      	add	r2, r3
 800ac82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ac84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	4413      	add	r3, r2
 800aca2:	881b      	ldrh	r3, [r3, #0]
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acae:	84fb      	strh	r3, [r7, #38]	; 0x26
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	441a      	add	r2, r3
 800acba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800acbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800acc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800accc:	b29b      	uxth	r3, r3
 800acce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	4413      	add	r3, r2
 800acda:	881b      	ldrh	r3, [r3, #0]
 800acdc:	b29b      	uxth	r3, r3
 800acde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ace2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ace6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	441a      	add	r2, r3
 800acf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	4413      	add	r3, r2
 800ad12:	881b      	ldrh	r3, [r3, #0]
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad1e:	847b      	strh	r3, [r7, #34]	; 0x22
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	441a      	add	r2, r3
 800ad2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3734      	adds	r7, #52	; 0x34
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr

0800ad4e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b0c2      	sub	sp, #264	; 0x108
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad5c:	6018      	str	r0, [r3, #0]
 800ad5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad66:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ad68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	785b      	ldrb	r3, [r3, #1]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	f040 86b7 	bne.w	800bae8 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ad7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	699a      	ldr	r2, [r3, #24]
 800ad86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d908      	bls.n	800ada8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800ad96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ada6:	e007      	b.n	800adb8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800ada8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	699b      	ldr	r3, [r3, #24]
 800adb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800adb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	7b1b      	ldrb	r3, [r3, #12]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d13a      	bne.n	800ae3e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800adc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	6959      	ldr	r1, [r3, #20]
 800add4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800add8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	88da      	ldrh	r2, [r3, #6]
 800ade0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800adea:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800adee:	6800      	ldr	r0, [r0, #0]
 800adf0:	f001 fc98 	bl	800c724 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800adf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	613b      	str	r3, [r7, #16]
 800ae00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	461a      	mov	r2, r3
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	4413      	add	r3, r2
 800ae16:	613b      	str	r3, [r7, #16]
 800ae18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	00da      	lsls	r2, r3, #3
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	4413      	add	r3, r2
 800ae2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ae2e:	60fb      	str	r3, [r7, #12]
 800ae30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae34:	b29a      	uxth	r2, r3
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	801a      	strh	r2, [r3, #0]
 800ae3a:	f000 be1f 	b.w	800ba7c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800ae3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	78db      	ldrb	r3, [r3, #3]
 800ae4a:	2b02      	cmp	r3, #2
 800ae4c:	f040 8462 	bne.w	800b714 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ae50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	6a1a      	ldr	r2, [r3, #32]
 800ae5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	691b      	ldr	r3, [r3, #16]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	f240 83df 	bls.w	800b62c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ae6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	4413      	add	r3, r2
 800ae88:	881b      	ldrh	r3, [r3, #0]
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae94:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800ae98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	441a      	add	r2, r3
 800aeb2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800aeb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aeba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aebe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800aec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800aeca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	6a1a      	ldr	r2, [r3, #32]
 800aed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeda:	1ad2      	subs	r2, r2, r3
 800aedc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4413      	add	r3, r2
 800af02:	881b      	ldrh	r3, [r3, #0]
 800af04:	b29b      	uxth	r3, r3
 800af06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	f000 81c7 	beq.w	800b29e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800af10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	633b      	str	r3, [r7, #48]	; 0x30
 800af1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	785b      	ldrb	r3, [r3, #1]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d177      	bne.n	800b01c <USB_EPStartXfer+0x2ce>
 800af2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	62bb      	str	r3, [r7, #40]	; 0x28
 800af38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af46:	b29b      	uxth	r3, r3
 800af48:	461a      	mov	r2, r3
 800af4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4c:	4413      	add	r3, r2
 800af4e:	62bb      	str	r3, [r7, #40]	; 0x28
 800af50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	00da      	lsls	r2, r3, #3
 800af5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af60:	4413      	add	r3, r2
 800af62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af66:	627b      	str	r3, [r7, #36]	; 0x24
 800af68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6a:	881b      	ldrh	r3, [r3, #0]
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af72:	b29a      	uxth	r2, r3
 800af74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af76:	801a      	strh	r2, [r3, #0]
 800af78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af7c:	2b3e      	cmp	r3, #62	; 0x3e
 800af7e:	d921      	bls.n	800afc4 <USB_EPStartXfer+0x276>
 800af80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af84:	095b      	lsrs	r3, r3, #5
 800af86:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800af8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af8e:	f003 031f 	and.w	r3, r3, #31
 800af92:	2b00      	cmp	r3, #0
 800af94:	d104      	bne.n	800afa0 <USB_EPStartXfer+0x252>
 800af96:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800af9a:	3b01      	subs	r3, #1
 800af9c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800afa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa2:	881b      	ldrh	r3, [r3, #0]
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800afaa:	b29b      	uxth	r3, r3
 800afac:	029b      	lsls	r3, r3, #10
 800afae:	b29b      	uxth	r3, r3
 800afb0:	4313      	orrs	r3, r2
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afbc:	b29a      	uxth	r2, r3
 800afbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc0:	801a      	strh	r2, [r3, #0]
 800afc2:	e050      	b.n	800b066 <USB_EPStartXfer+0x318>
 800afc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d10a      	bne.n	800afe2 <USB_EPStartXfer+0x294>
 800afcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afce:	881b      	ldrh	r3, [r3, #0]
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afda:	b29a      	uxth	r2, r3
 800afdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afde:	801a      	strh	r2, [r3, #0]
 800afe0:	e041      	b.n	800b066 <USB_EPStartXfer+0x318>
 800afe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afe6:	085b      	lsrs	r3, r3, #1
 800afe8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800afec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aff0:	f003 0301 	and.w	r3, r3, #1
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d004      	beq.n	800b002 <USB_EPStartXfer+0x2b4>
 800aff8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800affc:	3301      	adds	r3, #1
 800affe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b004:	881b      	ldrh	r3, [r3, #0]
 800b006:	b29a      	uxth	r2, r3
 800b008:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	029b      	lsls	r3, r3, #10
 800b010:	b29b      	uxth	r3, r3
 800b012:	4313      	orrs	r3, r2
 800b014:	b29a      	uxth	r2, r3
 800b016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b018:	801a      	strh	r2, [r3, #0]
 800b01a:	e024      	b.n	800b066 <USB_EPStartXfer+0x318>
 800b01c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	785b      	ldrb	r3, [r3, #1]
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d11c      	bne.n	800b066 <USB_EPStartXfer+0x318>
 800b02c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b030:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	461a      	mov	r2, r3
 800b03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b040:	4413      	add	r3, r2
 800b042:	633b      	str	r3, [r7, #48]	; 0x30
 800b044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	00da      	lsls	r2, r3, #3
 800b052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b054:	4413      	add	r3, r2
 800b056:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b05a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b05c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b060:	b29a      	uxth	r2, r3
 800b062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b064:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b06a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	895b      	ldrh	r3, [r3, #10]
 800b072:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b07a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	6959      	ldr	r1, [r3, #20]
 800b082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b086:	b29b      	uxth	r3, r3
 800b088:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b08c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b090:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b094:	6800      	ldr	r0, [r0, #0]
 800b096:	f001 fb45 	bl	800c724 <USB_WritePMA>
            ep->xfer_buff += len;
 800b09a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b09e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	695a      	ldr	r2, [r3, #20]
 800b0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0aa:	441a      	add	r2, r3
 800b0ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b0b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	6a1a      	ldr	r2, [r3, #32]
 800b0c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	691b      	ldr	r3, [r3, #16]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d90f      	bls.n	800b0f4 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b0d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	6a1a      	ldr	r2, [r3, #32]
 800b0e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0e4:	1ad2      	subs	r2, r2, r3
 800b0e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	621a      	str	r2, [r3, #32]
 800b0f2:	e00e      	b.n	800b112 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b0f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	6a1b      	ldr	r3, [r3, #32]
 800b100:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2200      	movs	r2, #0
 800b110:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	785b      	ldrb	r3, [r3, #1]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d177      	bne.n	800b212 <USB_EPStartXfer+0x4c4>
 800b122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b126:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	61bb      	str	r3, [r7, #24]
 800b12e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b132:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	461a      	mov	r2, r3
 800b140:	69bb      	ldr	r3, [r7, #24]
 800b142:	4413      	add	r3, r2
 800b144:	61bb      	str	r3, [r7, #24]
 800b146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b14a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	00da      	lsls	r2, r3, #3
 800b154:	69bb      	ldr	r3, [r7, #24]
 800b156:	4413      	add	r3, r2
 800b158:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b15c:	617b      	str	r3, [r7, #20]
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	881b      	ldrh	r3, [r3, #0]
 800b162:	b29b      	uxth	r3, r3
 800b164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b168:	b29a      	uxth	r2, r3
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	801a      	strh	r2, [r3, #0]
 800b16e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b172:	2b3e      	cmp	r3, #62	; 0x3e
 800b174:	d921      	bls.n	800b1ba <USB_EPStartXfer+0x46c>
 800b176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b17a:	095b      	lsrs	r3, r3, #5
 800b17c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b184:	f003 031f 	and.w	r3, r3, #31
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d104      	bne.n	800b196 <USB_EPStartXfer+0x448>
 800b18c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b190:	3b01      	subs	r3, #1
 800b192:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	881b      	ldrh	r3, [r3, #0]
 800b19a:	b29a      	uxth	r2, r3
 800b19c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	029b      	lsls	r3, r3, #10
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1b2:	b29a      	uxth	r2, r3
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	801a      	strh	r2, [r3, #0]
 800b1b8:	e056      	b.n	800b268 <USB_EPStartXfer+0x51a>
 800b1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d10a      	bne.n	800b1d8 <USB_EPStartXfer+0x48a>
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	881b      	ldrh	r3, [r3, #0]
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1d0:	b29a      	uxth	r2, r3
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	801a      	strh	r2, [r3, #0]
 800b1d6:	e047      	b.n	800b268 <USB_EPStartXfer+0x51a>
 800b1d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1dc:	085b      	lsrs	r3, r3, #1
 800b1de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e6:	f003 0301 	and.w	r3, r3, #1
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d004      	beq.n	800b1f8 <USB_EPStartXfer+0x4aa>
 800b1ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	881b      	ldrh	r3, [r3, #0]
 800b1fc:	b29a      	uxth	r2, r3
 800b1fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b202:	b29b      	uxth	r3, r3
 800b204:	029b      	lsls	r3, r3, #10
 800b206:	b29b      	uxth	r3, r3
 800b208:	4313      	orrs	r3, r2
 800b20a:	b29a      	uxth	r2, r3
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	801a      	strh	r2, [r3, #0]
 800b210:	e02a      	b.n	800b268 <USB_EPStartXfer+0x51a>
 800b212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	785b      	ldrb	r3, [r3, #1]
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d122      	bne.n	800b268 <USB_EPStartXfer+0x51a>
 800b222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b226:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	623b      	str	r3, [r7, #32]
 800b22e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b232:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	461a      	mov	r2, r3
 800b240:	6a3b      	ldr	r3, [r7, #32]
 800b242:	4413      	add	r3, r2
 800b244:	623b      	str	r3, [r7, #32]
 800b246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b24a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	00da      	lsls	r2, r3, #3
 800b254:	6a3b      	ldr	r3, [r7, #32]
 800b256:	4413      	add	r3, r2
 800b258:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b25c:	61fb      	str	r3, [r7, #28]
 800b25e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b262:	b29a      	uxth	r2, r3
 800b264:	69fb      	ldr	r3, [r7, #28]
 800b266:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b26c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	891b      	ldrh	r3, [r3, #8]
 800b274:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b27c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	6959      	ldr	r1, [r3, #20]
 800b284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b288:	b29b      	uxth	r3, r3
 800b28a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b28e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b292:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b296:	6800      	ldr	r0, [r0, #0]
 800b298:	f001 fa44 	bl	800c724 <USB_WritePMA>
 800b29c:	e3ee      	b.n	800ba7c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b29e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	785b      	ldrb	r3, [r3, #1]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d177      	bne.n	800b39e <USB_EPStartXfer+0x650>
 800b2ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2ce:	4413      	add	r3, r2
 800b2d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	00da      	lsls	r2, r3, #3
 800b2e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2e2:	4413      	add	r3, r2
 800b2e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b2e8:	647b      	str	r3, [r7, #68]	; 0x44
 800b2ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2ec:	881b      	ldrh	r3, [r3, #0]
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2f4:	b29a      	uxth	r2, r3
 800b2f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2f8:	801a      	strh	r2, [r3, #0]
 800b2fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2fe:	2b3e      	cmp	r3, #62	; 0x3e
 800b300:	d921      	bls.n	800b346 <USB_EPStartXfer+0x5f8>
 800b302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b306:	095b      	lsrs	r3, r3, #5
 800b308:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b30c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b310:	f003 031f 	and.w	r3, r3, #31
 800b314:	2b00      	cmp	r3, #0
 800b316:	d104      	bne.n	800b322 <USB_EPStartXfer+0x5d4>
 800b318:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b31c:	3b01      	subs	r3, #1
 800b31e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b324:	881b      	ldrh	r3, [r3, #0]
 800b326:	b29a      	uxth	r2, r3
 800b328:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	029b      	lsls	r3, r3, #10
 800b330:	b29b      	uxth	r3, r3
 800b332:	4313      	orrs	r3, r2
 800b334:	b29b      	uxth	r3, r3
 800b336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b33a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b33e:	b29a      	uxth	r2, r3
 800b340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b342:	801a      	strh	r2, [r3, #0]
 800b344:	e056      	b.n	800b3f4 <USB_EPStartXfer+0x6a6>
 800b346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d10a      	bne.n	800b364 <USB_EPStartXfer+0x616>
 800b34e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b350:	881b      	ldrh	r3, [r3, #0]
 800b352:	b29b      	uxth	r3, r3
 800b354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b35c:	b29a      	uxth	r2, r3
 800b35e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b360:	801a      	strh	r2, [r3, #0]
 800b362:	e047      	b.n	800b3f4 <USB_EPStartXfer+0x6a6>
 800b364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b368:	085b      	lsrs	r3, r3, #1
 800b36a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b372:	f003 0301 	and.w	r3, r3, #1
 800b376:	2b00      	cmp	r3, #0
 800b378:	d004      	beq.n	800b384 <USB_EPStartXfer+0x636>
 800b37a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b37e:	3301      	adds	r3, #1
 800b380:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b386:	881b      	ldrh	r3, [r3, #0]
 800b388:	b29a      	uxth	r2, r3
 800b38a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b38e:	b29b      	uxth	r3, r3
 800b390:	029b      	lsls	r3, r3, #10
 800b392:	b29b      	uxth	r3, r3
 800b394:	4313      	orrs	r3, r2
 800b396:	b29a      	uxth	r2, r3
 800b398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b39a:	801a      	strh	r2, [r3, #0]
 800b39c:	e02a      	b.n	800b3f4 <USB_EPStartXfer+0x6a6>
 800b39e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	785b      	ldrb	r3, [r3, #1]
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d122      	bne.n	800b3f4 <USB_EPStartXfer+0x6a6>
 800b3ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	653b      	str	r3, [r7, #80]	; 0x50
 800b3ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3ce:	4413      	add	r3, r2
 800b3d0:	653b      	str	r3, [r7, #80]	; 0x50
 800b3d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	00da      	lsls	r2, r3, #3
 800b3e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3e2:	4413      	add	r3, r2
 800b3e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b3e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ee:	b29a      	uxth	r2, r3
 800b3f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b3f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	891b      	ldrh	r3, [r3, #8]
 800b400:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	6959      	ldr	r1, [r3, #20]
 800b410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b414:	b29b      	uxth	r3, r3
 800b416:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b41a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b41e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b422:	6800      	ldr	r0, [r0, #0]
 800b424:	f001 f97e 	bl	800c724 <USB_WritePMA>
            ep->xfer_buff += len;
 800b428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b42c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	695a      	ldr	r2, [r3, #20]
 800b434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b438:	441a      	add	r2, r3
 800b43a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b43e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b44a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	6a1a      	ldr	r2, [r3, #32]
 800b452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d90f      	bls.n	800b482 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800b462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	6a1a      	ldr	r2, [r3, #32]
 800b46e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b472:	1ad2      	subs	r2, r2, r3
 800b474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	621a      	str	r2, [r3, #32]
 800b480:	e00e      	b.n	800b4a0 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800b482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	6a1b      	ldr	r3, [r3, #32]
 800b48e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2200      	movs	r2, #0
 800b49e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b4a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	643b      	str	r3, [r7, #64]	; 0x40
 800b4ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	785b      	ldrb	r3, [r3, #1]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d177      	bne.n	800b5ac <USB_EPStartXfer+0x85e>
 800b4bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4d6:	b29b      	uxth	r3, r3
 800b4d8:	461a      	mov	r2, r3
 800b4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4dc:	4413      	add	r3, r2
 800b4de:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	00da      	lsls	r2, r3, #3
 800b4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f0:	4413      	add	r3, r2
 800b4f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b4f6:	637b      	str	r3, [r7, #52]	; 0x34
 800b4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4fa:	881b      	ldrh	r3, [r3, #0]
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b502:	b29a      	uxth	r2, r3
 800b504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b506:	801a      	strh	r2, [r3, #0]
 800b508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b50c:	2b3e      	cmp	r3, #62	; 0x3e
 800b50e:	d921      	bls.n	800b554 <USB_EPStartXfer+0x806>
 800b510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b514:	095b      	lsrs	r3, r3, #5
 800b516:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b51a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b51e:	f003 031f 	and.w	r3, r3, #31
 800b522:	2b00      	cmp	r3, #0
 800b524:	d104      	bne.n	800b530 <USB_EPStartXfer+0x7e2>
 800b526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b52a:	3b01      	subs	r3, #1
 800b52c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b532:	881b      	ldrh	r3, [r3, #0]
 800b534:	b29a      	uxth	r2, r3
 800b536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	029b      	lsls	r3, r3, #10
 800b53e:	b29b      	uxth	r3, r3
 800b540:	4313      	orrs	r3, r2
 800b542:	b29b      	uxth	r3, r3
 800b544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b54c:	b29a      	uxth	r2, r3
 800b54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b550:	801a      	strh	r2, [r3, #0]
 800b552:	e050      	b.n	800b5f6 <USB_EPStartXfer+0x8a8>
 800b554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d10a      	bne.n	800b572 <USB_EPStartXfer+0x824>
 800b55c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b55e:	881b      	ldrh	r3, [r3, #0]
 800b560:	b29b      	uxth	r3, r3
 800b562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b56a:	b29a      	uxth	r2, r3
 800b56c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b56e:	801a      	strh	r2, [r3, #0]
 800b570:	e041      	b.n	800b5f6 <USB_EPStartXfer+0x8a8>
 800b572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b576:	085b      	lsrs	r3, r3, #1
 800b578:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b580:	f003 0301 	and.w	r3, r3, #1
 800b584:	2b00      	cmp	r3, #0
 800b586:	d004      	beq.n	800b592 <USB_EPStartXfer+0x844>
 800b588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b58c:	3301      	adds	r3, #1
 800b58e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b594:	881b      	ldrh	r3, [r3, #0]
 800b596:	b29a      	uxth	r2, r3
 800b598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	029b      	lsls	r3, r3, #10
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	b29a      	uxth	r2, r3
 800b5a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5a8:	801a      	strh	r2, [r3, #0]
 800b5aa:	e024      	b.n	800b5f6 <USB_EPStartXfer+0x8a8>
 800b5ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	785b      	ldrb	r3, [r3, #1]
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d11c      	bne.n	800b5f6 <USB_EPStartXfer+0x8a8>
 800b5bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5d0:	4413      	add	r3, r2
 800b5d2:	643b      	str	r3, [r7, #64]	; 0x40
 800b5d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	00da      	lsls	r2, r3, #3
 800b5e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5e4:	4413      	add	r3, r2
 800b5e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f0:	b29a      	uxth	r2, r3
 800b5f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b5f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	895b      	ldrh	r3, [r3, #10]
 800b602:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b60a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	6959      	ldr	r1, [r3, #20]
 800b612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b616:	b29b      	uxth	r3, r3
 800b618:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b61c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b620:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b624:	6800      	ldr	r0, [r0, #0]
 800b626:	f001 f87d 	bl	800c724 <USB_WritePMA>
 800b62a:	e227      	b.n	800ba7c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b62c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	6a1b      	ldr	r3, [r3, #32]
 800b638:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b63c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b640:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b64a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	4413      	add	r3, r2
 800b656:	881b      	ldrh	r3, [r3, #0]
 800b658:	b29b      	uxth	r3, r3
 800b65a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b65e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b662:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b66a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	441a      	add	r2, r3
 800b680:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b68c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b694:	b29b      	uxth	r3, r3
 800b696:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b69c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6b2:	b29b      	uxth	r3, r3
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6b8:	4413      	add	r3, r2
 800b6ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	00da      	lsls	r2, r3, #3
 800b6ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6cc:	4413      	add	r3, r2
 800b6ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b6d2:	65bb      	str	r3, [r7, #88]	; 0x58
 800b6d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d8:	b29a      	uxth	r2, r3
 800b6da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6dc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b6de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	891b      	ldrh	r3, [r3, #8]
 800b6ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b6ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	6959      	ldr	r1, [r3, #20]
 800b6fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b704:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b708:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b70c:	6800      	ldr	r0, [r0, #0]
 800b70e:	f001 f809 	bl	800c724 <USB_WritePMA>
 800b712:	e1b3      	b.n	800ba7c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	6a1a      	ldr	r2, [r3, #32]
 800b720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b724:	1ad2      	subs	r2, r2, r3
 800b726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b72a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	4413      	add	r3, r2
 800b74c:	881b      	ldrh	r3, [r3, #0]
 800b74e:	b29b      	uxth	r3, r3
 800b750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b754:	2b00      	cmp	r3, #0
 800b756:	f000 80c6 	beq.w	800b8e6 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b75a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b75e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	673b      	str	r3, [r7, #112]	; 0x70
 800b766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b76a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	785b      	ldrb	r3, [r3, #1]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d177      	bne.n	800b866 <USB_EPStartXfer+0xb18>
 800b776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b77a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	66bb      	str	r3, [r7, #104]	; 0x68
 800b782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b786:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b790:	b29b      	uxth	r3, r3
 800b792:	461a      	mov	r2, r3
 800b794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b796:	4413      	add	r3, r2
 800b798:	66bb      	str	r3, [r7, #104]	; 0x68
 800b79a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b79e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	00da      	lsls	r2, r3, #3
 800b7a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b7aa:	4413      	add	r3, r2
 800b7ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b7b0:	667b      	str	r3, [r7, #100]	; 0x64
 800b7b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7b4:	881b      	ldrh	r3, [r3, #0]
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b7bc:	b29a      	uxth	r2, r3
 800b7be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7c0:	801a      	strh	r2, [r3, #0]
 800b7c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c6:	2b3e      	cmp	r3, #62	; 0x3e
 800b7c8:	d921      	bls.n	800b80e <USB_EPStartXfer+0xac0>
 800b7ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ce:	095b      	lsrs	r3, r3, #5
 800b7d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b7d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7d8:	f003 031f 	and.w	r3, r3, #31
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d104      	bne.n	800b7ea <USB_EPStartXfer+0xa9c>
 800b7e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b7ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7ec:	881b      	ldrh	r3, [r3, #0]
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	029b      	lsls	r3, r3, #10
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b806:	b29a      	uxth	r2, r3
 800b808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b80a:	801a      	strh	r2, [r3, #0]
 800b80c:	e050      	b.n	800b8b0 <USB_EPStartXfer+0xb62>
 800b80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b812:	2b00      	cmp	r3, #0
 800b814:	d10a      	bne.n	800b82c <USB_EPStartXfer+0xade>
 800b816:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b818:	881b      	ldrh	r3, [r3, #0]
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b824:	b29a      	uxth	r2, r3
 800b826:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b828:	801a      	strh	r2, [r3, #0]
 800b82a:	e041      	b.n	800b8b0 <USB_EPStartXfer+0xb62>
 800b82c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b830:	085b      	lsrs	r3, r3, #1
 800b832:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b83a:	f003 0301 	and.w	r3, r3, #1
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d004      	beq.n	800b84c <USB_EPStartXfer+0xafe>
 800b842:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b846:	3301      	adds	r3, #1
 800b848:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b84c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b84e:	881b      	ldrh	r3, [r3, #0]
 800b850:	b29a      	uxth	r2, r3
 800b852:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b856:	b29b      	uxth	r3, r3
 800b858:	029b      	lsls	r3, r3, #10
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	4313      	orrs	r3, r2
 800b85e:	b29a      	uxth	r2, r3
 800b860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b862:	801a      	strh	r2, [r3, #0]
 800b864:	e024      	b.n	800b8b0 <USB_EPStartXfer+0xb62>
 800b866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b86a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	785b      	ldrb	r3, [r3, #1]
 800b872:	2b01      	cmp	r3, #1
 800b874:	d11c      	bne.n	800b8b0 <USB_EPStartXfer+0xb62>
 800b876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b87a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b884:	b29b      	uxth	r3, r3
 800b886:	461a      	mov	r2, r3
 800b888:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b88a:	4413      	add	r3, r2
 800b88c:	673b      	str	r3, [r7, #112]	; 0x70
 800b88e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	00da      	lsls	r2, r3, #3
 800b89c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b89e:	4413      	add	r3, r2
 800b8a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b8a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b8a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b8b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	895b      	ldrh	r3, [r3, #10]
 800b8bc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b8c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	6959      	ldr	r1, [r3, #20]
 800b8cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b8d6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b8da:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b8de:	6800      	ldr	r0, [r0, #0]
 800b8e0:	f000 ff20 	bl	800c724 <USB_WritePMA>
 800b8e4:	e0ca      	b.n	800ba7c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b8e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	785b      	ldrb	r3, [r3, #1]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d177      	bne.n	800b9e6 <USB_EPStartXfer+0xc98>
 800b8f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b906:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b910:	b29b      	uxth	r3, r3
 800b912:	461a      	mov	r2, r3
 800b914:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b916:	4413      	add	r3, r2
 800b918:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b91a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b91e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	00da      	lsls	r2, r3, #3
 800b928:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b92a:	4413      	add	r3, r2
 800b92c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b930:	67bb      	str	r3, [r7, #120]	; 0x78
 800b932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b934:	881b      	ldrh	r3, [r3, #0]
 800b936:	b29b      	uxth	r3, r3
 800b938:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b93c:	b29a      	uxth	r2, r3
 800b93e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b940:	801a      	strh	r2, [r3, #0]
 800b942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b946:	2b3e      	cmp	r3, #62	; 0x3e
 800b948:	d921      	bls.n	800b98e <USB_EPStartXfer+0xc40>
 800b94a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b94e:	095b      	lsrs	r3, r3, #5
 800b950:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b958:	f003 031f 	and.w	r3, r3, #31
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d104      	bne.n	800b96a <USB_EPStartXfer+0xc1c>
 800b960:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b964:	3b01      	subs	r3, #1
 800b966:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b96a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b96c:	881b      	ldrh	r3, [r3, #0]
 800b96e:	b29a      	uxth	r2, r3
 800b970:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b974:	b29b      	uxth	r3, r3
 800b976:	029b      	lsls	r3, r3, #10
 800b978:	b29b      	uxth	r3, r3
 800b97a:	4313      	orrs	r3, r2
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b986:	b29a      	uxth	r2, r3
 800b988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b98a:	801a      	strh	r2, [r3, #0]
 800b98c:	e05c      	b.n	800ba48 <USB_EPStartXfer+0xcfa>
 800b98e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b992:	2b00      	cmp	r3, #0
 800b994:	d10a      	bne.n	800b9ac <USB_EPStartXfer+0xc5e>
 800b996:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b998:	881b      	ldrh	r3, [r3, #0]
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9a4:	b29a      	uxth	r2, r3
 800b9a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9a8:	801a      	strh	r2, [r3, #0]
 800b9aa:	e04d      	b.n	800ba48 <USB_EPStartXfer+0xcfa>
 800b9ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9b0:	085b      	lsrs	r3, r3, #1
 800b9b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b9b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ba:	f003 0301 	and.w	r3, r3, #1
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d004      	beq.n	800b9cc <USB_EPStartXfer+0xc7e>
 800b9c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b9cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9ce:	881b      	ldrh	r3, [r3, #0]
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	029b      	lsls	r3, r3, #10
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	b29a      	uxth	r2, r3
 800b9e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9e2:	801a      	strh	r2, [r3, #0]
 800b9e4:	e030      	b.n	800ba48 <USB_EPStartXfer+0xcfa>
 800b9e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	785b      	ldrb	r3, [r3, #1]
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d128      	bne.n	800ba48 <USB_EPStartXfer+0xcfa>
 800b9f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	461a      	mov	r2, r3
 800ba16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba1a:	4413      	add	r3, r2
 800ba1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	00da      	lsls	r2, r3, #3
 800ba2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba32:	4413      	add	r3, r2
 800ba34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ba38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba40:	b29a      	uxth	r2, r3
 800ba42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ba46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ba48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	891b      	ldrh	r3, [r3, #8]
 800ba54:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ba58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	6959      	ldr	r1, [r3, #20]
 800ba64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ba6e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ba72:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ba76:	6800      	ldr	r0, [r0, #0]
 800ba78:	f000 fe54 	bl	800c724 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ba7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba84:	681a      	ldr	r2, [r3, #0]
 800ba86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	4413      	add	r3, r2
 800ba96:	881b      	ldrh	r3, [r3, #0]
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800baa2:	817b      	strh	r3, [r7, #10]
 800baa4:	897b      	ldrh	r3, [r7, #10]
 800baa6:	f083 0310 	eor.w	r3, r3, #16
 800baaa:	817b      	strh	r3, [r7, #10]
 800baac:	897b      	ldrh	r3, [r7, #10]
 800baae:	f083 0320 	eor.w	r3, r3, #32
 800bab2:	817b      	strh	r3, [r7, #10]
 800bab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bab8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	009b      	lsls	r3, r3, #2
 800bacc:	441a      	add	r2, r3
 800bace:	897b      	ldrh	r3, [r7, #10]
 800bad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800badc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	8013      	strh	r3, [r2, #0]
 800bae4:	f000 bcde 	b.w	800c4a4 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	7b1b      	ldrb	r3, [r3, #12]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	f040 80bb 	bne.w	800bc70 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800bafa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bafe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	699a      	ldr	r2, [r3, #24]
 800bb06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	691b      	ldr	r3, [r3, #16]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d917      	bls.n	800bb46 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800bb16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	691b      	ldr	r3, [r3, #16]
 800bb22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800bb26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	699a      	ldr	r2, [r3, #24]
 800bb32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb36:	1ad2      	subs	r2, r2, r3
 800bb38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	619a      	str	r2, [r3, #24]
 800bb44:	e00e      	b.n	800bb64 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800bb46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	699b      	ldr	r3, [r3, #24]
 800bb52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800bb56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	2200      	movs	r2, #0
 800bb62:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bb64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bb72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	461a      	mov	r2, r3
 800bb84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bb88:	4413      	add	r3, r2
 800bb8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bb8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	00da      	lsls	r2, r3, #3
 800bb9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bba0:	4413      	add	r3, r2
 800bba2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bba6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bbaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbae:	881b      	ldrh	r3, [r3, #0]
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bbb6:	b29a      	uxth	r2, r3
 800bbb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbbc:	801a      	strh	r2, [r3, #0]
 800bbbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbc2:	2b3e      	cmp	r3, #62	; 0x3e
 800bbc4:	d924      	bls.n	800bc10 <USB_EPStartXfer+0xec2>
 800bbc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbca:	095b      	lsrs	r3, r3, #5
 800bbcc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bbd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbd4:	f003 031f 	and.w	r3, r3, #31
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d104      	bne.n	800bbe6 <USB_EPStartXfer+0xe98>
 800bbdc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bbe0:	3b01      	subs	r3, #1
 800bbe2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bbe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbea:	881b      	ldrh	r3, [r3, #0]
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	029b      	lsls	r3, r3, #10
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc04:	b29a      	uxth	r2, r3
 800bc06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc0a:	801a      	strh	r2, [r3, #0]
 800bc0c:	f000 bc10 	b.w	800c430 <USB_EPStartXfer+0x16e2>
 800bc10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d10c      	bne.n	800bc32 <USB_EPStartXfer+0xee4>
 800bc18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc1c:	881b      	ldrh	r3, [r3, #0]
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc28:	b29a      	uxth	r2, r3
 800bc2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc2e:	801a      	strh	r2, [r3, #0]
 800bc30:	e3fe      	b.n	800c430 <USB_EPStartXfer+0x16e2>
 800bc32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc36:	085b      	lsrs	r3, r3, #1
 800bc38:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bc3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc40:	f003 0301 	and.w	r3, r3, #1
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d004      	beq.n	800bc52 <USB_EPStartXfer+0xf04>
 800bc48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bc52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc56:	881b      	ldrh	r3, [r3, #0]
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	029b      	lsls	r3, r3, #10
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	4313      	orrs	r3, r2
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc6c:	801a      	strh	r2, [r3, #0]
 800bc6e:	e3df      	b.n	800c430 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800bc70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	78db      	ldrb	r3, [r3, #3]
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	f040 8218 	bne.w	800c0b2 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bc82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	785b      	ldrb	r3, [r3, #1]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	f040 809d 	bne.w	800bdce <USB_EPStartXfer+0x1080>
 800bc94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bca6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bcb8:	4413      	add	r3, r2
 800bcba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bcbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	00da      	lsls	r2, r3, #3
 800bccc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bcd0:	4413      	add	r3, r2
 800bcd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bcd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bcda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bcde:	881b      	ldrh	r3, [r3, #0]
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bce6:	b29a      	uxth	r2, r3
 800bce8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bcec:	801a      	strh	r2, [r3, #0]
 800bcee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	691b      	ldr	r3, [r3, #16]
 800bcfa:	2b3e      	cmp	r3, #62	; 0x3e
 800bcfc:	d92b      	bls.n	800bd56 <USB_EPStartXfer+0x1008>
 800bcfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	691b      	ldr	r3, [r3, #16]
 800bd0a:	095b      	lsrs	r3, r3, #5
 800bd0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bd10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	691b      	ldr	r3, [r3, #16]
 800bd1c:	f003 031f 	and.w	r3, r3, #31
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d104      	bne.n	800bd2e <USB_EPStartXfer+0xfe0>
 800bd24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd28:	3b01      	subs	r3, #1
 800bd2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bd2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bd32:	881b      	ldrh	r3, [r3, #0]
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	029b      	lsls	r3, r3, #10
 800bd3e:	b29b      	uxth	r3, r3
 800bd40:	4313      	orrs	r3, r2
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd4c:	b29a      	uxth	r2, r3
 800bd4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bd52:	801a      	strh	r2, [r3, #0]
 800bd54:	e070      	b.n	800be38 <USB_EPStartXfer+0x10ea>
 800bd56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	691b      	ldr	r3, [r3, #16]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d10c      	bne.n	800bd80 <USB_EPStartXfer+0x1032>
 800bd66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bd6a:	881b      	ldrh	r3, [r3, #0]
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd76:	b29a      	uxth	r2, r3
 800bd78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bd7c:	801a      	strh	r2, [r3, #0]
 800bd7e:	e05b      	b.n	800be38 <USB_EPStartXfer+0x10ea>
 800bd80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	691b      	ldr	r3, [r3, #16]
 800bd8c:	085b      	lsrs	r3, r3, #1
 800bd8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bd92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	691b      	ldr	r3, [r3, #16]
 800bd9e:	f003 0301 	and.w	r3, r3, #1
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d004      	beq.n	800bdb0 <USB_EPStartXfer+0x1062>
 800bda6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdaa:	3301      	adds	r3, #1
 800bdac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bdb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bdb4:	881b      	ldrh	r3, [r3, #0]
 800bdb6:	b29a      	uxth	r2, r3
 800bdb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	029b      	lsls	r3, r3, #10
 800bdc0:	b29b      	uxth	r3, r3
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	b29a      	uxth	r2, r3
 800bdc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bdca:	801a      	strh	r2, [r3, #0]
 800bdcc:	e034      	b.n	800be38 <USB_EPStartXfer+0x10ea>
 800bdce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	785b      	ldrb	r3, [r3, #1]
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d12c      	bne.n	800be38 <USB_EPStartXfer+0x10ea>
 800bdde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bde2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bdec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800be02:	4413      	add	r3, r2
 800be04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	00da      	lsls	r2, r3, #3
 800be16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800be1a:	4413      	add	r3, r2
 800be1c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800be20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	691b      	ldr	r3, [r3, #16]
 800be30:	b29a      	uxth	r2, r3
 800be32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800be36:	801a      	strh	r2, [r3, #0]
 800be38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800be46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	785b      	ldrb	r3, [r3, #1]
 800be52:	2b00      	cmp	r3, #0
 800be54:	f040 809d 	bne.w	800bf92 <USB_EPStartXfer+0x1244>
 800be58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800be66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be74:	b29b      	uxth	r3, r3
 800be76:	461a      	mov	r2, r3
 800be78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be7c:	4413      	add	r3, r2
 800be7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800be82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	00da      	lsls	r2, r3, #3
 800be90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be94:	4413      	add	r3, r2
 800be96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800be9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800be9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bea2:	881b      	ldrh	r3, [r3, #0]
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800beaa:	b29a      	uxth	r2, r3
 800beac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800beb0:	801a      	strh	r2, [r3, #0]
 800beb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800beb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	2b3e      	cmp	r3, #62	; 0x3e
 800bec0:	d92b      	bls.n	800bf1a <USB_EPStartXfer+0x11cc>
 800bec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	095b      	lsrs	r3, r3, #5
 800bed0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	691b      	ldr	r3, [r3, #16]
 800bee0:	f003 031f 	and.w	r3, r3, #31
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d104      	bne.n	800bef2 <USB_EPStartXfer+0x11a4>
 800bee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800beec:	3b01      	subs	r3, #1
 800beee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bef2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bef6:	881b      	ldrh	r3, [r3, #0]
 800bef8:	b29a      	uxth	r2, r3
 800befa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800befe:	b29b      	uxth	r3, r3
 800bf00:	029b      	lsls	r3, r3, #10
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	4313      	orrs	r3, r2
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf10:	b29a      	uxth	r2, r3
 800bf12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf16:	801a      	strh	r2, [r3, #0]
 800bf18:	e069      	b.n	800bfee <USB_EPStartXfer+0x12a0>
 800bf1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	691b      	ldr	r3, [r3, #16]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d10c      	bne.n	800bf44 <USB_EPStartXfer+0x11f6>
 800bf2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf2e:	881b      	ldrh	r3, [r3, #0]
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf40:	801a      	strh	r2, [r3, #0]
 800bf42:	e054      	b.n	800bfee <USB_EPStartXfer+0x12a0>
 800bf44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	085b      	lsrs	r3, r3, #1
 800bf52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bf56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	691b      	ldr	r3, [r3, #16]
 800bf62:	f003 0301 	and.w	r3, r3, #1
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d004      	beq.n	800bf74 <USB_EPStartXfer+0x1226>
 800bf6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf6e:	3301      	adds	r3, #1
 800bf70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bf74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf78:	881b      	ldrh	r3, [r3, #0]
 800bf7a:	b29a      	uxth	r2, r3
 800bf7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	029b      	lsls	r3, r3, #10
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	4313      	orrs	r3, r2
 800bf88:	b29a      	uxth	r2, r3
 800bf8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf8e:	801a      	strh	r2, [r3, #0]
 800bf90:	e02d      	b.n	800bfee <USB_EPStartXfer+0x12a0>
 800bf92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	785b      	ldrb	r3, [r3, #1]
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d125      	bne.n	800bfee <USB_EPStartXfer+0x12a0>
 800bfa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bfb8:	4413      	add	r3, r2
 800bfba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bfbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	00da      	lsls	r2, r3, #3
 800bfcc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bfd0:	4413      	add	r3, r2
 800bfd2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bfd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bfda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	691b      	ldr	r3, [r3, #16]
 800bfe6:	b29a      	uxth	r2, r3
 800bfe8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bfec:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800bfee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	69db      	ldr	r3, [r3, #28]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f000 8218 	beq.w	800c430 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c004:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c00e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	4413      	add	r3, r2
 800c01a:	881b      	ldrh	r3, [r3, #0]
 800c01c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c020:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d005      	beq.n	800c038 <USB_EPStartXfer+0x12ea>
 800c02c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c034:	2b00      	cmp	r3, #0
 800c036:	d10d      	bne.n	800c054 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c038:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c03c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c040:	2b00      	cmp	r3, #0
 800c042:	f040 81f5 	bne.w	800c430 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c046:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c04a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c04e:	2b00      	cmp	r3, #0
 800c050:	f040 81ee 	bne.w	800c430 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c058:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	4413      	add	r3, r2
 800c06e:	881b      	ldrh	r3, [r3, #0]
 800c070:	b29b      	uxth	r3, r3
 800c072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c07a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c07e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c082:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c08c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	441a      	add	r2, r3
 800c098:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c09c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	8013      	strh	r3, [r2, #0]
 800c0b0:	e1be      	b.n	800c430 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c0b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	78db      	ldrb	r3, [r3, #3]
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	f040 81b4 	bne.w	800c42c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c0c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	699a      	ldr	r2, [r3, #24]
 800c0d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	691b      	ldr	r3, [r3, #16]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d917      	bls.n	800c110 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c0e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	691b      	ldr	r3, [r3, #16]
 800c0ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c0f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	699a      	ldr	r2, [r3, #24]
 800c0fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c100:	1ad2      	subs	r2, r2, r3
 800c102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	619a      	str	r2, [r3, #24]
 800c10e:	e00e      	b.n	800c12e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	699b      	ldr	r3, [r3, #24]
 800c11c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800c120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	2200      	movs	r2, #0
 800c12c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c12e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	785b      	ldrb	r3, [r3, #1]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	f040 8085 	bne.w	800c24a <USB_EPStartXfer+0x14fc>
 800c140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c144:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c14e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c152:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c15c:	b29b      	uxth	r3, r3
 800c15e:	461a      	mov	r2, r3
 800c160:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c164:	4413      	add	r3, r2
 800c166:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c16a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c16e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	00da      	lsls	r2, r3, #3
 800c178:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c17c:	4413      	add	r3, r2
 800c17e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c182:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c186:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c18a:	881b      	ldrh	r3, [r3, #0]
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c192:	b29a      	uxth	r2, r3
 800c194:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c198:	801a      	strh	r2, [r3, #0]
 800c19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c19e:	2b3e      	cmp	r3, #62	; 0x3e
 800c1a0:	d923      	bls.n	800c1ea <USB_EPStartXfer+0x149c>
 800c1a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1a6:	095b      	lsrs	r3, r3, #5
 800c1a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c1ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1b0:	f003 031f 	and.w	r3, r3, #31
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d104      	bne.n	800c1c2 <USB_EPStartXfer+0x1474>
 800c1b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1bc:	3b01      	subs	r3, #1
 800c1be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c1c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c1c6:	881b      	ldrh	r3, [r3, #0]
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	029b      	lsls	r3, r3, #10
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1e0:	b29a      	uxth	r2, r3
 800c1e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c1e6:	801a      	strh	r2, [r3, #0]
 800c1e8:	e060      	b.n	800c2ac <USB_EPStartXfer+0x155e>
 800c1ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10c      	bne.n	800c20c <USB_EPStartXfer+0x14be>
 800c1f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c1f6:	881b      	ldrh	r3, [r3, #0]
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c202:	b29a      	uxth	r2, r3
 800c204:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c208:	801a      	strh	r2, [r3, #0]
 800c20a:	e04f      	b.n	800c2ac <USB_EPStartXfer+0x155e>
 800c20c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c210:	085b      	lsrs	r3, r3, #1
 800c212:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c21a:	f003 0301 	and.w	r3, r3, #1
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d004      	beq.n	800c22c <USB_EPStartXfer+0x14de>
 800c222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c226:	3301      	adds	r3, #1
 800c228:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c22c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c230:	881b      	ldrh	r3, [r3, #0]
 800c232:	b29a      	uxth	r2, r3
 800c234:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c238:	b29b      	uxth	r3, r3
 800c23a:	029b      	lsls	r3, r3, #10
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	4313      	orrs	r3, r2
 800c240:	b29a      	uxth	r2, r3
 800c242:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c246:	801a      	strh	r2, [r3, #0]
 800c248:	e030      	b.n	800c2ac <USB_EPStartXfer+0x155e>
 800c24a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c24e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	785b      	ldrb	r3, [r3, #1]
 800c256:	2b01      	cmp	r3, #1
 800c258:	d128      	bne.n	800c2ac <USB_EPStartXfer+0x155e>
 800c25a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c25e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c26c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c276:	b29b      	uxth	r3, r3
 800c278:	461a      	mov	r2, r3
 800c27a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c27e:	4413      	add	r3, r2
 800c280:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	00da      	lsls	r2, r3, #3
 800c292:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c296:	4413      	add	r3, r2
 800c298:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c29c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2a4:	b29a      	uxth	r2, r3
 800c2a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c2aa:	801a      	strh	r2, [r3, #0]
 800c2ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c2ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	785b      	ldrb	r3, [r3, #1]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	f040 8085 	bne.w	800c3d6 <USB_EPStartXfer+0x1688>
 800c2cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c2da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c2f0:	4413      	add	r3, r2
 800c2f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c2f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	00da      	lsls	r2, r3, #3
 800c304:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c308:	4413      	add	r3, r2
 800c30a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c30e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c312:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c316:	881b      	ldrh	r3, [r3, #0]
 800c318:	b29b      	uxth	r3, r3
 800c31a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c31e:	b29a      	uxth	r2, r3
 800c320:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c324:	801a      	strh	r2, [r3, #0]
 800c326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c32a:	2b3e      	cmp	r3, #62	; 0x3e
 800c32c:	d923      	bls.n	800c376 <USB_EPStartXfer+0x1628>
 800c32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c332:	095b      	lsrs	r3, r3, #5
 800c334:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c33c:	f003 031f 	and.w	r3, r3, #31
 800c340:	2b00      	cmp	r3, #0
 800c342:	d104      	bne.n	800c34e <USB_EPStartXfer+0x1600>
 800c344:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c348:	3b01      	subs	r3, #1
 800c34a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c34e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c352:	881b      	ldrh	r3, [r3, #0]
 800c354:	b29a      	uxth	r2, r3
 800c356:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	029b      	lsls	r3, r3, #10
 800c35e:	b29b      	uxth	r3, r3
 800c360:	4313      	orrs	r3, r2
 800c362:	b29b      	uxth	r3, r3
 800c364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c36c:	b29a      	uxth	r2, r3
 800c36e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c372:	801a      	strh	r2, [r3, #0]
 800c374:	e05c      	b.n	800c430 <USB_EPStartXfer+0x16e2>
 800c376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10c      	bne.n	800c398 <USB_EPStartXfer+0x164a>
 800c37e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c382:	881b      	ldrh	r3, [r3, #0]
 800c384:	b29b      	uxth	r3, r3
 800c386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c38a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c38e:	b29a      	uxth	r2, r3
 800c390:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c394:	801a      	strh	r2, [r3, #0]
 800c396:	e04b      	b.n	800c430 <USB_EPStartXfer+0x16e2>
 800c398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c39c:	085b      	lsrs	r3, r3, #1
 800c39e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c3a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3a6:	f003 0301 	and.w	r3, r3, #1
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d004      	beq.n	800c3b8 <USB_EPStartXfer+0x166a>
 800c3ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c3b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c3bc:	881b      	ldrh	r3, [r3, #0]
 800c3be:	b29a      	uxth	r2, r3
 800c3c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	029b      	lsls	r3, r3, #10
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	4313      	orrs	r3, r2
 800c3cc:	b29a      	uxth	r2, r3
 800c3ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c3d2:	801a      	strh	r2, [r3, #0]
 800c3d4:	e02c      	b.n	800c430 <USB_EPStartXfer+0x16e2>
 800c3d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	785b      	ldrb	r3, [r3, #1]
 800c3e2:	2b01      	cmp	r3, #1
 800c3e4:	d124      	bne.n	800c430 <USB_EPStartXfer+0x16e2>
 800c3e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3f4:	b29b      	uxth	r3, r3
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c3fc:	4413      	add	r3, r2
 800c3fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	00da      	lsls	r2, r3, #3
 800c410:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c414:	4413      	add	r3, r2
 800c416:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c41a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c41e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c422:	b29a      	uxth	r2, r3
 800c424:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c428:	801a      	strh	r2, [r3, #0]
 800c42a:	e001      	b.n	800c430 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800c42c:	2301      	movs	r3, #1
 800c42e:	e03a      	b.n	800c4a6 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c434:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c43e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	4413      	add	r3, r2
 800c44a:	881b      	ldrh	r3, [r3, #0]
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c456:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c45a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c45e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c462:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c466:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c46a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c46e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c476:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	441a      	add	r2, r3
 800c48c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c49c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4a0:	b29b      	uxth	r3, r3
 800c4a2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c4a4:	2300      	movs	r3, #0
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b085      	sub	sp, #20
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	785b      	ldrb	r3, [r3, #1]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d020      	beq.n	800c504 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	009b      	lsls	r3, r3, #2
 800c4ca:	4413      	add	r3, r2
 800c4cc:	881b      	ldrh	r3, [r3, #0]
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4d8:	81bb      	strh	r3, [r7, #12]
 800c4da:	89bb      	ldrh	r3, [r7, #12]
 800c4dc:	f083 0310 	eor.w	r3, r3, #16
 800c4e0:	81bb      	strh	r3, [r7, #12]
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	009b      	lsls	r3, r3, #2
 800c4ea:	441a      	add	r2, r3
 800c4ec:	89bb      	ldrh	r3, [r7, #12]
 800c4ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	8013      	strh	r3, [r2, #0]
 800c502:	e01f      	b.n	800c544 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	4413      	add	r3, r2
 800c50e:	881b      	ldrh	r3, [r3, #0]
 800c510:	b29b      	uxth	r3, r3
 800c512:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c51a:	81fb      	strh	r3, [r7, #14]
 800c51c:	89fb      	ldrh	r3, [r7, #14]
 800c51e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c522:	81fb      	strh	r3, [r7, #14]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	009b      	lsls	r3, r3, #2
 800c52c:	441a      	add	r2, r3
 800c52e:	89fb      	ldrh	r3, [r7, #14]
 800c530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c53c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c540:	b29b      	uxth	r3, r3
 800c542:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c544:	2300      	movs	r3, #0
}
 800c546:	4618      	mov	r0, r3
 800c548:	3714      	adds	r7, #20
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr

0800c552 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c552:	b480      	push	{r7}
 800c554:	b087      	sub	sp, #28
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
 800c55a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	7b1b      	ldrb	r3, [r3, #12]
 800c560:	2b00      	cmp	r3, #0
 800c562:	f040 809d 	bne.w	800c6a0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	785b      	ldrb	r3, [r3, #1]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d04c      	beq.n	800c608 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	4413      	add	r3, r2
 800c578:	881b      	ldrh	r3, [r3, #0]
 800c57a:	823b      	strh	r3, [r7, #16]
 800c57c:	8a3b      	ldrh	r3, [r7, #16]
 800c57e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c582:	2b00      	cmp	r3, #0
 800c584:	d01b      	beq.n	800c5be <USB_EPClearStall+0x6c>
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	4413      	add	r3, r2
 800c590:	881b      	ldrh	r3, [r3, #0]
 800c592:	b29b      	uxth	r3, r3
 800c594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c59c:	81fb      	strh	r3, [r7, #14]
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	441a      	add	r2, r3
 800c5a8:	89fb      	ldrh	r3, [r7, #14]
 800c5aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	78db      	ldrb	r3, [r3, #3]
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d06c      	beq.n	800c6a0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	4413      	add	r3, r2
 800c5d0:	881b      	ldrh	r3, [r3, #0]
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5dc:	81bb      	strh	r3, [r7, #12]
 800c5de:	89bb      	ldrh	r3, [r7, #12]
 800c5e0:	f083 0320 	eor.w	r3, r3, #32
 800c5e4:	81bb      	strh	r3, [r7, #12]
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	009b      	lsls	r3, r3, #2
 800c5ee:	441a      	add	r2, r3
 800c5f0:	89bb      	ldrh	r3, [r7, #12]
 800c5f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c602:	b29b      	uxth	r3, r3
 800c604:	8013      	strh	r3, [r2, #0]
 800c606:	e04b      	b.n	800c6a0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	4413      	add	r3, r2
 800c612:	881b      	ldrh	r3, [r3, #0]
 800c614:	82fb      	strh	r3, [r7, #22]
 800c616:	8afb      	ldrh	r3, [r7, #22]
 800c618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d01b      	beq.n	800c658 <USB_EPClearStall+0x106>
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	4413      	add	r3, r2
 800c62a:	881b      	ldrh	r3, [r3, #0]
 800c62c:	b29b      	uxth	r3, r3
 800c62e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c636:	82bb      	strh	r3, [r7, #20]
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	009b      	lsls	r3, r3, #2
 800c640:	441a      	add	r2, r3
 800c642:	8abb      	ldrh	r3, [r7, #20]
 800c644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c64c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c654:	b29b      	uxth	r3, r3
 800c656:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	009b      	lsls	r3, r3, #2
 800c660:	4413      	add	r3, r2
 800c662:	881b      	ldrh	r3, [r3, #0]
 800c664:	b29b      	uxth	r3, r3
 800c666:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c66a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c66e:	827b      	strh	r3, [r7, #18]
 800c670:	8a7b      	ldrh	r3, [r7, #18]
 800c672:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c676:	827b      	strh	r3, [r7, #18]
 800c678:	8a7b      	ldrh	r3, [r7, #18]
 800c67a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c67e:	827b      	strh	r3, [r7, #18]
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	009b      	lsls	r3, r3, #2
 800c688:	441a      	add	r2, r3
 800c68a:	8a7b      	ldrh	r3, [r7, #18]
 800c68c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c690:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c6a0:	2300      	movs	r3, #0
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	371c      	adds	r7, #28
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr

0800c6ae <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c6ae:	b480      	push	{r7}
 800c6b0:	b083      	sub	sp, #12
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c6ba:	78fb      	ldrb	r3, [r7, #3]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d103      	bne.n	800c6c8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2280      	movs	r2, #128	; 0x80
 800c6c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c6c8:	2300      	movs	r3, #0
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	370c      	adds	r7, #12
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr

0800c6d6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c6d6:	b480      	push	{r7}
 800c6d8:	b083      	sub	sp, #12
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6ee:	b29a      	uxth	r2, r3
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c6f6:	2300      	movs	r3, #0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	370c      	adds	r7, #12
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c712:	b29b      	uxth	r3, r3
 800c714:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c716:	68fb      	ldr	r3, [r7, #12]
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3714      	adds	r7, #20
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr

0800c724 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c724:	b480      	push	{r7}
 800c726:	b08b      	sub	sp, #44	; 0x2c
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	60b9      	str	r1, [r7, #8]
 800c72e:	4611      	mov	r1, r2
 800c730:	461a      	mov	r2, r3
 800c732:	460b      	mov	r3, r1
 800c734:	80fb      	strh	r3, [r7, #6]
 800c736:	4613      	mov	r3, r2
 800c738:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c73a:	88bb      	ldrh	r3, [r7, #4]
 800c73c:	3301      	adds	r3, #1
 800c73e:	085b      	lsrs	r3, r3, #1
 800c740:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c74a:	88fa      	ldrh	r2, [r7, #6]
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	4413      	add	r3, r2
 800c750:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c754:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c756:	69bb      	ldr	r3, [r7, #24]
 800c758:	627b      	str	r3, [r7, #36]	; 0x24
 800c75a:	e01b      	b.n	800c794 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c762:	69fb      	ldr	r3, [r7, #28]
 800c764:	3301      	adds	r3, #1
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	021b      	lsls	r3, r3, #8
 800c76a:	b21a      	sxth	r2, r3
 800c76c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c770:	4313      	orrs	r3, r2
 800c772:	b21b      	sxth	r3, r3
 800c774:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c776:	6a3b      	ldr	r3, [r7, #32]
 800c778:	8a7a      	ldrh	r2, [r7, #18]
 800c77a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c77c:	6a3b      	ldr	r3, [r7, #32]
 800c77e:	3302      	adds	r3, #2
 800c780:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	3301      	adds	r3, #1
 800c786:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c788:	69fb      	ldr	r3, [r7, #28]
 800c78a:	3301      	adds	r3, #1
 800c78c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c790:	3b01      	subs	r3, #1
 800c792:	627b      	str	r3, [r7, #36]	; 0x24
 800c794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c796:	2b00      	cmp	r3, #0
 800c798:	d1e0      	bne.n	800c75c <USB_WritePMA+0x38>
  }
}
 800c79a:	bf00      	nop
 800c79c:	bf00      	nop
 800c79e:	372c      	adds	r7, #44	; 0x2c
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b08b      	sub	sp, #44	; 0x2c
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	4611      	mov	r1, r2
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	80fb      	strh	r3, [r7, #6]
 800c7ba:	4613      	mov	r3, r2
 800c7bc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c7be:	88bb      	ldrh	r3, [r7, #4]
 800c7c0:	085b      	lsrs	r3, r3, #1
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c7ce:	88fa      	ldrh	r2, [r7, #6]
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	4413      	add	r3, r2
 800c7d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c7d8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c7da:	69bb      	ldr	r3, [r7, #24]
 800c7dc:	627b      	str	r3, [r7, #36]	; 0x24
 800c7de:	e018      	b.n	800c812 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c7e0:	6a3b      	ldr	r3, [r7, #32]
 800c7e2:	881b      	ldrh	r3, [r3, #0]
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c7e8:	6a3b      	ldr	r3, [r7, #32]
 800c7ea:	3302      	adds	r3, #2
 800c7ec:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	b2da      	uxtb	r2, r3
 800c7f2:	69fb      	ldr	r3, [r7, #28]
 800c7f4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c7f6:	69fb      	ldr	r3, [r7, #28]
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	0a1b      	lsrs	r3, r3, #8
 800c800:	b2da      	uxtb	r2, r3
 800c802:	69fb      	ldr	r3, [r7, #28]
 800c804:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	3301      	adds	r3, #1
 800c80a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80e:	3b01      	subs	r3, #1
 800c810:	627b      	str	r3, [r7, #36]	; 0x24
 800c812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c814:	2b00      	cmp	r3, #0
 800c816:	d1e3      	bne.n	800c7e0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c818:	88bb      	ldrh	r3, [r7, #4]
 800c81a:	f003 0301 	and.w	r3, r3, #1
 800c81e:	b29b      	uxth	r3, r3
 800c820:	2b00      	cmp	r3, #0
 800c822:	d007      	beq.n	800c834 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800c824:	6a3b      	ldr	r3, [r7, #32]
 800c826:	881b      	ldrh	r3, [r3, #0]
 800c828:	b29b      	uxth	r3, r3
 800c82a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	b2da      	uxtb	r2, r3
 800c830:	69fb      	ldr	r3, [r7, #28]
 800c832:	701a      	strb	r2, [r3, #0]
  }
}
 800c834:	bf00      	nop
 800c836:	372c      	adds	r7, #44	; 0x2c
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr

0800c840 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	460b      	mov	r3, r1
 800c84a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c84c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c850:	f002 f920 	bl	800ea94 <USBD_static_malloc>
 800c854:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d105      	bne.n	800c868 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2200      	movs	r2, #0
 800c860:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c864:	2302      	movs	r3, #2
 800c866:	e066      	b.n	800c936 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	68fa      	ldr	r2, [r7, #12]
 800c86c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	7c1b      	ldrb	r3, [r3, #16]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d119      	bne.n	800c8ac <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c87c:	2202      	movs	r2, #2
 800c87e:	2181      	movs	r1, #129	; 0x81
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f001 ffae 	bl	800e7e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2201      	movs	r2, #1
 800c88a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c88c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c890:	2202      	movs	r2, #2
 800c892:	2101      	movs	r1, #1
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f001 ffa4 	bl	800e7e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2201      	movs	r2, #1
 800c89e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2210      	movs	r2, #16
 800c8a6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800c8aa:	e016      	b.n	800c8da <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c8ac:	2340      	movs	r3, #64	; 0x40
 800c8ae:	2202      	movs	r2, #2
 800c8b0:	2181      	movs	r1, #129	; 0x81
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f001 ff95 	bl	800e7e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c8be:	2340      	movs	r3, #64	; 0x40
 800c8c0:	2202      	movs	r2, #2
 800c8c2:	2101      	movs	r1, #1
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f001 ff8c 	bl	800e7e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2210      	movs	r2, #16
 800c8d6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c8da:	2308      	movs	r3, #8
 800c8dc:	2203      	movs	r2, #3
 800c8de:	2182      	movs	r1, #130	; 0x82
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f001 ff7e 	bl	800e7e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2200      	movs	r2, #0
 800c904:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	7c1b      	ldrb	r3, [r3, #16]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d109      	bne.n	800c924 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c91a:	2101      	movs	r1, #1
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f002 f84f 	bl	800e9c0 <USBD_LL_PrepareReceive>
 800c922:	e007      	b.n	800c934 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c92a:	2340      	movs	r3, #64	; 0x40
 800c92c:	2101      	movs	r1, #1
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f002 f846 	bl	800e9c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c934:	2300      	movs	r3, #0
}
 800c936:	4618      	mov	r0, r3
 800c938:	3710      	adds	r7, #16
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c93e:	b580      	push	{r7, lr}
 800c940:	b082      	sub	sp, #8
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
 800c946:	460b      	mov	r3, r1
 800c948:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c94a:	2181      	movs	r1, #129	; 0x81
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f001 ff6e 	bl	800e82e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c958:	2101      	movs	r1, #1
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f001 ff67 	bl	800e82e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2200      	movs	r2, #0
 800c964:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c968:	2182      	movs	r1, #130	; 0x82
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f001 ff5f 	bl	800e82e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2200      	movs	r2, #0
 800c974:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2200      	movs	r2, #0
 800c97c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c986:	2b00      	cmp	r3, #0
 800c988:	d00e      	beq.n	800c9a8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c990:	685b      	ldr	r3, [r3, #4]
 800c992:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c99a:	4618      	mov	r0, r3
 800c99c:	f002 f888 	bl	800eab0 <USBD_static_free>
    pdev->pClassData = NULL;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c9a8:	2300      	movs	r3, #0
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3708      	adds	r7, #8
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
	...

0800c9b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b086      	sub	sp, #24
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c9c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d101      	bne.n	800c9dc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c9d8:	2303      	movs	r3, #3
 800c9da:	e0af      	b.n	800cb3c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d03f      	beq.n	800ca68 <USBD_CDC_Setup+0xb4>
 800c9e8:	2b20      	cmp	r3, #32
 800c9ea:	f040 809f 	bne.w	800cb2c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	88db      	ldrh	r3, [r3, #6]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d02e      	beq.n	800ca54 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	b25b      	sxtb	r3, r3
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	da16      	bge.n	800ca2e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	683a      	ldr	r2, [r7, #0]
 800ca0a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ca0c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ca0e:	683a      	ldr	r2, [r7, #0]
 800ca10:	88d2      	ldrh	r2, [r2, #6]
 800ca12:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	88db      	ldrh	r3, [r3, #6]
 800ca18:	2b07      	cmp	r3, #7
 800ca1a:	bf28      	it	cs
 800ca1c:	2307      	movcs	r3, #7
 800ca1e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	89fa      	ldrh	r2, [r7, #14]
 800ca24:	4619      	mov	r1, r3
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f001 facf 	bl	800dfca <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ca2c:	e085      	b.n	800cb3a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	785a      	ldrb	r2, [r3, #1]
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	88db      	ldrh	r3, [r3, #6]
 800ca3c:	b2da      	uxtb	r2, r3
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ca44:	6939      	ldr	r1, [r7, #16]
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	88db      	ldrh	r3, [r3, #6]
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f001 fae8 	bl	800e022 <USBD_CtlPrepareRx>
      break;
 800ca52:	e072      	b.n	800cb3a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca5a:	689b      	ldr	r3, [r3, #8]
 800ca5c:	683a      	ldr	r2, [r7, #0]
 800ca5e:	7850      	ldrb	r0, [r2, #1]
 800ca60:	2200      	movs	r2, #0
 800ca62:	6839      	ldr	r1, [r7, #0]
 800ca64:	4798      	blx	r3
      break;
 800ca66:	e068      	b.n	800cb3a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	785b      	ldrb	r3, [r3, #1]
 800ca6c:	2b0b      	cmp	r3, #11
 800ca6e:	d852      	bhi.n	800cb16 <USBD_CDC_Setup+0x162>
 800ca70:	a201      	add	r2, pc, #4	; (adr r2, 800ca78 <USBD_CDC_Setup+0xc4>)
 800ca72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca76:	bf00      	nop
 800ca78:	0800caa9 	.word	0x0800caa9
 800ca7c:	0800cb25 	.word	0x0800cb25
 800ca80:	0800cb17 	.word	0x0800cb17
 800ca84:	0800cb17 	.word	0x0800cb17
 800ca88:	0800cb17 	.word	0x0800cb17
 800ca8c:	0800cb17 	.word	0x0800cb17
 800ca90:	0800cb17 	.word	0x0800cb17
 800ca94:	0800cb17 	.word	0x0800cb17
 800ca98:	0800cb17 	.word	0x0800cb17
 800ca9c:	0800cb17 	.word	0x0800cb17
 800caa0:	0800cad3 	.word	0x0800cad3
 800caa4:	0800cafd 	.word	0x0800cafd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caae:	b2db      	uxtb	r3, r3
 800cab0:	2b03      	cmp	r3, #3
 800cab2:	d107      	bne.n	800cac4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cab4:	f107 030a 	add.w	r3, r7, #10
 800cab8:	2202      	movs	r2, #2
 800caba:	4619      	mov	r1, r3
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f001 fa84 	bl	800dfca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cac2:	e032      	b.n	800cb2a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800cac4:	6839      	ldr	r1, [r7, #0]
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f001 fa0e 	bl	800dee8 <USBD_CtlError>
            ret = USBD_FAIL;
 800cacc:	2303      	movs	r3, #3
 800cace:	75fb      	strb	r3, [r7, #23]
          break;
 800cad0:	e02b      	b.n	800cb2a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	2b03      	cmp	r3, #3
 800cadc:	d107      	bne.n	800caee <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cade:	f107 030d 	add.w	r3, r7, #13
 800cae2:	2201      	movs	r2, #1
 800cae4:	4619      	mov	r1, r3
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f001 fa6f 	bl	800dfca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800caec:	e01d      	b.n	800cb2a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800caee:	6839      	ldr	r1, [r7, #0]
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f001 f9f9 	bl	800dee8 <USBD_CtlError>
            ret = USBD_FAIL;
 800caf6:	2303      	movs	r3, #3
 800caf8:	75fb      	strb	r3, [r7, #23]
          break;
 800cafa:	e016      	b.n	800cb2a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	2b03      	cmp	r3, #3
 800cb06:	d00f      	beq.n	800cb28 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800cb08:	6839      	ldr	r1, [r7, #0]
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f001 f9ec 	bl	800dee8 <USBD_CtlError>
            ret = USBD_FAIL;
 800cb10:	2303      	movs	r3, #3
 800cb12:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cb14:	e008      	b.n	800cb28 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cb16:	6839      	ldr	r1, [r7, #0]
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f001 f9e5 	bl	800dee8 <USBD_CtlError>
          ret = USBD_FAIL;
 800cb1e:	2303      	movs	r3, #3
 800cb20:	75fb      	strb	r3, [r7, #23]
          break;
 800cb22:	e002      	b.n	800cb2a <USBD_CDC_Setup+0x176>
          break;
 800cb24:	bf00      	nop
 800cb26:	e008      	b.n	800cb3a <USBD_CDC_Setup+0x186>
          break;
 800cb28:	bf00      	nop
      }
      break;
 800cb2a:	e006      	b.n	800cb3a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800cb2c:	6839      	ldr	r1, [r7, #0]
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f001 f9da 	bl	800dee8 <USBD_CtlError>
      ret = USBD_FAIL;
 800cb34:	2303      	movs	r3, #3
 800cb36:	75fb      	strb	r3, [r7, #23]
      break;
 800cb38:	bf00      	nop
  }

  return (uint8_t)ret;
 800cb3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3718      	adds	r7, #24
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d101      	bne.n	800cb66 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cb62:	2303      	movs	r3, #3
 800cb64:	e04f      	b.n	800cc06 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cb6e:	78fa      	ldrb	r2, [r7, #3]
 800cb70:	6879      	ldr	r1, [r7, #4]
 800cb72:	4613      	mov	r3, r2
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	4413      	add	r3, r2
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	440b      	add	r3, r1
 800cb7c:	3318      	adds	r3, #24
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d029      	beq.n	800cbd8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800cb84:	78fa      	ldrb	r2, [r7, #3]
 800cb86:	6879      	ldr	r1, [r7, #4]
 800cb88:	4613      	mov	r3, r2
 800cb8a:	009b      	lsls	r3, r3, #2
 800cb8c:	4413      	add	r3, r2
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	440b      	add	r3, r1
 800cb92:	3318      	adds	r3, #24
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	78f9      	ldrb	r1, [r7, #3]
 800cb98:	68f8      	ldr	r0, [r7, #12]
 800cb9a:	460b      	mov	r3, r1
 800cb9c:	009b      	lsls	r3, r3, #2
 800cb9e:	440b      	add	r3, r1
 800cba0:	00db      	lsls	r3, r3, #3
 800cba2:	4403      	add	r3, r0
 800cba4:	3320      	adds	r3, #32
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	fbb2 f1f3 	udiv	r1, r2, r3
 800cbac:	fb01 f303 	mul.w	r3, r1, r3
 800cbb0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d110      	bne.n	800cbd8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800cbb6:	78fa      	ldrb	r2, [r7, #3]
 800cbb8:	6879      	ldr	r1, [r7, #4]
 800cbba:	4613      	mov	r3, r2
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	4413      	add	r3, r2
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	440b      	add	r3, r1
 800cbc4:	3318      	adds	r3, #24
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cbca:	78f9      	ldrb	r1, [r7, #3]
 800cbcc:	2300      	movs	r3, #0
 800cbce:	2200      	movs	r2, #0
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f001 fed4 	bl	800e97e <USBD_LL_Transmit>
 800cbd6:	e015      	b.n	800cc04 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbe6:	691b      	ldr	r3, [r3, #16]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d00b      	beq.n	800cc04 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbf2:	691b      	ldr	r3, [r3, #16]
 800cbf4:	68ba      	ldr	r2, [r7, #8]
 800cbf6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cbfa:	68ba      	ldr	r2, [r7, #8]
 800cbfc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cc00:	78fa      	ldrb	r2, [r7, #3]
 800cc02:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cc04:	2300      	movs	r3, #0
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3710      	adds	r7, #16
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}

0800cc0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cc0e:	b580      	push	{r7, lr}
 800cc10:	b084      	sub	sp, #16
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
 800cc16:	460b      	mov	r3, r1
 800cc18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d101      	bne.n	800cc30 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cc2c:	2303      	movs	r3, #3
 800cc2e:	e015      	b.n	800cc5c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cc30:	78fb      	ldrb	r3, [r7, #3]
 800cc32:	4619      	mov	r1, r3
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f001 fee4 	bl	800ea02 <USBD_LL_GetRxDataSize>
 800cc3a:	4602      	mov	r2, r0
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc48:	68db      	ldr	r3, [r3, #12]
 800cc4a:	68fa      	ldr	r2, [r7, #12]
 800cc4c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cc50:	68fa      	ldr	r2, [r7, #12]
 800cc52:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cc56:	4611      	mov	r1, r2
 800cc58:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cc5a:	2300      	movs	r3, #0
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3710      	adds	r7, #16
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}

0800cc64 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc72:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d101      	bne.n	800cc7e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800cc7a:	2303      	movs	r3, #3
 800cc7c:	e01b      	b.n	800ccb6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d015      	beq.n	800ccb4 <USBD_CDC_EP0_RxReady+0x50>
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cc8e:	2bff      	cmp	r3, #255	; 0xff
 800cc90:	d010      	beq.n	800ccb4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	68fa      	ldr	r2, [r7, #12]
 800cc9c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800cca0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800cca2:	68fa      	ldr	r2, [r7, #12]
 800cca4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cca8:	b292      	uxth	r2, r2
 800ccaa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	22ff      	movs	r2, #255	; 0xff
 800ccb0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ccb4:	2300      	movs	r3, #0
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3710      	adds	r7, #16
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
	...

0800ccc0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b083      	sub	sp, #12
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2243      	movs	r2, #67	; 0x43
 800cccc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ccce:	4b03      	ldr	r3, [pc, #12]	; (800ccdc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	370c      	adds	r7, #12
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr
 800ccdc:	200000a0 	.word	0x200000a0

0800cce0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b083      	sub	sp, #12
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2243      	movs	r2, #67	; 0x43
 800ccec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ccee:	4b03      	ldr	r3, [pc, #12]	; (800ccfc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	370c      	adds	r7, #12
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr
 800ccfc:	2000005c 	.word	0x2000005c

0800cd00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b083      	sub	sp, #12
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2243      	movs	r2, #67	; 0x43
 800cd0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800cd0e:	4b03      	ldr	r3, [pc, #12]	; (800cd1c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	370c      	adds	r7, #12
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr
 800cd1c:	200000e4 	.word	0x200000e4

0800cd20 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b083      	sub	sp, #12
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	220a      	movs	r2, #10
 800cd2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cd2e:	4b03      	ldr	r3, [pc, #12]	; (800cd3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	370c      	adds	r7, #12
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr
 800cd3c:	20000018 	.word	0x20000018

0800cd40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b083      	sub	sp, #12
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d101      	bne.n	800cd54 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cd50:	2303      	movs	r3, #3
 800cd52:	e004      	b.n	800cd5e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	683a      	ldr	r2, [r7, #0]
 800cd58:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800cd5c:	2300      	movs	r3, #0
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	370c      	adds	r7, #12
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr

0800cd6a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cd6a:	b480      	push	{r7}
 800cd6c:	b087      	sub	sp, #28
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	60f8      	str	r0, [r7, #12]
 800cd72:	60b9      	str	r1, [r7, #8]
 800cd74:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd7c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d101      	bne.n	800cd88 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800cd84:	2303      	movs	r3, #3
 800cd86:	e008      	b.n	800cd9a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	68ba      	ldr	r2, [r7, #8]
 800cd8c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cd98:	2300      	movs	r3, #0
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	371c      	adds	r7, #28
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda4:	4770      	bx	lr

0800cda6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cda6:	b480      	push	{r7}
 800cda8:	b085      	sub	sp, #20
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
 800cdae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cdb6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d101      	bne.n	800cdc2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800cdbe:	2303      	movs	r3, #3
 800cdc0:	e004      	b.n	800cdcc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	683a      	ldr	r2, [r7, #0]
 800cdc6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cdca:	2300      	movs	r3, #0
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3714      	adds	r7, #20
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr

0800cdd8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b084      	sub	sp, #16
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cde6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800cde8:	2301      	movs	r3, #1
 800cdea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d101      	bne.n	800cdfa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cdf6:	2303      	movs	r3, #3
 800cdf8:	e01a      	b.n	800ce30 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d114      	bne.n	800ce2e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	2201      	movs	r2, #1
 800ce08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ce22:	2181      	movs	r1, #129	; 0x81
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f001 fdaa 	bl	800e97e <USBD_LL_Transmit>

    ret = USBD_OK;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ce2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3710      	adds	r7, #16
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d101      	bne.n	800ce56 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ce52:	2303      	movs	r3, #3
 800ce54:	e016      	b.n	800ce84 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	7c1b      	ldrb	r3, [r3, #16]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d109      	bne.n	800ce72 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce64:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce68:	2101      	movs	r1, #1
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f001 fda8 	bl	800e9c0 <USBD_LL_PrepareReceive>
 800ce70:	e007      	b.n	800ce82 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce78:	2340      	movs	r3, #64	; 0x40
 800ce7a:	2101      	movs	r1, #1
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f001 fd9f 	bl	800e9c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ce82:	2300      	movs	r3, #0
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3710      	adds	r7, #16
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b086      	sub	sp, #24
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	4613      	mov	r3, r2
 800ce98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d101      	bne.n	800cea4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cea0:	2303      	movs	r3, #3
 800cea2:	e01f      	b.n	800cee4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2200      	movs	r2, #0
 800cea8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d003      	beq.n	800ceca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	68ba      	ldr	r2, [r7, #8]
 800cec6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2201      	movs	r2, #1
 800cece:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	79fa      	ldrb	r2, [r7, #7]
 800ced6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ced8:	68f8      	ldr	r0, [r7, #12]
 800ceda:	f001 fc07 	bl	800e6ec <USBD_LL_Init>
 800cede:	4603      	mov	r3, r0
 800cee0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cee2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3718      	adds	r7, #24
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b084      	sub	sp, #16
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cef6:	2300      	movs	r3, #0
 800cef8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d101      	bne.n	800cf04 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800cf00:	2303      	movs	r3, #3
 800cf02:	e016      	b.n	800cf32 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	683a      	ldr	r2, [r7, #0]
 800cf08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d00b      	beq.n	800cf30 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf20:	f107 020e 	add.w	r2, r7, #14
 800cf24:	4610      	mov	r0, r2
 800cf26:	4798      	blx	r3
 800cf28:	4602      	mov	r2, r0
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800cf30:	2300      	movs	r3, #0
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3710      	adds	r7, #16
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}

0800cf3a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b082      	sub	sp, #8
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f001 fc32 	bl	800e7ac <USBD_LL_Start>
 800cf48:	4603      	mov	r3, r0
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3708      	adds	r7, #8
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}

0800cf52 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cf52:	b480      	push	{r7}
 800cf54:	b083      	sub	sp, #12
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cf5a:	2300      	movs	r3, #0
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	370c      	adds	r7, #12
 800cf60:	46bd      	mov	sp, r7
 800cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf66:	4770      	bx	lr

0800cf68 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b084      	sub	sp, #16
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	460b      	mov	r3, r1
 800cf72:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cf74:	2303      	movs	r3, #3
 800cf76:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d009      	beq.n	800cf96 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	78fa      	ldrb	r2, [r7, #3]
 800cf8c:	4611      	mov	r1, r2
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	4798      	blx	r3
 800cf92:	4603      	mov	r3, r0
 800cf94:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cf96:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3710      	adds	r7, #16
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d007      	beq.n	800cfc6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfbc:	685b      	ldr	r3, [r3, #4]
 800cfbe:	78fa      	ldrb	r2, [r7, #3]
 800cfc0:	4611      	mov	r1, r2
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	4798      	blx	r3
  }

  return USBD_OK;
 800cfc6:	2300      	movs	r3, #0
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3708      	adds	r7, #8
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cfe0:	6839      	ldr	r1, [r7, #0]
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f000 ff46 	bl	800de74 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2201      	movs	r2, #1
 800cfec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cff6:	461a      	mov	r2, r3
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d004:	f003 031f 	and.w	r3, r3, #31
 800d008:	2b02      	cmp	r3, #2
 800d00a:	d01a      	beq.n	800d042 <USBD_LL_SetupStage+0x72>
 800d00c:	2b02      	cmp	r3, #2
 800d00e:	d822      	bhi.n	800d056 <USBD_LL_SetupStage+0x86>
 800d010:	2b00      	cmp	r3, #0
 800d012:	d002      	beq.n	800d01a <USBD_LL_SetupStage+0x4a>
 800d014:	2b01      	cmp	r3, #1
 800d016:	d00a      	beq.n	800d02e <USBD_LL_SetupStage+0x5e>
 800d018:	e01d      	b.n	800d056 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d020:	4619      	mov	r1, r3
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 f9ee 	bl	800d404 <USBD_StdDevReq>
 800d028:	4603      	mov	r3, r0
 800d02a:	73fb      	strb	r3, [r7, #15]
      break;
 800d02c:	e020      	b.n	800d070 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d034:	4619      	mov	r1, r3
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 fa52 	bl	800d4e0 <USBD_StdItfReq>
 800d03c:	4603      	mov	r3, r0
 800d03e:	73fb      	strb	r3, [r7, #15]
      break;
 800d040:	e016      	b.n	800d070 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d048:	4619      	mov	r1, r3
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f000 fa91 	bl	800d572 <USBD_StdEPReq>
 800d050:	4603      	mov	r3, r0
 800d052:	73fb      	strb	r3, [r7, #15]
      break;
 800d054:	e00c      	b.n	800d070 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d05c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d060:	b2db      	uxtb	r3, r3
 800d062:	4619      	mov	r1, r3
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f001 fc01 	bl	800e86c <USBD_LL_StallEP>
 800d06a:	4603      	mov	r3, r0
 800d06c:	73fb      	strb	r3, [r7, #15]
      break;
 800d06e:	bf00      	nop
  }

  return ret;
 800d070:	7bfb      	ldrb	r3, [r7, #15]
}
 800d072:	4618      	mov	r0, r3
 800d074:	3710      	adds	r7, #16
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}

0800d07a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d07a:	b580      	push	{r7, lr}
 800d07c:	b086      	sub	sp, #24
 800d07e:	af00      	add	r7, sp, #0
 800d080:	60f8      	str	r0, [r7, #12]
 800d082:	460b      	mov	r3, r1
 800d084:	607a      	str	r2, [r7, #4]
 800d086:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d088:	7afb      	ldrb	r3, [r7, #11]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d138      	bne.n	800d100 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d094:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d09c:	2b03      	cmp	r3, #3
 800d09e:	d14a      	bne.n	800d136 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	689a      	ldr	r2, [r3, #8]
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	68db      	ldr	r3, [r3, #12]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d913      	bls.n	800d0d4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	689a      	ldr	r2, [r3, #8]
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	1ad2      	subs	r2, r2, r3
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	68da      	ldr	r2, [r3, #12]
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	689b      	ldr	r3, [r3, #8]
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	bf28      	it	cs
 800d0c6:	4613      	movcs	r3, r2
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	6879      	ldr	r1, [r7, #4]
 800d0cc:	68f8      	ldr	r0, [r7, #12]
 800d0ce:	f000 ffc5 	bl	800e05c <USBD_CtlContinueRx>
 800d0d2:	e030      	b.n	800d136 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0da:	b2db      	uxtb	r3, r3
 800d0dc:	2b03      	cmp	r3, #3
 800d0de:	d10b      	bne.n	800d0f8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0e6:	691b      	ldr	r3, [r3, #16]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d005      	beq.n	800d0f8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0f2:	691b      	ldr	r3, [r3, #16]
 800d0f4:	68f8      	ldr	r0, [r7, #12]
 800d0f6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d0f8:	68f8      	ldr	r0, [r7, #12]
 800d0fa:	f000 ffc0 	bl	800e07e <USBD_CtlSendStatus>
 800d0fe:	e01a      	b.n	800d136 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d106:	b2db      	uxtb	r3, r3
 800d108:	2b03      	cmp	r3, #3
 800d10a:	d114      	bne.n	800d136 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d112:	699b      	ldr	r3, [r3, #24]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d00e      	beq.n	800d136 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d11e:	699b      	ldr	r3, [r3, #24]
 800d120:	7afa      	ldrb	r2, [r7, #11]
 800d122:	4611      	mov	r1, r2
 800d124:	68f8      	ldr	r0, [r7, #12]
 800d126:	4798      	blx	r3
 800d128:	4603      	mov	r3, r0
 800d12a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d12c:	7dfb      	ldrb	r3, [r7, #23]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d001      	beq.n	800d136 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d132:	7dfb      	ldrb	r3, [r7, #23]
 800d134:	e000      	b.n	800d138 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d136:	2300      	movs	r3, #0
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3718      	adds	r7, #24
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b086      	sub	sp, #24
 800d144:	af00      	add	r7, sp, #0
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	460b      	mov	r3, r1
 800d14a:	607a      	str	r2, [r7, #4]
 800d14c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d14e:	7afb      	ldrb	r3, [r7, #11]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d16b      	bne.n	800d22c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	3314      	adds	r3, #20
 800d158:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d160:	2b02      	cmp	r3, #2
 800d162:	d156      	bne.n	800d212 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	689a      	ldr	r2, [r3, #8]
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	68db      	ldr	r3, [r3, #12]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d914      	bls.n	800d19a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	689a      	ldr	r2, [r3, #8]
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	68db      	ldr	r3, [r3, #12]
 800d178:	1ad2      	subs	r2, r2, r3
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	461a      	mov	r2, r3
 800d184:	6879      	ldr	r1, [r7, #4]
 800d186:	68f8      	ldr	r0, [r7, #12]
 800d188:	f000 ff3a 	bl	800e000 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d18c:	2300      	movs	r3, #0
 800d18e:	2200      	movs	r2, #0
 800d190:	2100      	movs	r1, #0
 800d192:	68f8      	ldr	r0, [r7, #12]
 800d194:	f001 fc14 	bl	800e9c0 <USBD_LL_PrepareReceive>
 800d198:	e03b      	b.n	800d212 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	68da      	ldr	r2, [r3, #12]
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	689b      	ldr	r3, [r3, #8]
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d11c      	bne.n	800d1e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	685a      	ldr	r2, [r3, #4]
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	d316      	bcc.n	800d1e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	685a      	ldr	r2, [r3, #4]
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d20f      	bcs.n	800d1e0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	2100      	movs	r1, #0
 800d1c4:	68f8      	ldr	r0, [r7, #12]
 800d1c6:	f000 ff1b 	bl	800e000 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	2100      	movs	r1, #0
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	f001 fbf1 	bl	800e9c0 <USBD_LL_PrepareReceive>
 800d1de:	e018      	b.n	800d212 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	2b03      	cmp	r3, #3
 800d1ea:	d10b      	bne.n	800d204 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1f2:	68db      	ldr	r3, [r3, #12]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d005      	beq.n	800d204 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1fe:	68db      	ldr	r3, [r3, #12]
 800d200:	68f8      	ldr	r0, [r7, #12]
 800d202:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d204:	2180      	movs	r1, #128	; 0x80
 800d206:	68f8      	ldr	r0, [r7, #12]
 800d208:	f001 fb30 	bl	800e86c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d20c:	68f8      	ldr	r0, [r7, #12]
 800d20e:	f000 ff49 	bl	800e0a4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d218:	2b01      	cmp	r3, #1
 800d21a:	d122      	bne.n	800d262 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d21c:	68f8      	ldr	r0, [r7, #12]
 800d21e:	f7ff fe98 	bl	800cf52 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2200      	movs	r2, #0
 800d226:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d22a:	e01a      	b.n	800d262 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d232:	b2db      	uxtb	r3, r3
 800d234:	2b03      	cmp	r3, #3
 800d236:	d114      	bne.n	800d262 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d23e:	695b      	ldr	r3, [r3, #20]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d00e      	beq.n	800d262 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d24a:	695b      	ldr	r3, [r3, #20]
 800d24c:	7afa      	ldrb	r2, [r7, #11]
 800d24e:	4611      	mov	r1, r2
 800d250:	68f8      	ldr	r0, [r7, #12]
 800d252:	4798      	blx	r3
 800d254:	4603      	mov	r3, r0
 800d256:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d258:	7dfb      	ldrb	r3, [r7, #23]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d001      	beq.n	800d262 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d25e:	7dfb      	ldrb	r3, [r7, #23]
 800d260:	e000      	b.n	800d264 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d262:	2300      	movs	r3, #0
}
 800d264:	4618      	mov	r0, r3
 800d266:	3718      	adds	r7, #24
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2201      	movs	r2, #1
 800d278:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2200      	movs	r2, #0
 800d280:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2200      	movs	r2, #0
 800d288:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2200      	movs	r2, #0
 800d28e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d101      	bne.n	800d2a0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d29c:	2303      	movs	r3, #3
 800d29e:	e02f      	b.n	800d300 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d00f      	beq.n	800d2ca <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d009      	beq.n	800d2ca <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	6852      	ldr	r2, [r2, #4]
 800d2c2:	b2d2      	uxtb	r2, r2
 800d2c4:	4611      	mov	r1, r2
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d2ca:	2340      	movs	r3, #64	; 0x40
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f001 fa86 	bl	800e7e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2201      	movs	r2, #1
 800d2da:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2240      	movs	r2, #64	; 0x40
 800d2e2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d2e6:	2340      	movs	r3, #64	; 0x40
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	2180      	movs	r1, #128	; 0x80
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f001 fa78 	bl	800e7e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2201      	movs	r2, #1
 800d2f6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2240      	movs	r2, #64	; 0x40
 800d2fc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d2fe:	2300      	movs	r3, #0
}
 800d300:	4618      	mov	r0, r3
 800d302:	3708      	adds	r7, #8
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d308:	b480      	push	{r7}
 800d30a:	b083      	sub	sp, #12
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	460b      	mov	r3, r1
 800d312:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	78fa      	ldrb	r2, [r7, #3]
 800d318:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d31a:	2300      	movs	r3, #0
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	370c      	adds	r7, #12
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr

0800d328 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d336:	b2da      	uxtb	r2, r3
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2204      	movs	r2, #4
 800d342:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d346:	2300      	movs	r3, #0
}
 800d348:	4618      	mov	r0, r3
 800d34a:	370c      	adds	r7, #12
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr

0800d354 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d362:	b2db      	uxtb	r3, r3
 800d364:	2b04      	cmp	r3, #4
 800d366:	d106      	bne.n	800d376 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d36e:	b2da      	uxtb	r2, r3
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d376:	2300      	movs	r3, #0
}
 800d378:	4618      	mov	r0, r3
 800d37a:	370c      	adds	r7, #12
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr

0800d384 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b082      	sub	sp, #8
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d392:	2b00      	cmp	r3, #0
 800d394:	d101      	bne.n	800d39a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d396:	2303      	movs	r3, #3
 800d398:	e012      	b.n	800d3c0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3a0:	b2db      	uxtb	r3, r3
 800d3a2:	2b03      	cmp	r3, #3
 800d3a4:	d10b      	bne.n	800d3be <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3ac:	69db      	ldr	r3, [r3, #28]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d005      	beq.n	800d3be <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3b8:	69db      	ldr	r3, [r3, #28]
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d3be:	2300      	movs	r3, #0
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3708      	adds	r7, #8
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b087      	sub	sp, #28
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	3301      	adds	r3, #1
 800d3de:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d3e6:	8a3b      	ldrh	r3, [r7, #16]
 800d3e8:	021b      	lsls	r3, r3, #8
 800d3ea:	b21a      	sxth	r2, r3
 800d3ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	b21b      	sxth	r3, r3
 800d3f4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d3f6:	89fb      	ldrh	r3, [r7, #14]
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	371c      	adds	r7, #28
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr

0800d404 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b084      	sub	sp, #16
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d40e:	2300      	movs	r3, #0
 800d410:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d41a:	2b40      	cmp	r3, #64	; 0x40
 800d41c:	d005      	beq.n	800d42a <USBD_StdDevReq+0x26>
 800d41e:	2b40      	cmp	r3, #64	; 0x40
 800d420:	d853      	bhi.n	800d4ca <USBD_StdDevReq+0xc6>
 800d422:	2b00      	cmp	r3, #0
 800d424:	d00b      	beq.n	800d43e <USBD_StdDevReq+0x3a>
 800d426:	2b20      	cmp	r3, #32
 800d428:	d14f      	bne.n	800d4ca <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d430:	689b      	ldr	r3, [r3, #8]
 800d432:	6839      	ldr	r1, [r7, #0]
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	4798      	blx	r3
 800d438:	4603      	mov	r3, r0
 800d43a:	73fb      	strb	r3, [r7, #15]
      break;
 800d43c:	e04a      	b.n	800d4d4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	785b      	ldrb	r3, [r3, #1]
 800d442:	2b09      	cmp	r3, #9
 800d444:	d83b      	bhi.n	800d4be <USBD_StdDevReq+0xba>
 800d446:	a201      	add	r2, pc, #4	; (adr r2, 800d44c <USBD_StdDevReq+0x48>)
 800d448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d44c:	0800d4a1 	.word	0x0800d4a1
 800d450:	0800d4b5 	.word	0x0800d4b5
 800d454:	0800d4bf 	.word	0x0800d4bf
 800d458:	0800d4ab 	.word	0x0800d4ab
 800d45c:	0800d4bf 	.word	0x0800d4bf
 800d460:	0800d47f 	.word	0x0800d47f
 800d464:	0800d475 	.word	0x0800d475
 800d468:	0800d4bf 	.word	0x0800d4bf
 800d46c:	0800d497 	.word	0x0800d497
 800d470:	0800d489 	.word	0x0800d489
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d474:	6839      	ldr	r1, [r7, #0]
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 f9de 	bl	800d838 <USBD_GetDescriptor>
          break;
 800d47c:	e024      	b.n	800d4c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d47e:	6839      	ldr	r1, [r7, #0]
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 fb6d 	bl	800db60 <USBD_SetAddress>
          break;
 800d486:	e01f      	b.n	800d4c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d488:	6839      	ldr	r1, [r7, #0]
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 fbac 	bl	800dbe8 <USBD_SetConfig>
 800d490:	4603      	mov	r3, r0
 800d492:	73fb      	strb	r3, [r7, #15]
          break;
 800d494:	e018      	b.n	800d4c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d496:	6839      	ldr	r1, [r7, #0]
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f000 fc4b 	bl	800dd34 <USBD_GetConfig>
          break;
 800d49e:	e013      	b.n	800d4c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d4a0:	6839      	ldr	r1, [r7, #0]
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f000 fc7c 	bl	800dda0 <USBD_GetStatus>
          break;
 800d4a8:	e00e      	b.n	800d4c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d4aa:	6839      	ldr	r1, [r7, #0]
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f000 fcab 	bl	800de08 <USBD_SetFeature>
          break;
 800d4b2:	e009      	b.n	800d4c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d4b4:	6839      	ldr	r1, [r7, #0]
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f000 fcba 	bl	800de30 <USBD_ClrFeature>
          break;
 800d4bc:	e004      	b.n	800d4c8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d4be:	6839      	ldr	r1, [r7, #0]
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f000 fd11 	bl	800dee8 <USBD_CtlError>
          break;
 800d4c6:	bf00      	nop
      }
      break;
 800d4c8:	e004      	b.n	800d4d4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d4ca:	6839      	ldr	r1, [r7, #0]
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f000 fd0b 	bl	800dee8 <USBD_CtlError>
      break;
 800d4d2:	bf00      	nop
  }

  return ret;
 800d4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3710      	adds	r7, #16
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}
 800d4de:	bf00      	nop

0800d4e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b084      	sub	sp, #16
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	781b      	ldrb	r3, [r3, #0]
 800d4f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d4f6:	2b40      	cmp	r3, #64	; 0x40
 800d4f8:	d005      	beq.n	800d506 <USBD_StdItfReq+0x26>
 800d4fa:	2b40      	cmp	r3, #64	; 0x40
 800d4fc:	d82f      	bhi.n	800d55e <USBD_StdItfReq+0x7e>
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d001      	beq.n	800d506 <USBD_StdItfReq+0x26>
 800d502:	2b20      	cmp	r3, #32
 800d504:	d12b      	bne.n	800d55e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d50c:	b2db      	uxtb	r3, r3
 800d50e:	3b01      	subs	r3, #1
 800d510:	2b02      	cmp	r3, #2
 800d512:	d81d      	bhi.n	800d550 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	889b      	ldrh	r3, [r3, #4]
 800d518:	b2db      	uxtb	r3, r3
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d813      	bhi.n	800d546 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d524:	689b      	ldr	r3, [r3, #8]
 800d526:	6839      	ldr	r1, [r7, #0]
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	4798      	blx	r3
 800d52c:	4603      	mov	r3, r0
 800d52e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	88db      	ldrh	r3, [r3, #6]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d110      	bne.n	800d55a <USBD_StdItfReq+0x7a>
 800d538:	7bfb      	ldrb	r3, [r7, #15]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d10d      	bne.n	800d55a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 fd9d 	bl	800e07e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d544:	e009      	b.n	800d55a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d546:	6839      	ldr	r1, [r7, #0]
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f000 fccd 	bl	800dee8 <USBD_CtlError>
          break;
 800d54e:	e004      	b.n	800d55a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d550:	6839      	ldr	r1, [r7, #0]
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 fcc8 	bl	800dee8 <USBD_CtlError>
          break;
 800d558:	e000      	b.n	800d55c <USBD_StdItfReq+0x7c>
          break;
 800d55a:	bf00      	nop
      }
      break;
 800d55c:	e004      	b.n	800d568 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d55e:	6839      	ldr	r1, [r7, #0]
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f000 fcc1 	bl	800dee8 <USBD_CtlError>
      break;
 800d566:	bf00      	nop
  }

  return ret;
 800d568:	7bfb      	ldrb	r3, [r7, #15]
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3710      	adds	r7, #16
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}

0800d572 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d572:	b580      	push	{r7, lr}
 800d574:	b084      	sub	sp, #16
 800d576:	af00      	add	r7, sp, #0
 800d578:	6078      	str	r0, [r7, #4]
 800d57a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d57c:	2300      	movs	r3, #0
 800d57e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	889b      	ldrh	r3, [r3, #4]
 800d584:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d58e:	2b40      	cmp	r3, #64	; 0x40
 800d590:	d007      	beq.n	800d5a2 <USBD_StdEPReq+0x30>
 800d592:	2b40      	cmp	r3, #64	; 0x40
 800d594:	f200 8145 	bhi.w	800d822 <USBD_StdEPReq+0x2b0>
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d00c      	beq.n	800d5b6 <USBD_StdEPReq+0x44>
 800d59c:	2b20      	cmp	r3, #32
 800d59e:	f040 8140 	bne.w	800d822 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5a8:	689b      	ldr	r3, [r3, #8]
 800d5aa:	6839      	ldr	r1, [r7, #0]
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	4798      	blx	r3
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	73fb      	strb	r3, [r7, #15]
      break;
 800d5b4:	e13a      	b.n	800d82c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	785b      	ldrb	r3, [r3, #1]
 800d5ba:	2b03      	cmp	r3, #3
 800d5bc:	d007      	beq.n	800d5ce <USBD_StdEPReq+0x5c>
 800d5be:	2b03      	cmp	r3, #3
 800d5c0:	f300 8129 	bgt.w	800d816 <USBD_StdEPReq+0x2a4>
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d07f      	beq.n	800d6c8 <USBD_StdEPReq+0x156>
 800d5c8:	2b01      	cmp	r3, #1
 800d5ca:	d03c      	beq.n	800d646 <USBD_StdEPReq+0xd4>
 800d5cc:	e123      	b.n	800d816 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5d4:	b2db      	uxtb	r3, r3
 800d5d6:	2b02      	cmp	r3, #2
 800d5d8:	d002      	beq.n	800d5e0 <USBD_StdEPReq+0x6e>
 800d5da:	2b03      	cmp	r3, #3
 800d5dc:	d016      	beq.n	800d60c <USBD_StdEPReq+0x9a>
 800d5de:	e02c      	b.n	800d63a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d5e0:	7bbb      	ldrb	r3, [r7, #14]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d00d      	beq.n	800d602 <USBD_StdEPReq+0x90>
 800d5e6:	7bbb      	ldrb	r3, [r7, #14]
 800d5e8:	2b80      	cmp	r3, #128	; 0x80
 800d5ea:	d00a      	beq.n	800d602 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d5ec:	7bbb      	ldrb	r3, [r7, #14]
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f001 f93b 	bl	800e86c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d5f6:	2180      	movs	r1, #128	; 0x80
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f001 f937 	bl	800e86c <USBD_LL_StallEP>
 800d5fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d600:	e020      	b.n	800d644 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d602:	6839      	ldr	r1, [r7, #0]
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f000 fc6f 	bl	800dee8 <USBD_CtlError>
              break;
 800d60a:	e01b      	b.n	800d644 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	885b      	ldrh	r3, [r3, #2]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d10e      	bne.n	800d632 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d614:	7bbb      	ldrb	r3, [r7, #14]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d00b      	beq.n	800d632 <USBD_StdEPReq+0xc0>
 800d61a:	7bbb      	ldrb	r3, [r7, #14]
 800d61c:	2b80      	cmp	r3, #128	; 0x80
 800d61e:	d008      	beq.n	800d632 <USBD_StdEPReq+0xc0>
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	88db      	ldrh	r3, [r3, #6]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d104      	bne.n	800d632 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d628:	7bbb      	ldrb	r3, [r7, #14]
 800d62a:	4619      	mov	r1, r3
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f001 f91d 	bl	800e86c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f000 fd23 	bl	800e07e <USBD_CtlSendStatus>

              break;
 800d638:	e004      	b.n	800d644 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d63a:	6839      	ldr	r1, [r7, #0]
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f000 fc53 	bl	800dee8 <USBD_CtlError>
              break;
 800d642:	bf00      	nop
          }
          break;
 800d644:	e0ec      	b.n	800d820 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	2b02      	cmp	r3, #2
 800d650:	d002      	beq.n	800d658 <USBD_StdEPReq+0xe6>
 800d652:	2b03      	cmp	r3, #3
 800d654:	d016      	beq.n	800d684 <USBD_StdEPReq+0x112>
 800d656:	e030      	b.n	800d6ba <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d658:	7bbb      	ldrb	r3, [r7, #14]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d00d      	beq.n	800d67a <USBD_StdEPReq+0x108>
 800d65e:	7bbb      	ldrb	r3, [r7, #14]
 800d660:	2b80      	cmp	r3, #128	; 0x80
 800d662:	d00a      	beq.n	800d67a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d664:	7bbb      	ldrb	r3, [r7, #14]
 800d666:	4619      	mov	r1, r3
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f001 f8ff 	bl	800e86c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d66e:	2180      	movs	r1, #128	; 0x80
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f001 f8fb 	bl	800e86c <USBD_LL_StallEP>
 800d676:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d678:	e025      	b.n	800d6c6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d67a:	6839      	ldr	r1, [r7, #0]
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 fc33 	bl	800dee8 <USBD_CtlError>
              break;
 800d682:	e020      	b.n	800d6c6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	885b      	ldrh	r3, [r3, #2]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d11b      	bne.n	800d6c4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d68c:	7bbb      	ldrb	r3, [r7, #14]
 800d68e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d692:	2b00      	cmp	r3, #0
 800d694:	d004      	beq.n	800d6a0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d696:	7bbb      	ldrb	r3, [r7, #14]
 800d698:	4619      	mov	r1, r3
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f001 f905 	bl	800e8aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f000 fcec 	bl	800e07e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6ac:	689b      	ldr	r3, [r3, #8]
 800d6ae:	6839      	ldr	r1, [r7, #0]
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	4798      	blx	r3
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d6b8:	e004      	b.n	800d6c4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d6ba:	6839      	ldr	r1, [r7, #0]
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 fc13 	bl	800dee8 <USBD_CtlError>
              break;
 800d6c2:	e000      	b.n	800d6c6 <USBD_StdEPReq+0x154>
              break;
 800d6c4:	bf00      	nop
          }
          break;
 800d6c6:	e0ab      	b.n	800d820 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6ce:	b2db      	uxtb	r3, r3
 800d6d0:	2b02      	cmp	r3, #2
 800d6d2:	d002      	beq.n	800d6da <USBD_StdEPReq+0x168>
 800d6d4:	2b03      	cmp	r3, #3
 800d6d6:	d032      	beq.n	800d73e <USBD_StdEPReq+0x1cc>
 800d6d8:	e097      	b.n	800d80a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d6da:	7bbb      	ldrb	r3, [r7, #14]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d007      	beq.n	800d6f0 <USBD_StdEPReq+0x17e>
 800d6e0:	7bbb      	ldrb	r3, [r7, #14]
 800d6e2:	2b80      	cmp	r3, #128	; 0x80
 800d6e4:	d004      	beq.n	800d6f0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d6e6:	6839      	ldr	r1, [r7, #0]
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f000 fbfd 	bl	800dee8 <USBD_CtlError>
                break;
 800d6ee:	e091      	b.n	800d814 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	da0b      	bge.n	800d710 <USBD_StdEPReq+0x19e>
 800d6f8:	7bbb      	ldrb	r3, [r7, #14]
 800d6fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6fe:	4613      	mov	r3, r2
 800d700:	009b      	lsls	r3, r3, #2
 800d702:	4413      	add	r3, r2
 800d704:	009b      	lsls	r3, r3, #2
 800d706:	3310      	adds	r3, #16
 800d708:	687a      	ldr	r2, [r7, #4]
 800d70a:	4413      	add	r3, r2
 800d70c:	3304      	adds	r3, #4
 800d70e:	e00b      	b.n	800d728 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d710:	7bbb      	ldrb	r3, [r7, #14]
 800d712:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d716:	4613      	mov	r3, r2
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	4413      	add	r3, r2
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d722:	687a      	ldr	r2, [r7, #4]
 800d724:	4413      	add	r3, r2
 800d726:	3304      	adds	r3, #4
 800d728:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	2200      	movs	r2, #0
 800d72e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	2202      	movs	r2, #2
 800d734:	4619      	mov	r1, r3
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 fc47 	bl	800dfca <USBD_CtlSendData>
              break;
 800d73c:	e06a      	b.n	800d814 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d73e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d742:	2b00      	cmp	r3, #0
 800d744:	da11      	bge.n	800d76a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d746:	7bbb      	ldrb	r3, [r7, #14]
 800d748:	f003 020f 	and.w	r2, r3, #15
 800d74c:	6879      	ldr	r1, [r7, #4]
 800d74e:	4613      	mov	r3, r2
 800d750:	009b      	lsls	r3, r3, #2
 800d752:	4413      	add	r3, r2
 800d754:	009b      	lsls	r3, r3, #2
 800d756:	440b      	add	r3, r1
 800d758:	3324      	adds	r3, #36	; 0x24
 800d75a:	881b      	ldrh	r3, [r3, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d117      	bne.n	800d790 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d760:	6839      	ldr	r1, [r7, #0]
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f000 fbc0 	bl	800dee8 <USBD_CtlError>
                  break;
 800d768:	e054      	b.n	800d814 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d76a:	7bbb      	ldrb	r3, [r7, #14]
 800d76c:	f003 020f 	and.w	r2, r3, #15
 800d770:	6879      	ldr	r1, [r7, #4]
 800d772:	4613      	mov	r3, r2
 800d774:	009b      	lsls	r3, r3, #2
 800d776:	4413      	add	r3, r2
 800d778:	009b      	lsls	r3, r3, #2
 800d77a:	440b      	add	r3, r1
 800d77c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d780:	881b      	ldrh	r3, [r3, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d104      	bne.n	800d790 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d786:	6839      	ldr	r1, [r7, #0]
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f000 fbad 	bl	800dee8 <USBD_CtlError>
                  break;
 800d78e:	e041      	b.n	800d814 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d790:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d794:	2b00      	cmp	r3, #0
 800d796:	da0b      	bge.n	800d7b0 <USBD_StdEPReq+0x23e>
 800d798:	7bbb      	ldrb	r3, [r7, #14]
 800d79a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d79e:	4613      	mov	r3, r2
 800d7a0:	009b      	lsls	r3, r3, #2
 800d7a2:	4413      	add	r3, r2
 800d7a4:	009b      	lsls	r3, r3, #2
 800d7a6:	3310      	adds	r3, #16
 800d7a8:	687a      	ldr	r2, [r7, #4]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	3304      	adds	r3, #4
 800d7ae:	e00b      	b.n	800d7c8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d7b0:	7bbb      	ldrb	r3, [r7, #14]
 800d7b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d7b6:	4613      	mov	r3, r2
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	4413      	add	r3, r2
 800d7bc:	009b      	lsls	r3, r3, #2
 800d7be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d7c2:	687a      	ldr	r2, [r7, #4]
 800d7c4:	4413      	add	r3, r2
 800d7c6:	3304      	adds	r3, #4
 800d7c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d7ca:	7bbb      	ldrb	r3, [r7, #14]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d002      	beq.n	800d7d6 <USBD_StdEPReq+0x264>
 800d7d0:	7bbb      	ldrb	r3, [r7, #14]
 800d7d2:	2b80      	cmp	r3, #128	; 0x80
 800d7d4:	d103      	bne.n	800d7de <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	601a      	str	r2, [r3, #0]
 800d7dc:	e00e      	b.n	800d7fc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d7de:	7bbb      	ldrb	r3, [r7, #14]
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f001 f880 	bl	800e8e8 <USBD_LL_IsStallEP>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d003      	beq.n	800d7f6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	601a      	str	r2, [r3, #0]
 800d7f4:	e002      	b.n	800d7fc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	2202      	movs	r2, #2
 800d800:	4619      	mov	r1, r3
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f000 fbe1 	bl	800dfca <USBD_CtlSendData>
              break;
 800d808:	e004      	b.n	800d814 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d80a:	6839      	ldr	r1, [r7, #0]
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f000 fb6b 	bl	800dee8 <USBD_CtlError>
              break;
 800d812:	bf00      	nop
          }
          break;
 800d814:	e004      	b.n	800d820 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d816:	6839      	ldr	r1, [r7, #0]
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 fb65 	bl	800dee8 <USBD_CtlError>
          break;
 800d81e:	bf00      	nop
      }
      break;
 800d820:	e004      	b.n	800d82c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d822:	6839      	ldr	r1, [r7, #0]
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f000 fb5f 	bl	800dee8 <USBD_CtlError>
      break;
 800d82a:	bf00      	nop
  }

  return ret;
 800d82c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3710      	adds	r7, #16
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
	...

0800d838 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b084      	sub	sp, #16
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d842:	2300      	movs	r3, #0
 800d844:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d846:	2300      	movs	r3, #0
 800d848:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d84a:	2300      	movs	r3, #0
 800d84c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	885b      	ldrh	r3, [r3, #2]
 800d852:	0a1b      	lsrs	r3, r3, #8
 800d854:	b29b      	uxth	r3, r3
 800d856:	3b01      	subs	r3, #1
 800d858:	2b0e      	cmp	r3, #14
 800d85a:	f200 8152 	bhi.w	800db02 <USBD_GetDescriptor+0x2ca>
 800d85e:	a201      	add	r2, pc, #4	; (adr r2, 800d864 <USBD_GetDescriptor+0x2c>)
 800d860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d864:	0800d8d5 	.word	0x0800d8d5
 800d868:	0800d8ed 	.word	0x0800d8ed
 800d86c:	0800d92d 	.word	0x0800d92d
 800d870:	0800db03 	.word	0x0800db03
 800d874:	0800db03 	.word	0x0800db03
 800d878:	0800daa3 	.word	0x0800daa3
 800d87c:	0800dacf 	.word	0x0800dacf
 800d880:	0800db03 	.word	0x0800db03
 800d884:	0800db03 	.word	0x0800db03
 800d888:	0800db03 	.word	0x0800db03
 800d88c:	0800db03 	.word	0x0800db03
 800d890:	0800db03 	.word	0x0800db03
 800d894:	0800db03 	.word	0x0800db03
 800d898:	0800db03 	.word	0x0800db03
 800d89c:	0800d8a1 	.word	0x0800d8a1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8a6:	69db      	ldr	r3, [r3, #28]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d00b      	beq.n	800d8c4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8b2:	69db      	ldr	r3, [r3, #28]
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	7c12      	ldrb	r2, [r2, #16]
 800d8b8:	f107 0108 	add.w	r1, r7, #8
 800d8bc:	4610      	mov	r0, r2
 800d8be:	4798      	blx	r3
 800d8c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8c2:	e126      	b.n	800db12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d8c4:	6839      	ldr	r1, [r7, #0]
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f000 fb0e 	bl	800dee8 <USBD_CtlError>
        err++;
 800d8cc:	7afb      	ldrb	r3, [r7, #11]
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	72fb      	strb	r3, [r7, #11]
      break;
 800d8d2:	e11e      	b.n	800db12 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	7c12      	ldrb	r2, [r2, #16]
 800d8e0:	f107 0108 	add.w	r1, r7, #8
 800d8e4:	4610      	mov	r0, r2
 800d8e6:	4798      	blx	r3
 800d8e8:	60f8      	str	r0, [r7, #12]
      break;
 800d8ea:	e112      	b.n	800db12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	7c1b      	ldrb	r3, [r3, #16]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d10d      	bne.n	800d910 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8fc:	f107 0208 	add.w	r2, r7, #8
 800d900:	4610      	mov	r0, r2
 800d902:	4798      	blx	r3
 800d904:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	3301      	adds	r3, #1
 800d90a:	2202      	movs	r2, #2
 800d90c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d90e:	e100      	b.n	800db12 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d918:	f107 0208 	add.w	r2, r7, #8
 800d91c:	4610      	mov	r0, r2
 800d91e:	4798      	blx	r3
 800d920:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	3301      	adds	r3, #1
 800d926:	2202      	movs	r2, #2
 800d928:	701a      	strb	r2, [r3, #0]
      break;
 800d92a:	e0f2      	b.n	800db12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	885b      	ldrh	r3, [r3, #2]
 800d930:	b2db      	uxtb	r3, r3
 800d932:	2b05      	cmp	r3, #5
 800d934:	f200 80ac 	bhi.w	800da90 <USBD_GetDescriptor+0x258>
 800d938:	a201      	add	r2, pc, #4	; (adr r2, 800d940 <USBD_GetDescriptor+0x108>)
 800d93a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d93e:	bf00      	nop
 800d940:	0800d959 	.word	0x0800d959
 800d944:	0800d98d 	.word	0x0800d98d
 800d948:	0800d9c1 	.word	0x0800d9c1
 800d94c:	0800d9f5 	.word	0x0800d9f5
 800d950:	0800da29 	.word	0x0800da29
 800d954:	0800da5d 	.word	0x0800da5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d95e:	685b      	ldr	r3, [r3, #4]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d00b      	beq.n	800d97c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d96a:	685b      	ldr	r3, [r3, #4]
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	7c12      	ldrb	r2, [r2, #16]
 800d970:	f107 0108 	add.w	r1, r7, #8
 800d974:	4610      	mov	r0, r2
 800d976:	4798      	blx	r3
 800d978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d97a:	e091      	b.n	800daa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d97c:	6839      	ldr	r1, [r7, #0]
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f000 fab2 	bl	800dee8 <USBD_CtlError>
            err++;
 800d984:	7afb      	ldrb	r3, [r7, #11]
 800d986:	3301      	adds	r3, #1
 800d988:	72fb      	strb	r3, [r7, #11]
          break;
 800d98a:	e089      	b.n	800daa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d992:	689b      	ldr	r3, [r3, #8]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d00b      	beq.n	800d9b0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d99e:	689b      	ldr	r3, [r3, #8]
 800d9a0:	687a      	ldr	r2, [r7, #4]
 800d9a2:	7c12      	ldrb	r2, [r2, #16]
 800d9a4:	f107 0108 	add.w	r1, r7, #8
 800d9a8:	4610      	mov	r0, r2
 800d9aa:	4798      	blx	r3
 800d9ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d9ae:	e077      	b.n	800daa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d9b0:	6839      	ldr	r1, [r7, #0]
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f000 fa98 	bl	800dee8 <USBD_CtlError>
            err++;
 800d9b8:	7afb      	ldrb	r3, [r7, #11]
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	72fb      	strb	r3, [r7, #11]
          break;
 800d9be:	e06f      	b.n	800daa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d00b      	beq.n	800d9e4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9d2:	68db      	ldr	r3, [r3, #12]
 800d9d4:	687a      	ldr	r2, [r7, #4]
 800d9d6:	7c12      	ldrb	r2, [r2, #16]
 800d9d8:	f107 0108 	add.w	r1, r7, #8
 800d9dc:	4610      	mov	r0, r2
 800d9de:	4798      	blx	r3
 800d9e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d9e2:	e05d      	b.n	800daa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d9e4:	6839      	ldr	r1, [r7, #0]
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f000 fa7e 	bl	800dee8 <USBD_CtlError>
            err++;
 800d9ec:	7afb      	ldrb	r3, [r7, #11]
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	72fb      	strb	r3, [r7, #11]
          break;
 800d9f2:	e055      	b.n	800daa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9fa:	691b      	ldr	r3, [r3, #16]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d00b      	beq.n	800da18 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da06:	691b      	ldr	r3, [r3, #16]
 800da08:	687a      	ldr	r2, [r7, #4]
 800da0a:	7c12      	ldrb	r2, [r2, #16]
 800da0c:	f107 0108 	add.w	r1, r7, #8
 800da10:	4610      	mov	r0, r2
 800da12:	4798      	blx	r3
 800da14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da16:	e043      	b.n	800daa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da18:	6839      	ldr	r1, [r7, #0]
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f000 fa64 	bl	800dee8 <USBD_CtlError>
            err++;
 800da20:	7afb      	ldrb	r3, [r7, #11]
 800da22:	3301      	adds	r3, #1
 800da24:	72fb      	strb	r3, [r7, #11]
          break;
 800da26:	e03b      	b.n	800daa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da2e:	695b      	ldr	r3, [r3, #20]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d00b      	beq.n	800da4c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da3a:	695b      	ldr	r3, [r3, #20]
 800da3c:	687a      	ldr	r2, [r7, #4]
 800da3e:	7c12      	ldrb	r2, [r2, #16]
 800da40:	f107 0108 	add.w	r1, r7, #8
 800da44:	4610      	mov	r0, r2
 800da46:	4798      	blx	r3
 800da48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da4a:	e029      	b.n	800daa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da4c:	6839      	ldr	r1, [r7, #0]
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f000 fa4a 	bl	800dee8 <USBD_CtlError>
            err++;
 800da54:	7afb      	ldrb	r3, [r7, #11]
 800da56:	3301      	adds	r3, #1
 800da58:	72fb      	strb	r3, [r7, #11]
          break;
 800da5a:	e021      	b.n	800daa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da62:	699b      	ldr	r3, [r3, #24]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d00b      	beq.n	800da80 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da6e:	699b      	ldr	r3, [r3, #24]
 800da70:	687a      	ldr	r2, [r7, #4]
 800da72:	7c12      	ldrb	r2, [r2, #16]
 800da74:	f107 0108 	add.w	r1, r7, #8
 800da78:	4610      	mov	r0, r2
 800da7a:	4798      	blx	r3
 800da7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da7e:	e00f      	b.n	800daa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da80:	6839      	ldr	r1, [r7, #0]
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 fa30 	bl	800dee8 <USBD_CtlError>
            err++;
 800da88:	7afb      	ldrb	r3, [r7, #11]
 800da8a:	3301      	adds	r3, #1
 800da8c:	72fb      	strb	r3, [r7, #11]
          break;
 800da8e:	e007      	b.n	800daa0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800da90:	6839      	ldr	r1, [r7, #0]
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f000 fa28 	bl	800dee8 <USBD_CtlError>
          err++;
 800da98:	7afb      	ldrb	r3, [r7, #11]
 800da9a:	3301      	adds	r3, #1
 800da9c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800da9e:	bf00      	nop
      }
      break;
 800daa0:	e037      	b.n	800db12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	7c1b      	ldrb	r3, [r3, #16]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d109      	bne.n	800dabe <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dab2:	f107 0208 	add.w	r2, r7, #8
 800dab6:	4610      	mov	r0, r2
 800dab8:	4798      	blx	r3
 800daba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dabc:	e029      	b.n	800db12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dabe:	6839      	ldr	r1, [r7, #0]
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f000 fa11 	bl	800dee8 <USBD_CtlError>
        err++;
 800dac6:	7afb      	ldrb	r3, [r7, #11]
 800dac8:	3301      	adds	r3, #1
 800daca:	72fb      	strb	r3, [r7, #11]
      break;
 800dacc:	e021      	b.n	800db12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	7c1b      	ldrb	r3, [r3, #16]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d10d      	bne.n	800daf2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dadc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dade:	f107 0208 	add.w	r2, r7, #8
 800dae2:	4610      	mov	r0, r2
 800dae4:	4798      	blx	r3
 800dae6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	3301      	adds	r3, #1
 800daec:	2207      	movs	r2, #7
 800daee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800daf0:	e00f      	b.n	800db12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800daf2:	6839      	ldr	r1, [r7, #0]
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f000 f9f7 	bl	800dee8 <USBD_CtlError>
        err++;
 800dafa:	7afb      	ldrb	r3, [r7, #11]
 800dafc:	3301      	adds	r3, #1
 800dafe:	72fb      	strb	r3, [r7, #11]
      break;
 800db00:	e007      	b.n	800db12 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800db02:	6839      	ldr	r1, [r7, #0]
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f000 f9ef 	bl	800dee8 <USBD_CtlError>
      err++;
 800db0a:	7afb      	ldrb	r3, [r7, #11]
 800db0c:	3301      	adds	r3, #1
 800db0e:	72fb      	strb	r3, [r7, #11]
      break;
 800db10:	bf00      	nop
  }

  if (err != 0U)
 800db12:	7afb      	ldrb	r3, [r7, #11]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d11e      	bne.n	800db56 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	88db      	ldrh	r3, [r3, #6]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d016      	beq.n	800db4e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800db20:	893b      	ldrh	r3, [r7, #8]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d00e      	beq.n	800db44 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	88da      	ldrh	r2, [r3, #6]
 800db2a:	893b      	ldrh	r3, [r7, #8]
 800db2c:	4293      	cmp	r3, r2
 800db2e:	bf28      	it	cs
 800db30:	4613      	movcs	r3, r2
 800db32:	b29b      	uxth	r3, r3
 800db34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800db36:	893b      	ldrh	r3, [r7, #8]
 800db38:	461a      	mov	r2, r3
 800db3a:	68f9      	ldr	r1, [r7, #12]
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f000 fa44 	bl	800dfca <USBD_CtlSendData>
 800db42:	e009      	b.n	800db58 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800db44:	6839      	ldr	r1, [r7, #0]
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f000 f9ce 	bl	800dee8 <USBD_CtlError>
 800db4c:	e004      	b.n	800db58 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f000 fa95 	bl	800e07e <USBD_CtlSendStatus>
 800db54:	e000      	b.n	800db58 <USBD_GetDescriptor+0x320>
    return;
 800db56:	bf00      	nop
  }
}
 800db58:	3710      	adds	r7, #16
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
 800db5e:	bf00      	nop

0800db60 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b084      	sub	sp, #16
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	889b      	ldrh	r3, [r3, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d131      	bne.n	800dbd6 <USBD_SetAddress+0x76>
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	88db      	ldrh	r3, [r3, #6]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d12d      	bne.n	800dbd6 <USBD_SetAddress+0x76>
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	885b      	ldrh	r3, [r3, #2]
 800db7e:	2b7f      	cmp	r3, #127	; 0x7f
 800db80:	d829      	bhi.n	800dbd6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	885b      	ldrh	r3, [r3, #2]
 800db86:	b2db      	uxtb	r3, r3
 800db88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db94:	b2db      	uxtb	r3, r3
 800db96:	2b03      	cmp	r3, #3
 800db98:	d104      	bne.n	800dba4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800db9a:	6839      	ldr	r1, [r7, #0]
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f000 f9a3 	bl	800dee8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dba2:	e01d      	b.n	800dbe0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	7bfa      	ldrb	r2, [r7, #15]
 800dba8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dbac:	7bfb      	ldrb	r3, [r7, #15]
 800dbae:	4619      	mov	r1, r3
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f000 fec5 	bl	800e940 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f000 fa61 	bl	800e07e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dbbc:	7bfb      	ldrb	r3, [r7, #15]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d004      	beq.n	800dbcc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2202      	movs	r2, #2
 800dbc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbca:	e009      	b.n	800dbe0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2201      	movs	r2, #1
 800dbd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbd4:	e004      	b.n	800dbe0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dbd6:	6839      	ldr	r1, [r7, #0]
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f000 f985 	bl	800dee8 <USBD_CtlError>
  }
}
 800dbde:	bf00      	nop
 800dbe0:	bf00      	nop
 800dbe2:	3710      	adds	r7, #16
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	885b      	ldrh	r3, [r3, #2]
 800dbfa:	b2da      	uxtb	r2, r3
 800dbfc:	4b4c      	ldr	r3, [pc, #304]	; (800dd30 <USBD_SetConfig+0x148>)
 800dbfe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dc00:	4b4b      	ldr	r3, [pc, #300]	; (800dd30 <USBD_SetConfig+0x148>)
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d905      	bls.n	800dc14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dc08:	6839      	ldr	r1, [r7, #0]
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f000 f96c 	bl	800dee8 <USBD_CtlError>
    return USBD_FAIL;
 800dc10:	2303      	movs	r3, #3
 800dc12:	e088      	b.n	800dd26 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc1a:	b2db      	uxtb	r3, r3
 800dc1c:	2b02      	cmp	r3, #2
 800dc1e:	d002      	beq.n	800dc26 <USBD_SetConfig+0x3e>
 800dc20:	2b03      	cmp	r3, #3
 800dc22:	d025      	beq.n	800dc70 <USBD_SetConfig+0x88>
 800dc24:	e071      	b.n	800dd0a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800dc26:	4b42      	ldr	r3, [pc, #264]	; (800dd30 <USBD_SetConfig+0x148>)
 800dc28:	781b      	ldrb	r3, [r3, #0]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d01c      	beq.n	800dc68 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800dc2e:	4b40      	ldr	r3, [pc, #256]	; (800dd30 <USBD_SetConfig+0x148>)
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	461a      	mov	r2, r3
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dc38:	4b3d      	ldr	r3, [pc, #244]	; (800dd30 <USBD_SetConfig+0x148>)
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f7ff f992 	bl	800cf68 <USBD_SetClassConfig>
 800dc44:	4603      	mov	r3, r0
 800dc46:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dc48:	7bfb      	ldrb	r3, [r7, #15]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d004      	beq.n	800dc58 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800dc4e:	6839      	ldr	r1, [r7, #0]
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f000 f949 	bl	800dee8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dc56:	e065      	b.n	800dd24 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f000 fa10 	bl	800e07e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2203      	movs	r2, #3
 800dc62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dc66:	e05d      	b.n	800dd24 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f000 fa08 	bl	800e07e <USBD_CtlSendStatus>
      break;
 800dc6e:	e059      	b.n	800dd24 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dc70:	4b2f      	ldr	r3, [pc, #188]	; (800dd30 <USBD_SetConfig+0x148>)
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d112      	bne.n	800dc9e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2202      	movs	r2, #2
 800dc7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800dc80:	4b2b      	ldr	r3, [pc, #172]	; (800dd30 <USBD_SetConfig+0x148>)
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	461a      	mov	r2, r3
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dc8a:	4b29      	ldr	r3, [pc, #164]	; (800dd30 <USBD_SetConfig+0x148>)
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	4619      	mov	r1, r3
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f7ff f985 	bl	800cfa0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f000 f9f1 	bl	800e07e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dc9c:	e042      	b.n	800dd24 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800dc9e:	4b24      	ldr	r3, [pc, #144]	; (800dd30 <USBD_SetConfig+0x148>)
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	461a      	mov	r2, r3
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d02a      	beq.n	800dd02 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	b2db      	uxtb	r3, r3
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f7ff f973 	bl	800cfa0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dcba:	4b1d      	ldr	r3, [pc, #116]	; (800dd30 <USBD_SetConfig+0x148>)
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	461a      	mov	r2, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dcc4:	4b1a      	ldr	r3, [pc, #104]	; (800dd30 <USBD_SetConfig+0x148>)
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	4619      	mov	r1, r3
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f7ff f94c 	bl	800cf68 <USBD_SetClassConfig>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dcd4:	7bfb      	ldrb	r3, [r7, #15]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d00f      	beq.n	800dcfa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800dcda:	6839      	ldr	r1, [r7, #0]
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f000 f903 	bl	800dee8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	4619      	mov	r1, r3
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f7ff f958 	bl	800cfa0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2202      	movs	r2, #2
 800dcf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dcf8:	e014      	b.n	800dd24 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f000 f9bf 	bl	800e07e <USBD_CtlSendStatus>
      break;
 800dd00:	e010      	b.n	800dd24 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f000 f9bb 	bl	800e07e <USBD_CtlSendStatus>
      break;
 800dd08:	e00c      	b.n	800dd24 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800dd0a:	6839      	ldr	r1, [r7, #0]
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f000 f8eb 	bl	800dee8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dd12:	4b07      	ldr	r3, [pc, #28]	; (800dd30 <USBD_SetConfig+0x148>)
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	4619      	mov	r1, r3
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f7ff f941 	bl	800cfa0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800dd1e:	2303      	movs	r3, #3
 800dd20:	73fb      	strb	r3, [r7, #15]
      break;
 800dd22:	bf00      	nop
  }

  return ret;
 800dd24:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3710      	adds	r7, #16
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	200037a4 	.word	0x200037a4

0800dd34 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	88db      	ldrh	r3, [r3, #6]
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	d004      	beq.n	800dd50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dd46:	6839      	ldr	r1, [r7, #0]
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f000 f8cd 	bl	800dee8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dd4e:	e023      	b.n	800dd98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	2b02      	cmp	r3, #2
 800dd5a:	dc02      	bgt.n	800dd62 <USBD_GetConfig+0x2e>
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	dc03      	bgt.n	800dd68 <USBD_GetConfig+0x34>
 800dd60:	e015      	b.n	800dd8e <USBD_GetConfig+0x5a>
 800dd62:	2b03      	cmp	r3, #3
 800dd64:	d00b      	beq.n	800dd7e <USBD_GetConfig+0x4a>
 800dd66:	e012      	b.n	800dd8e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	3308      	adds	r3, #8
 800dd72:	2201      	movs	r2, #1
 800dd74:	4619      	mov	r1, r3
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f000 f927 	bl	800dfca <USBD_CtlSendData>
        break;
 800dd7c:	e00c      	b.n	800dd98 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	3304      	adds	r3, #4
 800dd82:	2201      	movs	r2, #1
 800dd84:	4619      	mov	r1, r3
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 f91f 	bl	800dfca <USBD_CtlSendData>
        break;
 800dd8c:	e004      	b.n	800dd98 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dd8e:	6839      	ldr	r1, [r7, #0]
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f000 f8a9 	bl	800dee8 <USBD_CtlError>
        break;
 800dd96:	bf00      	nop
}
 800dd98:	bf00      	nop
 800dd9a:	3708      	adds	r7, #8
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b082      	sub	sp, #8
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	3b01      	subs	r3, #1
 800ddb4:	2b02      	cmp	r3, #2
 800ddb6:	d81e      	bhi.n	800ddf6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	88db      	ldrh	r3, [r3, #6]
 800ddbc:	2b02      	cmp	r3, #2
 800ddbe:	d004      	beq.n	800ddca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ddc0:	6839      	ldr	r1, [r7, #0]
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f000 f890 	bl	800dee8 <USBD_CtlError>
        break;
 800ddc8:	e01a      	b.n	800de00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2201      	movs	r2, #1
 800ddce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d005      	beq.n	800dde6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	f043 0202 	orr.w	r2, r3, #2
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	330c      	adds	r3, #12
 800ddea:	2202      	movs	r2, #2
 800ddec:	4619      	mov	r1, r3
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 f8eb 	bl	800dfca <USBD_CtlSendData>
      break;
 800ddf4:	e004      	b.n	800de00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ddf6:	6839      	ldr	r1, [r7, #0]
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f000 f875 	bl	800dee8 <USBD_CtlError>
      break;
 800ddfe:	bf00      	nop
  }
}
 800de00:	bf00      	nop
 800de02:	3708      	adds	r7, #8
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	885b      	ldrh	r3, [r3, #2]
 800de16:	2b01      	cmp	r3, #1
 800de18:	d106      	bne.n	800de28 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2201      	movs	r2, #1
 800de1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f000 f92b 	bl	800e07e <USBD_CtlSendStatus>
  }
}
 800de28:	bf00      	nop
 800de2a:	3708      	adds	r7, #8
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b082      	sub	sp, #8
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de40:	b2db      	uxtb	r3, r3
 800de42:	3b01      	subs	r3, #1
 800de44:	2b02      	cmp	r3, #2
 800de46:	d80b      	bhi.n	800de60 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	885b      	ldrh	r3, [r3, #2]
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	d10c      	bne.n	800de6a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2200      	movs	r2, #0
 800de54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f000 f910 	bl	800e07e <USBD_CtlSendStatus>
      }
      break;
 800de5e:	e004      	b.n	800de6a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800de60:	6839      	ldr	r1, [r7, #0]
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f000 f840 	bl	800dee8 <USBD_CtlError>
      break;
 800de68:	e000      	b.n	800de6c <USBD_ClrFeature+0x3c>
      break;
 800de6a:	bf00      	nop
  }
}
 800de6c:	bf00      	nop
 800de6e:	3708      	adds	r7, #8
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}

0800de74 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	781a      	ldrb	r2, [r3, #0]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	3301      	adds	r3, #1
 800de8e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	781a      	ldrb	r2, [r3, #0]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	3301      	adds	r3, #1
 800de9c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800de9e:	68f8      	ldr	r0, [r7, #12]
 800dea0:	f7ff fa92 	bl	800d3c8 <SWAPBYTE>
 800dea4:	4603      	mov	r3, r0
 800dea6:	461a      	mov	r2, r3
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	3301      	adds	r3, #1
 800deb0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	3301      	adds	r3, #1
 800deb6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800deb8:	68f8      	ldr	r0, [r7, #12]
 800deba:	f7ff fa85 	bl	800d3c8 <SWAPBYTE>
 800debe:	4603      	mov	r3, r0
 800dec0:	461a      	mov	r2, r3
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	3301      	adds	r3, #1
 800deca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	3301      	adds	r3, #1
 800ded0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ded2:	68f8      	ldr	r0, [r7, #12]
 800ded4:	f7ff fa78 	bl	800d3c8 <SWAPBYTE>
 800ded8:	4603      	mov	r3, r0
 800deda:	461a      	mov	r2, r3
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	80da      	strh	r2, [r3, #6]
}
 800dee0:	bf00      	nop
 800dee2:	3710      	adds	r7, #16
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b082      	sub	sp, #8
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800def2:	2180      	movs	r1, #128	; 0x80
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f000 fcb9 	bl	800e86c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800defa:	2100      	movs	r1, #0
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f000 fcb5 	bl	800e86c <USBD_LL_StallEP>
}
 800df02:	bf00      	nop
 800df04:	3708      	adds	r7, #8
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}

0800df0a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800df0a:	b580      	push	{r7, lr}
 800df0c:	b086      	sub	sp, #24
 800df0e:	af00      	add	r7, sp, #0
 800df10:	60f8      	str	r0, [r7, #12]
 800df12:	60b9      	str	r1, [r7, #8]
 800df14:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800df16:	2300      	movs	r3, #0
 800df18:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d036      	beq.n	800df8e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800df24:	6938      	ldr	r0, [r7, #16]
 800df26:	f000 f836 	bl	800df96 <USBD_GetLen>
 800df2a:	4603      	mov	r3, r0
 800df2c:	3301      	adds	r3, #1
 800df2e:	b29b      	uxth	r3, r3
 800df30:	005b      	lsls	r3, r3, #1
 800df32:	b29a      	uxth	r2, r3
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800df38:	7dfb      	ldrb	r3, [r7, #23]
 800df3a:	68ba      	ldr	r2, [r7, #8]
 800df3c:	4413      	add	r3, r2
 800df3e:	687a      	ldr	r2, [r7, #4]
 800df40:	7812      	ldrb	r2, [r2, #0]
 800df42:	701a      	strb	r2, [r3, #0]
  idx++;
 800df44:	7dfb      	ldrb	r3, [r7, #23]
 800df46:	3301      	adds	r3, #1
 800df48:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800df4a:	7dfb      	ldrb	r3, [r7, #23]
 800df4c:	68ba      	ldr	r2, [r7, #8]
 800df4e:	4413      	add	r3, r2
 800df50:	2203      	movs	r2, #3
 800df52:	701a      	strb	r2, [r3, #0]
  idx++;
 800df54:	7dfb      	ldrb	r3, [r7, #23]
 800df56:	3301      	adds	r3, #1
 800df58:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800df5a:	e013      	b.n	800df84 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800df5c:	7dfb      	ldrb	r3, [r7, #23]
 800df5e:	68ba      	ldr	r2, [r7, #8]
 800df60:	4413      	add	r3, r2
 800df62:	693a      	ldr	r2, [r7, #16]
 800df64:	7812      	ldrb	r2, [r2, #0]
 800df66:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	3301      	adds	r3, #1
 800df6c:	613b      	str	r3, [r7, #16]
    idx++;
 800df6e:	7dfb      	ldrb	r3, [r7, #23]
 800df70:	3301      	adds	r3, #1
 800df72:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800df74:	7dfb      	ldrb	r3, [r7, #23]
 800df76:	68ba      	ldr	r2, [r7, #8]
 800df78:	4413      	add	r3, r2
 800df7a:	2200      	movs	r2, #0
 800df7c:	701a      	strb	r2, [r3, #0]
    idx++;
 800df7e:	7dfb      	ldrb	r3, [r7, #23]
 800df80:	3301      	adds	r3, #1
 800df82:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d1e7      	bne.n	800df5c <USBD_GetString+0x52>
 800df8c:	e000      	b.n	800df90 <USBD_GetString+0x86>
    return;
 800df8e:	bf00      	nop
  }
}
 800df90:	3718      	adds	r7, #24
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}

0800df96 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800df96:	b480      	push	{r7}
 800df98:	b085      	sub	sp, #20
 800df9a:	af00      	add	r7, sp, #0
 800df9c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dfa6:	e005      	b.n	800dfb4 <USBD_GetLen+0x1e>
  {
    len++;
 800dfa8:	7bfb      	ldrb	r3, [r7, #15]
 800dfaa:	3301      	adds	r3, #1
 800dfac:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d1f5      	bne.n	800dfa8 <USBD_GetLen+0x12>
  }

  return len;
 800dfbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3714      	adds	r7, #20
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc8:	4770      	bx	lr

0800dfca <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dfca:	b580      	push	{r7, lr}
 800dfcc:	b084      	sub	sp, #16
 800dfce:	af00      	add	r7, sp, #0
 800dfd0:	60f8      	str	r0, [r7, #12]
 800dfd2:	60b9      	str	r1, [r7, #8]
 800dfd4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	2202      	movs	r2, #2
 800dfda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	687a      	ldr	r2, [r7, #4]
 800dfe2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	68ba      	ldr	r2, [r7, #8]
 800dfee:	2100      	movs	r1, #0
 800dff0:	68f8      	ldr	r0, [r7, #12]
 800dff2:	f000 fcc4 	bl	800e97e <USBD_LL_Transmit>

  return USBD_OK;
 800dff6:	2300      	movs	r3, #0
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3710      	adds	r7, #16
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	60f8      	str	r0, [r7, #12]
 800e008:	60b9      	str	r1, [r7, #8]
 800e00a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	68ba      	ldr	r2, [r7, #8]
 800e010:	2100      	movs	r1, #0
 800e012:	68f8      	ldr	r0, [r7, #12]
 800e014:	f000 fcb3 	bl	800e97e <USBD_LL_Transmit>

  return USBD_OK;
 800e018:	2300      	movs	r3, #0
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3710      	adds	r7, #16
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}

0800e022 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e022:	b580      	push	{r7, lr}
 800e024:	b084      	sub	sp, #16
 800e026:	af00      	add	r7, sp, #0
 800e028:	60f8      	str	r0, [r7, #12]
 800e02a:	60b9      	str	r1, [r7, #8]
 800e02c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	2203      	movs	r2, #3
 800e032:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	687a      	ldr	r2, [r7, #4]
 800e042:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	68ba      	ldr	r2, [r7, #8]
 800e04a:	2100      	movs	r1, #0
 800e04c:	68f8      	ldr	r0, [r7, #12]
 800e04e:	f000 fcb7 	bl	800e9c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e052:	2300      	movs	r3, #0
}
 800e054:	4618      	mov	r0, r3
 800e056:	3710      	adds	r7, #16
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}

0800e05c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b084      	sub	sp, #16
 800e060:	af00      	add	r7, sp, #0
 800e062:	60f8      	str	r0, [r7, #12]
 800e064:	60b9      	str	r1, [r7, #8]
 800e066:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	68ba      	ldr	r2, [r7, #8]
 800e06c:	2100      	movs	r1, #0
 800e06e:	68f8      	ldr	r0, [r7, #12]
 800e070:	f000 fca6 	bl	800e9c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e074:	2300      	movs	r3, #0
}
 800e076:	4618      	mov	r0, r3
 800e078:	3710      	adds	r7, #16
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}

0800e07e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e07e:	b580      	push	{r7, lr}
 800e080:	b082      	sub	sp, #8
 800e082:	af00      	add	r7, sp, #0
 800e084:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2204      	movs	r2, #4
 800e08a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e08e:	2300      	movs	r3, #0
 800e090:	2200      	movs	r2, #0
 800e092:	2100      	movs	r1, #0
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f000 fc72 	bl	800e97e <USBD_LL_Transmit>

  return USBD_OK;
 800e09a:	2300      	movs	r3, #0
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3708      	adds	r7, #8
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}

0800e0a4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2205      	movs	r2, #5
 800e0b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	2100      	movs	r1, #0
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f000 fc80 	bl	800e9c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e0c0:	2300      	movs	r3, #0
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3708      	adds	r7, #8
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}
	...

0800e0cc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	4912      	ldr	r1, [pc, #72]	; (800e11c <MX_USB_Device_Init+0x50>)
 800e0d4:	4812      	ldr	r0, [pc, #72]	; (800e120 <MX_USB_Device_Init+0x54>)
 800e0d6:	f7fe fed9 	bl	800ce8c <USBD_Init>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d001      	beq.n	800e0e4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800e0e0:	f7f4 f938 	bl	8002354 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800e0e4:	490f      	ldr	r1, [pc, #60]	; (800e124 <MX_USB_Device_Init+0x58>)
 800e0e6:	480e      	ldr	r0, [pc, #56]	; (800e120 <MX_USB_Device_Init+0x54>)
 800e0e8:	f7fe ff00 	bl	800ceec <USBD_RegisterClass>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d001      	beq.n	800e0f6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800e0f2:	f7f4 f92f 	bl	8002354 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800e0f6:	490c      	ldr	r1, [pc, #48]	; (800e128 <MX_USB_Device_Init+0x5c>)
 800e0f8:	4809      	ldr	r0, [pc, #36]	; (800e120 <MX_USB_Device_Init+0x54>)
 800e0fa:	f7fe fe21 	bl	800cd40 <USBD_CDC_RegisterInterface>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b00      	cmp	r3, #0
 800e102:	d001      	beq.n	800e108 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800e104:	f7f4 f926 	bl	8002354 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e108:	4805      	ldr	r0, [pc, #20]	; (800e120 <MX_USB_Device_Init+0x54>)
 800e10a:	f7fe ff16 	bl	800cf3a <USBD_Start>
 800e10e:	4603      	mov	r3, r0
 800e110:	2b00      	cmp	r3, #0
 800e112:	d001      	beq.n	800e118 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800e114:	f7f4 f91e 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800e118:	bf00      	nop
 800e11a:	bd80      	pop	{r7, pc}
 800e11c:	2000013c 	.word	0x2000013c
 800e120:	200037a8 	.word	0x200037a8
 800e124:	20000024 	.word	0x20000024
 800e128:	20000128 	.word	0x20000128

0800e12c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e130:	2200      	movs	r2, #0
 800e132:	4905      	ldr	r1, [pc, #20]	; (800e148 <CDC_Init_FS+0x1c>)
 800e134:	4805      	ldr	r0, [pc, #20]	; (800e14c <CDC_Init_FS+0x20>)
 800e136:	f7fe fe18 	bl	800cd6a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e13a:	4905      	ldr	r1, [pc, #20]	; (800e150 <CDC_Init_FS+0x24>)
 800e13c:	4803      	ldr	r0, [pc, #12]	; (800e14c <CDC_Init_FS+0x20>)
 800e13e:	f7fe fe32 	bl	800cda6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e142:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e144:	4618      	mov	r0, r3
 800e146:	bd80      	pop	{r7, pc}
 800e148:	20004278 	.word	0x20004278
 800e14c:	200037a8 	.word	0x200037a8
 800e150:	20003a78 	.word	0x20003a78

0800e154 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e154:	b480      	push	{r7}
 800e156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e158:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr

0800e164 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e164:	b480      	push	{r7}
 800e166:	b083      	sub	sp, #12
 800e168:	af00      	add	r7, sp, #0
 800e16a:	4603      	mov	r3, r0
 800e16c:	6039      	str	r1, [r7, #0]
 800e16e:	71fb      	strb	r3, [r7, #7]
 800e170:	4613      	mov	r3, r2
 800e172:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e174:	79fb      	ldrb	r3, [r7, #7]
 800e176:	2b23      	cmp	r3, #35	; 0x23
 800e178:	d84a      	bhi.n	800e210 <CDC_Control_FS+0xac>
 800e17a:	a201      	add	r2, pc, #4	; (adr r2, 800e180 <CDC_Control_FS+0x1c>)
 800e17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e180:	0800e211 	.word	0x0800e211
 800e184:	0800e211 	.word	0x0800e211
 800e188:	0800e211 	.word	0x0800e211
 800e18c:	0800e211 	.word	0x0800e211
 800e190:	0800e211 	.word	0x0800e211
 800e194:	0800e211 	.word	0x0800e211
 800e198:	0800e211 	.word	0x0800e211
 800e19c:	0800e211 	.word	0x0800e211
 800e1a0:	0800e211 	.word	0x0800e211
 800e1a4:	0800e211 	.word	0x0800e211
 800e1a8:	0800e211 	.word	0x0800e211
 800e1ac:	0800e211 	.word	0x0800e211
 800e1b0:	0800e211 	.word	0x0800e211
 800e1b4:	0800e211 	.word	0x0800e211
 800e1b8:	0800e211 	.word	0x0800e211
 800e1bc:	0800e211 	.word	0x0800e211
 800e1c0:	0800e211 	.word	0x0800e211
 800e1c4:	0800e211 	.word	0x0800e211
 800e1c8:	0800e211 	.word	0x0800e211
 800e1cc:	0800e211 	.word	0x0800e211
 800e1d0:	0800e211 	.word	0x0800e211
 800e1d4:	0800e211 	.word	0x0800e211
 800e1d8:	0800e211 	.word	0x0800e211
 800e1dc:	0800e211 	.word	0x0800e211
 800e1e0:	0800e211 	.word	0x0800e211
 800e1e4:	0800e211 	.word	0x0800e211
 800e1e8:	0800e211 	.word	0x0800e211
 800e1ec:	0800e211 	.word	0x0800e211
 800e1f0:	0800e211 	.word	0x0800e211
 800e1f4:	0800e211 	.word	0x0800e211
 800e1f8:	0800e211 	.word	0x0800e211
 800e1fc:	0800e211 	.word	0x0800e211
 800e200:	0800e211 	.word	0x0800e211
 800e204:	0800e211 	.word	0x0800e211
 800e208:	0800e211 	.word	0x0800e211
 800e20c:	0800e211 	.word	0x0800e211
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e210:	bf00      	nop
  }

  return (USBD_OK);
 800e212:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e214:	4618      	mov	r0, r3
 800e216:	370c      	adds	r7, #12
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr

0800e220 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e22a:	6879      	ldr	r1, [r7, #4]
 800e22c:	4811      	ldr	r0, [pc, #68]	; (800e274 <CDC_Receive_FS+0x54>)
 800e22e:	f7fe fdba 	bl	800cda6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e232:	4810      	ldr	r0, [pc, #64]	; (800e274 <CDC_Receive_FS+0x54>)
 800e234:	f7fe fe00 	bl	800ce38 <USBD_CDC_ReceivePacket>

  memset (rx_buffer, '\0', USB_RX_BUFFER_SIZE);  // clear the buffer
 800e238:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e23c:	2100      	movs	r1, #0
 800e23e:	480e      	ldr	r0, [pc, #56]	; (800e278 <CDC_Receive_FS+0x58>)
 800e240:	f001 fa8d 	bl	800f75e <memset>
  uint8_t len = (uint8_t)*Len;
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	73fb      	strb	r3, [r7, #15]
  memcpy(rx_buffer, Buf, len);  // copy the data to the buffer
 800e24a:	7bfb      	ldrb	r3, [r7, #15]
 800e24c:	461a      	mov	r2, r3
 800e24e:	6879      	ldr	r1, [r7, #4]
 800e250:	4809      	ldr	r0, [pc, #36]	; (800e278 <CDC_Receive_FS+0x58>)
 800e252:	f001 fb72 	bl	800f93a <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800e256:	7bfb      	ldrb	r3, [r7, #15]
 800e258:	461a      	mov	r2, r3
 800e25a:	2100      	movs	r1, #0
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f001 fa7e 	bl	800f75e <memset>

  prog_state = CFG_RECEIVED;
 800e262:	4b06      	ldr	r3, [pc, #24]	; (800e27c <CDC_Receive_FS+0x5c>)
 800e264:	2201      	movs	r2, #1
 800e266:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800e268:	2300      	movs	r3, #0

  /* USER CODE END 6 */
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3710      	adds	r7, #16
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	200037a8 	.word	0x200037a8
 800e278:	200026b4 	.word	0x200026b4
 800e27c:	200027b4 	.word	0x200027b4

0800e280 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b084      	sub	sp, #16
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	460b      	mov	r3, r1
 800e28a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e28c:	2300      	movs	r3, #0
 800e28e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e290:	4b0d      	ldr	r3, [pc, #52]	; (800e2c8 <CDC_Transmit_FS+0x48>)
 800e292:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e296:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d001      	beq.n	800e2a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	e00b      	b.n	800e2be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e2a6:	887b      	ldrh	r3, [r7, #2]
 800e2a8:	461a      	mov	r2, r3
 800e2aa:	6879      	ldr	r1, [r7, #4]
 800e2ac:	4806      	ldr	r0, [pc, #24]	; (800e2c8 <CDC_Transmit_FS+0x48>)
 800e2ae:	f7fe fd5c 	bl	800cd6a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e2b2:	4805      	ldr	r0, [pc, #20]	; (800e2c8 <CDC_Transmit_FS+0x48>)
 800e2b4:	f7fe fd90 	bl	800cdd8 <USBD_CDC_TransmitPacket>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3710      	adds	r7, #16
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
 800e2c6:	bf00      	nop
 800e2c8:	200037a8 	.word	0x200037a8

0800e2cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b087      	sub	sp, #28
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	60f8      	str	r0, [r7, #12]
 800e2d4:	60b9      	str	r1, [r7, #8]
 800e2d6:	4613      	mov	r3, r2
 800e2d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e2de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	371c      	adds	r7, #28
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ec:	4770      	bx	lr
	...

0800e2f0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b083      	sub	sp, #12
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	6039      	str	r1, [r7, #0]
 800e2fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	2212      	movs	r2, #18
 800e300:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800e302:	4b03      	ldr	r3, [pc, #12]	; (800e310 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800e304:	4618      	mov	r0, r3
 800e306:	370c      	adds	r7, #12
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr
 800e310:	2000015c 	.word	0x2000015c

0800e314 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e314:	b480      	push	{r7}
 800e316:	b083      	sub	sp, #12
 800e318:	af00      	add	r7, sp, #0
 800e31a:	4603      	mov	r3, r0
 800e31c:	6039      	str	r1, [r7, #0]
 800e31e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	2204      	movs	r2, #4
 800e324:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e326:	4b03      	ldr	r3, [pc, #12]	; (800e334 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800e328:	4618      	mov	r0, r3
 800e32a:	370c      	adds	r7, #12
 800e32c:	46bd      	mov	sp, r7
 800e32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e332:	4770      	bx	lr
 800e334:	20000170 	.word	0x20000170

0800e338 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b082      	sub	sp, #8
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	4603      	mov	r3, r0
 800e340:	6039      	str	r1, [r7, #0]
 800e342:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e344:	79fb      	ldrb	r3, [r7, #7]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d105      	bne.n	800e356 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e34a:	683a      	ldr	r2, [r7, #0]
 800e34c:	4907      	ldr	r1, [pc, #28]	; (800e36c <USBD_CDC_ProductStrDescriptor+0x34>)
 800e34e:	4808      	ldr	r0, [pc, #32]	; (800e370 <USBD_CDC_ProductStrDescriptor+0x38>)
 800e350:	f7ff fddb 	bl	800df0a <USBD_GetString>
 800e354:	e004      	b.n	800e360 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e356:	683a      	ldr	r2, [r7, #0]
 800e358:	4904      	ldr	r1, [pc, #16]	; (800e36c <USBD_CDC_ProductStrDescriptor+0x34>)
 800e35a:	4805      	ldr	r0, [pc, #20]	; (800e370 <USBD_CDC_ProductStrDescriptor+0x38>)
 800e35c:	f7ff fdd5 	bl	800df0a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e360:	4b02      	ldr	r3, [pc, #8]	; (800e36c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800e362:	4618      	mov	r0, r3
 800e364:	3708      	adds	r7, #8
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
 800e36a:	bf00      	nop
 800e36c:	20004a78 	.word	0x20004a78
 800e370:	08012930 	.word	0x08012930

0800e374 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
 800e37a:	4603      	mov	r3, r0
 800e37c:	6039      	str	r1, [r7, #0]
 800e37e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e380:	683a      	ldr	r2, [r7, #0]
 800e382:	4904      	ldr	r1, [pc, #16]	; (800e394 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800e384:	4804      	ldr	r0, [pc, #16]	; (800e398 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800e386:	f7ff fdc0 	bl	800df0a <USBD_GetString>
  return USBD_StrDesc;
 800e38a:	4b02      	ldr	r3, [pc, #8]	; (800e394 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3708      	adds	r7, #8
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}
 800e394:	20004a78 	.word	0x20004a78
 800e398:	08012940 	.word	0x08012940

0800e39c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	6039      	str	r1, [r7, #0]
 800e3a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	221a      	movs	r2, #26
 800e3ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e3ae:	f000 f843 	bl	800e438 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e3b2:	4b02      	ldr	r3, [pc, #8]	; (800e3bc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3708      	adds	r7, #8
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}
 800e3bc:	20000174 	.word	0x20000174

0800e3c0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b082      	sub	sp, #8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	6039      	str	r1, [r7, #0]
 800e3ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e3cc:	79fb      	ldrb	r3, [r7, #7]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d105      	bne.n	800e3de <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e3d2:	683a      	ldr	r2, [r7, #0]
 800e3d4:	4907      	ldr	r1, [pc, #28]	; (800e3f4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e3d6:	4808      	ldr	r0, [pc, #32]	; (800e3f8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e3d8:	f7ff fd97 	bl	800df0a <USBD_GetString>
 800e3dc:	e004      	b.n	800e3e8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e3de:	683a      	ldr	r2, [r7, #0]
 800e3e0:	4904      	ldr	r1, [pc, #16]	; (800e3f4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e3e2:	4805      	ldr	r0, [pc, #20]	; (800e3f8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e3e4:	f7ff fd91 	bl	800df0a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e3e8:	4b02      	ldr	r3, [pc, #8]	; (800e3f4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3708      	adds	r7, #8
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
 800e3f2:	bf00      	nop
 800e3f4:	20004a78 	.word	0x20004a78
 800e3f8:	08012944 	.word	0x08012944

0800e3fc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
 800e402:	4603      	mov	r3, r0
 800e404:	6039      	str	r1, [r7, #0]
 800e406:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e408:	79fb      	ldrb	r3, [r7, #7]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d105      	bne.n	800e41a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e40e:	683a      	ldr	r2, [r7, #0]
 800e410:	4907      	ldr	r1, [pc, #28]	; (800e430 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e412:	4808      	ldr	r0, [pc, #32]	; (800e434 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e414:	f7ff fd79 	bl	800df0a <USBD_GetString>
 800e418:	e004      	b.n	800e424 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e41a:	683a      	ldr	r2, [r7, #0]
 800e41c:	4904      	ldr	r1, [pc, #16]	; (800e430 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e41e:	4805      	ldr	r0, [pc, #20]	; (800e434 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e420:	f7ff fd73 	bl	800df0a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e424:	4b02      	ldr	r3, [pc, #8]	; (800e430 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800e426:	4618      	mov	r0, r3
 800e428:	3708      	adds	r7, #8
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	bf00      	nop
 800e430:	20004a78 	.word	0x20004a78
 800e434:	08012950 	.word	0x08012950

0800e438 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b084      	sub	sp, #16
 800e43c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e43e:	4b0f      	ldr	r3, [pc, #60]	; (800e47c <Get_SerialNum+0x44>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e444:	4b0e      	ldr	r3, [pc, #56]	; (800e480 <Get_SerialNum+0x48>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e44a:	4b0e      	ldr	r3, [pc, #56]	; (800e484 <Get_SerialNum+0x4c>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e450:	68fa      	ldr	r2, [r7, #12]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	4413      	add	r3, r2
 800e456:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d009      	beq.n	800e472 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e45e:	2208      	movs	r2, #8
 800e460:	4909      	ldr	r1, [pc, #36]	; (800e488 <Get_SerialNum+0x50>)
 800e462:	68f8      	ldr	r0, [r7, #12]
 800e464:	f000 f814 	bl	800e490 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e468:	2204      	movs	r2, #4
 800e46a:	4908      	ldr	r1, [pc, #32]	; (800e48c <Get_SerialNum+0x54>)
 800e46c:	68b8      	ldr	r0, [r7, #8]
 800e46e:	f000 f80f 	bl	800e490 <IntToUnicode>
  }
}
 800e472:	bf00      	nop
 800e474:	3710      	adds	r7, #16
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
 800e47a:	bf00      	nop
 800e47c:	1fff7590 	.word	0x1fff7590
 800e480:	1fff7594 	.word	0x1fff7594
 800e484:	1fff7598 	.word	0x1fff7598
 800e488:	20000176 	.word	0x20000176
 800e48c:	20000186 	.word	0x20000186

0800e490 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e490:	b480      	push	{r7}
 800e492:	b087      	sub	sp, #28
 800e494:	af00      	add	r7, sp, #0
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	4613      	mov	r3, r2
 800e49c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	75fb      	strb	r3, [r7, #23]
 800e4a6:	e027      	b.n	800e4f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	0f1b      	lsrs	r3, r3, #28
 800e4ac:	2b09      	cmp	r3, #9
 800e4ae:	d80b      	bhi.n	800e4c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	0f1b      	lsrs	r3, r3, #28
 800e4b4:	b2da      	uxtb	r2, r3
 800e4b6:	7dfb      	ldrb	r3, [r7, #23]
 800e4b8:	005b      	lsls	r3, r3, #1
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	440b      	add	r3, r1
 800e4c0:	3230      	adds	r2, #48	; 0x30
 800e4c2:	b2d2      	uxtb	r2, r2
 800e4c4:	701a      	strb	r2, [r3, #0]
 800e4c6:	e00a      	b.n	800e4de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	0f1b      	lsrs	r3, r3, #28
 800e4cc:	b2da      	uxtb	r2, r3
 800e4ce:	7dfb      	ldrb	r3, [r7, #23]
 800e4d0:	005b      	lsls	r3, r3, #1
 800e4d2:	4619      	mov	r1, r3
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	440b      	add	r3, r1
 800e4d8:	3237      	adds	r2, #55	; 0x37
 800e4da:	b2d2      	uxtb	r2, r2
 800e4dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	011b      	lsls	r3, r3, #4
 800e4e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e4e4:	7dfb      	ldrb	r3, [r7, #23]
 800e4e6:	005b      	lsls	r3, r3, #1
 800e4e8:	3301      	adds	r3, #1
 800e4ea:	68ba      	ldr	r2, [r7, #8]
 800e4ec:	4413      	add	r3, r2
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e4f2:	7dfb      	ldrb	r3, [r7, #23]
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	75fb      	strb	r3, [r7, #23]
 800e4f8:	7dfa      	ldrb	r2, [r7, #23]
 800e4fa:	79fb      	ldrb	r3, [r7, #7]
 800e4fc:	429a      	cmp	r2, r3
 800e4fe:	d3d3      	bcc.n	800e4a8 <IntToUnicode+0x18>
  }
}
 800e500:	bf00      	nop
 800e502:	bf00      	nop
 800e504:	371c      	adds	r7, #28
 800e506:	46bd      	mov	sp, r7
 800e508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50c:	4770      	bx	lr
	...

0800e510 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b098      	sub	sp, #96	; 0x60
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e518:	f107 030c 	add.w	r3, r7, #12
 800e51c:	2254      	movs	r2, #84	; 0x54
 800e51e:	2100      	movs	r1, #0
 800e520:	4618      	mov	r0, r3
 800e522:	f001 f91c 	bl	800f75e <memset>
  if(pcdHandle->Instance==USB)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	4a19      	ldr	r2, [pc, #100]	; (800e590 <HAL_PCD_MspInit+0x80>)
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d12a      	bne.n	800e586 <HAL_PCD_MspInit+0x76>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e534:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e536:	2300      	movs	r3, #0
 800e538:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e53a:	f107 030c 	add.w	r3, r7, #12
 800e53e:	4618      	mov	r0, r3
 800e540:	f7fa ffba 	bl	80094b8 <HAL_RCCEx_PeriphCLKConfig>
 800e544:	4603      	mov	r3, r0
 800e546:	2b00      	cmp	r3, #0
 800e548:	d001      	beq.n	800e54e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800e54a:	f7f3 ff03 	bl	8002354 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e54e:	4b11      	ldr	r3, [pc, #68]	; (800e594 <HAL_PCD_MspInit+0x84>)
 800e550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e552:	4a10      	ldr	r2, [pc, #64]	; (800e594 <HAL_PCD_MspInit+0x84>)
 800e554:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e558:	6593      	str	r3, [r2, #88]	; 0x58
 800e55a:	4b0e      	ldr	r3, [pc, #56]	; (800e594 <HAL_PCD_MspInit+0x84>)
 800e55c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e55e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e562:	60bb      	str	r3, [r7, #8]
 800e564:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800e566:	2200      	movs	r2, #0
 800e568:	2100      	movs	r1, #0
 800e56a:	2013      	movs	r0, #19
 800e56c:	f7f6 fcc1 	bl	8004ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800e570:	2013      	movs	r0, #19
 800e572:	f7f6 fcd8 	bl	8004f26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800e576:	2200      	movs	r2, #0
 800e578:	2100      	movs	r1, #0
 800e57a:	2014      	movs	r0, #20
 800e57c:	f7f6 fcb9 	bl	8004ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800e580:	2014      	movs	r0, #20
 800e582:	f7f6 fcd0 	bl	8004f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e586:	bf00      	nop
 800e588:	3760      	adds	r7, #96	; 0x60
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop
 800e590:	40005c00 	.word	0x40005c00
 800e594:	40021000 	.word	0x40021000

0800e598 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	4610      	mov	r0, r2
 800e5b0:	f7fe fd0e 	bl	800cfd0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800e5b4:	bf00      	nop
 800e5b6:	3708      	adds	r7, #8
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	460b      	mov	r3, r1
 800e5c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800e5ce:	78fa      	ldrb	r2, [r7, #3]
 800e5d0:	6879      	ldr	r1, [r7, #4]
 800e5d2:	4613      	mov	r3, r2
 800e5d4:	009b      	lsls	r3, r3, #2
 800e5d6:	4413      	add	r3, r2
 800e5d8:	00db      	lsls	r3, r3, #3
 800e5da:	440b      	add	r3, r1
 800e5dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	78fb      	ldrb	r3, [r7, #3]
 800e5e4:	4619      	mov	r1, r3
 800e5e6:	f7fe fd48 	bl	800d07a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800e5ea:	bf00      	nop
 800e5ec:	3708      	adds	r7, #8
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}

0800e5f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b082      	sub	sp, #8
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800e604:	78fa      	ldrb	r2, [r7, #3]
 800e606:	6879      	ldr	r1, [r7, #4]
 800e608:	4613      	mov	r3, r2
 800e60a:	009b      	lsls	r3, r3, #2
 800e60c:	4413      	add	r3, r2
 800e60e:	00db      	lsls	r3, r3, #3
 800e610:	440b      	add	r3, r1
 800e612:	3324      	adds	r3, #36	; 0x24
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	78fb      	ldrb	r3, [r7, #3]
 800e618:	4619      	mov	r1, r3
 800e61a:	f7fe fd91 	bl	800d140 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800e61e:	bf00      	nop
 800e620:	3708      	adds	r7, #8
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}

0800e626 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e626:	b580      	push	{r7, lr}
 800e628:	b082      	sub	sp, #8
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e634:	4618      	mov	r0, r3
 800e636:	f7fe fea5 	bl	800d384 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e63a:	bf00      	nop
 800e63c:	3708      	adds	r7, #8
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}

0800e642 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e642:	b580      	push	{r7, lr}
 800e644:	b084      	sub	sp, #16
 800e646:	af00      	add	r7, sp, #0
 800e648:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e64a:	2301      	movs	r3, #1
 800e64c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	795b      	ldrb	r3, [r3, #5]
 800e652:	2b02      	cmp	r3, #2
 800e654:	d001      	beq.n	800e65a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e656:	f7f3 fe7d 	bl	8002354 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e660:	7bfa      	ldrb	r2, [r7, #15]
 800e662:	4611      	mov	r1, r2
 800e664:	4618      	mov	r0, r3
 800e666:	f7fe fe4f 	bl	800d308 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e670:	4618      	mov	r0, r3
 800e672:	f7fe fdfb 	bl	800d26c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e676:	bf00      	nop
 800e678:	3710      	adds	r7, #16
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
	...

0800e680 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b082      	sub	sp, #8
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e68e:	4618      	mov	r0, r3
 800e690:	f7fe fe4a 	bl	800d328 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	7a5b      	ldrb	r3, [r3, #9]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d005      	beq.n	800e6a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e69c:	4b04      	ldr	r3, [pc, #16]	; (800e6b0 <HAL_PCD_SuspendCallback+0x30>)
 800e69e:	691b      	ldr	r3, [r3, #16]
 800e6a0:	4a03      	ldr	r2, [pc, #12]	; (800e6b0 <HAL_PCD_SuspendCallback+0x30>)
 800e6a2:	f043 0306 	orr.w	r3, r3, #6
 800e6a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e6a8:	bf00      	nop
 800e6aa:	3708      	adds	r7, #8
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	e000ed00 	.word	0xe000ed00

0800e6b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	7a5b      	ldrb	r3, [r3, #9]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d007      	beq.n	800e6d4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e6c4:	4b08      	ldr	r3, [pc, #32]	; (800e6e8 <HAL_PCD_ResumeCallback+0x34>)
 800e6c6:	691b      	ldr	r3, [r3, #16]
 800e6c8:	4a07      	ldr	r2, [pc, #28]	; (800e6e8 <HAL_PCD_ResumeCallback+0x34>)
 800e6ca:	f023 0306 	bic.w	r3, r3, #6
 800e6ce:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e6d0:	f000 f9f8 	bl	800eac4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7fe fe3a 	bl	800d354 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e6e0:	bf00      	nop
 800e6e2:	3708      	adds	r7, #8
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}
 800e6e8:	e000ed00 	.word	0xe000ed00

0800e6ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800e6f4:	4a2b      	ldr	r2, [pc, #172]	; (800e7a4 <USBD_LL_Init+0xb8>)
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	4a29      	ldr	r2, [pc, #164]	; (800e7a4 <USBD_LL_Init+0xb8>)
 800e700:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800e704:	4b27      	ldr	r3, [pc, #156]	; (800e7a4 <USBD_LL_Init+0xb8>)
 800e706:	4a28      	ldr	r2, [pc, #160]	; (800e7a8 <USBD_LL_Init+0xbc>)
 800e708:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e70a:	4b26      	ldr	r3, [pc, #152]	; (800e7a4 <USBD_LL_Init+0xb8>)
 800e70c:	2208      	movs	r2, #8
 800e70e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e710:	4b24      	ldr	r3, [pc, #144]	; (800e7a4 <USBD_LL_Init+0xb8>)
 800e712:	2202      	movs	r2, #2
 800e714:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e716:	4b23      	ldr	r3, [pc, #140]	; (800e7a4 <USBD_LL_Init+0xb8>)
 800e718:	2202      	movs	r2, #2
 800e71a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e71c:	4b21      	ldr	r3, [pc, #132]	; (800e7a4 <USBD_LL_Init+0xb8>)
 800e71e:	2200      	movs	r2, #0
 800e720:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e722:	4b20      	ldr	r3, [pc, #128]	; (800e7a4 <USBD_LL_Init+0xb8>)
 800e724:	2200      	movs	r2, #0
 800e726:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e728:	4b1e      	ldr	r3, [pc, #120]	; (800e7a4 <USBD_LL_Init+0xb8>)
 800e72a:	2200      	movs	r2, #0
 800e72c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e72e:	4b1d      	ldr	r3, [pc, #116]	; (800e7a4 <USBD_LL_Init+0xb8>)
 800e730:	2200      	movs	r2, #0
 800e732:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e734:	481b      	ldr	r0, [pc, #108]	; (800e7a4 <USBD_LL_Init+0xb8>)
 800e736:	f7f8 fbd4 	bl	8006ee2 <HAL_PCD_Init>
 800e73a:	4603      	mov	r3, r0
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d001      	beq.n	800e744 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800e740:	f7f3 fe08 	bl	8002354 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e74a:	2318      	movs	r3, #24
 800e74c:	2200      	movs	r2, #0
 800e74e:	2100      	movs	r1, #0
 800e750:	f7fa f88e 	bl	8008870 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e75a:	2358      	movs	r3, #88	; 0x58
 800e75c:	2200      	movs	r2, #0
 800e75e:	2180      	movs	r1, #128	; 0x80
 800e760:	f7fa f886 	bl	8008870 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e76a:	23c0      	movs	r3, #192	; 0xc0
 800e76c:	2200      	movs	r2, #0
 800e76e:	2181      	movs	r1, #129	; 0x81
 800e770:	f7fa f87e 	bl	8008870 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e77a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e77e:	2200      	movs	r2, #0
 800e780:	2101      	movs	r1, #1
 800e782:	f7fa f875 	bl	8008870 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e78c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e790:	2200      	movs	r2, #0
 800e792:	2182      	movs	r1, #130	; 0x82
 800e794:	f7fa f86c 	bl	8008870 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e798:	2300      	movs	r3, #0
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	3708      	adds	r7, #8
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
 800e7a2:	bf00      	nop
 800e7a4:	20004c78 	.word	0x20004c78
 800e7a8:	40005c00 	.word	0x40005c00

0800e7ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b084      	sub	sp, #16
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7f8 fc5b 	bl	800707e <HAL_PCD_Start>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7cc:	7bfb      	ldrb	r3, [r7, #15]
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f000 f97e 	bl	800ead0 <USBD_Get_USB_Status>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3710      	adds	r7, #16
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}

0800e7e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e7e2:	b580      	push	{r7, lr}
 800e7e4:	b084      	sub	sp, #16
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	6078      	str	r0, [r7, #4]
 800e7ea:	4608      	mov	r0, r1
 800e7ec:	4611      	mov	r1, r2
 800e7ee:	461a      	mov	r2, r3
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	70fb      	strb	r3, [r7, #3]
 800e7f4:	460b      	mov	r3, r1
 800e7f6:	70bb      	strb	r3, [r7, #2]
 800e7f8:	4613      	mov	r3, r2
 800e7fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e800:	2300      	movs	r3, #0
 800e802:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e80a:	78bb      	ldrb	r3, [r7, #2]
 800e80c:	883a      	ldrh	r2, [r7, #0]
 800e80e:	78f9      	ldrb	r1, [r7, #3]
 800e810:	f7f8 fda2 	bl	8007358 <HAL_PCD_EP_Open>
 800e814:	4603      	mov	r3, r0
 800e816:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e818:	7bfb      	ldrb	r3, [r7, #15]
 800e81a:	4618      	mov	r0, r3
 800e81c:	f000 f958 	bl	800ead0 <USBD_Get_USB_Status>
 800e820:	4603      	mov	r3, r0
 800e822:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e824:	7bbb      	ldrb	r3, [r7, #14]
}
 800e826:	4618      	mov	r0, r3
 800e828:	3710      	adds	r7, #16
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}

0800e82e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e82e:	b580      	push	{r7, lr}
 800e830:	b084      	sub	sp, #16
 800e832:	af00      	add	r7, sp, #0
 800e834:	6078      	str	r0, [r7, #4]
 800e836:	460b      	mov	r3, r1
 800e838:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e83a:	2300      	movs	r3, #0
 800e83c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e83e:	2300      	movs	r3, #0
 800e840:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e848:	78fa      	ldrb	r2, [r7, #3]
 800e84a:	4611      	mov	r1, r2
 800e84c:	4618      	mov	r0, r3
 800e84e:	f7f8 fde0 	bl	8007412 <HAL_PCD_EP_Close>
 800e852:	4603      	mov	r3, r0
 800e854:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e856:	7bfb      	ldrb	r3, [r7, #15]
 800e858:	4618      	mov	r0, r3
 800e85a:	f000 f939 	bl	800ead0 <USBD_Get_USB_Status>
 800e85e:	4603      	mov	r3, r0
 800e860:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e862:	7bbb      	ldrb	r3, [r7, #14]
}
 800e864:	4618      	mov	r0, r3
 800e866:	3710      	adds	r7, #16
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b084      	sub	sp, #16
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	460b      	mov	r3, r1
 800e876:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e878:	2300      	movs	r3, #0
 800e87a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e87c:	2300      	movs	r3, #0
 800e87e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e886:	78fa      	ldrb	r2, [r7, #3]
 800e888:	4611      	mov	r1, r2
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7f8 fe89 	bl	80075a2 <HAL_PCD_EP_SetStall>
 800e890:	4603      	mov	r3, r0
 800e892:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e894:	7bfb      	ldrb	r3, [r7, #15]
 800e896:	4618      	mov	r0, r3
 800e898:	f000 f91a 	bl	800ead0 <USBD_Get_USB_Status>
 800e89c:	4603      	mov	r3, r0
 800e89e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e8a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3710      	adds	r7, #16
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}

0800e8aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e8aa:	b580      	push	{r7, lr}
 800e8ac:	b084      	sub	sp, #16
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	6078      	str	r0, [r7, #4]
 800e8b2:	460b      	mov	r3, r1
 800e8b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e8c4:	78fa      	ldrb	r2, [r7, #3]
 800e8c6:	4611      	mov	r1, r2
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7f8 febc 	bl	8007646 <HAL_PCD_EP_ClrStall>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8d2:	7bfb      	ldrb	r3, [r7, #15]
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f000 f8fb 	bl	800ead0 <USBD_Get_USB_Status>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e8de:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3710      	adds	r7, #16
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}

0800e8e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b085      	sub	sp, #20
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	460b      	mov	r3, r1
 800e8f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e8fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e8fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e900:	2b00      	cmp	r3, #0
 800e902:	da0b      	bge.n	800e91c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e904:	78fb      	ldrb	r3, [r7, #3]
 800e906:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e90a:	68f9      	ldr	r1, [r7, #12]
 800e90c:	4613      	mov	r3, r2
 800e90e:	009b      	lsls	r3, r3, #2
 800e910:	4413      	add	r3, r2
 800e912:	00db      	lsls	r3, r3, #3
 800e914:	440b      	add	r3, r1
 800e916:	3312      	adds	r3, #18
 800e918:	781b      	ldrb	r3, [r3, #0]
 800e91a:	e00b      	b.n	800e934 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e91c:	78fb      	ldrb	r3, [r7, #3]
 800e91e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e922:	68f9      	ldr	r1, [r7, #12]
 800e924:	4613      	mov	r3, r2
 800e926:	009b      	lsls	r3, r3, #2
 800e928:	4413      	add	r3, r2
 800e92a:	00db      	lsls	r3, r3, #3
 800e92c:	440b      	add	r3, r1
 800e92e:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800e932:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e934:	4618      	mov	r0, r3
 800e936:	3714      	adds	r7, #20
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr

0800e940 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b084      	sub	sp, #16
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	460b      	mov	r3, r1
 800e94a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e94c:	2300      	movs	r3, #0
 800e94e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e950:	2300      	movs	r3, #0
 800e952:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e95a:	78fa      	ldrb	r2, [r7, #3]
 800e95c:	4611      	mov	r1, r2
 800e95e:	4618      	mov	r0, r3
 800e960:	f7f8 fcd6 	bl	8007310 <HAL_PCD_SetAddress>
 800e964:	4603      	mov	r3, r0
 800e966:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e968:	7bfb      	ldrb	r3, [r7, #15]
 800e96a:	4618      	mov	r0, r3
 800e96c:	f000 f8b0 	bl	800ead0 <USBD_Get_USB_Status>
 800e970:	4603      	mov	r3, r0
 800e972:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e974:	7bbb      	ldrb	r3, [r7, #14]
}
 800e976:	4618      	mov	r0, r3
 800e978:	3710      	adds	r7, #16
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}

0800e97e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e97e:	b580      	push	{r7, lr}
 800e980:	b086      	sub	sp, #24
 800e982:	af00      	add	r7, sp, #0
 800e984:	60f8      	str	r0, [r7, #12]
 800e986:	607a      	str	r2, [r7, #4]
 800e988:	603b      	str	r3, [r7, #0]
 800e98a:	460b      	mov	r3, r1
 800e98c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e98e:	2300      	movs	r3, #0
 800e990:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e992:	2300      	movs	r3, #0
 800e994:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e99c:	7af9      	ldrb	r1, [r7, #11]
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	687a      	ldr	r2, [r7, #4]
 800e9a2:	f7f8 fdc7 	bl	8007534 <HAL_PCD_EP_Transmit>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9aa:	7dfb      	ldrb	r3, [r7, #23]
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f000 f88f 	bl	800ead0 <USBD_Get_USB_Status>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e9b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3718      	adds	r7, #24
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}

0800e9c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b086      	sub	sp, #24
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	60f8      	str	r0, [r7, #12]
 800e9c8:	607a      	str	r2, [r7, #4]
 800e9ca:	603b      	str	r3, [r7, #0]
 800e9cc:	460b      	mov	r3, r1
 800e9ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e9de:	7af9      	ldrb	r1, [r7, #11]
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	687a      	ldr	r2, [r7, #4]
 800e9e4:	f7f8 fd5d 	bl	80074a2 <HAL_PCD_EP_Receive>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9ec:	7dfb      	ldrb	r3, [r7, #23]
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f000 f86e 	bl	800ead0 <USBD_Get_USB_Status>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e9f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3718      	adds	r7, #24
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}

0800ea02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea02:	b580      	push	{r7, lr}
 800ea04:	b082      	sub	sp, #8
 800ea06:	af00      	add	r7, sp, #0
 800ea08:	6078      	str	r0, [r7, #4]
 800ea0a:	460b      	mov	r3, r1
 800ea0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ea14:	78fa      	ldrb	r2, [r7, #3]
 800ea16:	4611      	mov	r1, r2
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f7f8 fd73 	bl	8007504 <HAL_PCD_EP_GetRxCount>
 800ea1e:	4603      	mov	r3, r0
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3708      	adds	r7, #8
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}

0800ea28 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	460b      	mov	r3, r1
 800ea32:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ea34:	78fb      	ldrb	r3, [r7, #3]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d002      	beq.n	800ea40 <HAL_PCDEx_LPM_Callback+0x18>
 800ea3a:	2b01      	cmp	r3, #1
 800ea3c:	d013      	beq.n	800ea66 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800ea3e:	e023      	b.n	800ea88 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	7a5b      	ldrb	r3, [r3, #9]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d007      	beq.n	800ea58 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ea48:	f000 f83c 	bl	800eac4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ea4c:	4b10      	ldr	r3, [pc, #64]	; (800ea90 <HAL_PCDEx_LPM_Callback+0x68>)
 800ea4e:	691b      	ldr	r3, [r3, #16]
 800ea50:	4a0f      	ldr	r2, [pc, #60]	; (800ea90 <HAL_PCDEx_LPM_Callback+0x68>)
 800ea52:	f023 0306 	bic.w	r3, r3, #6
 800ea56:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f7fe fc78 	bl	800d354 <USBD_LL_Resume>
    break;
 800ea64:	e010      	b.n	800ea88 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f7fe fc5b 	bl	800d328 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	7a5b      	ldrb	r3, [r3, #9]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d005      	beq.n	800ea86 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ea7a:	4b05      	ldr	r3, [pc, #20]	; (800ea90 <HAL_PCDEx_LPM_Callback+0x68>)
 800ea7c:	691b      	ldr	r3, [r3, #16]
 800ea7e:	4a04      	ldr	r2, [pc, #16]	; (800ea90 <HAL_PCDEx_LPM_Callback+0x68>)
 800ea80:	f043 0306 	orr.w	r3, r3, #6
 800ea84:	6113      	str	r3, [r2, #16]
    break;
 800ea86:	bf00      	nop
}
 800ea88:	bf00      	nop
 800ea8a:	3708      	adds	r7, #8
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}
 800ea90:	e000ed00 	.word	0xe000ed00

0800ea94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b083      	sub	sp, #12
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ea9c:	4b03      	ldr	r3, [pc, #12]	; (800eaac <USBD_static_malloc+0x18>)
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	370c      	adds	r7, #12
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr
 800eaaa:	bf00      	nop
 800eaac:	20004f54 	.word	0x20004f54

0800eab0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b083      	sub	sp, #12
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]

}
 800eab8:	bf00      	nop
 800eaba:	370c      	adds	r7, #12
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr

0800eac4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800eac8:	f7f2 f9cc 	bl	8000e64 <SystemClock_Config>
}
 800eacc:	bf00      	nop
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ead0:	b480      	push	{r7}
 800ead2:	b085      	sub	sp, #20
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	4603      	mov	r3, r0
 800ead8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eada:	2300      	movs	r3, #0
 800eadc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800eade:	79fb      	ldrb	r3, [r7, #7]
 800eae0:	2b03      	cmp	r3, #3
 800eae2:	d817      	bhi.n	800eb14 <USBD_Get_USB_Status+0x44>
 800eae4:	a201      	add	r2, pc, #4	; (adr r2, 800eaec <USBD_Get_USB_Status+0x1c>)
 800eae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaea:	bf00      	nop
 800eaec:	0800eafd 	.word	0x0800eafd
 800eaf0:	0800eb03 	.word	0x0800eb03
 800eaf4:	0800eb09 	.word	0x0800eb09
 800eaf8:	0800eb0f 	.word	0x0800eb0f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800eafc:	2300      	movs	r3, #0
 800eafe:	73fb      	strb	r3, [r7, #15]
    break;
 800eb00:	e00b      	b.n	800eb1a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eb02:	2303      	movs	r3, #3
 800eb04:	73fb      	strb	r3, [r7, #15]
    break;
 800eb06:	e008      	b.n	800eb1a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eb08:	2301      	movs	r3, #1
 800eb0a:	73fb      	strb	r3, [r7, #15]
    break;
 800eb0c:	e005      	b.n	800eb1a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eb0e:	2303      	movs	r3, #3
 800eb10:	73fb      	strb	r3, [r7, #15]
    break;
 800eb12:	e002      	b.n	800eb1a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800eb14:	2303      	movs	r3, #3
 800eb16:	73fb      	strb	r3, [r7, #15]
    break;
 800eb18:	bf00      	nop
  }
  return usb_status;
 800eb1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3714      	adds	r7, #20
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <atoi>:
 800eb28:	220a      	movs	r2, #10
 800eb2a:	2100      	movs	r1, #0
 800eb2c:	f000 b882 	b.w	800ec34 <strtol>

0800eb30 <_strtol_l.constprop.0>:
 800eb30:	2b01      	cmp	r3, #1
 800eb32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb36:	d001      	beq.n	800eb3c <_strtol_l.constprop.0+0xc>
 800eb38:	2b24      	cmp	r3, #36	; 0x24
 800eb3a:	d906      	bls.n	800eb4a <_strtol_l.constprop.0+0x1a>
 800eb3c:	f000 fed0 	bl	800f8e0 <__errno>
 800eb40:	2316      	movs	r3, #22
 800eb42:	6003      	str	r3, [r0, #0]
 800eb44:	2000      	movs	r0, #0
 800eb46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb4a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ec30 <_strtol_l.constprop.0+0x100>
 800eb4e:	460d      	mov	r5, r1
 800eb50:	462e      	mov	r6, r5
 800eb52:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eb56:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800eb5a:	f017 0708 	ands.w	r7, r7, #8
 800eb5e:	d1f7      	bne.n	800eb50 <_strtol_l.constprop.0+0x20>
 800eb60:	2c2d      	cmp	r4, #45	; 0x2d
 800eb62:	d132      	bne.n	800ebca <_strtol_l.constprop.0+0x9a>
 800eb64:	782c      	ldrb	r4, [r5, #0]
 800eb66:	2701      	movs	r7, #1
 800eb68:	1cb5      	adds	r5, r6, #2
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d05b      	beq.n	800ec26 <_strtol_l.constprop.0+0xf6>
 800eb6e:	2b10      	cmp	r3, #16
 800eb70:	d109      	bne.n	800eb86 <_strtol_l.constprop.0+0x56>
 800eb72:	2c30      	cmp	r4, #48	; 0x30
 800eb74:	d107      	bne.n	800eb86 <_strtol_l.constprop.0+0x56>
 800eb76:	782c      	ldrb	r4, [r5, #0]
 800eb78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800eb7c:	2c58      	cmp	r4, #88	; 0x58
 800eb7e:	d14d      	bne.n	800ec1c <_strtol_l.constprop.0+0xec>
 800eb80:	786c      	ldrb	r4, [r5, #1]
 800eb82:	2310      	movs	r3, #16
 800eb84:	3502      	adds	r5, #2
 800eb86:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800eb8a:	f108 38ff 	add.w	r8, r8, #4294967295
 800eb8e:	f04f 0e00 	mov.w	lr, #0
 800eb92:	fbb8 f9f3 	udiv	r9, r8, r3
 800eb96:	4676      	mov	r6, lr
 800eb98:	fb03 8a19 	mls	sl, r3, r9, r8
 800eb9c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800eba0:	f1bc 0f09 	cmp.w	ip, #9
 800eba4:	d816      	bhi.n	800ebd4 <_strtol_l.constprop.0+0xa4>
 800eba6:	4664      	mov	r4, ip
 800eba8:	42a3      	cmp	r3, r4
 800ebaa:	dd24      	ble.n	800ebf6 <_strtol_l.constprop.0+0xc6>
 800ebac:	f1be 3fff 	cmp.w	lr, #4294967295
 800ebb0:	d008      	beq.n	800ebc4 <_strtol_l.constprop.0+0x94>
 800ebb2:	45b1      	cmp	r9, r6
 800ebb4:	d31c      	bcc.n	800ebf0 <_strtol_l.constprop.0+0xc0>
 800ebb6:	d101      	bne.n	800ebbc <_strtol_l.constprop.0+0x8c>
 800ebb8:	45a2      	cmp	sl, r4
 800ebba:	db19      	blt.n	800ebf0 <_strtol_l.constprop.0+0xc0>
 800ebbc:	fb06 4603 	mla	r6, r6, r3, r4
 800ebc0:	f04f 0e01 	mov.w	lr, #1
 800ebc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ebc8:	e7e8      	b.n	800eb9c <_strtol_l.constprop.0+0x6c>
 800ebca:	2c2b      	cmp	r4, #43	; 0x2b
 800ebcc:	bf04      	itt	eq
 800ebce:	782c      	ldrbeq	r4, [r5, #0]
 800ebd0:	1cb5      	addeq	r5, r6, #2
 800ebd2:	e7ca      	b.n	800eb6a <_strtol_l.constprop.0+0x3a>
 800ebd4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ebd8:	f1bc 0f19 	cmp.w	ip, #25
 800ebdc:	d801      	bhi.n	800ebe2 <_strtol_l.constprop.0+0xb2>
 800ebde:	3c37      	subs	r4, #55	; 0x37
 800ebe0:	e7e2      	b.n	800eba8 <_strtol_l.constprop.0+0x78>
 800ebe2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ebe6:	f1bc 0f19 	cmp.w	ip, #25
 800ebea:	d804      	bhi.n	800ebf6 <_strtol_l.constprop.0+0xc6>
 800ebec:	3c57      	subs	r4, #87	; 0x57
 800ebee:	e7db      	b.n	800eba8 <_strtol_l.constprop.0+0x78>
 800ebf0:	f04f 3eff 	mov.w	lr, #4294967295
 800ebf4:	e7e6      	b.n	800ebc4 <_strtol_l.constprop.0+0x94>
 800ebf6:	f1be 3fff 	cmp.w	lr, #4294967295
 800ebfa:	d105      	bne.n	800ec08 <_strtol_l.constprop.0+0xd8>
 800ebfc:	2322      	movs	r3, #34	; 0x22
 800ebfe:	6003      	str	r3, [r0, #0]
 800ec00:	4646      	mov	r6, r8
 800ec02:	b942      	cbnz	r2, 800ec16 <_strtol_l.constprop.0+0xe6>
 800ec04:	4630      	mov	r0, r6
 800ec06:	e79e      	b.n	800eb46 <_strtol_l.constprop.0+0x16>
 800ec08:	b107      	cbz	r7, 800ec0c <_strtol_l.constprop.0+0xdc>
 800ec0a:	4276      	negs	r6, r6
 800ec0c:	2a00      	cmp	r2, #0
 800ec0e:	d0f9      	beq.n	800ec04 <_strtol_l.constprop.0+0xd4>
 800ec10:	f1be 0f00 	cmp.w	lr, #0
 800ec14:	d000      	beq.n	800ec18 <_strtol_l.constprop.0+0xe8>
 800ec16:	1e69      	subs	r1, r5, #1
 800ec18:	6011      	str	r1, [r2, #0]
 800ec1a:	e7f3      	b.n	800ec04 <_strtol_l.constprop.0+0xd4>
 800ec1c:	2430      	movs	r4, #48	; 0x30
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d1b1      	bne.n	800eb86 <_strtol_l.constprop.0+0x56>
 800ec22:	2308      	movs	r3, #8
 800ec24:	e7af      	b.n	800eb86 <_strtol_l.constprop.0+0x56>
 800ec26:	2c30      	cmp	r4, #48	; 0x30
 800ec28:	d0a5      	beq.n	800eb76 <_strtol_l.constprop.0+0x46>
 800ec2a:	230a      	movs	r3, #10
 800ec2c:	e7ab      	b.n	800eb86 <_strtol_l.constprop.0+0x56>
 800ec2e:	bf00      	nop
 800ec30:	08012af9 	.word	0x08012af9

0800ec34 <strtol>:
 800ec34:	4613      	mov	r3, r2
 800ec36:	460a      	mov	r2, r1
 800ec38:	4601      	mov	r1, r0
 800ec3a:	4802      	ldr	r0, [pc, #8]	; (800ec44 <strtol+0x10>)
 800ec3c:	6800      	ldr	r0, [r0, #0]
 800ec3e:	f7ff bf77 	b.w	800eb30 <_strtol_l.constprop.0>
 800ec42:	bf00      	nop
 800ec44:	200001e8 	.word	0x200001e8

0800ec48 <__cvt>:
 800ec48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec4c:	ec55 4b10 	vmov	r4, r5, d0
 800ec50:	2d00      	cmp	r5, #0
 800ec52:	460e      	mov	r6, r1
 800ec54:	4619      	mov	r1, r3
 800ec56:	462b      	mov	r3, r5
 800ec58:	bfbb      	ittet	lt
 800ec5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ec5e:	461d      	movlt	r5, r3
 800ec60:	2300      	movge	r3, #0
 800ec62:	232d      	movlt	r3, #45	; 0x2d
 800ec64:	700b      	strb	r3, [r1, #0]
 800ec66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ec6c:	4691      	mov	r9, r2
 800ec6e:	f023 0820 	bic.w	r8, r3, #32
 800ec72:	bfbc      	itt	lt
 800ec74:	4622      	movlt	r2, r4
 800ec76:	4614      	movlt	r4, r2
 800ec78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ec7c:	d005      	beq.n	800ec8a <__cvt+0x42>
 800ec7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ec82:	d100      	bne.n	800ec86 <__cvt+0x3e>
 800ec84:	3601      	adds	r6, #1
 800ec86:	2102      	movs	r1, #2
 800ec88:	e000      	b.n	800ec8c <__cvt+0x44>
 800ec8a:	2103      	movs	r1, #3
 800ec8c:	ab03      	add	r3, sp, #12
 800ec8e:	9301      	str	r3, [sp, #4]
 800ec90:	ab02      	add	r3, sp, #8
 800ec92:	9300      	str	r3, [sp, #0]
 800ec94:	ec45 4b10 	vmov	d0, r4, r5
 800ec98:	4653      	mov	r3, sl
 800ec9a:	4632      	mov	r2, r6
 800ec9c:	f000 ff04 	bl	800faa8 <_dtoa_r>
 800eca0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800eca4:	4607      	mov	r7, r0
 800eca6:	d102      	bne.n	800ecae <__cvt+0x66>
 800eca8:	f019 0f01 	tst.w	r9, #1
 800ecac:	d022      	beq.n	800ecf4 <__cvt+0xac>
 800ecae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ecb2:	eb07 0906 	add.w	r9, r7, r6
 800ecb6:	d110      	bne.n	800ecda <__cvt+0x92>
 800ecb8:	783b      	ldrb	r3, [r7, #0]
 800ecba:	2b30      	cmp	r3, #48	; 0x30
 800ecbc:	d10a      	bne.n	800ecd4 <__cvt+0x8c>
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	4629      	mov	r1, r5
 800ecc6:	f7f1 ff37 	bl	8000b38 <__aeabi_dcmpeq>
 800ecca:	b918      	cbnz	r0, 800ecd4 <__cvt+0x8c>
 800eccc:	f1c6 0601 	rsb	r6, r6, #1
 800ecd0:	f8ca 6000 	str.w	r6, [sl]
 800ecd4:	f8da 3000 	ldr.w	r3, [sl]
 800ecd8:	4499      	add	r9, r3
 800ecda:	2200      	movs	r2, #0
 800ecdc:	2300      	movs	r3, #0
 800ecde:	4620      	mov	r0, r4
 800ece0:	4629      	mov	r1, r5
 800ece2:	f7f1 ff29 	bl	8000b38 <__aeabi_dcmpeq>
 800ece6:	b108      	cbz	r0, 800ecec <__cvt+0xa4>
 800ece8:	f8cd 900c 	str.w	r9, [sp, #12]
 800ecec:	2230      	movs	r2, #48	; 0x30
 800ecee:	9b03      	ldr	r3, [sp, #12]
 800ecf0:	454b      	cmp	r3, r9
 800ecf2:	d307      	bcc.n	800ed04 <__cvt+0xbc>
 800ecf4:	9b03      	ldr	r3, [sp, #12]
 800ecf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ecf8:	1bdb      	subs	r3, r3, r7
 800ecfa:	4638      	mov	r0, r7
 800ecfc:	6013      	str	r3, [r2, #0]
 800ecfe:	b004      	add	sp, #16
 800ed00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed04:	1c59      	adds	r1, r3, #1
 800ed06:	9103      	str	r1, [sp, #12]
 800ed08:	701a      	strb	r2, [r3, #0]
 800ed0a:	e7f0      	b.n	800ecee <__cvt+0xa6>

0800ed0c <__exponent>:
 800ed0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed0e:	4603      	mov	r3, r0
 800ed10:	2900      	cmp	r1, #0
 800ed12:	bfb8      	it	lt
 800ed14:	4249      	neglt	r1, r1
 800ed16:	f803 2b02 	strb.w	r2, [r3], #2
 800ed1a:	bfb4      	ite	lt
 800ed1c:	222d      	movlt	r2, #45	; 0x2d
 800ed1e:	222b      	movge	r2, #43	; 0x2b
 800ed20:	2909      	cmp	r1, #9
 800ed22:	7042      	strb	r2, [r0, #1]
 800ed24:	dd2a      	ble.n	800ed7c <__exponent+0x70>
 800ed26:	f10d 0207 	add.w	r2, sp, #7
 800ed2a:	4617      	mov	r7, r2
 800ed2c:	260a      	movs	r6, #10
 800ed2e:	4694      	mov	ip, r2
 800ed30:	fb91 f5f6 	sdiv	r5, r1, r6
 800ed34:	fb06 1415 	mls	r4, r6, r5, r1
 800ed38:	3430      	adds	r4, #48	; 0x30
 800ed3a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ed3e:	460c      	mov	r4, r1
 800ed40:	2c63      	cmp	r4, #99	; 0x63
 800ed42:	f102 32ff 	add.w	r2, r2, #4294967295
 800ed46:	4629      	mov	r1, r5
 800ed48:	dcf1      	bgt.n	800ed2e <__exponent+0x22>
 800ed4a:	3130      	adds	r1, #48	; 0x30
 800ed4c:	f1ac 0402 	sub.w	r4, ip, #2
 800ed50:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ed54:	1c41      	adds	r1, r0, #1
 800ed56:	4622      	mov	r2, r4
 800ed58:	42ba      	cmp	r2, r7
 800ed5a:	d30a      	bcc.n	800ed72 <__exponent+0x66>
 800ed5c:	f10d 0209 	add.w	r2, sp, #9
 800ed60:	eba2 020c 	sub.w	r2, r2, ip
 800ed64:	42bc      	cmp	r4, r7
 800ed66:	bf88      	it	hi
 800ed68:	2200      	movhi	r2, #0
 800ed6a:	4413      	add	r3, r2
 800ed6c:	1a18      	subs	r0, r3, r0
 800ed6e:	b003      	add	sp, #12
 800ed70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed72:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ed76:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ed7a:	e7ed      	b.n	800ed58 <__exponent+0x4c>
 800ed7c:	2330      	movs	r3, #48	; 0x30
 800ed7e:	3130      	adds	r1, #48	; 0x30
 800ed80:	7083      	strb	r3, [r0, #2]
 800ed82:	70c1      	strb	r1, [r0, #3]
 800ed84:	1d03      	adds	r3, r0, #4
 800ed86:	e7f1      	b.n	800ed6c <__exponent+0x60>

0800ed88 <_printf_float>:
 800ed88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed8c:	ed2d 8b02 	vpush	{d8}
 800ed90:	b08d      	sub	sp, #52	; 0x34
 800ed92:	460c      	mov	r4, r1
 800ed94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ed98:	4616      	mov	r6, r2
 800ed9a:	461f      	mov	r7, r3
 800ed9c:	4605      	mov	r5, r0
 800ed9e:	f000 fd55 	bl	800f84c <_localeconv_r>
 800eda2:	f8d0 a000 	ldr.w	sl, [r0]
 800eda6:	4650      	mov	r0, sl
 800eda8:	f7f1 fa9a 	bl	80002e0 <strlen>
 800edac:	2300      	movs	r3, #0
 800edae:	930a      	str	r3, [sp, #40]	; 0x28
 800edb0:	6823      	ldr	r3, [r4, #0]
 800edb2:	9305      	str	r3, [sp, #20]
 800edb4:	f8d8 3000 	ldr.w	r3, [r8]
 800edb8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800edbc:	3307      	adds	r3, #7
 800edbe:	f023 0307 	bic.w	r3, r3, #7
 800edc2:	f103 0208 	add.w	r2, r3, #8
 800edc6:	f8c8 2000 	str.w	r2, [r8]
 800edca:	e9d3 8900 	ldrd	r8, r9, [r3]
 800edce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800edd2:	9307      	str	r3, [sp, #28]
 800edd4:	f8cd 8018 	str.w	r8, [sp, #24]
 800edd8:	ee08 0a10 	vmov	s16, r0
 800eddc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ede0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ede4:	4b9e      	ldr	r3, [pc, #632]	; (800f060 <_printf_float+0x2d8>)
 800ede6:	f04f 32ff 	mov.w	r2, #4294967295
 800edea:	f7f1 fed7 	bl	8000b9c <__aeabi_dcmpun>
 800edee:	bb88      	cbnz	r0, 800ee54 <_printf_float+0xcc>
 800edf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800edf4:	4b9a      	ldr	r3, [pc, #616]	; (800f060 <_printf_float+0x2d8>)
 800edf6:	f04f 32ff 	mov.w	r2, #4294967295
 800edfa:	f7f1 feb1 	bl	8000b60 <__aeabi_dcmple>
 800edfe:	bb48      	cbnz	r0, 800ee54 <_printf_float+0xcc>
 800ee00:	2200      	movs	r2, #0
 800ee02:	2300      	movs	r3, #0
 800ee04:	4640      	mov	r0, r8
 800ee06:	4649      	mov	r1, r9
 800ee08:	f7f1 fea0 	bl	8000b4c <__aeabi_dcmplt>
 800ee0c:	b110      	cbz	r0, 800ee14 <_printf_float+0x8c>
 800ee0e:	232d      	movs	r3, #45	; 0x2d
 800ee10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee14:	4a93      	ldr	r2, [pc, #588]	; (800f064 <_printf_float+0x2dc>)
 800ee16:	4b94      	ldr	r3, [pc, #592]	; (800f068 <_printf_float+0x2e0>)
 800ee18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ee1c:	bf94      	ite	ls
 800ee1e:	4690      	movls	r8, r2
 800ee20:	4698      	movhi	r8, r3
 800ee22:	2303      	movs	r3, #3
 800ee24:	6123      	str	r3, [r4, #16]
 800ee26:	9b05      	ldr	r3, [sp, #20]
 800ee28:	f023 0304 	bic.w	r3, r3, #4
 800ee2c:	6023      	str	r3, [r4, #0]
 800ee2e:	f04f 0900 	mov.w	r9, #0
 800ee32:	9700      	str	r7, [sp, #0]
 800ee34:	4633      	mov	r3, r6
 800ee36:	aa0b      	add	r2, sp, #44	; 0x2c
 800ee38:	4621      	mov	r1, r4
 800ee3a:	4628      	mov	r0, r5
 800ee3c:	f000 f9da 	bl	800f1f4 <_printf_common>
 800ee40:	3001      	adds	r0, #1
 800ee42:	f040 8090 	bne.w	800ef66 <_printf_float+0x1de>
 800ee46:	f04f 30ff 	mov.w	r0, #4294967295
 800ee4a:	b00d      	add	sp, #52	; 0x34
 800ee4c:	ecbd 8b02 	vpop	{d8}
 800ee50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee54:	4642      	mov	r2, r8
 800ee56:	464b      	mov	r3, r9
 800ee58:	4640      	mov	r0, r8
 800ee5a:	4649      	mov	r1, r9
 800ee5c:	f7f1 fe9e 	bl	8000b9c <__aeabi_dcmpun>
 800ee60:	b140      	cbz	r0, 800ee74 <_printf_float+0xec>
 800ee62:	464b      	mov	r3, r9
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	bfbc      	itt	lt
 800ee68:	232d      	movlt	r3, #45	; 0x2d
 800ee6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ee6e:	4a7f      	ldr	r2, [pc, #508]	; (800f06c <_printf_float+0x2e4>)
 800ee70:	4b7f      	ldr	r3, [pc, #508]	; (800f070 <_printf_float+0x2e8>)
 800ee72:	e7d1      	b.n	800ee18 <_printf_float+0x90>
 800ee74:	6863      	ldr	r3, [r4, #4]
 800ee76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ee7a:	9206      	str	r2, [sp, #24]
 800ee7c:	1c5a      	adds	r2, r3, #1
 800ee7e:	d13f      	bne.n	800ef00 <_printf_float+0x178>
 800ee80:	2306      	movs	r3, #6
 800ee82:	6063      	str	r3, [r4, #4]
 800ee84:	9b05      	ldr	r3, [sp, #20]
 800ee86:	6861      	ldr	r1, [r4, #4]
 800ee88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	9303      	str	r3, [sp, #12]
 800ee90:	ab0a      	add	r3, sp, #40	; 0x28
 800ee92:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ee96:	ab09      	add	r3, sp, #36	; 0x24
 800ee98:	ec49 8b10 	vmov	d0, r8, r9
 800ee9c:	9300      	str	r3, [sp, #0]
 800ee9e:	6022      	str	r2, [r4, #0]
 800eea0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eea4:	4628      	mov	r0, r5
 800eea6:	f7ff fecf 	bl	800ec48 <__cvt>
 800eeaa:	9b06      	ldr	r3, [sp, #24]
 800eeac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eeae:	2b47      	cmp	r3, #71	; 0x47
 800eeb0:	4680      	mov	r8, r0
 800eeb2:	d108      	bne.n	800eec6 <_printf_float+0x13e>
 800eeb4:	1cc8      	adds	r0, r1, #3
 800eeb6:	db02      	blt.n	800eebe <_printf_float+0x136>
 800eeb8:	6863      	ldr	r3, [r4, #4]
 800eeba:	4299      	cmp	r1, r3
 800eebc:	dd41      	ble.n	800ef42 <_printf_float+0x1ba>
 800eebe:	f1ab 0302 	sub.w	r3, fp, #2
 800eec2:	fa5f fb83 	uxtb.w	fp, r3
 800eec6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eeca:	d820      	bhi.n	800ef0e <_printf_float+0x186>
 800eecc:	3901      	subs	r1, #1
 800eece:	465a      	mov	r2, fp
 800eed0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eed4:	9109      	str	r1, [sp, #36]	; 0x24
 800eed6:	f7ff ff19 	bl	800ed0c <__exponent>
 800eeda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eedc:	1813      	adds	r3, r2, r0
 800eede:	2a01      	cmp	r2, #1
 800eee0:	4681      	mov	r9, r0
 800eee2:	6123      	str	r3, [r4, #16]
 800eee4:	dc02      	bgt.n	800eeec <_printf_float+0x164>
 800eee6:	6822      	ldr	r2, [r4, #0]
 800eee8:	07d2      	lsls	r2, r2, #31
 800eeea:	d501      	bpl.n	800eef0 <_printf_float+0x168>
 800eeec:	3301      	adds	r3, #1
 800eeee:	6123      	str	r3, [r4, #16]
 800eef0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d09c      	beq.n	800ee32 <_printf_float+0xaa>
 800eef8:	232d      	movs	r3, #45	; 0x2d
 800eefa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eefe:	e798      	b.n	800ee32 <_printf_float+0xaa>
 800ef00:	9a06      	ldr	r2, [sp, #24]
 800ef02:	2a47      	cmp	r2, #71	; 0x47
 800ef04:	d1be      	bne.n	800ee84 <_printf_float+0xfc>
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d1bc      	bne.n	800ee84 <_printf_float+0xfc>
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	e7b9      	b.n	800ee82 <_printf_float+0xfa>
 800ef0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ef12:	d118      	bne.n	800ef46 <_printf_float+0x1be>
 800ef14:	2900      	cmp	r1, #0
 800ef16:	6863      	ldr	r3, [r4, #4]
 800ef18:	dd0b      	ble.n	800ef32 <_printf_float+0x1aa>
 800ef1a:	6121      	str	r1, [r4, #16]
 800ef1c:	b913      	cbnz	r3, 800ef24 <_printf_float+0x19c>
 800ef1e:	6822      	ldr	r2, [r4, #0]
 800ef20:	07d0      	lsls	r0, r2, #31
 800ef22:	d502      	bpl.n	800ef2a <_printf_float+0x1a2>
 800ef24:	3301      	adds	r3, #1
 800ef26:	440b      	add	r3, r1
 800ef28:	6123      	str	r3, [r4, #16]
 800ef2a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ef2c:	f04f 0900 	mov.w	r9, #0
 800ef30:	e7de      	b.n	800eef0 <_printf_float+0x168>
 800ef32:	b913      	cbnz	r3, 800ef3a <_printf_float+0x1b2>
 800ef34:	6822      	ldr	r2, [r4, #0]
 800ef36:	07d2      	lsls	r2, r2, #31
 800ef38:	d501      	bpl.n	800ef3e <_printf_float+0x1b6>
 800ef3a:	3302      	adds	r3, #2
 800ef3c:	e7f4      	b.n	800ef28 <_printf_float+0x1a0>
 800ef3e:	2301      	movs	r3, #1
 800ef40:	e7f2      	b.n	800ef28 <_printf_float+0x1a0>
 800ef42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ef46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef48:	4299      	cmp	r1, r3
 800ef4a:	db05      	blt.n	800ef58 <_printf_float+0x1d0>
 800ef4c:	6823      	ldr	r3, [r4, #0]
 800ef4e:	6121      	str	r1, [r4, #16]
 800ef50:	07d8      	lsls	r0, r3, #31
 800ef52:	d5ea      	bpl.n	800ef2a <_printf_float+0x1a2>
 800ef54:	1c4b      	adds	r3, r1, #1
 800ef56:	e7e7      	b.n	800ef28 <_printf_float+0x1a0>
 800ef58:	2900      	cmp	r1, #0
 800ef5a:	bfd4      	ite	le
 800ef5c:	f1c1 0202 	rsble	r2, r1, #2
 800ef60:	2201      	movgt	r2, #1
 800ef62:	4413      	add	r3, r2
 800ef64:	e7e0      	b.n	800ef28 <_printf_float+0x1a0>
 800ef66:	6823      	ldr	r3, [r4, #0]
 800ef68:	055a      	lsls	r2, r3, #21
 800ef6a:	d407      	bmi.n	800ef7c <_printf_float+0x1f4>
 800ef6c:	6923      	ldr	r3, [r4, #16]
 800ef6e:	4642      	mov	r2, r8
 800ef70:	4631      	mov	r1, r6
 800ef72:	4628      	mov	r0, r5
 800ef74:	47b8      	blx	r7
 800ef76:	3001      	adds	r0, #1
 800ef78:	d12c      	bne.n	800efd4 <_printf_float+0x24c>
 800ef7a:	e764      	b.n	800ee46 <_printf_float+0xbe>
 800ef7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ef80:	f240 80e0 	bls.w	800f144 <_printf_float+0x3bc>
 800ef84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ef88:	2200      	movs	r2, #0
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	f7f1 fdd4 	bl	8000b38 <__aeabi_dcmpeq>
 800ef90:	2800      	cmp	r0, #0
 800ef92:	d034      	beq.n	800effe <_printf_float+0x276>
 800ef94:	4a37      	ldr	r2, [pc, #220]	; (800f074 <_printf_float+0x2ec>)
 800ef96:	2301      	movs	r3, #1
 800ef98:	4631      	mov	r1, r6
 800ef9a:	4628      	mov	r0, r5
 800ef9c:	47b8      	blx	r7
 800ef9e:	3001      	adds	r0, #1
 800efa0:	f43f af51 	beq.w	800ee46 <_printf_float+0xbe>
 800efa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800efa8:	429a      	cmp	r2, r3
 800efaa:	db02      	blt.n	800efb2 <_printf_float+0x22a>
 800efac:	6823      	ldr	r3, [r4, #0]
 800efae:	07d8      	lsls	r0, r3, #31
 800efb0:	d510      	bpl.n	800efd4 <_printf_float+0x24c>
 800efb2:	ee18 3a10 	vmov	r3, s16
 800efb6:	4652      	mov	r2, sl
 800efb8:	4631      	mov	r1, r6
 800efba:	4628      	mov	r0, r5
 800efbc:	47b8      	blx	r7
 800efbe:	3001      	adds	r0, #1
 800efc0:	f43f af41 	beq.w	800ee46 <_printf_float+0xbe>
 800efc4:	f04f 0800 	mov.w	r8, #0
 800efc8:	f104 091a 	add.w	r9, r4, #26
 800efcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efce:	3b01      	subs	r3, #1
 800efd0:	4543      	cmp	r3, r8
 800efd2:	dc09      	bgt.n	800efe8 <_printf_float+0x260>
 800efd4:	6823      	ldr	r3, [r4, #0]
 800efd6:	079b      	lsls	r3, r3, #30
 800efd8:	f100 8107 	bmi.w	800f1ea <_printf_float+0x462>
 800efdc:	68e0      	ldr	r0, [r4, #12]
 800efde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800efe0:	4298      	cmp	r0, r3
 800efe2:	bfb8      	it	lt
 800efe4:	4618      	movlt	r0, r3
 800efe6:	e730      	b.n	800ee4a <_printf_float+0xc2>
 800efe8:	2301      	movs	r3, #1
 800efea:	464a      	mov	r2, r9
 800efec:	4631      	mov	r1, r6
 800efee:	4628      	mov	r0, r5
 800eff0:	47b8      	blx	r7
 800eff2:	3001      	adds	r0, #1
 800eff4:	f43f af27 	beq.w	800ee46 <_printf_float+0xbe>
 800eff8:	f108 0801 	add.w	r8, r8, #1
 800effc:	e7e6      	b.n	800efcc <_printf_float+0x244>
 800effe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f000:	2b00      	cmp	r3, #0
 800f002:	dc39      	bgt.n	800f078 <_printf_float+0x2f0>
 800f004:	4a1b      	ldr	r2, [pc, #108]	; (800f074 <_printf_float+0x2ec>)
 800f006:	2301      	movs	r3, #1
 800f008:	4631      	mov	r1, r6
 800f00a:	4628      	mov	r0, r5
 800f00c:	47b8      	blx	r7
 800f00e:	3001      	adds	r0, #1
 800f010:	f43f af19 	beq.w	800ee46 <_printf_float+0xbe>
 800f014:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f018:	4313      	orrs	r3, r2
 800f01a:	d102      	bne.n	800f022 <_printf_float+0x29a>
 800f01c:	6823      	ldr	r3, [r4, #0]
 800f01e:	07d9      	lsls	r1, r3, #31
 800f020:	d5d8      	bpl.n	800efd4 <_printf_float+0x24c>
 800f022:	ee18 3a10 	vmov	r3, s16
 800f026:	4652      	mov	r2, sl
 800f028:	4631      	mov	r1, r6
 800f02a:	4628      	mov	r0, r5
 800f02c:	47b8      	blx	r7
 800f02e:	3001      	adds	r0, #1
 800f030:	f43f af09 	beq.w	800ee46 <_printf_float+0xbe>
 800f034:	f04f 0900 	mov.w	r9, #0
 800f038:	f104 0a1a 	add.w	sl, r4, #26
 800f03c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f03e:	425b      	negs	r3, r3
 800f040:	454b      	cmp	r3, r9
 800f042:	dc01      	bgt.n	800f048 <_printf_float+0x2c0>
 800f044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f046:	e792      	b.n	800ef6e <_printf_float+0x1e6>
 800f048:	2301      	movs	r3, #1
 800f04a:	4652      	mov	r2, sl
 800f04c:	4631      	mov	r1, r6
 800f04e:	4628      	mov	r0, r5
 800f050:	47b8      	blx	r7
 800f052:	3001      	adds	r0, #1
 800f054:	f43f aef7 	beq.w	800ee46 <_printf_float+0xbe>
 800f058:	f109 0901 	add.w	r9, r9, #1
 800f05c:	e7ee      	b.n	800f03c <_printf_float+0x2b4>
 800f05e:	bf00      	nop
 800f060:	7fefffff 	.word	0x7fefffff
 800f064:	08012bf9 	.word	0x08012bf9
 800f068:	08012bfd 	.word	0x08012bfd
 800f06c:	08012c01 	.word	0x08012c01
 800f070:	08012c05 	.word	0x08012c05
 800f074:	08012c09 	.word	0x08012c09
 800f078:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f07a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f07c:	429a      	cmp	r2, r3
 800f07e:	bfa8      	it	ge
 800f080:	461a      	movge	r2, r3
 800f082:	2a00      	cmp	r2, #0
 800f084:	4691      	mov	r9, r2
 800f086:	dc37      	bgt.n	800f0f8 <_printf_float+0x370>
 800f088:	f04f 0b00 	mov.w	fp, #0
 800f08c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f090:	f104 021a 	add.w	r2, r4, #26
 800f094:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f096:	9305      	str	r3, [sp, #20]
 800f098:	eba3 0309 	sub.w	r3, r3, r9
 800f09c:	455b      	cmp	r3, fp
 800f09e:	dc33      	bgt.n	800f108 <_printf_float+0x380>
 800f0a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	db3b      	blt.n	800f120 <_printf_float+0x398>
 800f0a8:	6823      	ldr	r3, [r4, #0]
 800f0aa:	07da      	lsls	r2, r3, #31
 800f0ac:	d438      	bmi.n	800f120 <_printf_float+0x398>
 800f0ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f0b2:	eba2 0903 	sub.w	r9, r2, r3
 800f0b6:	9b05      	ldr	r3, [sp, #20]
 800f0b8:	1ad2      	subs	r2, r2, r3
 800f0ba:	4591      	cmp	r9, r2
 800f0bc:	bfa8      	it	ge
 800f0be:	4691      	movge	r9, r2
 800f0c0:	f1b9 0f00 	cmp.w	r9, #0
 800f0c4:	dc35      	bgt.n	800f132 <_printf_float+0x3aa>
 800f0c6:	f04f 0800 	mov.w	r8, #0
 800f0ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f0ce:	f104 0a1a 	add.w	sl, r4, #26
 800f0d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f0d6:	1a9b      	subs	r3, r3, r2
 800f0d8:	eba3 0309 	sub.w	r3, r3, r9
 800f0dc:	4543      	cmp	r3, r8
 800f0de:	f77f af79 	ble.w	800efd4 <_printf_float+0x24c>
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	4652      	mov	r2, sl
 800f0e6:	4631      	mov	r1, r6
 800f0e8:	4628      	mov	r0, r5
 800f0ea:	47b8      	blx	r7
 800f0ec:	3001      	adds	r0, #1
 800f0ee:	f43f aeaa 	beq.w	800ee46 <_printf_float+0xbe>
 800f0f2:	f108 0801 	add.w	r8, r8, #1
 800f0f6:	e7ec      	b.n	800f0d2 <_printf_float+0x34a>
 800f0f8:	4613      	mov	r3, r2
 800f0fa:	4631      	mov	r1, r6
 800f0fc:	4642      	mov	r2, r8
 800f0fe:	4628      	mov	r0, r5
 800f100:	47b8      	blx	r7
 800f102:	3001      	adds	r0, #1
 800f104:	d1c0      	bne.n	800f088 <_printf_float+0x300>
 800f106:	e69e      	b.n	800ee46 <_printf_float+0xbe>
 800f108:	2301      	movs	r3, #1
 800f10a:	4631      	mov	r1, r6
 800f10c:	4628      	mov	r0, r5
 800f10e:	9205      	str	r2, [sp, #20]
 800f110:	47b8      	blx	r7
 800f112:	3001      	adds	r0, #1
 800f114:	f43f ae97 	beq.w	800ee46 <_printf_float+0xbe>
 800f118:	9a05      	ldr	r2, [sp, #20]
 800f11a:	f10b 0b01 	add.w	fp, fp, #1
 800f11e:	e7b9      	b.n	800f094 <_printf_float+0x30c>
 800f120:	ee18 3a10 	vmov	r3, s16
 800f124:	4652      	mov	r2, sl
 800f126:	4631      	mov	r1, r6
 800f128:	4628      	mov	r0, r5
 800f12a:	47b8      	blx	r7
 800f12c:	3001      	adds	r0, #1
 800f12e:	d1be      	bne.n	800f0ae <_printf_float+0x326>
 800f130:	e689      	b.n	800ee46 <_printf_float+0xbe>
 800f132:	9a05      	ldr	r2, [sp, #20]
 800f134:	464b      	mov	r3, r9
 800f136:	4442      	add	r2, r8
 800f138:	4631      	mov	r1, r6
 800f13a:	4628      	mov	r0, r5
 800f13c:	47b8      	blx	r7
 800f13e:	3001      	adds	r0, #1
 800f140:	d1c1      	bne.n	800f0c6 <_printf_float+0x33e>
 800f142:	e680      	b.n	800ee46 <_printf_float+0xbe>
 800f144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f146:	2a01      	cmp	r2, #1
 800f148:	dc01      	bgt.n	800f14e <_printf_float+0x3c6>
 800f14a:	07db      	lsls	r3, r3, #31
 800f14c:	d53a      	bpl.n	800f1c4 <_printf_float+0x43c>
 800f14e:	2301      	movs	r3, #1
 800f150:	4642      	mov	r2, r8
 800f152:	4631      	mov	r1, r6
 800f154:	4628      	mov	r0, r5
 800f156:	47b8      	blx	r7
 800f158:	3001      	adds	r0, #1
 800f15a:	f43f ae74 	beq.w	800ee46 <_printf_float+0xbe>
 800f15e:	ee18 3a10 	vmov	r3, s16
 800f162:	4652      	mov	r2, sl
 800f164:	4631      	mov	r1, r6
 800f166:	4628      	mov	r0, r5
 800f168:	47b8      	blx	r7
 800f16a:	3001      	adds	r0, #1
 800f16c:	f43f ae6b 	beq.w	800ee46 <_printf_float+0xbe>
 800f170:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f174:	2200      	movs	r2, #0
 800f176:	2300      	movs	r3, #0
 800f178:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f17c:	f7f1 fcdc 	bl	8000b38 <__aeabi_dcmpeq>
 800f180:	b9d8      	cbnz	r0, 800f1ba <_printf_float+0x432>
 800f182:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f186:	f108 0201 	add.w	r2, r8, #1
 800f18a:	4631      	mov	r1, r6
 800f18c:	4628      	mov	r0, r5
 800f18e:	47b8      	blx	r7
 800f190:	3001      	adds	r0, #1
 800f192:	d10e      	bne.n	800f1b2 <_printf_float+0x42a>
 800f194:	e657      	b.n	800ee46 <_printf_float+0xbe>
 800f196:	2301      	movs	r3, #1
 800f198:	4652      	mov	r2, sl
 800f19a:	4631      	mov	r1, r6
 800f19c:	4628      	mov	r0, r5
 800f19e:	47b8      	blx	r7
 800f1a0:	3001      	adds	r0, #1
 800f1a2:	f43f ae50 	beq.w	800ee46 <_printf_float+0xbe>
 800f1a6:	f108 0801 	add.w	r8, r8, #1
 800f1aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1ac:	3b01      	subs	r3, #1
 800f1ae:	4543      	cmp	r3, r8
 800f1b0:	dcf1      	bgt.n	800f196 <_printf_float+0x40e>
 800f1b2:	464b      	mov	r3, r9
 800f1b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f1b8:	e6da      	b.n	800ef70 <_printf_float+0x1e8>
 800f1ba:	f04f 0800 	mov.w	r8, #0
 800f1be:	f104 0a1a 	add.w	sl, r4, #26
 800f1c2:	e7f2      	b.n	800f1aa <_printf_float+0x422>
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	4642      	mov	r2, r8
 800f1c8:	e7df      	b.n	800f18a <_printf_float+0x402>
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	464a      	mov	r2, r9
 800f1ce:	4631      	mov	r1, r6
 800f1d0:	4628      	mov	r0, r5
 800f1d2:	47b8      	blx	r7
 800f1d4:	3001      	adds	r0, #1
 800f1d6:	f43f ae36 	beq.w	800ee46 <_printf_float+0xbe>
 800f1da:	f108 0801 	add.w	r8, r8, #1
 800f1de:	68e3      	ldr	r3, [r4, #12]
 800f1e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f1e2:	1a5b      	subs	r3, r3, r1
 800f1e4:	4543      	cmp	r3, r8
 800f1e6:	dcf0      	bgt.n	800f1ca <_printf_float+0x442>
 800f1e8:	e6f8      	b.n	800efdc <_printf_float+0x254>
 800f1ea:	f04f 0800 	mov.w	r8, #0
 800f1ee:	f104 0919 	add.w	r9, r4, #25
 800f1f2:	e7f4      	b.n	800f1de <_printf_float+0x456>

0800f1f4 <_printf_common>:
 800f1f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1f8:	4616      	mov	r6, r2
 800f1fa:	4699      	mov	r9, r3
 800f1fc:	688a      	ldr	r2, [r1, #8]
 800f1fe:	690b      	ldr	r3, [r1, #16]
 800f200:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f204:	4293      	cmp	r3, r2
 800f206:	bfb8      	it	lt
 800f208:	4613      	movlt	r3, r2
 800f20a:	6033      	str	r3, [r6, #0]
 800f20c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f210:	4607      	mov	r7, r0
 800f212:	460c      	mov	r4, r1
 800f214:	b10a      	cbz	r2, 800f21a <_printf_common+0x26>
 800f216:	3301      	adds	r3, #1
 800f218:	6033      	str	r3, [r6, #0]
 800f21a:	6823      	ldr	r3, [r4, #0]
 800f21c:	0699      	lsls	r1, r3, #26
 800f21e:	bf42      	ittt	mi
 800f220:	6833      	ldrmi	r3, [r6, #0]
 800f222:	3302      	addmi	r3, #2
 800f224:	6033      	strmi	r3, [r6, #0]
 800f226:	6825      	ldr	r5, [r4, #0]
 800f228:	f015 0506 	ands.w	r5, r5, #6
 800f22c:	d106      	bne.n	800f23c <_printf_common+0x48>
 800f22e:	f104 0a19 	add.w	sl, r4, #25
 800f232:	68e3      	ldr	r3, [r4, #12]
 800f234:	6832      	ldr	r2, [r6, #0]
 800f236:	1a9b      	subs	r3, r3, r2
 800f238:	42ab      	cmp	r3, r5
 800f23a:	dc26      	bgt.n	800f28a <_printf_common+0x96>
 800f23c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f240:	1e13      	subs	r3, r2, #0
 800f242:	6822      	ldr	r2, [r4, #0]
 800f244:	bf18      	it	ne
 800f246:	2301      	movne	r3, #1
 800f248:	0692      	lsls	r2, r2, #26
 800f24a:	d42b      	bmi.n	800f2a4 <_printf_common+0xb0>
 800f24c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f250:	4649      	mov	r1, r9
 800f252:	4638      	mov	r0, r7
 800f254:	47c0      	blx	r8
 800f256:	3001      	adds	r0, #1
 800f258:	d01e      	beq.n	800f298 <_printf_common+0xa4>
 800f25a:	6823      	ldr	r3, [r4, #0]
 800f25c:	6922      	ldr	r2, [r4, #16]
 800f25e:	f003 0306 	and.w	r3, r3, #6
 800f262:	2b04      	cmp	r3, #4
 800f264:	bf02      	ittt	eq
 800f266:	68e5      	ldreq	r5, [r4, #12]
 800f268:	6833      	ldreq	r3, [r6, #0]
 800f26a:	1aed      	subeq	r5, r5, r3
 800f26c:	68a3      	ldr	r3, [r4, #8]
 800f26e:	bf0c      	ite	eq
 800f270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f274:	2500      	movne	r5, #0
 800f276:	4293      	cmp	r3, r2
 800f278:	bfc4      	itt	gt
 800f27a:	1a9b      	subgt	r3, r3, r2
 800f27c:	18ed      	addgt	r5, r5, r3
 800f27e:	2600      	movs	r6, #0
 800f280:	341a      	adds	r4, #26
 800f282:	42b5      	cmp	r5, r6
 800f284:	d11a      	bne.n	800f2bc <_printf_common+0xc8>
 800f286:	2000      	movs	r0, #0
 800f288:	e008      	b.n	800f29c <_printf_common+0xa8>
 800f28a:	2301      	movs	r3, #1
 800f28c:	4652      	mov	r2, sl
 800f28e:	4649      	mov	r1, r9
 800f290:	4638      	mov	r0, r7
 800f292:	47c0      	blx	r8
 800f294:	3001      	adds	r0, #1
 800f296:	d103      	bne.n	800f2a0 <_printf_common+0xac>
 800f298:	f04f 30ff 	mov.w	r0, #4294967295
 800f29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2a0:	3501      	adds	r5, #1
 800f2a2:	e7c6      	b.n	800f232 <_printf_common+0x3e>
 800f2a4:	18e1      	adds	r1, r4, r3
 800f2a6:	1c5a      	adds	r2, r3, #1
 800f2a8:	2030      	movs	r0, #48	; 0x30
 800f2aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f2ae:	4422      	add	r2, r4
 800f2b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f2b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f2b8:	3302      	adds	r3, #2
 800f2ba:	e7c7      	b.n	800f24c <_printf_common+0x58>
 800f2bc:	2301      	movs	r3, #1
 800f2be:	4622      	mov	r2, r4
 800f2c0:	4649      	mov	r1, r9
 800f2c2:	4638      	mov	r0, r7
 800f2c4:	47c0      	blx	r8
 800f2c6:	3001      	adds	r0, #1
 800f2c8:	d0e6      	beq.n	800f298 <_printf_common+0xa4>
 800f2ca:	3601      	adds	r6, #1
 800f2cc:	e7d9      	b.n	800f282 <_printf_common+0x8e>
	...

0800f2d0 <_printf_i>:
 800f2d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f2d4:	7e0f      	ldrb	r7, [r1, #24]
 800f2d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f2d8:	2f78      	cmp	r7, #120	; 0x78
 800f2da:	4691      	mov	r9, r2
 800f2dc:	4680      	mov	r8, r0
 800f2de:	460c      	mov	r4, r1
 800f2e0:	469a      	mov	sl, r3
 800f2e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f2e6:	d807      	bhi.n	800f2f8 <_printf_i+0x28>
 800f2e8:	2f62      	cmp	r7, #98	; 0x62
 800f2ea:	d80a      	bhi.n	800f302 <_printf_i+0x32>
 800f2ec:	2f00      	cmp	r7, #0
 800f2ee:	f000 80d4 	beq.w	800f49a <_printf_i+0x1ca>
 800f2f2:	2f58      	cmp	r7, #88	; 0x58
 800f2f4:	f000 80c0 	beq.w	800f478 <_printf_i+0x1a8>
 800f2f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f2fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f300:	e03a      	b.n	800f378 <_printf_i+0xa8>
 800f302:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f306:	2b15      	cmp	r3, #21
 800f308:	d8f6      	bhi.n	800f2f8 <_printf_i+0x28>
 800f30a:	a101      	add	r1, pc, #4	; (adr r1, 800f310 <_printf_i+0x40>)
 800f30c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f310:	0800f369 	.word	0x0800f369
 800f314:	0800f37d 	.word	0x0800f37d
 800f318:	0800f2f9 	.word	0x0800f2f9
 800f31c:	0800f2f9 	.word	0x0800f2f9
 800f320:	0800f2f9 	.word	0x0800f2f9
 800f324:	0800f2f9 	.word	0x0800f2f9
 800f328:	0800f37d 	.word	0x0800f37d
 800f32c:	0800f2f9 	.word	0x0800f2f9
 800f330:	0800f2f9 	.word	0x0800f2f9
 800f334:	0800f2f9 	.word	0x0800f2f9
 800f338:	0800f2f9 	.word	0x0800f2f9
 800f33c:	0800f481 	.word	0x0800f481
 800f340:	0800f3a9 	.word	0x0800f3a9
 800f344:	0800f43b 	.word	0x0800f43b
 800f348:	0800f2f9 	.word	0x0800f2f9
 800f34c:	0800f2f9 	.word	0x0800f2f9
 800f350:	0800f4a3 	.word	0x0800f4a3
 800f354:	0800f2f9 	.word	0x0800f2f9
 800f358:	0800f3a9 	.word	0x0800f3a9
 800f35c:	0800f2f9 	.word	0x0800f2f9
 800f360:	0800f2f9 	.word	0x0800f2f9
 800f364:	0800f443 	.word	0x0800f443
 800f368:	682b      	ldr	r3, [r5, #0]
 800f36a:	1d1a      	adds	r2, r3, #4
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	602a      	str	r2, [r5, #0]
 800f370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f374:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f378:	2301      	movs	r3, #1
 800f37a:	e09f      	b.n	800f4bc <_printf_i+0x1ec>
 800f37c:	6820      	ldr	r0, [r4, #0]
 800f37e:	682b      	ldr	r3, [r5, #0]
 800f380:	0607      	lsls	r7, r0, #24
 800f382:	f103 0104 	add.w	r1, r3, #4
 800f386:	6029      	str	r1, [r5, #0]
 800f388:	d501      	bpl.n	800f38e <_printf_i+0xbe>
 800f38a:	681e      	ldr	r6, [r3, #0]
 800f38c:	e003      	b.n	800f396 <_printf_i+0xc6>
 800f38e:	0646      	lsls	r6, r0, #25
 800f390:	d5fb      	bpl.n	800f38a <_printf_i+0xba>
 800f392:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f396:	2e00      	cmp	r6, #0
 800f398:	da03      	bge.n	800f3a2 <_printf_i+0xd2>
 800f39a:	232d      	movs	r3, #45	; 0x2d
 800f39c:	4276      	negs	r6, r6
 800f39e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f3a2:	485a      	ldr	r0, [pc, #360]	; (800f50c <_printf_i+0x23c>)
 800f3a4:	230a      	movs	r3, #10
 800f3a6:	e012      	b.n	800f3ce <_printf_i+0xfe>
 800f3a8:	682b      	ldr	r3, [r5, #0]
 800f3aa:	6820      	ldr	r0, [r4, #0]
 800f3ac:	1d19      	adds	r1, r3, #4
 800f3ae:	6029      	str	r1, [r5, #0]
 800f3b0:	0605      	lsls	r5, r0, #24
 800f3b2:	d501      	bpl.n	800f3b8 <_printf_i+0xe8>
 800f3b4:	681e      	ldr	r6, [r3, #0]
 800f3b6:	e002      	b.n	800f3be <_printf_i+0xee>
 800f3b8:	0641      	lsls	r1, r0, #25
 800f3ba:	d5fb      	bpl.n	800f3b4 <_printf_i+0xe4>
 800f3bc:	881e      	ldrh	r6, [r3, #0]
 800f3be:	4853      	ldr	r0, [pc, #332]	; (800f50c <_printf_i+0x23c>)
 800f3c0:	2f6f      	cmp	r7, #111	; 0x6f
 800f3c2:	bf0c      	ite	eq
 800f3c4:	2308      	moveq	r3, #8
 800f3c6:	230a      	movne	r3, #10
 800f3c8:	2100      	movs	r1, #0
 800f3ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f3ce:	6865      	ldr	r5, [r4, #4]
 800f3d0:	60a5      	str	r5, [r4, #8]
 800f3d2:	2d00      	cmp	r5, #0
 800f3d4:	bfa2      	ittt	ge
 800f3d6:	6821      	ldrge	r1, [r4, #0]
 800f3d8:	f021 0104 	bicge.w	r1, r1, #4
 800f3dc:	6021      	strge	r1, [r4, #0]
 800f3de:	b90e      	cbnz	r6, 800f3e4 <_printf_i+0x114>
 800f3e0:	2d00      	cmp	r5, #0
 800f3e2:	d04b      	beq.n	800f47c <_printf_i+0x1ac>
 800f3e4:	4615      	mov	r5, r2
 800f3e6:	fbb6 f1f3 	udiv	r1, r6, r3
 800f3ea:	fb03 6711 	mls	r7, r3, r1, r6
 800f3ee:	5dc7      	ldrb	r7, [r0, r7]
 800f3f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f3f4:	4637      	mov	r7, r6
 800f3f6:	42bb      	cmp	r3, r7
 800f3f8:	460e      	mov	r6, r1
 800f3fa:	d9f4      	bls.n	800f3e6 <_printf_i+0x116>
 800f3fc:	2b08      	cmp	r3, #8
 800f3fe:	d10b      	bne.n	800f418 <_printf_i+0x148>
 800f400:	6823      	ldr	r3, [r4, #0]
 800f402:	07de      	lsls	r6, r3, #31
 800f404:	d508      	bpl.n	800f418 <_printf_i+0x148>
 800f406:	6923      	ldr	r3, [r4, #16]
 800f408:	6861      	ldr	r1, [r4, #4]
 800f40a:	4299      	cmp	r1, r3
 800f40c:	bfde      	ittt	le
 800f40e:	2330      	movle	r3, #48	; 0x30
 800f410:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f414:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f418:	1b52      	subs	r2, r2, r5
 800f41a:	6122      	str	r2, [r4, #16]
 800f41c:	f8cd a000 	str.w	sl, [sp]
 800f420:	464b      	mov	r3, r9
 800f422:	aa03      	add	r2, sp, #12
 800f424:	4621      	mov	r1, r4
 800f426:	4640      	mov	r0, r8
 800f428:	f7ff fee4 	bl	800f1f4 <_printf_common>
 800f42c:	3001      	adds	r0, #1
 800f42e:	d14a      	bne.n	800f4c6 <_printf_i+0x1f6>
 800f430:	f04f 30ff 	mov.w	r0, #4294967295
 800f434:	b004      	add	sp, #16
 800f436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f43a:	6823      	ldr	r3, [r4, #0]
 800f43c:	f043 0320 	orr.w	r3, r3, #32
 800f440:	6023      	str	r3, [r4, #0]
 800f442:	4833      	ldr	r0, [pc, #204]	; (800f510 <_printf_i+0x240>)
 800f444:	2778      	movs	r7, #120	; 0x78
 800f446:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f44a:	6823      	ldr	r3, [r4, #0]
 800f44c:	6829      	ldr	r1, [r5, #0]
 800f44e:	061f      	lsls	r7, r3, #24
 800f450:	f851 6b04 	ldr.w	r6, [r1], #4
 800f454:	d402      	bmi.n	800f45c <_printf_i+0x18c>
 800f456:	065f      	lsls	r7, r3, #25
 800f458:	bf48      	it	mi
 800f45a:	b2b6      	uxthmi	r6, r6
 800f45c:	07df      	lsls	r7, r3, #31
 800f45e:	bf48      	it	mi
 800f460:	f043 0320 	orrmi.w	r3, r3, #32
 800f464:	6029      	str	r1, [r5, #0]
 800f466:	bf48      	it	mi
 800f468:	6023      	strmi	r3, [r4, #0]
 800f46a:	b91e      	cbnz	r6, 800f474 <_printf_i+0x1a4>
 800f46c:	6823      	ldr	r3, [r4, #0]
 800f46e:	f023 0320 	bic.w	r3, r3, #32
 800f472:	6023      	str	r3, [r4, #0]
 800f474:	2310      	movs	r3, #16
 800f476:	e7a7      	b.n	800f3c8 <_printf_i+0xf8>
 800f478:	4824      	ldr	r0, [pc, #144]	; (800f50c <_printf_i+0x23c>)
 800f47a:	e7e4      	b.n	800f446 <_printf_i+0x176>
 800f47c:	4615      	mov	r5, r2
 800f47e:	e7bd      	b.n	800f3fc <_printf_i+0x12c>
 800f480:	682b      	ldr	r3, [r5, #0]
 800f482:	6826      	ldr	r6, [r4, #0]
 800f484:	6961      	ldr	r1, [r4, #20]
 800f486:	1d18      	adds	r0, r3, #4
 800f488:	6028      	str	r0, [r5, #0]
 800f48a:	0635      	lsls	r5, r6, #24
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	d501      	bpl.n	800f494 <_printf_i+0x1c4>
 800f490:	6019      	str	r1, [r3, #0]
 800f492:	e002      	b.n	800f49a <_printf_i+0x1ca>
 800f494:	0670      	lsls	r0, r6, #25
 800f496:	d5fb      	bpl.n	800f490 <_printf_i+0x1c0>
 800f498:	8019      	strh	r1, [r3, #0]
 800f49a:	2300      	movs	r3, #0
 800f49c:	6123      	str	r3, [r4, #16]
 800f49e:	4615      	mov	r5, r2
 800f4a0:	e7bc      	b.n	800f41c <_printf_i+0x14c>
 800f4a2:	682b      	ldr	r3, [r5, #0]
 800f4a4:	1d1a      	adds	r2, r3, #4
 800f4a6:	602a      	str	r2, [r5, #0]
 800f4a8:	681d      	ldr	r5, [r3, #0]
 800f4aa:	6862      	ldr	r2, [r4, #4]
 800f4ac:	2100      	movs	r1, #0
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	f7f0 fec6 	bl	8000240 <memchr>
 800f4b4:	b108      	cbz	r0, 800f4ba <_printf_i+0x1ea>
 800f4b6:	1b40      	subs	r0, r0, r5
 800f4b8:	6060      	str	r0, [r4, #4]
 800f4ba:	6863      	ldr	r3, [r4, #4]
 800f4bc:	6123      	str	r3, [r4, #16]
 800f4be:	2300      	movs	r3, #0
 800f4c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4c4:	e7aa      	b.n	800f41c <_printf_i+0x14c>
 800f4c6:	6923      	ldr	r3, [r4, #16]
 800f4c8:	462a      	mov	r2, r5
 800f4ca:	4649      	mov	r1, r9
 800f4cc:	4640      	mov	r0, r8
 800f4ce:	47d0      	blx	sl
 800f4d0:	3001      	adds	r0, #1
 800f4d2:	d0ad      	beq.n	800f430 <_printf_i+0x160>
 800f4d4:	6823      	ldr	r3, [r4, #0]
 800f4d6:	079b      	lsls	r3, r3, #30
 800f4d8:	d413      	bmi.n	800f502 <_printf_i+0x232>
 800f4da:	68e0      	ldr	r0, [r4, #12]
 800f4dc:	9b03      	ldr	r3, [sp, #12]
 800f4de:	4298      	cmp	r0, r3
 800f4e0:	bfb8      	it	lt
 800f4e2:	4618      	movlt	r0, r3
 800f4e4:	e7a6      	b.n	800f434 <_printf_i+0x164>
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	4632      	mov	r2, r6
 800f4ea:	4649      	mov	r1, r9
 800f4ec:	4640      	mov	r0, r8
 800f4ee:	47d0      	blx	sl
 800f4f0:	3001      	adds	r0, #1
 800f4f2:	d09d      	beq.n	800f430 <_printf_i+0x160>
 800f4f4:	3501      	adds	r5, #1
 800f4f6:	68e3      	ldr	r3, [r4, #12]
 800f4f8:	9903      	ldr	r1, [sp, #12]
 800f4fa:	1a5b      	subs	r3, r3, r1
 800f4fc:	42ab      	cmp	r3, r5
 800f4fe:	dcf2      	bgt.n	800f4e6 <_printf_i+0x216>
 800f500:	e7eb      	b.n	800f4da <_printf_i+0x20a>
 800f502:	2500      	movs	r5, #0
 800f504:	f104 0619 	add.w	r6, r4, #25
 800f508:	e7f5      	b.n	800f4f6 <_printf_i+0x226>
 800f50a:	bf00      	nop
 800f50c:	08012c0b 	.word	0x08012c0b
 800f510:	08012c1c 	.word	0x08012c1c

0800f514 <std>:
 800f514:	2300      	movs	r3, #0
 800f516:	b510      	push	{r4, lr}
 800f518:	4604      	mov	r4, r0
 800f51a:	e9c0 3300 	strd	r3, r3, [r0]
 800f51e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f522:	6083      	str	r3, [r0, #8]
 800f524:	8181      	strh	r1, [r0, #12]
 800f526:	6643      	str	r3, [r0, #100]	; 0x64
 800f528:	81c2      	strh	r2, [r0, #14]
 800f52a:	6183      	str	r3, [r0, #24]
 800f52c:	4619      	mov	r1, r3
 800f52e:	2208      	movs	r2, #8
 800f530:	305c      	adds	r0, #92	; 0x5c
 800f532:	f000 f914 	bl	800f75e <memset>
 800f536:	4b0d      	ldr	r3, [pc, #52]	; (800f56c <std+0x58>)
 800f538:	6263      	str	r3, [r4, #36]	; 0x24
 800f53a:	4b0d      	ldr	r3, [pc, #52]	; (800f570 <std+0x5c>)
 800f53c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f53e:	4b0d      	ldr	r3, [pc, #52]	; (800f574 <std+0x60>)
 800f540:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f542:	4b0d      	ldr	r3, [pc, #52]	; (800f578 <std+0x64>)
 800f544:	6323      	str	r3, [r4, #48]	; 0x30
 800f546:	4b0d      	ldr	r3, [pc, #52]	; (800f57c <std+0x68>)
 800f548:	6224      	str	r4, [r4, #32]
 800f54a:	429c      	cmp	r4, r3
 800f54c:	d006      	beq.n	800f55c <std+0x48>
 800f54e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f552:	4294      	cmp	r4, r2
 800f554:	d002      	beq.n	800f55c <std+0x48>
 800f556:	33d0      	adds	r3, #208	; 0xd0
 800f558:	429c      	cmp	r4, r3
 800f55a:	d105      	bne.n	800f568 <std+0x54>
 800f55c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f564:	f000 b9e6 	b.w	800f934 <__retarget_lock_init_recursive>
 800f568:	bd10      	pop	{r4, pc}
 800f56a:	bf00      	nop
 800f56c:	0800f6d9 	.word	0x0800f6d9
 800f570:	0800f6fb 	.word	0x0800f6fb
 800f574:	0800f733 	.word	0x0800f733
 800f578:	0800f757 	.word	0x0800f757
 800f57c:	20005174 	.word	0x20005174

0800f580 <stdio_exit_handler>:
 800f580:	4a02      	ldr	r2, [pc, #8]	; (800f58c <stdio_exit_handler+0xc>)
 800f582:	4903      	ldr	r1, [pc, #12]	; (800f590 <stdio_exit_handler+0x10>)
 800f584:	4803      	ldr	r0, [pc, #12]	; (800f594 <stdio_exit_handler+0x14>)
 800f586:	f000 b869 	b.w	800f65c <_fwalk_sglue>
 800f58a:	bf00      	nop
 800f58c:	20000190 	.word	0x20000190
 800f590:	08011341 	.word	0x08011341
 800f594:	2000019c 	.word	0x2000019c

0800f598 <cleanup_stdio>:
 800f598:	6841      	ldr	r1, [r0, #4]
 800f59a:	4b0c      	ldr	r3, [pc, #48]	; (800f5cc <cleanup_stdio+0x34>)
 800f59c:	4299      	cmp	r1, r3
 800f59e:	b510      	push	{r4, lr}
 800f5a0:	4604      	mov	r4, r0
 800f5a2:	d001      	beq.n	800f5a8 <cleanup_stdio+0x10>
 800f5a4:	f001 fecc 	bl	8011340 <_fflush_r>
 800f5a8:	68a1      	ldr	r1, [r4, #8]
 800f5aa:	4b09      	ldr	r3, [pc, #36]	; (800f5d0 <cleanup_stdio+0x38>)
 800f5ac:	4299      	cmp	r1, r3
 800f5ae:	d002      	beq.n	800f5b6 <cleanup_stdio+0x1e>
 800f5b0:	4620      	mov	r0, r4
 800f5b2:	f001 fec5 	bl	8011340 <_fflush_r>
 800f5b6:	68e1      	ldr	r1, [r4, #12]
 800f5b8:	4b06      	ldr	r3, [pc, #24]	; (800f5d4 <cleanup_stdio+0x3c>)
 800f5ba:	4299      	cmp	r1, r3
 800f5bc:	d004      	beq.n	800f5c8 <cleanup_stdio+0x30>
 800f5be:	4620      	mov	r0, r4
 800f5c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5c4:	f001 bebc 	b.w	8011340 <_fflush_r>
 800f5c8:	bd10      	pop	{r4, pc}
 800f5ca:	bf00      	nop
 800f5cc:	20005174 	.word	0x20005174
 800f5d0:	200051dc 	.word	0x200051dc
 800f5d4:	20005244 	.word	0x20005244

0800f5d8 <global_stdio_init.part.0>:
 800f5d8:	b510      	push	{r4, lr}
 800f5da:	4b0b      	ldr	r3, [pc, #44]	; (800f608 <global_stdio_init.part.0+0x30>)
 800f5dc:	4c0b      	ldr	r4, [pc, #44]	; (800f60c <global_stdio_init.part.0+0x34>)
 800f5de:	4a0c      	ldr	r2, [pc, #48]	; (800f610 <global_stdio_init.part.0+0x38>)
 800f5e0:	601a      	str	r2, [r3, #0]
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	2104      	movs	r1, #4
 800f5e8:	f7ff ff94 	bl	800f514 <std>
 800f5ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f5f0:	2201      	movs	r2, #1
 800f5f2:	2109      	movs	r1, #9
 800f5f4:	f7ff ff8e 	bl	800f514 <std>
 800f5f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f5fc:	2202      	movs	r2, #2
 800f5fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f602:	2112      	movs	r1, #18
 800f604:	f7ff bf86 	b.w	800f514 <std>
 800f608:	200052ac 	.word	0x200052ac
 800f60c:	20005174 	.word	0x20005174
 800f610:	0800f581 	.word	0x0800f581

0800f614 <__sfp_lock_acquire>:
 800f614:	4801      	ldr	r0, [pc, #4]	; (800f61c <__sfp_lock_acquire+0x8>)
 800f616:	f000 b98e 	b.w	800f936 <__retarget_lock_acquire_recursive>
 800f61a:	bf00      	nop
 800f61c:	200052b5 	.word	0x200052b5

0800f620 <__sfp_lock_release>:
 800f620:	4801      	ldr	r0, [pc, #4]	; (800f628 <__sfp_lock_release+0x8>)
 800f622:	f000 b989 	b.w	800f938 <__retarget_lock_release_recursive>
 800f626:	bf00      	nop
 800f628:	200052b5 	.word	0x200052b5

0800f62c <__sinit>:
 800f62c:	b510      	push	{r4, lr}
 800f62e:	4604      	mov	r4, r0
 800f630:	f7ff fff0 	bl	800f614 <__sfp_lock_acquire>
 800f634:	6a23      	ldr	r3, [r4, #32]
 800f636:	b11b      	cbz	r3, 800f640 <__sinit+0x14>
 800f638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f63c:	f7ff bff0 	b.w	800f620 <__sfp_lock_release>
 800f640:	4b04      	ldr	r3, [pc, #16]	; (800f654 <__sinit+0x28>)
 800f642:	6223      	str	r3, [r4, #32]
 800f644:	4b04      	ldr	r3, [pc, #16]	; (800f658 <__sinit+0x2c>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d1f5      	bne.n	800f638 <__sinit+0xc>
 800f64c:	f7ff ffc4 	bl	800f5d8 <global_stdio_init.part.0>
 800f650:	e7f2      	b.n	800f638 <__sinit+0xc>
 800f652:	bf00      	nop
 800f654:	0800f599 	.word	0x0800f599
 800f658:	200052ac 	.word	0x200052ac

0800f65c <_fwalk_sglue>:
 800f65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f660:	4607      	mov	r7, r0
 800f662:	4688      	mov	r8, r1
 800f664:	4614      	mov	r4, r2
 800f666:	2600      	movs	r6, #0
 800f668:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f66c:	f1b9 0901 	subs.w	r9, r9, #1
 800f670:	d505      	bpl.n	800f67e <_fwalk_sglue+0x22>
 800f672:	6824      	ldr	r4, [r4, #0]
 800f674:	2c00      	cmp	r4, #0
 800f676:	d1f7      	bne.n	800f668 <_fwalk_sglue+0xc>
 800f678:	4630      	mov	r0, r6
 800f67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f67e:	89ab      	ldrh	r3, [r5, #12]
 800f680:	2b01      	cmp	r3, #1
 800f682:	d907      	bls.n	800f694 <_fwalk_sglue+0x38>
 800f684:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f688:	3301      	adds	r3, #1
 800f68a:	d003      	beq.n	800f694 <_fwalk_sglue+0x38>
 800f68c:	4629      	mov	r1, r5
 800f68e:	4638      	mov	r0, r7
 800f690:	47c0      	blx	r8
 800f692:	4306      	orrs	r6, r0
 800f694:	3568      	adds	r5, #104	; 0x68
 800f696:	e7e9      	b.n	800f66c <_fwalk_sglue+0x10>

0800f698 <siprintf>:
 800f698:	b40e      	push	{r1, r2, r3}
 800f69a:	b500      	push	{lr}
 800f69c:	b09c      	sub	sp, #112	; 0x70
 800f69e:	ab1d      	add	r3, sp, #116	; 0x74
 800f6a0:	9002      	str	r0, [sp, #8]
 800f6a2:	9006      	str	r0, [sp, #24]
 800f6a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f6a8:	4809      	ldr	r0, [pc, #36]	; (800f6d0 <siprintf+0x38>)
 800f6aa:	9107      	str	r1, [sp, #28]
 800f6ac:	9104      	str	r1, [sp, #16]
 800f6ae:	4909      	ldr	r1, [pc, #36]	; (800f6d4 <siprintf+0x3c>)
 800f6b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6b4:	9105      	str	r1, [sp, #20]
 800f6b6:	6800      	ldr	r0, [r0, #0]
 800f6b8:	9301      	str	r3, [sp, #4]
 800f6ba:	a902      	add	r1, sp, #8
 800f6bc:	f001 fcbc 	bl	8011038 <_svfiprintf_r>
 800f6c0:	9b02      	ldr	r3, [sp, #8]
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	701a      	strb	r2, [r3, #0]
 800f6c6:	b01c      	add	sp, #112	; 0x70
 800f6c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6cc:	b003      	add	sp, #12
 800f6ce:	4770      	bx	lr
 800f6d0:	200001e8 	.word	0x200001e8
 800f6d4:	ffff0208 	.word	0xffff0208

0800f6d8 <__sread>:
 800f6d8:	b510      	push	{r4, lr}
 800f6da:	460c      	mov	r4, r1
 800f6dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6e0:	f000 f8da 	bl	800f898 <_read_r>
 800f6e4:	2800      	cmp	r0, #0
 800f6e6:	bfab      	itete	ge
 800f6e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f6ea:	89a3      	ldrhlt	r3, [r4, #12]
 800f6ec:	181b      	addge	r3, r3, r0
 800f6ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f6f2:	bfac      	ite	ge
 800f6f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f6f6:	81a3      	strhlt	r3, [r4, #12]
 800f6f8:	bd10      	pop	{r4, pc}

0800f6fa <__swrite>:
 800f6fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6fe:	461f      	mov	r7, r3
 800f700:	898b      	ldrh	r3, [r1, #12]
 800f702:	05db      	lsls	r3, r3, #23
 800f704:	4605      	mov	r5, r0
 800f706:	460c      	mov	r4, r1
 800f708:	4616      	mov	r6, r2
 800f70a:	d505      	bpl.n	800f718 <__swrite+0x1e>
 800f70c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f710:	2302      	movs	r3, #2
 800f712:	2200      	movs	r2, #0
 800f714:	f000 f8ae 	bl	800f874 <_lseek_r>
 800f718:	89a3      	ldrh	r3, [r4, #12]
 800f71a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f71e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f722:	81a3      	strh	r3, [r4, #12]
 800f724:	4632      	mov	r2, r6
 800f726:	463b      	mov	r3, r7
 800f728:	4628      	mov	r0, r5
 800f72a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f72e:	f000 b8c5 	b.w	800f8bc <_write_r>

0800f732 <__sseek>:
 800f732:	b510      	push	{r4, lr}
 800f734:	460c      	mov	r4, r1
 800f736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f73a:	f000 f89b 	bl	800f874 <_lseek_r>
 800f73e:	1c43      	adds	r3, r0, #1
 800f740:	89a3      	ldrh	r3, [r4, #12]
 800f742:	bf15      	itete	ne
 800f744:	6560      	strne	r0, [r4, #84]	; 0x54
 800f746:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f74a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f74e:	81a3      	strheq	r3, [r4, #12]
 800f750:	bf18      	it	ne
 800f752:	81a3      	strhne	r3, [r4, #12]
 800f754:	bd10      	pop	{r4, pc}

0800f756 <__sclose>:
 800f756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f75a:	f000 b87b 	b.w	800f854 <_close_r>

0800f75e <memset>:
 800f75e:	4402      	add	r2, r0
 800f760:	4603      	mov	r3, r0
 800f762:	4293      	cmp	r3, r2
 800f764:	d100      	bne.n	800f768 <memset+0xa>
 800f766:	4770      	bx	lr
 800f768:	f803 1b01 	strb.w	r1, [r3], #1
 800f76c:	e7f9      	b.n	800f762 <memset+0x4>

0800f76e <strncpy>:
 800f76e:	b510      	push	{r4, lr}
 800f770:	3901      	subs	r1, #1
 800f772:	4603      	mov	r3, r0
 800f774:	b132      	cbz	r2, 800f784 <strncpy+0x16>
 800f776:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f77a:	f803 4b01 	strb.w	r4, [r3], #1
 800f77e:	3a01      	subs	r2, #1
 800f780:	2c00      	cmp	r4, #0
 800f782:	d1f7      	bne.n	800f774 <strncpy+0x6>
 800f784:	441a      	add	r2, r3
 800f786:	2100      	movs	r1, #0
 800f788:	4293      	cmp	r3, r2
 800f78a:	d100      	bne.n	800f78e <strncpy+0x20>
 800f78c:	bd10      	pop	{r4, pc}
 800f78e:	f803 1b01 	strb.w	r1, [r3], #1
 800f792:	e7f9      	b.n	800f788 <strncpy+0x1a>

0800f794 <strtok>:
 800f794:	4b16      	ldr	r3, [pc, #88]	; (800f7f0 <strtok+0x5c>)
 800f796:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f798:	681e      	ldr	r6, [r3, #0]
 800f79a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800f79c:	4605      	mov	r5, r0
 800f79e:	b9fc      	cbnz	r4, 800f7e0 <strtok+0x4c>
 800f7a0:	2050      	movs	r0, #80	; 0x50
 800f7a2:	9101      	str	r1, [sp, #4]
 800f7a4:	f000 ffbe 	bl	8010724 <malloc>
 800f7a8:	9901      	ldr	r1, [sp, #4]
 800f7aa:	6470      	str	r0, [r6, #68]	; 0x44
 800f7ac:	4602      	mov	r2, r0
 800f7ae:	b920      	cbnz	r0, 800f7ba <strtok+0x26>
 800f7b0:	4b10      	ldr	r3, [pc, #64]	; (800f7f4 <strtok+0x60>)
 800f7b2:	4811      	ldr	r0, [pc, #68]	; (800f7f8 <strtok+0x64>)
 800f7b4:	215b      	movs	r1, #91	; 0x5b
 800f7b6:	f000 f8cf 	bl	800f958 <__assert_func>
 800f7ba:	e9c0 4400 	strd	r4, r4, [r0]
 800f7be:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f7c2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f7c6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f7ca:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f7ce:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f7d2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f7d6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f7da:	6184      	str	r4, [r0, #24]
 800f7dc:	7704      	strb	r4, [r0, #28]
 800f7de:	6244      	str	r4, [r0, #36]	; 0x24
 800f7e0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	4628      	mov	r0, r5
 800f7e6:	b002      	add	sp, #8
 800f7e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7ec:	f000 b806 	b.w	800f7fc <__strtok_r>
 800f7f0:	200001e8 	.word	0x200001e8
 800f7f4:	08012c2d 	.word	0x08012c2d
 800f7f8:	08012c44 	.word	0x08012c44

0800f7fc <__strtok_r>:
 800f7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7fe:	b908      	cbnz	r0, 800f804 <__strtok_r+0x8>
 800f800:	6810      	ldr	r0, [r2, #0]
 800f802:	b188      	cbz	r0, 800f828 <__strtok_r+0x2c>
 800f804:	4604      	mov	r4, r0
 800f806:	4620      	mov	r0, r4
 800f808:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f80c:	460f      	mov	r7, r1
 800f80e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f812:	b91e      	cbnz	r6, 800f81c <__strtok_r+0x20>
 800f814:	b965      	cbnz	r5, 800f830 <__strtok_r+0x34>
 800f816:	6015      	str	r5, [r2, #0]
 800f818:	4628      	mov	r0, r5
 800f81a:	e005      	b.n	800f828 <__strtok_r+0x2c>
 800f81c:	42b5      	cmp	r5, r6
 800f81e:	d1f6      	bne.n	800f80e <__strtok_r+0x12>
 800f820:	2b00      	cmp	r3, #0
 800f822:	d1f0      	bne.n	800f806 <__strtok_r+0xa>
 800f824:	6014      	str	r4, [r2, #0]
 800f826:	7003      	strb	r3, [r0, #0]
 800f828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f82a:	461c      	mov	r4, r3
 800f82c:	e00c      	b.n	800f848 <__strtok_r+0x4c>
 800f82e:	b915      	cbnz	r5, 800f836 <__strtok_r+0x3a>
 800f830:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f834:	460e      	mov	r6, r1
 800f836:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f83a:	42ab      	cmp	r3, r5
 800f83c:	d1f7      	bne.n	800f82e <__strtok_r+0x32>
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d0f3      	beq.n	800f82a <__strtok_r+0x2e>
 800f842:	2300      	movs	r3, #0
 800f844:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f848:	6014      	str	r4, [r2, #0]
 800f84a:	e7ed      	b.n	800f828 <__strtok_r+0x2c>

0800f84c <_localeconv_r>:
 800f84c:	4800      	ldr	r0, [pc, #0]	; (800f850 <_localeconv_r+0x4>)
 800f84e:	4770      	bx	lr
 800f850:	200002dc 	.word	0x200002dc

0800f854 <_close_r>:
 800f854:	b538      	push	{r3, r4, r5, lr}
 800f856:	4d06      	ldr	r5, [pc, #24]	; (800f870 <_close_r+0x1c>)
 800f858:	2300      	movs	r3, #0
 800f85a:	4604      	mov	r4, r0
 800f85c:	4608      	mov	r0, r1
 800f85e:	602b      	str	r3, [r5, #0]
 800f860:	f7f3 f9cb 	bl	8002bfa <_close>
 800f864:	1c43      	adds	r3, r0, #1
 800f866:	d102      	bne.n	800f86e <_close_r+0x1a>
 800f868:	682b      	ldr	r3, [r5, #0]
 800f86a:	b103      	cbz	r3, 800f86e <_close_r+0x1a>
 800f86c:	6023      	str	r3, [r4, #0]
 800f86e:	bd38      	pop	{r3, r4, r5, pc}
 800f870:	200052b0 	.word	0x200052b0

0800f874 <_lseek_r>:
 800f874:	b538      	push	{r3, r4, r5, lr}
 800f876:	4d07      	ldr	r5, [pc, #28]	; (800f894 <_lseek_r+0x20>)
 800f878:	4604      	mov	r4, r0
 800f87a:	4608      	mov	r0, r1
 800f87c:	4611      	mov	r1, r2
 800f87e:	2200      	movs	r2, #0
 800f880:	602a      	str	r2, [r5, #0]
 800f882:	461a      	mov	r2, r3
 800f884:	f7f3 f9e0 	bl	8002c48 <_lseek>
 800f888:	1c43      	adds	r3, r0, #1
 800f88a:	d102      	bne.n	800f892 <_lseek_r+0x1e>
 800f88c:	682b      	ldr	r3, [r5, #0]
 800f88e:	b103      	cbz	r3, 800f892 <_lseek_r+0x1e>
 800f890:	6023      	str	r3, [r4, #0]
 800f892:	bd38      	pop	{r3, r4, r5, pc}
 800f894:	200052b0 	.word	0x200052b0

0800f898 <_read_r>:
 800f898:	b538      	push	{r3, r4, r5, lr}
 800f89a:	4d07      	ldr	r5, [pc, #28]	; (800f8b8 <_read_r+0x20>)
 800f89c:	4604      	mov	r4, r0
 800f89e:	4608      	mov	r0, r1
 800f8a0:	4611      	mov	r1, r2
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	602a      	str	r2, [r5, #0]
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	f7f3 f96e 	bl	8002b88 <_read>
 800f8ac:	1c43      	adds	r3, r0, #1
 800f8ae:	d102      	bne.n	800f8b6 <_read_r+0x1e>
 800f8b0:	682b      	ldr	r3, [r5, #0]
 800f8b2:	b103      	cbz	r3, 800f8b6 <_read_r+0x1e>
 800f8b4:	6023      	str	r3, [r4, #0]
 800f8b6:	bd38      	pop	{r3, r4, r5, pc}
 800f8b8:	200052b0 	.word	0x200052b0

0800f8bc <_write_r>:
 800f8bc:	b538      	push	{r3, r4, r5, lr}
 800f8be:	4d07      	ldr	r5, [pc, #28]	; (800f8dc <_write_r+0x20>)
 800f8c0:	4604      	mov	r4, r0
 800f8c2:	4608      	mov	r0, r1
 800f8c4:	4611      	mov	r1, r2
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	602a      	str	r2, [r5, #0]
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	f7f3 f979 	bl	8002bc2 <_write>
 800f8d0:	1c43      	adds	r3, r0, #1
 800f8d2:	d102      	bne.n	800f8da <_write_r+0x1e>
 800f8d4:	682b      	ldr	r3, [r5, #0]
 800f8d6:	b103      	cbz	r3, 800f8da <_write_r+0x1e>
 800f8d8:	6023      	str	r3, [r4, #0]
 800f8da:	bd38      	pop	{r3, r4, r5, pc}
 800f8dc:	200052b0 	.word	0x200052b0

0800f8e0 <__errno>:
 800f8e0:	4b01      	ldr	r3, [pc, #4]	; (800f8e8 <__errno+0x8>)
 800f8e2:	6818      	ldr	r0, [r3, #0]
 800f8e4:	4770      	bx	lr
 800f8e6:	bf00      	nop
 800f8e8:	200001e8 	.word	0x200001e8

0800f8ec <__libc_init_array>:
 800f8ec:	b570      	push	{r4, r5, r6, lr}
 800f8ee:	4d0d      	ldr	r5, [pc, #52]	; (800f924 <__libc_init_array+0x38>)
 800f8f0:	4c0d      	ldr	r4, [pc, #52]	; (800f928 <__libc_init_array+0x3c>)
 800f8f2:	1b64      	subs	r4, r4, r5
 800f8f4:	10a4      	asrs	r4, r4, #2
 800f8f6:	2600      	movs	r6, #0
 800f8f8:	42a6      	cmp	r6, r4
 800f8fa:	d109      	bne.n	800f910 <__libc_init_array+0x24>
 800f8fc:	4d0b      	ldr	r5, [pc, #44]	; (800f92c <__libc_init_array+0x40>)
 800f8fe:	4c0c      	ldr	r4, [pc, #48]	; (800f930 <__libc_init_array+0x44>)
 800f900:	f002 ffce 	bl	80128a0 <_init>
 800f904:	1b64      	subs	r4, r4, r5
 800f906:	10a4      	asrs	r4, r4, #2
 800f908:	2600      	movs	r6, #0
 800f90a:	42a6      	cmp	r6, r4
 800f90c:	d105      	bne.n	800f91a <__libc_init_array+0x2e>
 800f90e:	bd70      	pop	{r4, r5, r6, pc}
 800f910:	f855 3b04 	ldr.w	r3, [r5], #4
 800f914:	4798      	blx	r3
 800f916:	3601      	adds	r6, #1
 800f918:	e7ee      	b.n	800f8f8 <__libc_init_array+0xc>
 800f91a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f91e:	4798      	blx	r3
 800f920:	3601      	adds	r6, #1
 800f922:	e7f2      	b.n	800f90a <__libc_init_array+0x1e>
 800f924:	08012ef8 	.word	0x08012ef8
 800f928:	08012ef8 	.word	0x08012ef8
 800f92c:	08012ef8 	.word	0x08012ef8
 800f930:	08012efc 	.word	0x08012efc

0800f934 <__retarget_lock_init_recursive>:
 800f934:	4770      	bx	lr

0800f936 <__retarget_lock_acquire_recursive>:
 800f936:	4770      	bx	lr

0800f938 <__retarget_lock_release_recursive>:
 800f938:	4770      	bx	lr

0800f93a <memcpy>:
 800f93a:	440a      	add	r2, r1
 800f93c:	4291      	cmp	r1, r2
 800f93e:	f100 33ff 	add.w	r3, r0, #4294967295
 800f942:	d100      	bne.n	800f946 <memcpy+0xc>
 800f944:	4770      	bx	lr
 800f946:	b510      	push	{r4, lr}
 800f948:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f94c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f950:	4291      	cmp	r1, r2
 800f952:	d1f9      	bne.n	800f948 <memcpy+0xe>
 800f954:	bd10      	pop	{r4, pc}
	...

0800f958 <__assert_func>:
 800f958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f95a:	4614      	mov	r4, r2
 800f95c:	461a      	mov	r2, r3
 800f95e:	4b09      	ldr	r3, [pc, #36]	; (800f984 <__assert_func+0x2c>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	4605      	mov	r5, r0
 800f964:	68d8      	ldr	r0, [r3, #12]
 800f966:	b14c      	cbz	r4, 800f97c <__assert_func+0x24>
 800f968:	4b07      	ldr	r3, [pc, #28]	; (800f988 <__assert_func+0x30>)
 800f96a:	9100      	str	r1, [sp, #0]
 800f96c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f970:	4906      	ldr	r1, [pc, #24]	; (800f98c <__assert_func+0x34>)
 800f972:	462b      	mov	r3, r5
 800f974:	f001 fd0c 	bl	8011390 <fiprintf>
 800f978:	f001 fd46 	bl	8011408 <abort>
 800f97c:	4b04      	ldr	r3, [pc, #16]	; (800f990 <__assert_func+0x38>)
 800f97e:	461c      	mov	r4, r3
 800f980:	e7f3      	b.n	800f96a <__assert_func+0x12>
 800f982:	bf00      	nop
 800f984:	200001e8 	.word	0x200001e8
 800f988:	08012c9e 	.word	0x08012c9e
 800f98c:	08012cab 	.word	0x08012cab
 800f990:	08012cd9 	.word	0x08012cd9

0800f994 <quorem>:
 800f994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f998:	6903      	ldr	r3, [r0, #16]
 800f99a:	690c      	ldr	r4, [r1, #16]
 800f99c:	42a3      	cmp	r3, r4
 800f99e:	4607      	mov	r7, r0
 800f9a0:	db7e      	blt.n	800faa0 <quorem+0x10c>
 800f9a2:	3c01      	subs	r4, #1
 800f9a4:	f101 0814 	add.w	r8, r1, #20
 800f9a8:	f100 0514 	add.w	r5, r0, #20
 800f9ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f9b0:	9301      	str	r3, [sp, #4]
 800f9b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f9b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f9ba:	3301      	adds	r3, #1
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f9c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f9c6:	fbb2 f6f3 	udiv	r6, r2, r3
 800f9ca:	d331      	bcc.n	800fa30 <quorem+0x9c>
 800f9cc:	f04f 0e00 	mov.w	lr, #0
 800f9d0:	4640      	mov	r0, r8
 800f9d2:	46ac      	mov	ip, r5
 800f9d4:	46f2      	mov	sl, lr
 800f9d6:	f850 2b04 	ldr.w	r2, [r0], #4
 800f9da:	b293      	uxth	r3, r2
 800f9dc:	fb06 e303 	mla	r3, r6, r3, lr
 800f9e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f9e4:	0c1a      	lsrs	r2, r3, #16
 800f9e6:	b29b      	uxth	r3, r3
 800f9e8:	ebaa 0303 	sub.w	r3, sl, r3
 800f9ec:	f8dc a000 	ldr.w	sl, [ip]
 800f9f0:	fa13 f38a 	uxtah	r3, r3, sl
 800f9f4:	fb06 220e 	mla	r2, r6, lr, r2
 800f9f8:	9300      	str	r3, [sp, #0]
 800f9fa:	9b00      	ldr	r3, [sp, #0]
 800f9fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fa00:	b292      	uxth	r2, r2
 800fa02:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fa06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fa0a:	f8bd 3000 	ldrh.w	r3, [sp]
 800fa0e:	4581      	cmp	r9, r0
 800fa10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa14:	f84c 3b04 	str.w	r3, [ip], #4
 800fa18:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fa1c:	d2db      	bcs.n	800f9d6 <quorem+0x42>
 800fa1e:	f855 300b 	ldr.w	r3, [r5, fp]
 800fa22:	b92b      	cbnz	r3, 800fa30 <quorem+0x9c>
 800fa24:	9b01      	ldr	r3, [sp, #4]
 800fa26:	3b04      	subs	r3, #4
 800fa28:	429d      	cmp	r5, r3
 800fa2a:	461a      	mov	r2, r3
 800fa2c:	d32c      	bcc.n	800fa88 <quorem+0xf4>
 800fa2e:	613c      	str	r4, [r7, #16]
 800fa30:	4638      	mov	r0, r7
 800fa32:	f001 f9a7 	bl	8010d84 <__mcmp>
 800fa36:	2800      	cmp	r0, #0
 800fa38:	db22      	blt.n	800fa80 <quorem+0xec>
 800fa3a:	3601      	adds	r6, #1
 800fa3c:	4629      	mov	r1, r5
 800fa3e:	2000      	movs	r0, #0
 800fa40:	f858 2b04 	ldr.w	r2, [r8], #4
 800fa44:	f8d1 c000 	ldr.w	ip, [r1]
 800fa48:	b293      	uxth	r3, r2
 800fa4a:	1ac3      	subs	r3, r0, r3
 800fa4c:	0c12      	lsrs	r2, r2, #16
 800fa4e:	fa13 f38c 	uxtah	r3, r3, ip
 800fa52:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800fa56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fa5a:	b29b      	uxth	r3, r3
 800fa5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa60:	45c1      	cmp	r9, r8
 800fa62:	f841 3b04 	str.w	r3, [r1], #4
 800fa66:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fa6a:	d2e9      	bcs.n	800fa40 <quorem+0xac>
 800fa6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa74:	b922      	cbnz	r2, 800fa80 <quorem+0xec>
 800fa76:	3b04      	subs	r3, #4
 800fa78:	429d      	cmp	r5, r3
 800fa7a:	461a      	mov	r2, r3
 800fa7c:	d30a      	bcc.n	800fa94 <quorem+0x100>
 800fa7e:	613c      	str	r4, [r7, #16]
 800fa80:	4630      	mov	r0, r6
 800fa82:	b003      	add	sp, #12
 800fa84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa88:	6812      	ldr	r2, [r2, #0]
 800fa8a:	3b04      	subs	r3, #4
 800fa8c:	2a00      	cmp	r2, #0
 800fa8e:	d1ce      	bne.n	800fa2e <quorem+0x9a>
 800fa90:	3c01      	subs	r4, #1
 800fa92:	e7c9      	b.n	800fa28 <quorem+0x94>
 800fa94:	6812      	ldr	r2, [r2, #0]
 800fa96:	3b04      	subs	r3, #4
 800fa98:	2a00      	cmp	r2, #0
 800fa9a:	d1f0      	bne.n	800fa7e <quorem+0xea>
 800fa9c:	3c01      	subs	r4, #1
 800fa9e:	e7eb      	b.n	800fa78 <quorem+0xe4>
 800faa0:	2000      	movs	r0, #0
 800faa2:	e7ee      	b.n	800fa82 <quorem+0xee>
 800faa4:	0000      	movs	r0, r0
	...

0800faa8 <_dtoa_r>:
 800faa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faac:	ed2d 8b04 	vpush	{d8-d9}
 800fab0:	69c5      	ldr	r5, [r0, #28]
 800fab2:	b093      	sub	sp, #76	; 0x4c
 800fab4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fab8:	ec57 6b10 	vmov	r6, r7, d0
 800fabc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fac0:	9107      	str	r1, [sp, #28]
 800fac2:	4604      	mov	r4, r0
 800fac4:	920a      	str	r2, [sp, #40]	; 0x28
 800fac6:	930d      	str	r3, [sp, #52]	; 0x34
 800fac8:	b975      	cbnz	r5, 800fae8 <_dtoa_r+0x40>
 800faca:	2010      	movs	r0, #16
 800facc:	f000 fe2a 	bl	8010724 <malloc>
 800fad0:	4602      	mov	r2, r0
 800fad2:	61e0      	str	r0, [r4, #28]
 800fad4:	b920      	cbnz	r0, 800fae0 <_dtoa_r+0x38>
 800fad6:	4bae      	ldr	r3, [pc, #696]	; (800fd90 <_dtoa_r+0x2e8>)
 800fad8:	21ef      	movs	r1, #239	; 0xef
 800fada:	48ae      	ldr	r0, [pc, #696]	; (800fd94 <_dtoa_r+0x2ec>)
 800fadc:	f7ff ff3c 	bl	800f958 <__assert_func>
 800fae0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fae4:	6005      	str	r5, [r0, #0]
 800fae6:	60c5      	str	r5, [r0, #12]
 800fae8:	69e3      	ldr	r3, [r4, #28]
 800faea:	6819      	ldr	r1, [r3, #0]
 800faec:	b151      	cbz	r1, 800fb04 <_dtoa_r+0x5c>
 800faee:	685a      	ldr	r2, [r3, #4]
 800faf0:	604a      	str	r2, [r1, #4]
 800faf2:	2301      	movs	r3, #1
 800faf4:	4093      	lsls	r3, r2
 800faf6:	608b      	str	r3, [r1, #8]
 800faf8:	4620      	mov	r0, r4
 800fafa:	f000 ff07 	bl	801090c <_Bfree>
 800fafe:	69e3      	ldr	r3, [r4, #28]
 800fb00:	2200      	movs	r2, #0
 800fb02:	601a      	str	r2, [r3, #0]
 800fb04:	1e3b      	subs	r3, r7, #0
 800fb06:	bfbb      	ittet	lt
 800fb08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fb0c:	9303      	strlt	r3, [sp, #12]
 800fb0e:	2300      	movge	r3, #0
 800fb10:	2201      	movlt	r2, #1
 800fb12:	bfac      	ite	ge
 800fb14:	f8c8 3000 	strge.w	r3, [r8]
 800fb18:	f8c8 2000 	strlt.w	r2, [r8]
 800fb1c:	4b9e      	ldr	r3, [pc, #632]	; (800fd98 <_dtoa_r+0x2f0>)
 800fb1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800fb22:	ea33 0308 	bics.w	r3, r3, r8
 800fb26:	d11b      	bne.n	800fb60 <_dtoa_r+0xb8>
 800fb28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fb2a:	f242 730f 	movw	r3, #9999	; 0x270f
 800fb2e:	6013      	str	r3, [r2, #0]
 800fb30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800fb34:	4333      	orrs	r3, r6
 800fb36:	f000 8593 	beq.w	8010660 <_dtoa_r+0xbb8>
 800fb3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb3c:	b963      	cbnz	r3, 800fb58 <_dtoa_r+0xb0>
 800fb3e:	4b97      	ldr	r3, [pc, #604]	; (800fd9c <_dtoa_r+0x2f4>)
 800fb40:	e027      	b.n	800fb92 <_dtoa_r+0xea>
 800fb42:	4b97      	ldr	r3, [pc, #604]	; (800fda0 <_dtoa_r+0x2f8>)
 800fb44:	9300      	str	r3, [sp, #0]
 800fb46:	3308      	adds	r3, #8
 800fb48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fb4a:	6013      	str	r3, [r2, #0]
 800fb4c:	9800      	ldr	r0, [sp, #0]
 800fb4e:	b013      	add	sp, #76	; 0x4c
 800fb50:	ecbd 8b04 	vpop	{d8-d9}
 800fb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb58:	4b90      	ldr	r3, [pc, #576]	; (800fd9c <_dtoa_r+0x2f4>)
 800fb5a:	9300      	str	r3, [sp, #0]
 800fb5c:	3303      	adds	r3, #3
 800fb5e:	e7f3      	b.n	800fb48 <_dtoa_r+0xa0>
 800fb60:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fb64:	2200      	movs	r2, #0
 800fb66:	ec51 0b17 	vmov	r0, r1, d7
 800fb6a:	eeb0 8a47 	vmov.f32	s16, s14
 800fb6e:	eef0 8a67 	vmov.f32	s17, s15
 800fb72:	2300      	movs	r3, #0
 800fb74:	f7f0 ffe0 	bl	8000b38 <__aeabi_dcmpeq>
 800fb78:	4681      	mov	r9, r0
 800fb7a:	b160      	cbz	r0, 800fb96 <_dtoa_r+0xee>
 800fb7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fb7e:	2301      	movs	r3, #1
 800fb80:	6013      	str	r3, [r2, #0]
 800fb82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	f000 8568 	beq.w	801065a <_dtoa_r+0xbb2>
 800fb8a:	4b86      	ldr	r3, [pc, #536]	; (800fda4 <_dtoa_r+0x2fc>)
 800fb8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fb8e:	6013      	str	r3, [r2, #0]
 800fb90:	3b01      	subs	r3, #1
 800fb92:	9300      	str	r3, [sp, #0]
 800fb94:	e7da      	b.n	800fb4c <_dtoa_r+0xa4>
 800fb96:	aa10      	add	r2, sp, #64	; 0x40
 800fb98:	a911      	add	r1, sp, #68	; 0x44
 800fb9a:	4620      	mov	r0, r4
 800fb9c:	eeb0 0a48 	vmov.f32	s0, s16
 800fba0:	eef0 0a68 	vmov.f32	s1, s17
 800fba4:	f001 f994 	bl	8010ed0 <__d2b>
 800fba8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fbac:	4682      	mov	sl, r0
 800fbae:	2d00      	cmp	r5, #0
 800fbb0:	d07f      	beq.n	800fcb2 <_dtoa_r+0x20a>
 800fbb2:	ee18 3a90 	vmov	r3, s17
 800fbb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fbba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fbbe:	ec51 0b18 	vmov	r0, r1, d8
 800fbc2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fbc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fbca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800fbce:	4619      	mov	r1, r3
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	4b75      	ldr	r3, [pc, #468]	; (800fda8 <_dtoa_r+0x300>)
 800fbd4:	f7f0 fb90 	bl	80002f8 <__aeabi_dsub>
 800fbd8:	a367      	add	r3, pc, #412	; (adr r3, 800fd78 <_dtoa_r+0x2d0>)
 800fbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbde:	f7f0 fd43 	bl	8000668 <__aeabi_dmul>
 800fbe2:	a367      	add	r3, pc, #412	; (adr r3, 800fd80 <_dtoa_r+0x2d8>)
 800fbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe8:	f7f0 fb88 	bl	80002fc <__adddf3>
 800fbec:	4606      	mov	r6, r0
 800fbee:	4628      	mov	r0, r5
 800fbf0:	460f      	mov	r7, r1
 800fbf2:	f7f0 fccf 	bl	8000594 <__aeabi_i2d>
 800fbf6:	a364      	add	r3, pc, #400	; (adr r3, 800fd88 <_dtoa_r+0x2e0>)
 800fbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbfc:	f7f0 fd34 	bl	8000668 <__aeabi_dmul>
 800fc00:	4602      	mov	r2, r0
 800fc02:	460b      	mov	r3, r1
 800fc04:	4630      	mov	r0, r6
 800fc06:	4639      	mov	r1, r7
 800fc08:	f7f0 fb78 	bl	80002fc <__adddf3>
 800fc0c:	4606      	mov	r6, r0
 800fc0e:	460f      	mov	r7, r1
 800fc10:	f7f0 ffda 	bl	8000bc8 <__aeabi_d2iz>
 800fc14:	2200      	movs	r2, #0
 800fc16:	4683      	mov	fp, r0
 800fc18:	2300      	movs	r3, #0
 800fc1a:	4630      	mov	r0, r6
 800fc1c:	4639      	mov	r1, r7
 800fc1e:	f7f0 ff95 	bl	8000b4c <__aeabi_dcmplt>
 800fc22:	b148      	cbz	r0, 800fc38 <_dtoa_r+0x190>
 800fc24:	4658      	mov	r0, fp
 800fc26:	f7f0 fcb5 	bl	8000594 <__aeabi_i2d>
 800fc2a:	4632      	mov	r2, r6
 800fc2c:	463b      	mov	r3, r7
 800fc2e:	f7f0 ff83 	bl	8000b38 <__aeabi_dcmpeq>
 800fc32:	b908      	cbnz	r0, 800fc38 <_dtoa_r+0x190>
 800fc34:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fc38:	f1bb 0f16 	cmp.w	fp, #22
 800fc3c:	d857      	bhi.n	800fcee <_dtoa_r+0x246>
 800fc3e:	4b5b      	ldr	r3, [pc, #364]	; (800fdac <_dtoa_r+0x304>)
 800fc40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc48:	ec51 0b18 	vmov	r0, r1, d8
 800fc4c:	f7f0 ff7e 	bl	8000b4c <__aeabi_dcmplt>
 800fc50:	2800      	cmp	r0, #0
 800fc52:	d04e      	beq.n	800fcf2 <_dtoa_r+0x24a>
 800fc54:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fc58:	2300      	movs	r3, #0
 800fc5a:	930c      	str	r3, [sp, #48]	; 0x30
 800fc5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fc5e:	1b5b      	subs	r3, r3, r5
 800fc60:	1e5a      	subs	r2, r3, #1
 800fc62:	bf45      	ittet	mi
 800fc64:	f1c3 0301 	rsbmi	r3, r3, #1
 800fc68:	9305      	strmi	r3, [sp, #20]
 800fc6a:	2300      	movpl	r3, #0
 800fc6c:	2300      	movmi	r3, #0
 800fc6e:	9206      	str	r2, [sp, #24]
 800fc70:	bf54      	ite	pl
 800fc72:	9305      	strpl	r3, [sp, #20]
 800fc74:	9306      	strmi	r3, [sp, #24]
 800fc76:	f1bb 0f00 	cmp.w	fp, #0
 800fc7a:	db3c      	blt.n	800fcf6 <_dtoa_r+0x24e>
 800fc7c:	9b06      	ldr	r3, [sp, #24]
 800fc7e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800fc82:	445b      	add	r3, fp
 800fc84:	9306      	str	r3, [sp, #24]
 800fc86:	2300      	movs	r3, #0
 800fc88:	9308      	str	r3, [sp, #32]
 800fc8a:	9b07      	ldr	r3, [sp, #28]
 800fc8c:	2b09      	cmp	r3, #9
 800fc8e:	d868      	bhi.n	800fd62 <_dtoa_r+0x2ba>
 800fc90:	2b05      	cmp	r3, #5
 800fc92:	bfc4      	itt	gt
 800fc94:	3b04      	subgt	r3, #4
 800fc96:	9307      	strgt	r3, [sp, #28]
 800fc98:	9b07      	ldr	r3, [sp, #28]
 800fc9a:	f1a3 0302 	sub.w	r3, r3, #2
 800fc9e:	bfcc      	ite	gt
 800fca0:	2500      	movgt	r5, #0
 800fca2:	2501      	movle	r5, #1
 800fca4:	2b03      	cmp	r3, #3
 800fca6:	f200 8085 	bhi.w	800fdb4 <_dtoa_r+0x30c>
 800fcaa:	e8df f003 	tbb	[pc, r3]
 800fcae:	3b2e      	.short	0x3b2e
 800fcb0:	5839      	.short	0x5839
 800fcb2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fcb6:	441d      	add	r5, r3
 800fcb8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fcbc:	2b20      	cmp	r3, #32
 800fcbe:	bfc1      	itttt	gt
 800fcc0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fcc4:	fa08 f803 	lslgt.w	r8, r8, r3
 800fcc8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800fccc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800fcd0:	bfd6      	itet	le
 800fcd2:	f1c3 0320 	rsble	r3, r3, #32
 800fcd6:	ea48 0003 	orrgt.w	r0, r8, r3
 800fcda:	fa06 f003 	lslle.w	r0, r6, r3
 800fcde:	f7f0 fc49 	bl	8000574 <__aeabi_ui2d>
 800fce2:	2201      	movs	r2, #1
 800fce4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800fce8:	3d01      	subs	r5, #1
 800fcea:	920e      	str	r2, [sp, #56]	; 0x38
 800fcec:	e76f      	b.n	800fbce <_dtoa_r+0x126>
 800fcee:	2301      	movs	r3, #1
 800fcf0:	e7b3      	b.n	800fc5a <_dtoa_r+0x1b2>
 800fcf2:	900c      	str	r0, [sp, #48]	; 0x30
 800fcf4:	e7b2      	b.n	800fc5c <_dtoa_r+0x1b4>
 800fcf6:	9b05      	ldr	r3, [sp, #20]
 800fcf8:	eba3 030b 	sub.w	r3, r3, fp
 800fcfc:	9305      	str	r3, [sp, #20]
 800fcfe:	f1cb 0300 	rsb	r3, fp, #0
 800fd02:	9308      	str	r3, [sp, #32]
 800fd04:	2300      	movs	r3, #0
 800fd06:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd08:	e7bf      	b.n	800fc8a <_dtoa_r+0x1e2>
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	9309      	str	r3, [sp, #36]	; 0x24
 800fd0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	dc52      	bgt.n	800fdba <_dtoa_r+0x312>
 800fd14:	2301      	movs	r3, #1
 800fd16:	9301      	str	r3, [sp, #4]
 800fd18:	9304      	str	r3, [sp, #16]
 800fd1a:	461a      	mov	r2, r3
 800fd1c:	920a      	str	r2, [sp, #40]	; 0x28
 800fd1e:	e00b      	b.n	800fd38 <_dtoa_r+0x290>
 800fd20:	2301      	movs	r3, #1
 800fd22:	e7f3      	b.n	800fd0c <_dtoa_r+0x264>
 800fd24:	2300      	movs	r3, #0
 800fd26:	9309      	str	r3, [sp, #36]	; 0x24
 800fd28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd2a:	445b      	add	r3, fp
 800fd2c:	9301      	str	r3, [sp, #4]
 800fd2e:	3301      	adds	r3, #1
 800fd30:	2b01      	cmp	r3, #1
 800fd32:	9304      	str	r3, [sp, #16]
 800fd34:	bfb8      	it	lt
 800fd36:	2301      	movlt	r3, #1
 800fd38:	69e0      	ldr	r0, [r4, #28]
 800fd3a:	2100      	movs	r1, #0
 800fd3c:	2204      	movs	r2, #4
 800fd3e:	f102 0614 	add.w	r6, r2, #20
 800fd42:	429e      	cmp	r6, r3
 800fd44:	d93d      	bls.n	800fdc2 <_dtoa_r+0x31a>
 800fd46:	6041      	str	r1, [r0, #4]
 800fd48:	4620      	mov	r0, r4
 800fd4a:	f000 fd9f 	bl	801088c <_Balloc>
 800fd4e:	9000      	str	r0, [sp, #0]
 800fd50:	2800      	cmp	r0, #0
 800fd52:	d139      	bne.n	800fdc8 <_dtoa_r+0x320>
 800fd54:	4b16      	ldr	r3, [pc, #88]	; (800fdb0 <_dtoa_r+0x308>)
 800fd56:	4602      	mov	r2, r0
 800fd58:	f240 11af 	movw	r1, #431	; 0x1af
 800fd5c:	e6bd      	b.n	800fada <_dtoa_r+0x32>
 800fd5e:	2301      	movs	r3, #1
 800fd60:	e7e1      	b.n	800fd26 <_dtoa_r+0x27e>
 800fd62:	2501      	movs	r5, #1
 800fd64:	2300      	movs	r3, #0
 800fd66:	9307      	str	r3, [sp, #28]
 800fd68:	9509      	str	r5, [sp, #36]	; 0x24
 800fd6a:	f04f 33ff 	mov.w	r3, #4294967295
 800fd6e:	9301      	str	r3, [sp, #4]
 800fd70:	9304      	str	r3, [sp, #16]
 800fd72:	2200      	movs	r2, #0
 800fd74:	2312      	movs	r3, #18
 800fd76:	e7d1      	b.n	800fd1c <_dtoa_r+0x274>
 800fd78:	636f4361 	.word	0x636f4361
 800fd7c:	3fd287a7 	.word	0x3fd287a7
 800fd80:	8b60c8b3 	.word	0x8b60c8b3
 800fd84:	3fc68a28 	.word	0x3fc68a28
 800fd88:	509f79fb 	.word	0x509f79fb
 800fd8c:	3fd34413 	.word	0x3fd34413
 800fd90:	08012c2d 	.word	0x08012c2d
 800fd94:	08012ce7 	.word	0x08012ce7
 800fd98:	7ff00000 	.word	0x7ff00000
 800fd9c:	08012ce3 	.word	0x08012ce3
 800fda0:	08012cda 	.word	0x08012cda
 800fda4:	08012c0a 	.word	0x08012c0a
 800fda8:	3ff80000 	.word	0x3ff80000
 800fdac:	08012dd8 	.word	0x08012dd8
 800fdb0:	08012d3f 	.word	0x08012d3f
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	9309      	str	r3, [sp, #36]	; 0x24
 800fdb8:	e7d7      	b.n	800fd6a <_dtoa_r+0x2c2>
 800fdba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdbc:	9301      	str	r3, [sp, #4]
 800fdbe:	9304      	str	r3, [sp, #16]
 800fdc0:	e7ba      	b.n	800fd38 <_dtoa_r+0x290>
 800fdc2:	3101      	adds	r1, #1
 800fdc4:	0052      	lsls	r2, r2, #1
 800fdc6:	e7ba      	b.n	800fd3e <_dtoa_r+0x296>
 800fdc8:	69e3      	ldr	r3, [r4, #28]
 800fdca:	9a00      	ldr	r2, [sp, #0]
 800fdcc:	601a      	str	r2, [r3, #0]
 800fdce:	9b04      	ldr	r3, [sp, #16]
 800fdd0:	2b0e      	cmp	r3, #14
 800fdd2:	f200 80a8 	bhi.w	800ff26 <_dtoa_r+0x47e>
 800fdd6:	2d00      	cmp	r5, #0
 800fdd8:	f000 80a5 	beq.w	800ff26 <_dtoa_r+0x47e>
 800fddc:	f1bb 0f00 	cmp.w	fp, #0
 800fde0:	dd38      	ble.n	800fe54 <_dtoa_r+0x3ac>
 800fde2:	4bc0      	ldr	r3, [pc, #768]	; (80100e4 <_dtoa_r+0x63c>)
 800fde4:	f00b 020f 	and.w	r2, fp, #15
 800fde8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fdec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800fdf0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800fdf4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800fdf8:	d019      	beq.n	800fe2e <_dtoa_r+0x386>
 800fdfa:	4bbb      	ldr	r3, [pc, #748]	; (80100e8 <_dtoa_r+0x640>)
 800fdfc:	ec51 0b18 	vmov	r0, r1, d8
 800fe00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fe04:	f7f0 fd5a 	bl	80008bc <__aeabi_ddiv>
 800fe08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe0c:	f008 080f 	and.w	r8, r8, #15
 800fe10:	2503      	movs	r5, #3
 800fe12:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80100e8 <_dtoa_r+0x640>
 800fe16:	f1b8 0f00 	cmp.w	r8, #0
 800fe1a:	d10a      	bne.n	800fe32 <_dtoa_r+0x38a>
 800fe1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe20:	4632      	mov	r2, r6
 800fe22:	463b      	mov	r3, r7
 800fe24:	f7f0 fd4a 	bl	80008bc <__aeabi_ddiv>
 800fe28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe2c:	e02b      	b.n	800fe86 <_dtoa_r+0x3de>
 800fe2e:	2502      	movs	r5, #2
 800fe30:	e7ef      	b.n	800fe12 <_dtoa_r+0x36a>
 800fe32:	f018 0f01 	tst.w	r8, #1
 800fe36:	d008      	beq.n	800fe4a <_dtoa_r+0x3a2>
 800fe38:	4630      	mov	r0, r6
 800fe3a:	4639      	mov	r1, r7
 800fe3c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fe40:	f7f0 fc12 	bl	8000668 <__aeabi_dmul>
 800fe44:	3501      	adds	r5, #1
 800fe46:	4606      	mov	r6, r0
 800fe48:	460f      	mov	r7, r1
 800fe4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fe4e:	f109 0908 	add.w	r9, r9, #8
 800fe52:	e7e0      	b.n	800fe16 <_dtoa_r+0x36e>
 800fe54:	f000 809f 	beq.w	800ff96 <_dtoa_r+0x4ee>
 800fe58:	f1cb 0600 	rsb	r6, fp, #0
 800fe5c:	4ba1      	ldr	r3, [pc, #644]	; (80100e4 <_dtoa_r+0x63c>)
 800fe5e:	4fa2      	ldr	r7, [pc, #648]	; (80100e8 <_dtoa_r+0x640>)
 800fe60:	f006 020f 	and.w	r2, r6, #15
 800fe64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe6c:	ec51 0b18 	vmov	r0, r1, d8
 800fe70:	f7f0 fbfa 	bl	8000668 <__aeabi_dmul>
 800fe74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe78:	1136      	asrs	r6, r6, #4
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	2502      	movs	r5, #2
 800fe7e:	2e00      	cmp	r6, #0
 800fe80:	d17e      	bne.n	800ff80 <_dtoa_r+0x4d8>
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d1d0      	bne.n	800fe28 <_dtoa_r+0x380>
 800fe86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe88:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	f000 8084 	beq.w	800ff9a <_dtoa_r+0x4f2>
 800fe92:	4b96      	ldr	r3, [pc, #600]	; (80100ec <_dtoa_r+0x644>)
 800fe94:	2200      	movs	r2, #0
 800fe96:	4640      	mov	r0, r8
 800fe98:	4649      	mov	r1, r9
 800fe9a:	f7f0 fe57 	bl	8000b4c <__aeabi_dcmplt>
 800fe9e:	2800      	cmp	r0, #0
 800fea0:	d07b      	beq.n	800ff9a <_dtoa_r+0x4f2>
 800fea2:	9b04      	ldr	r3, [sp, #16]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d078      	beq.n	800ff9a <_dtoa_r+0x4f2>
 800fea8:	9b01      	ldr	r3, [sp, #4]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	dd39      	ble.n	800ff22 <_dtoa_r+0x47a>
 800feae:	4b90      	ldr	r3, [pc, #576]	; (80100f0 <_dtoa_r+0x648>)
 800feb0:	2200      	movs	r2, #0
 800feb2:	4640      	mov	r0, r8
 800feb4:	4649      	mov	r1, r9
 800feb6:	f7f0 fbd7 	bl	8000668 <__aeabi_dmul>
 800feba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800febe:	9e01      	ldr	r6, [sp, #4]
 800fec0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800fec4:	3501      	adds	r5, #1
 800fec6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800feca:	4628      	mov	r0, r5
 800fecc:	f7f0 fb62 	bl	8000594 <__aeabi_i2d>
 800fed0:	4642      	mov	r2, r8
 800fed2:	464b      	mov	r3, r9
 800fed4:	f7f0 fbc8 	bl	8000668 <__aeabi_dmul>
 800fed8:	4b86      	ldr	r3, [pc, #536]	; (80100f4 <_dtoa_r+0x64c>)
 800feda:	2200      	movs	r2, #0
 800fedc:	f7f0 fa0e 	bl	80002fc <__adddf3>
 800fee0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800fee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fee8:	9303      	str	r3, [sp, #12]
 800feea:	2e00      	cmp	r6, #0
 800feec:	d158      	bne.n	800ffa0 <_dtoa_r+0x4f8>
 800feee:	4b82      	ldr	r3, [pc, #520]	; (80100f8 <_dtoa_r+0x650>)
 800fef0:	2200      	movs	r2, #0
 800fef2:	4640      	mov	r0, r8
 800fef4:	4649      	mov	r1, r9
 800fef6:	f7f0 f9ff 	bl	80002f8 <__aeabi_dsub>
 800fefa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fefe:	4680      	mov	r8, r0
 800ff00:	4689      	mov	r9, r1
 800ff02:	f7f0 fe41 	bl	8000b88 <__aeabi_dcmpgt>
 800ff06:	2800      	cmp	r0, #0
 800ff08:	f040 8296 	bne.w	8010438 <_dtoa_r+0x990>
 800ff0c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ff10:	4640      	mov	r0, r8
 800ff12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ff16:	4649      	mov	r1, r9
 800ff18:	f7f0 fe18 	bl	8000b4c <__aeabi_dcmplt>
 800ff1c:	2800      	cmp	r0, #0
 800ff1e:	f040 8289 	bne.w	8010434 <_dtoa_r+0x98c>
 800ff22:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ff26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	f2c0 814e 	blt.w	80101ca <_dtoa_r+0x722>
 800ff2e:	f1bb 0f0e 	cmp.w	fp, #14
 800ff32:	f300 814a 	bgt.w	80101ca <_dtoa_r+0x722>
 800ff36:	4b6b      	ldr	r3, [pc, #428]	; (80100e4 <_dtoa_r+0x63c>)
 800ff38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ff3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ff40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	f280 80dc 	bge.w	8010100 <_dtoa_r+0x658>
 800ff48:	9b04      	ldr	r3, [sp, #16]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	f300 80d8 	bgt.w	8010100 <_dtoa_r+0x658>
 800ff50:	f040 826f 	bne.w	8010432 <_dtoa_r+0x98a>
 800ff54:	4b68      	ldr	r3, [pc, #416]	; (80100f8 <_dtoa_r+0x650>)
 800ff56:	2200      	movs	r2, #0
 800ff58:	4640      	mov	r0, r8
 800ff5a:	4649      	mov	r1, r9
 800ff5c:	f7f0 fb84 	bl	8000668 <__aeabi_dmul>
 800ff60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ff64:	f7f0 fe06 	bl	8000b74 <__aeabi_dcmpge>
 800ff68:	9e04      	ldr	r6, [sp, #16]
 800ff6a:	4637      	mov	r7, r6
 800ff6c:	2800      	cmp	r0, #0
 800ff6e:	f040 8245 	bne.w	80103fc <_dtoa_r+0x954>
 800ff72:	9d00      	ldr	r5, [sp, #0]
 800ff74:	2331      	movs	r3, #49	; 0x31
 800ff76:	f805 3b01 	strb.w	r3, [r5], #1
 800ff7a:	f10b 0b01 	add.w	fp, fp, #1
 800ff7e:	e241      	b.n	8010404 <_dtoa_r+0x95c>
 800ff80:	07f2      	lsls	r2, r6, #31
 800ff82:	d505      	bpl.n	800ff90 <_dtoa_r+0x4e8>
 800ff84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff88:	f7f0 fb6e 	bl	8000668 <__aeabi_dmul>
 800ff8c:	3501      	adds	r5, #1
 800ff8e:	2301      	movs	r3, #1
 800ff90:	1076      	asrs	r6, r6, #1
 800ff92:	3708      	adds	r7, #8
 800ff94:	e773      	b.n	800fe7e <_dtoa_r+0x3d6>
 800ff96:	2502      	movs	r5, #2
 800ff98:	e775      	b.n	800fe86 <_dtoa_r+0x3de>
 800ff9a:	9e04      	ldr	r6, [sp, #16]
 800ff9c:	465f      	mov	r7, fp
 800ff9e:	e792      	b.n	800fec6 <_dtoa_r+0x41e>
 800ffa0:	9900      	ldr	r1, [sp, #0]
 800ffa2:	4b50      	ldr	r3, [pc, #320]	; (80100e4 <_dtoa_r+0x63c>)
 800ffa4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ffa8:	4431      	add	r1, r6
 800ffaa:	9102      	str	r1, [sp, #8]
 800ffac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ffae:	eeb0 9a47 	vmov.f32	s18, s14
 800ffb2:	eef0 9a67 	vmov.f32	s19, s15
 800ffb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ffba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ffbe:	2900      	cmp	r1, #0
 800ffc0:	d044      	beq.n	801004c <_dtoa_r+0x5a4>
 800ffc2:	494e      	ldr	r1, [pc, #312]	; (80100fc <_dtoa_r+0x654>)
 800ffc4:	2000      	movs	r0, #0
 800ffc6:	f7f0 fc79 	bl	80008bc <__aeabi_ddiv>
 800ffca:	ec53 2b19 	vmov	r2, r3, d9
 800ffce:	f7f0 f993 	bl	80002f8 <__aeabi_dsub>
 800ffd2:	9d00      	ldr	r5, [sp, #0]
 800ffd4:	ec41 0b19 	vmov	d9, r0, r1
 800ffd8:	4649      	mov	r1, r9
 800ffda:	4640      	mov	r0, r8
 800ffdc:	f7f0 fdf4 	bl	8000bc8 <__aeabi_d2iz>
 800ffe0:	4606      	mov	r6, r0
 800ffe2:	f7f0 fad7 	bl	8000594 <__aeabi_i2d>
 800ffe6:	4602      	mov	r2, r0
 800ffe8:	460b      	mov	r3, r1
 800ffea:	4640      	mov	r0, r8
 800ffec:	4649      	mov	r1, r9
 800ffee:	f7f0 f983 	bl	80002f8 <__aeabi_dsub>
 800fff2:	3630      	adds	r6, #48	; 0x30
 800fff4:	f805 6b01 	strb.w	r6, [r5], #1
 800fff8:	ec53 2b19 	vmov	r2, r3, d9
 800fffc:	4680      	mov	r8, r0
 800fffe:	4689      	mov	r9, r1
 8010000:	f7f0 fda4 	bl	8000b4c <__aeabi_dcmplt>
 8010004:	2800      	cmp	r0, #0
 8010006:	d164      	bne.n	80100d2 <_dtoa_r+0x62a>
 8010008:	4642      	mov	r2, r8
 801000a:	464b      	mov	r3, r9
 801000c:	4937      	ldr	r1, [pc, #220]	; (80100ec <_dtoa_r+0x644>)
 801000e:	2000      	movs	r0, #0
 8010010:	f7f0 f972 	bl	80002f8 <__aeabi_dsub>
 8010014:	ec53 2b19 	vmov	r2, r3, d9
 8010018:	f7f0 fd98 	bl	8000b4c <__aeabi_dcmplt>
 801001c:	2800      	cmp	r0, #0
 801001e:	f040 80b6 	bne.w	801018e <_dtoa_r+0x6e6>
 8010022:	9b02      	ldr	r3, [sp, #8]
 8010024:	429d      	cmp	r5, r3
 8010026:	f43f af7c 	beq.w	800ff22 <_dtoa_r+0x47a>
 801002a:	4b31      	ldr	r3, [pc, #196]	; (80100f0 <_dtoa_r+0x648>)
 801002c:	ec51 0b19 	vmov	r0, r1, d9
 8010030:	2200      	movs	r2, #0
 8010032:	f7f0 fb19 	bl	8000668 <__aeabi_dmul>
 8010036:	4b2e      	ldr	r3, [pc, #184]	; (80100f0 <_dtoa_r+0x648>)
 8010038:	ec41 0b19 	vmov	d9, r0, r1
 801003c:	2200      	movs	r2, #0
 801003e:	4640      	mov	r0, r8
 8010040:	4649      	mov	r1, r9
 8010042:	f7f0 fb11 	bl	8000668 <__aeabi_dmul>
 8010046:	4680      	mov	r8, r0
 8010048:	4689      	mov	r9, r1
 801004a:	e7c5      	b.n	800ffd8 <_dtoa_r+0x530>
 801004c:	ec51 0b17 	vmov	r0, r1, d7
 8010050:	f7f0 fb0a 	bl	8000668 <__aeabi_dmul>
 8010054:	9b02      	ldr	r3, [sp, #8]
 8010056:	9d00      	ldr	r5, [sp, #0]
 8010058:	930f      	str	r3, [sp, #60]	; 0x3c
 801005a:	ec41 0b19 	vmov	d9, r0, r1
 801005e:	4649      	mov	r1, r9
 8010060:	4640      	mov	r0, r8
 8010062:	f7f0 fdb1 	bl	8000bc8 <__aeabi_d2iz>
 8010066:	4606      	mov	r6, r0
 8010068:	f7f0 fa94 	bl	8000594 <__aeabi_i2d>
 801006c:	3630      	adds	r6, #48	; 0x30
 801006e:	4602      	mov	r2, r0
 8010070:	460b      	mov	r3, r1
 8010072:	4640      	mov	r0, r8
 8010074:	4649      	mov	r1, r9
 8010076:	f7f0 f93f 	bl	80002f8 <__aeabi_dsub>
 801007a:	f805 6b01 	strb.w	r6, [r5], #1
 801007e:	9b02      	ldr	r3, [sp, #8]
 8010080:	429d      	cmp	r5, r3
 8010082:	4680      	mov	r8, r0
 8010084:	4689      	mov	r9, r1
 8010086:	f04f 0200 	mov.w	r2, #0
 801008a:	d124      	bne.n	80100d6 <_dtoa_r+0x62e>
 801008c:	4b1b      	ldr	r3, [pc, #108]	; (80100fc <_dtoa_r+0x654>)
 801008e:	ec51 0b19 	vmov	r0, r1, d9
 8010092:	f7f0 f933 	bl	80002fc <__adddf3>
 8010096:	4602      	mov	r2, r0
 8010098:	460b      	mov	r3, r1
 801009a:	4640      	mov	r0, r8
 801009c:	4649      	mov	r1, r9
 801009e:	f7f0 fd73 	bl	8000b88 <__aeabi_dcmpgt>
 80100a2:	2800      	cmp	r0, #0
 80100a4:	d173      	bne.n	801018e <_dtoa_r+0x6e6>
 80100a6:	ec53 2b19 	vmov	r2, r3, d9
 80100aa:	4914      	ldr	r1, [pc, #80]	; (80100fc <_dtoa_r+0x654>)
 80100ac:	2000      	movs	r0, #0
 80100ae:	f7f0 f923 	bl	80002f8 <__aeabi_dsub>
 80100b2:	4602      	mov	r2, r0
 80100b4:	460b      	mov	r3, r1
 80100b6:	4640      	mov	r0, r8
 80100b8:	4649      	mov	r1, r9
 80100ba:	f7f0 fd47 	bl	8000b4c <__aeabi_dcmplt>
 80100be:	2800      	cmp	r0, #0
 80100c0:	f43f af2f 	beq.w	800ff22 <_dtoa_r+0x47a>
 80100c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80100c6:	1e6b      	subs	r3, r5, #1
 80100c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80100ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80100ce:	2b30      	cmp	r3, #48	; 0x30
 80100d0:	d0f8      	beq.n	80100c4 <_dtoa_r+0x61c>
 80100d2:	46bb      	mov	fp, r7
 80100d4:	e04a      	b.n	801016c <_dtoa_r+0x6c4>
 80100d6:	4b06      	ldr	r3, [pc, #24]	; (80100f0 <_dtoa_r+0x648>)
 80100d8:	f7f0 fac6 	bl	8000668 <__aeabi_dmul>
 80100dc:	4680      	mov	r8, r0
 80100de:	4689      	mov	r9, r1
 80100e0:	e7bd      	b.n	801005e <_dtoa_r+0x5b6>
 80100e2:	bf00      	nop
 80100e4:	08012dd8 	.word	0x08012dd8
 80100e8:	08012db0 	.word	0x08012db0
 80100ec:	3ff00000 	.word	0x3ff00000
 80100f0:	40240000 	.word	0x40240000
 80100f4:	401c0000 	.word	0x401c0000
 80100f8:	40140000 	.word	0x40140000
 80100fc:	3fe00000 	.word	0x3fe00000
 8010100:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010104:	9d00      	ldr	r5, [sp, #0]
 8010106:	4642      	mov	r2, r8
 8010108:	464b      	mov	r3, r9
 801010a:	4630      	mov	r0, r6
 801010c:	4639      	mov	r1, r7
 801010e:	f7f0 fbd5 	bl	80008bc <__aeabi_ddiv>
 8010112:	f7f0 fd59 	bl	8000bc8 <__aeabi_d2iz>
 8010116:	9001      	str	r0, [sp, #4]
 8010118:	f7f0 fa3c 	bl	8000594 <__aeabi_i2d>
 801011c:	4642      	mov	r2, r8
 801011e:	464b      	mov	r3, r9
 8010120:	f7f0 faa2 	bl	8000668 <__aeabi_dmul>
 8010124:	4602      	mov	r2, r0
 8010126:	460b      	mov	r3, r1
 8010128:	4630      	mov	r0, r6
 801012a:	4639      	mov	r1, r7
 801012c:	f7f0 f8e4 	bl	80002f8 <__aeabi_dsub>
 8010130:	9e01      	ldr	r6, [sp, #4]
 8010132:	9f04      	ldr	r7, [sp, #16]
 8010134:	3630      	adds	r6, #48	; 0x30
 8010136:	f805 6b01 	strb.w	r6, [r5], #1
 801013a:	9e00      	ldr	r6, [sp, #0]
 801013c:	1bae      	subs	r6, r5, r6
 801013e:	42b7      	cmp	r7, r6
 8010140:	4602      	mov	r2, r0
 8010142:	460b      	mov	r3, r1
 8010144:	d134      	bne.n	80101b0 <_dtoa_r+0x708>
 8010146:	f7f0 f8d9 	bl	80002fc <__adddf3>
 801014a:	4642      	mov	r2, r8
 801014c:	464b      	mov	r3, r9
 801014e:	4606      	mov	r6, r0
 8010150:	460f      	mov	r7, r1
 8010152:	f7f0 fd19 	bl	8000b88 <__aeabi_dcmpgt>
 8010156:	b9c8      	cbnz	r0, 801018c <_dtoa_r+0x6e4>
 8010158:	4642      	mov	r2, r8
 801015a:	464b      	mov	r3, r9
 801015c:	4630      	mov	r0, r6
 801015e:	4639      	mov	r1, r7
 8010160:	f7f0 fcea 	bl	8000b38 <__aeabi_dcmpeq>
 8010164:	b110      	cbz	r0, 801016c <_dtoa_r+0x6c4>
 8010166:	9b01      	ldr	r3, [sp, #4]
 8010168:	07db      	lsls	r3, r3, #31
 801016a:	d40f      	bmi.n	801018c <_dtoa_r+0x6e4>
 801016c:	4651      	mov	r1, sl
 801016e:	4620      	mov	r0, r4
 8010170:	f000 fbcc 	bl	801090c <_Bfree>
 8010174:	2300      	movs	r3, #0
 8010176:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010178:	702b      	strb	r3, [r5, #0]
 801017a:	f10b 0301 	add.w	r3, fp, #1
 801017e:	6013      	str	r3, [r2, #0]
 8010180:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010182:	2b00      	cmp	r3, #0
 8010184:	f43f ace2 	beq.w	800fb4c <_dtoa_r+0xa4>
 8010188:	601d      	str	r5, [r3, #0]
 801018a:	e4df      	b.n	800fb4c <_dtoa_r+0xa4>
 801018c:	465f      	mov	r7, fp
 801018e:	462b      	mov	r3, r5
 8010190:	461d      	mov	r5, r3
 8010192:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010196:	2a39      	cmp	r2, #57	; 0x39
 8010198:	d106      	bne.n	80101a8 <_dtoa_r+0x700>
 801019a:	9a00      	ldr	r2, [sp, #0]
 801019c:	429a      	cmp	r2, r3
 801019e:	d1f7      	bne.n	8010190 <_dtoa_r+0x6e8>
 80101a0:	9900      	ldr	r1, [sp, #0]
 80101a2:	2230      	movs	r2, #48	; 0x30
 80101a4:	3701      	adds	r7, #1
 80101a6:	700a      	strb	r2, [r1, #0]
 80101a8:	781a      	ldrb	r2, [r3, #0]
 80101aa:	3201      	adds	r2, #1
 80101ac:	701a      	strb	r2, [r3, #0]
 80101ae:	e790      	b.n	80100d2 <_dtoa_r+0x62a>
 80101b0:	4ba3      	ldr	r3, [pc, #652]	; (8010440 <_dtoa_r+0x998>)
 80101b2:	2200      	movs	r2, #0
 80101b4:	f7f0 fa58 	bl	8000668 <__aeabi_dmul>
 80101b8:	2200      	movs	r2, #0
 80101ba:	2300      	movs	r3, #0
 80101bc:	4606      	mov	r6, r0
 80101be:	460f      	mov	r7, r1
 80101c0:	f7f0 fcba 	bl	8000b38 <__aeabi_dcmpeq>
 80101c4:	2800      	cmp	r0, #0
 80101c6:	d09e      	beq.n	8010106 <_dtoa_r+0x65e>
 80101c8:	e7d0      	b.n	801016c <_dtoa_r+0x6c4>
 80101ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101cc:	2a00      	cmp	r2, #0
 80101ce:	f000 80ca 	beq.w	8010366 <_dtoa_r+0x8be>
 80101d2:	9a07      	ldr	r2, [sp, #28]
 80101d4:	2a01      	cmp	r2, #1
 80101d6:	f300 80ad 	bgt.w	8010334 <_dtoa_r+0x88c>
 80101da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80101dc:	2a00      	cmp	r2, #0
 80101de:	f000 80a5 	beq.w	801032c <_dtoa_r+0x884>
 80101e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80101e6:	9e08      	ldr	r6, [sp, #32]
 80101e8:	9d05      	ldr	r5, [sp, #20]
 80101ea:	9a05      	ldr	r2, [sp, #20]
 80101ec:	441a      	add	r2, r3
 80101ee:	9205      	str	r2, [sp, #20]
 80101f0:	9a06      	ldr	r2, [sp, #24]
 80101f2:	2101      	movs	r1, #1
 80101f4:	441a      	add	r2, r3
 80101f6:	4620      	mov	r0, r4
 80101f8:	9206      	str	r2, [sp, #24]
 80101fa:	f000 fc3d 	bl	8010a78 <__i2b>
 80101fe:	4607      	mov	r7, r0
 8010200:	b165      	cbz	r5, 801021c <_dtoa_r+0x774>
 8010202:	9b06      	ldr	r3, [sp, #24]
 8010204:	2b00      	cmp	r3, #0
 8010206:	dd09      	ble.n	801021c <_dtoa_r+0x774>
 8010208:	42ab      	cmp	r3, r5
 801020a:	9a05      	ldr	r2, [sp, #20]
 801020c:	bfa8      	it	ge
 801020e:	462b      	movge	r3, r5
 8010210:	1ad2      	subs	r2, r2, r3
 8010212:	9205      	str	r2, [sp, #20]
 8010214:	9a06      	ldr	r2, [sp, #24]
 8010216:	1aed      	subs	r5, r5, r3
 8010218:	1ad3      	subs	r3, r2, r3
 801021a:	9306      	str	r3, [sp, #24]
 801021c:	9b08      	ldr	r3, [sp, #32]
 801021e:	b1f3      	cbz	r3, 801025e <_dtoa_r+0x7b6>
 8010220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010222:	2b00      	cmp	r3, #0
 8010224:	f000 80a3 	beq.w	801036e <_dtoa_r+0x8c6>
 8010228:	2e00      	cmp	r6, #0
 801022a:	dd10      	ble.n	801024e <_dtoa_r+0x7a6>
 801022c:	4639      	mov	r1, r7
 801022e:	4632      	mov	r2, r6
 8010230:	4620      	mov	r0, r4
 8010232:	f000 fce1 	bl	8010bf8 <__pow5mult>
 8010236:	4652      	mov	r2, sl
 8010238:	4601      	mov	r1, r0
 801023a:	4607      	mov	r7, r0
 801023c:	4620      	mov	r0, r4
 801023e:	f000 fc31 	bl	8010aa4 <__multiply>
 8010242:	4651      	mov	r1, sl
 8010244:	4680      	mov	r8, r0
 8010246:	4620      	mov	r0, r4
 8010248:	f000 fb60 	bl	801090c <_Bfree>
 801024c:	46c2      	mov	sl, r8
 801024e:	9b08      	ldr	r3, [sp, #32]
 8010250:	1b9a      	subs	r2, r3, r6
 8010252:	d004      	beq.n	801025e <_dtoa_r+0x7b6>
 8010254:	4651      	mov	r1, sl
 8010256:	4620      	mov	r0, r4
 8010258:	f000 fcce 	bl	8010bf8 <__pow5mult>
 801025c:	4682      	mov	sl, r0
 801025e:	2101      	movs	r1, #1
 8010260:	4620      	mov	r0, r4
 8010262:	f000 fc09 	bl	8010a78 <__i2b>
 8010266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010268:	2b00      	cmp	r3, #0
 801026a:	4606      	mov	r6, r0
 801026c:	f340 8081 	ble.w	8010372 <_dtoa_r+0x8ca>
 8010270:	461a      	mov	r2, r3
 8010272:	4601      	mov	r1, r0
 8010274:	4620      	mov	r0, r4
 8010276:	f000 fcbf 	bl	8010bf8 <__pow5mult>
 801027a:	9b07      	ldr	r3, [sp, #28]
 801027c:	2b01      	cmp	r3, #1
 801027e:	4606      	mov	r6, r0
 8010280:	dd7a      	ble.n	8010378 <_dtoa_r+0x8d0>
 8010282:	f04f 0800 	mov.w	r8, #0
 8010286:	6933      	ldr	r3, [r6, #16]
 8010288:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801028c:	6918      	ldr	r0, [r3, #16]
 801028e:	f000 fba5 	bl	80109dc <__hi0bits>
 8010292:	f1c0 0020 	rsb	r0, r0, #32
 8010296:	9b06      	ldr	r3, [sp, #24]
 8010298:	4418      	add	r0, r3
 801029a:	f010 001f 	ands.w	r0, r0, #31
 801029e:	f000 8094 	beq.w	80103ca <_dtoa_r+0x922>
 80102a2:	f1c0 0320 	rsb	r3, r0, #32
 80102a6:	2b04      	cmp	r3, #4
 80102a8:	f340 8085 	ble.w	80103b6 <_dtoa_r+0x90e>
 80102ac:	9b05      	ldr	r3, [sp, #20]
 80102ae:	f1c0 001c 	rsb	r0, r0, #28
 80102b2:	4403      	add	r3, r0
 80102b4:	9305      	str	r3, [sp, #20]
 80102b6:	9b06      	ldr	r3, [sp, #24]
 80102b8:	4403      	add	r3, r0
 80102ba:	4405      	add	r5, r0
 80102bc:	9306      	str	r3, [sp, #24]
 80102be:	9b05      	ldr	r3, [sp, #20]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	dd05      	ble.n	80102d0 <_dtoa_r+0x828>
 80102c4:	4651      	mov	r1, sl
 80102c6:	461a      	mov	r2, r3
 80102c8:	4620      	mov	r0, r4
 80102ca:	f000 fcef 	bl	8010cac <__lshift>
 80102ce:	4682      	mov	sl, r0
 80102d0:	9b06      	ldr	r3, [sp, #24]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	dd05      	ble.n	80102e2 <_dtoa_r+0x83a>
 80102d6:	4631      	mov	r1, r6
 80102d8:	461a      	mov	r2, r3
 80102da:	4620      	mov	r0, r4
 80102dc:	f000 fce6 	bl	8010cac <__lshift>
 80102e0:	4606      	mov	r6, r0
 80102e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d072      	beq.n	80103ce <_dtoa_r+0x926>
 80102e8:	4631      	mov	r1, r6
 80102ea:	4650      	mov	r0, sl
 80102ec:	f000 fd4a 	bl	8010d84 <__mcmp>
 80102f0:	2800      	cmp	r0, #0
 80102f2:	da6c      	bge.n	80103ce <_dtoa_r+0x926>
 80102f4:	2300      	movs	r3, #0
 80102f6:	4651      	mov	r1, sl
 80102f8:	220a      	movs	r2, #10
 80102fa:	4620      	mov	r0, r4
 80102fc:	f000 fb28 	bl	8010950 <__multadd>
 8010300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010302:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010306:	4682      	mov	sl, r0
 8010308:	2b00      	cmp	r3, #0
 801030a:	f000 81b0 	beq.w	801066e <_dtoa_r+0xbc6>
 801030e:	2300      	movs	r3, #0
 8010310:	4639      	mov	r1, r7
 8010312:	220a      	movs	r2, #10
 8010314:	4620      	mov	r0, r4
 8010316:	f000 fb1b 	bl	8010950 <__multadd>
 801031a:	9b01      	ldr	r3, [sp, #4]
 801031c:	2b00      	cmp	r3, #0
 801031e:	4607      	mov	r7, r0
 8010320:	f300 8096 	bgt.w	8010450 <_dtoa_r+0x9a8>
 8010324:	9b07      	ldr	r3, [sp, #28]
 8010326:	2b02      	cmp	r3, #2
 8010328:	dc59      	bgt.n	80103de <_dtoa_r+0x936>
 801032a:	e091      	b.n	8010450 <_dtoa_r+0x9a8>
 801032c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801032e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010332:	e758      	b.n	80101e6 <_dtoa_r+0x73e>
 8010334:	9b04      	ldr	r3, [sp, #16]
 8010336:	1e5e      	subs	r6, r3, #1
 8010338:	9b08      	ldr	r3, [sp, #32]
 801033a:	42b3      	cmp	r3, r6
 801033c:	bfbf      	itttt	lt
 801033e:	9b08      	ldrlt	r3, [sp, #32]
 8010340:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010342:	9608      	strlt	r6, [sp, #32]
 8010344:	1af3      	sublt	r3, r6, r3
 8010346:	bfb4      	ite	lt
 8010348:	18d2      	addlt	r2, r2, r3
 801034a:	1b9e      	subge	r6, r3, r6
 801034c:	9b04      	ldr	r3, [sp, #16]
 801034e:	bfbc      	itt	lt
 8010350:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010352:	2600      	movlt	r6, #0
 8010354:	2b00      	cmp	r3, #0
 8010356:	bfb7      	itett	lt
 8010358:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801035c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010360:	1a9d      	sublt	r5, r3, r2
 8010362:	2300      	movlt	r3, #0
 8010364:	e741      	b.n	80101ea <_dtoa_r+0x742>
 8010366:	9e08      	ldr	r6, [sp, #32]
 8010368:	9d05      	ldr	r5, [sp, #20]
 801036a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801036c:	e748      	b.n	8010200 <_dtoa_r+0x758>
 801036e:	9a08      	ldr	r2, [sp, #32]
 8010370:	e770      	b.n	8010254 <_dtoa_r+0x7ac>
 8010372:	9b07      	ldr	r3, [sp, #28]
 8010374:	2b01      	cmp	r3, #1
 8010376:	dc19      	bgt.n	80103ac <_dtoa_r+0x904>
 8010378:	9b02      	ldr	r3, [sp, #8]
 801037a:	b9bb      	cbnz	r3, 80103ac <_dtoa_r+0x904>
 801037c:	9b03      	ldr	r3, [sp, #12]
 801037e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010382:	b99b      	cbnz	r3, 80103ac <_dtoa_r+0x904>
 8010384:	9b03      	ldr	r3, [sp, #12]
 8010386:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801038a:	0d1b      	lsrs	r3, r3, #20
 801038c:	051b      	lsls	r3, r3, #20
 801038e:	b183      	cbz	r3, 80103b2 <_dtoa_r+0x90a>
 8010390:	9b05      	ldr	r3, [sp, #20]
 8010392:	3301      	adds	r3, #1
 8010394:	9305      	str	r3, [sp, #20]
 8010396:	9b06      	ldr	r3, [sp, #24]
 8010398:	3301      	adds	r3, #1
 801039a:	9306      	str	r3, [sp, #24]
 801039c:	f04f 0801 	mov.w	r8, #1
 80103a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	f47f af6f 	bne.w	8010286 <_dtoa_r+0x7de>
 80103a8:	2001      	movs	r0, #1
 80103aa:	e774      	b.n	8010296 <_dtoa_r+0x7ee>
 80103ac:	f04f 0800 	mov.w	r8, #0
 80103b0:	e7f6      	b.n	80103a0 <_dtoa_r+0x8f8>
 80103b2:	4698      	mov	r8, r3
 80103b4:	e7f4      	b.n	80103a0 <_dtoa_r+0x8f8>
 80103b6:	d082      	beq.n	80102be <_dtoa_r+0x816>
 80103b8:	9a05      	ldr	r2, [sp, #20]
 80103ba:	331c      	adds	r3, #28
 80103bc:	441a      	add	r2, r3
 80103be:	9205      	str	r2, [sp, #20]
 80103c0:	9a06      	ldr	r2, [sp, #24]
 80103c2:	441a      	add	r2, r3
 80103c4:	441d      	add	r5, r3
 80103c6:	9206      	str	r2, [sp, #24]
 80103c8:	e779      	b.n	80102be <_dtoa_r+0x816>
 80103ca:	4603      	mov	r3, r0
 80103cc:	e7f4      	b.n	80103b8 <_dtoa_r+0x910>
 80103ce:	9b04      	ldr	r3, [sp, #16]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	dc37      	bgt.n	8010444 <_dtoa_r+0x99c>
 80103d4:	9b07      	ldr	r3, [sp, #28]
 80103d6:	2b02      	cmp	r3, #2
 80103d8:	dd34      	ble.n	8010444 <_dtoa_r+0x99c>
 80103da:	9b04      	ldr	r3, [sp, #16]
 80103dc:	9301      	str	r3, [sp, #4]
 80103de:	9b01      	ldr	r3, [sp, #4]
 80103e0:	b963      	cbnz	r3, 80103fc <_dtoa_r+0x954>
 80103e2:	4631      	mov	r1, r6
 80103e4:	2205      	movs	r2, #5
 80103e6:	4620      	mov	r0, r4
 80103e8:	f000 fab2 	bl	8010950 <__multadd>
 80103ec:	4601      	mov	r1, r0
 80103ee:	4606      	mov	r6, r0
 80103f0:	4650      	mov	r0, sl
 80103f2:	f000 fcc7 	bl	8010d84 <__mcmp>
 80103f6:	2800      	cmp	r0, #0
 80103f8:	f73f adbb 	bgt.w	800ff72 <_dtoa_r+0x4ca>
 80103fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103fe:	9d00      	ldr	r5, [sp, #0]
 8010400:	ea6f 0b03 	mvn.w	fp, r3
 8010404:	f04f 0800 	mov.w	r8, #0
 8010408:	4631      	mov	r1, r6
 801040a:	4620      	mov	r0, r4
 801040c:	f000 fa7e 	bl	801090c <_Bfree>
 8010410:	2f00      	cmp	r7, #0
 8010412:	f43f aeab 	beq.w	801016c <_dtoa_r+0x6c4>
 8010416:	f1b8 0f00 	cmp.w	r8, #0
 801041a:	d005      	beq.n	8010428 <_dtoa_r+0x980>
 801041c:	45b8      	cmp	r8, r7
 801041e:	d003      	beq.n	8010428 <_dtoa_r+0x980>
 8010420:	4641      	mov	r1, r8
 8010422:	4620      	mov	r0, r4
 8010424:	f000 fa72 	bl	801090c <_Bfree>
 8010428:	4639      	mov	r1, r7
 801042a:	4620      	mov	r0, r4
 801042c:	f000 fa6e 	bl	801090c <_Bfree>
 8010430:	e69c      	b.n	801016c <_dtoa_r+0x6c4>
 8010432:	2600      	movs	r6, #0
 8010434:	4637      	mov	r7, r6
 8010436:	e7e1      	b.n	80103fc <_dtoa_r+0x954>
 8010438:	46bb      	mov	fp, r7
 801043a:	4637      	mov	r7, r6
 801043c:	e599      	b.n	800ff72 <_dtoa_r+0x4ca>
 801043e:	bf00      	nop
 8010440:	40240000 	.word	0x40240000
 8010444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010446:	2b00      	cmp	r3, #0
 8010448:	f000 80c8 	beq.w	80105dc <_dtoa_r+0xb34>
 801044c:	9b04      	ldr	r3, [sp, #16]
 801044e:	9301      	str	r3, [sp, #4]
 8010450:	2d00      	cmp	r5, #0
 8010452:	dd05      	ble.n	8010460 <_dtoa_r+0x9b8>
 8010454:	4639      	mov	r1, r7
 8010456:	462a      	mov	r2, r5
 8010458:	4620      	mov	r0, r4
 801045a:	f000 fc27 	bl	8010cac <__lshift>
 801045e:	4607      	mov	r7, r0
 8010460:	f1b8 0f00 	cmp.w	r8, #0
 8010464:	d05b      	beq.n	801051e <_dtoa_r+0xa76>
 8010466:	6879      	ldr	r1, [r7, #4]
 8010468:	4620      	mov	r0, r4
 801046a:	f000 fa0f 	bl	801088c <_Balloc>
 801046e:	4605      	mov	r5, r0
 8010470:	b928      	cbnz	r0, 801047e <_dtoa_r+0x9d6>
 8010472:	4b83      	ldr	r3, [pc, #524]	; (8010680 <_dtoa_r+0xbd8>)
 8010474:	4602      	mov	r2, r0
 8010476:	f240 21ef 	movw	r1, #751	; 0x2ef
 801047a:	f7ff bb2e 	b.w	800fada <_dtoa_r+0x32>
 801047e:	693a      	ldr	r2, [r7, #16]
 8010480:	3202      	adds	r2, #2
 8010482:	0092      	lsls	r2, r2, #2
 8010484:	f107 010c 	add.w	r1, r7, #12
 8010488:	300c      	adds	r0, #12
 801048a:	f7ff fa56 	bl	800f93a <memcpy>
 801048e:	2201      	movs	r2, #1
 8010490:	4629      	mov	r1, r5
 8010492:	4620      	mov	r0, r4
 8010494:	f000 fc0a 	bl	8010cac <__lshift>
 8010498:	9b00      	ldr	r3, [sp, #0]
 801049a:	3301      	adds	r3, #1
 801049c:	9304      	str	r3, [sp, #16]
 801049e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104a2:	4413      	add	r3, r2
 80104a4:	9308      	str	r3, [sp, #32]
 80104a6:	9b02      	ldr	r3, [sp, #8]
 80104a8:	f003 0301 	and.w	r3, r3, #1
 80104ac:	46b8      	mov	r8, r7
 80104ae:	9306      	str	r3, [sp, #24]
 80104b0:	4607      	mov	r7, r0
 80104b2:	9b04      	ldr	r3, [sp, #16]
 80104b4:	4631      	mov	r1, r6
 80104b6:	3b01      	subs	r3, #1
 80104b8:	4650      	mov	r0, sl
 80104ba:	9301      	str	r3, [sp, #4]
 80104bc:	f7ff fa6a 	bl	800f994 <quorem>
 80104c0:	4641      	mov	r1, r8
 80104c2:	9002      	str	r0, [sp, #8]
 80104c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80104c8:	4650      	mov	r0, sl
 80104ca:	f000 fc5b 	bl	8010d84 <__mcmp>
 80104ce:	463a      	mov	r2, r7
 80104d0:	9005      	str	r0, [sp, #20]
 80104d2:	4631      	mov	r1, r6
 80104d4:	4620      	mov	r0, r4
 80104d6:	f000 fc71 	bl	8010dbc <__mdiff>
 80104da:	68c2      	ldr	r2, [r0, #12]
 80104dc:	4605      	mov	r5, r0
 80104de:	bb02      	cbnz	r2, 8010522 <_dtoa_r+0xa7a>
 80104e0:	4601      	mov	r1, r0
 80104e2:	4650      	mov	r0, sl
 80104e4:	f000 fc4e 	bl	8010d84 <__mcmp>
 80104e8:	4602      	mov	r2, r0
 80104ea:	4629      	mov	r1, r5
 80104ec:	4620      	mov	r0, r4
 80104ee:	9209      	str	r2, [sp, #36]	; 0x24
 80104f0:	f000 fa0c 	bl	801090c <_Bfree>
 80104f4:	9b07      	ldr	r3, [sp, #28]
 80104f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104f8:	9d04      	ldr	r5, [sp, #16]
 80104fa:	ea43 0102 	orr.w	r1, r3, r2
 80104fe:	9b06      	ldr	r3, [sp, #24]
 8010500:	4319      	orrs	r1, r3
 8010502:	d110      	bne.n	8010526 <_dtoa_r+0xa7e>
 8010504:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010508:	d029      	beq.n	801055e <_dtoa_r+0xab6>
 801050a:	9b05      	ldr	r3, [sp, #20]
 801050c:	2b00      	cmp	r3, #0
 801050e:	dd02      	ble.n	8010516 <_dtoa_r+0xa6e>
 8010510:	9b02      	ldr	r3, [sp, #8]
 8010512:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010516:	9b01      	ldr	r3, [sp, #4]
 8010518:	f883 9000 	strb.w	r9, [r3]
 801051c:	e774      	b.n	8010408 <_dtoa_r+0x960>
 801051e:	4638      	mov	r0, r7
 8010520:	e7ba      	b.n	8010498 <_dtoa_r+0x9f0>
 8010522:	2201      	movs	r2, #1
 8010524:	e7e1      	b.n	80104ea <_dtoa_r+0xa42>
 8010526:	9b05      	ldr	r3, [sp, #20]
 8010528:	2b00      	cmp	r3, #0
 801052a:	db04      	blt.n	8010536 <_dtoa_r+0xa8e>
 801052c:	9907      	ldr	r1, [sp, #28]
 801052e:	430b      	orrs	r3, r1
 8010530:	9906      	ldr	r1, [sp, #24]
 8010532:	430b      	orrs	r3, r1
 8010534:	d120      	bne.n	8010578 <_dtoa_r+0xad0>
 8010536:	2a00      	cmp	r2, #0
 8010538:	dded      	ble.n	8010516 <_dtoa_r+0xa6e>
 801053a:	4651      	mov	r1, sl
 801053c:	2201      	movs	r2, #1
 801053e:	4620      	mov	r0, r4
 8010540:	f000 fbb4 	bl	8010cac <__lshift>
 8010544:	4631      	mov	r1, r6
 8010546:	4682      	mov	sl, r0
 8010548:	f000 fc1c 	bl	8010d84 <__mcmp>
 801054c:	2800      	cmp	r0, #0
 801054e:	dc03      	bgt.n	8010558 <_dtoa_r+0xab0>
 8010550:	d1e1      	bne.n	8010516 <_dtoa_r+0xa6e>
 8010552:	f019 0f01 	tst.w	r9, #1
 8010556:	d0de      	beq.n	8010516 <_dtoa_r+0xa6e>
 8010558:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801055c:	d1d8      	bne.n	8010510 <_dtoa_r+0xa68>
 801055e:	9a01      	ldr	r2, [sp, #4]
 8010560:	2339      	movs	r3, #57	; 0x39
 8010562:	7013      	strb	r3, [r2, #0]
 8010564:	462b      	mov	r3, r5
 8010566:	461d      	mov	r5, r3
 8010568:	3b01      	subs	r3, #1
 801056a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801056e:	2a39      	cmp	r2, #57	; 0x39
 8010570:	d06c      	beq.n	801064c <_dtoa_r+0xba4>
 8010572:	3201      	adds	r2, #1
 8010574:	701a      	strb	r2, [r3, #0]
 8010576:	e747      	b.n	8010408 <_dtoa_r+0x960>
 8010578:	2a00      	cmp	r2, #0
 801057a:	dd07      	ble.n	801058c <_dtoa_r+0xae4>
 801057c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010580:	d0ed      	beq.n	801055e <_dtoa_r+0xab6>
 8010582:	9a01      	ldr	r2, [sp, #4]
 8010584:	f109 0301 	add.w	r3, r9, #1
 8010588:	7013      	strb	r3, [r2, #0]
 801058a:	e73d      	b.n	8010408 <_dtoa_r+0x960>
 801058c:	9b04      	ldr	r3, [sp, #16]
 801058e:	9a08      	ldr	r2, [sp, #32]
 8010590:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010594:	4293      	cmp	r3, r2
 8010596:	d043      	beq.n	8010620 <_dtoa_r+0xb78>
 8010598:	4651      	mov	r1, sl
 801059a:	2300      	movs	r3, #0
 801059c:	220a      	movs	r2, #10
 801059e:	4620      	mov	r0, r4
 80105a0:	f000 f9d6 	bl	8010950 <__multadd>
 80105a4:	45b8      	cmp	r8, r7
 80105a6:	4682      	mov	sl, r0
 80105a8:	f04f 0300 	mov.w	r3, #0
 80105ac:	f04f 020a 	mov.w	r2, #10
 80105b0:	4641      	mov	r1, r8
 80105b2:	4620      	mov	r0, r4
 80105b4:	d107      	bne.n	80105c6 <_dtoa_r+0xb1e>
 80105b6:	f000 f9cb 	bl	8010950 <__multadd>
 80105ba:	4680      	mov	r8, r0
 80105bc:	4607      	mov	r7, r0
 80105be:	9b04      	ldr	r3, [sp, #16]
 80105c0:	3301      	adds	r3, #1
 80105c2:	9304      	str	r3, [sp, #16]
 80105c4:	e775      	b.n	80104b2 <_dtoa_r+0xa0a>
 80105c6:	f000 f9c3 	bl	8010950 <__multadd>
 80105ca:	4639      	mov	r1, r7
 80105cc:	4680      	mov	r8, r0
 80105ce:	2300      	movs	r3, #0
 80105d0:	220a      	movs	r2, #10
 80105d2:	4620      	mov	r0, r4
 80105d4:	f000 f9bc 	bl	8010950 <__multadd>
 80105d8:	4607      	mov	r7, r0
 80105da:	e7f0      	b.n	80105be <_dtoa_r+0xb16>
 80105dc:	9b04      	ldr	r3, [sp, #16]
 80105de:	9301      	str	r3, [sp, #4]
 80105e0:	9d00      	ldr	r5, [sp, #0]
 80105e2:	4631      	mov	r1, r6
 80105e4:	4650      	mov	r0, sl
 80105e6:	f7ff f9d5 	bl	800f994 <quorem>
 80105ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80105ee:	9b00      	ldr	r3, [sp, #0]
 80105f0:	f805 9b01 	strb.w	r9, [r5], #1
 80105f4:	1aea      	subs	r2, r5, r3
 80105f6:	9b01      	ldr	r3, [sp, #4]
 80105f8:	4293      	cmp	r3, r2
 80105fa:	dd07      	ble.n	801060c <_dtoa_r+0xb64>
 80105fc:	4651      	mov	r1, sl
 80105fe:	2300      	movs	r3, #0
 8010600:	220a      	movs	r2, #10
 8010602:	4620      	mov	r0, r4
 8010604:	f000 f9a4 	bl	8010950 <__multadd>
 8010608:	4682      	mov	sl, r0
 801060a:	e7ea      	b.n	80105e2 <_dtoa_r+0xb3a>
 801060c:	9b01      	ldr	r3, [sp, #4]
 801060e:	2b00      	cmp	r3, #0
 8010610:	bfc8      	it	gt
 8010612:	461d      	movgt	r5, r3
 8010614:	9b00      	ldr	r3, [sp, #0]
 8010616:	bfd8      	it	le
 8010618:	2501      	movle	r5, #1
 801061a:	441d      	add	r5, r3
 801061c:	f04f 0800 	mov.w	r8, #0
 8010620:	4651      	mov	r1, sl
 8010622:	2201      	movs	r2, #1
 8010624:	4620      	mov	r0, r4
 8010626:	f000 fb41 	bl	8010cac <__lshift>
 801062a:	4631      	mov	r1, r6
 801062c:	4682      	mov	sl, r0
 801062e:	f000 fba9 	bl	8010d84 <__mcmp>
 8010632:	2800      	cmp	r0, #0
 8010634:	dc96      	bgt.n	8010564 <_dtoa_r+0xabc>
 8010636:	d102      	bne.n	801063e <_dtoa_r+0xb96>
 8010638:	f019 0f01 	tst.w	r9, #1
 801063c:	d192      	bne.n	8010564 <_dtoa_r+0xabc>
 801063e:	462b      	mov	r3, r5
 8010640:	461d      	mov	r5, r3
 8010642:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010646:	2a30      	cmp	r2, #48	; 0x30
 8010648:	d0fa      	beq.n	8010640 <_dtoa_r+0xb98>
 801064a:	e6dd      	b.n	8010408 <_dtoa_r+0x960>
 801064c:	9a00      	ldr	r2, [sp, #0]
 801064e:	429a      	cmp	r2, r3
 8010650:	d189      	bne.n	8010566 <_dtoa_r+0xabe>
 8010652:	f10b 0b01 	add.w	fp, fp, #1
 8010656:	2331      	movs	r3, #49	; 0x31
 8010658:	e796      	b.n	8010588 <_dtoa_r+0xae0>
 801065a:	4b0a      	ldr	r3, [pc, #40]	; (8010684 <_dtoa_r+0xbdc>)
 801065c:	f7ff ba99 	b.w	800fb92 <_dtoa_r+0xea>
 8010660:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010662:	2b00      	cmp	r3, #0
 8010664:	f47f aa6d 	bne.w	800fb42 <_dtoa_r+0x9a>
 8010668:	4b07      	ldr	r3, [pc, #28]	; (8010688 <_dtoa_r+0xbe0>)
 801066a:	f7ff ba92 	b.w	800fb92 <_dtoa_r+0xea>
 801066e:	9b01      	ldr	r3, [sp, #4]
 8010670:	2b00      	cmp	r3, #0
 8010672:	dcb5      	bgt.n	80105e0 <_dtoa_r+0xb38>
 8010674:	9b07      	ldr	r3, [sp, #28]
 8010676:	2b02      	cmp	r3, #2
 8010678:	f73f aeb1 	bgt.w	80103de <_dtoa_r+0x936>
 801067c:	e7b0      	b.n	80105e0 <_dtoa_r+0xb38>
 801067e:	bf00      	nop
 8010680:	08012d3f 	.word	0x08012d3f
 8010684:	08012c09 	.word	0x08012c09
 8010688:	08012cda 	.word	0x08012cda

0801068c <_free_r>:
 801068c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801068e:	2900      	cmp	r1, #0
 8010690:	d044      	beq.n	801071c <_free_r+0x90>
 8010692:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010696:	9001      	str	r0, [sp, #4]
 8010698:	2b00      	cmp	r3, #0
 801069a:	f1a1 0404 	sub.w	r4, r1, #4
 801069e:	bfb8      	it	lt
 80106a0:	18e4      	addlt	r4, r4, r3
 80106a2:	f000 f8e7 	bl	8010874 <__malloc_lock>
 80106a6:	4a1e      	ldr	r2, [pc, #120]	; (8010720 <_free_r+0x94>)
 80106a8:	9801      	ldr	r0, [sp, #4]
 80106aa:	6813      	ldr	r3, [r2, #0]
 80106ac:	b933      	cbnz	r3, 80106bc <_free_r+0x30>
 80106ae:	6063      	str	r3, [r4, #4]
 80106b0:	6014      	str	r4, [r2, #0]
 80106b2:	b003      	add	sp, #12
 80106b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80106b8:	f000 b8e2 	b.w	8010880 <__malloc_unlock>
 80106bc:	42a3      	cmp	r3, r4
 80106be:	d908      	bls.n	80106d2 <_free_r+0x46>
 80106c0:	6825      	ldr	r5, [r4, #0]
 80106c2:	1961      	adds	r1, r4, r5
 80106c4:	428b      	cmp	r3, r1
 80106c6:	bf01      	itttt	eq
 80106c8:	6819      	ldreq	r1, [r3, #0]
 80106ca:	685b      	ldreq	r3, [r3, #4]
 80106cc:	1949      	addeq	r1, r1, r5
 80106ce:	6021      	streq	r1, [r4, #0]
 80106d0:	e7ed      	b.n	80106ae <_free_r+0x22>
 80106d2:	461a      	mov	r2, r3
 80106d4:	685b      	ldr	r3, [r3, #4]
 80106d6:	b10b      	cbz	r3, 80106dc <_free_r+0x50>
 80106d8:	42a3      	cmp	r3, r4
 80106da:	d9fa      	bls.n	80106d2 <_free_r+0x46>
 80106dc:	6811      	ldr	r1, [r2, #0]
 80106de:	1855      	adds	r5, r2, r1
 80106e0:	42a5      	cmp	r5, r4
 80106e2:	d10b      	bne.n	80106fc <_free_r+0x70>
 80106e4:	6824      	ldr	r4, [r4, #0]
 80106e6:	4421      	add	r1, r4
 80106e8:	1854      	adds	r4, r2, r1
 80106ea:	42a3      	cmp	r3, r4
 80106ec:	6011      	str	r1, [r2, #0]
 80106ee:	d1e0      	bne.n	80106b2 <_free_r+0x26>
 80106f0:	681c      	ldr	r4, [r3, #0]
 80106f2:	685b      	ldr	r3, [r3, #4]
 80106f4:	6053      	str	r3, [r2, #4]
 80106f6:	440c      	add	r4, r1
 80106f8:	6014      	str	r4, [r2, #0]
 80106fa:	e7da      	b.n	80106b2 <_free_r+0x26>
 80106fc:	d902      	bls.n	8010704 <_free_r+0x78>
 80106fe:	230c      	movs	r3, #12
 8010700:	6003      	str	r3, [r0, #0]
 8010702:	e7d6      	b.n	80106b2 <_free_r+0x26>
 8010704:	6825      	ldr	r5, [r4, #0]
 8010706:	1961      	adds	r1, r4, r5
 8010708:	428b      	cmp	r3, r1
 801070a:	bf04      	itt	eq
 801070c:	6819      	ldreq	r1, [r3, #0]
 801070e:	685b      	ldreq	r3, [r3, #4]
 8010710:	6063      	str	r3, [r4, #4]
 8010712:	bf04      	itt	eq
 8010714:	1949      	addeq	r1, r1, r5
 8010716:	6021      	streq	r1, [r4, #0]
 8010718:	6054      	str	r4, [r2, #4]
 801071a:	e7ca      	b.n	80106b2 <_free_r+0x26>
 801071c:	b003      	add	sp, #12
 801071e:	bd30      	pop	{r4, r5, pc}
 8010720:	200052b8 	.word	0x200052b8

08010724 <malloc>:
 8010724:	4b02      	ldr	r3, [pc, #8]	; (8010730 <malloc+0xc>)
 8010726:	4601      	mov	r1, r0
 8010728:	6818      	ldr	r0, [r3, #0]
 801072a:	f000 b823 	b.w	8010774 <_malloc_r>
 801072e:	bf00      	nop
 8010730:	200001e8 	.word	0x200001e8

08010734 <sbrk_aligned>:
 8010734:	b570      	push	{r4, r5, r6, lr}
 8010736:	4e0e      	ldr	r6, [pc, #56]	; (8010770 <sbrk_aligned+0x3c>)
 8010738:	460c      	mov	r4, r1
 801073a:	6831      	ldr	r1, [r6, #0]
 801073c:	4605      	mov	r5, r0
 801073e:	b911      	cbnz	r1, 8010746 <sbrk_aligned+0x12>
 8010740:	f000 fe52 	bl	80113e8 <_sbrk_r>
 8010744:	6030      	str	r0, [r6, #0]
 8010746:	4621      	mov	r1, r4
 8010748:	4628      	mov	r0, r5
 801074a:	f000 fe4d 	bl	80113e8 <_sbrk_r>
 801074e:	1c43      	adds	r3, r0, #1
 8010750:	d00a      	beq.n	8010768 <sbrk_aligned+0x34>
 8010752:	1cc4      	adds	r4, r0, #3
 8010754:	f024 0403 	bic.w	r4, r4, #3
 8010758:	42a0      	cmp	r0, r4
 801075a:	d007      	beq.n	801076c <sbrk_aligned+0x38>
 801075c:	1a21      	subs	r1, r4, r0
 801075e:	4628      	mov	r0, r5
 8010760:	f000 fe42 	bl	80113e8 <_sbrk_r>
 8010764:	3001      	adds	r0, #1
 8010766:	d101      	bne.n	801076c <sbrk_aligned+0x38>
 8010768:	f04f 34ff 	mov.w	r4, #4294967295
 801076c:	4620      	mov	r0, r4
 801076e:	bd70      	pop	{r4, r5, r6, pc}
 8010770:	200052bc 	.word	0x200052bc

08010774 <_malloc_r>:
 8010774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010778:	1ccd      	adds	r5, r1, #3
 801077a:	f025 0503 	bic.w	r5, r5, #3
 801077e:	3508      	adds	r5, #8
 8010780:	2d0c      	cmp	r5, #12
 8010782:	bf38      	it	cc
 8010784:	250c      	movcc	r5, #12
 8010786:	2d00      	cmp	r5, #0
 8010788:	4607      	mov	r7, r0
 801078a:	db01      	blt.n	8010790 <_malloc_r+0x1c>
 801078c:	42a9      	cmp	r1, r5
 801078e:	d905      	bls.n	801079c <_malloc_r+0x28>
 8010790:	230c      	movs	r3, #12
 8010792:	603b      	str	r3, [r7, #0]
 8010794:	2600      	movs	r6, #0
 8010796:	4630      	mov	r0, r6
 8010798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801079c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010870 <_malloc_r+0xfc>
 80107a0:	f000 f868 	bl	8010874 <__malloc_lock>
 80107a4:	f8d8 3000 	ldr.w	r3, [r8]
 80107a8:	461c      	mov	r4, r3
 80107aa:	bb5c      	cbnz	r4, 8010804 <_malloc_r+0x90>
 80107ac:	4629      	mov	r1, r5
 80107ae:	4638      	mov	r0, r7
 80107b0:	f7ff ffc0 	bl	8010734 <sbrk_aligned>
 80107b4:	1c43      	adds	r3, r0, #1
 80107b6:	4604      	mov	r4, r0
 80107b8:	d155      	bne.n	8010866 <_malloc_r+0xf2>
 80107ba:	f8d8 4000 	ldr.w	r4, [r8]
 80107be:	4626      	mov	r6, r4
 80107c0:	2e00      	cmp	r6, #0
 80107c2:	d145      	bne.n	8010850 <_malloc_r+0xdc>
 80107c4:	2c00      	cmp	r4, #0
 80107c6:	d048      	beq.n	801085a <_malloc_r+0xe6>
 80107c8:	6823      	ldr	r3, [r4, #0]
 80107ca:	4631      	mov	r1, r6
 80107cc:	4638      	mov	r0, r7
 80107ce:	eb04 0903 	add.w	r9, r4, r3
 80107d2:	f000 fe09 	bl	80113e8 <_sbrk_r>
 80107d6:	4581      	cmp	r9, r0
 80107d8:	d13f      	bne.n	801085a <_malloc_r+0xe6>
 80107da:	6821      	ldr	r1, [r4, #0]
 80107dc:	1a6d      	subs	r5, r5, r1
 80107de:	4629      	mov	r1, r5
 80107e0:	4638      	mov	r0, r7
 80107e2:	f7ff ffa7 	bl	8010734 <sbrk_aligned>
 80107e6:	3001      	adds	r0, #1
 80107e8:	d037      	beq.n	801085a <_malloc_r+0xe6>
 80107ea:	6823      	ldr	r3, [r4, #0]
 80107ec:	442b      	add	r3, r5
 80107ee:	6023      	str	r3, [r4, #0]
 80107f0:	f8d8 3000 	ldr.w	r3, [r8]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d038      	beq.n	801086a <_malloc_r+0xf6>
 80107f8:	685a      	ldr	r2, [r3, #4]
 80107fa:	42a2      	cmp	r2, r4
 80107fc:	d12b      	bne.n	8010856 <_malloc_r+0xe2>
 80107fe:	2200      	movs	r2, #0
 8010800:	605a      	str	r2, [r3, #4]
 8010802:	e00f      	b.n	8010824 <_malloc_r+0xb0>
 8010804:	6822      	ldr	r2, [r4, #0]
 8010806:	1b52      	subs	r2, r2, r5
 8010808:	d41f      	bmi.n	801084a <_malloc_r+0xd6>
 801080a:	2a0b      	cmp	r2, #11
 801080c:	d917      	bls.n	801083e <_malloc_r+0xca>
 801080e:	1961      	adds	r1, r4, r5
 8010810:	42a3      	cmp	r3, r4
 8010812:	6025      	str	r5, [r4, #0]
 8010814:	bf18      	it	ne
 8010816:	6059      	strne	r1, [r3, #4]
 8010818:	6863      	ldr	r3, [r4, #4]
 801081a:	bf08      	it	eq
 801081c:	f8c8 1000 	streq.w	r1, [r8]
 8010820:	5162      	str	r2, [r4, r5]
 8010822:	604b      	str	r3, [r1, #4]
 8010824:	4638      	mov	r0, r7
 8010826:	f104 060b 	add.w	r6, r4, #11
 801082a:	f000 f829 	bl	8010880 <__malloc_unlock>
 801082e:	f026 0607 	bic.w	r6, r6, #7
 8010832:	1d23      	adds	r3, r4, #4
 8010834:	1af2      	subs	r2, r6, r3
 8010836:	d0ae      	beq.n	8010796 <_malloc_r+0x22>
 8010838:	1b9b      	subs	r3, r3, r6
 801083a:	50a3      	str	r3, [r4, r2]
 801083c:	e7ab      	b.n	8010796 <_malloc_r+0x22>
 801083e:	42a3      	cmp	r3, r4
 8010840:	6862      	ldr	r2, [r4, #4]
 8010842:	d1dd      	bne.n	8010800 <_malloc_r+0x8c>
 8010844:	f8c8 2000 	str.w	r2, [r8]
 8010848:	e7ec      	b.n	8010824 <_malloc_r+0xb0>
 801084a:	4623      	mov	r3, r4
 801084c:	6864      	ldr	r4, [r4, #4]
 801084e:	e7ac      	b.n	80107aa <_malloc_r+0x36>
 8010850:	4634      	mov	r4, r6
 8010852:	6876      	ldr	r6, [r6, #4]
 8010854:	e7b4      	b.n	80107c0 <_malloc_r+0x4c>
 8010856:	4613      	mov	r3, r2
 8010858:	e7cc      	b.n	80107f4 <_malloc_r+0x80>
 801085a:	230c      	movs	r3, #12
 801085c:	603b      	str	r3, [r7, #0]
 801085e:	4638      	mov	r0, r7
 8010860:	f000 f80e 	bl	8010880 <__malloc_unlock>
 8010864:	e797      	b.n	8010796 <_malloc_r+0x22>
 8010866:	6025      	str	r5, [r4, #0]
 8010868:	e7dc      	b.n	8010824 <_malloc_r+0xb0>
 801086a:	605b      	str	r3, [r3, #4]
 801086c:	deff      	udf	#255	; 0xff
 801086e:	bf00      	nop
 8010870:	200052b8 	.word	0x200052b8

08010874 <__malloc_lock>:
 8010874:	4801      	ldr	r0, [pc, #4]	; (801087c <__malloc_lock+0x8>)
 8010876:	f7ff b85e 	b.w	800f936 <__retarget_lock_acquire_recursive>
 801087a:	bf00      	nop
 801087c:	200052b4 	.word	0x200052b4

08010880 <__malloc_unlock>:
 8010880:	4801      	ldr	r0, [pc, #4]	; (8010888 <__malloc_unlock+0x8>)
 8010882:	f7ff b859 	b.w	800f938 <__retarget_lock_release_recursive>
 8010886:	bf00      	nop
 8010888:	200052b4 	.word	0x200052b4

0801088c <_Balloc>:
 801088c:	b570      	push	{r4, r5, r6, lr}
 801088e:	69c6      	ldr	r6, [r0, #28]
 8010890:	4604      	mov	r4, r0
 8010892:	460d      	mov	r5, r1
 8010894:	b976      	cbnz	r6, 80108b4 <_Balloc+0x28>
 8010896:	2010      	movs	r0, #16
 8010898:	f7ff ff44 	bl	8010724 <malloc>
 801089c:	4602      	mov	r2, r0
 801089e:	61e0      	str	r0, [r4, #28]
 80108a0:	b920      	cbnz	r0, 80108ac <_Balloc+0x20>
 80108a2:	4b18      	ldr	r3, [pc, #96]	; (8010904 <_Balloc+0x78>)
 80108a4:	4818      	ldr	r0, [pc, #96]	; (8010908 <_Balloc+0x7c>)
 80108a6:	216b      	movs	r1, #107	; 0x6b
 80108a8:	f7ff f856 	bl	800f958 <__assert_func>
 80108ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80108b0:	6006      	str	r6, [r0, #0]
 80108b2:	60c6      	str	r6, [r0, #12]
 80108b4:	69e6      	ldr	r6, [r4, #28]
 80108b6:	68f3      	ldr	r3, [r6, #12]
 80108b8:	b183      	cbz	r3, 80108dc <_Balloc+0x50>
 80108ba:	69e3      	ldr	r3, [r4, #28]
 80108bc:	68db      	ldr	r3, [r3, #12]
 80108be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80108c2:	b9b8      	cbnz	r0, 80108f4 <_Balloc+0x68>
 80108c4:	2101      	movs	r1, #1
 80108c6:	fa01 f605 	lsl.w	r6, r1, r5
 80108ca:	1d72      	adds	r2, r6, #5
 80108cc:	0092      	lsls	r2, r2, #2
 80108ce:	4620      	mov	r0, r4
 80108d0:	f000 fda1 	bl	8011416 <_calloc_r>
 80108d4:	b160      	cbz	r0, 80108f0 <_Balloc+0x64>
 80108d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80108da:	e00e      	b.n	80108fa <_Balloc+0x6e>
 80108dc:	2221      	movs	r2, #33	; 0x21
 80108de:	2104      	movs	r1, #4
 80108e0:	4620      	mov	r0, r4
 80108e2:	f000 fd98 	bl	8011416 <_calloc_r>
 80108e6:	69e3      	ldr	r3, [r4, #28]
 80108e8:	60f0      	str	r0, [r6, #12]
 80108ea:	68db      	ldr	r3, [r3, #12]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d1e4      	bne.n	80108ba <_Balloc+0x2e>
 80108f0:	2000      	movs	r0, #0
 80108f2:	bd70      	pop	{r4, r5, r6, pc}
 80108f4:	6802      	ldr	r2, [r0, #0]
 80108f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80108fa:	2300      	movs	r3, #0
 80108fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010900:	e7f7      	b.n	80108f2 <_Balloc+0x66>
 8010902:	bf00      	nop
 8010904:	08012c2d 	.word	0x08012c2d
 8010908:	08012d50 	.word	0x08012d50

0801090c <_Bfree>:
 801090c:	b570      	push	{r4, r5, r6, lr}
 801090e:	69c6      	ldr	r6, [r0, #28]
 8010910:	4605      	mov	r5, r0
 8010912:	460c      	mov	r4, r1
 8010914:	b976      	cbnz	r6, 8010934 <_Bfree+0x28>
 8010916:	2010      	movs	r0, #16
 8010918:	f7ff ff04 	bl	8010724 <malloc>
 801091c:	4602      	mov	r2, r0
 801091e:	61e8      	str	r0, [r5, #28]
 8010920:	b920      	cbnz	r0, 801092c <_Bfree+0x20>
 8010922:	4b09      	ldr	r3, [pc, #36]	; (8010948 <_Bfree+0x3c>)
 8010924:	4809      	ldr	r0, [pc, #36]	; (801094c <_Bfree+0x40>)
 8010926:	218f      	movs	r1, #143	; 0x8f
 8010928:	f7ff f816 	bl	800f958 <__assert_func>
 801092c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010930:	6006      	str	r6, [r0, #0]
 8010932:	60c6      	str	r6, [r0, #12]
 8010934:	b13c      	cbz	r4, 8010946 <_Bfree+0x3a>
 8010936:	69eb      	ldr	r3, [r5, #28]
 8010938:	6862      	ldr	r2, [r4, #4]
 801093a:	68db      	ldr	r3, [r3, #12]
 801093c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010940:	6021      	str	r1, [r4, #0]
 8010942:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010946:	bd70      	pop	{r4, r5, r6, pc}
 8010948:	08012c2d 	.word	0x08012c2d
 801094c:	08012d50 	.word	0x08012d50

08010950 <__multadd>:
 8010950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010954:	690d      	ldr	r5, [r1, #16]
 8010956:	4607      	mov	r7, r0
 8010958:	460c      	mov	r4, r1
 801095a:	461e      	mov	r6, r3
 801095c:	f101 0c14 	add.w	ip, r1, #20
 8010960:	2000      	movs	r0, #0
 8010962:	f8dc 3000 	ldr.w	r3, [ip]
 8010966:	b299      	uxth	r1, r3
 8010968:	fb02 6101 	mla	r1, r2, r1, r6
 801096c:	0c1e      	lsrs	r6, r3, #16
 801096e:	0c0b      	lsrs	r3, r1, #16
 8010970:	fb02 3306 	mla	r3, r2, r6, r3
 8010974:	b289      	uxth	r1, r1
 8010976:	3001      	adds	r0, #1
 8010978:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801097c:	4285      	cmp	r5, r0
 801097e:	f84c 1b04 	str.w	r1, [ip], #4
 8010982:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010986:	dcec      	bgt.n	8010962 <__multadd+0x12>
 8010988:	b30e      	cbz	r6, 80109ce <__multadd+0x7e>
 801098a:	68a3      	ldr	r3, [r4, #8]
 801098c:	42ab      	cmp	r3, r5
 801098e:	dc19      	bgt.n	80109c4 <__multadd+0x74>
 8010990:	6861      	ldr	r1, [r4, #4]
 8010992:	4638      	mov	r0, r7
 8010994:	3101      	adds	r1, #1
 8010996:	f7ff ff79 	bl	801088c <_Balloc>
 801099a:	4680      	mov	r8, r0
 801099c:	b928      	cbnz	r0, 80109aa <__multadd+0x5a>
 801099e:	4602      	mov	r2, r0
 80109a0:	4b0c      	ldr	r3, [pc, #48]	; (80109d4 <__multadd+0x84>)
 80109a2:	480d      	ldr	r0, [pc, #52]	; (80109d8 <__multadd+0x88>)
 80109a4:	21ba      	movs	r1, #186	; 0xba
 80109a6:	f7fe ffd7 	bl	800f958 <__assert_func>
 80109aa:	6922      	ldr	r2, [r4, #16]
 80109ac:	3202      	adds	r2, #2
 80109ae:	f104 010c 	add.w	r1, r4, #12
 80109b2:	0092      	lsls	r2, r2, #2
 80109b4:	300c      	adds	r0, #12
 80109b6:	f7fe ffc0 	bl	800f93a <memcpy>
 80109ba:	4621      	mov	r1, r4
 80109bc:	4638      	mov	r0, r7
 80109be:	f7ff ffa5 	bl	801090c <_Bfree>
 80109c2:	4644      	mov	r4, r8
 80109c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80109c8:	3501      	adds	r5, #1
 80109ca:	615e      	str	r6, [r3, #20]
 80109cc:	6125      	str	r5, [r4, #16]
 80109ce:	4620      	mov	r0, r4
 80109d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109d4:	08012d3f 	.word	0x08012d3f
 80109d8:	08012d50 	.word	0x08012d50

080109dc <__hi0bits>:
 80109dc:	0c03      	lsrs	r3, r0, #16
 80109de:	041b      	lsls	r3, r3, #16
 80109e0:	b9d3      	cbnz	r3, 8010a18 <__hi0bits+0x3c>
 80109e2:	0400      	lsls	r0, r0, #16
 80109e4:	2310      	movs	r3, #16
 80109e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80109ea:	bf04      	itt	eq
 80109ec:	0200      	lsleq	r0, r0, #8
 80109ee:	3308      	addeq	r3, #8
 80109f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80109f4:	bf04      	itt	eq
 80109f6:	0100      	lsleq	r0, r0, #4
 80109f8:	3304      	addeq	r3, #4
 80109fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80109fe:	bf04      	itt	eq
 8010a00:	0080      	lsleq	r0, r0, #2
 8010a02:	3302      	addeq	r3, #2
 8010a04:	2800      	cmp	r0, #0
 8010a06:	db05      	blt.n	8010a14 <__hi0bits+0x38>
 8010a08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010a0c:	f103 0301 	add.w	r3, r3, #1
 8010a10:	bf08      	it	eq
 8010a12:	2320      	moveq	r3, #32
 8010a14:	4618      	mov	r0, r3
 8010a16:	4770      	bx	lr
 8010a18:	2300      	movs	r3, #0
 8010a1a:	e7e4      	b.n	80109e6 <__hi0bits+0xa>

08010a1c <__lo0bits>:
 8010a1c:	6803      	ldr	r3, [r0, #0]
 8010a1e:	f013 0207 	ands.w	r2, r3, #7
 8010a22:	d00c      	beq.n	8010a3e <__lo0bits+0x22>
 8010a24:	07d9      	lsls	r1, r3, #31
 8010a26:	d422      	bmi.n	8010a6e <__lo0bits+0x52>
 8010a28:	079a      	lsls	r2, r3, #30
 8010a2a:	bf49      	itett	mi
 8010a2c:	085b      	lsrmi	r3, r3, #1
 8010a2e:	089b      	lsrpl	r3, r3, #2
 8010a30:	6003      	strmi	r3, [r0, #0]
 8010a32:	2201      	movmi	r2, #1
 8010a34:	bf5c      	itt	pl
 8010a36:	6003      	strpl	r3, [r0, #0]
 8010a38:	2202      	movpl	r2, #2
 8010a3a:	4610      	mov	r0, r2
 8010a3c:	4770      	bx	lr
 8010a3e:	b299      	uxth	r1, r3
 8010a40:	b909      	cbnz	r1, 8010a46 <__lo0bits+0x2a>
 8010a42:	0c1b      	lsrs	r3, r3, #16
 8010a44:	2210      	movs	r2, #16
 8010a46:	b2d9      	uxtb	r1, r3
 8010a48:	b909      	cbnz	r1, 8010a4e <__lo0bits+0x32>
 8010a4a:	3208      	adds	r2, #8
 8010a4c:	0a1b      	lsrs	r3, r3, #8
 8010a4e:	0719      	lsls	r1, r3, #28
 8010a50:	bf04      	itt	eq
 8010a52:	091b      	lsreq	r3, r3, #4
 8010a54:	3204      	addeq	r2, #4
 8010a56:	0799      	lsls	r1, r3, #30
 8010a58:	bf04      	itt	eq
 8010a5a:	089b      	lsreq	r3, r3, #2
 8010a5c:	3202      	addeq	r2, #2
 8010a5e:	07d9      	lsls	r1, r3, #31
 8010a60:	d403      	bmi.n	8010a6a <__lo0bits+0x4e>
 8010a62:	085b      	lsrs	r3, r3, #1
 8010a64:	f102 0201 	add.w	r2, r2, #1
 8010a68:	d003      	beq.n	8010a72 <__lo0bits+0x56>
 8010a6a:	6003      	str	r3, [r0, #0]
 8010a6c:	e7e5      	b.n	8010a3a <__lo0bits+0x1e>
 8010a6e:	2200      	movs	r2, #0
 8010a70:	e7e3      	b.n	8010a3a <__lo0bits+0x1e>
 8010a72:	2220      	movs	r2, #32
 8010a74:	e7e1      	b.n	8010a3a <__lo0bits+0x1e>
	...

08010a78 <__i2b>:
 8010a78:	b510      	push	{r4, lr}
 8010a7a:	460c      	mov	r4, r1
 8010a7c:	2101      	movs	r1, #1
 8010a7e:	f7ff ff05 	bl	801088c <_Balloc>
 8010a82:	4602      	mov	r2, r0
 8010a84:	b928      	cbnz	r0, 8010a92 <__i2b+0x1a>
 8010a86:	4b05      	ldr	r3, [pc, #20]	; (8010a9c <__i2b+0x24>)
 8010a88:	4805      	ldr	r0, [pc, #20]	; (8010aa0 <__i2b+0x28>)
 8010a8a:	f240 1145 	movw	r1, #325	; 0x145
 8010a8e:	f7fe ff63 	bl	800f958 <__assert_func>
 8010a92:	2301      	movs	r3, #1
 8010a94:	6144      	str	r4, [r0, #20]
 8010a96:	6103      	str	r3, [r0, #16]
 8010a98:	bd10      	pop	{r4, pc}
 8010a9a:	bf00      	nop
 8010a9c:	08012d3f 	.word	0x08012d3f
 8010aa0:	08012d50 	.word	0x08012d50

08010aa4 <__multiply>:
 8010aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aa8:	4691      	mov	r9, r2
 8010aaa:	690a      	ldr	r2, [r1, #16]
 8010aac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010ab0:	429a      	cmp	r2, r3
 8010ab2:	bfb8      	it	lt
 8010ab4:	460b      	movlt	r3, r1
 8010ab6:	460c      	mov	r4, r1
 8010ab8:	bfbc      	itt	lt
 8010aba:	464c      	movlt	r4, r9
 8010abc:	4699      	movlt	r9, r3
 8010abe:	6927      	ldr	r7, [r4, #16]
 8010ac0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010ac4:	68a3      	ldr	r3, [r4, #8]
 8010ac6:	6861      	ldr	r1, [r4, #4]
 8010ac8:	eb07 060a 	add.w	r6, r7, sl
 8010acc:	42b3      	cmp	r3, r6
 8010ace:	b085      	sub	sp, #20
 8010ad0:	bfb8      	it	lt
 8010ad2:	3101      	addlt	r1, #1
 8010ad4:	f7ff feda 	bl	801088c <_Balloc>
 8010ad8:	b930      	cbnz	r0, 8010ae8 <__multiply+0x44>
 8010ada:	4602      	mov	r2, r0
 8010adc:	4b44      	ldr	r3, [pc, #272]	; (8010bf0 <__multiply+0x14c>)
 8010ade:	4845      	ldr	r0, [pc, #276]	; (8010bf4 <__multiply+0x150>)
 8010ae0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010ae4:	f7fe ff38 	bl	800f958 <__assert_func>
 8010ae8:	f100 0514 	add.w	r5, r0, #20
 8010aec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010af0:	462b      	mov	r3, r5
 8010af2:	2200      	movs	r2, #0
 8010af4:	4543      	cmp	r3, r8
 8010af6:	d321      	bcc.n	8010b3c <__multiply+0x98>
 8010af8:	f104 0314 	add.w	r3, r4, #20
 8010afc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010b00:	f109 0314 	add.w	r3, r9, #20
 8010b04:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010b08:	9202      	str	r2, [sp, #8]
 8010b0a:	1b3a      	subs	r2, r7, r4
 8010b0c:	3a15      	subs	r2, #21
 8010b0e:	f022 0203 	bic.w	r2, r2, #3
 8010b12:	3204      	adds	r2, #4
 8010b14:	f104 0115 	add.w	r1, r4, #21
 8010b18:	428f      	cmp	r7, r1
 8010b1a:	bf38      	it	cc
 8010b1c:	2204      	movcc	r2, #4
 8010b1e:	9201      	str	r2, [sp, #4]
 8010b20:	9a02      	ldr	r2, [sp, #8]
 8010b22:	9303      	str	r3, [sp, #12]
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d80c      	bhi.n	8010b42 <__multiply+0x9e>
 8010b28:	2e00      	cmp	r6, #0
 8010b2a:	dd03      	ble.n	8010b34 <__multiply+0x90>
 8010b2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d05b      	beq.n	8010bec <__multiply+0x148>
 8010b34:	6106      	str	r6, [r0, #16]
 8010b36:	b005      	add	sp, #20
 8010b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b3c:	f843 2b04 	str.w	r2, [r3], #4
 8010b40:	e7d8      	b.n	8010af4 <__multiply+0x50>
 8010b42:	f8b3 a000 	ldrh.w	sl, [r3]
 8010b46:	f1ba 0f00 	cmp.w	sl, #0
 8010b4a:	d024      	beq.n	8010b96 <__multiply+0xf2>
 8010b4c:	f104 0e14 	add.w	lr, r4, #20
 8010b50:	46a9      	mov	r9, r5
 8010b52:	f04f 0c00 	mov.w	ip, #0
 8010b56:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010b5a:	f8d9 1000 	ldr.w	r1, [r9]
 8010b5e:	fa1f fb82 	uxth.w	fp, r2
 8010b62:	b289      	uxth	r1, r1
 8010b64:	fb0a 110b 	mla	r1, sl, fp, r1
 8010b68:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010b6c:	f8d9 2000 	ldr.w	r2, [r9]
 8010b70:	4461      	add	r1, ip
 8010b72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010b76:	fb0a c20b 	mla	r2, sl, fp, ip
 8010b7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010b7e:	b289      	uxth	r1, r1
 8010b80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010b84:	4577      	cmp	r7, lr
 8010b86:	f849 1b04 	str.w	r1, [r9], #4
 8010b8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010b8e:	d8e2      	bhi.n	8010b56 <__multiply+0xb2>
 8010b90:	9a01      	ldr	r2, [sp, #4]
 8010b92:	f845 c002 	str.w	ip, [r5, r2]
 8010b96:	9a03      	ldr	r2, [sp, #12]
 8010b98:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010b9c:	3304      	adds	r3, #4
 8010b9e:	f1b9 0f00 	cmp.w	r9, #0
 8010ba2:	d021      	beq.n	8010be8 <__multiply+0x144>
 8010ba4:	6829      	ldr	r1, [r5, #0]
 8010ba6:	f104 0c14 	add.w	ip, r4, #20
 8010baa:	46ae      	mov	lr, r5
 8010bac:	f04f 0a00 	mov.w	sl, #0
 8010bb0:	f8bc b000 	ldrh.w	fp, [ip]
 8010bb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010bb8:	fb09 220b 	mla	r2, r9, fp, r2
 8010bbc:	4452      	add	r2, sl
 8010bbe:	b289      	uxth	r1, r1
 8010bc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010bc4:	f84e 1b04 	str.w	r1, [lr], #4
 8010bc8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010bcc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010bd0:	f8be 1000 	ldrh.w	r1, [lr]
 8010bd4:	fb09 110a 	mla	r1, r9, sl, r1
 8010bd8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010bdc:	4567      	cmp	r7, ip
 8010bde:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010be2:	d8e5      	bhi.n	8010bb0 <__multiply+0x10c>
 8010be4:	9a01      	ldr	r2, [sp, #4]
 8010be6:	50a9      	str	r1, [r5, r2]
 8010be8:	3504      	adds	r5, #4
 8010bea:	e799      	b.n	8010b20 <__multiply+0x7c>
 8010bec:	3e01      	subs	r6, #1
 8010bee:	e79b      	b.n	8010b28 <__multiply+0x84>
 8010bf0:	08012d3f 	.word	0x08012d3f
 8010bf4:	08012d50 	.word	0x08012d50

08010bf8 <__pow5mult>:
 8010bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bfc:	4615      	mov	r5, r2
 8010bfe:	f012 0203 	ands.w	r2, r2, #3
 8010c02:	4606      	mov	r6, r0
 8010c04:	460f      	mov	r7, r1
 8010c06:	d007      	beq.n	8010c18 <__pow5mult+0x20>
 8010c08:	4c25      	ldr	r4, [pc, #148]	; (8010ca0 <__pow5mult+0xa8>)
 8010c0a:	3a01      	subs	r2, #1
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010c12:	f7ff fe9d 	bl	8010950 <__multadd>
 8010c16:	4607      	mov	r7, r0
 8010c18:	10ad      	asrs	r5, r5, #2
 8010c1a:	d03d      	beq.n	8010c98 <__pow5mult+0xa0>
 8010c1c:	69f4      	ldr	r4, [r6, #28]
 8010c1e:	b97c      	cbnz	r4, 8010c40 <__pow5mult+0x48>
 8010c20:	2010      	movs	r0, #16
 8010c22:	f7ff fd7f 	bl	8010724 <malloc>
 8010c26:	4602      	mov	r2, r0
 8010c28:	61f0      	str	r0, [r6, #28]
 8010c2a:	b928      	cbnz	r0, 8010c38 <__pow5mult+0x40>
 8010c2c:	4b1d      	ldr	r3, [pc, #116]	; (8010ca4 <__pow5mult+0xac>)
 8010c2e:	481e      	ldr	r0, [pc, #120]	; (8010ca8 <__pow5mult+0xb0>)
 8010c30:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010c34:	f7fe fe90 	bl	800f958 <__assert_func>
 8010c38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010c3c:	6004      	str	r4, [r0, #0]
 8010c3e:	60c4      	str	r4, [r0, #12]
 8010c40:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010c44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010c48:	b94c      	cbnz	r4, 8010c5e <__pow5mult+0x66>
 8010c4a:	f240 2171 	movw	r1, #625	; 0x271
 8010c4e:	4630      	mov	r0, r6
 8010c50:	f7ff ff12 	bl	8010a78 <__i2b>
 8010c54:	2300      	movs	r3, #0
 8010c56:	f8c8 0008 	str.w	r0, [r8, #8]
 8010c5a:	4604      	mov	r4, r0
 8010c5c:	6003      	str	r3, [r0, #0]
 8010c5e:	f04f 0900 	mov.w	r9, #0
 8010c62:	07eb      	lsls	r3, r5, #31
 8010c64:	d50a      	bpl.n	8010c7c <__pow5mult+0x84>
 8010c66:	4639      	mov	r1, r7
 8010c68:	4622      	mov	r2, r4
 8010c6a:	4630      	mov	r0, r6
 8010c6c:	f7ff ff1a 	bl	8010aa4 <__multiply>
 8010c70:	4639      	mov	r1, r7
 8010c72:	4680      	mov	r8, r0
 8010c74:	4630      	mov	r0, r6
 8010c76:	f7ff fe49 	bl	801090c <_Bfree>
 8010c7a:	4647      	mov	r7, r8
 8010c7c:	106d      	asrs	r5, r5, #1
 8010c7e:	d00b      	beq.n	8010c98 <__pow5mult+0xa0>
 8010c80:	6820      	ldr	r0, [r4, #0]
 8010c82:	b938      	cbnz	r0, 8010c94 <__pow5mult+0x9c>
 8010c84:	4622      	mov	r2, r4
 8010c86:	4621      	mov	r1, r4
 8010c88:	4630      	mov	r0, r6
 8010c8a:	f7ff ff0b 	bl	8010aa4 <__multiply>
 8010c8e:	6020      	str	r0, [r4, #0]
 8010c90:	f8c0 9000 	str.w	r9, [r0]
 8010c94:	4604      	mov	r4, r0
 8010c96:	e7e4      	b.n	8010c62 <__pow5mult+0x6a>
 8010c98:	4638      	mov	r0, r7
 8010c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c9e:	bf00      	nop
 8010ca0:	08012ea0 	.word	0x08012ea0
 8010ca4:	08012c2d 	.word	0x08012c2d
 8010ca8:	08012d50 	.word	0x08012d50

08010cac <__lshift>:
 8010cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cb0:	460c      	mov	r4, r1
 8010cb2:	6849      	ldr	r1, [r1, #4]
 8010cb4:	6923      	ldr	r3, [r4, #16]
 8010cb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010cba:	68a3      	ldr	r3, [r4, #8]
 8010cbc:	4607      	mov	r7, r0
 8010cbe:	4691      	mov	r9, r2
 8010cc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010cc4:	f108 0601 	add.w	r6, r8, #1
 8010cc8:	42b3      	cmp	r3, r6
 8010cca:	db0b      	blt.n	8010ce4 <__lshift+0x38>
 8010ccc:	4638      	mov	r0, r7
 8010cce:	f7ff fddd 	bl	801088c <_Balloc>
 8010cd2:	4605      	mov	r5, r0
 8010cd4:	b948      	cbnz	r0, 8010cea <__lshift+0x3e>
 8010cd6:	4602      	mov	r2, r0
 8010cd8:	4b28      	ldr	r3, [pc, #160]	; (8010d7c <__lshift+0xd0>)
 8010cda:	4829      	ldr	r0, [pc, #164]	; (8010d80 <__lshift+0xd4>)
 8010cdc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010ce0:	f7fe fe3a 	bl	800f958 <__assert_func>
 8010ce4:	3101      	adds	r1, #1
 8010ce6:	005b      	lsls	r3, r3, #1
 8010ce8:	e7ee      	b.n	8010cc8 <__lshift+0x1c>
 8010cea:	2300      	movs	r3, #0
 8010cec:	f100 0114 	add.w	r1, r0, #20
 8010cf0:	f100 0210 	add.w	r2, r0, #16
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	4553      	cmp	r3, sl
 8010cf8:	db33      	blt.n	8010d62 <__lshift+0xb6>
 8010cfa:	6920      	ldr	r0, [r4, #16]
 8010cfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010d00:	f104 0314 	add.w	r3, r4, #20
 8010d04:	f019 091f 	ands.w	r9, r9, #31
 8010d08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010d0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010d10:	d02b      	beq.n	8010d6a <__lshift+0xbe>
 8010d12:	f1c9 0e20 	rsb	lr, r9, #32
 8010d16:	468a      	mov	sl, r1
 8010d18:	2200      	movs	r2, #0
 8010d1a:	6818      	ldr	r0, [r3, #0]
 8010d1c:	fa00 f009 	lsl.w	r0, r0, r9
 8010d20:	4310      	orrs	r0, r2
 8010d22:	f84a 0b04 	str.w	r0, [sl], #4
 8010d26:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d2a:	459c      	cmp	ip, r3
 8010d2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010d30:	d8f3      	bhi.n	8010d1a <__lshift+0x6e>
 8010d32:	ebac 0304 	sub.w	r3, ip, r4
 8010d36:	3b15      	subs	r3, #21
 8010d38:	f023 0303 	bic.w	r3, r3, #3
 8010d3c:	3304      	adds	r3, #4
 8010d3e:	f104 0015 	add.w	r0, r4, #21
 8010d42:	4584      	cmp	ip, r0
 8010d44:	bf38      	it	cc
 8010d46:	2304      	movcc	r3, #4
 8010d48:	50ca      	str	r2, [r1, r3]
 8010d4a:	b10a      	cbz	r2, 8010d50 <__lshift+0xa4>
 8010d4c:	f108 0602 	add.w	r6, r8, #2
 8010d50:	3e01      	subs	r6, #1
 8010d52:	4638      	mov	r0, r7
 8010d54:	612e      	str	r6, [r5, #16]
 8010d56:	4621      	mov	r1, r4
 8010d58:	f7ff fdd8 	bl	801090c <_Bfree>
 8010d5c:	4628      	mov	r0, r5
 8010d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d62:	f842 0f04 	str.w	r0, [r2, #4]!
 8010d66:	3301      	adds	r3, #1
 8010d68:	e7c5      	b.n	8010cf6 <__lshift+0x4a>
 8010d6a:	3904      	subs	r1, #4
 8010d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d70:	f841 2f04 	str.w	r2, [r1, #4]!
 8010d74:	459c      	cmp	ip, r3
 8010d76:	d8f9      	bhi.n	8010d6c <__lshift+0xc0>
 8010d78:	e7ea      	b.n	8010d50 <__lshift+0xa4>
 8010d7a:	bf00      	nop
 8010d7c:	08012d3f 	.word	0x08012d3f
 8010d80:	08012d50 	.word	0x08012d50

08010d84 <__mcmp>:
 8010d84:	b530      	push	{r4, r5, lr}
 8010d86:	6902      	ldr	r2, [r0, #16]
 8010d88:	690c      	ldr	r4, [r1, #16]
 8010d8a:	1b12      	subs	r2, r2, r4
 8010d8c:	d10e      	bne.n	8010dac <__mcmp+0x28>
 8010d8e:	f100 0314 	add.w	r3, r0, #20
 8010d92:	3114      	adds	r1, #20
 8010d94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010d98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010d9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010da0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010da4:	42a5      	cmp	r5, r4
 8010da6:	d003      	beq.n	8010db0 <__mcmp+0x2c>
 8010da8:	d305      	bcc.n	8010db6 <__mcmp+0x32>
 8010daa:	2201      	movs	r2, #1
 8010dac:	4610      	mov	r0, r2
 8010dae:	bd30      	pop	{r4, r5, pc}
 8010db0:	4283      	cmp	r3, r0
 8010db2:	d3f3      	bcc.n	8010d9c <__mcmp+0x18>
 8010db4:	e7fa      	b.n	8010dac <__mcmp+0x28>
 8010db6:	f04f 32ff 	mov.w	r2, #4294967295
 8010dba:	e7f7      	b.n	8010dac <__mcmp+0x28>

08010dbc <__mdiff>:
 8010dbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dc0:	460c      	mov	r4, r1
 8010dc2:	4606      	mov	r6, r0
 8010dc4:	4611      	mov	r1, r2
 8010dc6:	4620      	mov	r0, r4
 8010dc8:	4690      	mov	r8, r2
 8010dca:	f7ff ffdb 	bl	8010d84 <__mcmp>
 8010dce:	1e05      	subs	r5, r0, #0
 8010dd0:	d110      	bne.n	8010df4 <__mdiff+0x38>
 8010dd2:	4629      	mov	r1, r5
 8010dd4:	4630      	mov	r0, r6
 8010dd6:	f7ff fd59 	bl	801088c <_Balloc>
 8010dda:	b930      	cbnz	r0, 8010dea <__mdiff+0x2e>
 8010ddc:	4b3a      	ldr	r3, [pc, #232]	; (8010ec8 <__mdiff+0x10c>)
 8010dde:	4602      	mov	r2, r0
 8010de0:	f240 2137 	movw	r1, #567	; 0x237
 8010de4:	4839      	ldr	r0, [pc, #228]	; (8010ecc <__mdiff+0x110>)
 8010de6:	f7fe fdb7 	bl	800f958 <__assert_func>
 8010dea:	2301      	movs	r3, #1
 8010dec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010df0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010df4:	bfa4      	itt	ge
 8010df6:	4643      	movge	r3, r8
 8010df8:	46a0      	movge	r8, r4
 8010dfa:	4630      	mov	r0, r6
 8010dfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010e00:	bfa6      	itte	ge
 8010e02:	461c      	movge	r4, r3
 8010e04:	2500      	movge	r5, #0
 8010e06:	2501      	movlt	r5, #1
 8010e08:	f7ff fd40 	bl	801088c <_Balloc>
 8010e0c:	b920      	cbnz	r0, 8010e18 <__mdiff+0x5c>
 8010e0e:	4b2e      	ldr	r3, [pc, #184]	; (8010ec8 <__mdiff+0x10c>)
 8010e10:	4602      	mov	r2, r0
 8010e12:	f240 2145 	movw	r1, #581	; 0x245
 8010e16:	e7e5      	b.n	8010de4 <__mdiff+0x28>
 8010e18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010e1c:	6926      	ldr	r6, [r4, #16]
 8010e1e:	60c5      	str	r5, [r0, #12]
 8010e20:	f104 0914 	add.w	r9, r4, #20
 8010e24:	f108 0514 	add.w	r5, r8, #20
 8010e28:	f100 0e14 	add.w	lr, r0, #20
 8010e2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010e30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010e34:	f108 0210 	add.w	r2, r8, #16
 8010e38:	46f2      	mov	sl, lr
 8010e3a:	2100      	movs	r1, #0
 8010e3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010e40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010e44:	fa11 f88b 	uxtah	r8, r1, fp
 8010e48:	b299      	uxth	r1, r3
 8010e4a:	0c1b      	lsrs	r3, r3, #16
 8010e4c:	eba8 0801 	sub.w	r8, r8, r1
 8010e50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010e54:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010e58:	fa1f f888 	uxth.w	r8, r8
 8010e5c:	1419      	asrs	r1, r3, #16
 8010e5e:	454e      	cmp	r6, r9
 8010e60:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010e64:	f84a 3b04 	str.w	r3, [sl], #4
 8010e68:	d8e8      	bhi.n	8010e3c <__mdiff+0x80>
 8010e6a:	1b33      	subs	r3, r6, r4
 8010e6c:	3b15      	subs	r3, #21
 8010e6e:	f023 0303 	bic.w	r3, r3, #3
 8010e72:	3304      	adds	r3, #4
 8010e74:	3415      	adds	r4, #21
 8010e76:	42a6      	cmp	r6, r4
 8010e78:	bf38      	it	cc
 8010e7a:	2304      	movcc	r3, #4
 8010e7c:	441d      	add	r5, r3
 8010e7e:	4473      	add	r3, lr
 8010e80:	469e      	mov	lr, r3
 8010e82:	462e      	mov	r6, r5
 8010e84:	4566      	cmp	r6, ip
 8010e86:	d30e      	bcc.n	8010ea6 <__mdiff+0xea>
 8010e88:	f10c 0203 	add.w	r2, ip, #3
 8010e8c:	1b52      	subs	r2, r2, r5
 8010e8e:	f022 0203 	bic.w	r2, r2, #3
 8010e92:	3d03      	subs	r5, #3
 8010e94:	45ac      	cmp	ip, r5
 8010e96:	bf38      	it	cc
 8010e98:	2200      	movcc	r2, #0
 8010e9a:	4413      	add	r3, r2
 8010e9c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010ea0:	b17a      	cbz	r2, 8010ec2 <__mdiff+0x106>
 8010ea2:	6107      	str	r7, [r0, #16]
 8010ea4:	e7a4      	b.n	8010df0 <__mdiff+0x34>
 8010ea6:	f856 8b04 	ldr.w	r8, [r6], #4
 8010eaa:	fa11 f288 	uxtah	r2, r1, r8
 8010eae:	1414      	asrs	r4, r2, #16
 8010eb0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010eb4:	b292      	uxth	r2, r2
 8010eb6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010eba:	f84e 2b04 	str.w	r2, [lr], #4
 8010ebe:	1421      	asrs	r1, r4, #16
 8010ec0:	e7e0      	b.n	8010e84 <__mdiff+0xc8>
 8010ec2:	3f01      	subs	r7, #1
 8010ec4:	e7ea      	b.n	8010e9c <__mdiff+0xe0>
 8010ec6:	bf00      	nop
 8010ec8:	08012d3f 	.word	0x08012d3f
 8010ecc:	08012d50 	.word	0x08012d50

08010ed0 <__d2b>:
 8010ed0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ed4:	460f      	mov	r7, r1
 8010ed6:	2101      	movs	r1, #1
 8010ed8:	ec59 8b10 	vmov	r8, r9, d0
 8010edc:	4616      	mov	r6, r2
 8010ede:	f7ff fcd5 	bl	801088c <_Balloc>
 8010ee2:	4604      	mov	r4, r0
 8010ee4:	b930      	cbnz	r0, 8010ef4 <__d2b+0x24>
 8010ee6:	4602      	mov	r2, r0
 8010ee8:	4b24      	ldr	r3, [pc, #144]	; (8010f7c <__d2b+0xac>)
 8010eea:	4825      	ldr	r0, [pc, #148]	; (8010f80 <__d2b+0xb0>)
 8010eec:	f240 310f 	movw	r1, #783	; 0x30f
 8010ef0:	f7fe fd32 	bl	800f958 <__assert_func>
 8010ef4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010ef8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010efc:	bb2d      	cbnz	r5, 8010f4a <__d2b+0x7a>
 8010efe:	9301      	str	r3, [sp, #4]
 8010f00:	f1b8 0300 	subs.w	r3, r8, #0
 8010f04:	d026      	beq.n	8010f54 <__d2b+0x84>
 8010f06:	4668      	mov	r0, sp
 8010f08:	9300      	str	r3, [sp, #0]
 8010f0a:	f7ff fd87 	bl	8010a1c <__lo0bits>
 8010f0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010f12:	b1e8      	cbz	r0, 8010f50 <__d2b+0x80>
 8010f14:	f1c0 0320 	rsb	r3, r0, #32
 8010f18:	fa02 f303 	lsl.w	r3, r2, r3
 8010f1c:	430b      	orrs	r3, r1
 8010f1e:	40c2      	lsrs	r2, r0
 8010f20:	6163      	str	r3, [r4, #20]
 8010f22:	9201      	str	r2, [sp, #4]
 8010f24:	9b01      	ldr	r3, [sp, #4]
 8010f26:	61a3      	str	r3, [r4, #24]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	bf14      	ite	ne
 8010f2c:	2202      	movne	r2, #2
 8010f2e:	2201      	moveq	r2, #1
 8010f30:	6122      	str	r2, [r4, #16]
 8010f32:	b1bd      	cbz	r5, 8010f64 <__d2b+0x94>
 8010f34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010f38:	4405      	add	r5, r0
 8010f3a:	603d      	str	r5, [r7, #0]
 8010f3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010f40:	6030      	str	r0, [r6, #0]
 8010f42:	4620      	mov	r0, r4
 8010f44:	b003      	add	sp, #12
 8010f46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010f4e:	e7d6      	b.n	8010efe <__d2b+0x2e>
 8010f50:	6161      	str	r1, [r4, #20]
 8010f52:	e7e7      	b.n	8010f24 <__d2b+0x54>
 8010f54:	a801      	add	r0, sp, #4
 8010f56:	f7ff fd61 	bl	8010a1c <__lo0bits>
 8010f5a:	9b01      	ldr	r3, [sp, #4]
 8010f5c:	6163      	str	r3, [r4, #20]
 8010f5e:	3020      	adds	r0, #32
 8010f60:	2201      	movs	r2, #1
 8010f62:	e7e5      	b.n	8010f30 <__d2b+0x60>
 8010f64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010f68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010f6c:	6038      	str	r0, [r7, #0]
 8010f6e:	6918      	ldr	r0, [r3, #16]
 8010f70:	f7ff fd34 	bl	80109dc <__hi0bits>
 8010f74:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010f78:	e7e2      	b.n	8010f40 <__d2b+0x70>
 8010f7a:	bf00      	nop
 8010f7c:	08012d3f 	.word	0x08012d3f
 8010f80:	08012d50 	.word	0x08012d50

08010f84 <__ssputs_r>:
 8010f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f88:	688e      	ldr	r6, [r1, #8]
 8010f8a:	461f      	mov	r7, r3
 8010f8c:	42be      	cmp	r6, r7
 8010f8e:	680b      	ldr	r3, [r1, #0]
 8010f90:	4682      	mov	sl, r0
 8010f92:	460c      	mov	r4, r1
 8010f94:	4690      	mov	r8, r2
 8010f96:	d82c      	bhi.n	8010ff2 <__ssputs_r+0x6e>
 8010f98:	898a      	ldrh	r2, [r1, #12]
 8010f9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010f9e:	d026      	beq.n	8010fee <__ssputs_r+0x6a>
 8010fa0:	6965      	ldr	r5, [r4, #20]
 8010fa2:	6909      	ldr	r1, [r1, #16]
 8010fa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010fa8:	eba3 0901 	sub.w	r9, r3, r1
 8010fac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010fb0:	1c7b      	adds	r3, r7, #1
 8010fb2:	444b      	add	r3, r9
 8010fb4:	106d      	asrs	r5, r5, #1
 8010fb6:	429d      	cmp	r5, r3
 8010fb8:	bf38      	it	cc
 8010fba:	461d      	movcc	r5, r3
 8010fbc:	0553      	lsls	r3, r2, #21
 8010fbe:	d527      	bpl.n	8011010 <__ssputs_r+0x8c>
 8010fc0:	4629      	mov	r1, r5
 8010fc2:	f7ff fbd7 	bl	8010774 <_malloc_r>
 8010fc6:	4606      	mov	r6, r0
 8010fc8:	b360      	cbz	r0, 8011024 <__ssputs_r+0xa0>
 8010fca:	6921      	ldr	r1, [r4, #16]
 8010fcc:	464a      	mov	r2, r9
 8010fce:	f7fe fcb4 	bl	800f93a <memcpy>
 8010fd2:	89a3      	ldrh	r3, [r4, #12]
 8010fd4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fdc:	81a3      	strh	r3, [r4, #12]
 8010fde:	6126      	str	r6, [r4, #16]
 8010fe0:	6165      	str	r5, [r4, #20]
 8010fe2:	444e      	add	r6, r9
 8010fe4:	eba5 0509 	sub.w	r5, r5, r9
 8010fe8:	6026      	str	r6, [r4, #0]
 8010fea:	60a5      	str	r5, [r4, #8]
 8010fec:	463e      	mov	r6, r7
 8010fee:	42be      	cmp	r6, r7
 8010ff0:	d900      	bls.n	8010ff4 <__ssputs_r+0x70>
 8010ff2:	463e      	mov	r6, r7
 8010ff4:	6820      	ldr	r0, [r4, #0]
 8010ff6:	4632      	mov	r2, r6
 8010ff8:	4641      	mov	r1, r8
 8010ffa:	f000 f9db 	bl	80113b4 <memmove>
 8010ffe:	68a3      	ldr	r3, [r4, #8]
 8011000:	1b9b      	subs	r3, r3, r6
 8011002:	60a3      	str	r3, [r4, #8]
 8011004:	6823      	ldr	r3, [r4, #0]
 8011006:	4433      	add	r3, r6
 8011008:	6023      	str	r3, [r4, #0]
 801100a:	2000      	movs	r0, #0
 801100c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011010:	462a      	mov	r2, r5
 8011012:	f000 fa28 	bl	8011466 <_realloc_r>
 8011016:	4606      	mov	r6, r0
 8011018:	2800      	cmp	r0, #0
 801101a:	d1e0      	bne.n	8010fde <__ssputs_r+0x5a>
 801101c:	6921      	ldr	r1, [r4, #16]
 801101e:	4650      	mov	r0, sl
 8011020:	f7ff fb34 	bl	801068c <_free_r>
 8011024:	230c      	movs	r3, #12
 8011026:	f8ca 3000 	str.w	r3, [sl]
 801102a:	89a3      	ldrh	r3, [r4, #12]
 801102c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011030:	81a3      	strh	r3, [r4, #12]
 8011032:	f04f 30ff 	mov.w	r0, #4294967295
 8011036:	e7e9      	b.n	801100c <__ssputs_r+0x88>

08011038 <_svfiprintf_r>:
 8011038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801103c:	4698      	mov	r8, r3
 801103e:	898b      	ldrh	r3, [r1, #12]
 8011040:	061b      	lsls	r3, r3, #24
 8011042:	b09d      	sub	sp, #116	; 0x74
 8011044:	4607      	mov	r7, r0
 8011046:	460d      	mov	r5, r1
 8011048:	4614      	mov	r4, r2
 801104a:	d50e      	bpl.n	801106a <_svfiprintf_r+0x32>
 801104c:	690b      	ldr	r3, [r1, #16]
 801104e:	b963      	cbnz	r3, 801106a <_svfiprintf_r+0x32>
 8011050:	2140      	movs	r1, #64	; 0x40
 8011052:	f7ff fb8f 	bl	8010774 <_malloc_r>
 8011056:	6028      	str	r0, [r5, #0]
 8011058:	6128      	str	r0, [r5, #16]
 801105a:	b920      	cbnz	r0, 8011066 <_svfiprintf_r+0x2e>
 801105c:	230c      	movs	r3, #12
 801105e:	603b      	str	r3, [r7, #0]
 8011060:	f04f 30ff 	mov.w	r0, #4294967295
 8011064:	e0d0      	b.n	8011208 <_svfiprintf_r+0x1d0>
 8011066:	2340      	movs	r3, #64	; 0x40
 8011068:	616b      	str	r3, [r5, #20]
 801106a:	2300      	movs	r3, #0
 801106c:	9309      	str	r3, [sp, #36]	; 0x24
 801106e:	2320      	movs	r3, #32
 8011070:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011074:	f8cd 800c 	str.w	r8, [sp, #12]
 8011078:	2330      	movs	r3, #48	; 0x30
 801107a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011220 <_svfiprintf_r+0x1e8>
 801107e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011082:	f04f 0901 	mov.w	r9, #1
 8011086:	4623      	mov	r3, r4
 8011088:	469a      	mov	sl, r3
 801108a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801108e:	b10a      	cbz	r2, 8011094 <_svfiprintf_r+0x5c>
 8011090:	2a25      	cmp	r2, #37	; 0x25
 8011092:	d1f9      	bne.n	8011088 <_svfiprintf_r+0x50>
 8011094:	ebba 0b04 	subs.w	fp, sl, r4
 8011098:	d00b      	beq.n	80110b2 <_svfiprintf_r+0x7a>
 801109a:	465b      	mov	r3, fp
 801109c:	4622      	mov	r2, r4
 801109e:	4629      	mov	r1, r5
 80110a0:	4638      	mov	r0, r7
 80110a2:	f7ff ff6f 	bl	8010f84 <__ssputs_r>
 80110a6:	3001      	adds	r0, #1
 80110a8:	f000 80a9 	beq.w	80111fe <_svfiprintf_r+0x1c6>
 80110ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80110ae:	445a      	add	r2, fp
 80110b0:	9209      	str	r2, [sp, #36]	; 0x24
 80110b2:	f89a 3000 	ldrb.w	r3, [sl]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	f000 80a1 	beq.w	80111fe <_svfiprintf_r+0x1c6>
 80110bc:	2300      	movs	r3, #0
 80110be:	f04f 32ff 	mov.w	r2, #4294967295
 80110c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110c6:	f10a 0a01 	add.w	sl, sl, #1
 80110ca:	9304      	str	r3, [sp, #16]
 80110cc:	9307      	str	r3, [sp, #28]
 80110ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80110d2:	931a      	str	r3, [sp, #104]	; 0x68
 80110d4:	4654      	mov	r4, sl
 80110d6:	2205      	movs	r2, #5
 80110d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110dc:	4850      	ldr	r0, [pc, #320]	; (8011220 <_svfiprintf_r+0x1e8>)
 80110de:	f7ef f8af 	bl	8000240 <memchr>
 80110e2:	9a04      	ldr	r2, [sp, #16]
 80110e4:	b9d8      	cbnz	r0, 801111e <_svfiprintf_r+0xe6>
 80110e6:	06d0      	lsls	r0, r2, #27
 80110e8:	bf44      	itt	mi
 80110ea:	2320      	movmi	r3, #32
 80110ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110f0:	0711      	lsls	r1, r2, #28
 80110f2:	bf44      	itt	mi
 80110f4:	232b      	movmi	r3, #43	; 0x2b
 80110f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110fa:	f89a 3000 	ldrb.w	r3, [sl]
 80110fe:	2b2a      	cmp	r3, #42	; 0x2a
 8011100:	d015      	beq.n	801112e <_svfiprintf_r+0xf6>
 8011102:	9a07      	ldr	r2, [sp, #28]
 8011104:	4654      	mov	r4, sl
 8011106:	2000      	movs	r0, #0
 8011108:	f04f 0c0a 	mov.w	ip, #10
 801110c:	4621      	mov	r1, r4
 801110e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011112:	3b30      	subs	r3, #48	; 0x30
 8011114:	2b09      	cmp	r3, #9
 8011116:	d94d      	bls.n	80111b4 <_svfiprintf_r+0x17c>
 8011118:	b1b0      	cbz	r0, 8011148 <_svfiprintf_r+0x110>
 801111a:	9207      	str	r2, [sp, #28]
 801111c:	e014      	b.n	8011148 <_svfiprintf_r+0x110>
 801111e:	eba0 0308 	sub.w	r3, r0, r8
 8011122:	fa09 f303 	lsl.w	r3, r9, r3
 8011126:	4313      	orrs	r3, r2
 8011128:	9304      	str	r3, [sp, #16]
 801112a:	46a2      	mov	sl, r4
 801112c:	e7d2      	b.n	80110d4 <_svfiprintf_r+0x9c>
 801112e:	9b03      	ldr	r3, [sp, #12]
 8011130:	1d19      	adds	r1, r3, #4
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	9103      	str	r1, [sp, #12]
 8011136:	2b00      	cmp	r3, #0
 8011138:	bfbb      	ittet	lt
 801113a:	425b      	neglt	r3, r3
 801113c:	f042 0202 	orrlt.w	r2, r2, #2
 8011140:	9307      	strge	r3, [sp, #28]
 8011142:	9307      	strlt	r3, [sp, #28]
 8011144:	bfb8      	it	lt
 8011146:	9204      	strlt	r2, [sp, #16]
 8011148:	7823      	ldrb	r3, [r4, #0]
 801114a:	2b2e      	cmp	r3, #46	; 0x2e
 801114c:	d10c      	bne.n	8011168 <_svfiprintf_r+0x130>
 801114e:	7863      	ldrb	r3, [r4, #1]
 8011150:	2b2a      	cmp	r3, #42	; 0x2a
 8011152:	d134      	bne.n	80111be <_svfiprintf_r+0x186>
 8011154:	9b03      	ldr	r3, [sp, #12]
 8011156:	1d1a      	adds	r2, r3, #4
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	9203      	str	r2, [sp, #12]
 801115c:	2b00      	cmp	r3, #0
 801115e:	bfb8      	it	lt
 8011160:	f04f 33ff 	movlt.w	r3, #4294967295
 8011164:	3402      	adds	r4, #2
 8011166:	9305      	str	r3, [sp, #20]
 8011168:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011230 <_svfiprintf_r+0x1f8>
 801116c:	7821      	ldrb	r1, [r4, #0]
 801116e:	2203      	movs	r2, #3
 8011170:	4650      	mov	r0, sl
 8011172:	f7ef f865 	bl	8000240 <memchr>
 8011176:	b138      	cbz	r0, 8011188 <_svfiprintf_r+0x150>
 8011178:	9b04      	ldr	r3, [sp, #16]
 801117a:	eba0 000a 	sub.w	r0, r0, sl
 801117e:	2240      	movs	r2, #64	; 0x40
 8011180:	4082      	lsls	r2, r0
 8011182:	4313      	orrs	r3, r2
 8011184:	3401      	adds	r4, #1
 8011186:	9304      	str	r3, [sp, #16]
 8011188:	f814 1b01 	ldrb.w	r1, [r4], #1
 801118c:	4825      	ldr	r0, [pc, #148]	; (8011224 <_svfiprintf_r+0x1ec>)
 801118e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011192:	2206      	movs	r2, #6
 8011194:	f7ef f854 	bl	8000240 <memchr>
 8011198:	2800      	cmp	r0, #0
 801119a:	d038      	beq.n	801120e <_svfiprintf_r+0x1d6>
 801119c:	4b22      	ldr	r3, [pc, #136]	; (8011228 <_svfiprintf_r+0x1f0>)
 801119e:	bb1b      	cbnz	r3, 80111e8 <_svfiprintf_r+0x1b0>
 80111a0:	9b03      	ldr	r3, [sp, #12]
 80111a2:	3307      	adds	r3, #7
 80111a4:	f023 0307 	bic.w	r3, r3, #7
 80111a8:	3308      	adds	r3, #8
 80111aa:	9303      	str	r3, [sp, #12]
 80111ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111ae:	4433      	add	r3, r6
 80111b0:	9309      	str	r3, [sp, #36]	; 0x24
 80111b2:	e768      	b.n	8011086 <_svfiprintf_r+0x4e>
 80111b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80111b8:	460c      	mov	r4, r1
 80111ba:	2001      	movs	r0, #1
 80111bc:	e7a6      	b.n	801110c <_svfiprintf_r+0xd4>
 80111be:	2300      	movs	r3, #0
 80111c0:	3401      	adds	r4, #1
 80111c2:	9305      	str	r3, [sp, #20]
 80111c4:	4619      	mov	r1, r3
 80111c6:	f04f 0c0a 	mov.w	ip, #10
 80111ca:	4620      	mov	r0, r4
 80111cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111d0:	3a30      	subs	r2, #48	; 0x30
 80111d2:	2a09      	cmp	r2, #9
 80111d4:	d903      	bls.n	80111de <_svfiprintf_r+0x1a6>
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d0c6      	beq.n	8011168 <_svfiprintf_r+0x130>
 80111da:	9105      	str	r1, [sp, #20]
 80111dc:	e7c4      	b.n	8011168 <_svfiprintf_r+0x130>
 80111de:	fb0c 2101 	mla	r1, ip, r1, r2
 80111e2:	4604      	mov	r4, r0
 80111e4:	2301      	movs	r3, #1
 80111e6:	e7f0      	b.n	80111ca <_svfiprintf_r+0x192>
 80111e8:	ab03      	add	r3, sp, #12
 80111ea:	9300      	str	r3, [sp, #0]
 80111ec:	462a      	mov	r2, r5
 80111ee:	4b0f      	ldr	r3, [pc, #60]	; (801122c <_svfiprintf_r+0x1f4>)
 80111f0:	a904      	add	r1, sp, #16
 80111f2:	4638      	mov	r0, r7
 80111f4:	f7fd fdc8 	bl	800ed88 <_printf_float>
 80111f8:	1c42      	adds	r2, r0, #1
 80111fa:	4606      	mov	r6, r0
 80111fc:	d1d6      	bne.n	80111ac <_svfiprintf_r+0x174>
 80111fe:	89ab      	ldrh	r3, [r5, #12]
 8011200:	065b      	lsls	r3, r3, #25
 8011202:	f53f af2d 	bmi.w	8011060 <_svfiprintf_r+0x28>
 8011206:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011208:	b01d      	add	sp, #116	; 0x74
 801120a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801120e:	ab03      	add	r3, sp, #12
 8011210:	9300      	str	r3, [sp, #0]
 8011212:	462a      	mov	r2, r5
 8011214:	4b05      	ldr	r3, [pc, #20]	; (801122c <_svfiprintf_r+0x1f4>)
 8011216:	a904      	add	r1, sp, #16
 8011218:	4638      	mov	r0, r7
 801121a:	f7fe f859 	bl	800f2d0 <_printf_i>
 801121e:	e7eb      	b.n	80111f8 <_svfiprintf_r+0x1c0>
 8011220:	08012eac 	.word	0x08012eac
 8011224:	08012eb6 	.word	0x08012eb6
 8011228:	0800ed89 	.word	0x0800ed89
 801122c:	08010f85 	.word	0x08010f85
 8011230:	08012eb2 	.word	0x08012eb2

08011234 <__sflush_r>:
 8011234:	898a      	ldrh	r2, [r1, #12]
 8011236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801123a:	4605      	mov	r5, r0
 801123c:	0710      	lsls	r0, r2, #28
 801123e:	460c      	mov	r4, r1
 8011240:	d458      	bmi.n	80112f4 <__sflush_r+0xc0>
 8011242:	684b      	ldr	r3, [r1, #4]
 8011244:	2b00      	cmp	r3, #0
 8011246:	dc05      	bgt.n	8011254 <__sflush_r+0x20>
 8011248:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801124a:	2b00      	cmp	r3, #0
 801124c:	dc02      	bgt.n	8011254 <__sflush_r+0x20>
 801124e:	2000      	movs	r0, #0
 8011250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011254:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011256:	2e00      	cmp	r6, #0
 8011258:	d0f9      	beq.n	801124e <__sflush_r+0x1a>
 801125a:	2300      	movs	r3, #0
 801125c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011260:	682f      	ldr	r7, [r5, #0]
 8011262:	6a21      	ldr	r1, [r4, #32]
 8011264:	602b      	str	r3, [r5, #0]
 8011266:	d032      	beq.n	80112ce <__sflush_r+0x9a>
 8011268:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801126a:	89a3      	ldrh	r3, [r4, #12]
 801126c:	075a      	lsls	r2, r3, #29
 801126e:	d505      	bpl.n	801127c <__sflush_r+0x48>
 8011270:	6863      	ldr	r3, [r4, #4]
 8011272:	1ac0      	subs	r0, r0, r3
 8011274:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011276:	b10b      	cbz	r3, 801127c <__sflush_r+0x48>
 8011278:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801127a:	1ac0      	subs	r0, r0, r3
 801127c:	2300      	movs	r3, #0
 801127e:	4602      	mov	r2, r0
 8011280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011282:	6a21      	ldr	r1, [r4, #32]
 8011284:	4628      	mov	r0, r5
 8011286:	47b0      	blx	r6
 8011288:	1c43      	adds	r3, r0, #1
 801128a:	89a3      	ldrh	r3, [r4, #12]
 801128c:	d106      	bne.n	801129c <__sflush_r+0x68>
 801128e:	6829      	ldr	r1, [r5, #0]
 8011290:	291d      	cmp	r1, #29
 8011292:	d82b      	bhi.n	80112ec <__sflush_r+0xb8>
 8011294:	4a29      	ldr	r2, [pc, #164]	; (801133c <__sflush_r+0x108>)
 8011296:	410a      	asrs	r2, r1
 8011298:	07d6      	lsls	r6, r2, #31
 801129a:	d427      	bmi.n	80112ec <__sflush_r+0xb8>
 801129c:	2200      	movs	r2, #0
 801129e:	6062      	str	r2, [r4, #4]
 80112a0:	04d9      	lsls	r1, r3, #19
 80112a2:	6922      	ldr	r2, [r4, #16]
 80112a4:	6022      	str	r2, [r4, #0]
 80112a6:	d504      	bpl.n	80112b2 <__sflush_r+0x7e>
 80112a8:	1c42      	adds	r2, r0, #1
 80112aa:	d101      	bne.n	80112b0 <__sflush_r+0x7c>
 80112ac:	682b      	ldr	r3, [r5, #0]
 80112ae:	b903      	cbnz	r3, 80112b2 <__sflush_r+0x7e>
 80112b0:	6560      	str	r0, [r4, #84]	; 0x54
 80112b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80112b4:	602f      	str	r7, [r5, #0]
 80112b6:	2900      	cmp	r1, #0
 80112b8:	d0c9      	beq.n	801124e <__sflush_r+0x1a>
 80112ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80112be:	4299      	cmp	r1, r3
 80112c0:	d002      	beq.n	80112c8 <__sflush_r+0x94>
 80112c2:	4628      	mov	r0, r5
 80112c4:	f7ff f9e2 	bl	801068c <_free_r>
 80112c8:	2000      	movs	r0, #0
 80112ca:	6360      	str	r0, [r4, #52]	; 0x34
 80112cc:	e7c0      	b.n	8011250 <__sflush_r+0x1c>
 80112ce:	2301      	movs	r3, #1
 80112d0:	4628      	mov	r0, r5
 80112d2:	47b0      	blx	r6
 80112d4:	1c41      	adds	r1, r0, #1
 80112d6:	d1c8      	bne.n	801126a <__sflush_r+0x36>
 80112d8:	682b      	ldr	r3, [r5, #0]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d0c5      	beq.n	801126a <__sflush_r+0x36>
 80112de:	2b1d      	cmp	r3, #29
 80112e0:	d001      	beq.n	80112e6 <__sflush_r+0xb2>
 80112e2:	2b16      	cmp	r3, #22
 80112e4:	d101      	bne.n	80112ea <__sflush_r+0xb6>
 80112e6:	602f      	str	r7, [r5, #0]
 80112e8:	e7b1      	b.n	801124e <__sflush_r+0x1a>
 80112ea:	89a3      	ldrh	r3, [r4, #12]
 80112ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112f0:	81a3      	strh	r3, [r4, #12]
 80112f2:	e7ad      	b.n	8011250 <__sflush_r+0x1c>
 80112f4:	690f      	ldr	r7, [r1, #16]
 80112f6:	2f00      	cmp	r7, #0
 80112f8:	d0a9      	beq.n	801124e <__sflush_r+0x1a>
 80112fa:	0793      	lsls	r3, r2, #30
 80112fc:	680e      	ldr	r6, [r1, #0]
 80112fe:	bf08      	it	eq
 8011300:	694b      	ldreq	r3, [r1, #20]
 8011302:	600f      	str	r7, [r1, #0]
 8011304:	bf18      	it	ne
 8011306:	2300      	movne	r3, #0
 8011308:	eba6 0807 	sub.w	r8, r6, r7
 801130c:	608b      	str	r3, [r1, #8]
 801130e:	f1b8 0f00 	cmp.w	r8, #0
 8011312:	dd9c      	ble.n	801124e <__sflush_r+0x1a>
 8011314:	6a21      	ldr	r1, [r4, #32]
 8011316:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011318:	4643      	mov	r3, r8
 801131a:	463a      	mov	r2, r7
 801131c:	4628      	mov	r0, r5
 801131e:	47b0      	blx	r6
 8011320:	2800      	cmp	r0, #0
 8011322:	dc06      	bgt.n	8011332 <__sflush_r+0xfe>
 8011324:	89a3      	ldrh	r3, [r4, #12]
 8011326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801132a:	81a3      	strh	r3, [r4, #12]
 801132c:	f04f 30ff 	mov.w	r0, #4294967295
 8011330:	e78e      	b.n	8011250 <__sflush_r+0x1c>
 8011332:	4407      	add	r7, r0
 8011334:	eba8 0800 	sub.w	r8, r8, r0
 8011338:	e7e9      	b.n	801130e <__sflush_r+0xda>
 801133a:	bf00      	nop
 801133c:	dfbffffe 	.word	0xdfbffffe

08011340 <_fflush_r>:
 8011340:	b538      	push	{r3, r4, r5, lr}
 8011342:	690b      	ldr	r3, [r1, #16]
 8011344:	4605      	mov	r5, r0
 8011346:	460c      	mov	r4, r1
 8011348:	b913      	cbnz	r3, 8011350 <_fflush_r+0x10>
 801134a:	2500      	movs	r5, #0
 801134c:	4628      	mov	r0, r5
 801134e:	bd38      	pop	{r3, r4, r5, pc}
 8011350:	b118      	cbz	r0, 801135a <_fflush_r+0x1a>
 8011352:	6a03      	ldr	r3, [r0, #32]
 8011354:	b90b      	cbnz	r3, 801135a <_fflush_r+0x1a>
 8011356:	f7fe f969 	bl	800f62c <__sinit>
 801135a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d0f3      	beq.n	801134a <_fflush_r+0xa>
 8011362:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011364:	07d0      	lsls	r0, r2, #31
 8011366:	d404      	bmi.n	8011372 <_fflush_r+0x32>
 8011368:	0599      	lsls	r1, r3, #22
 801136a:	d402      	bmi.n	8011372 <_fflush_r+0x32>
 801136c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801136e:	f7fe fae2 	bl	800f936 <__retarget_lock_acquire_recursive>
 8011372:	4628      	mov	r0, r5
 8011374:	4621      	mov	r1, r4
 8011376:	f7ff ff5d 	bl	8011234 <__sflush_r>
 801137a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801137c:	07da      	lsls	r2, r3, #31
 801137e:	4605      	mov	r5, r0
 8011380:	d4e4      	bmi.n	801134c <_fflush_r+0xc>
 8011382:	89a3      	ldrh	r3, [r4, #12]
 8011384:	059b      	lsls	r3, r3, #22
 8011386:	d4e1      	bmi.n	801134c <_fflush_r+0xc>
 8011388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801138a:	f7fe fad5 	bl	800f938 <__retarget_lock_release_recursive>
 801138e:	e7dd      	b.n	801134c <_fflush_r+0xc>

08011390 <fiprintf>:
 8011390:	b40e      	push	{r1, r2, r3}
 8011392:	b503      	push	{r0, r1, lr}
 8011394:	4601      	mov	r1, r0
 8011396:	ab03      	add	r3, sp, #12
 8011398:	4805      	ldr	r0, [pc, #20]	; (80113b0 <fiprintf+0x20>)
 801139a:	f853 2b04 	ldr.w	r2, [r3], #4
 801139e:	6800      	ldr	r0, [r0, #0]
 80113a0:	9301      	str	r3, [sp, #4]
 80113a2:	f000 f8c5 	bl	8011530 <_vfiprintf_r>
 80113a6:	b002      	add	sp, #8
 80113a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80113ac:	b003      	add	sp, #12
 80113ae:	4770      	bx	lr
 80113b0:	200001e8 	.word	0x200001e8

080113b4 <memmove>:
 80113b4:	4288      	cmp	r0, r1
 80113b6:	b510      	push	{r4, lr}
 80113b8:	eb01 0402 	add.w	r4, r1, r2
 80113bc:	d902      	bls.n	80113c4 <memmove+0x10>
 80113be:	4284      	cmp	r4, r0
 80113c0:	4623      	mov	r3, r4
 80113c2:	d807      	bhi.n	80113d4 <memmove+0x20>
 80113c4:	1e43      	subs	r3, r0, #1
 80113c6:	42a1      	cmp	r1, r4
 80113c8:	d008      	beq.n	80113dc <memmove+0x28>
 80113ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80113ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80113d2:	e7f8      	b.n	80113c6 <memmove+0x12>
 80113d4:	4402      	add	r2, r0
 80113d6:	4601      	mov	r1, r0
 80113d8:	428a      	cmp	r2, r1
 80113da:	d100      	bne.n	80113de <memmove+0x2a>
 80113dc:	bd10      	pop	{r4, pc}
 80113de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80113e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80113e6:	e7f7      	b.n	80113d8 <memmove+0x24>

080113e8 <_sbrk_r>:
 80113e8:	b538      	push	{r3, r4, r5, lr}
 80113ea:	4d06      	ldr	r5, [pc, #24]	; (8011404 <_sbrk_r+0x1c>)
 80113ec:	2300      	movs	r3, #0
 80113ee:	4604      	mov	r4, r0
 80113f0:	4608      	mov	r0, r1
 80113f2:	602b      	str	r3, [r5, #0]
 80113f4:	f7f1 fc36 	bl	8002c64 <_sbrk>
 80113f8:	1c43      	adds	r3, r0, #1
 80113fa:	d102      	bne.n	8011402 <_sbrk_r+0x1a>
 80113fc:	682b      	ldr	r3, [r5, #0]
 80113fe:	b103      	cbz	r3, 8011402 <_sbrk_r+0x1a>
 8011400:	6023      	str	r3, [r4, #0]
 8011402:	bd38      	pop	{r3, r4, r5, pc}
 8011404:	200052b0 	.word	0x200052b0

08011408 <abort>:
 8011408:	b508      	push	{r3, lr}
 801140a:	2006      	movs	r0, #6
 801140c:	f000 fa68 	bl	80118e0 <raise>
 8011410:	2001      	movs	r0, #1
 8011412:	f7f1 fbaf 	bl	8002b74 <_exit>

08011416 <_calloc_r>:
 8011416:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011418:	fba1 2402 	umull	r2, r4, r1, r2
 801141c:	b94c      	cbnz	r4, 8011432 <_calloc_r+0x1c>
 801141e:	4611      	mov	r1, r2
 8011420:	9201      	str	r2, [sp, #4]
 8011422:	f7ff f9a7 	bl	8010774 <_malloc_r>
 8011426:	9a01      	ldr	r2, [sp, #4]
 8011428:	4605      	mov	r5, r0
 801142a:	b930      	cbnz	r0, 801143a <_calloc_r+0x24>
 801142c:	4628      	mov	r0, r5
 801142e:	b003      	add	sp, #12
 8011430:	bd30      	pop	{r4, r5, pc}
 8011432:	220c      	movs	r2, #12
 8011434:	6002      	str	r2, [r0, #0]
 8011436:	2500      	movs	r5, #0
 8011438:	e7f8      	b.n	801142c <_calloc_r+0x16>
 801143a:	4621      	mov	r1, r4
 801143c:	f7fe f98f 	bl	800f75e <memset>
 8011440:	e7f4      	b.n	801142c <_calloc_r+0x16>

08011442 <__ascii_mbtowc>:
 8011442:	b082      	sub	sp, #8
 8011444:	b901      	cbnz	r1, 8011448 <__ascii_mbtowc+0x6>
 8011446:	a901      	add	r1, sp, #4
 8011448:	b142      	cbz	r2, 801145c <__ascii_mbtowc+0x1a>
 801144a:	b14b      	cbz	r3, 8011460 <__ascii_mbtowc+0x1e>
 801144c:	7813      	ldrb	r3, [r2, #0]
 801144e:	600b      	str	r3, [r1, #0]
 8011450:	7812      	ldrb	r2, [r2, #0]
 8011452:	1e10      	subs	r0, r2, #0
 8011454:	bf18      	it	ne
 8011456:	2001      	movne	r0, #1
 8011458:	b002      	add	sp, #8
 801145a:	4770      	bx	lr
 801145c:	4610      	mov	r0, r2
 801145e:	e7fb      	b.n	8011458 <__ascii_mbtowc+0x16>
 8011460:	f06f 0001 	mvn.w	r0, #1
 8011464:	e7f8      	b.n	8011458 <__ascii_mbtowc+0x16>

08011466 <_realloc_r>:
 8011466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801146a:	4680      	mov	r8, r0
 801146c:	4614      	mov	r4, r2
 801146e:	460e      	mov	r6, r1
 8011470:	b921      	cbnz	r1, 801147c <_realloc_r+0x16>
 8011472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011476:	4611      	mov	r1, r2
 8011478:	f7ff b97c 	b.w	8010774 <_malloc_r>
 801147c:	b92a      	cbnz	r2, 801148a <_realloc_r+0x24>
 801147e:	f7ff f905 	bl	801068c <_free_r>
 8011482:	4625      	mov	r5, r4
 8011484:	4628      	mov	r0, r5
 8011486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801148a:	f000 fa45 	bl	8011918 <_malloc_usable_size_r>
 801148e:	4284      	cmp	r4, r0
 8011490:	4607      	mov	r7, r0
 8011492:	d802      	bhi.n	801149a <_realloc_r+0x34>
 8011494:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011498:	d812      	bhi.n	80114c0 <_realloc_r+0x5a>
 801149a:	4621      	mov	r1, r4
 801149c:	4640      	mov	r0, r8
 801149e:	f7ff f969 	bl	8010774 <_malloc_r>
 80114a2:	4605      	mov	r5, r0
 80114a4:	2800      	cmp	r0, #0
 80114a6:	d0ed      	beq.n	8011484 <_realloc_r+0x1e>
 80114a8:	42bc      	cmp	r4, r7
 80114aa:	4622      	mov	r2, r4
 80114ac:	4631      	mov	r1, r6
 80114ae:	bf28      	it	cs
 80114b0:	463a      	movcs	r2, r7
 80114b2:	f7fe fa42 	bl	800f93a <memcpy>
 80114b6:	4631      	mov	r1, r6
 80114b8:	4640      	mov	r0, r8
 80114ba:	f7ff f8e7 	bl	801068c <_free_r>
 80114be:	e7e1      	b.n	8011484 <_realloc_r+0x1e>
 80114c0:	4635      	mov	r5, r6
 80114c2:	e7df      	b.n	8011484 <_realloc_r+0x1e>

080114c4 <__ascii_wctomb>:
 80114c4:	b149      	cbz	r1, 80114da <__ascii_wctomb+0x16>
 80114c6:	2aff      	cmp	r2, #255	; 0xff
 80114c8:	bf85      	ittet	hi
 80114ca:	238a      	movhi	r3, #138	; 0x8a
 80114cc:	6003      	strhi	r3, [r0, #0]
 80114ce:	700a      	strbls	r2, [r1, #0]
 80114d0:	f04f 30ff 	movhi.w	r0, #4294967295
 80114d4:	bf98      	it	ls
 80114d6:	2001      	movls	r0, #1
 80114d8:	4770      	bx	lr
 80114da:	4608      	mov	r0, r1
 80114dc:	4770      	bx	lr

080114de <__sfputc_r>:
 80114de:	6893      	ldr	r3, [r2, #8]
 80114e0:	3b01      	subs	r3, #1
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	b410      	push	{r4}
 80114e6:	6093      	str	r3, [r2, #8]
 80114e8:	da08      	bge.n	80114fc <__sfputc_r+0x1e>
 80114ea:	6994      	ldr	r4, [r2, #24]
 80114ec:	42a3      	cmp	r3, r4
 80114ee:	db01      	blt.n	80114f4 <__sfputc_r+0x16>
 80114f0:	290a      	cmp	r1, #10
 80114f2:	d103      	bne.n	80114fc <__sfputc_r+0x1e>
 80114f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114f8:	f000 b934 	b.w	8011764 <__swbuf_r>
 80114fc:	6813      	ldr	r3, [r2, #0]
 80114fe:	1c58      	adds	r0, r3, #1
 8011500:	6010      	str	r0, [r2, #0]
 8011502:	7019      	strb	r1, [r3, #0]
 8011504:	4608      	mov	r0, r1
 8011506:	f85d 4b04 	ldr.w	r4, [sp], #4
 801150a:	4770      	bx	lr

0801150c <__sfputs_r>:
 801150c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801150e:	4606      	mov	r6, r0
 8011510:	460f      	mov	r7, r1
 8011512:	4614      	mov	r4, r2
 8011514:	18d5      	adds	r5, r2, r3
 8011516:	42ac      	cmp	r4, r5
 8011518:	d101      	bne.n	801151e <__sfputs_r+0x12>
 801151a:	2000      	movs	r0, #0
 801151c:	e007      	b.n	801152e <__sfputs_r+0x22>
 801151e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011522:	463a      	mov	r2, r7
 8011524:	4630      	mov	r0, r6
 8011526:	f7ff ffda 	bl	80114de <__sfputc_r>
 801152a:	1c43      	adds	r3, r0, #1
 801152c:	d1f3      	bne.n	8011516 <__sfputs_r+0xa>
 801152e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011530 <_vfiprintf_r>:
 8011530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011534:	460d      	mov	r5, r1
 8011536:	b09d      	sub	sp, #116	; 0x74
 8011538:	4614      	mov	r4, r2
 801153a:	4698      	mov	r8, r3
 801153c:	4606      	mov	r6, r0
 801153e:	b118      	cbz	r0, 8011548 <_vfiprintf_r+0x18>
 8011540:	6a03      	ldr	r3, [r0, #32]
 8011542:	b90b      	cbnz	r3, 8011548 <_vfiprintf_r+0x18>
 8011544:	f7fe f872 	bl	800f62c <__sinit>
 8011548:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801154a:	07d9      	lsls	r1, r3, #31
 801154c:	d405      	bmi.n	801155a <_vfiprintf_r+0x2a>
 801154e:	89ab      	ldrh	r3, [r5, #12]
 8011550:	059a      	lsls	r2, r3, #22
 8011552:	d402      	bmi.n	801155a <_vfiprintf_r+0x2a>
 8011554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011556:	f7fe f9ee 	bl	800f936 <__retarget_lock_acquire_recursive>
 801155a:	89ab      	ldrh	r3, [r5, #12]
 801155c:	071b      	lsls	r3, r3, #28
 801155e:	d501      	bpl.n	8011564 <_vfiprintf_r+0x34>
 8011560:	692b      	ldr	r3, [r5, #16]
 8011562:	b99b      	cbnz	r3, 801158c <_vfiprintf_r+0x5c>
 8011564:	4629      	mov	r1, r5
 8011566:	4630      	mov	r0, r6
 8011568:	f000 f93a 	bl	80117e0 <__swsetup_r>
 801156c:	b170      	cbz	r0, 801158c <_vfiprintf_r+0x5c>
 801156e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011570:	07dc      	lsls	r4, r3, #31
 8011572:	d504      	bpl.n	801157e <_vfiprintf_r+0x4e>
 8011574:	f04f 30ff 	mov.w	r0, #4294967295
 8011578:	b01d      	add	sp, #116	; 0x74
 801157a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801157e:	89ab      	ldrh	r3, [r5, #12]
 8011580:	0598      	lsls	r0, r3, #22
 8011582:	d4f7      	bmi.n	8011574 <_vfiprintf_r+0x44>
 8011584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011586:	f7fe f9d7 	bl	800f938 <__retarget_lock_release_recursive>
 801158a:	e7f3      	b.n	8011574 <_vfiprintf_r+0x44>
 801158c:	2300      	movs	r3, #0
 801158e:	9309      	str	r3, [sp, #36]	; 0x24
 8011590:	2320      	movs	r3, #32
 8011592:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011596:	f8cd 800c 	str.w	r8, [sp, #12]
 801159a:	2330      	movs	r3, #48	; 0x30
 801159c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011750 <_vfiprintf_r+0x220>
 80115a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80115a4:	f04f 0901 	mov.w	r9, #1
 80115a8:	4623      	mov	r3, r4
 80115aa:	469a      	mov	sl, r3
 80115ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80115b0:	b10a      	cbz	r2, 80115b6 <_vfiprintf_r+0x86>
 80115b2:	2a25      	cmp	r2, #37	; 0x25
 80115b4:	d1f9      	bne.n	80115aa <_vfiprintf_r+0x7a>
 80115b6:	ebba 0b04 	subs.w	fp, sl, r4
 80115ba:	d00b      	beq.n	80115d4 <_vfiprintf_r+0xa4>
 80115bc:	465b      	mov	r3, fp
 80115be:	4622      	mov	r2, r4
 80115c0:	4629      	mov	r1, r5
 80115c2:	4630      	mov	r0, r6
 80115c4:	f7ff ffa2 	bl	801150c <__sfputs_r>
 80115c8:	3001      	adds	r0, #1
 80115ca:	f000 80a9 	beq.w	8011720 <_vfiprintf_r+0x1f0>
 80115ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115d0:	445a      	add	r2, fp
 80115d2:	9209      	str	r2, [sp, #36]	; 0x24
 80115d4:	f89a 3000 	ldrb.w	r3, [sl]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	f000 80a1 	beq.w	8011720 <_vfiprintf_r+0x1f0>
 80115de:	2300      	movs	r3, #0
 80115e0:	f04f 32ff 	mov.w	r2, #4294967295
 80115e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80115e8:	f10a 0a01 	add.w	sl, sl, #1
 80115ec:	9304      	str	r3, [sp, #16]
 80115ee:	9307      	str	r3, [sp, #28]
 80115f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80115f4:	931a      	str	r3, [sp, #104]	; 0x68
 80115f6:	4654      	mov	r4, sl
 80115f8:	2205      	movs	r2, #5
 80115fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115fe:	4854      	ldr	r0, [pc, #336]	; (8011750 <_vfiprintf_r+0x220>)
 8011600:	f7ee fe1e 	bl	8000240 <memchr>
 8011604:	9a04      	ldr	r2, [sp, #16]
 8011606:	b9d8      	cbnz	r0, 8011640 <_vfiprintf_r+0x110>
 8011608:	06d1      	lsls	r1, r2, #27
 801160a:	bf44      	itt	mi
 801160c:	2320      	movmi	r3, #32
 801160e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011612:	0713      	lsls	r3, r2, #28
 8011614:	bf44      	itt	mi
 8011616:	232b      	movmi	r3, #43	; 0x2b
 8011618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801161c:	f89a 3000 	ldrb.w	r3, [sl]
 8011620:	2b2a      	cmp	r3, #42	; 0x2a
 8011622:	d015      	beq.n	8011650 <_vfiprintf_r+0x120>
 8011624:	9a07      	ldr	r2, [sp, #28]
 8011626:	4654      	mov	r4, sl
 8011628:	2000      	movs	r0, #0
 801162a:	f04f 0c0a 	mov.w	ip, #10
 801162e:	4621      	mov	r1, r4
 8011630:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011634:	3b30      	subs	r3, #48	; 0x30
 8011636:	2b09      	cmp	r3, #9
 8011638:	d94d      	bls.n	80116d6 <_vfiprintf_r+0x1a6>
 801163a:	b1b0      	cbz	r0, 801166a <_vfiprintf_r+0x13a>
 801163c:	9207      	str	r2, [sp, #28]
 801163e:	e014      	b.n	801166a <_vfiprintf_r+0x13a>
 8011640:	eba0 0308 	sub.w	r3, r0, r8
 8011644:	fa09 f303 	lsl.w	r3, r9, r3
 8011648:	4313      	orrs	r3, r2
 801164a:	9304      	str	r3, [sp, #16]
 801164c:	46a2      	mov	sl, r4
 801164e:	e7d2      	b.n	80115f6 <_vfiprintf_r+0xc6>
 8011650:	9b03      	ldr	r3, [sp, #12]
 8011652:	1d19      	adds	r1, r3, #4
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	9103      	str	r1, [sp, #12]
 8011658:	2b00      	cmp	r3, #0
 801165a:	bfbb      	ittet	lt
 801165c:	425b      	neglt	r3, r3
 801165e:	f042 0202 	orrlt.w	r2, r2, #2
 8011662:	9307      	strge	r3, [sp, #28]
 8011664:	9307      	strlt	r3, [sp, #28]
 8011666:	bfb8      	it	lt
 8011668:	9204      	strlt	r2, [sp, #16]
 801166a:	7823      	ldrb	r3, [r4, #0]
 801166c:	2b2e      	cmp	r3, #46	; 0x2e
 801166e:	d10c      	bne.n	801168a <_vfiprintf_r+0x15a>
 8011670:	7863      	ldrb	r3, [r4, #1]
 8011672:	2b2a      	cmp	r3, #42	; 0x2a
 8011674:	d134      	bne.n	80116e0 <_vfiprintf_r+0x1b0>
 8011676:	9b03      	ldr	r3, [sp, #12]
 8011678:	1d1a      	adds	r2, r3, #4
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	9203      	str	r2, [sp, #12]
 801167e:	2b00      	cmp	r3, #0
 8011680:	bfb8      	it	lt
 8011682:	f04f 33ff 	movlt.w	r3, #4294967295
 8011686:	3402      	adds	r4, #2
 8011688:	9305      	str	r3, [sp, #20]
 801168a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011760 <_vfiprintf_r+0x230>
 801168e:	7821      	ldrb	r1, [r4, #0]
 8011690:	2203      	movs	r2, #3
 8011692:	4650      	mov	r0, sl
 8011694:	f7ee fdd4 	bl	8000240 <memchr>
 8011698:	b138      	cbz	r0, 80116aa <_vfiprintf_r+0x17a>
 801169a:	9b04      	ldr	r3, [sp, #16]
 801169c:	eba0 000a 	sub.w	r0, r0, sl
 80116a0:	2240      	movs	r2, #64	; 0x40
 80116a2:	4082      	lsls	r2, r0
 80116a4:	4313      	orrs	r3, r2
 80116a6:	3401      	adds	r4, #1
 80116a8:	9304      	str	r3, [sp, #16]
 80116aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116ae:	4829      	ldr	r0, [pc, #164]	; (8011754 <_vfiprintf_r+0x224>)
 80116b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80116b4:	2206      	movs	r2, #6
 80116b6:	f7ee fdc3 	bl	8000240 <memchr>
 80116ba:	2800      	cmp	r0, #0
 80116bc:	d03f      	beq.n	801173e <_vfiprintf_r+0x20e>
 80116be:	4b26      	ldr	r3, [pc, #152]	; (8011758 <_vfiprintf_r+0x228>)
 80116c0:	bb1b      	cbnz	r3, 801170a <_vfiprintf_r+0x1da>
 80116c2:	9b03      	ldr	r3, [sp, #12]
 80116c4:	3307      	adds	r3, #7
 80116c6:	f023 0307 	bic.w	r3, r3, #7
 80116ca:	3308      	adds	r3, #8
 80116cc:	9303      	str	r3, [sp, #12]
 80116ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116d0:	443b      	add	r3, r7
 80116d2:	9309      	str	r3, [sp, #36]	; 0x24
 80116d4:	e768      	b.n	80115a8 <_vfiprintf_r+0x78>
 80116d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80116da:	460c      	mov	r4, r1
 80116dc:	2001      	movs	r0, #1
 80116de:	e7a6      	b.n	801162e <_vfiprintf_r+0xfe>
 80116e0:	2300      	movs	r3, #0
 80116e2:	3401      	adds	r4, #1
 80116e4:	9305      	str	r3, [sp, #20]
 80116e6:	4619      	mov	r1, r3
 80116e8:	f04f 0c0a 	mov.w	ip, #10
 80116ec:	4620      	mov	r0, r4
 80116ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116f2:	3a30      	subs	r2, #48	; 0x30
 80116f4:	2a09      	cmp	r2, #9
 80116f6:	d903      	bls.n	8011700 <_vfiprintf_r+0x1d0>
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d0c6      	beq.n	801168a <_vfiprintf_r+0x15a>
 80116fc:	9105      	str	r1, [sp, #20]
 80116fe:	e7c4      	b.n	801168a <_vfiprintf_r+0x15a>
 8011700:	fb0c 2101 	mla	r1, ip, r1, r2
 8011704:	4604      	mov	r4, r0
 8011706:	2301      	movs	r3, #1
 8011708:	e7f0      	b.n	80116ec <_vfiprintf_r+0x1bc>
 801170a:	ab03      	add	r3, sp, #12
 801170c:	9300      	str	r3, [sp, #0]
 801170e:	462a      	mov	r2, r5
 8011710:	4b12      	ldr	r3, [pc, #72]	; (801175c <_vfiprintf_r+0x22c>)
 8011712:	a904      	add	r1, sp, #16
 8011714:	4630      	mov	r0, r6
 8011716:	f7fd fb37 	bl	800ed88 <_printf_float>
 801171a:	4607      	mov	r7, r0
 801171c:	1c78      	adds	r0, r7, #1
 801171e:	d1d6      	bne.n	80116ce <_vfiprintf_r+0x19e>
 8011720:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011722:	07d9      	lsls	r1, r3, #31
 8011724:	d405      	bmi.n	8011732 <_vfiprintf_r+0x202>
 8011726:	89ab      	ldrh	r3, [r5, #12]
 8011728:	059a      	lsls	r2, r3, #22
 801172a:	d402      	bmi.n	8011732 <_vfiprintf_r+0x202>
 801172c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801172e:	f7fe f903 	bl	800f938 <__retarget_lock_release_recursive>
 8011732:	89ab      	ldrh	r3, [r5, #12]
 8011734:	065b      	lsls	r3, r3, #25
 8011736:	f53f af1d 	bmi.w	8011574 <_vfiprintf_r+0x44>
 801173a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801173c:	e71c      	b.n	8011578 <_vfiprintf_r+0x48>
 801173e:	ab03      	add	r3, sp, #12
 8011740:	9300      	str	r3, [sp, #0]
 8011742:	462a      	mov	r2, r5
 8011744:	4b05      	ldr	r3, [pc, #20]	; (801175c <_vfiprintf_r+0x22c>)
 8011746:	a904      	add	r1, sp, #16
 8011748:	4630      	mov	r0, r6
 801174a:	f7fd fdc1 	bl	800f2d0 <_printf_i>
 801174e:	e7e4      	b.n	801171a <_vfiprintf_r+0x1ea>
 8011750:	08012eac 	.word	0x08012eac
 8011754:	08012eb6 	.word	0x08012eb6
 8011758:	0800ed89 	.word	0x0800ed89
 801175c:	0801150d 	.word	0x0801150d
 8011760:	08012eb2 	.word	0x08012eb2

08011764 <__swbuf_r>:
 8011764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011766:	460e      	mov	r6, r1
 8011768:	4614      	mov	r4, r2
 801176a:	4605      	mov	r5, r0
 801176c:	b118      	cbz	r0, 8011776 <__swbuf_r+0x12>
 801176e:	6a03      	ldr	r3, [r0, #32]
 8011770:	b90b      	cbnz	r3, 8011776 <__swbuf_r+0x12>
 8011772:	f7fd ff5b 	bl	800f62c <__sinit>
 8011776:	69a3      	ldr	r3, [r4, #24]
 8011778:	60a3      	str	r3, [r4, #8]
 801177a:	89a3      	ldrh	r3, [r4, #12]
 801177c:	071a      	lsls	r2, r3, #28
 801177e:	d525      	bpl.n	80117cc <__swbuf_r+0x68>
 8011780:	6923      	ldr	r3, [r4, #16]
 8011782:	b31b      	cbz	r3, 80117cc <__swbuf_r+0x68>
 8011784:	6823      	ldr	r3, [r4, #0]
 8011786:	6922      	ldr	r2, [r4, #16]
 8011788:	1a98      	subs	r0, r3, r2
 801178a:	6963      	ldr	r3, [r4, #20]
 801178c:	b2f6      	uxtb	r6, r6
 801178e:	4283      	cmp	r3, r0
 8011790:	4637      	mov	r7, r6
 8011792:	dc04      	bgt.n	801179e <__swbuf_r+0x3a>
 8011794:	4621      	mov	r1, r4
 8011796:	4628      	mov	r0, r5
 8011798:	f7ff fdd2 	bl	8011340 <_fflush_r>
 801179c:	b9e0      	cbnz	r0, 80117d8 <__swbuf_r+0x74>
 801179e:	68a3      	ldr	r3, [r4, #8]
 80117a0:	3b01      	subs	r3, #1
 80117a2:	60a3      	str	r3, [r4, #8]
 80117a4:	6823      	ldr	r3, [r4, #0]
 80117a6:	1c5a      	adds	r2, r3, #1
 80117a8:	6022      	str	r2, [r4, #0]
 80117aa:	701e      	strb	r6, [r3, #0]
 80117ac:	6962      	ldr	r2, [r4, #20]
 80117ae:	1c43      	adds	r3, r0, #1
 80117b0:	429a      	cmp	r2, r3
 80117b2:	d004      	beq.n	80117be <__swbuf_r+0x5a>
 80117b4:	89a3      	ldrh	r3, [r4, #12]
 80117b6:	07db      	lsls	r3, r3, #31
 80117b8:	d506      	bpl.n	80117c8 <__swbuf_r+0x64>
 80117ba:	2e0a      	cmp	r6, #10
 80117bc:	d104      	bne.n	80117c8 <__swbuf_r+0x64>
 80117be:	4621      	mov	r1, r4
 80117c0:	4628      	mov	r0, r5
 80117c2:	f7ff fdbd 	bl	8011340 <_fflush_r>
 80117c6:	b938      	cbnz	r0, 80117d8 <__swbuf_r+0x74>
 80117c8:	4638      	mov	r0, r7
 80117ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117cc:	4621      	mov	r1, r4
 80117ce:	4628      	mov	r0, r5
 80117d0:	f000 f806 	bl	80117e0 <__swsetup_r>
 80117d4:	2800      	cmp	r0, #0
 80117d6:	d0d5      	beq.n	8011784 <__swbuf_r+0x20>
 80117d8:	f04f 37ff 	mov.w	r7, #4294967295
 80117dc:	e7f4      	b.n	80117c8 <__swbuf_r+0x64>
	...

080117e0 <__swsetup_r>:
 80117e0:	b538      	push	{r3, r4, r5, lr}
 80117e2:	4b2a      	ldr	r3, [pc, #168]	; (801188c <__swsetup_r+0xac>)
 80117e4:	4605      	mov	r5, r0
 80117e6:	6818      	ldr	r0, [r3, #0]
 80117e8:	460c      	mov	r4, r1
 80117ea:	b118      	cbz	r0, 80117f4 <__swsetup_r+0x14>
 80117ec:	6a03      	ldr	r3, [r0, #32]
 80117ee:	b90b      	cbnz	r3, 80117f4 <__swsetup_r+0x14>
 80117f0:	f7fd ff1c 	bl	800f62c <__sinit>
 80117f4:	89a3      	ldrh	r3, [r4, #12]
 80117f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80117fa:	0718      	lsls	r0, r3, #28
 80117fc:	d422      	bmi.n	8011844 <__swsetup_r+0x64>
 80117fe:	06d9      	lsls	r1, r3, #27
 8011800:	d407      	bmi.n	8011812 <__swsetup_r+0x32>
 8011802:	2309      	movs	r3, #9
 8011804:	602b      	str	r3, [r5, #0]
 8011806:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801180a:	81a3      	strh	r3, [r4, #12]
 801180c:	f04f 30ff 	mov.w	r0, #4294967295
 8011810:	e034      	b.n	801187c <__swsetup_r+0x9c>
 8011812:	0758      	lsls	r0, r3, #29
 8011814:	d512      	bpl.n	801183c <__swsetup_r+0x5c>
 8011816:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011818:	b141      	cbz	r1, 801182c <__swsetup_r+0x4c>
 801181a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801181e:	4299      	cmp	r1, r3
 8011820:	d002      	beq.n	8011828 <__swsetup_r+0x48>
 8011822:	4628      	mov	r0, r5
 8011824:	f7fe ff32 	bl	801068c <_free_r>
 8011828:	2300      	movs	r3, #0
 801182a:	6363      	str	r3, [r4, #52]	; 0x34
 801182c:	89a3      	ldrh	r3, [r4, #12]
 801182e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011832:	81a3      	strh	r3, [r4, #12]
 8011834:	2300      	movs	r3, #0
 8011836:	6063      	str	r3, [r4, #4]
 8011838:	6923      	ldr	r3, [r4, #16]
 801183a:	6023      	str	r3, [r4, #0]
 801183c:	89a3      	ldrh	r3, [r4, #12]
 801183e:	f043 0308 	orr.w	r3, r3, #8
 8011842:	81a3      	strh	r3, [r4, #12]
 8011844:	6923      	ldr	r3, [r4, #16]
 8011846:	b94b      	cbnz	r3, 801185c <__swsetup_r+0x7c>
 8011848:	89a3      	ldrh	r3, [r4, #12]
 801184a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801184e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011852:	d003      	beq.n	801185c <__swsetup_r+0x7c>
 8011854:	4621      	mov	r1, r4
 8011856:	4628      	mov	r0, r5
 8011858:	f000 f88c 	bl	8011974 <__smakebuf_r>
 801185c:	89a0      	ldrh	r0, [r4, #12]
 801185e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011862:	f010 0301 	ands.w	r3, r0, #1
 8011866:	d00a      	beq.n	801187e <__swsetup_r+0x9e>
 8011868:	2300      	movs	r3, #0
 801186a:	60a3      	str	r3, [r4, #8]
 801186c:	6963      	ldr	r3, [r4, #20]
 801186e:	425b      	negs	r3, r3
 8011870:	61a3      	str	r3, [r4, #24]
 8011872:	6923      	ldr	r3, [r4, #16]
 8011874:	b943      	cbnz	r3, 8011888 <__swsetup_r+0xa8>
 8011876:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801187a:	d1c4      	bne.n	8011806 <__swsetup_r+0x26>
 801187c:	bd38      	pop	{r3, r4, r5, pc}
 801187e:	0781      	lsls	r1, r0, #30
 8011880:	bf58      	it	pl
 8011882:	6963      	ldrpl	r3, [r4, #20]
 8011884:	60a3      	str	r3, [r4, #8]
 8011886:	e7f4      	b.n	8011872 <__swsetup_r+0x92>
 8011888:	2000      	movs	r0, #0
 801188a:	e7f7      	b.n	801187c <__swsetup_r+0x9c>
 801188c:	200001e8 	.word	0x200001e8

08011890 <_raise_r>:
 8011890:	291f      	cmp	r1, #31
 8011892:	b538      	push	{r3, r4, r5, lr}
 8011894:	4604      	mov	r4, r0
 8011896:	460d      	mov	r5, r1
 8011898:	d904      	bls.n	80118a4 <_raise_r+0x14>
 801189a:	2316      	movs	r3, #22
 801189c:	6003      	str	r3, [r0, #0]
 801189e:	f04f 30ff 	mov.w	r0, #4294967295
 80118a2:	bd38      	pop	{r3, r4, r5, pc}
 80118a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80118a6:	b112      	cbz	r2, 80118ae <_raise_r+0x1e>
 80118a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80118ac:	b94b      	cbnz	r3, 80118c2 <_raise_r+0x32>
 80118ae:	4620      	mov	r0, r4
 80118b0:	f000 f830 	bl	8011914 <_getpid_r>
 80118b4:	462a      	mov	r2, r5
 80118b6:	4601      	mov	r1, r0
 80118b8:	4620      	mov	r0, r4
 80118ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118be:	f000 b817 	b.w	80118f0 <_kill_r>
 80118c2:	2b01      	cmp	r3, #1
 80118c4:	d00a      	beq.n	80118dc <_raise_r+0x4c>
 80118c6:	1c59      	adds	r1, r3, #1
 80118c8:	d103      	bne.n	80118d2 <_raise_r+0x42>
 80118ca:	2316      	movs	r3, #22
 80118cc:	6003      	str	r3, [r0, #0]
 80118ce:	2001      	movs	r0, #1
 80118d0:	e7e7      	b.n	80118a2 <_raise_r+0x12>
 80118d2:	2400      	movs	r4, #0
 80118d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80118d8:	4628      	mov	r0, r5
 80118da:	4798      	blx	r3
 80118dc:	2000      	movs	r0, #0
 80118de:	e7e0      	b.n	80118a2 <_raise_r+0x12>

080118e0 <raise>:
 80118e0:	4b02      	ldr	r3, [pc, #8]	; (80118ec <raise+0xc>)
 80118e2:	4601      	mov	r1, r0
 80118e4:	6818      	ldr	r0, [r3, #0]
 80118e6:	f7ff bfd3 	b.w	8011890 <_raise_r>
 80118ea:	bf00      	nop
 80118ec:	200001e8 	.word	0x200001e8

080118f0 <_kill_r>:
 80118f0:	b538      	push	{r3, r4, r5, lr}
 80118f2:	4d07      	ldr	r5, [pc, #28]	; (8011910 <_kill_r+0x20>)
 80118f4:	2300      	movs	r3, #0
 80118f6:	4604      	mov	r4, r0
 80118f8:	4608      	mov	r0, r1
 80118fa:	4611      	mov	r1, r2
 80118fc:	602b      	str	r3, [r5, #0]
 80118fe:	f7f1 f929 	bl	8002b54 <_kill>
 8011902:	1c43      	adds	r3, r0, #1
 8011904:	d102      	bne.n	801190c <_kill_r+0x1c>
 8011906:	682b      	ldr	r3, [r5, #0]
 8011908:	b103      	cbz	r3, 801190c <_kill_r+0x1c>
 801190a:	6023      	str	r3, [r4, #0]
 801190c:	bd38      	pop	{r3, r4, r5, pc}
 801190e:	bf00      	nop
 8011910:	200052b0 	.word	0x200052b0

08011914 <_getpid_r>:
 8011914:	f7f1 b916 	b.w	8002b44 <_getpid>

08011918 <_malloc_usable_size_r>:
 8011918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801191c:	1f18      	subs	r0, r3, #4
 801191e:	2b00      	cmp	r3, #0
 8011920:	bfbc      	itt	lt
 8011922:	580b      	ldrlt	r3, [r1, r0]
 8011924:	18c0      	addlt	r0, r0, r3
 8011926:	4770      	bx	lr

08011928 <__swhatbuf_r>:
 8011928:	b570      	push	{r4, r5, r6, lr}
 801192a:	460c      	mov	r4, r1
 801192c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011930:	2900      	cmp	r1, #0
 8011932:	b096      	sub	sp, #88	; 0x58
 8011934:	4615      	mov	r5, r2
 8011936:	461e      	mov	r6, r3
 8011938:	da0d      	bge.n	8011956 <__swhatbuf_r+0x2e>
 801193a:	89a3      	ldrh	r3, [r4, #12]
 801193c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011940:	f04f 0100 	mov.w	r1, #0
 8011944:	bf0c      	ite	eq
 8011946:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801194a:	2340      	movne	r3, #64	; 0x40
 801194c:	2000      	movs	r0, #0
 801194e:	6031      	str	r1, [r6, #0]
 8011950:	602b      	str	r3, [r5, #0]
 8011952:	b016      	add	sp, #88	; 0x58
 8011954:	bd70      	pop	{r4, r5, r6, pc}
 8011956:	466a      	mov	r2, sp
 8011958:	f000 f848 	bl	80119ec <_fstat_r>
 801195c:	2800      	cmp	r0, #0
 801195e:	dbec      	blt.n	801193a <__swhatbuf_r+0x12>
 8011960:	9901      	ldr	r1, [sp, #4]
 8011962:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011966:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801196a:	4259      	negs	r1, r3
 801196c:	4159      	adcs	r1, r3
 801196e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011972:	e7eb      	b.n	801194c <__swhatbuf_r+0x24>

08011974 <__smakebuf_r>:
 8011974:	898b      	ldrh	r3, [r1, #12]
 8011976:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011978:	079d      	lsls	r5, r3, #30
 801197a:	4606      	mov	r6, r0
 801197c:	460c      	mov	r4, r1
 801197e:	d507      	bpl.n	8011990 <__smakebuf_r+0x1c>
 8011980:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011984:	6023      	str	r3, [r4, #0]
 8011986:	6123      	str	r3, [r4, #16]
 8011988:	2301      	movs	r3, #1
 801198a:	6163      	str	r3, [r4, #20]
 801198c:	b002      	add	sp, #8
 801198e:	bd70      	pop	{r4, r5, r6, pc}
 8011990:	ab01      	add	r3, sp, #4
 8011992:	466a      	mov	r2, sp
 8011994:	f7ff ffc8 	bl	8011928 <__swhatbuf_r>
 8011998:	9900      	ldr	r1, [sp, #0]
 801199a:	4605      	mov	r5, r0
 801199c:	4630      	mov	r0, r6
 801199e:	f7fe fee9 	bl	8010774 <_malloc_r>
 80119a2:	b948      	cbnz	r0, 80119b8 <__smakebuf_r+0x44>
 80119a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119a8:	059a      	lsls	r2, r3, #22
 80119aa:	d4ef      	bmi.n	801198c <__smakebuf_r+0x18>
 80119ac:	f023 0303 	bic.w	r3, r3, #3
 80119b0:	f043 0302 	orr.w	r3, r3, #2
 80119b4:	81a3      	strh	r3, [r4, #12]
 80119b6:	e7e3      	b.n	8011980 <__smakebuf_r+0xc>
 80119b8:	89a3      	ldrh	r3, [r4, #12]
 80119ba:	6020      	str	r0, [r4, #0]
 80119bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119c0:	81a3      	strh	r3, [r4, #12]
 80119c2:	9b00      	ldr	r3, [sp, #0]
 80119c4:	6163      	str	r3, [r4, #20]
 80119c6:	9b01      	ldr	r3, [sp, #4]
 80119c8:	6120      	str	r0, [r4, #16]
 80119ca:	b15b      	cbz	r3, 80119e4 <__smakebuf_r+0x70>
 80119cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119d0:	4630      	mov	r0, r6
 80119d2:	f000 f81d 	bl	8011a10 <_isatty_r>
 80119d6:	b128      	cbz	r0, 80119e4 <__smakebuf_r+0x70>
 80119d8:	89a3      	ldrh	r3, [r4, #12]
 80119da:	f023 0303 	bic.w	r3, r3, #3
 80119de:	f043 0301 	orr.w	r3, r3, #1
 80119e2:	81a3      	strh	r3, [r4, #12]
 80119e4:	89a3      	ldrh	r3, [r4, #12]
 80119e6:	431d      	orrs	r5, r3
 80119e8:	81a5      	strh	r5, [r4, #12]
 80119ea:	e7cf      	b.n	801198c <__smakebuf_r+0x18>

080119ec <_fstat_r>:
 80119ec:	b538      	push	{r3, r4, r5, lr}
 80119ee:	4d07      	ldr	r5, [pc, #28]	; (8011a0c <_fstat_r+0x20>)
 80119f0:	2300      	movs	r3, #0
 80119f2:	4604      	mov	r4, r0
 80119f4:	4608      	mov	r0, r1
 80119f6:	4611      	mov	r1, r2
 80119f8:	602b      	str	r3, [r5, #0]
 80119fa:	f7f1 f90a 	bl	8002c12 <_fstat>
 80119fe:	1c43      	adds	r3, r0, #1
 8011a00:	d102      	bne.n	8011a08 <_fstat_r+0x1c>
 8011a02:	682b      	ldr	r3, [r5, #0]
 8011a04:	b103      	cbz	r3, 8011a08 <_fstat_r+0x1c>
 8011a06:	6023      	str	r3, [r4, #0]
 8011a08:	bd38      	pop	{r3, r4, r5, pc}
 8011a0a:	bf00      	nop
 8011a0c:	200052b0 	.word	0x200052b0

08011a10 <_isatty_r>:
 8011a10:	b538      	push	{r3, r4, r5, lr}
 8011a12:	4d06      	ldr	r5, [pc, #24]	; (8011a2c <_isatty_r+0x1c>)
 8011a14:	2300      	movs	r3, #0
 8011a16:	4604      	mov	r4, r0
 8011a18:	4608      	mov	r0, r1
 8011a1a:	602b      	str	r3, [r5, #0]
 8011a1c:	f7f1 f909 	bl	8002c32 <_isatty>
 8011a20:	1c43      	adds	r3, r0, #1
 8011a22:	d102      	bne.n	8011a2a <_isatty_r+0x1a>
 8011a24:	682b      	ldr	r3, [r5, #0]
 8011a26:	b103      	cbz	r3, 8011a2a <_isatty_r+0x1a>
 8011a28:	6023      	str	r3, [r4, #0]
 8011a2a:	bd38      	pop	{r3, r4, r5, pc}
 8011a2c:	200052b0 	.word	0x200052b0

08011a30 <pow>:
 8011a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a32:	ed2d 8b02 	vpush	{d8}
 8011a36:	eeb0 8a40 	vmov.f32	s16, s0
 8011a3a:	eef0 8a60 	vmov.f32	s17, s1
 8011a3e:	ec55 4b11 	vmov	r4, r5, d1
 8011a42:	f000 f871 	bl	8011b28 <__ieee754_pow>
 8011a46:	4622      	mov	r2, r4
 8011a48:	462b      	mov	r3, r5
 8011a4a:	4620      	mov	r0, r4
 8011a4c:	4629      	mov	r1, r5
 8011a4e:	ec57 6b10 	vmov	r6, r7, d0
 8011a52:	f7ef f8a3 	bl	8000b9c <__aeabi_dcmpun>
 8011a56:	2800      	cmp	r0, #0
 8011a58:	d13b      	bne.n	8011ad2 <pow+0xa2>
 8011a5a:	ec51 0b18 	vmov	r0, r1, d8
 8011a5e:	2200      	movs	r2, #0
 8011a60:	2300      	movs	r3, #0
 8011a62:	f7ef f869 	bl	8000b38 <__aeabi_dcmpeq>
 8011a66:	b1b8      	cbz	r0, 8011a98 <pow+0x68>
 8011a68:	2200      	movs	r2, #0
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	4620      	mov	r0, r4
 8011a6e:	4629      	mov	r1, r5
 8011a70:	f7ef f862 	bl	8000b38 <__aeabi_dcmpeq>
 8011a74:	2800      	cmp	r0, #0
 8011a76:	d146      	bne.n	8011b06 <pow+0xd6>
 8011a78:	ec45 4b10 	vmov	d0, r4, r5
 8011a7c:	f000 f848 	bl	8011b10 <finite>
 8011a80:	b338      	cbz	r0, 8011ad2 <pow+0xa2>
 8011a82:	2200      	movs	r2, #0
 8011a84:	2300      	movs	r3, #0
 8011a86:	4620      	mov	r0, r4
 8011a88:	4629      	mov	r1, r5
 8011a8a:	f7ef f85f 	bl	8000b4c <__aeabi_dcmplt>
 8011a8e:	b300      	cbz	r0, 8011ad2 <pow+0xa2>
 8011a90:	f7fd ff26 	bl	800f8e0 <__errno>
 8011a94:	2322      	movs	r3, #34	; 0x22
 8011a96:	e01b      	b.n	8011ad0 <pow+0xa0>
 8011a98:	ec47 6b10 	vmov	d0, r6, r7
 8011a9c:	f000 f838 	bl	8011b10 <finite>
 8011aa0:	b9e0      	cbnz	r0, 8011adc <pow+0xac>
 8011aa2:	eeb0 0a48 	vmov.f32	s0, s16
 8011aa6:	eef0 0a68 	vmov.f32	s1, s17
 8011aaa:	f000 f831 	bl	8011b10 <finite>
 8011aae:	b1a8      	cbz	r0, 8011adc <pow+0xac>
 8011ab0:	ec45 4b10 	vmov	d0, r4, r5
 8011ab4:	f000 f82c 	bl	8011b10 <finite>
 8011ab8:	b180      	cbz	r0, 8011adc <pow+0xac>
 8011aba:	4632      	mov	r2, r6
 8011abc:	463b      	mov	r3, r7
 8011abe:	4630      	mov	r0, r6
 8011ac0:	4639      	mov	r1, r7
 8011ac2:	f7ef f86b 	bl	8000b9c <__aeabi_dcmpun>
 8011ac6:	2800      	cmp	r0, #0
 8011ac8:	d0e2      	beq.n	8011a90 <pow+0x60>
 8011aca:	f7fd ff09 	bl	800f8e0 <__errno>
 8011ace:	2321      	movs	r3, #33	; 0x21
 8011ad0:	6003      	str	r3, [r0, #0]
 8011ad2:	ecbd 8b02 	vpop	{d8}
 8011ad6:	ec47 6b10 	vmov	d0, r6, r7
 8011ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011adc:	2200      	movs	r2, #0
 8011ade:	2300      	movs	r3, #0
 8011ae0:	4630      	mov	r0, r6
 8011ae2:	4639      	mov	r1, r7
 8011ae4:	f7ef f828 	bl	8000b38 <__aeabi_dcmpeq>
 8011ae8:	2800      	cmp	r0, #0
 8011aea:	d0f2      	beq.n	8011ad2 <pow+0xa2>
 8011aec:	eeb0 0a48 	vmov.f32	s0, s16
 8011af0:	eef0 0a68 	vmov.f32	s1, s17
 8011af4:	f000 f80c 	bl	8011b10 <finite>
 8011af8:	2800      	cmp	r0, #0
 8011afa:	d0ea      	beq.n	8011ad2 <pow+0xa2>
 8011afc:	ec45 4b10 	vmov	d0, r4, r5
 8011b00:	f000 f806 	bl	8011b10 <finite>
 8011b04:	e7c3      	b.n	8011a8e <pow+0x5e>
 8011b06:	4f01      	ldr	r7, [pc, #4]	; (8011b0c <pow+0xdc>)
 8011b08:	2600      	movs	r6, #0
 8011b0a:	e7e2      	b.n	8011ad2 <pow+0xa2>
 8011b0c:	3ff00000 	.word	0x3ff00000

08011b10 <finite>:
 8011b10:	b082      	sub	sp, #8
 8011b12:	ed8d 0b00 	vstr	d0, [sp]
 8011b16:	9801      	ldr	r0, [sp, #4]
 8011b18:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011b1c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011b20:	0fc0      	lsrs	r0, r0, #31
 8011b22:	b002      	add	sp, #8
 8011b24:	4770      	bx	lr
	...

08011b28 <__ieee754_pow>:
 8011b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b2c:	ed2d 8b06 	vpush	{d8-d10}
 8011b30:	b089      	sub	sp, #36	; 0x24
 8011b32:	ed8d 1b00 	vstr	d1, [sp]
 8011b36:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011b3a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011b3e:	ea58 0102 	orrs.w	r1, r8, r2
 8011b42:	ec57 6b10 	vmov	r6, r7, d0
 8011b46:	d115      	bne.n	8011b74 <__ieee754_pow+0x4c>
 8011b48:	19b3      	adds	r3, r6, r6
 8011b4a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8011b4e:	4152      	adcs	r2, r2
 8011b50:	4299      	cmp	r1, r3
 8011b52:	4b89      	ldr	r3, [pc, #548]	; (8011d78 <__ieee754_pow+0x250>)
 8011b54:	4193      	sbcs	r3, r2
 8011b56:	f080 84d1 	bcs.w	80124fc <__ieee754_pow+0x9d4>
 8011b5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011b5e:	4630      	mov	r0, r6
 8011b60:	4639      	mov	r1, r7
 8011b62:	f7ee fbcb 	bl	80002fc <__adddf3>
 8011b66:	ec41 0b10 	vmov	d0, r0, r1
 8011b6a:	b009      	add	sp, #36	; 0x24
 8011b6c:	ecbd 8b06 	vpop	{d8-d10}
 8011b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b74:	4b81      	ldr	r3, [pc, #516]	; (8011d7c <__ieee754_pow+0x254>)
 8011b76:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011b7a:	429c      	cmp	r4, r3
 8011b7c:	ee10 aa10 	vmov	sl, s0
 8011b80:	463d      	mov	r5, r7
 8011b82:	dc06      	bgt.n	8011b92 <__ieee754_pow+0x6a>
 8011b84:	d101      	bne.n	8011b8a <__ieee754_pow+0x62>
 8011b86:	2e00      	cmp	r6, #0
 8011b88:	d1e7      	bne.n	8011b5a <__ieee754_pow+0x32>
 8011b8a:	4598      	cmp	r8, r3
 8011b8c:	dc01      	bgt.n	8011b92 <__ieee754_pow+0x6a>
 8011b8e:	d10f      	bne.n	8011bb0 <__ieee754_pow+0x88>
 8011b90:	b172      	cbz	r2, 8011bb0 <__ieee754_pow+0x88>
 8011b92:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8011b96:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8011b9a:	ea55 050a 	orrs.w	r5, r5, sl
 8011b9e:	d1dc      	bne.n	8011b5a <__ieee754_pow+0x32>
 8011ba0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011ba4:	18db      	adds	r3, r3, r3
 8011ba6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8011baa:	4152      	adcs	r2, r2
 8011bac:	429d      	cmp	r5, r3
 8011bae:	e7d0      	b.n	8011b52 <__ieee754_pow+0x2a>
 8011bb0:	2d00      	cmp	r5, #0
 8011bb2:	da3b      	bge.n	8011c2c <__ieee754_pow+0x104>
 8011bb4:	4b72      	ldr	r3, [pc, #456]	; (8011d80 <__ieee754_pow+0x258>)
 8011bb6:	4598      	cmp	r8, r3
 8011bb8:	dc51      	bgt.n	8011c5e <__ieee754_pow+0x136>
 8011bba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011bbe:	4598      	cmp	r8, r3
 8011bc0:	f340 84ab 	ble.w	801251a <__ieee754_pow+0x9f2>
 8011bc4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011bc8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011bcc:	2b14      	cmp	r3, #20
 8011bce:	dd0f      	ble.n	8011bf0 <__ieee754_pow+0xc8>
 8011bd0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011bd4:	fa22 f103 	lsr.w	r1, r2, r3
 8011bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8011bdc:	4293      	cmp	r3, r2
 8011bde:	f040 849c 	bne.w	801251a <__ieee754_pow+0x9f2>
 8011be2:	f001 0101 	and.w	r1, r1, #1
 8011be6:	f1c1 0302 	rsb	r3, r1, #2
 8011bea:	9304      	str	r3, [sp, #16]
 8011bec:	b182      	cbz	r2, 8011c10 <__ieee754_pow+0xe8>
 8011bee:	e05f      	b.n	8011cb0 <__ieee754_pow+0x188>
 8011bf0:	2a00      	cmp	r2, #0
 8011bf2:	d15b      	bne.n	8011cac <__ieee754_pow+0x184>
 8011bf4:	f1c3 0314 	rsb	r3, r3, #20
 8011bf8:	fa48 f103 	asr.w	r1, r8, r3
 8011bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8011c00:	4543      	cmp	r3, r8
 8011c02:	f040 8487 	bne.w	8012514 <__ieee754_pow+0x9ec>
 8011c06:	f001 0101 	and.w	r1, r1, #1
 8011c0a:	f1c1 0302 	rsb	r3, r1, #2
 8011c0e:	9304      	str	r3, [sp, #16]
 8011c10:	4b5c      	ldr	r3, [pc, #368]	; (8011d84 <__ieee754_pow+0x25c>)
 8011c12:	4598      	cmp	r8, r3
 8011c14:	d132      	bne.n	8011c7c <__ieee754_pow+0x154>
 8011c16:	f1b9 0f00 	cmp.w	r9, #0
 8011c1a:	f280 8477 	bge.w	801250c <__ieee754_pow+0x9e4>
 8011c1e:	4959      	ldr	r1, [pc, #356]	; (8011d84 <__ieee754_pow+0x25c>)
 8011c20:	4632      	mov	r2, r6
 8011c22:	463b      	mov	r3, r7
 8011c24:	2000      	movs	r0, #0
 8011c26:	f7ee fe49 	bl	80008bc <__aeabi_ddiv>
 8011c2a:	e79c      	b.n	8011b66 <__ieee754_pow+0x3e>
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	9304      	str	r3, [sp, #16]
 8011c30:	2a00      	cmp	r2, #0
 8011c32:	d13d      	bne.n	8011cb0 <__ieee754_pow+0x188>
 8011c34:	4b51      	ldr	r3, [pc, #324]	; (8011d7c <__ieee754_pow+0x254>)
 8011c36:	4598      	cmp	r8, r3
 8011c38:	d1ea      	bne.n	8011c10 <__ieee754_pow+0xe8>
 8011c3a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011c3e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011c42:	ea53 030a 	orrs.w	r3, r3, sl
 8011c46:	f000 8459 	beq.w	80124fc <__ieee754_pow+0x9d4>
 8011c4a:	4b4f      	ldr	r3, [pc, #316]	; (8011d88 <__ieee754_pow+0x260>)
 8011c4c:	429c      	cmp	r4, r3
 8011c4e:	dd08      	ble.n	8011c62 <__ieee754_pow+0x13a>
 8011c50:	f1b9 0f00 	cmp.w	r9, #0
 8011c54:	f2c0 8456 	blt.w	8012504 <__ieee754_pow+0x9dc>
 8011c58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c5c:	e783      	b.n	8011b66 <__ieee754_pow+0x3e>
 8011c5e:	2302      	movs	r3, #2
 8011c60:	e7e5      	b.n	8011c2e <__ieee754_pow+0x106>
 8011c62:	f1b9 0f00 	cmp.w	r9, #0
 8011c66:	f04f 0000 	mov.w	r0, #0
 8011c6a:	f04f 0100 	mov.w	r1, #0
 8011c6e:	f6bf af7a 	bge.w	8011b66 <__ieee754_pow+0x3e>
 8011c72:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011c76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011c7a:	e774      	b.n	8011b66 <__ieee754_pow+0x3e>
 8011c7c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011c80:	d106      	bne.n	8011c90 <__ieee754_pow+0x168>
 8011c82:	4632      	mov	r2, r6
 8011c84:	463b      	mov	r3, r7
 8011c86:	4630      	mov	r0, r6
 8011c88:	4639      	mov	r1, r7
 8011c8a:	f7ee fced 	bl	8000668 <__aeabi_dmul>
 8011c8e:	e76a      	b.n	8011b66 <__ieee754_pow+0x3e>
 8011c90:	4b3e      	ldr	r3, [pc, #248]	; (8011d8c <__ieee754_pow+0x264>)
 8011c92:	4599      	cmp	r9, r3
 8011c94:	d10c      	bne.n	8011cb0 <__ieee754_pow+0x188>
 8011c96:	2d00      	cmp	r5, #0
 8011c98:	db0a      	blt.n	8011cb0 <__ieee754_pow+0x188>
 8011c9a:	ec47 6b10 	vmov	d0, r6, r7
 8011c9e:	b009      	add	sp, #36	; 0x24
 8011ca0:	ecbd 8b06 	vpop	{d8-d10}
 8011ca4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ca8:	f000 bd20 	b.w	80126ec <__ieee754_sqrt>
 8011cac:	2300      	movs	r3, #0
 8011cae:	9304      	str	r3, [sp, #16]
 8011cb0:	ec47 6b10 	vmov	d0, r6, r7
 8011cb4:	f000 fc62 	bl	801257c <fabs>
 8011cb8:	ec51 0b10 	vmov	r0, r1, d0
 8011cbc:	f1ba 0f00 	cmp.w	sl, #0
 8011cc0:	d129      	bne.n	8011d16 <__ieee754_pow+0x1ee>
 8011cc2:	b124      	cbz	r4, 8011cce <__ieee754_pow+0x1a6>
 8011cc4:	4b2f      	ldr	r3, [pc, #188]	; (8011d84 <__ieee754_pow+0x25c>)
 8011cc6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d123      	bne.n	8011d16 <__ieee754_pow+0x1ee>
 8011cce:	f1b9 0f00 	cmp.w	r9, #0
 8011cd2:	da05      	bge.n	8011ce0 <__ieee754_pow+0x1b8>
 8011cd4:	4602      	mov	r2, r0
 8011cd6:	460b      	mov	r3, r1
 8011cd8:	2000      	movs	r0, #0
 8011cda:	492a      	ldr	r1, [pc, #168]	; (8011d84 <__ieee754_pow+0x25c>)
 8011cdc:	f7ee fdee 	bl	80008bc <__aeabi_ddiv>
 8011ce0:	2d00      	cmp	r5, #0
 8011ce2:	f6bf af40 	bge.w	8011b66 <__ieee754_pow+0x3e>
 8011ce6:	9b04      	ldr	r3, [sp, #16]
 8011ce8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011cec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011cf0:	431c      	orrs	r4, r3
 8011cf2:	d108      	bne.n	8011d06 <__ieee754_pow+0x1de>
 8011cf4:	4602      	mov	r2, r0
 8011cf6:	460b      	mov	r3, r1
 8011cf8:	4610      	mov	r0, r2
 8011cfa:	4619      	mov	r1, r3
 8011cfc:	f7ee fafc 	bl	80002f8 <__aeabi_dsub>
 8011d00:	4602      	mov	r2, r0
 8011d02:	460b      	mov	r3, r1
 8011d04:	e78f      	b.n	8011c26 <__ieee754_pow+0xfe>
 8011d06:	9b04      	ldr	r3, [sp, #16]
 8011d08:	2b01      	cmp	r3, #1
 8011d0a:	f47f af2c 	bne.w	8011b66 <__ieee754_pow+0x3e>
 8011d0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d12:	4619      	mov	r1, r3
 8011d14:	e727      	b.n	8011b66 <__ieee754_pow+0x3e>
 8011d16:	0feb      	lsrs	r3, r5, #31
 8011d18:	3b01      	subs	r3, #1
 8011d1a:	9306      	str	r3, [sp, #24]
 8011d1c:	9a06      	ldr	r2, [sp, #24]
 8011d1e:	9b04      	ldr	r3, [sp, #16]
 8011d20:	4313      	orrs	r3, r2
 8011d22:	d102      	bne.n	8011d2a <__ieee754_pow+0x202>
 8011d24:	4632      	mov	r2, r6
 8011d26:	463b      	mov	r3, r7
 8011d28:	e7e6      	b.n	8011cf8 <__ieee754_pow+0x1d0>
 8011d2a:	4b19      	ldr	r3, [pc, #100]	; (8011d90 <__ieee754_pow+0x268>)
 8011d2c:	4598      	cmp	r8, r3
 8011d2e:	f340 80fb 	ble.w	8011f28 <__ieee754_pow+0x400>
 8011d32:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011d36:	4598      	cmp	r8, r3
 8011d38:	4b13      	ldr	r3, [pc, #76]	; (8011d88 <__ieee754_pow+0x260>)
 8011d3a:	dd0c      	ble.n	8011d56 <__ieee754_pow+0x22e>
 8011d3c:	429c      	cmp	r4, r3
 8011d3e:	dc0f      	bgt.n	8011d60 <__ieee754_pow+0x238>
 8011d40:	f1b9 0f00 	cmp.w	r9, #0
 8011d44:	da0f      	bge.n	8011d66 <__ieee754_pow+0x23e>
 8011d46:	2000      	movs	r0, #0
 8011d48:	b009      	add	sp, #36	; 0x24
 8011d4a:	ecbd 8b06 	vpop	{d8-d10}
 8011d4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d52:	f000 bcc2 	b.w	80126da <__math_oflow>
 8011d56:	429c      	cmp	r4, r3
 8011d58:	dbf2      	blt.n	8011d40 <__ieee754_pow+0x218>
 8011d5a:	4b0a      	ldr	r3, [pc, #40]	; (8011d84 <__ieee754_pow+0x25c>)
 8011d5c:	429c      	cmp	r4, r3
 8011d5e:	dd19      	ble.n	8011d94 <__ieee754_pow+0x26c>
 8011d60:	f1b9 0f00 	cmp.w	r9, #0
 8011d64:	dcef      	bgt.n	8011d46 <__ieee754_pow+0x21e>
 8011d66:	2000      	movs	r0, #0
 8011d68:	b009      	add	sp, #36	; 0x24
 8011d6a:	ecbd 8b06 	vpop	{d8-d10}
 8011d6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d72:	f000 bca9 	b.w	80126c8 <__math_uflow>
 8011d76:	bf00      	nop
 8011d78:	fff00000 	.word	0xfff00000
 8011d7c:	7ff00000 	.word	0x7ff00000
 8011d80:	433fffff 	.word	0x433fffff
 8011d84:	3ff00000 	.word	0x3ff00000
 8011d88:	3fefffff 	.word	0x3fefffff
 8011d8c:	3fe00000 	.word	0x3fe00000
 8011d90:	41e00000 	.word	0x41e00000
 8011d94:	4b60      	ldr	r3, [pc, #384]	; (8011f18 <__ieee754_pow+0x3f0>)
 8011d96:	2200      	movs	r2, #0
 8011d98:	f7ee faae 	bl	80002f8 <__aeabi_dsub>
 8011d9c:	a354      	add	r3, pc, #336	; (adr r3, 8011ef0 <__ieee754_pow+0x3c8>)
 8011d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011da2:	4604      	mov	r4, r0
 8011da4:	460d      	mov	r5, r1
 8011da6:	f7ee fc5f 	bl	8000668 <__aeabi_dmul>
 8011daa:	a353      	add	r3, pc, #332	; (adr r3, 8011ef8 <__ieee754_pow+0x3d0>)
 8011dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db0:	4606      	mov	r6, r0
 8011db2:	460f      	mov	r7, r1
 8011db4:	4620      	mov	r0, r4
 8011db6:	4629      	mov	r1, r5
 8011db8:	f7ee fc56 	bl	8000668 <__aeabi_dmul>
 8011dbc:	4b57      	ldr	r3, [pc, #348]	; (8011f1c <__ieee754_pow+0x3f4>)
 8011dbe:	4682      	mov	sl, r0
 8011dc0:	468b      	mov	fp, r1
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	4620      	mov	r0, r4
 8011dc6:	4629      	mov	r1, r5
 8011dc8:	f7ee fc4e 	bl	8000668 <__aeabi_dmul>
 8011dcc:	4602      	mov	r2, r0
 8011dce:	460b      	mov	r3, r1
 8011dd0:	a14b      	add	r1, pc, #300	; (adr r1, 8011f00 <__ieee754_pow+0x3d8>)
 8011dd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dd6:	f7ee fa8f 	bl	80002f8 <__aeabi_dsub>
 8011dda:	4622      	mov	r2, r4
 8011ddc:	462b      	mov	r3, r5
 8011dde:	f7ee fc43 	bl	8000668 <__aeabi_dmul>
 8011de2:	4602      	mov	r2, r0
 8011de4:	460b      	mov	r3, r1
 8011de6:	2000      	movs	r0, #0
 8011de8:	494d      	ldr	r1, [pc, #308]	; (8011f20 <__ieee754_pow+0x3f8>)
 8011dea:	f7ee fa85 	bl	80002f8 <__aeabi_dsub>
 8011dee:	4622      	mov	r2, r4
 8011df0:	4680      	mov	r8, r0
 8011df2:	4689      	mov	r9, r1
 8011df4:	462b      	mov	r3, r5
 8011df6:	4620      	mov	r0, r4
 8011df8:	4629      	mov	r1, r5
 8011dfa:	f7ee fc35 	bl	8000668 <__aeabi_dmul>
 8011dfe:	4602      	mov	r2, r0
 8011e00:	460b      	mov	r3, r1
 8011e02:	4640      	mov	r0, r8
 8011e04:	4649      	mov	r1, r9
 8011e06:	f7ee fc2f 	bl	8000668 <__aeabi_dmul>
 8011e0a:	a33f      	add	r3, pc, #252	; (adr r3, 8011f08 <__ieee754_pow+0x3e0>)
 8011e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e10:	f7ee fc2a 	bl	8000668 <__aeabi_dmul>
 8011e14:	4602      	mov	r2, r0
 8011e16:	460b      	mov	r3, r1
 8011e18:	4650      	mov	r0, sl
 8011e1a:	4659      	mov	r1, fp
 8011e1c:	f7ee fa6c 	bl	80002f8 <__aeabi_dsub>
 8011e20:	4602      	mov	r2, r0
 8011e22:	460b      	mov	r3, r1
 8011e24:	4680      	mov	r8, r0
 8011e26:	4689      	mov	r9, r1
 8011e28:	4630      	mov	r0, r6
 8011e2a:	4639      	mov	r1, r7
 8011e2c:	f7ee fa66 	bl	80002fc <__adddf3>
 8011e30:	2000      	movs	r0, #0
 8011e32:	4632      	mov	r2, r6
 8011e34:	463b      	mov	r3, r7
 8011e36:	4604      	mov	r4, r0
 8011e38:	460d      	mov	r5, r1
 8011e3a:	f7ee fa5d 	bl	80002f8 <__aeabi_dsub>
 8011e3e:	4602      	mov	r2, r0
 8011e40:	460b      	mov	r3, r1
 8011e42:	4640      	mov	r0, r8
 8011e44:	4649      	mov	r1, r9
 8011e46:	f7ee fa57 	bl	80002f8 <__aeabi_dsub>
 8011e4a:	9b04      	ldr	r3, [sp, #16]
 8011e4c:	9a06      	ldr	r2, [sp, #24]
 8011e4e:	3b01      	subs	r3, #1
 8011e50:	4313      	orrs	r3, r2
 8011e52:	4682      	mov	sl, r0
 8011e54:	468b      	mov	fp, r1
 8011e56:	f040 81e7 	bne.w	8012228 <__ieee754_pow+0x700>
 8011e5a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011f10 <__ieee754_pow+0x3e8>
 8011e5e:	eeb0 8a47 	vmov.f32	s16, s14
 8011e62:	eef0 8a67 	vmov.f32	s17, s15
 8011e66:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011e6a:	2600      	movs	r6, #0
 8011e6c:	4632      	mov	r2, r6
 8011e6e:	463b      	mov	r3, r7
 8011e70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011e74:	f7ee fa40 	bl	80002f8 <__aeabi_dsub>
 8011e78:	4622      	mov	r2, r4
 8011e7a:	462b      	mov	r3, r5
 8011e7c:	f7ee fbf4 	bl	8000668 <__aeabi_dmul>
 8011e80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011e84:	4680      	mov	r8, r0
 8011e86:	4689      	mov	r9, r1
 8011e88:	4650      	mov	r0, sl
 8011e8a:	4659      	mov	r1, fp
 8011e8c:	f7ee fbec 	bl	8000668 <__aeabi_dmul>
 8011e90:	4602      	mov	r2, r0
 8011e92:	460b      	mov	r3, r1
 8011e94:	4640      	mov	r0, r8
 8011e96:	4649      	mov	r1, r9
 8011e98:	f7ee fa30 	bl	80002fc <__adddf3>
 8011e9c:	4632      	mov	r2, r6
 8011e9e:	463b      	mov	r3, r7
 8011ea0:	4680      	mov	r8, r0
 8011ea2:	4689      	mov	r9, r1
 8011ea4:	4620      	mov	r0, r4
 8011ea6:	4629      	mov	r1, r5
 8011ea8:	f7ee fbde 	bl	8000668 <__aeabi_dmul>
 8011eac:	460b      	mov	r3, r1
 8011eae:	4604      	mov	r4, r0
 8011eb0:	460d      	mov	r5, r1
 8011eb2:	4602      	mov	r2, r0
 8011eb4:	4649      	mov	r1, r9
 8011eb6:	4640      	mov	r0, r8
 8011eb8:	f7ee fa20 	bl	80002fc <__adddf3>
 8011ebc:	4b19      	ldr	r3, [pc, #100]	; (8011f24 <__ieee754_pow+0x3fc>)
 8011ebe:	4299      	cmp	r1, r3
 8011ec0:	ec45 4b19 	vmov	d9, r4, r5
 8011ec4:	4606      	mov	r6, r0
 8011ec6:	460f      	mov	r7, r1
 8011ec8:	468b      	mov	fp, r1
 8011eca:	f340 82f0 	ble.w	80124ae <__ieee754_pow+0x986>
 8011ece:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011ed2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011ed6:	4303      	orrs	r3, r0
 8011ed8:	f000 81e4 	beq.w	80122a4 <__ieee754_pow+0x77c>
 8011edc:	ec51 0b18 	vmov	r0, r1, d8
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	f7ee fe32 	bl	8000b4c <__aeabi_dcmplt>
 8011ee8:	3800      	subs	r0, #0
 8011eea:	bf18      	it	ne
 8011eec:	2001      	movne	r0, #1
 8011eee:	e72b      	b.n	8011d48 <__ieee754_pow+0x220>
 8011ef0:	60000000 	.word	0x60000000
 8011ef4:	3ff71547 	.word	0x3ff71547
 8011ef8:	f85ddf44 	.word	0xf85ddf44
 8011efc:	3e54ae0b 	.word	0x3e54ae0b
 8011f00:	55555555 	.word	0x55555555
 8011f04:	3fd55555 	.word	0x3fd55555
 8011f08:	652b82fe 	.word	0x652b82fe
 8011f0c:	3ff71547 	.word	0x3ff71547
 8011f10:	00000000 	.word	0x00000000
 8011f14:	bff00000 	.word	0xbff00000
 8011f18:	3ff00000 	.word	0x3ff00000
 8011f1c:	3fd00000 	.word	0x3fd00000
 8011f20:	3fe00000 	.word	0x3fe00000
 8011f24:	408fffff 	.word	0x408fffff
 8011f28:	4bd5      	ldr	r3, [pc, #852]	; (8012280 <__ieee754_pow+0x758>)
 8011f2a:	402b      	ands	r3, r5
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	b92b      	cbnz	r3, 8011f3c <__ieee754_pow+0x414>
 8011f30:	4bd4      	ldr	r3, [pc, #848]	; (8012284 <__ieee754_pow+0x75c>)
 8011f32:	f7ee fb99 	bl	8000668 <__aeabi_dmul>
 8011f36:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011f3a:	460c      	mov	r4, r1
 8011f3c:	1523      	asrs	r3, r4, #20
 8011f3e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011f42:	4413      	add	r3, r2
 8011f44:	9305      	str	r3, [sp, #20]
 8011f46:	4bd0      	ldr	r3, [pc, #832]	; (8012288 <__ieee754_pow+0x760>)
 8011f48:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011f4c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011f50:	429c      	cmp	r4, r3
 8011f52:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011f56:	dd08      	ble.n	8011f6a <__ieee754_pow+0x442>
 8011f58:	4bcc      	ldr	r3, [pc, #816]	; (801228c <__ieee754_pow+0x764>)
 8011f5a:	429c      	cmp	r4, r3
 8011f5c:	f340 8162 	ble.w	8012224 <__ieee754_pow+0x6fc>
 8011f60:	9b05      	ldr	r3, [sp, #20]
 8011f62:	3301      	adds	r3, #1
 8011f64:	9305      	str	r3, [sp, #20]
 8011f66:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011f6a:	2400      	movs	r4, #0
 8011f6c:	00e3      	lsls	r3, r4, #3
 8011f6e:	9307      	str	r3, [sp, #28]
 8011f70:	4bc7      	ldr	r3, [pc, #796]	; (8012290 <__ieee754_pow+0x768>)
 8011f72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011f76:	ed93 7b00 	vldr	d7, [r3]
 8011f7a:	4629      	mov	r1, r5
 8011f7c:	ec53 2b17 	vmov	r2, r3, d7
 8011f80:	eeb0 9a47 	vmov.f32	s18, s14
 8011f84:	eef0 9a67 	vmov.f32	s19, s15
 8011f88:	4682      	mov	sl, r0
 8011f8a:	f7ee f9b5 	bl	80002f8 <__aeabi_dsub>
 8011f8e:	4652      	mov	r2, sl
 8011f90:	4606      	mov	r6, r0
 8011f92:	460f      	mov	r7, r1
 8011f94:	462b      	mov	r3, r5
 8011f96:	ec51 0b19 	vmov	r0, r1, d9
 8011f9a:	f7ee f9af 	bl	80002fc <__adddf3>
 8011f9e:	4602      	mov	r2, r0
 8011fa0:	460b      	mov	r3, r1
 8011fa2:	2000      	movs	r0, #0
 8011fa4:	49bb      	ldr	r1, [pc, #748]	; (8012294 <__ieee754_pow+0x76c>)
 8011fa6:	f7ee fc89 	bl	80008bc <__aeabi_ddiv>
 8011faa:	ec41 0b1a 	vmov	d10, r0, r1
 8011fae:	4602      	mov	r2, r0
 8011fb0:	460b      	mov	r3, r1
 8011fb2:	4630      	mov	r0, r6
 8011fb4:	4639      	mov	r1, r7
 8011fb6:	f7ee fb57 	bl	8000668 <__aeabi_dmul>
 8011fba:	2300      	movs	r3, #0
 8011fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011fc0:	9302      	str	r3, [sp, #8]
 8011fc2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011fc6:	46ab      	mov	fp, r5
 8011fc8:	106d      	asrs	r5, r5, #1
 8011fca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011fce:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011fd2:	ec41 0b18 	vmov	d8, r0, r1
 8011fd6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011fda:	2200      	movs	r2, #0
 8011fdc:	4640      	mov	r0, r8
 8011fde:	4649      	mov	r1, r9
 8011fe0:	4614      	mov	r4, r2
 8011fe2:	461d      	mov	r5, r3
 8011fe4:	f7ee fb40 	bl	8000668 <__aeabi_dmul>
 8011fe8:	4602      	mov	r2, r0
 8011fea:	460b      	mov	r3, r1
 8011fec:	4630      	mov	r0, r6
 8011fee:	4639      	mov	r1, r7
 8011ff0:	f7ee f982 	bl	80002f8 <__aeabi_dsub>
 8011ff4:	ec53 2b19 	vmov	r2, r3, d9
 8011ff8:	4606      	mov	r6, r0
 8011ffa:	460f      	mov	r7, r1
 8011ffc:	4620      	mov	r0, r4
 8011ffe:	4629      	mov	r1, r5
 8012000:	f7ee f97a 	bl	80002f8 <__aeabi_dsub>
 8012004:	4602      	mov	r2, r0
 8012006:	460b      	mov	r3, r1
 8012008:	4650      	mov	r0, sl
 801200a:	4659      	mov	r1, fp
 801200c:	f7ee f974 	bl	80002f8 <__aeabi_dsub>
 8012010:	4642      	mov	r2, r8
 8012012:	464b      	mov	r3, r9
 8012014:	f7ee fb28 	bl	8000668 <__aeabi_dmul>
 8012018:	4602      	mov	r2, r0
 801201a:	460b      	mov	r3, r1
 801201c:	4630      	mov	r0, r6
 801201e:	4639      	mov	r1, r7
 8012020:	f7ee f96a 	bl	80002f8 <__aeabi_dsub>
 8012024:	ec53 2b1a 	vmov	r2, r3, d10
 8012028:	f7ee fb1e 	bl	8000668 <__aeabi_dmul>
 801202c:	ec53 2b18 	vmov	r2, r3, d8
 8012030:	ec41 0b19 	vmov	d9, r0, r1
 8012034:	ec51 0b18 	vmov	r0, r1, d8
 8012038:	f7ee fb16 	bl	8000668 <__aeabi_dmul>
 801203c:	a37c      	add	r3, pc, #496	; (adr r3, 8012230 <__ieee754_pow+0x708>)
 801203e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012042:	4604      	mov	r4, r0
 8012044:	460d      	mov	r5, r1
 8012046:	f7ee fb0f 	bl	8000668 <__aeabi_dmul>
 801204a:	a37b      	add	r3, pc, #492	; (adr r3, 8012238 <__ieee754_pow+0x710>)
 801204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012050:	f7ee f954 	bl	80002fc <__adddf3>
 8012054:	4622      	mov	r2, r4
 8012056:	462b      	mov	r3, r5
 8012058:	f7ee fb06 	bl	8000668 <__aeabi_dmul>
 801205c:	a378      	add	r3, pc, #480	; (adr r3, 8012240 <__ieee754_pow+0x718>)
 801205e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012062:	f7ee f94b 	bl	80002fc <__adddf3>
 8012066:	4622      	mov	r2, r4
 8012068:	462b      	mov	r3, r5
 801206a:	f7ee fafd 	bl	8000668 <__aeabi_dmul>
 801206e:	a376      	add	r3, pc, #472	; (adr r3, 8012248 <__ieee754_pow+0x720>)
 8012070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012074:	f7ee f942 	bl	80002fc <__adddf3>
 8012078:	4622      	mov	r2, r4
 801207a:	462b      	mov	r3, r5
 801207c:	f7ee faf4 	bl	8000668 <__aeabi_dmul>
 8012080:	a373      	add	r3, pc, #460	; (adr r3, 8012250 <__ieee754_pow+0x728>)
 8012082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012086:	f7ee f939 	bl	80002fc <__adddf3>
 801208a:	4622      	mov	r2, r4
 801208c:	462b      	mov	r3, r5
 801208e:	f7ee faeb 	bl	8000668 <__aeabi_dmul>
 8012092:	a371      	add	r3, pc, #452	; (adr r3, 8012258 <__ieee754_pow+0x730>)
 8012094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012098:	f7ee f930 	bl	80002fc <__adddf3>
 801209c:	4622      	mov	r2, r4
 801209e:	4606      	mov	r6, r0
 80120a0:	460f      	mov	r7, r1
 80120a2:	462b      	mov	r3, r5
 80120a4:	4620      	mov	r0, r4
 80120a6:	4629      	mov	r1, r5
 80120a8:	f7ee fade 	bl	8000668 <__aeabi_dmul>
 80120ac:	4602      	mov	r2, r0
 80120ae:	460b      	mov	r3, r1
 80120b0:	4630      	mov	r0, r6
 80120b2:	4639      	mov	r1, r7
 80120b4:	f7ee fad8 	bl	8000668 <__aeabi_dmul>
 80120b8:	4642      	mov	r2, r8
 80120ba:	4604      	mov	r4, r0
 80120bc:	460d      	mov	r5, r1
 80120be:	464b      	mov	r3, r9
 80120c0:	ec51 0b18 	vmov	r0, r1, d8
 80120c4:	f7ee f91a 	bl	80002fc <__adddf3>
 80120c8:	ec53 2b19 	vmov	r2, r3, d9
 80120cc:	f7ee facc 	bl	8000668 <__aeabi_dmul>
 80120d0:	4622      	mov	r2, r4
 80120d2:	462b      	mov	r3, r5
 80120d4:	f7ee f912 	bl	80002fc <__adddf3>
 80120d8:	4642      	mov	r2, r8
 80120da:	4682      	mov	sl, r0
 80120dc:	468b      	mov	fp, r1
 80120de:	464b      	mov	r3, r9
 80120e0:	4640      	mov	r0, r8
 80120e2:	4649      	mov	r1, r9
 80120e4:	f7ee fac0 	bl	8000668 <__aeabi_dmul>
 80120e8:	4b6b      	ldr	r3, [pc, #428]	; (8012298 <__ieee754_pow+0x770>)
 80120ea:	2200      	movs	r2, #0
 80120ec:	4606      	mov	r6, r0
 80120ee:	460f      	mov	r7, r1
 80120f0:	f7ee f904 	bl	80002fc <__adddf3>
 80120f4:	4652      	mov	r2, sl
 80120f6:	465b      	mov	r3, fp
 80120f8:	f7ee f900 	bl	80002fc <__adddf3>
 80120fc:	2000      	movs	r0, #0
 80120fe:	4604      	mov	r4, r0
 8012100:	460d      	mov	r5, r1
 8012102:	4602      	mov	r2, r0
 8012104:	460b      	mov	r3, r1
 8012106:	4640      	mov	r0, r8
 8012108:	4649      	mov	r1, r9
 801210a:	f7ee faad 	bl	8000668 <__aeabi_dmul>
 801210e:	4b62      	ldr	r3, [pc, #392]	; (8012298 <__ieee754_pow+0x770>)
 8012110:	4680      	mov	r8, r0
 8012112:	4689      	mov	r9, r1
 8012114:	2200      	movs	r2, #0
 8012116:	4620      	mov	r0, r4
 8012118:	4629      	mov	r1, r5
 801211a:	f7ee f8ed 	bl	80002f8 <__aeabi_dsub>
 801211e:	4632      	mov	r2, r6
 8012120:	463b      	mov	r3, r7
 8012122:	f7ee f8e9 	bl	80002f8 <__aeabi_dsub>
 8012126:	4602      	mov	r2, r0
 8012128:	460b      	mov	r3, r1
 801212a:	4650      	mov	r0, sl
 801212c:	4659      	mov	r1, fp
 801212e:	f7ee f8e3 	bl	80002f8 <__aeabi_dsub>
 8012132:	ec53 2b18 	vmov	r2, r3, d8
 8012136:	f7ee fa97 	bl	8000668 <__aeabi_dmul>
 801213a:	4622      	mov	r2, r4
 801213c:	4606      	mov	r6, r0
 801213e:	460f      	mov	r7, r1
 8012140:	462b      	mov	r3, r5
 8012142:	ec51 0b19 	vmov	r0, r1, d9
 8012146:	f7ee fa8f 	bl	8000668 <__aeabi_dmul>
 801214a:	4602      	mov	r2, r0
 801214c:	460b      	mov	r3, r1
 801214e:	4630      	mov	r0, r6
 8012150:	4639      	mov	r1, r7
 8012152:	f7ee f8d3 	bl	80002fc <__adddf3>
 8012156:	4606      	mov	r6, r0
 8012158:	460f      	mov	r7, r1
 801215a:	4602      	mov	r2, r0
 801215c:	460b      	mov	r3, r1
 801215e:	4640      	mov	r0, r8
 8012160:	4649      	mov	r1, r9
 8012162:	f7ee f8cb 	bl	80002fc <__adddf3>
 8012166:	a33e      	add	r3, pc, #248	; (adr r3, 8012260 <__ieee754_pow+0x738>)
 8012168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801216c:	2000      	movs	r0, #0
 801216e:	4604      	mov	r4, r0
 8012170:	460d      	mov	r5, r1
 8012172:	f7ee fa79 	bl	8000668 <__aeabi_dmul>
 8012176:	4642      	mov	r2, r8
 8012178:	ec41 0b18 	vmov	d8, r0, r1
 801217c:	464b      	mov	r3, r9
 801217e:	4620      	mov	r0, r4
 8012180:	4629      	mov	r1, r5
 8012182:	f7ee f8b9 	bl	80002f8 <__aeabi_dsub>
 8012186:	4602      	mov	r2, r0
 8012188:	460b      	mov	r3, r1
 801218a:	4630      	mov	r0, r6
 801218c:	4639      	mov	r1, r7
 801218e:	f7ee f8b3 	bl	80002f8 <__aeabi_dsub>
 8012192:	a335      	add	r3, pc, #212	; (adr r3, 8012268 <__ieee754_pow+0x740>)
 8012194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012198:	f7ee fa66 	bl	8000668 <__aeabi_dmul>
 801219c:	a334      	add	r3, pc, #208	; (adr r3, 8012270 <__ieee754_pow+0x748>)
 801219e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121a2:	4606      	mov	r6, r0
 80121a4:	460f      	mov	r7, r1
 80121a6:	4620      	mov	r0, r4
 80121a8:	4629      	mov	r1, r5
 80121aa:	f7ee fa5d 	bl	8000668 <__aeabi_dmul>
 80121ae:	4602      	mov	r2, r0
 80121b0:	460b      	mov	r3, r1
 80121b2:	4630      	mov	r0, r6
 80121b4:	4639      	mov	r1, r7
 80121b6:	f7ee f8a1 	bl	80002fc <__adddf3>
 80121ba:	9a07      	ldr	r2, [sp, #28]
 80121bc:	4b37      	ldr	r3, [pc, #220]	; (801229c <__ieee754_pow+0x774>)
 80121be:	4413      	add	r3, r2
 80121c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c4:	f7ee f89a 	bl	80002fc <__adddf3>
 80121c8:	4682      	mov	sl, r0
 80121ca:	9805      	ldr	r0, [sp, #20]
 80121cc:	468b      	mov	fp, r1
 80121ce:	f7ee f9e1 	bl	8000594 <__aeabi_i2d>
 80121d2:	9a07      	ldr	r2, [sp, #28]
 80121d4:	4b32      	ldr	r3, [pc, #200]	; (80122a0 <__ieee754_pow+0x778>)
 80121d6:	4413      	add	r3, r2
 80121d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80121dc:	4606      	mov	r6, r0
 80121de:	460f      	mov	r7, r1
 80121e0:	4652      	mov	r2, sl
 80121e2:	465b      	mov	r3, fp
 80121e4:	ec51 0b18 	vmov	r0, r1, d8
 80121e8:	f7ee f888 	bl	80002fc <__adddf3>
 80121ec:	4642      	mov	r2, r8
 80121ee:	464b      	mov	r3, r9
 80121f0:	f7ee f884 	bl	80002fc <__adddf3>
 80121f4:	4632      	mov	r2, r6
 80121f6:	463b      	mov	r3, r7
 80121f8:	f7ee f880 	bl	80002fc <__adddf3>
 80121fc:	2000      	movs	r0, #0
 80121fe:	4632      	mov	r2, r6
 8012200:	463b      	mov	r3, r7
 8012202:	4604      	mov	r4, r0
 8012204:	460d      	mov	r5, r1
 8012206:	f7ee f877 	bl	80002f8 <__aeabi_dsub>
 801220a:	4642      	mov	r2, r8
 801220c:	464b      	mov	r3, r9
 801220e:	f7ee f873 	bl	80002f8 <__aeabi_dsub>
 8012212:	ec53 2b18 	vmov	r2, r3, d8
 8012216:	f7ee f86f 	bl	80002f8 <__aeabi_dsub>
 801221a:	4602      	mov	r2, r0
 801221c:	460b      	mov	r3, r1
 801221e:	4650      	mov	r0, sl
 8012220:	4659      	mov	r1, fp
 8012222:	e610      	b.n	8011e46 <__ieee754_pow+0x31e>
 8012224:	2401      	movs	r4, #1
 8012226:	e6a1      	b.n	8011f6c <__ieee754_pow+0x444>
 8012228:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012278 <__ieee754_pow+0x750>
 801222c:	e617      	b.n	8011e5e <__ieee754_pow+0x336>
 801222e:	bf00      	nop
 8012230:	4a454eef 	.word	0x4a454eef
 8012234:	3fca7e28 	.word	0x3fca7e28
 8012238:	93c9db65 	.word	0x93c9db65
 801223c:	3fcd864a 	.word	0x3fcd864a
 8012240:	a91d4101 	.word	0xa91d4101
 8012244:	3fd17460 	.word	0x3fd17460
 8012248:	518f264d 	.word	0x518f264d
 801224c:	3fd55555 	.word	0x3fd55555
 8012250:	db6fabff 	.word	0xdb6fabff
 8012254:	3fdb6db6 	.word	0x3fdb6db6
 8012258:	33333303 	.word	0x33333303
 801225c:	3fe33333 	.word	0x3fe33333
 8012260:	e0000000 	.word	0xe0000000
 8012264:	3feec709 	.word	0x3feec709
 8012268:	dc3a03fd 	.word	0xdc3a03fd
 801226c:	3feec709 	.word	0x3feec709
 8012270:	145b01f5 	.word	0x145b01f5
 8012274:	be3e2fe0 	.word	0xbe3e2fe0
 8012278:	00000000 	.word	0x00000000
 801227c:	3ff00000 	.word	0x3ff00000
 8012280:	7ff00000 	.word	0x7ff00000
 8012284:	43400000 	.word	0x43400000
 8012288:	0003988e 	.word	0x0003988e
 801228c:	000bb679 	.word	0x000bb679
 8012290:	08012ec8 	.word	0x08012ec8
 8012294:	3ff00000 	.word	0x3ff00000
 8012298:	40080000 	.word	0x40080000
 801229c:	08012ee8 	.word	0x08012ee8
 80122a0:	08012ed8 	.word	0x08012ed8
 80122a4:	a3b3      	add	r3, pc, #716	; (adr r3, 8012574 <__ieee754_pow+0xa4c>)
 80122a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122aa:	4640      	mov	r0, r8
 80122ac:	4649      	mov	r1, r9
 80122ae:	f7ee f825 	bl	80002fc <__adddf3>
 80122b2:	4622      	mov	r2, r4
 80122b4:	ec41 0b1a 	vmov	d10, r0, r1
 80122b8:	462b      	mov	r3, r5
 80122ba:	4630      	mov	r0, r6
 80122bc:	4639      	mov	r1, r7
 80122be:	f7ee f81b 	bl	80002f8 <__aeabi_dsub>
 80122c2:	4602      	mov	r2, r0
 80122c4:	460b      	mov	r3, r1
 80122c6:	ec51 0b1a 	vmov	r0, r1, d10
 80122ca:	f7ee fc5d 	bl	8000b88 <__aeabi_dcmpgt>
 80122ce:	2800      	cmp	r0, #0
 80122d0:	f47f ae04 	bne.w	8011edc <__ieee754_pow+0x3b4>
 80122d4:	4aa2      	ldr	r2, [pc, #648]	; (8012560 <__ieee754_pow+0xa38>)
 80122d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80122da:	4293      	cmp	r3, r2
 80122dc:	f340 8107 	ble.w	80124ee <__ieee754_pow+0x9c6>
 80122e0:	151b      	asrs	r3, r3, #20
 80122e2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80122e6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80122ea:	fa4a fa03 	asr.w	sl, sl, r3
 80122ee:	44da      	add	sl, fp
 80122f0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80122f4:	489b      	ldr	r0, [pc, #620]	; (8012564 <__ieee754_pow+0xa3c>)
 80122f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80122fa:	4108      	asrs	r0, r1
 80122fc:	ea00 030a 	and.w	r3, r0, sl
 8012300:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8012304:	f1c1 0114 	rsb	r1, r1, #20
 8012308:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801230c:	fa4a fa01 	asr.w	sl, sl, r1
 8012310:	f1bb 0f00 	cmp.w	fp, #0
 8012314:	f04f 0200 	mov.w	r2, #0
 8012318:	4620      	mov	r0, r4
 801231a:	4629      	mov	r1, r5
 801231c:	bfb8      	it	lt
 801231e:	f1ca 0a00 	rsblt	sl, sl, #0
 8012322:	f7ed ffe9 	bl	80002f8 <__aeabi_dsub>
 8012326:	ec41 0b19 	vmov	d9, r0, r1
 801232a:	4642      	mov	r2, r8
 801232c:	464b      	mov	r3, r9
 801232e:	ec51 0b19 	vmov	r0, r1, d9
 8012332:	f7ed ffe3 	bl	80002fc <__adddf3>
 8012336:	a37a      	add	r3, pc, #488	; (adr r3, 8012520 <__ieee754_pow+0x9f8>)
 8012338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801233c:	2000      	movs	r0, #0
 801233e:	4604      	mov	r4, r0
 8012340:	460d      	mov	r5, r1
 8012342:	f7ee f991 	bl	8000668 <__aeabi_dmul>
 8012346:	ec53 2b19 	vmov	r2, r3, d9
 801234a:	4606      	mov	r6, r0
 801234c:	460f      	mov	r7, r1
 801234e:	4620      	mov	r0, r4
 8012350:	4629      	mov	r1, r5
 8012352:	f7ed ffd1 	bl	80002f8 <__aeabi_dsub>
 8012356:	4602      	mov	r2, r0
 8012358:	460b      	mov	r3, r1
 801235a:	4640      	mov	r0, r8
 801235c:	4649      	mov	r1, r9
 801235e:	f7ed ffcb 	bl	80002f8 <__aeabi_dsub>
 8012362:	a371      	add	r3, pc, #452	; (adr r3, 8012528 <__ieee754_pow+0xa00>)
 8012364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012368:	f7ee f97e 	bl	8000668 <__aeabi_dmul>
 801236c:	a370      	add	r3, pc, #448	; (adr r3, 8012530 <__ieee754_pow+0xa08>)
 801236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012372:	4680      	mov	r8, r0
 8012374:	4689      	mov	r9, r1
 8012376:	4620      	mov	r0, r4
 8012378:	4629      	mov	r1, r5
 801237a:	f7ee f975 	bl	8000668 <__aeabi_dmul>
 801237e:	4602      	mov	r2, r0
 8012380:	460b      	mov	r3, r1
 8012382:	4640      	mov	r0, r8
 8012384:	4649      	mov	r1, r9
 8012386:	f7ed ffb9 	bl	80002fc <__adddf3>
 801238a:	4604      	mov	r4, r0
 801238c:	460d      	mov	r5, r1
 801238e:	4602      	mov	r2, r0
 8012390:	460b      	mov	r3, r1
 8012392:	4630      	mov	r0, r6
 8012394:	4639      	mov	r1, r7
 8012396:	f7ed ffb1 	bl	80002fc <__adddf3>
 801239a:	4632      	mov	r2, r6
 801239c:	463b      	mov	r3, r7
 801239e:	4680      	mov	r8, r0
 80123a0:	4689      	mov	r9, r1
 80123a2:	f7ed ffa9 	bl	80002f8 <__aeabi_dsub>
 80123a6:	4602      	mov	r2, r0
 80123a8:	460b      	mov	r3, r1
 80123aa:	4620      	mov	r0, r4
 80123ac:	4629      	mov	r1, r5
 80123ae:	f7ed ffa3 	bl	80002f8 <__aeabi_dsub>
 80123b2:	4642      	mov	r2, r8
 80123b4:	4606      	mov	r6, r0
 80123b6:	460f      	mov	r7, r1
 80123b8:	464b      	mov	r3, r9
 80123ba:	4640      	mov	r0, r8
 80123bc:	4649      	mov	r1, r9
 80123be:	f7ee f953 	bl	8000668 <__aeabi_dmul>
 80123c2:	a35d      	add	r3, pc, #372	; (adr r3, 8012538 <__ieee754_pow+0xa10>)
 80123c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c8:	4604      	mov	r4, r0
 80123ca:	460d      	mov	r5, r1
 80123cc:	f7ee f94c 	bl	8000668 <__aeabi_dmul>
 80123d0:	a35b      	add	r3, pc, #364	; (adr r3, 8012540 <__ieee754_pow+0xa18>)
 80123d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123d6:	f7ed ff8f 	bl	80002f8 <__aeabi_dsub>
 80123da:	4622      	mov	r2, r4
 80123dc:	462b      	mov	r3, r5
 80123de:	f7ee f943 	bl	8000668 <__aeabi_dmul>
 80123e2:	a359      	add	r3, pc, #356	; (adr r3, 8012548 <__ieee754_pow+0xa20>)
 80123e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e8:	f7ed ff88 	bl	80002fc <__adddf3>
 80123ec:	4622      	mov	r2, r4
 80123ee:	462b      	mov	r3, r5
 80123f0:	f7ee f93a 	bl	8000668 <__aeabi_dmul>
 80123f4:	a356      	add	r3, pc, #344	; (adr r3, 8012550 <__ieee754_pow+0xa28>)
 80123f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123fa:	f7ed ff7d 	bl	80002f8 <__aeabi_dsub>
 80123fe:	4622      	mov	r2, r4
 8012400:	462b      	mov	r3, r5
 8012402:	f7ee f931 	bl	8000668 <__aeabi_dmul>
 8012406:	a354      	add	r3, pc, #336	; (adr r3, 8012558 <__ieee754_pow+0xa30>)
 8012408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801240c:	f7ed ff76 	bl	80002fc <__adddf3>
 8012410:	4622      	mov	r2, r4
 8012412:	462b      	mov	r3, r5
 8012414:	f7ee f928 	bl	8000668 <__aeabi_dmul>
 8012418:	4602      	mov	r2, r0
 801241a:	460b      	mov	r3, r1
 801241c:	4640      	mov	r0, r8
 801241e:	4649      	mov	r1, r9
 8012420:	f7ed ff6a 	bl	80002f8 <__aeabi_dsub>
 8012424:	4604      	mov	r4, r0
 8012426:	460d      	mov	r5, r1
 8012428:	4602      	mov	r2, r0
 801242a:	460b      	mov	r3, r1
 801242c:	4640      	mov	r0, r8
 801242e:	4649      	mov	r1, r9
 8012430:	f7ee f91a 	bl	8000668 <__aeabi_dmul>
 8012434:	2200      	movs	r2, #0
 8012436:	ec41 0b19 	vmov	d9, r0, r1
 801243a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801243e:	4620      	mov	r0, r4
 8012440:	4629      	mov	r1, r5
 8012442:	f7ed ff59 	bl	80002f8 <__aeabi_dsub>
 8012446:	4602      	mov	r2, r0
 8012448:	460b      	mov	r3, r1
 801244a:	ec51 0b19 	vmov	r0, r1, d9
 801244e:	f7ee fa35 	bl	80008bc <__aeabi_ddiv>
 8012452:	4632      	mov	r2, r6
 8012454:	4604      	mov	r4, r0
 8012456:	460d      	mov	r5, r1
 8012458:	463b      	mov	r3, r7
 801245a:	4640      	mov	r0, r8
 801245c:	4649      	mov	r1, r9
 801245e:	f7ee f903 	bl	8000668 <__aeabi_dmul>
 8012462:	4632      	mov	r2, r6
 8012464:	463b      	mov	r3, r7
 8012466:	f7ed ff49 	bl	80002fc <__adddf3>
 801246a:	4602      	mov	r2, r0
 801246c:	460b      	mov	r3, r1
 801246e:	4620      	mov	r0, r4
 8012470:	4629      	mov	r1, r5
 8012472:	f7ed ff41 	bl	80002f8 <__aeabi_dsub>
 8012476:	4642      	mov	r2, r8
 8012478:	464b      	mov	r3, r9
 801247a:	f7ed ff3d 	bl	80002f8 <__aeabi_dsub>
 801247e:	460b      	mov	r3, r1
 8012480:	4602      	mov	r2, r0
 8012482:	4939      	ldr	r1, [pc, #228]	; (8012568 <__ieee754_pow+0xa40>)
 8012484:	2000      	movs	r0, #0
 8012486:	f7ed ff37 	bl	80002f8 <__aeabi_dsub>
 801248a:	ec41 0b10 	vmov	d0, r0, r1
 801248e:	ee10 3a90 	vmov	r3, s1
 8012492:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801249a:	da2b      	bge.n	80124f4 <__ieee754_pow+0x9cc>
 801249c:	4650      	mov	r0, sl
 801249e:	f000 f877 	bl	8012590 <scalbn>
 80124a2:	ec51 0b10 	vmov	r0, r1, d0
 80124a6:	ec53 2b18 	vmov	r2, r3, d8
 80124aa:	f7ff bbee 	b.w	8011c8a <__ieee754_pow+0x162>
 80124ae:	4b2f      	ldr	r3, [pc, #188]	; (801256c <__ieee754_pow+0xa44>)
 80124b0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80124b4:	429e      	cmp	r6, r3
 80124b6:	f77f af0d 	ble.w	80122d4 <__ieee754_pow+0x7ac>
 80124ba:	4b2d      	ldr	r3, [pc, #180]	; (8012570 <__ieee754_pow+0xa48>)
 80124bc:	440b      	add	r3, r1
 80124be:	4303      	orrs	r3, r0
 80124c0:	d009      	beq.n	80124d6 <__ieee754_pow+0x9ae>
 80124c2:	ec51 0b18 	vmov	r0, r1, d8
 80124c6:	2200      	movs	r2, #0
 80124c8:	2300      	movs	r3, #0
 80124ca:	f7ee fb3f 	bl	8000b4c <__aeabi_dcmplt>
 80124ce:	3800      	subs	r0, #0
 80124d0:	bf18      	it	ne
 80124d2:	2001      	movne	r0, #1
 80124d4:	e448      	b.n	8011d68 <__ieee754_pow+0x240>
 80124d6:	4622      	mov	r2, r4
 80124d8:	462b      	mov	r3, r5
 80124da:	f7ed ff0d 	bl	80002f8 <__aeabi_dsub>
 80124de:	4642      	mov	r2, r8
 80124e0:	464b      	mov	r3, r9
 80124e2:	f7ee fb47 	bl	8000b74 <__aeabi_dcmpge>
 80124e6:	2800      	cmp	r0, #0
 80124e8:	f43f aef4 	beq.w	80122d4 <__ieee754_pow+0x7ac>
 80124ec:	e7e9      	b.n	80124c2 <__ieee754_pow+0x99a>
 80124ee:	f04f 0a00 	mov.w	sl, #0
 80124f2:	e71a      	b.n	801232a <__ieee754_pow+0x802>
 80124f4:	ec51 0b10 	vmov	r0, r1, d0
 80124f8:	4619      	mov	r1, r3
 80124fa:	e7d4      	b.n	80124a6 <__ieee754_pow+0x97e>
 80124fc:	491a      	ldr	r1, [pc, #104]	; (8012568 <__ieee754_pow+0xa40>)
 80124fe:	2000      	movs	r0, #0
 8012500:	f7ff bb31 	b.w	8011b66 <__ieee754_pow+0x3e>
 8012504:	2000      	movs	r0, #0
 8012506:	2100      	movs	r1, #0
 8012508:	f7ff bb2d 	b.w	8011b66 <__ieee754_pow+0x3e>
 801250c:	4630      	mov	r0, r6
 801250e:	4639      	mov	r1, r7
 8012510:	f7ff bb29 	b.w	8011b66 <__ieee754_pow+0x3e>
 8012514:	9204      	str	r2, [sp, #16]
 8012516:	f7ff bb7b 	b.w	8011c10 <__ieee754_pow+0xe8>
 801251a:	2300      	movs	r3, #0
 801251c:	f7ff bb65 	b.w	8011bea <__ieee754_pow+0xc2>
 8012520:	00000000 	.word	0x00000000
 8012524:	3fe62e43 	.word	0x3fe62e43
 8012528:	fefa39ef 	.word	0xfefa39ef
 801252c:	3fe62e42 	.word	0x3fe62e42
 8012530:	0ca86c39 	.word	0x0ca86c39
 8012534:	be205c61 	.word	0xbe205c61
 8012538:	72bea4d0 	.word	0x72bea4d0
 801253c:	3e663769 	.word	0x3e663769
 8012540:	c5d26bf1 	.word	0xc5d26bf1
 8012544:	3ebbbd41 	.word	0x3ebbbd41
 8012548:	af25de2c 	.word	0xaf25de2c
 801254c:	3f11566a 	.word	0x3f11566a
 8012550:	16bebd93 	.word	0x16bebd93
 8012554:	3f66c16c 	.word	0x3f66c16c
 8012558:	5555553e 	.word	0x5555553e
 801255c:	3fc55555 	.word	0x3fc55555
 8012560:	3fe00000 	.word	0x3fe00000
 8012564:	fff00000 	.word	0xfff00000
 8012568:	3ff00000 	.word	0x3ff00000
 801256c:	4090cbff 	.word	0x4090cbff
 8012570:	3f6f3400 	.word	0x3f6f3400
 8012574:	652b82fe 	.word	0x652b82fe
 8012578:	3c971547 	.word	0x3c971547

0801257c <fabs>:
 801257c:	ec51 0b10 	vmov	r0, r1, d0
 8012580:	ee10 2a10 	vmov	r2, s0
 8012584:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012588:	ec43 2b10 	vmov	d0, r2, r3
 801258c:	4770      	bx	lr
	...

08012590 <scalbn>:
 8012590:	b570      	push	{r4, r5, r6, lr}
 8012592:	ec55 4b10 	vmov	r4, r5, d0
 8012596:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801259a:	4606      	mov	r6, r0
 801259c:	462b      	mov	r3, r5
 801259e:	b999      	cbnz	r1, 80125c8 <scalbn+0x38>
 80125a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80125a4:	4323      	orrs	r3, r4
 80125a6:	d03f      	beq.n	8012628 <scalbn+0x98>
 80125a8:	4b35      	ldr	r3, [pc, #212]	; (8012680 <scalbn+0xf0>)
 80125aa:	4629      	mov	r1, r5
 80125ac:	ee10 0a10 	vmov	r0, s0
 80125b0:	2200      	movs	r2, #0
 80125b2:	f7ee f859 	bl	8000668 <__aeabi_dmul>
 80125b6:	4b33      	ldr	r3, [pc, #204]	; (8012684 <scalbn+0xf4>)
 80125b8:	429e      	cmp	r6, r3
 80125ba:	4604      	mov	r4, r0
 80125bc:	460d      	mov	r5, r1
 80125be:	da10      	bge.n	80125e2 <scalbn+0x52>
 80125c0:	a327      	add	r3, pc, #156	; (adr r3, 8012660 <scalbn+0xd0>)
 80125c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c6:	e01f      	b.n	8012608 <scalbn+0x78>
 80125c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80125cc:	4291      	cmp	r1, r2
 80125ce:	d10c      	bne.n	80125ea <scalbn+0x5a>
 80125d0:	ee10 2a10 	vmov	r2, s0
 80125d4:	4620      	mov	r0, r4
 80125d6:	4629      	mov	r1, r5
 80125d8:	f7ed fe90 	bl	80002fc <__adddf3>
 80125dc:	4604      	mov	r4, r0
 80125de:	460d      	mov	r5, r1
 80125e0:	e022      	b.n	8012628 <scalbn+0x98>
 80125e2:	460b      	mov	r3, r1
 80125e4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80125e8:	3936      	subs	r1, #54	; 0x36
 80125ea:	f24c 3250 	movw	r2, #50000	; 0xc350
 80125ee:	4296      	cmp	r6, r2
 80125f0:	dd0d      	ble.n	801260e <scalbn+0x7e>
 80125f2:	2d00      	cmp	r5, #0
 80125f4:	a11c      	add	r1, pc, #112	; (adr r1, 8012668 <scalbn+0xd8>)
 80125f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125fa:	da02      	bge.n	8012602 <scalbn+0x72>
 80125fc:	a11c      	add	r1, pc, #112	; (adr r1, 8012670 <scalbn+0xe0>)
 80125fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012602:	a319      	add	r3, pc, #100	; (adr r3, 8012668 <scalbn+0xd8>)
 8012604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012608:	f7ee f82e 	bl	8000668 <__aeabi_dmul>
 801260c:	e7e6      	b.n	80125dc <scalbn+0x4c>
 801260e:	1872      	adds	r2, r6, r1
 8012610:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012614:	428a      	cmp	r2, r1
 8012616:	dcec      	bgt.n	80125f2 <scalbn+0x62>
 8012618:	2a00      	cmp	r2, #0
 801261a:	dd08      	ble.n	801262e <scalbn+0x9e>
 801261c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012620:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012624:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012628:	ec45 4b10 	vmov	d0, r4, r5
 801262c:	bd70      	pop	{r4, r5, r6, pc}
 801262e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012632:	da08      	bge.n	8012646 <scalbn+0xb6>
 8012634:	2d00      	cmp	r5, #0
 8012636:	a10a      	add	r1, pc, #40	; (adr r1, 8012660 <scalbn+0xd0>)
 8012638:	e9d1 0100 	ldrd	r0, r1, [r1]
 801263c:	dac0      	bge.n	80125c0 <scalbn+0x30>
 801263e:	a10e      	add	r1, pc, #56	; (adr r1, 8012678 <scalbn+0xe8>)
 8012640:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012644:	e7bc      	b.n	80125c0 <scalbn+0x30>
 8012646:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801264a:	3236      	adds	r2, #54	; 0x36
 801264c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012650:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012654:	4620      	mov	r0, r4
 8012656:	4b0c      	ldr	r3, [pc, #48]	; (8012688 <scalbn+0xf8>)
 8012658:	2200      	movs	r2, #0
 801265a:	e7d5      	b.n	8012608 <scalbn+0x78>
 801265c:	f3af 8000 	nop.w
 8012660:	c2f8f359 	.word	0xc2f8f359
 8012664:	01a56e1f 	.word	0x01a56e1f
 8012668:	8800759c 	.word	0x8800759c
 801266c:	7e37e43c 	.word	0x7e37e43c
 8012670:	8800759c 	.word	0x8800759c
 8012674:	fe37e43c 	.word	0xfe37e43c
 8012678:	c2f8f359 	.word	0xc2f8f359
 801267c:	81a56e1f 	.word	0x81a56e1f
 8012680:	43500000 	.word	0x43500000
 8012684:	ffff3cb0 	.word	0xffff3cb0
 8012688:	3c900000 	.word	0x3c900000

0801268c <with_errno>:
 801268c:	b570      	push	{r4, r5, r6, lr}
 801268e:	4604      	mov	r4, r0
 8012690:	460d      	mov	r5, r1
 8012692:	4616      	mov	r6, r2
 8012694:	f7fd f924 	bl	800f8e0 <__errno>
 8012698:	4629      	mov	r1, r5
 801269a:	6006      	str	r6, [r0, #0]
 801269c:	4620      	mov	r0, r4
 801269e:	bd70      	pop	{r4, r5, r6, pc}

080126a0 <xflow>:
 80126a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80126a2:	4614      	mov	r4, r2
 80126a4:	461d      	mov	r5, r3
 80126a6:	b108      	cbz	r0, 80126ac <xflow+0xc>
 80126a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80126ac:	e9cd 2300 	strd	r2, r3, [sp]
 80126b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80126b4:	4620      	mov	r0, r4
 80126b6:	4629      	mov	r1, r5
 80126b8:	f7ed ffd6 	bl	8000668 <__aeabi_dmul>
 80126bc:	2222      	movs	r2, #34	; 0x22
 80126be:	b003      	add	sp, #12
 80126c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80126c4:	f7ff bfe2 	b.w	801268c <with_errno>

080126c8 <__math_uflow>:
 80126c8:	b508      	push	{r3, lr}
 80126ca:	2200      	movs	r2, #0
 80126cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80126d0:	f7ff ffe6 	bl	80126a0 <xflow>
 80126d4:	ec41 0b10 	vmov	d0, r0, r1
 80126d8:	bd08      	pop	{r3, pc}

080126da <__math_oflow>:
 80126da:	b508      	push	{r3, lr}
 80126dc:	2200      	movs	r2, #0
 80126de:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80126e2:	f7ff ffdd 	bl	80126a0 <xflow>
 80126e6:	ec41 0b10 	vmov	d0, r0, r1
 80126ea:	bd08      	pop	{r3, pc}

080126ec <__ieee754_sqrt>:
 80126ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126f0:	ec55 4b10 	vmov	r4, r5, d0
 80126f4:	4e67      	ldr	r6, [pc, #412]	; (8012894 <__ieee754_sqrt+0x1a8>)
 80126f6:	43ae      	bics	r6, r5
 80126f8:	ee10 0a10 	vmov	r0, s0
 80126fc:	ee10 2a10 	vmov	r2, s0
 8012700:	4629      	mov	r1, r5
 8012702:	462b      	mov	r3, r5
 8012704:	d10d      	bne.n	8012722 <__ieee754_sqrt+0x36>
 8012706:	f7ed ffaf 	bl	8000668 <__aeabi_dmul>
 801270a:	4602      	mov	r2, r0
 801270c:	460b      	mov	r3, r1
 801270e:	4620      	mov	r0, r4
 8012710:	4629      	mov	r1, r5
 8012712:	f7ed fdf3 	bl	80002fc <__adddf3>
 8012716:	4604      	mov	r4, r0
 8012718:	460d      	mov	r5, r1
 801271a:	ec45 4b10 	vmov	d0, r4, r5
 801271e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012722:	2d00      	cmp	r5, #0
 8012724:	dc0b      	bgt.n	801273e <__ieee754_sqrt+0x52>
 8012726:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801272a:	4326      	orrs	r6, r4
 801272c:	d0f5      	beq.n	801271a <__ieee754_sqrt+0x2e>
 801272e:	b135      	cbz	r5, 801273e <__ieee754_sqrt+0x52>
 8012730:	f7ed fde2 	bl	80002f8 <__aeabi_dsub>
 8012734:	4602      	mov	r2, r0
 8012736:	460b      	mov	r3, r1
 8012738:	f7ee f8c0 	bl	80008bc <__aeabi_ddiv>
 801273c:	e7eb      	b.n	8012716 <__ieee754_sqrt+0x2a>
 801273e:	1509      	asrs	r1, r1, #20
 8012740:	f000 808d 	beq.w	801285e <__ieee754_sqrt+0x172>
 8012744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012748:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801274c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012750:	07c9      	lsls	r1, r1, #31
 8012752:	bf5c      	itt	pl
 8012754:	005b      	lslpl	r3, r3, #1
 8012756:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801275a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801275e:	bf58      	it	pl
 8012760:	0052      	lslpl	r2, r2, #1
 8012762:	2500      	movs	r5, #0
 8012764:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012768:	1076      	asrs	r6, r6, #1
 801276a:	0052      	lsls	r2, r2, #1
 801276c:	f04f 0e16 	mov.w	lr, #22
 8012770:	46ac      	mov	ip, r5
 8012772:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012776:	eb0c 0001 	add.w	r0, ip, r1
 801277a:	4298      	cmp	r0, r3
 801277c:	bfde      	ittt	le
 801277e:	1a1b      	suble	r3, r3, r0
 8012780:	eb00 0c01 	addle.w	ip, r0, r1
 8012784:	186d      	addle	r5, r5, r1
 8012786:	005b      	lsls	r3, r3, #1
 8012788:	f1be 0e01 	subs.w	lr, lr, #1
 801278c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012790:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012794:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012798:	d1ed      	bne.n	8012776 <__ieee754_sqrt+0x8a>
 801279a:	4674      	mov	r4, lr
 801279c:	2720      	movs	r7, #32
 801279e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80127a2:	4563      	cmp	r3, ip
 80127a4:	eb01 000e 	add.w	r0, r1, lr
 80127a8:	dc02      	bgt.n	80127b0 <__ieee754_sqrt+0xc4>
 80127aa:	d113      	bne.n	80127d4 <__ieee754_sqrt+0xe8>
 80127ac:	4290      	cmp	r0, r2
 80127ae:	d811      	bhi.n	80127d4 <__ieee754_sqrt+0xe8>
 80127b0:	2800      	cmp	r0, #0
 80127b2:	eb00 0e01 	add.w	lr, r0, r1
 80127b6:	da57      	bge.n	8012868 <__ieee754_sqrt+0x17c>
 80127b8:	f1be 0f00 	cmp.w	lr, #0
 80127bc:	db54      	blt.n	8012868 <__ieee754_sqrt+0x17c>
 80127be:	f10c 0801 	add.w	r8, ip, #1
 80127c2:	eba3 030c 	sub.w	r3, r3, ip
 80127c6:	4290      	cmp	r0, r2
 80127c8:	bf88      	it	hi
 80127ca:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80127ce:	1a12      	subs	r2, r2, r0
 80127d0:	440c      	add	r4, r1
 80127d2:	46c4      	mov	ip, r8
 80127d4:	005b      	lsls	r3, r3, #1
 80127d6:	3f01      	subs	r7, #1
 80127d8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80127dc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80127e0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80127e4:	d1dd      	bne.n	80127a2 <__ieee754_sqrt+0xb6>
 80127e6:	4313      	orrs	r3, r2
 80127e8:	d01b      	beq.n	8012822 <__ieee754_sqrt+0x136>
 80127ea:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8012898 <__ieee754_sqrt+0x1ac>
 80127ee:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801289c <__ieee754_sqrt+0x1b0>
 80127f2:	e9da 0100 	ldrd	r0, r1, [sl]
 80127f6:	e9db 2300 	ldrd	r2, r3, [fp]
 80127fa:	f7ed fd7d 	bl	80002f8 <__aeabi_dsub>
 80127fe:	e9da 8900 	ldrd	r8, r9, [sl]
 8012802:	4602      	mov	r2, r0
 8012804:	460b      	mov	r3, r1
 8012806:	4640      	mov	r0, r8
 8012808:	4649      	mov	r1, r9
 801280a:	f7ee f9a9 	bl	8000b60 <__aeabi_dcmple>
 801280e:	b140      	cbz	r0, 8012822 <__ieee754_sqrt+0x136>
 8012810:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012814:	e9da 0100 	ldrd	r0, r1, [sl]
 8012818:	e9db 2300 	ldrd	r2, r3, [fp]
 801281c:	d126      	bne.n	801286c <__ieee754_sqrt+0x180>
 801281e:	3501      	adds	r5, #1
 8012820:	463c      	mov	r4, r7
 8012822:	106a      	asrs	r2, r5, #1
 8012824:	0863      	lsrs	r3, r4, #1
 8012826:	07e9      	lsls	r1, r5, #31
 8012828:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801282c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8012830:	bf48      	it	mi
 8012832:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8012836:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801283a:	461c      	mov	r4, r3
 801283c:	e76d      	b.n	801271a <__ieee754_sqrt+0x2e>
 801283e:	0ad3      	lsrs	r3, r2, #11
 8012840:	3815      	subs	r0, #21
 8012842:	0552      	lsls	r2, r2, #21
 8012844:	2b00      	cmp	r3, #0
 8012846:	d0fa      	beq.n	801283e <__ieee754_sqrt+0x152>
 8012848:	02dc      	lsls	r4, r3, #11
 801284a:	d50a      	bpl.n	8012862 <__ieee754_sqrt+0x176>
 801284c:	f1c1 0420 	rsb	r4, r1, #32
 8012850:	fa22 f404 	lsr.w	r4, r2, r4
 8012854:	1e4d      	subs	r5, r1, #1
 8012856:	408a      	lsls	r2, r1
 8012858:	4323      	orrs	r3, r4
 801285a:	1b41      	subs	r1, r0, r5
 801285c:	e772      	b.n	8012744 <__ieee754_sqrt+0x58>
 801285e:	4608      	mov	r0, r1
 8012860:	e7f0      	b.n	8012844 <__ieee754_sqrt+0x158>
 8012862:	005b      	lsls	r3, r3, #1
 8012864:	3101      	adds	r1, #1
 8012866:	e7ef      	b.n	8012848 <__ieee754_sqrt+0x15c>
 8012868:	46e0      	mov	r8, ip
 801286a:	e7aa      	b.n	80127c2 <__ieee754_sqrt+0xd6>
 801286c:	f7ed fd46 	bl	80002fc <__adddf3>
 8012870:	e9da 8900 	ldrd	r8, r9, [sl]
 8012874:	4602      	mov	r2, r0
 8012876:	460b      	mov	r3, r1
 8012878:	4640      	mov	r0, r8
 801287a:	4649      	mov	r1, r9
 801287c:	f7ee f966 	bl	8000b4c <__aeabi_dcmplt>
 8012880:	b120      	cbz	r0, 801288c <__ieee754_sqrt+0x1a0>
 8012882:	1ca0      	adds	r0, r4, #2
 8012884:	bf08      	it	eq
 8012886:	3501      	addeq	r5, #1
 8012888:	3402      	adds	r4, #2
 801288a:	e7ca      	b.n	8012822 <__ieee754_sqrt+0x136>
 801288c:	3401      	adds	r4, #1
 801288e:	f024 0401 	bic.w	r4, r4, #1
 8012892:	e7c6      	b.n	8012822 <__ieee754_sqrt+0x136>
 8012894:	7ff00000 	.word	0x7ff00000
 8012898:	20000358 	.word	0x20000358
 801289c:	20000360 	.word	0x20000360

080128a0 <_init>:
 80128a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128a2:	bf00      	nop
 80128a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128a6:	bc08      	pop	{r3}
 80128a8:	469e      	mov	lr, r3
 80128aa:	4770      	bx	lr

080128ac <_fini>:
 80128ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128ae:	bf00      	nop
 80128b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128b2:	bc08      	pop	{r3}
 80128b4:	469e      	mov	lr, r3
 80128b6:	4770      	bx	lr
