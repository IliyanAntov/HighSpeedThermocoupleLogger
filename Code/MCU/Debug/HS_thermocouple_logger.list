
HS_thermocouple_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3c8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  0800d5a8  0800d5a8  0001d5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d75c  0800d75c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800d75c  0800d75c  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d75c  0800d75c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d75c  0800d75c  0001d75c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d760  0800d760  0001d760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005e00  200001e8  0800d94c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  20005fe8  0800d94c  00025fe8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ff18  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004836  00000000  00000000  00040173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cc8  00000000  00000000  000449b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001610  00000000  00000000  00046678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cb46  00000000  00000000  00047c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023565  00000000  00000000  000747ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00118df5  00000000  00000000  00097d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000082c0  00000000  00000000  001b0b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001b8de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d590 	.word	0x0800d590

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	0800d590 	.word	0x0800d590

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e6:	f001 fad8 	bl	800189a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ea:	f000 f8a5 	bl	8000438 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ee:	f000 fbe5 	bl	8000abc <MX_GPIO_Init>
  MX_DMA_Init();
 80002f2:	f000 fba1 	bl	8000a38 <MX_DMA_Init>
  MX_ADC1_Init();
 80002f6:	f000 f8eb 	bl	80004d0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80002fa:	f000 f96d 	bl	80005d8 <MX_ADC2_Init>
  MX_ADC3_Init();
 80002fe:	f000 f9dd 	bl	80006bc <MX_ADC3_Init>
  MX_ADC4_Init();
 8000302:	f000 fa61 	bl	80007c8 <MX_ADC4_Init>
  MX_TIM2_Init();
 8000306:	f000 fb4b 	bl	80009a0 <MX_TIM2_Init>
  MX_USB_Device_Init();
 800030a:	f00b fc53 	bl	800bbb4 <MX_USB_Device_Init>
  MX_I2C3_Init();
 800030e:	f000 fb07 	bl	8000920 <MX_I2C3_Init>
  MX_DAC1_Init();
 8000312:	f000 facb 	bl	80008ac <MX_DAC1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Wait for instructions
	  if(conv_state == CFG_RECEIVED){
 8000316:	4b3e      	ldr	r3, [pc, #248]	; (8000410 <main+0x130>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	2b01      	cmp	r3, #1
 800031e:	d101      	bne.n	8000324 <main+0x44>
		  InterpretConfig();
 8000320:	f000 fc6a 	bl	8000bf8 <InterpretConfig>
	  }
	  if(conv_state == CFG_INTERPRETED){
 8000324:	4b3a      	ldr	r3, [pc, #232]	; (8000410 <main+0x130>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	b2db      	uxtb	r3, r3
 800032a:	2b02      	cmp	r3, #2
 800032c:	d101      	bne.n	8000332 <main+0x52>
		  SetupMeasurement();
 800032e:	f000 fd7f 	bl	8000e30 <SetupMeasurement>
	  }
	  if(conv_state == ARMED){
 8000332:	4b37      	ldr	r3, [pc, #220]	; (8000410 <main+0x130>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	b2db      	uxtb	r3, r3
 8000338:	2b03      	cmp	r3, #3
 800033a:	d101      	bne.n	8000340 <main+0x60>
		  StartMeasurement();
 800033c:	f000 fdac 	bl	8000e98 <StartMeasurement>
	  }
	  if(conv_state == MEASURING){
 8000340:	4b33      	ldr	r3, [pc, #204]	; (8000410 <main+0x130>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	b2db      	uxtb	r3, r3
 8000346:	2b04      	cmp	r3, #4
 8000348:	d13c      	bne.n	80003c4 <main+0xe4>
		 if(adc_state[0] == START_FULL &&
 800034a:	4b32      	ldr	r3, [pc, #200]	; (8000414 <main+0x134>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d11a      	bne.n	8000388 <main+0xa8>
			adc_state[1] == START_FULL &&
 8000352:	4b30      	ldr	r3, [pc, #192]	; (8000414 <main+0x134>)
 8000354:	785b      	ldrb	r3, [r3, #1]
		 if(adc_state[0] == START_FULL &&
 8000356:	2b01      	cmp	r3, #1
 8000358:	d116      	bne.n	8000388 <main+0xa8>
			adc_state[2] == START_FULL &&
 800035a:	4b2e      	ldr	r3, [pc, #184]	; (8000414 <main+0x134>)
 800035c:	789b      	ldrb	r3, [r3, #2]
			adc_state[1] == START_FULL &&
 800035e:	2b01      	cmp	r3, #1
 8000360:	d112      	bne.n	8000388 <main+0xa8>
			adc_state[3] == START_FULL) {
 8000362:	4b2c      	ldr	r3, [pc, #176]	; (8000414 <main+0x134>)
 8000364:	78db      	ldrb	r3, [r3, #3]
			adc_state[2] == START_FULL &&
 8000366:	2b01      	cmp	r3, #1
 8000368:	d10e      	bne.n	8000388 <main+0xa8>
			 for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 800036a:	2300      	movs	r3, #0
 800036c:	607b      	str	r3, [r7, #4]
 800036e:	e007      	b.n	8000380 <main+0xa0>
				 adc_state[i] = EMPTY;
 8000370:	4a28      	ldr	r2, [pc, #160]	; (8000414 <main+0x134>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4413      	add	r3, r2
 8000376:	2200      	movs	r2, #0
 8000378:	701a      	strb	r2, [r3, #0]
			 for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	3301      	adds	r3, #1
 800037e:	607b      	str	r3, [r7, #4]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2b03      	cmp	r3, #3
 8000384:	ddf4      	ble.n	8000370 <main+0x90>
 8000386:	e01d      	b.n	80003c4 <main+0xe4>
			 }
		 }
		 else if(adc_state[0] == END_FULL &&
 8000388:	4b22      	ldr	r3, [pc, #136]	; (8000414 <main+0x134>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2b02      	cmp	r3, #2
 800038e:	d119      	bne.n	80003c4 <main+0xe4>
				 adc_state[1] == END_FULL &&
 8000390:	4b20      	ldr	r3, [pc, #128]	; (8000414 <main+0x134>)
 8000392:	785b      	ldrb	r3, [r3, #1]
		 else if(adc_state[0] == END_FULL &&
 8000394:	2b02      	cmp	r3, #2
 8000396:	d115      	bne.n	80003c4 <main+0xe4>
				 adc_state[2] == END_FULL &&
 8000398:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <main+0x134>)
 800039a:	789b      	ldrb	r3, [r3, #2]
				 adc_state[1] == END_FULL &&
 800039c:	2b02      	cmp	r3, #2
 800039e:	d111      	bne.n	80003c4 <main+0xe4>
				 adc_state[3] == END_FULL) {
 80003a0:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <main+0x134>)
 80003a2:	78db      	ldrb	r3, [r3, #3]
				 adc_state[2] == END_FULL &&
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	d10d      	bne.n	80003c4 <main+0xe4>
			 for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 80003a8:	2300      	movs	r3, #0
 80003aa:	603b      	str	r3, [r7, #0]
 80003ac:	e007      	b.n	80003be <main+0xde>
				 adc_state[i] = EMPTY;
 80003ae:	4a19      	ldr	r2, [pc, #100]	; (8000414 <main+0x134>)
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	4413      	add	r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	701a      	strb	r2, [r3, #0]
			 for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	3301      	adds	r3, #1
 80003bc:	603b      	str	r3, [r7, #0]
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	2b03      	cmp	r3, #3
 80003c2:	ddf4      	ble.n	80003ae <main+0xce>
			 }
		 }
	  }
	  if(conv_state == DONE){
 80003c4:	4b12      	ldr	r3, [pc, #72]	; (8000410 <main+0x130>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	2b05      	cmp	r3, #5
 80003cc:	d1a3      	bne.n	8000316 <main+0x36>
		  HAL_TIM_Base_Stop_IT(&htim2);
 80003ce:	4812      	ldr	r0, [pc, #72]	; (8000418 <main+0x138>)
 80003d0:	f006 ff6e 	bl	80072b0 <HAL_TIM_Base_Stop_IT>
		  HAL_ADC_Stop_DMA(&hadc1);
 80003d4:	4811      	ldr	r0, [pc, #68]	; (800041c <main+0x13c>)
 80003d6:	f002 f819 	bl	800240c <HAL_ADC_Stop_DMA>
		  HAL_ADC_Stop_DMA(&hadc2);
 80003da:	4811      	ldr	r0, [pc, #68]	; (8000420 <main+0x140>)
 80003dc:	f002 f816 	bl	800240c <HAL_ADC_Stop_DMA>
		  HAL_ADC_Stop_DMA(&hadc3);
 80003e0:	4810      	ldr	r0, [pc, #64]	; (8000424 <main+0x144>)
 80003e2:	f002 f813 	bl	800240c <HAL_ADC_Stop_DMA>
		  HAL_ADC_Stop_DMA(&hadc4);
 80003e6:	4810      	ldr	r0, [pc, #64]	; (8000428 <main+0x148>)
 80003e8:	f002 f810 	bl	800240c <HAL_ADC_Stop_DMA>
		  memset(adc_buffers, 0, sizeof(adc_buffers));
 80003ec:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80003f0:	2100      	movs	r1, #0
 80003f2:	480e      	ldr	r0, [pc, #56]	; (800042c <main+0x14c>)
 80003f4:	f00c fa8b 	bl	800c90e <memset>
		  conv_state = IDLE;
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <main+0x130>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	701a      	strb	r2, [r3, #0]
		  conv_count = 0;
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <main+0x150>)
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(IND_LED_G_GPIO_Port, IND_LED_G_Pin);
 8000404:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000408:	480a      	ldr	r0, [pc, #40]	; (8000434 <main+0x154>)
 800040a:	f003 fffd 	bl	8004408 <HAL_GPIO_TogglePin>
	  if(conv_state == CFG_RECEIVED){
 800040e:	e782      	b.n	8000316 <main+0x36>
 8000410:	200044a8 	.word	0x200044a8
 8000414:	200044b8 	.word	0x200044b8
 8000418:	2000059c 	.word	0x2000059c
 800041c:	20000204 	.word	0x20000204
 8000420:	20000270 	.word	0x20000270
 8000424:	200002dc 	.word	0x200002dc
 8000428:	20000348 	.word	0x20000348
 800042c:	200005e8 	.word	0x200005e8
 8000430:	200044b0 	.word	0x200044b0
 8000434:	48000800 	.word	0x48000800

08000438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b094      	sub	sp, #80	; 0x50
 800043c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043e:	f107 0318 	add.w	r3, r7, #24
 8000442:	2238      	movs	r2, #56	; 0x38
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f00c fa61 	bl	800c90e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
 8000458:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800045a:	2000      	movs	r0, #0
 800045c:	f005 fe54 	bl	8006108 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000460:	2321      	movs	r3, #33	; 0x21
 8000462:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000464:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000468:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800046a:	2301      	movs	r3, #1
 800046c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046e:	2302      	movs	r3, #2
 8000470:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000472:	2303      	movs	r3, #3
 8000474:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000476:	2302      	movs	r3, #2
 8000478:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 78;
 800047a:	234e      	movs	r3, #78	; 0x4e
 800047c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800047e:	2306      	movs	r3, #6
 8000480:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000482:	2302      	movs	r3, #2
 8000484:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000486:	2302      	movs	r3, #2
 8000488:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048a:	f107 0318 	add.w	r3, r7, #24
 800048e:	4618      	mov	r0, r3
 8000490:	f005 feee 	bl	8006270 <HAL_RCC_OscConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800049a:	f000 fdaf 	bl	8000ffc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049e:	230f      	movs	r3, #15
 80004a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a2:	2303      	movs	r3, #3
 80004a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004aa:	2300      	movs	r3, #0
 80004ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2104      	movs	r1, #4
 80004b6:	4618      	mov	r0, r3
 80004b8:	f006 f9ec 	bl	8006894 <HAL_RCC_ClockConfig>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80004c2:	f000 fd9b 	bl	8000ffc <Error_Handler>
  }
}
 80004c6:	bf00      	nop
 80004c8:	3750      	adds	r7, #80	; 0x50
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08c      	sub	sp, #48	; 0x30
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2220      	movs	r2, #32
 80004e6:	2100      	movs	r1, #0
 80004e8:	4618      	mov	r0, r3
 80004ea:	f00c fa10 	bl	800c90e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004ee:	4b38      	ldr	r3, [pc, #224]	; (80005d0 <MX_ADC1_Init+0x100>)
 80004f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80004f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004f6:	4b36      	ldr	r3, [pc, #216]	; (80005d0 <MX_ADC1_Init+0x100>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004fc:	4b34      	ldr	r3, [pc, #208]	; (80005d0 <MX_ADC1_Init+0x100>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000502:	4b33      	ldr	r3, [pc, #204]	; (80005d0 <MX_ADC1_Init+0x100>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000508:	4b31      	ldr	r3, [pc, #196]	; (80005d0 <MX_ADC1_Init+0x100>)
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800050e:	4b30      	ldr	r3, [pc, #192]	; (80005d0 <MX_ADC1_Init+0x100>)
 8000510:	2200      	movs	r2, #0
 8000512:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000514:	4b2e      	ldr	r3, [pc, #184]	; (80005d0 <MX_ADC1_Init+0x100>)
 8000516:	2204      	movs	r2, #4
 8000518:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800051a:	4b2d      	ldr	r3, [pc, #180]	; (80005d0 <MX_ADC1_Init+0x100>)
 800051c:	2200      	movs	r2, #0
 800051e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000520:	4b2b      	ldr	r3, [pc, #172]	; (80005d0 <MX_ADC1_Init+0x100>)
 8000522:	2200      	movs	r2, #0
 8000524:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000526:	4b2a      	ldr	r3, [pc, #168]	; (80005d0 <MX_ADC1_Init+0x100>)
 8000528:	2201      	movs	r2, #1
 800052a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800052c:	4b28      	ldr	r3, [pc, #160]	; (80005d0 <MX_ADC1_Init+0x100>)
 800052e:	2200      	movs	r2, #0
 8000530:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000534:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <MX_ADC1_Init+0x100>)
 8000536:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 800053a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800053c:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <MX_ADC1_Init+0x100>)
 800053e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000542:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000544:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <MX_ADC1_Init+0x100>)
 8000546:	2201      	movs	r2, #1
 8000548:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800054c:	4b20      	ldr	r3, [pc, #128]	; (80005d0 <MX_ADC1_Init+0x100>)
 800054e:	2200      	movs	r2, #0
 8000550:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000552:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <MX_ADC1_Init+0x100>)
 8000554:	2201      	movs	r2, #1
 8000556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 800055a:	4b1d      	ldr	r3, [pc, #116]	; (80005d0 <MX_ADC1_Init+0x100>)
 800055c:	2210      	movs	r2, #16
 800055e:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <MX_ADC1_Init+0x100>)
 8000562:	2220      	movs	r2, #32
 8000564:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000566:	4b1a      	ldr	r3, [pc, #104]	; (80005d0 <MX_ADC1_Init+0x100>)
 8000568:	2200      	movs	r2, #0
 800056a:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800056c:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <MX_ADC1_Init+0x100>)
 800056e:	2201      	movs	r2, #1
 8000570:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000572:	4817      	ldr	r0, [pc, #92]	; (80005d0 <MX_ADC1_Init+0x100>)
 8000574:	f001 fcba 	bl	8001eec <HAL_ADC_Init>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800057e:	f000 fd3d 	bl	8000ffc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000582:	2300      	movs	r3, #0
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800058a:	4619      	mov	r1, r3
 800058c:	4810      	ldr	r0, [pc, #64]	; (80005d0 <MX_ADC1_Init+0x100>)
 800058e:	f002 fee3 	bl	8003358 <HAL_ADCEx_MultiModeConfigChannel>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000598:	f000 fd30 	bl	8000ffc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800059c:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <MX_ADC1_Init+0x104>)
 800059e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a0:	2306      	movs	r3, #6
 80005a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005a8:	237f      	movs	r3, #127	; 0x7f
 80005aa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ac:	2304      	movs	r3, #4
 80005ae:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	4619      	mov	r1, r3
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_ADC1_Init+0x100>)
 80005ba:	f001 ff93 	bl	80024e4 <HAL_ADC_ConfigChannel>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80005c4:	f000 fd1a 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	3730      	adds	r7, #48	; 0x30
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000204 	.word	0x20000204
 80005d4:	04300002 	.word	0x04300002

080005d8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005de:	463b      	mov	r3, r7
 80005e0:	2220      	movs	r2, #32
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f00c f992 	bl	800c90e <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80005ea:	4b31      	ldr	r3, [pc, #196]	; (80006b0 <MX_ADC2_Init+0xd8>)
 80005ec:	4a31      	ldr	r2, [pc, #196]	; (80006b4 <MX_ADC2_Init+0xdc>)
 80005ee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005f0:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <MX_ADC2_Init+0xd8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80005f6:	4b2e      	ldr	r3, [pc, #184]	; (80006b0 <MX_ADC2_Init+0xd8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fc:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <MX_ADC2_Init+0xd8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000602:	4b2b      	ldr	r3, [pc, #172]	; (80006b0 <MX_ADC2_Init+0xd8>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000608:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <MX_ADC2_Init+0xd8>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060e:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <MX_ADC2_Init+0xd8>)
 8000610:	2204      	movs	r2, #4
 8000612:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000614:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <MX_ADC2_Init+0xd8>)
 8000616:	2200      	movs	r2, #0
 8000618:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800061a:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <MX_ADC2_Init+0xd8>)
 800061c:	2200      	movs	r2, #0
 800061e:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000620:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <MX_ADC2_Init+0xd8>)
 8000622:	2201      	movs	r2, #1
 8000624:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000626:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <MX_ADC2_Init+0xd8>)
 8000628:	2200      	movs	r2, #0
 800062a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800062e:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <MX_ADC2_Init+0xd8>)
 8000630:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000634:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000636:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <MX_ADC2_Init+0xd8>)
 8000638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800063c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_ADC2_Init+0xd8>)
 8000640:	2201      	movs	r2, #1
 8000642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_ADC2_Init+0xd8>)
 8000648:	2200      	movs	r2, #0
 800064a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <MX_ADC2_Init+0xd8>)
 800064e:	2201      	movs	r2, #1
 8000650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <MX_ADC2_Init+0xd8>)
 8000656:	2210      	movs	r2, #16
 8000658:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_ADC2_Init+0xd8>)
 800065c:	2220      	movs	r2, #32
 800065e:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_ADC2_Init+0xd8>)
 8000662:	2200      	movs	r2, #0
 8000664:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_ADC2_Init+0xd8>)
 8000668:	2201      	movs	r2, #1
 800066a:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800066c:	4810      	ldr	r0, [pc, #64]	; (80006b0 <MX_ADC2_Init+0xd8>)
 800066e:	f001 fc3d 	bl	8001eec <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 8000678:	f000 fcc0 	bl	8000ffc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_ADC2_Init+0xe0>)
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000680:	2306      	movs	r3, #6
 8000682:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000688:	237f      	movs	r3, #127	; 0x7f
 800068a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800068c:	2304      	movs	r3, #4
 800068e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000694:	463b      	mov	r3, r7
 8000696:	4619      	mov	r1, r3
 8000698:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_ADC2_Init+0xd8>)
 800069a:	f001 ff23 	bl	80024e4 <HAL_ADC_ConfigChannel>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 80006a4:	f000 fcaa 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000270 	.word	0x20000270
 80006b4:	50000100 	.word	0x50000100
 80006b8:	0c900008 	.word	0x0c900008

080006bc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08c      	sub	sp, #48	; 0x30
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2220      	movs	r2, #32
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f00c f91a 	bl	800c90e <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80006da:	4b38      	ldr	r3, [pc, #224]	; (80007bc <MX_ADC3_Init+0x100>)
 80006dc:	4a38      	ldr	r2, [pc, #224]	; (80007c0 <MX_ADC3_Init+0x104>)
 80006de:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006e0:	4b36      	ldr	r3, [pc, #216]	; (80007bc <MX_ADC3_Init+0x100>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006e6:	4b35      	ldr	r3, [pc, #212]	; (80007bc <MX_ADC3_Init+0x100>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ec:	4b33      	ldr	r3, [pc, #204]	; (80007bc <MX_ADC3_Init+0x100>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80006f2:	4b32      	ldr	r3, [pc, #200]	; (80007bc <MX_ADC3_Init+0x100>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f8:	4b30      	ldr	r3, [pc, #192]	; (80007bc <MX_ADC3_Init+0x100>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fe:	4b2f      	ldr	r3, [pc, #188]	; (80007bc <MX_ADC3_Init+0x100>)
 8000700:	2204      	movs	r2, #4
 8000702:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000704:	4b2d      	ldr	r3, [pc, #180]	; (80007bc <MX_ADC3_Init+0x100>)
 8000706:	2200      	movs	r2, #0
 8000708:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800070a:	4b2c      	ldr	r3, [pc, #176]	; (80007bc <MX_ADC3_Init+0x100>)
 800070c:	2200      	movs	r2, #0
 800070e:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000710:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <MX_ADC3_Init+0x100>)
 8000712:	2201      	movs	r2, #1
 8000714:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000716:	4b29      	ldr	r3, [pc, #164]	; (80007bc <MX_ADC3_Init+0x100>)
 8000718:	2200      	movs	r2, #0
 800071a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800071e:	4b27      	ldr	r3, [pc, #156]	; (80007bc <MX_ADC3_Init+0x100>)
 8000720:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000724:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <MX_ADC3_Init+0x100>)
 8000728:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800072e:	4b23      	ldr	r3, [pc, #140]	; (80007bc <MX_ADC3_Init+0x100>)
 8000730:	2201      	movs	r2, #1
 8000732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000736:	4b21      	ldr	r3, [pc, #132]	; (80007bc <MX_ADC3_Init+0x100>)
 8000738:	2200      	movs	r2, #0
 800073a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 800073c:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MX_ADC3_Init+0x100>)
 800073e:	2201      	movs	r2, #1
 8000740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_ADC3_Init+0x100>)
 8000746:	2210      	movs	r2, #16
 8000748:	645a      	str	r2, [r3, #68]	; 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_ADC3_Init+0x100>)
 800074c:	2220      	movs	r2, #32
 800074e:	649a      	str	r2, [r3, #72]	; 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000750:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_ADC3_Init+0x100>)
 8000752:	2200      	movs	r2, #0
 8000754:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_ADC3_Init+0x100>)
 8000758:	2201      	movs	r2, #1
 800075a:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800075c:	4817      	ldr	r0, [pc, #92]	; (80007bc <MX_ADC3_Init+0x100>)
 800075e:	f001 fbc5 	bl	8001eec <HAL_ADC_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000768:	f000 fc48 	bl	8000ffc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000774:	4619      	mov	r1, r3
 8000776:	4811      	ldr	r0, [pc, #68]	; (80007bc <MX_ADC3_Init+0x100>)
 8000778:	f002 fdee 	bl	8003358 <HAL_ADCEx_MultiModeConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC3_Init+0xca>
  {
    Error_Handler();
 8000782:	f000 fc3b 	bl	8000ffc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_ADC3_Init+0x108>)
 8000788:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800078a:	2306      	movs	r3, #6
 800078c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000792:	237f      	movs	r3, #127	; 0x7f
 8000794:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000796:	2304      	movs	r3, #4
 8000798:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	4619      	mov	r1, r3
 80007a2:	4806      	ldr	r0, [pc, #24]	; (80007bc <MX_ADC3_Init+0x100>)
 80007a4:	f001 fe9e 	bl	80024e4 <HAL_ADC_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC3_Init+0xf6>
  {
    Error_Handler();
 80007ae:	f000 fc25 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	3730      	adds	r7, #48	; 0x30
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200002dc 	.word	0x200002dc
 80007c0:	50000400 	.word	0x50000400
 80007c4:	04300002 	.word	0x04300002

080007c8 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ce:	463b      	mov	r3, r7
 80007d0:	2220      	movs	r2, #32
 80007d2:	2100      	movs	r1, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f00c f89a 	bl	800c90e <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80007da:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <MX_ADC4_Init+0xd8>)
 80007dc:	4a31      	ldr	r2, [pc, #196]	; (80008a4 <MX_ADC4_Init+0xdc>)
 80007de:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007e0:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <MX_ADC4_Init+0xd8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80007e6:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <MX_ADC4_Init+0xd8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ec:	4b2c      	ldr	r3, [pc, #176]	; (80008a0 <MX_ADC4_Init+0xd8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80007f2:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <MX_ADC4_Init+0xd8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f8:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <MX_ADC4_Init+0xd8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007fe:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <MX_ADC4_Init+0xd8>)
 8000800:	2204      	movs	r2, #4
 8000802:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000804:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <MX_ADC4_Init+0xd8>)
 8000806:	2200      	movs	r2, #0
 8000808:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800080a:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <MX_ADC4_Init+0xd8>)
 800080c:	2200      	movs	r2, #0
 800080e:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000810:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <MX_ADC4_Init+0xd8>)
 8000812:	2201      	movs	r2, #1
 8000814:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000816:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <MX_ADC4_Init+0xd8>)
 8000818:	2200      	movs	r2, #0
 800081a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <MX_ADC4_Init+0xd8>)
 8000820:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000826:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <MX_ADC4_Init+0xd8>)
 8000828:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800082c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <MX_ADC4_Init+0xd8>)
 8000830:	2201      	movs	r2, #1
 8000832:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_ADC4_Init+0xd8>)
 8000838:	2200      	movs	r2, #0
 800083a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = ENABLE;
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_ADC4_Init+0xd8>)
 800083e:	2201      	movs	r2, #1
 8000840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc4.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_ADC4_Init+0xd8>)
 8000846:	2210      	movs	r2, #16
 8000848:	645a      	str	r2, [r3, #68]	; 0x44
  hadc4.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_ADC4_Init+0xd8>)
 800084c:	2220      	movs	r2, #32
 800084e:	649a      	str	r2, [r3, #72]	; 0x48
  hadc4.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_ADC4_Init+0xd8>)
 8000852:	2200      	movs	r2, #0
 8000854:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc4.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_ADC4_Init+0xd8>)
 8000858:	2201      	movs	r2, #1
 800085a:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800085c:	4810      	ldr	r0, [pc, #64]	; (80008a0 <MX_ADC4_Init+0xd8>)
 800085e:	f001 fb45 	bl	8001eec <HAL_ADC_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ADC4_Init+0xa4>
  {
    Error_Handler();
 8000868:	f000 fbc8 	bl	8000ffc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_ADC4_Init+0xe0>)
 800086e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000870:	2306      	movs	r3, #6
 8000872:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000878:	237f      	movs	r3, #127	; 0x7f
 800087a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800087c:	2304      	movs	r3, #4
 800087e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_ADC4_Init+0xd8>)
 800088a:	f001 fe2b 	bl	80024e4 <HAL_ADC_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC4_Init+0xd0>
  {
    Error_Handler();
 8000894:	f000 fbb2 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3720      	adds	r7, #32
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000348 	.word	0x20000348
 80008a4:	50000500 	.word	0x50000500
 80008a8:	14f00020 	.word	0x14f00020

080008ac <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08c      	sub	sp, #48	; 0x30
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008b2:	463b      	mov	r3, r7
 80008b4:	2230      	movs	r2, #48	; 0x30
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f00c f828 	bl	800c90e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_DAC1_Init+0x6c>)
 80008c0:	4a16      	ldr	r2, [pc, #88]	; (800091c <MX_DAC1_Init+0x70>)
 80008c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80008c4:	4814      	ldr	r0, [pc, #80]	; (8000918 <MX_DAC1_Init+0x6c>)
 80008c6:	f002 ff5e 	bl	8003786 <HAL_DAC_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80008d0:	f000 fb94 	bl	8000ffc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80008d4:	2302      	movs	r3, #2
 80008d6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008f8:	463b      	mov	r3, r7
 80008fa:	2200      	movs	r2, #0
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <MX_DAC1_Init+0x6c>)
 8000900:	f002 ff64 	bl	80037cc <HAL_DAC_ConfigChannel>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800090a:	f000 fb77 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	3730      	adds	r7, #48	; 0x30
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000534 	.word	0x20000534
 800091c:	50000800 	.word	0x50000800

08000920 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <MX_I2C3_Init+0x74>)
 8000926:	4a1c      	ldr	r2, [pc, #112]	; (8000998 <MX_I2C3_Init+0x78>)
 8000928:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x40707EB4;
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_I2C3_Init+0x74>)
 800092c:	4a1b      	ldr	r2, [pc, #108]	; (800099c <MX_I2C3_Init+0x7c>)
 800092e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_I2C3_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000936:	4b17      	ldr	r3, [pc, #92]	; (8000994 <MX_I2C3_Init+0x74>)
 8000938:	2201      	movs	r2, #1
 800093a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_I2C3_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000942:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_I2C3_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <MX_I2C3_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_I2C3_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_I2C3_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800095a:	480e      	ldr	r0, [pc, #56]	; (8000994 <MX_I2C3_Init+0x74>)
 800095c:	f003 fd6e 	bl	800443c <HAL_I2C_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000966:	f000 fb49 	bl	8000ffc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800096a:	2100      	movs	r1, #0
 800096c:	4809      	ldr	r0, [pc, #36]	; (8000994 <MX_I2C3_Init+0x74>)
 800096e:	f003 fe00 	bl	8004572 <HAL_I2CEx_ConfigAnalogFilter>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000978:	f000 fb40 	bl	8000ffc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800097c:	2100      	movs	r1, #0
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_I2C3_Init+0x74>)
 8000980:	f003 fe42 	bl	8004608 <HAL_I2CEx_ConfigDigitalFilter>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800098a:	f000 fb37 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000548 	.word	0x20000548
 8000998:	40007800 	.word	0x40007800
 800099c:	40707eb4 	.word	0x40707eb4

080009a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_TIM2_Init+0x94>)
 80009c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 156 - 1;
 80009c6:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_TIM2_Init+0x94>)
 80009c8:	229b      	movs	r2, #155	; 0x9b
 80009ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009cc:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_TIM2_Init+0x94>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_TIM2_Init+0x94>)
 80009d4:	2209      	movs	r2, #9
 80009d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_TIM2_Init+0x94>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_TIM2_Init+0x94>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009e4:	4813      	ldr	r0, [pc, #76]	; (8000a34 <MX_TIM2_Init+0x94>)
 80009e6:	f006 fb93 	bl	8007110 <HAL_TIM_Base_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009f0:	f000 fb04 	bl	8000ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	4619      	mov	r1, r3
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <MX_TIM2_Init+0x94>)
 8000a02:	f006 fdd3 	bl	80075ac <HAL_TIM_ConfigClockSource>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a0c:	f000 faf6 	bl	8000ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a10:	2320      	movs	r3, #32
 8000a12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_TIM2_Init+0x94>)
 8000a1e:	f007 f85d 	bl	8007adc <HAL_TIMEx_MasterConfigSynchronization>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a28:	f000 fae8 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	3720      	adds	r7, #32
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000059c 	.word	0x2000059c

08000a38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <MX_DMA_Init+0x80>)
 8000a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a42:	4a1d      	ldr	r2, [pc, #116]	; (8000ab8 <MX_DMA_Init+0x80>)
 8000a44:	f043 0304 	orr.w	r3, r3, #4
 8000a48:	6493      	str	r3, [r2, #72]	; 0x48
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <MX_DMA_Init+0x80>)
 8000a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <MX_DMA_Init+0x80>)
 8000a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a5a:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <MX_DMA_Init+0x80>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6493      	str	r3, [r2, #72]	; 0x48
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <MX_DMA_Init+0x80>)
 8000a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	200b      	movs	r0, #11
 8000a74:	f002 fe53 	bl	800371e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a78:	200b      	movs	r0, #11
 8000a7a:	f002 fe6a 	bl	8003752 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2100      	movs	r1, #0
 8000a82:	200c      	movs	r0, #12
 8000a84:	f002 fe4b 	bl	800371e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000a88:	200c      	movs	r0, #12
 8000a8a:	f002 fe62 	bl	8003752 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	200d      	movs	r0, #13
 8000a94:	f002 fe43 	bl	800371e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000a98:	200d      	movs	r0, #13
 8000a9a:	f002 fe5a 	bl	8003752 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	200e      	movs	r0, #14
 8000aa4:	f002 fe3b 	bl	800371e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000aa8:	200e      	movs	r0, #14
 8000aaa:	f002 fe52 	bl	8003752 <HAL_NVIC_EnableIRQ>

}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad2:	4b46      	ldr	r3, [pc, #280]	; (8000bec <MX_GPIO_Init+0x130>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a45      	ldr	r2, [pc, #276]	; (8000bec <MX_GPIO_Init+0x130>)
 8000ad8:	f043 0320 	orr.w	r3, r3, #32
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b43      	ldr	r3, [pc, #268]	; (8000bec <MX_GPIO_Init+0x130>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0320 	and.w	r3, r3, #32
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b40      	ldr	r3, [pc, #256]	; (8000bec <MX_GPIO_Init+0x130>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a3f      	ldr	r2, [pc, #252]	; (8000bec <MX_GPIO_Init+0x130>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b3d      	ldr	r3, [pc, #244]	; (8000bec <MX_GPIO_Init+0x130>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b3a      	ldr	r3, [pc, #232]	; (8000bec <MX_GPIO_Init+0x130>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a39      	ldr	r2, [pc, #228]	; (8000bec <MX_GPIO_Init+0x130>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b37      	ldr	r3, [pc, #220]	; (8000bec <MX_GPIO_Init+0x130>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	4b34      	ldr	r3, [pc, #208]	; (8000bec <MX_GPIO_Init+0x130>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	4a33      	ldr	r2, [pc, #204]	; (8000bec <MX_GPIO_Init+0x130>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b26:	4b31      	ldr	r3, [pc, #196]	; (8000bec <MX_GPIO_Init+0x130>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ERRATA_FIX1_Pin|ERRATA_FIX2_Pin|ERRATA_FIX3_Pin|ERRATA_FIX4_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	f44f 41d8 	mov.w	r1, #27648	; 0x6c00
 8000b38:	482d      	ldr	r0, [pc, #180]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000b3a:	f003 fc4d 	bl	80043d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IND_LED_R_Pin|IND_LED_B_Pin, GPIO_PIN_SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8000b44:	482b      	ldr	r0, [pc, #172]	; (8000bf4 <MX_GPIO_Init+0x138>)
 8000b46:	f003 fc47 	bl	80043d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IND_LED_G_GPIO_Port, IND_LED_G_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b50:	4828      	ldr	r0, [pc, #160]	; (8000bf4 <MX_GPIO_Init+0x138>)
 8000b52:	f003 fc41 	bl	80043d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ERRATA_FIX1_Pin ERRATA_FIX2_Pin ERRATA_FIX3_Pin ERRATA_FIX4_Pin */
  GPIO_InitStruct.Pin = ERRATA_FIX1_Pin|ERRATA_FIX2_Pin|ERRATA_FIX3_Pin|ERRATA_FIX4_Pin;
 8000b56:	f44f 43d8 	mov.w	r3, #27648	; 0x6c00
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4820      	ldr	r0, [pc, #128]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000b70:	f003 fab0 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_ALERT_Pin */
  GPIO_InitStruct.Pin = TEMP_ALERT_Pin;
 8000b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_ALERT_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8c:	f003 faa2 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IND_LED_R_Pin IND_LED_G_Pin IND_LED_B_Pin */
  GPIO_InitStruct.Pin = IND_LED_R_Pin|IND_LED_G_Pin|IND_LED_B_Pin;
 8000b90:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4812      	ldr	r0, [pc, #72]	; (8000bf4 <MX_GPIO_Init+0x138>)
 8000baa:	f003 fa93 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_SHORT_Pin TRIG_EXT_2_Pin */
  GPIO_InitStruct.Pin = TRIG_SHORT_Pin|TRIG_EXT_2_Pin;
 8000bae:	2360      	movs	r3, #96	; 0x60
 8000bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bb2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480b      	ldr	r0, [pc, #44]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000bc4:	f003 fa86 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_EXT_1_Pin */
  GPIO_InitStruct.Pin = TRIG_EXT_1_Pin;
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bcc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_EXT_1_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000bde:	f003 fa79 	bl	80040d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	; 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	48000400 	.word	0x48000400
 8000bf4:	48000800 	.word	0x48000800

08000bf8 <InterpretConfig>:

/* USER CODE BEGIN 4 */

int InterpretConfig(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b0a6      	sub	sp, #152	; 0x98
 8000bfc:	af00      	add	r7, sp, #0
	char variable_name[CFG_VAR_SIZE];
	char variable_value[CFG_VAR_SIZE];
	memset(variable_name, 0, sizeof(variable_name));
 8000bfe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c02:	2240      	movs	r2, #64	; 0x40
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f00b fe81 	bl	800c90e <memset>
	memset(variable_value, 0, sizeof(variable_value));
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	2240      	movs	r2, #64	; 0x40
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f00b fe7a 	bl	800c90e <memset>
	int variable_name_indexes[2] = {0, 0};
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
	int variable_value_indexes[2] = {0, 0};
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
	char reading_status = 'n';
 8000c2a:	236e      	movs	r3, #110	; 0x6e
 8000c2c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	for(int i = 0; i < USB_RX_BUFFER_SIZE; i++){
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000c36:	e077      	b.n	8000d28 <InterpretConfig+0x130>
		if(rx_buffer[i] == '\0'){
 8000c38:	4a42      	ldr	r2, [pc, #264]	; (8000d44 <InterpretConfig+0x14c>)
 8000c3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000c3e:	4413      	add	r3, r2
 8000c40:	f993 3000 	ldrsb.w	r3, [r3]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d074      	beq.n	8000d32 <InterpretConfig+0x13a>
			break;
		}
		// Reading the variable name
		if(reading_status == 'n'){
 8000c48:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000c4c:	2b6e      	cmp	r3, #110	; 0x6e
 8000c4e:	d112      	bne.n	8000c76 <InterpretConfig+0x7e>
			if(rx_buffer[i] == ':') {
 8000c50:	4a3c      	ldr	r2, [pc, #240]	; (8000d44 <InterpretConfig+0x14c>)
 8000c52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000c56:	4413      	add	r3, r2
 8000c58:	f993 3000 	ldrsb.w	r3, [r3]
 8000c5c:	2b3a      	cmp	r3, #58	; 0x3a
 8000c5e:	d15e      	bne.n	8000d1e <InterpretConfig+0x126>
				variable_name_indexes[1] = i;
 8000c60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000c64:	60fb      	str	r3, [r7, #12]
				variable_value_indexes[0] = i+1;
 8000c66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	603b      	str	r3, [r7, #0]
				reading_status = 'v';
 8000c6e:	2376      	movs	r3, #118	; 0x76
 8000c70:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000c74:	e053      	b.n	8000d1e <InterpretConfig+0x126>
			}
		}
		// Reading the variable value
		else if(reading_status == 'v'){
 8000c76:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000c7a:	2b76      	cmp	r3, #118	; 0x76
 8000c7c:	d14f      	bne.n	8000d1e <InterpretConfig+0x126>
			if(rx_buffer[i] == ';') {
 8000c7e:	4a31      	ldr	r2, [pc, #196]	; (8000d44 <InterpretConfig+0x14c>)
 8000c80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000c84:	4413      	add	r3, r2
 8000c86:	f993 3000 	ldrsb.w	r3, [r3]
 8000c8a:	2b3b      	cmp	r3, #59	; 0x3b
 8000c8c:	d147      	bne.n	8000d1e <InterpretConfig+0x126>
				variable_value_indexes[1] = i;
 8000c8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000c92:	607b      	str	r3, [r7, #4]

				strncpy(variable_name, ((char*)rx_buffer + variable_name_indexes[0]), (variable_name_indexes[1] - variable_name_indexes[0]));
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b2a      	ldr	r3, [pc, #168]	; (8000d44 <InterpretConfig+0x14c>)
 8000c9a:	18d1      	adds	r1, r2, r3
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f00b fe38 	bl	800c91e <strncpy>
				variable_name[variable_name_indexes[1] + 1] = '\0';
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	3398      	adds	r3, #152	; 0x98
 8000cb4:	443b      	add	r3, r7
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f803 2c48 	strb.w	r2, [r3, #-72]
				strncpy(variable_value, ((char*)rx_buffer + variable_value_indexes[0]), (variable_value_indexes[1] - variable_value_indexes[0]));
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <InterpretConfig+0x14c>)
 8000cc2:	18d1      	adds	r1, r2, r3
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	461a      	mov	r2, r3
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f00b fe24 	bl	800c91e <strncpy>
				variable_value[variable_value_indexes[1] + 1] = '\0';
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	3398      	adds	r3, #152	; 0x98
 8000cdc:	443b      	add	r3, r7
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f803 2c88 	strb.w	r2, [r3, #-136]

				InterpretVariable(variable_name, variable_value);
 8000ce4:	f107 0210 	add.w	r2, r7, #16
 8000ce8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000cec:	4611      	mov	r1, r2
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f82c 	bl	8000d4c <InterpretVariable>
				memset(variable_name, 0, sizeof(variable_name));
 8000cf4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000cf8:	2240      	movs	r2, #64	; 0x40
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f00b fe06 	bl	800c90e <memset>
				memset(variable_value, 0, sizeof(variable_value));
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	2240      	movs	r2, #64	; 0x40
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f00b fdff 	bl	800c90e <memset>
				variable_name_indexes[0] = i + 1;
 8000d10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d14:	3301      	adds	r3, #1
 8000d16:	60bb      	str	r3, [r7, #8]
				reading_status = 'n';
 8000d18:	236e      	movs	r3, #110	; 0x6e
 8000d1a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	for(int i = 0; i < USB_RX_BUFFER_SIZE; i++){
 8000d1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d22:	3301      	adds	r3, #1
 8000d24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000d28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d2c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d2e:	dd83      	ble.n	8000c38 <InterpretConfig+0x40>
 8000d30:	e000      	b.n	8000d34 <InterpretConfig+0x13c>
			break;
 8000d32:	bf00      	nop
			}
		}
	}

	conv_state = CFG_INTERPRETED;
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <InterpretConfig+0x150>)
 8000d36:	2202      	movs	r2, #2
 8000d38:	701a      	strb	r2, [r3, #0]
	return 1;
 8000d3a:	2301      	movs	r3, #1
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3798      	adds	r7, #152	; 0x98
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20004468 	.word	0x20004468
 8000d48:	200044a8 	.word	0x200044a8

08000d4c <InterpretVariable>:

int InterpretVariable(char name[CFG_VAR_SIZE], char value[CFG_VAR_SIZE]) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
	if(strcmp(name, "RecLen") == 0) {
 8000d56:	492b      	ldr	r1, [pc, #172]	; (8000e04 <InterpretVariable+0xb8>)
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff fa61 	bl	8000220 <strcmp>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d107      	bne.n	8000d74 <InterpretVariable+0x28>
		record_length_ms = (uint16_t)atoi(value);
 8000d64:	6838      	ldr	r0, [r7, #0]
 8000d66:	f00b fc2b 	bl	800c5c0 <atoi>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <InterpretVariable+0xbc>)
 8000d70:	801a      	strh	r2, [r3, #0]
 8000d72:	e041      	b.n	8000df8 <InterpretVariable+0xac>
	}
	else if(strcmp(name, "RecInt") == 0) {
 8000d74:	4925      	ldr	r1, [pc, #148]	; (8000e0c <InterpretVariable+0xc0>)
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff fa52 	bl	8000220 <strcmp>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d107      	bne.n	8000d92 <InterpretVariable+0x46>
		record_interval_us = (uint16_t)atoi(value);
 8000d82:	6838      	ldr	r0, [r7, #0]
 8000d84:	f00b fc1c 	bl	800c5c0 <atoi>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	4b20      	ldr	r3, [pc, #128]	; (8000e10 <InterpretVariable+0xc4>)
 8000d8e:	801a      	strh	r2, [r3, #0]
 8000d90:	e032      	b.n	8000df8 <InterpretVariable+0xac>
	}
	else if(strcmp(name, "TcType") == 0) {
 8000d92:	4920      	ldr	r1, [pc, #128]	; (8000e14 <InterpretVariable+0xc8>)
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff fa43 	bl	8000220 <strcmp>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d104      	bne.n	8000daa <InterpretVariable+0x5e>
		tc_type = value[0];
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	781a      	ldrb	r2, [r3, #0]
 8000da4:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <InterpretVariable+0xcc>)
 8000da6:	701a      	strb	r2, [r3, #0]
 8000da8:	e026      	b.n	8000df8 <InterpretVariable+0xac>
	}
	else if(strcmp(name, "TrgSrc") == 0) {
 8000daa:	491c      	ldr	r1, [pc, #112]	; (8000e1c <InterpretVariable+0xd0>)
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fa37 	bl	8000220 <strcmp>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d11f      	bne.n	8000df8 <InterpretVariable+0xac>
		if(strcmp(value, "btn") == 0) {
 8000db8:	4919      	ldr	r1, [pc, #100]	; (8000e20 <InterpretVariable+0xd4>)
 8000dba:	6838      	ldr	r0, [r7, #0]
 8000dbc:	f7ff fa30 	bl	8000220 <strcmp>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d103      	bne.n	8000dce <InterpretVariable+0x82>
			trig_source = TRIG_SHORT;
 8000dc6:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <InterpretVariable+0xd8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
 8000dcc:	e014      	b.n	8000df8 <InterpretVariable+0xac>
		}
		else if(strcmp(value, "ex1") == 0) {
 8000dce:	4916      	ldr	r1, [pc, #88]	; (8000e28 <InterpretVariable+0xdc>)
 8000dd0:	6838      	ldr	r0, [r7, #0]
 8000dd2:	f7ff fa25 	bl	8000220 <strcmp>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d103      	bne.n	8000de4 <InterpretVariable+0x98>
			trig_source = TRIG_EXT_1;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <InterpretVariable+0xd8>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e009      	b.n	8000df8 <InterpretVariable+0xac>
		}
		else if(strcmp(value, "ex2") == 0) {
 8000de4:	4911      	ldr	r1, [pc, #68]	; (8000e2c <InterpretVariable+0xe0>)
 8000de6:	6838      	ldr	r0, [r7, #0]
 8000de8:	f7ff fa1a 	bl	8000220 <strcmp>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d102      	bne.n	8000df8 <InterpretVariable+0xac>
			trig_source = TRIG_EXT_2;
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <InterpretVariable+0xd8>)
 8000df4:	2202      	movs	r2, #2
 8000df6:	701a      	strb	r2, [r3, #0]
		}
	}
	return 1;
 8000df8:	2301      	movs	r3, #1
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	0800d5a8 	.word	0x0800d5a8
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	0800d5b0 	.word	0x0800d5b0
 8000e10:	20000002 	.word	0x20000002
 8000e14:	0800d5b8 	.word	0x0800d5b8
 8000e18:	20000004 	.word	0x20000004
 8000e1c:	0800d5c0 	.word	0x0800d5c0
 8000e20:	0800d5c8 	.word	0x0800d5c8
 8000e24:	200044b4 	.word	0x200044b4
 8000e28:	0800d5cc 	.word	0x0800d5cc
 8000e2c:	0800d5d0 	.word	0x0800d5d0

08000e30 <SetupMeasurement>:

int SetupMeasurement(void){
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
	// ADC sync timer
	target_conv_count = (record_length_ms * 1000) / record_interval_us;
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <SetupMeasurement+0x54>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3e:	fb02 f303 	mul.w	r3, r2, r3
 8000e42:	4a11      	ldr	r2, [pc, #68]	; (8000e88 <SetupMeasurement+0x58>)
 8000e44:	8812      	ldrh	r2, [r2, #0]
 8000e46:	fb93 f3f2 	sdiv	r3, r3, r2
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <SetupMeasurement+0x5c>)
 8000e4c:	6013      	str	r3, [r2, #0]

	__HAL_TIM_SET_AUTORELOAD(&htim2, record_interval_us - 1);
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <SetupMeasurement+0x58>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	1e5a      	subs	r2, r3, #1
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <SetupMeasurement+0x60>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <SetupMeasurement+0x58>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <SetupMeasurement+0x60>)
 8000e64:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(&htim2, record_interval_us - 1);
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <SetupMeasurement+0x58>)
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	1e5a      	subs	r2, r3, #1
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <SetupMeasurement+0x60>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24

	// Calculate and set DAC value

	conv_state = ARMED;
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <SetupMeasurement+0x64>)
 8000e74:	2203      	movs	r2, #3
 8000e76:	701a      	strb	r2, [r3, #0]
	return 1;
 8000e78:	2301      	movs	r3, #1
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000002 	.word	0x20000002
 8000e8c:	200044ac 	.word	0x200044ac
 8000e90:	2000059c 	.word	0x2000059c
 8000e94:	200044a8 	.word	0x200044a8

08000e98 <StartMeasurement>:

int StartMeasurement(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000e9c:	217f      	movs	r1, #127	; 0x7f
 8000e9e:	4818      	ldr	r0, [pc, #96]	; (8000f00 <StartMeasurement+0x68>)
 8000ea0:	f002 f9f8 	bl	8003294 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffers[0], ADC_BUFFER_SIZE);
 8000ea4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ea8:	4916      	ldr	r1, [pc, #88]	; (8000f04 <StartMeasurement+0x6c>)
 8000eaa:	4815      	ldr	r0, [pc, #84]	; (8000f00 <StartMeasurement+0x68>)
 8000eac:	f001 f9da 	bl	8002264 <HAL_ADC_Start_DMA>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000eb0:	217f      	movs	r1, #127	; 0x7f
 8000eb2:	4815      	ldr	r0, [pc, #84]	; (8000f08 <StartMeasurement+0x70>)
 8000eb4:	f002 f9ee 	bl	8003294 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_buffers[1], ADC_BUFFER_SIZE);
 8000eb8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ebc:	4913      	ldr	r1, [pc, #76]	; (8000f0c <StartMeasurement+0x74>)
 8000ebe:	4812      	ldr	r0, [pc, #72]	; (8000f08 <StartMeasurement+0x70>)
 8000ec0:	f001 f9d0 	bl	8002264 <HAL_ADC_Start_DMA>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8000ec4:	217f      	movs	r1, #127	; 0x7f
 8000ec6:	4812      	ldr	r0, [pc, #72]	; (8000f10 <StartMeasurement+0x78>)
 8000ec8:	f002 f9e4 	bl	8003294 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc_buffers[2], ADC_BUFFER_SIZE);
 8000ecc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ed0:	4910      	ldr	r1, [pc, #64]	; (8000f14 <StartMeasurement+0x7c>)
 8000ed2:	480f      	ldr	r0, [pc, #60]	; (8000f10 <StartMeasurement+0x78>)
 8000ed4:	f001 f9c6 	bl	8002264 <HAL_ADC_Start_DMA>
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8000ed8:	217f      	movs	r1, #127	; 0x7f
 8000eda:	480f      	ldr	r0, [pc, #60]	; (8000f18 <StartMeasurement+0x80>)
 8000edc:	f002 f9da 	bl	8003294 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc_buffers[3], ADC_BUFFER_SIZE);
 8000ee0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ee4:	490d      	ldr	r1, [pc, #52]	; (8000f1c <StartMeasurement+0x84>)
 8000ee6:	480c      	ldr	r0, [pc, #48]	; (8000f18 <StartMeasurement+0x80>)
 8000ee8:	f001 f9bc 	bl	8002264 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8000eec:	480c      	ldr	r0, [pc, #48]	; (8000f20 <StartMeasurement+0x88>)
 8000eee:	f006 f967 	bl	80071c0 <HAL_TIM_Base_Start_IT>
	conv_state = MEASURING;
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <StartMeasurement+0x8c>)
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	701a      	strb	r2, [r3, #0]

	return 1;
 8000ef8:	2301      	movs	r3, #1
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000204 	.word	0x20000204
 8000f04:	200005e8 	.word	0x200005e8
 8000f08:	20000270 	.word	0x20000270
 8000f0c:	20001588 	.word	0x20001588
 8000f10:	200002dc 	.word	0x200002dc
 8000f14:	20002528 	.word	0x20002528
 8000f18:	20000348 	.word	0x20000348
 8000f1c:	200034c8 	.word	0x200034c8
 8000f20:	2000059c 	.word	0x2000059c
 8000f24:	200044a8 	.word	0x200044a8

08000f28 <HAL_ADC_ConvHalfCpltCallback>:

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <HAL_ADC_ConvHalfCpltCallback+0x54>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d103      	bne.n	8000f40 <HAL_ADC_ConvHalfCpltCallback+0x18>
		adc_state[0] = START_FULL;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
		adc_state[2] = START_FULL;
	}
	else if(hadc == &hadc4){
		adc_state[3] = START_FULL;
	}
}
 8000f3e:	e016      	b.n	8000f6e <HAL_ADC_ConvHalfCpltCallback+0x46>
	else if(hadc == &hadc2){
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a10      	ldr	r2, [pc, #64]	; (8000f84 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d103      	bne.n	8000f50 <HAL_ADC_ConvHalfCpltCallback+0x28>
		adc_state[1] = START_FULL;
 8000f48:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	705a      	strb	r2, [r3, #1]
}
 8000f4e:	e00e      	b.n	8000f6e <HAL_ADC_ConvHalfCpltCallback+0x46>
	else if(hadc == &hadc3){
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d103      	bne.n	8000f60 <HAL_ADC_ConvHalfCpltCallback+0x38>
		adc_state[2] = START_FULL;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	709a      	strb	r2, [r3, #2]
}
 8000f5e:	e006      	b.n	8000f6e <HAL_ADC_ConvHalfCpltCallback+0x46>
	else if(hadc == &hadc4){
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d102      	bne.n	8000f6e <HAL_ADC_ConvHalfCpltCallback+0x46>
		adc_state[3] = START_FULL;
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	70da      	strb	r2, [r3, #3]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000204 	.word	0x20000204
 8000f80:	200044b8 	.word	0x200044b8
 8000f84:	20000270 	.word	0x20000270
 8000f88:	200002dc 	.word	0x200002dc
 8000f8c:	20000348 	.word	0x20000348

08000f90 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	printf("Asdf");
 8000f98:	4812      	ldr	r0, [pc, #72]	; (8000fe4 <HAL_ADC_ConvCpltCallback+0x54>)
 8000f9a:	f00b fc63 	bl	800c864 <iprintf>
	if (hadc == &hadc1){
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a11      	ldr	r2, [pc, #68]	; (8000fe8 <HAL_ADC_ConvCpltCallback+0x58>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d103      	bne.n	8000fae <HAL_ADC_ConvCpltCallback+0x1e>
		adc_state[0] = END_FULL;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_ADC_ConvCpltCallback+0x5c>)
 8000fa8:	2202      	movs	r2, #2
 8000faa:	701a      	strb	r2, [r3, #0]
		adc_state[2] = END_FULL;
	}
	else if(hadc == &hadc4){
		adc_state[3] = END_FULL;
	}
}
 8000fac:	e016      	b.n	8000fdc <HAL_ADC_ConvCpltCallback+0x4c>
	else if(hadc == &hadc2){
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <HAL_ADC_ConvCpltCallback+0x60>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d103      	bne.n	8000fbe <HAL_ADC_ConvCpltCallback+0x2e>
		adc_state[1] = END_FULL;
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_ADC_ConvCpltCallback+0x5c>)
 8000fb8:	2202      	movs	r2, #2
 8000fba:	705a      	strb	r2, [r3, #1]
}
 8000fbc:	e00e      	b.n	8000fdc <HAL_ADC_ConvCpltCallback+0x4c>
	else if(hadc == &hadc3){
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a0c      	ldr	r2, [pc, #48]	; (8000ff4 <HAL_ADC_ConvCpltCallback+0x64>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d103      	bne.n	8000fce <HAL_ADC_ConvCpltCallback+0x3e>
		adc_state[2] = END_FULL;
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_ADC_ConvCpltCallback+0x5c>)
 8000fc8:	2202      	movs	r2, #2
 8000fca:	709a      	strb	r2, [r3, #2]
}
 8000fcc:	e006      	b.n	8000fdc <HAL_ADC_ConvCpltCallback+0x4c>
	else if(hadc == &hadc4){
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a09      	ldr	r2, [pc, #36]	; (8000ff8 <HAL_ADC_ConvCpltCallback+0x68>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d102      	bne.n	8000fdc <HAL_ADC_ConvCpltCallback+0x4c>
		adc_state[3] = END_FULL;
 8000fd6:	4b05      	ldr	r3, [pc, #20]	; (8000fec <HAL_ADC_ConvCpltCallback+0x5c>)
 8000fd8:	2202      	movs	r2, #2
 8000fda:	70da      	strb	r2, [r3, #3]
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	0800d5d4 	.word	0x0800d5d4
 8000fe8:	20000204 	.word	0x20000204
 8000fec:	200044b8 	.word	0x200044b8
 8000ff0:	20000270 	.word	0x20000270
 8000ff4:	200002dc 	.word	0x200002dc
 8000ff8:	20000348 	.word	0x20000348

08000ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001000:	b672      	cpsid	i
}
 8001002:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001004:	e7fe      	b.n	8001004 <Error_Handler+0x8>
	...

08001008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <HAL_MspInit+0x54>)
 8001010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001012:	4a12      	ldr	r2, [pc, #72]	; (800105c <HAL_MspInit+0x54>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6613      	str	r3, [r2, #96]	; 0x60
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <HAL_MspInit+0x54>)
 800101c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <HAL_MspInit+0x54>)
 8001028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102a:	4a0c      	ldr	r2, [pc, #48]	; (800105c <HAL_MspInit+0x54>)
 800102c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001030:	6593      	str	r3, [r2, #88]	; 0x58
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_MspInit+0x54>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 800103e:	2020      	movs	r0, #32
 8001040:	f000 fc9c 	bl	800197c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8001044:	f000 fcc2 	bl	80019cc <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8001048:	2000      	movs	r0, #0
 800104a:	f000 fcab 	bl	80019a4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800104e:	f005 f8ff 	bl	8006250 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000

08001060 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b0a4      	sub	sp, #144	; 0x90
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001078:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800107c:	2254      	movs	r2, #84	; 0x54
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f00b fc44 	bl	800c90e <memset>
  if(hadc->Instance==ADC1)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800108e:	d16b      	bne.n	8001168 <HAL_ADC_MspInit+0x108>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8001096:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800109a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a0:	4618      	mov	r0, r3
 80010a2:	f005 fde7 	bl	8006c74 <HAL_RCCEx_PeriphCLKConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80010ac:	f7ff ffa6 	bl	8000ffc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80010b0:	4b9e      	ldr	r3, [pc, #632]	; (800132c <HAL_ADC_MspInit+0x2cc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	3301      	adds	r3, #1
 80010b6:	4a9d      	ldr	r2, [pc, #628]	; (800132c <HAL_ADC_MspInit+0x2cc>)
 80010b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80010ba:	4b9c      	ldr	r3, [pc, #624]	; (800132c <HAL_ADC_MspInit+0x2cc>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d10b      	bne.n	80010da <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80010c2:	4b9b      	ldr	r3, [pc, #620]	; (8001330 <HAL_ADC_MspInit+0x2d0>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	4a9a      	ldr	r2, [pc, #616]	; (8001330 <HAL_ADC_MspInit+0x2d0>)
 80010c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ce:	4b98      	ldr	r3, [pc, #608]	; (8001330 <HAL_ADC_MspInit+0x2d0>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
 80010d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	4b95      	ldr	r3, [pc, #596]	; (8001330 <HAL_ADC_MspInit+0x2d0>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	4a94      	ldr	r2, [pc, #592]	; (8001330 <HAL_ADC_MspInit+0x2d0>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e6:	4b92      	ldr	r3, [pc, #584]	; (8001330 <HAL_ADC_MspInit+0x2d0>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	623b      	str	r3, [r7, #32]
 80010f0:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010f2:	2301      	movs	r3, #1
 80010f4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f6:	2303      	movs	r3, #3
 80010f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001106:	4619      	mov	r1, r3
 8001108:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110c:	f002 ffe2 	bl	80040d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001110:	4b88      	ldr	r3, [pc, #544]	; (8001334 <HAL_ADC_MspInit+0x2d4>)
 8001112:	4a89      	ldr	r2, [pc, #548]	; (8001338 <HAL_ADC_MspInit+0x2d8>)
 8001114:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001116:	4b87      	ldr	r3, [pc, #540]	; (8001334 <HAL_ADC_MspInit+0x2d4>)
 8001118:	2205      	movs	r2, #5
 800111a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111c:	4b85      	ldr	r3, [pc, #532]	; (8001334 <HAL_ADC_MspInit+0x2d4>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001122:	4b84      	ldr	r3, [pc, #528]	; (8001334 <HAL_ADC_MspInit+0x2d4>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001128:	4b82      	ldr	r3, [pc, #520]	; (8001334 <HAL_ADC_MspInit+0x2d4>)
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800112e:	4b81      	ldr	r3, [pc, #516]	; (8001334 <HAL_ADC_MspInit+0x2d4>)
 8001130:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001134:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001136:	4b7f      	ldr	r3, [pc, #508]	; (8001334 <HAL_ADC_MspInit+0x2d4>)
 8001138:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800113c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800113e:	4b7d      	ldr	r3, [pc, #500]	; (8001334 <HAL_ADC_MspInit+0x2d4>)
 8001140:	2220      	movs	r2, #32
 8001142:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001144:	4b7b      	ldr	r3, [pc, #492]	; (8001334 <HAL_ADC_MspInit+0x2d4>)
 8001146:	2200      	movs	r2, #0
 8001148:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800114a:	487a      	ldr	r0, [pc, #488]	; (8001334 <HAL_ADC_MspInit+0x2d4>)
 800114c:	f002 fcf6 	bl	8003b3c <HAL_DMA_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001156:	f7ff ff51 	bl	8000ffc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a75      	ldr	r2, [pc, #468]	; (8001334 <HAL_ADC_MspInit+0x2d4>)
 800115e:	655a      	str	r2, [r3, #84]	; 0x54
 8001160:	4a74      	ldr	r2, [pc, #464]	; (8001334 <HAL_ADC_MspInit+0x2d4>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001166:	e169      	b.n	800143c <HAL_ADC_MspInit+0x3dc>
  else if(hadc->Instance==ADC2)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a73      	ldr	r2, [pc, #460]	; (800133c <HAL_ADC_MspInit+0x2dc>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d16b      	bne.n	800124a <HAL_ADC_MspInit+0x1ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8001178:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800117c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001182:	4618      	mov	r0, r3
 8001184:	f005 fd76 	bl	8006c74 <HAL_RCCEx_PeriphCLKConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_ADC_MspInit+0x132>
      Error_Handler();
 800118e:	f7ff ff35 	bl	8000ffc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001192:	4b66      	ldr	r3, [pc, #408]	; (800132c <HAL_ADC_MspInit+0x2cc>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	4a64      	ldr	r2, [pc, #400]	; (800132c <HAL_ADC_MspInit+0x2cc>)
 800119a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800119c:	4b63      	ldr	r3, [pc, #396]	; (800132c <HAL_ADC_MspInit+0x2cc>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d10b      	bne.n	80011bc <HAL_ADC_MspInit+0x15c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011a4:	4b62      	ldr	r3, [pc, #392]	; (8001330 <HAL_ADC_MspInit+0x2d0>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	4a61      	ldr	r2, [pc, #388]	; (8001330 <HAL_ADC_MspInit+0x2d0>)
 80011aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b0:	4b5f      	ldr	r3, [pc, #380]	; (8001330 <HAL_ADC_MspInit+0x2d0>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	4b5c      	ldr	r3, [pc, #368]	; (8001330 <HAL_ADC_MspInit+0x2d0>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c0:	4a5b      	ldr	r2, [pc, #364]	; (8001330 <HAL_ADC_MspInit+0x2d0>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c8:	4b59      	ldr	r3, [pc, #356]	; (8001330 <HAL_ADC_MspInit+0x2d0>)
 80011ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011d4:	2340      	movs	r3, #64	; 0x40
 80011d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d8:	2303      	movs	r3, #3
 80011da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ee:	f002 ff71 	bl	80040d4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80011f2:	4b53      	ldr	r3, [pc, #332]	; (8001340 <HAL_ADC_MspInit+0x2e0>)
 80011f4:	4a53      	ldr	r2, [pc, #332]	; (8001344 <HAL_ADC_MspInit+0x2e4>)
 80011f6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80011f8:	4b51      	ldr	r3, [pc, #324]	; (8001340 <HAL_ADC_MspInit+0x2e0>)
 80011fa:	2224      	movs	r2, #36	; 0x24
 80011fc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011fe:	4b50      	ldr	r3, [pc, #320]	; (8001340 <HAL_ADC_MspInit+0x2e0>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001204:	4b4e      	ldr	r3, [pc, #312]	; (8001340 <HAL_ADC_MspInit+0x2e0>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800120a:	4b4d      	ldr	r3, [pc, #308]	; (8001340 <HAL_ADC_MspInit+0x2e0>)
 800120c:	2280      	movs	r2, #128	; 0x80
 800120e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001210:	4b4b      	ldr	r3, [pc, #300]	; (8001340 <HAL_ADC_MspInit+0x2e0>)
 8001212:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001216:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001218:	4b49      	ldr	r3, [pc, #292]	; (8001340 <HAL_ADC_MspInit+0x2e0>)
 800121a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800121e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001220:	4b47      	ldr	r3, [pc, #284]	; (8001340 <HAL_ADC_MspInit+0x2e0>)
 8001222:	2220      	movs	r2, #32
 8001224:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001226:	4b46      	ldr	r3, [pc, #280]	; (8001340 <HAL_ADC_MspInit+0x2e0>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800122c:	4844      	ldr	r0, [pc, #272]	; (8001340 <HAL_ADC_MspInit+0x2e0>)
 800122e:	f002 fc85 	bl	8003b3c <HAL_DMA_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <HAL_ADC_MspInit+0x1dc>
      Error_Handler();
 8001238:	f7ff fee0 	bl	8000ffc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a40      	ldr	r2, [pc, #256]	; (8001340 <HAL_ADC_MspInit+0x2e0>)
 8001240:	655a      	str	r2, [r3, #84]	; 0x54
 8001242:	4a3f      	ldr	r2, [pc, #252]	; (8001340 <HAL_ADC_MspInit+0x2e0>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001248:	e0f8      	b.n	800143c <HAL_ADC_MspInit+0x3dc>
  else if(hadc->Instance==ADC3)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a3e      	ldr	r2, [pc, #248]	; (8001348 <HAL_ADC_MspInit+0x2e8>)
 8001250:	4293      	cmp	r3, r2
 8001252:	f040 8083 	bne.w	800135c <HAL_ADC_MspInit+0x2fc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 800125c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001260:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001266:	4618      	mov	r0, r3
 8001268:	f005 fd04 	bl	8006c74 <HAL_RCCEx_PeriphCLKConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_ADC_MspInit+0x216>
      Error_Handler();
 8001272:	f7ff fec3 	bl	8000ffc <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001276:	4b35      	ldr	r3, [pc, #212]	; (800134c <HAL_ADC_MspInit+0x2ec>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	4a33      	ldr	r2, [pc, #204]	; (800134c <HAL_ADC_MspInit+0x2ec>)
 800127e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001280:	4b32      	ldr	r3, [pc, #200]	; (800134c <HAL_ADC_MspInit+0x2ec>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d10b      	bne.n	80012a0 <HAL_ADC_MspInit+0x240>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001288:	4b29      	ldr	r3, [pc, #164]	; (8001330 <HAL_ADC_MspInit+0x2d0>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128c:	4a28      	ldr	r2, [pc, #160]	; (8001330 <HAL_ADC_MspInit+0x2d0>)
 800128e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001292:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001294:	4b26      	ldr	r3, [pc, #152]	; (8001330 <HAL_ADC_MspInit+0x2d0>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a0:	4b23      	ldr	r3, [pc, #140]	; (8001330 <HAL_ADC_MspInit+0x2d0>)
 80012a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a4:	4a22      	ldr	r2, [pc, #136]	; (8001330 <HAL_ADC_MspInit+0x2d0>)
 80012a6:	f043 0302 	orr.w	r3, r3, #2
 80012aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ac:	4b20      	ldr	r3, [pc, #128]	; (8001330 <HAL_ADC_MspInit+0x2d0>)
 80012ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012b8:	2302      	movs	r3, #2
 80012ba:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012bc:	2303      	movs	r3, #3
 80012be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012cc:	4619      	mov	r1, r3
 80012ce:	4820      	ldr	r0, [pc, #128]	; (8001350 <HAL_ADC_MspInit+0x2f0>)
 80012d0:	f002 ff00 	bl	80040d4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 80012d4:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <HAL_ADC_MspInit+0x2f4>)
 80012d6:	4a20      	ldr	r2, [pc, #128]	; (8001358 <HAL_ADC_MspInit+0x2f8>)
 80012d8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <HAL_ADC_MspInit+0x2f4>)
 80012dc:	2225      	movs	r2, #37	; 0x25
 80012de:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012e0:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <HAL_ADC_MspInit+0x2f4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_ADC_MspInit+0x2f4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_ADC_MspInit+0x2f4>)
 80012ee:	2280      	movs	r2, #128	; 0x80
 80012f0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_ADC_MspInit+0x2f4>)
 80012f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012f8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <HAL_ADC_MspInit+0x2f4>)
 80012fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001300:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <HAL_ADC_MspInit+0x2f4>)
 8001304:	2220      	movs	r2, #32
 8001306:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_ADC_MspInit+0x2f4>)
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800130e:	4811      	ldr	r0, [pc, #68]	; (8001354 <HAL_ADC_MspInit+0x2f4>)
 8001310:	f002 fc14 	bl	8003b3c <HAL_DMA_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_ADC_MspInit+0x2be>
      Error_Handler();
 800131a:	f7ff fe6f 	bl	8000ffc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a0c      	ldr	r2, [pc, #48]	; (8001354 <HAL_ADC_MspInit+0x2f4>)
 8001322:	655a      	str	r2, [r3, #84]	; 0x54
 8001324:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <HAL_ADC_MspInit+0x2f4>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6293      	str	r3, [r2, #40]	; 0x28
}
 800132a:	e087      	b.n	800143c <HAL_ADC_MspInit+0x3dc>
 800132c:	200044bc 	.word	0x200044bc
 8001330:	40021000 	.word	0x40021000
 8001334:	200003b4 	.word	0x200003b4
 8001338:	40020008 	.word	0x40020008
 800133c:	50000100 	.word	0x50000100
 8001340:	20000414 	.word	0x20000414
 8001344:	4002001c 	.word	0x4002001c
 8001348:	50000400 	.word	0x50000400
 800134c:	200044c0 	.word	0x200044c0
 8001350:	48000400 	.word	0x48000400
 8001354:	20000474 	.word	0x20000474
 8001358:	40020030 	.word	0x40020030
  else if(hadc->Instance==ADC4)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a38      	ldr	r2, [pc, #224]	; (8001444 <HAL_ADC_MspInit+0x3e4>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d16a      	bne.n	800143c <HAL_ADC_MspInit+0x3dc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 800136c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001370:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001376:	4618      	mov	r0, r3
 8001378:	f005 fc7c 	bl	8006c74 <HAL_RCCEx_PeriphCLKConfig>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_ADC_MspInit+0x326>
      Error_Handler();
 8001382:	f7ff fe3b 	bl	8000ffc <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001386:	4b30      	ldr	r3, [pc, #192]	; (8001448 <HAL_ADC_MspInit+0x3e8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	3301      	adds	r3, #1
 800138c:	4a2e      	ldr	r2, [pc, #184]	; (8001448 <HAL_ADC_MspInit+0x3e8>)
 800138e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001390:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <HAL_ADC_MspInit+0x3e8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d10b      	bne.n	80013b0 <HAL_ADC_MspInit+0x350>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001398:	4b2c      	ldr	r3, [pc, #176]	; (800144c <HAL_ADC_MspInit+0x3ec>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139c:	4a2b      	ldr	r2, [pc, #172]	; (800144c <HAL_ADC_MspInit+0x3ec>)
 800139e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a4:	4b29      	ldr	r3, [pc, #164]	; (800144c <HAL_ADC_MspInit+0x3ec>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b0:	4b26      	ldr	r3, [pc, #152]	; (800144c <HAL_ADC_MspInit+0x3ec>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b4:	4a25      	ldr	r2, [pc, #148]	; (800144c <HAL_ADC_MspInit+0x3ec>)
 80013b6:	f043 0302 	orr.w	r3, r3, #2
 80013ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013bc:	4b23      	ldr	r3, [pc, #140]	; (800144c <HAL_ADC_MspInit+0x3ec>)
 80013be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013cc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ce:	2303      	movs	r3, #3
 80013d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013de:	4619      	mov	r1, r3
 80013e0:	481b      	ldr	r0, [pc, #108]	; (8001450 <HAL_ADC_MspInit+0x3f0>)
 80013e2:	f002 fe77 	bl	80040d4 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_ADC_MspInit+0x3f4>)
 80013e8:	4a1b      	ldr	r2, [pc, #108]	; (8001458 <HAL_ADC_MspInit+0x3f8>)
 80013ea:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_ADC_MspInit+0x3f4>)
 80013ee:	2226      	movs	r2, #38	; 0x26
 80013f0:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013f2:	4b18      	ldr	r3, [pc, #96]	; (8001454 <HAL_ADC_MspInit+0x3f4>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <HAL_ADC_MspInit+0x3f4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <HAL_ADC_MspInit+0x3f4>)
 8001400:	2280      	movs	r2, #128	; 0x80
 8001402:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <HAL_ADC_MspInit+0x3f4>)
 8001406:	f44f 7280 	mov.w	r2, #256	; 0x100
 800140a:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_ADC_MspInit+0x3f4>)
 800140e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001412:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <HAL_ADC_MspInit+0x3f4>)
 8001416:	2220      	movs	r2, #32
 8001418:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <HAL_ADC_MspInit+0x3f4>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001420:	480c      	ldr	r0, [pc, #48]	; (8001454 <HAL_ADC_MspInit+0x3f4>)
 8001422:	f002 fb8b 	bl	8003b3c <HAL_DMA_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <HAL_ADC_MspInit+0x3d0>
      Error_Handler();
 800142c:	f7ff fde6 	bl	8000ffc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a08      	ldr	r2, [pc, #32]	; (8001454 <HAL_ADC_MspInit+0x3f4>)
 8001434:	655a      	str	r2, [r3, #84]	; 0x54
 8001436:	4a07      	ldr	r2, [pc, #28]	; (8001454 <HAL_ADC_MspInit+0x3f4>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800143c:	bf00      	nop
 800143e:	3790      	adds	r7, #144	; 0x90
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	50000500 	.word	0x50000500
 8001448:	200044c0 	.word	0x200044c0
 800144c:	40021000 	.word	0x40021000
 8001450:	48000400 	.word	0x48000400
 8001454:	200004d4 	.word	0x200004d4
 8001458:	40020044 	.word	0x40020044

0800145c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a15      	ldr	r2, [pc, #84]	; (80014d0 <HAL_DAC_MspInit+0x74>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d124      	bne.n	80014c8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_DAC_MspInit+0x78>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	4a14      	ldr	r2, [pc, #80]	; (80014d4 <HAL_DAC_MspInit+0x78>)
 8001484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_DAC_MspInit+0x78>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <HAL_DAC_MspInit+0x78>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <HAL_DAC_MspInit+0x78>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <HAL_DAC_MspInit+0x78>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014ae:	2310      	movs	r3, #16
 80014b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b2:	2303      	movs	r3, #3
 80014b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c4:	f002 fe06 	bl	80040d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	; 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	50000800 	.word	0x50000800
 80014d4:	40021000 	.word	0x40021000

080014d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b09e      	sub	sp, #120	; 0x78
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f0:	f107 0310 	add.w	r3, r7, #16
 80014f4:	2254      	movs	r2, #84	; 0x54
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f00b fa08 	bl	800c90e <memset>
  if(hi2c->Instance==I2C3)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a1f      	ldr	r2, [pc, #124]	; (8001580 <HAL_I2C_MspInit+0xa8>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d137      	bne.n	8001578 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001508:	f44f 7380 	mov.w	r3, #256	; 0x100
 800150c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800150e:	2300      	movs	r3, #0
 8001510:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001512:	f107 0310 	add.w	r3, r7, #16
 8001516:	4618      	mov	r0, r3
 8001518:	f005 fbac 	bl	8006c74 <HAL_RCCEx_PeriphCLKConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001522:	f7ff fd6b 	bl	8000ffc <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <HAL_I2C_MspInit+0xac>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	4a16      	ldr	r2, [pc, #88]	; (8001584 <HAL_I2C_MspInit+0xac>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_I2C_MspInit+0xac>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = TEMP_SCL_Pin|TEMP_SDA_Pin;
 800153e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001542:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001544:	2312      	movs	r3, #18
 8001546:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001550:	2308      	movs	r3, #8
 8001552:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001554:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001558:	4619      	mov	r1, r3
 800155a:	480b      	ldr	r0, [pc, #44]	; (8001588 <HAL_I2C_MspInit+0xb0>)
 800155c:	f002 fdba 	bl	80040d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_I2C_MspInit+0xac>)
 8001562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001564:	4a07      	ldr	r2, [pc, #28]	; (8001584 <HAL_I2C_MspInit+0xac>)
 8001566:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800156a:	6593      	str	r3, [r2, #88]	; 0x58
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <HAL_I2C_MspInit+0xac>)
 800156e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001570:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001578:	bf00      	nop
 800157a:	3778      	adds	r7, #120	; 0x78
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40007800 	.word	0x40007800
 8001584:	40021000 	.word	0x40021000
 8001588:	48000800 	.word	0x48000800

0800158c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800159c:	d113      	bne.n	80015c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <HAL_TIM_Base_MspInit+0x44>)
 80015a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a2:	4a0b      	ldr	r2, [pc, #44]	; (80015d0 <HAL_TIM_Base_MspInit+0x44>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6593      	str	r3, [r2, #88]	; 0x58
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_TIM_Base_MspInit+0x44>)
 80015ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	201c      	movs	r0, #28
 80015bc:	f002 f8af 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015c0:	201c      	movs	r0, #28
 80015c2:	f002 f8c6 	bl	8003752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000

080015d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d8:	e7fe      	b.n	80015d8 <NMI_Handler+0x4>

080015da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <MemManage_Handler+0x4>

080015e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001620:	f000 f98e 	bl	8001940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}

08001628 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <DMA1_Channel1_IRQHandler+0x10>)
 800162e:	f002 fc01 	bl	8003e34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200003b4 	.word	0x200003b4

0800163c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <DMA1_Channel2_IRQHandler+0x10>)
 8001642:	f002 fbf7 	bl	8003e34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000414 	.word	0x20000414

08001650 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <DMA1_Channel3_IRQHandler+0x10>)
 8001656:	f002 fbed 	bl	8003e34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000474 	.word	0x20000474

08001664 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <DMA1_Channel4_IRQHandler+0x10>)
 800166a:	f002 fbe3 	bl	8003e34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200004d4 	.word	0x200004d4

08001678 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <USB_HP_IRQHandler+0x10>)
 800167e:	f003 f8ff 	bl	8004880 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200059a0 	.word	0x200059a0

0800168c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <USB_LP_IRQHandler+0x10>)
 8001692:	f003 f8f5 	bl	8004880 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200059a0 	.word	0x200059a0

080016a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016a4:	4809      	ldr	r0, [pc, #36]	; (80016cc <TIM2_IRQHandler+0x2c>)
 80016a6:	f005 fe32 	bl	800730e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  conv_count++;
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <TIM2_IRQHandler+0x30>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <TIM2_IRQHandler+0x30>)
 80016b2:	6013      	str	r3, [r2, #0]
  if(conv_count > target_conv_count){
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <TIM2_IRQHandler+0x30>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <TIM2_IRQHandler+0x34>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	dd02      	ble.n	80016c6 <TIM2_IRQHandler+0x26>
	  conv_state = DONE;
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <TIM2_IRQHandler+0x38>)
 80016c2:	2205      	movs	r2, #5
 80016c4:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	2000059c 	.word	0x2000059c
 80016d0:	200044b0 	.word	0x200044b0
 80016d4:	200044ac 	.word	0x200044ac
 80016d8:	200044a8 	.word	0x200044a8

080016dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e00a      	b.n	8001704 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016ee:	f3af 8000 	nop.w
 80016f2:	4601      	mov	r1, r0
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	60ba      	str	r2, [r7, #8]
 80016fa:	b2ca      	uxtb	r2, r1
 80016fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3301      	adds	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	429a      	cmp	r2, r3
 800170a:	dbf0      	blt.n	80016ee <_read+0x12>
  }

  return len;
 800170c:	687b      	ldr	r3, [r7, #4]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	e009      	b.n	800173c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	60ba      	str	r2, [r7, #8]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3301      	adds	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	429a      	cmp	r2, r3
 8001742:	dbf1      	blt.n	8001728 <_write+0x12>
  }
  return len;
 8001744:	687b      	ldr	r3, [r7, #4]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <_close>:

int _close(int file)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001776:	605a      	str	r2, [r3, #4]
  return 0;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <_isatty>:

int _isatty(int file)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800178e:	2301      	movs	r3, #1
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c0:	4a14      	ldr	r2, [pc, #80]	; (8001814 <_sbrk+0x5c>)
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <_sbrk+0x60>)
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <_sbrk+0x64>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <_sbrk+0x68>)
 80017d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d207      	bcs.n	80017f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e8:	f00b f8f2 	bl	800c9d0 <__errno>
 80017ec:	4603      	mov	r3, r0
 80017ee:	220c      	movs	r2, #12
 80017f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	e009      	b.n	800180c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	4a05      	ldr	r2, [pc, #20]	; (800181c <_sbrk+0x64>)
 8001808:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180a:	68fb      	ldr	r3, [r7, #12]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20020000 	.word	0x20020000
 8001818:	00001000 	.word	0x00001000
 800181c:	200044c4 	.word	0x200044c4
 8001820:	20005fe8 	.word	0x20005fe8

08001824 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <SystemInit+0x20>)
 800182a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800182e:	4a05      	ldr	r2, [pc, #20]	; (8001844 <SystemInit+0x20>)
 8001830:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001834:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001848:	480d      	ldr	r0, [pc, #52]	; (8001880 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800184a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800184c:	f7ff ffea 	bl	8001824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001850:	480c      	ldr	r0, [pc, #48]	; (8001884 <LoopForever+0x6>)
  ldr r1, =_edata
 8001852:	490d      	ldr	r1, [pc, #52]	; (8001888 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <LoopForever+0xe>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001858:	e002      	b.n	8001860 <LoopCopyDataInit>

0800185a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800185c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185e:	3304      	adds	r3, #4

08001860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001864:	d3f9      	bcc.n	800185a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001868:	4c0a      	ldr	r4, [pc, #40]	; (8001894 <LoopForever+0x16>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800186c:	e001      	b.n	8001872 <LoopFillZerobss>

0800186e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001870:	3204      	adds	r2, #4

08001872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001874:	d3fb      	bcc.n	800186e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001876:	f00b f8b1 	bl	800c9dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800187a:	f7fe fd31 	bl	80002e0 <main>

0800187e <LoopForever>:

LoopForever:
    b LoopForever
 800187e:	e7fe      	b.n	800187e <LoopForever>
  ldr   r0, =_estack
 8001880:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001888:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800188c:	0800d764 	.word	0x0800d764
  ldr r2, =_sbss
 8001890:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001894:	20005fe8 	.word	0x20005fe8

08001898 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <ADC1_2_IRQHandler>

0800189a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a4:	2003      	movs	r0, #3
 80018a6:	f001 ff2f 	bl	8003708 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018aa:	2000      	movs	r0, #0
 80018ac:	f000 f80e 	bl	80018cc <HAL_InitTick>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	71fb      	strb	r3, [r7, #7]
 80018ba:	e001      	b.n	80018c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018bc:	f7ff fba4 	bl	8001008 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018c0:	79fb      	ldrb	r3, [r7, #7]

}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <HAL_InitTick+0x68>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d022      	beq.n	8001926 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80018e0:	4b15      	ldr	r3, [pc, #84]	; (8001938 <HAL_InitTick+0x6c>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <HAL_InitTick+0x68>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80018f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f4:	4618      	mov	r0, r3
 80018f6:	f001 ff3a 	bl	800376e <HAL_SYSTICK_Config>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10f      	bne.n	8001920 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b0f      	cmp	r3, #15
 8001904:	d809      	bhi.n	800191a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001906:	2200      	movs	r2, #0
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	f04f 30ff 	mov.w	r0, #4294967295
 800190e:	f001 ff06 	bl	800371e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <HAL_InitTick+0x70>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	e007      	b.n	800192a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	73fb      	strb	r3, [r7, #15]
 800191e:	e004      	b.n	800192a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
 8001924:	e001      	b.n	800192a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800192a:	7bfb      	ldrb	r3, [r7, #15]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000010 	.word	0x20000010
 8001938:	20000008 	.word	0x20000008
 800193c:	2000000c 	.word	0x2000000c

08001940 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_IncTick+0x1c>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_IncTick+0x20>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4413      	add	r3, r2
 800194e:	4a03      	ldr	r2, [pc, #12]	; (800195c <HAL_IncTick+0x1c>)
 8001950:	6013      	str	r3, [r2, #0]
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	200044c8 	.word	0x200044c8
 8001960:	20000010 	.word	0x20000010

08001964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return uwTick;
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <HAL_GetTick+0x14>)
 800196a:	681b      	ldr	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	200044c8 	.word	0x200044c8

0800197c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800198c:	4904      	ldr	r1, [pc, #16]	; (80019a0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40010030 	.word	0x40010030

080019a4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 0202 	bic.w	r2, r3, #2
 80019b4:	4904      	ldr	r1, [pc, #16]	; (80019c8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	40010030 	.word	0x40010030

080019cc <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a0e      	ldr	r2, [pc, #56]	; (8001a10 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80019de:	f7ff ffc1 	bl	8001964 <HAL_GetTick>
 80019e2:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80019e4:	e008      	b.n	80019f8 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80019e6:	f7ff ffbd 	bl	8001964 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b0a      	cmp	r3, #10
 80019f2:	d901      	bls.n	80019f8 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e006      	b.n	8001a06 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40010030 	.word	0x40010030

08001a14 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	609a      	str	r2, [r3, #8]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b087      	sub	sp, #28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	3360      	adds	r3, #96	; 0x60
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <LL_ADC_SetOffset+0x44>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ab4:	bf00      	nop
 8001ab6:	371c      	adds	r7, #28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	03fff000 	.word	0x03fff000

08001ac4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3360      	adds	r3, #96	; 0x60
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b087      	sub	sp, #28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3360      	adds	r3, #96	; 0x60
 8001b00:	461a      	mov	r2, r3
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	431a      	orrs	r2, r3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b1a:	bf00      	nop
 8001b1c:	371c      	adds	r7, #28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b087      	sub	sp, #28
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	60f8      	str	r0, [r7, #12]
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3360      	adds	r3, #96	; 0x60
 8001b36:	461a      	mov	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001b50:	bf00      	nop
 8001b52:	371c      	adds	r7, #28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	3360      	adds	r3, #96	; 0x60
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	431a      	orrs	r2, r3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001b86:	bf00      	nop
 8001b88:	371c      	adds	r7, #28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	615a      	str	r2, [r3, #20]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b087      	sub	sp, #28
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	3330      	adds	r3, #48	; 0x30
 8001bee:	461a      	mov	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	0a1b      	lsrs	r3, r3, #8
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	4413      	add	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	211f      	movs	r1, #31
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	401a      	ands	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	0e9b      	lsrs	r3, r3, #26
 8001c16:	f003 011f 	and.w	r1, r3, #31
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	f003 031f 	and.w	r3, r3, #31
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	431a      	orrs	r2, r3
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c2a:	bf00      	nop
 8001c2c:	371c      	adds	r7, #28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b087      	sub	sp, #28
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	3314      	adds	r3, #20
 8001c46:	461a      	mov	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	0e5b      	lsrs	r3, r3, #25
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	4413      	add	r3, r2
 8001c54:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	0d1b      	lsrs	r3, r3, #20
 8001c5e:	f003 031f 	and.w	r3, r3, #31
 8001c62:	2107      	movs	r1, #7
 8001c64:	fa01 f303 	lsl.w	r3, r1, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	0d1b      	lsrs	r3, r3, #20
 8001c70:	f003 031f 	and.w	r3, r3, #31
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c80:	bf00      	nop
 8001c82:	371c      	adds	r7, #28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0318 	and.w	r3, r3, #24
 8001cae:	4908      	ldr	r1, [pc, #32]	; (8001cd0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cb0:	40d9      	lsrs	r1, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	400b      	ands	r3, r1
 8001cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	0007ffff 	.word	0x0007ffff

08001cd4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 031f 	and.w	r3, r3, #31
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6093      	str	r3, [r2, #8]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d28:	d101      	bne.n	8001d2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d78:	d101      	bne.n	8001d7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dc8:	f043 0202 	orr.w	r2, r3, #2
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <LL_ADC_IsEnabled+0x18>
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <LL_ADC_IsEnabled+0x1a>
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d101      	bne.n	8001e1a <LL_ADC_IsDisableOngoing+0x18>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <LL_ADC_IsDisableOngoing+0x1a>
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e3c:	f043 0204 	orr.w	r2, r3, #4
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e64:	f043 0210 	orr.w	r2, r3, #16
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d101      	bne.n	8001e90 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001eae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001eb2:	f043 0220 	orr.w	r2, r3, #32
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d101      	bne.n	8001ede <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001eec:	b590      	push	{r4, r7, lr}
 8001eee:	b089      	sub	sp, #36	; 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e1a9      	b.n	800225a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d109      	bne.n	8001f28 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff f8a3 	bl	8001060 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fef1 	bl	8001d14 <LL_ADC_IsDeepPowerDownEnabled>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d004      	beq.n	8001f42 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fed7 	bl	8001cf0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff ff0c 	bl	8001d64 <LL_ADC_IsInternalRegulatorEnabled>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d115      	bne.n	8001f7e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fef0 	bl	8001d3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f5c:	4b9c      	ldr	r3, [pc, #624]	; (80021d0 <HAL_ADC_Init+0x2e4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	099b      	lsrs	r3, r3, #6
 8001f62:	4a9c      	ldr	r2, [pc, #624]	; (80021d4 <HAL_ADC_Init+0x2e8>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	099b      	lsrs	r3, r3, #6
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f70:	e002      	b.n	8001f78 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f9      	bne.n	8001f72 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff feee 	bl	8001d64 <LL_ADC_IsInternalRegulatorEnabled>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10d      	bne.n	8001faa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f92:	f043 0210 	orr.w	r2, r3, #16
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9e:	f043 0201 	orr.w	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ff62 	bl	8001e78 <LL_ADC_REG_IsConversionOngoing>
 8001fb4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 8142 	bne.w	8002248 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f040 813e 	bne.w	8002248 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001fd4:	f043 0202 	orr.w	r2, r3, #2
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fefb 	bl	8001ddc <LL_ADC_IsEnabled>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d141      	bne.n	8002070 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ff4:	d004      	beq.n	8002000 <HAL_ADC_Init+0x114>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a77      	ldr	r2, [pc, #476]	; (80021d8 <HAL_ADC_Init+0x2ec>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d10f      	bne.n	8002020 <HAL_ADC_Init+0x134>
 8002000:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002004:	f7ff feea 	bl	8001ddc <LL_ADC_IsEnabled>
 8002008:	4604      	mov	r4, r0
 800200a:	4873      	ldr	r0, [pc, #460]	; (80021d8 <HAL_ADC_Init+0x2ec>)
 800200c:	f7ff fee6 	bl	8001ddc <LL_ADC_IsEnabled>
 8002010:	4603      	mov	r3, r0
 8002012:	4323      	orrs	r3, r4
 8002014:	2b00      	cmp	r3, #0
 8002016:	bf0c      	ite	eq
 8002018:	2301      	moveq	r3, #1
 800201a:	2300      	movne	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	e012      	b.n	8002046 <HAL_ADC_Init+0x15a>
 8002020:	486e      	ldr	r0, [pc, #440]	; (80021dc <HAL_ADC_Init+0x2f0>)
 8002022:	f7ff fedb 	bl	8001ddc <LL_ADC_IsEnabled>
 8002026:	4604      	mov	r4, r0
 8002028:	486d      	ldr	r0, [pc, #436]	; (80021e0 <HAL_ADC_Init+0x2f4>)
 800202a:	f7ff fed7 	bl	8001ddc <LL_ADC_IsEnabled>
 800202e:	4603      	mov	r3, r0
 8002030:	431c      	orrs	r4, r3
 8002032:	486c      	ldr	r0, [pc, #432]	; (80021e4 <HAL_ADC_Init+0x2f8>)
 8002034:	f7ff fed2 	bl	8001ddc <LL_ADC_IsEnabled>
 8002038:	4603      	mov	r3, r0
 800203a:	4323      	orrs	r3, r4
 800203c:	2b00      	cmp	r3, #0
 800203e:	bf0c      	ite	eq
 8002040:	2301      	moveq	r3, #1
 8002042:	2300      	movne	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d012      	beq.n	8002070 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002052:	d004      	beq.n	800205e <HAL_ADC_Init+0x172>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a5f      	ldr	r2, [pc, #380]	; (80021d8 <HAL_ADC_Init+0x2ec>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d101      	bne.n	8002062 <HAL_ADC_Init+0x176>
 800205e:	4a62      	ldr	r2, [pc, #392]	; (80021e8 <HAL_ADC_Init+0x2fc>)
 8002060:	e000      	b.n	8002064 <HAL_ADC_Init+0x178>
 8002062:	4a62      	ldr	r2, [pc, #392]	; (80021ec <HAL_ADC_Init+0x300>)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4619      	mov	r1, r3
 800206a:	4610      	mov	r0, r2
 800206c:	f7ff fcd2 	bl	8001a14 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	7f5b      	ldrb	r3, [r3, #29]
 8002074:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800207a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002080:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002086:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800208e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800209a:	2b01      	cmp	r3, #1
 800209c:	d106      	bne.n	80020ac <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a2:	3b01      	subs	r3, #1
 80020a4:	045b      	lsls	r3, r3, #17
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d009      	beq.n	80020c8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	4b48      	ldr	r3, [pc, #288]	; (80021f0 <HAL_ADC_Init+0x304>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	69b9      	ldr	r1, [r7, #24]
 80020d8:	430b      	orrs	r3, r1
 80020da:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fee5 	bl	8001ec6 <LL_ADC_INJ_IsConversionOngoing>
 80020fc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d17f      	bne.n	8002204 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d17c      	bne.n	8002204 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800210e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002116:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002126:	f023 0302 	bic.w	r3, r3, #2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	69b9      	ldr	r1, [r7, #24]
 8002130:	430b      	orrs	r3, r1
 8002132:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d017      	beq.n	800216c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800214a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002154:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002158:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6911      	ldr	r1, [r2, #16]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	430b      	orrs	r3, r1
 8002166:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800216a:	e013      	b.n	8002194 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691a      	ldr	r2, [r3, #16]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800217a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800218c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002190:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800219a:	2b01      	cmp	r3, #1
 800219c:	d12a      	bne.n	80021f4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80021a8:	f023 0304 	bic.w	r3, r3, #4
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021b4:	4311      	orrs	r1, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80021ba:	4311      	orrs	r1, r2
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021c0:	430a      	orrs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0201 	orr.w	r2, r2, #1
 80021cc:	611a      	str	r2, [r3, #16]
 80021ce:	e019      	b.n	8002204 <HAL_ADC_Init+0x318>
 80021d0:	20000008 	.word	0x20000008
 80021d4:	053e2d63 	.word	0x053e2d63
 80021d8:	50000100 	.word	0x50000100
 80021dc:	50000400 	.word	0x50000400
 80021e0:	50000500 	.word	0x50000500
 80021e4:	50000600 	.word	0x50000600
 80021e8:	50000300 	.word	0x50000300
 80021ec:	50000700 	.word	0x50000700
 80021f0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691a      	ldr	r2, [r3, #16]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0201 	bic.w	r2, r2, #1
 8002202:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d10c      	bne.n	8002226 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f023 010f 	bic.w	r1, r3, #15
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	1e5a      	subs	r2, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	631a      	str	r2, [r3, #48]	; 0x30
 8002224:	e007      	b.n	8002236 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 020f 	bic.w	r2, r2, #15
 8002234:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223a:	f023 0303 	bic.w	r3, r3, #3
 800223e:	f043 0201 	orr.w	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	65da      	str	r2, [r3, #92]	; 0x5c
 8002246:	e007      	b.n	8002258 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224c:	f043 0210 	orr.w	r2, r3, #16
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002258:	7ffb      	ldrb	r3, [r7, #31]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3724      	adds	r7, #36	; 0x24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd90      	pop	{r4, r7, pc}
 8002262:	bf00      	nop

08002264 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002278:	d004      	beq.n	8002284 <HAL_ADC_Start_DMA+0x20>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a5a      	ldr	r2, [pc, #360]	; (80023e8 <HAL_ADC_Start_DMA+0x184>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d101      	bne.n	8002288 <HAL_ADC_Start_DMA+0x24>
 8002284:	4b59      	ldr	r3, [pc, #356]	; (80023ec <HAL_ADC_Start_DMA+0x188>)
 8002286:	e000      	b.n	800228a <HAL_ADC_Start_DMA+0x26>
 8002288:	4b59      	ldr	r3, [pc, #356]	; (80023f0 <HAL_ADC_Start_DMA+0x18c>)
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fd22 	bl	8001cd4 <LL_ADC_GetMultimode>
 8002290:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fdee 	bl	8001e78 <LL_ADC_REG_IsConversionOngoing>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f040 809b 	bne.w	80023da <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <HAL_ADC_Start_DMA+0x4e>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e096      	b.n	80023e0 <HAL_ADC_Start_DMA+0x17c>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a4d      	ldr	r2, [pc, #308]	; (80023f4 <HAL_ADC_Start_DMA+0x190>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d008      	beq.n	80022d6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d002      	beq.n	80022d6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	2b09      	cmp	r3, #9
 80022d4:	d17a      	bne.n	80023cc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 fe00 	bl	8002edc <ADC_Enable>
 80022dc:	4603      	mov	r3, r0
 80022de:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80022e0:	7dfb      	ldrb	r3, [r7, #23]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d16d      	bne.n	80023c2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022ee:	f023 0301 	bic.w	r3, r3, #1
 80022f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a3a      	ldr	r2, [pc, #232]	; (80023e8 <HAL_ADC_Start_DMA+0x184>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d009      	beq.n	8002318 <HAL_ADC_Start_DMA+0xb4>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a3b      	ldr	r2, [pc, #236]	; (80023f8 <HAL_ADC_Start_DMA+0x194>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d002      	beq.n	8002314 <HAL_ADC_Start_DMA+0xb0>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	e003      	b.n	800231c <HAL_ADC_Start_DMA+0xb8>
 8002314:	4b39      	ldr	r3, [pc, #228]	; (80023fc <HAL_ADC_Start_DMA+0x198>)
 8002316:	e001      	b.n	800231c <HAL_ADC_Start_DMA+0xb8>
 8002318:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	4293      	cmp	r3, r2
 8002322:	d002      	beq.n	800232a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d105      	bne.n	8002336 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d006      	beq.n	8002350 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002346:	f023 0206 	bic.w	r2, r3, #6
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	661a      	str	r2, [r3, #96]	; 0x60
 800234e:	e002      	b.n	8002356 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235a:	4a29      	ldr	r2, [pc, #164]	; (8002400 <HAL_ADC_Start_DMA+0x19c>)
 800235c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002362:	4a28      	ldr	r2, [pc, #160]	; (8002404 <HAL_ADC_Start_DMA+0x1a0>)
 8002364:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236a:	4a27      	ldr	r2, [pc, #156]	; (8002408 <HAL_ADC_Start_DMA+0x1a4>)
 800236c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	221c      	movs	r2, #28
 8002374:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0210 	orr.w	r2, r2, #16
 800238c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f042 0201 	orr.w	r2, r2, #1
 800239c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	3340      	adds	r3, #64	; 0x40
 80023a8:	4619      	mov	r1, r3
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f001 fc6d 	bl	8003c8c <HAL_DMA_Start_IT>
 80023b2:	4603      	mov	r3, r0
 80023b4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fd34 	bl	8001e28 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80023c0:	e00d      	b.n	80023de <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80023ca:	e008      	b.n	80023de <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80023d8:	e001      	b.n	80023de <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023da:	2302      	movs	r3, #2
 80023dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80023de:	7dfb      	ldrb	r3, [r7, #23]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	50000100 	.word	0x50000100
 80023ec:	50000300 	.word	0x50000300
 80023f0:	50000700 	.word	0x50000700
 80023f4:	50000600 	.word	0x50000600
 80023f8:	50000500 	.word	0x50000500
 80023fc:	50000400 	.word	0x50000400
 8002400:	080030c7 	.word	0x080030c7
 8002404:	0800319f 	.word	0x0800319f
 8002408:	080031bb 	.word	0x080031bb

0800240c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_ADC_Stop_DMA+0x16>
 800241e:	2302      	movs	r3, #2
 8002420:	e051      	b.n	80024c6 <HAL_ADC_Stop_DMA+0xba>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800242a:	2103      	movs	r1, #3
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 fc99 	bl	8002d64 <ADC_ConversionStop>
 8002432:	4603      	mov	r3, r0
 8002434:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d13f      	bne.n	80024bc <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0201 	bic.w	r2, r2, #1
 800244a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002450:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d10f      	bne.n	800247a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245e:	4618      	mov	r0, r3
 8002460:	f001 fc8f 	bl	8003d82 <HAL_DMA_Abort>
 8002464:	4603      	mov	r3, r0
 8002466:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002472:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0210 	bic.w	r2, r2, #16
 8002488:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d105      	bne.n	800249c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 fdb9 	bl	8003008 <ADC_Disable>
 8002496:	4603      	mov	r3, r0
 8002498:	73fb      	strb	r3, [r7, #15]
 800249a:	e002      	b.n	80024a2 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 fdb3 	bl	8003008 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d109      	bne.n	80024bc <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	f043 0201 	orr.w	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b0b6      	sub	sp, #216	; 0xd8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d102      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x24>
 8002502:	2302      	movs	r3, #2
 8002504:	f000 bc13 	b.w	8002d2e <HAL_ADC_ConfigChannel+0x84a>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fcaf 	bl	8001e78 <LL_ADC_REG_IsConversionOngoing>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	f040 83f3 	bne.w	8002d08 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	f7ff fb55 	bl	8001bde <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fc9d 	bl	8001e78 <LL_ADC_REG_IsConversionOngoing>
 800253e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fcbd 	bl	8001ec6 <LL_ADC_INJ_IsConversionOngoing>
 800254c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002550:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002554:	2b00      	cmp	r3, #0
 8002556:	f040 81d9 	bne.w	800290c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800255a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800255e:	2b00      	cmp	r3, #0
 8002560:	f040 81d4 	bne.w	800290c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800256c:	d10f      	bne.n	800258e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2200      	movs	r2, #0
 8002578:	4619      	mov	r1, r3
 800257a:	f7ff fb5c 	bl	8001c36 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff fb03 	bl	8001b92 <LL_ADC_SetSamplingTimeCommonConfig>
 800258c:	e00e      	b.n	80025ac <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	6819      	ldr	r1, [r3, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	461a      	mov	r2, r3
 800259c:	f7ff fb4b 	bl	8001c36 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff faf3 	bl	8001b92 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	695a      	ldr	r2, [r3, #20]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	08db      	lsrs	r3, r3, #3
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d022      	beq.n	8002614 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	6919      	ldr	r1, [r3, #16]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025de:	f7ff fa4d 	bl	8001a7c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	6919      	ldr	r1, [r3, #16]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	461a      	mov	r2, r3
 80025f0:	f7ff fa99 	bl	8001b26 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002600:	2b01      	cmp	r3, #1
 8002602:	d102      	bne.n	800260a <HAL_ADC_ConfigChannel+0x126>
 8002604:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002608:	e000      	b.n	800260c <HAL_ADC_ConfigChannel+0x128>
 800260a:	2300      	movs	r3, #0
 800260c:	461a      	mov	r2, r3
 800260e:	f7ff faa5 	bl	8001b5c <LL_ADC_SetOffsetSaturation>
 8002612:	e17b      	b.n	800290c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2100      	movs	r1, #0
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fa52 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 8002620:	4603      	mov	r3, r0
 8002622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10a      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x15c>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fa47 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 8002636:	4603      	mov	r3, r0
 8002638:	0e9b      	lsrs	r3, r3, #26
 800263a:	f003 021f 	and.w	r2, r3, #31
 800263e:	e01e      	b.n	800267e <HAL_ADC_ConfigChannel+0x19a>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2100      	movs	r1, #0
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fa3c 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 800264c:	4603      	mov	r3, r0
 800264e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800265e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002662:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002666:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800266e:	2320      	movs	r3, #32
 8002670:	e004      	b.n	800267c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002672:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002686:	2b00      	cmp	r3, #0
 8002688:	d105      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x1b2>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	0e9b      	lsrs	r3, r3, #26
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	e018      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x1e4>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80026aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80026b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80026ba:	2320      	movs	r3, #32
 80026bc:	e004      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80026be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d106      	bne.n	80026da <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2200      	movs	r2, #0
 80026d2:	2100      	movs	r1, #0
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff fa0b 	bl	8001af0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2101      	movs	r1, #1
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff f9ef 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10a      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x222>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2101      	movs	r1, #1
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff f9e4 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 80026fc:	4603      	mov	r3, r0
 80026fe:	0e9b      	lsrs	r3, r3, #26
 8002700:	f003 021f 	and.w	r2, r3, #31
 8002704:	e01e      	b.n	8002744 <HAL_ADC_ConfigChannel+0x260>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2101      	movs	r1, #1
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff f9d9 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 8002712:	4603      	mov	r3, r0
 8002714:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002724:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002728:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800272c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002734:	2320      	movs	r3, #32
 8002736:	e004      	b.n	8002742 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002738:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800273c:	fab3 f383 	clz	r3, r3
 8002740:	b2db      	uxtb	r3, r3
 8002742:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800274c:	2b00      	cmp	r3, #0
 800274e:	d105      	bne.n	800275c <HAL_ADC_ConfigChannel+0x278>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	0e9b      	lsrs	r3, r3, #26
 8002756:	f003 031f 	and.w	r3, r3, #31
 800275a:	e018      	b.n	800278e <HAL_ADC_ConfigChannel+0x2aa>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002768:	fa93 f3a3 	rbit	r3, r3
 800276c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002770:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002774:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002778:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002780:	2320      	movs	r3, #32
 8002782:	e004      	b.n	800278e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002784:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002788:	fab3 f383 	clz	r3, r3
 800278c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800278e:	429a      	cmp	r2, r3
 8002790:	d106      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2200      	movs	r2, #0
 8002798:	2101      	movs	r1, #1
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff f9a8 	bl	8001af0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2102      	movs	r1, #2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff f98c 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10a      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x2e8>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2102      	movs	r1, #2
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff f981 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 80027c2:	4603      	mov	r3, r0
 80027c4:	0e9b      	lsrs	r3, r3, #26
 80027c6:	f003 021f 	and.w	r2, r3, #31
 80027ca:	e01e      	b.n	800280a <HAL_ADC_ConfigChannel+0x326>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2102      	movs	r1, #2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff f976 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 80027d8:	4603      	mov	r3, r0
 80027da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80027ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80027f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80027fa:	2320      	movs	r3, #32
 80027fc:	e004      	b.n	8002808 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80027fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002802:	fab3 f383 	clz	r3, r3
 8002806:	b2db      	uxtb	r3, r3
 8002808:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002812:	2b00      	cmp	r3, #0
 8002814:	d105      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x33e>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	0e9b      	lsrs	r3, r3, #26
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	e016      	b.n	8002850 <HAL_ADC_ConfigChannel+0x36c>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002834:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002836:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800283a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002842:	2320      	movs	r3, #32
 8002844:	e004      	b.n	8002850 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002846:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002850:	429a      	cmp	r2, r3
 8002852:	d106      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2200      	movs	r2, #0
 800285a:	2102      	movs	r1, #2
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff f947 	bl	8001af0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2103      	movs	r1, #3
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff f92b 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 800286e:	4603      	mov	r3, r0
 8002870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10a      	bne.n	800288e <HAL_ADC_ConfigChannel+0x3aa>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2103      	movs	r1, #3
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff f920 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 8002884:	4603      	mov	r3, r0
 8002886:	0e9b      	lsrs	r3, r3, #26
 8002888:	f003 021f 	and.w	r2, r3, #31
 800288c:	e017      	b.n	80028be <HAL_ADC_ConfigChannel+0x3da>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2103      	movs	r1, #3
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff f915 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 800289a:	4603      	mov	r3, r0
 800289c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028a0:	fa93 f3a3 	rbit	r3, r3
 80028a4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80028a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028a8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80028aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80028b0:	2320      	movs	r3, #32
 80028b2:	e003      	b.n	80028bc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80028b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028b6:	fab3 f383 	clz	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d105      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x3f2>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	0e9b      	lsrs	r3, r3, #26
 80028d0:	f003 031f 	and.w	r3, r3, #31
 80028d4:	e011      	b.n	80028fa <HAL_ADC_ConfigChannel+0x416>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028de:	fa93 f3a3 	rbit	r3, r3
 80028e2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80028e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80028e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80028ee:	2320      	movs	r3, #32
 80028f0:	e003      	b.n	80028fa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80028f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d106      	bne.n	800290c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2200      	movs	r2, #0
 8002904:	2103      	movs	r1, #3
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff f8f2 	bl	8001af0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fa63 	bl	8001ddc <LL_ADC_IsEnabled>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	f040 813d 	bne.w	8002b98 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6819      	ldr	r1, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	461a      	mov	r2, r3
 800292c:	f7ff f9ae 	bl	8001c8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4aa2      	ldr	r2, [pc, #648]	; (8002bc0 <HAL_ADC_ConfigChannel+0x6dc>)
 8002936:	4293      	cmp	r3, r2
 8002938:	f040 812e 	bne.w	8002b98 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10b      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x480>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	0e9b      	lsrs	r3, r3, #26
 8002952:	3301      	adds	r3, #1
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	2b09      	cmp	r3, #9
 800295a:	bf94      	ite	ls
 800295c:	2301      	movls	r3, #1
 800295e:	2300      	movhi	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	e019      	b.n	8002998 <HAL_ADC_ConfigChannel+0x4b4>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800296c:	fa93 f3a3 	rbit	r3, r3
 8002970:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002972:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002974:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002976:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800297c:	2320      	movs	r3, #32
 800297e:	e003      	b.n	8002988 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002980:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002982:	fab3 f383 	clz	r3, r3
 8002986:	b2db      	uxtb	r3, r3
 8002988:	3301      	adds	r3, #1
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	2b09      	cmp	r3, #9
 8002990:	bf94      	ite	ls
 8002992:	2301      	movls	r3, #1
 8002994:	2300      	movhi	r3, #0
 8002996:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002998:	2b00      	cmp	r3, #0
 800299a:	d079      	beq.n	8002a90 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d107      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x4d4>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	0e9b      	lsrs	r3, r3, #26
 80029ae:	3301      	adds	r3, #1
 80029b0:	069b      	lsls	r3, r3, #26
 80029b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029b6:	e015      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x500>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80029ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80029d0:	2320      	movs	r3, #32
 80029d2:	e003      	b.n	80029dc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80029d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d6:	fab3 f383 	clz	r3, r3
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	3301      	adds	r3, #1
 80029de:	069b      	lsls	r3, r3, #26
 80029e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d109      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x520>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	0e9b      	lsrs	r3, r3, #26
 80029f6:	3301      	adds	r3, #1
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	2101      	movs	r1, #1
 80029fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002a02:	e017      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x550>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a14:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002a1c:	2320      	movs	r3, #32
 8002a1e:	e003      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	3301      	adds	r3, #1
 8002a2a:	f003 031f 	and.w	r3, r3, #31
 8002a2e:	2101      	movs	r1, #1
 8002a30:	fa01 f303 	lsl.w	r3, r1, r3
 8002a34:	ea42 0103 	orr.w	r1, r2, r3
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10a      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x576>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	0e9b      	lsrs	r3, r3, #26
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	f003 021f 	and.w	r2, r3, #31
 8002a50:	4613      	mov	r3, r2
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	4413      	add	r3, r2
 8002a56:	051b      	lsls	r3, r3, #20
 8002a58:	e018      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x5a8>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002a72:	2320      	movs	r3, #32
 8002a74:	e003      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a78:	fab3 f383 	clz	r3, r3
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f003 021f 	and.w	r2, r3, #31
 8002a84:	4613      	mov	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4413      	add	r3, r2
 8002a8a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	e07e      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d107      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x5c8>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	0e9b      	lsrs	r3, r3, #26
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	069b      	lsls	r3, r3, #26
 8002aa6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aaa:	e015      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x5f4>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab4:	fa93 f3a3 	rbit	r3, r3
 8002ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002ac4:	2320      	movs	r3, #32
 8002ac6:	e003      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	069b      	lsls	r3, r3, #26
 8002ad4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d109      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x614>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	0e9b      	lsrs	r3, r3, #26
 8002aea:	3301      	adds	r3, #1
 8002aec:	f003 031f 	and.w	r3, r3, #31
 8002af0:	2101      	movs	r1, #1
 8002af2:	fa01 f303 	lsl.w	r3, r1, r3
 8002af6:	e017      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x644>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	fa93 f3a3 	rbit	r3, r3
 8002b04:	61fb      	str	r3, [r7, #28]
  return result;
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002b10:	2320      	movs	r3, #32
 8002b12:	e003      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	f003 031f 	and.w	r3, r3, #31
 8002b22:	2101      	movs	r1, #1
 8002b24:	fa01 f303 	lsl.w	r3, r1, r3
 8002b28:	ea42 0103 	orr.w	r1, r2, r3
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10d      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x670>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	0e9b      	lsrs	r3, r3, #26
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f003 021f 	and.w	r2, r3, #31
 8002b44:	4613      	mov	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4413      	add	r3, r2
 8002b4a:	3b1e      	subs	r3, #30
 8002b4c:	051b      	lsls	r3, r3, #20
 8002b4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b52:	e01b      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x6a8>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	fa93 f3a3 	rbit	r3, r3
 8002b60:	613b      	str	r3, [r7, #16]
  return result;
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002b6c:	2320      	movs	r3, #32
 8002b6e:	e003      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	fab3 f383 	clz	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	3301      	adds	r3, #1
 8002b7a:	f003 021f 	and.w	r2, r3, #31
 8002b7e:	4613      	mov	r3, r2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	4413      	add	r3, r2
 8002b84:	3b1e      	subs	r3, #30
 8002b86:	051b      	lsls	r3, r3, #20
 8002b88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b8c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b92:	4619      	mov	r1, r3
 8002b94:	f7ff f84f 	bl	8001c36 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <HAL_ADC_ConfigChannel+0x6e0>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80be 	beq.w	8002d22 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bae:	d004      	beq.n	8002bba <HAL_ADC_ConfigChannel+0x6d6>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a04      	ldr	r2, [pc, #16]	; (8002bc8 <HAL_ADC_ConfigChannel+0x6e4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d10a      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x6ec>
 8002bba:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <HAL_ADC_ConfigChannel+0x6e8>)
 8002bbc:	e009      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x6ee>
 8002bbe:	bf00      	nop
 8002bc0:	407f0000 	.word	0x407f0000
 8002bc4:	80080000 	.word	0x80080000
 8002bc8:	50000100 	.word	0x50000100
 8002bcc:	50000300 	.word	0x50000300
 8002bd0:	4b59      	ldr	r3, [pc, #356]	; (8002d38 <HAL_ADC_ConfigChannel+0x854>)
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe ff44 	bl	8001a60 <LL_ADC_GetCommonPathInternalCh>
 8002bd8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a56      	ldr	r2, [pc, #344]	; (8002d3c <HAL_ADC_ConfigChannel+0x858>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d004      	beq.n	8002bf0 <HAL_ADC_ConfigChannel+0x70c>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a55      	ldr	r2, [pc, #340]	; (8002d40 <HAL_ADC_ConfigChannel+0x85c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d13a      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d134      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c04:	d005      	beq.n	8002c12 <HAL_ADC_ConfigChannel+0x72e>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a4e      	ldr	r2, [pc, #312]	; (8002d44 <HAL_ADC_ConfigChannel+0x860>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	f040 8085 	bne.w	8002d1c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c1a:	d004      	beq.n	8002c26 <HAL_ADC_ConfigChannel+0x742>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a49      	ldr	r2, [pc, #292]	; (8002d48 <HAL_ADC_ConfigChannel+0x864>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d101      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x746>
 8002c26:	4a49      	ldr	r2, [pc, #292]	; (8002d4c <HAL_ADC_ConfigChannel+0x868>)
 8002c28:	e000      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x748>
 8002c2a:	4a43      	ldr	r2, [pc, #268]	; (8002d38 <HAL_ADC_ConfigChannel+0x854>)
 8002c2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c34:	4619      	mov	r1, r3
 8002c36:	4610      	mov	r0, r2
 8002c38:	f7fe feff 	bl	8001a3a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c3c:	4b44      	ldr	r3, [pc, #272]	; (8002d50 <HAL_ADC_ConfigChannel+0x86c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	099b      	lsrs	r3, r3, #6
 8002c42:	4a44      	ldr	r2, [pc, #272]	; (8002d54 <HAL_ADC_ConfigChannel+0x870>)
 8002c44:	fba2 2303 	umull	r2, r3, r2, r3
 8002c48:	099b      	lsrs	r3, r3, #6
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c56:	e002      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1f9      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c64:	e05a      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a3b      	ldr	r2, [pc, #236]	; (8002d58 <HAL_ADC_ConfigChannel+0x874>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d125      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d11f      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a31      	ldr	r2, [pc, #196]	; (8002d48 <HAL_ADC_ConfigChannel+0x864>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d104      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x7ac>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a34      	ldr	r2, [pc, #208]	; (8002d5c <HAL_ADC_ConfigChannel+0x878>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d047      	beq.n	8002d20 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c98:	d004      	beq.n	8002ca4 <HAL_ADC_ConfigChannel+0x7c0>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a2a      	ldr	r2, [pc, #168]	; (8002d48 <HAL_ADC_ConfigChannel+0x864>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d101      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x7c4>
 8002ca4:	4a29      	ldr	r2, [pc, #164]	; (8002d4c <HAL_ADC_ConfigChannel+0x868>)
 8002ca6:	e000      	b.n	8002caa <HAL_ADC_ConfigChannel+0x7c6>
 8002ca8:	4a23      	ldr	r2, [pc, #140]	; (8002d38 <HAL_ADC_ConfigChannel+0x854>)
 8002caa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	f7fe fec0 	bl	8001a3a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cba:	e031      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a27      	ldr	r2, [pc, #156]	; (8002d60 <HAL_ADC_ConfigChannel+0x87c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d12d      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d127      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a1c      	ldr	r2, [pc, #112]	; (8002d48 <HAL_ADC_ConfigChannel+0x864>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d022      	beq.n	8002d22 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ce4:	d004      	beq.n	8002cf0 <HAL_ADC_ConfigChannel+0x80c>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <HAL_ADC_ConfigChannel+0x864>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d101      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x810>
 8002cf0:	4a16      	ldr	r2, [pc, #88]	; (8002d4c <HAL_ADC_ConfigChannel+0x868>)
 8002cf2:	e000      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x812>
 8002cf4:	4a10      	ldr	r2, [pc, #64]	; (8002d38 <HAL_ADC_ConfigChannel+0x854>)
 8002cf6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cfa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4610      	mov	r0, r2
 8002d02:	f7fe fe9a 	bl	8001a3a <LL_ADC_SetCommonPathInternalCh>
 8002d06:	e00c      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0c:	f043 0220 	orr.w	r2, r3, #32
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002d1a:	e002      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d1c:	bf00      	nop
 8002d1e:	e000      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d20:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d2a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	37d8      	adds	r7, #216	; 0xd8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	50000700 	.word	0x50000700
 8002d3c:	c3210000 	.word	0xc3210000
 8002d40:	90c00010 	.word	0x90c00010
 8002d44:	50000600 	.word	0x50000600
 8002d48:	50000100 	.word	0x50000100
 8002d4c:	50000300 	.word	0x50000300
 8002d50:	20000008 	.word	0x20000008
 8002d54:	053e2d63 	.word	0x053e2d63
 8002d58:	c7520000 	.word	0xc7520000
 8002d5c:	50000500 	.word	0x50000500
 8002d60:	cb840000 	.word	0xcb840000

08002d64 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff f87c 	bl	8001e78 <LL_ADC_REG_IsConversionOngoing>
 8002d80:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff f89d 	bl	8001ec6 <LL_ADC_INJ_IsConversionOngoing>
 8002d8c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d103      	bne.n	8002d9c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 8098 	beq.w	8002ecc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d02a      	beq.n	8002e00 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	7f5b      	ldrb	r3, [r3, #29]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d126      	bne.n	8002e00 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	7f1b      	ldrb	r3, [r3, #28]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d122      	bne.n	8002e00 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002dbe:	e014      	b.n	8002dea <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	4a45      	ldr	r2, [pc, #276]	; (8002ed8 <ADC_ConversionStop+0x174>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d90d      	bls.n	8002de4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dcc:	f043 0210 	orr.w	r2, r3, #16
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd8:	f043 0201 	orr.w	r2, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e074      	b.n	8002ece <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	3301      	adds	r3, #1
 8002de8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df4:	2b40      	cmp	r3, #64	; 0x40
 8002df6:	d1e3      	bne.n	8002dc0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2240      	movs	r2, #64	; 0x40
 8002dfe:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d014      	beq.n	8002e30 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff f834 	bl	8001e78 <LL_ADC_REG_IsConversionOngoing>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00c      	beq.n	8002e30 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe fff1 	bl	8001e02 <LL_ADC_IsDisableOngoing>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d104      	bne.n	8002e30 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff f810 	bl	8001e50 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d014      	beq.n	8002e60 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff f843 	bl	8001ec6 <LL_ADC_INJ_IsConversionOngoing>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00c      	beq.n	8002e60 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe ffd9 	bl	8001e02 <LL_ADC_IsDisableOngoing>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d104      	bne.n	8002e60 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff f81f 	bl	8001e9e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d005      	beq.n	8002e72 <ADC_ConversionStop+0x10e>
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d105      	bne.n	8002e78 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002e6c:	230c      	movs	r3, #12
 8002e6e:	617b      	str	r3, [r7, #20]
        break;
 8002e70:	e005      	b.n	8002e7e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002e72:	2308      	movs	r3, #8
 8002e74:	617b      	str	r3, [r7, #20]
        break;
 8002e76:	e002      	b.n	8002e7e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002e78:	2304      	movs	r3, #4
 8002e7a:	617b      	str	r3, [r7, #20]
        break;
 8002e7c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002e7e:	f7fe fd71 	bl	8001964 <HAL_GetTick>
 8002e82:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e84:	e01b      	b.n	8002ebe <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002e86:	f7fe fd6d 	bl	8001964 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b05      	cmp	r3, #5
 8002e92:	d914      	bls.n	8002ebe <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00d      	beq.n	8002ebe <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea6:	f043 0210 	orr.w	r2, r3, #16
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb2:	f043 0201 	orr.w	r2, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e007      	b.n	8002ece <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1dc      	bne.n	8002e86 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3720      	adds	r7, #32
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	a33fffff 	.word	0xa33fffff

08002edc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe ff75 	bl	8001ddc <LL_ADC_IsEnabled>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d176      	bne.n	8002fe6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	4b3c      	ldr	r3, [pc, #240]	; (8002ff0 <ADC_Enable+0x114>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00d      	beq.n	8002f22 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0a:	f043 0210 	orr.w	r2, r3, #16
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f16:	f043 0201 	orr.w	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e062      	b.n	8002fe8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fe ff30 	bl	8001d8c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f34:	d004      	beq.n	8002f40 <ADC_Enable+0x64>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a2e      	ldr	r2, [pc, #184]	; (8002ff4 <ADC_Enable+0x118>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d101      	bne.n	8002f44 <ADC_Enable+0x68>
 8002f40:	4b2d      	ldr	r3, [pc, #180]	; (8002ff8 <ADC_Enable+0x11c>)
 8002f42:	e000      	b.n	8002f46 <ADC_Enable+0x6a>
 8002f44:	4b2d      	ldr	r3, [pc, #180]	; (8002ffc <ADC_Enable+0x120>)
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe fd8a 	bl	8001a60 <LL_ADC_GetCommonPathInternalCh>
 8002f4c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d013      	beq.n	8002f7e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f56:	4b2a      	ldr	r3, [pc, #168]	; (8003000 <ADC_Enable+0x124>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	099b      	lsrs	r3, r3, #6
 8002f5c:	4a29      	ldr	r2, [pc, #164]	; (8003004 <ADC_Enable+0x128>)
 8002f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f62:	099b      	lsrs	r3, r3, #6
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	4613      	mov	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f70:	e002      	b.n	8002f78 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	3b01      	subs	r3, #1
 8002f76:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f9      	bne.n	8002f72 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f7e:	f7fe fcf1 	bl	8001964 <HAL_GetTick>
 8002f82:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f84:	e028      	b.n	8002fd8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe ff26 	bl	8001ddc <LL_ADC_IsEnabled>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d104      	bne.n	8002fa0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fe fef6 	bl	8001d8c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fa0:	f7fe fce0 	bl	8001964 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d914      	bls.n	8002fd8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d00d      	beq.n	8002fd8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc0:	f043 0210 	orr.w	r2, r3, #16
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fcc:	f043 0201 	orr.w	r2, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e007      	b.n	8002fe8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d1cf      	bne.n	8002f86 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	8000003f 	.word	0x8000003f
 8002ff4:	50000100 	.word	0x50000100
 8002ff8:	50000300 	.word	0x50000300
 8002ffc:	50000700 	.word	0x50000700
 8003000:	20000008 	.word	0x20000008
 8003004:	053e2d63 	.word	0x053e2d63

08003008 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe fef4 	bl	8001e02 <LL_ADC_IsDisableOngoing>
 800301a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f7fe fedb 	bl	8001ddc <LL_ADC_IsEnabled>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d047      	beq.n	80030bc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d144      	bne.n	80030bc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 030d 	and.w	r3, r3, #13
 800303c:	2b01      	cmp	r3, #1
 800303e:	d10c      	bne.n	800305a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7fe feb5 	bl	8001db4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2203      	movs	r2, #3
 8003050:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003052:	f7fe fc87 	bl	8001964 <HAL_GetTick>
 8003056:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003058:	e029      	b.n	80030ae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305e:	f043 0210 	orr.w	r2, r3, #16
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306a:	f043 0201 	orr.w	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e023      	b.n	80030be <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003076:	f7fe fc75 	bl	8001964 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d914      	bls.n	80030ae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00d      	beq.n	80030ae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003096:	f043 0210 	orr.w	r2, r3, #16
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a2:	f043 0201 	orr.w	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e007      	b.n	80030be <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1dc      	bne.n	8003076 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d14b      	bne.n	8003178 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d021      	beq.n	800313e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe fd5a 	bl	8001bb8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d032      	beq.n	8003170 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d12b      	bne.n	8003170 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003128:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d11f      	bne.n	8003170 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003134:	f043 0201 	orr.w	r2, r3, #1
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	65da      	str	r2, [r3, #92]	; 0x5c
 800313c:	e018      	b.n	8003170 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d111      	bne.n	8003170 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003150:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d105      	bne.n	8003170 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	f043 0201 	orr.w	r2, r3, #1
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f7fd ff0d 	bl	8000f90 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003176:	e00e      	b.n	8003196 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f7ff f9a2 	bl	80024ce <HAL_ADC_ErrorCallback>
}
 800318a:	e004      	b.n	8003196 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	4798      	blx	r3
}
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f7fd febb 	bl	8000f28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031b2:	bf00      	nop
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d8:	f043 0204 	orr.w	r2, r3, #4
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f7ff f974 	bl	80024ce <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <LL_ADC_IsEnabled>:
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <LL_ADC_IsEnabled+0x18>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <LL_ADC_IsEnabled+0x1a>
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <LL_ADC_StartCalibration>:
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003226:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003230:	4313      	orrs	r3, r2
 8003232:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	609a      	str	r2, [r3, #8]
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <LL_ADC_IsCalibrationOnGoing>:
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800325a:	d101      	bne.n	8003260 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800325c:	2301      	movs	r3, #1
 800325e:	e000      	b.n	8003262 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <LL_ADC_REG_IsConversionOngoing>:
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	2b04      	cmp	r3, #4
 8003280:	d101      	bne.n	8003286 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003282:	2301      	movs	r3, #1
 8003284:	e000      	b.n	8003288 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800329e:	2300      	movs	r3, #0
 80032a0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_ADCEx_Calibration_Start+0x1c>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e04d      	b.n	800334c <HAL_ADCEx_Calibration_Start+0xb8>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff fea5 	bl	8003008 <ADC_Disable>
 80032be:	4603      	mov	r3, r0
 80032c0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d136      	bne.n	8003336 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032d0:	f023 0302 	bic.w	r3, r3, #2
 80032d4:	f043 0202 	orr.w	r2, r3, #2
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6839      	ldr	r1, [r7, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff ff96 	bl	8003214 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80032e8:	e014      	b.n	8003314 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	3301      	adds	r3, #1
 80032ee:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4a18      	ldr	r2, [pc, #96]	; (8003354 <HAL_ADCEx_Calibration_Start+0xc0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d90d      	bls.n	8003314 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fc:	f023 0312 	bic.w	r3, r3, #18
 8003300:	f043 0210 	orr.w	r2, r3, #16
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e01b      	b.n	800334c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff ff94 	bl	8003246 <LL_ADC_IsCalibrationOnGoing>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1e2      	bne.n	80032ea <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003328:	f023 0303 	bic.w	r3, r3, #3
 800332c:	f043 0201 	orr.w	r2, r3, #1
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	65da      	str	r2, [r3, #92]	; 0x5c
 8003334:	e005      	b.n	8003342 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	f043 0210 	orr.w	r2, r3, #16
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800334a:	7bfb      	ldrb	r3, [r7, #15]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	0004de01 	.word	0x0004de01

08003358 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003358:	b590      	push	{r4, r7, lr}
 800335a:	b0a1      	sub	sp, #132	; 0x84
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800336e:	2b01      	cmp	r3, #1
 8003370:	d101      	bne.n	8003376 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003372:	2302      	movs	r3, #2
 8003374:	e0e7      	b.n	8003546 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800337e:	2300      	movs	r3, #0
 8003380:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003382:	2300      	movs	r3, #0
 8003384:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800338e:	d102      	bne.n	8003396 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003390:	4b6f      	ldr	r3, [pc, #444]	; (8003550 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	e009      	b.n	80033aa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a6e      	ldr	r2, [pc, #440]	; (8003554 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d102      	bne.n	80033a6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80033a0:	4b6d      	ldr	r3, [pc, #436]	; (8003558 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	e001      	b.n	80033aa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80033a6:	2300      	movs	r3, #0
 80033a8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10b      	bne.n	80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b4:	f043 0220 	orr.w	r2, r3, #32
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0be      	b.n	8003546 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff ff4f 	bl	800326e <LL_ADC_REG_IsConversionOngoing>
 80033d0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff ff49 	bl	800326e <LL_ADC_REG_IsConversionOngoing>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f040 80a0 	bne.w	8003524 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80033e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f040 809c 	bne.w	8003524 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033f4:	d004      	beq.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a55      	ldr	r2, [pc, #340]	; (8003550 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d101      	bne.n	8003404 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003400:	4b56      	ldr	r3, [pc, #344]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003402:	e000      	b.n	8003406 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003404:	4b56      	ldr	r3, [pc, #344]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003406:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d04b      	beq.n	80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	6859      	ldr	r1, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003422:	035b      	lsls	r3, r3, #13
 8003424:	430b      	orrs	r3, r1
 8003426:	431a      	orrs	r2, r3
 8003428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800342a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003434:	d004      	beq.n	8003440 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a45      	ldr	r2, [pc, #276]	; (8003550 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d10f      	bne.n	8003460 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003440:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003444:	f7ff fed3 	bl	80031ee <LL_ADC_IsEnabled>
 8003448:	4604      	mov	r4, r0
 800344a:	4841      	ldr	r0, [pc, #260]	; (8003550 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800344c:	f7ff fecf 	bl	80031ee <LL_ADC_IsEnabled>
 8003450:	4603      	mov	r3, r0
 8003452:	4323      	orrs	r3, r4
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e012      	b.n	8003486 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003460:	483c      	ldr	r0, [pc, #240]	; (8003554 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003462:	f7ff fec4 	bl	80031ee <LL_ADC_IsEnabled>
 8003466:	4604      	mov	r4, r0
 8003468:	483b      	ldr	r0, [pc, #236]	; (8003558 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800346a:	f7ff fec0 	bl	80031ee <LL_ADC_IsEnabled>
 800346e:	4603      	mov	r3, r0
 8003470:	431c      	orrs	r4, r3
 8003472:	483c      	ldr	r0, [pc, #240]	; (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003474:	f7ff febb 	bl	80031ee <LL_ADC_IsEnabled>
 8003478:	4603      	mov	r3, r0
 800347a:	4323      	orrs	r3, r4
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d056      	beq.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800348a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003492:	f023 030f 	bic.w	r3, r3, #15
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	6811      	ldr	r1, [r2, #0]
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	6892      	ldr	r2, [r2, #8]
 800349e:	430a      	orrs	r2, r1
 80034a0:	431a      	orrs	r2, r3
 80034a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034a4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034a6:	e047      	b.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80034a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034bc:	d004      	beq.n	80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a23      	ldr	r2, [pc, #140]	; (8003550 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d10f      	bne.n	80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80034c8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80034cc:	f7ff fe8f 	bl	80031ee <LL_ADC_IsEnabled>
 80034d0:	4604      	mov	r4, r0
 80034d2:	481f      	ldr	r0, [pc, #124]	; (8003550 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034d4:	f7ff fe8b 	bl	80031ee <LL_ADC_IsEnabled>
 80034d8:	4603      	mov	r3, r0
 80034da:	4323      	orrs	r3, r4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf0c      	ite	eq
 80034e0:	2301      	moveq	r3, #1
 80034e2:	2300      	movne	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	e012      	b.n	800350e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80034e8:	481a      	ldr	r0, [pc, #104]	; (8003554 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80034ea:	f7ff fe80 	bl	80031ee <LL_ADC_IsEnabled>
 80034ee:	4604      	mov	r4, r0
 80034f0:	4819      	ldr	r0, [pc, #100]	; (8003558 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80034f2:	f7ff fe7c 	bl	80031ee <LL_ADC_IsEnabled>
 80034f6:	4603      	mov	r3, r0
 80034f8:	431c      	orrs	r4, r3
 80034fa:	481a      	ldr	r0, [pc, #104]	; (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80034fc:	f7ff fe77 	bl	80031ee <LL_ADC_IsEnabled>
 8003500:	4603      	mov	r3, r0
 8003502:	4323      	orrs	r3, r4
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf0c      	ite	eq
 8003508:	2301      	moveq	r3, #1
 800350a:	2300      	movne	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d012      	beq.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800351a:	f023 030f 	bic.w	r3, r3, #15
 800351e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003520:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003522:	e009      	b.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003528:	f043 0220 	orr.w	r2, r3, #32
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003536:	e000      	b.n	800353a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003538:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003542:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003546:	4618      	mov	r0, r3
 8003548:	3784      	adds	r7, #132	; 0x84
 800354a:	46bd      	mov	sp, r7
 800354c:	bd90      	pop	{r4, r7, pc}
 800354e:	bf00      	nop
 8003550:	50000100 	.word	0x50000100
 8003554:	50000400 	.word	0x50000400
 8003558:	50000500 	.word	0x50000500
 800355c:	50000300 	.word	0x50000300
 8003560:	50000700 	.word	0x50000700
 8003564:	50000600 	.word	0x50000600

08003568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <__NVIC_SetPriorityGrouping+0x44>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003584:	4013      	ands	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800359a:	4a04      	ldr	r2, [pc, #16]	; (80035ac <__NVIC_SetPriorityGrouping+0x44>)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	60d3      	str	r3, [r2, #12]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b4:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <__NVIC_GetPriorityGrouping+0x18>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	0a1b      	lsrs	r3, r3, #8
 80035ba:	f003 0307 	and.w	r3, r3, #7
}
 80035be:	4618      	mov	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	db0b      	blt.n	80035f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	f003 021f 	and.w	r2, r3, #31
 80035e4:	4907      	ldr	r1, [pc, #28]	; (8003604 <__NVIC_EnableIRQ+0x38>)
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	2001      	movs	r0, #1
 80035ee:	fa00 f202 	lsl.w	r2, r0, r2
 80035f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	e000e100 	.word	0xe000e100

08003608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	6039      	str	r1, [r7, #0]
 8003612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003618:	2b00      	cmp	r3, #0
 800361a:	db0a      	blt.n	8003632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	b2da      	uxtb	r2, r3
 8003620:	490c      	ldr	r1, [pc, #48]	; (8003654 <__NVIC_SetPriority+0x4c>)
 8003622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003626:	0112      	lsls	r2, r2, #4
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	440b      	add	r3, r1
 800362c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003630:	e00a      	b.n	8003648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	b2da      	uxtb	r2, r3
 8003636:	4908      	ldr	r1, [pc, #32]	; (8003658 <__NVIC_SetPriority+0x50>)
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	3b04      	subs	r3, #4
 8003640:	0112      	lsls	r2, r2, #4
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	440b      	add	r3, r1
 8003646:	761a      	strb	r2, [r3, #24]
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	e000e100 	.word	0xe000e100
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800365c:	b480      	push	{r7}
 800365e:	b089      	sub	sp, #36	; 0x24
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f1c3 0307 	rsb	r3, r3, #7
 8003676:	2b04      	cmp	r3, #4
 8003678:	bf28      	it	cs
 800367a:	2304      	movcs	r3, #4
 800367c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3304      	adds	r3, #4
 8003682:	2b06      	cmp	r3, #6
 8003684:	d902      	bls.n	800368c <NVIC_EncodePriority+0x30>
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	3b03      	subs	r3, #3
 800368a:	e000      	b.n	800368e <NVIC_EncodePriority+0x32>
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003690:	f04f 32ff 	mov.w	r2, #4294967295
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43da      	mvns	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	401a      	ands	r2, r3
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036a4:	f04f 31ff 	mov.w	r1, #4294967295
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	fa01 f303 	lsl.w	r3, r1, r3
 80036ae:	43d9      	mvns	r1, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b4:	4313      	orrs	r3, r2
         );
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3724      	adds	r7, #36	; 0x24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
	...

080036c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036d4:	d301      	bcc.n	80036da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036d6:	2301      	movs	r3, #1
 80036d8:	e00f      	b.n	80036fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036da:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <SysTick_Config+0x40>)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3b01      	subs	r3, #1
 80036e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036e2:	210f      	movs	r1, #15
 80036e4:	f04f 30ff 	mov.w	r0, #4294967295
 80036e8:	f7ff ff8e 	bl	8003608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036ec:	4b05      	ldr	r3, [pc, #20]	; (8003704 <SysTick_Config+0x40>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036f2:	4b04      	ldr	r3, [pc, #16]	; (8003704 <SysTick_Config+0x40>)
 80036f4:	2207      	movs	r2, #7
 80036f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	e000e010 	.word	0xe000e010

08003708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff ff29 	bl	8003568 <__NVIC_SetPriorityGrouping>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b086      	sub	sp, #24
 8003722:	af00      	add	r7, sp, #0
 8003724:	4603      	mov	r3, r0
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
 800372a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800372c:	f7ff ff40 	bl	80035b0 <__NVIC_GetPriorityGrouping>
 8003730:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	6978      	ldr	r0, [r7, #20]
 8003738:	f7ff ff90 	bl	800365c <NVIC_EncodePriority>
 800373c:	4602      	mov	r2, r0
 800373e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003742:	4611      	mov	r1, r2
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff ff5f 	bl	8003608 <__NVIC_SetPriority>
}
 800374a:	bf00      	nop
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	4603      	mov	r3, r0
 800375a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800375c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff ff33 	bl	80035cc <__NVIC_EnableIRQ>
}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff ffa4 	bl	80036c4 <SysTick_Config>
 800377c:	4603      	mov	r3, r0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b082      	sub	sp, #8
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e014      	b.n	80037c2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	791b      	ldrb	r3, [r3, #4]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d105      	bne.n	80037ae <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7fd fe57 	bl	800145c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2202      	movs	r2, #2
 80037b2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	; 0x28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <HAL_DAC_ConfigChannel+0x1c>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e19e      	b.n	8003b2a <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	795b      	ldrb	r3, [r3, #5]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_DAC_ConfigChannel+0x2c>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e198      	b.n	8003b2a <HAL_DAC_ConfigChannel+0x35e>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2202      	movs	r2, #2
 8003802:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b04      	cmp	r3, #4
 800380a:	d17a      	bne.n	8003902 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800380c:	f7fe f8aa 	bl	8001964 <HAL_GetTick>
 8003810:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d13d      	bne.n	8003894 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003818:	e018      	b.n	800384c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800381a:	f7fe f8a3 	bl	8001964 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	d911      	bls.n	800384c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f043 0208 	orr.w	r2, r3, #8
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2203      	movs	r2, #3
 8003846:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e16e      	b.n	8003b2a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003852:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1df      	bne.n	800381a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003862:	641a      	str	r2, [r3, #64]	; 0x40
 8003864:	e020      	b.n	80038a8 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003866:	f7fe f87d 	bl	8001964 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b01      	cmp	r3, #1
 8003872:	d90f      	bls.n	8003894 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387a:	2b00      	cmp	r3, #0
 800387c:	da0a      	bge.n	8003894 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f043 0208 	orr.w	r2, r3, #8
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2203      	movs	r2, #3
 800388e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e14a      	b.n	8003b2a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389a:	2b00      	cmp	r3, #0
 800389c:	dbe3      	blt.n	8003866 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038a6:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80038b8:	fa01 f303 	lsl.w	r3, r1, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	ea02 0103 	and.w	r1, r2, r3
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	409a      	lsls	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	21ff      	movs	r1, #255	; 0xff
 80038e4:	fa01 f303 	lsl.w	r3, r1, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	ea02 0103 	and.w	r1, r2, r3
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	409a      	lsls	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d11d      	bne.n	8003946 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	221f      	movs	r2, #31
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	43db      	mvns	r3, r3
 8003920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003922:	4013      	ands	r3, r2
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393a:	4313      	orrs	r3, r2
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003944:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f003 0310 	and.w	r3, r3, #16
 8003954:	2207      	movs	r2, #7
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43db      	mvns	r3, r3
 800395c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395e:	4013      	ands	r3, r2
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d102      	bne.n	8003970 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800396a:	2300      	movs	r3, #0
 800396c:	623b      	str	r3, [r7, #32]
 800396e:	e00f      	b.n	8003990 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	2b02      	cmp	r3, #2
 8003976:	d102      	bne.n	800397e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003978:	2301      	movs	r3, #1
 800397a:	623b      	str	r3, [r7, #32]
 800397c:	e008      	b.n	8003990 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d102      	bne.n	800398c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003986:	2301      	movs	r3, #1
 8003988:	623b      	str	r3, [r7, #32]
 800398a:	e001      	b.n	8003990 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800398c:	2300      	movs	r3, #0
 800398e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	4313      	orrs	r3, r2
 800399a:	6a3a      	ldr	r2, [r7, #32]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b2:	4013      	ands	r3, r2
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	791b      	ldrb	r3, [r3, #4]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d102      	bne.n	80039c4 <HAL_DAC_ConfigChannel+0x1f8>
 80039be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039c2:	e000      	b.n	80039c6 <HAL_DAC_ConfigChannel+0x1fa>
 80039c4:	2300      	movs	r3, #0
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039de:	4013      	ands	r3, r2
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	795b      	ldrb	r3, [r3, #5]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d102      	bne.n	80039f0 <HAL_DAC_ConfigChannel+0x224>
 80039ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039ee:	e000      	b.n	80039f2 <HAL_DAC_ConfigChannel+0x226>
 80039f0:	2300      	movs	r3, #0
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d114      	bne.n	8003a32 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003a08:	f003 f8e2 	bl	8006bd0 <HAL_RCC_GetHCLKFreq>
 8003a0c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	4a48      	ldr	r2, [pc, #288]	; (8003b34 <HAL_DAC_ConfigChannel+0x368>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d904      	bls.n	8003a20 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1e:	e00f      	b.n	8003a40 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4a45      	ldr	r2, [pc, #276]	; (8003b38 <HAL_DAC_ConfigChannel+0x36c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d90a      	bls.n	8003a3e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a30:	e006      	b.n	8003a40 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3c:	e000      	b.n	8003a40 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003a3e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f003 0310 	and.w	r3, r3, #16
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6819      	ldr	r1, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43da      	mvns	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	400a      	ands	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f003 0310 	and.w	r3, r3, #16
 8003a86:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a92:	4013      	ands	r3, r2
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f003 0310 	and.w	r3, r3, #16
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6819      	ldr	r1, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	22c0      	movs	r2, #192	; 0xc0
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43da      	mvns	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	400a      	ands	r2, r1
 8003ad0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	089b      	lsrs	r3, r3, #2
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	089b      	lsrs	r3, r3, #2
 8003ae4:	021b      	lsls	r3, r3, #8
 8003ae6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003b00:	fa01 f303 	lsl.w	r3, r1, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	ea02 0103 	and.w	r1, r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f003 0310 	and.w	r3, r3, #16
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	409a      	lsls	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003b28:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3728      	adds	r7, #40	; 0x28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	09896800 	.word	0x09896800
 8003b38:	04c4b400 	.word	0x04c4b400

08003b3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e08d      	b.n	8003c6a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	4b47      	ldr	r3, [pc, #284]	; (8003c74 <HAL_DMA_Init+0x138>)
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d80f      	bhi.n	8003b7a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	4b45      	ldr	r3, [pc, #276]	; (8003c78 <HAL_DMA_Init+0x13c>)
 8003b62:	4413      	add	r3, r2
 8003b64:	4a45      	ldr	r2, [pc, #276]	; (8003c7c <HAL_DMA_Init+0x140>)
 8003b66:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6a:	091b      	lsrs	r3, r3, #4
 8003b6c:	009a      	lsls	r2, r3, #2
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a42      	ldr	r2, [pc, #264]	; (8003c80 <HAL_DMA_Init+0x144>)
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40
 8003b78:	e00e      	b.n	8003b98 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	4b40      	ldr	r3, [pc, #256]	; (8003c84 <HAL_DMA_Init+0x148>)
 8003b82:	4413      	add	r3, r2
 8003b84:	4a3d      	ldr	r2, [pc, #244]	; (8003c7c <HAL_DMA_Init+0x140>)
 8003b86:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8a:	091b      	lsrs	r3, r3, #4
 8003b8c:	009a      	lsls	r2, r3, #2
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a3c      	ldr	r2, [pc, #240]	; (8003c88 <HAL_DMA_Init+0x14c>)
 8003b96:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003bbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fa10 	bl	8004010 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bf8:	d102      	bne.n	8003c00 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c14:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d010      	beq.n	8003c40 <HAL_DMA_Init+0x104>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d80c      	bhi.n	8003c40 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 fa30 	bl	800408c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c3c:	605a      	str	r2, [r3, #4]
 8003c3e:	e008      	b.n	8003c52 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40020407 	.word	0x40020407
 8003c78:	bffdfff8 	.word	0xbffdfff8
 8003c7c:	cccccccd 	.word	0xcccccccd
 8003c80:	40020000 	.word	0x40020000
 8003c84:	bffdfbf8 	.word	0xbffdfbf8
 8003c88:	40020400 	.word	0x40020400

08003c8c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
 8003c98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_DMA_Start_IT+0x20>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e066      	b.n	8003d7a <HAL_DMA_Start_IT+0xee>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d155      	bne.n	8003d6c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0201 	bic.w	r2, r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	68b9      	ldr	r1, [r7, #8]
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 f954 	bl	8003f92 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d008      	beq.n	8003d04 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 020e 	orr.w	r2, r2, #14
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	e00f      	b.n	8003d24 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0204 	bic.w	r2, r2, #4
 8003d12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 020a 	orr.w	r2, r2, #10
 8003d22:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d007      	beq.n	8003d42 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d40:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d007      	beq.n	8003d5a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d58:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 0201 	orr.w	r2, r2, #1
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	e005      	b.n	8003d78 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d74:	2302      	movs	r3, #2
 8003d76:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b085      	sub	sp, #20
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d005      	beq.n	8003da6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2204      	movs	r2, #4
 8003d9e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
 8003da4:	e037      	b.n	8003e16 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 020e 	bic.w	r2, r2, #14
 8003db4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dc4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0201 	bic.w	r2, r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	f003 021f 	and.w	r2, r3, #31
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	2101      	movs	r1, #1
 8003de4:	fa01 f202 	lsl.w	r2, r1, r2
 8003de8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003df2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00c      	beq.n	8003e16 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e0a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e14:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	f003 031f 	and.w	r3, r3, #31
 8003e54:	2204      	movs	r2, #4
 8003e56:	409a      	lsls	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d026      	beq.n	8003eae <HAL_DMA_IRQHandler+0x7a>
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d021      	beq.n	8003eae <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0320 	and.w	r3, r3, #32
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d107      	bne.n	8003e88 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0204 	bic.w	r2, r2, #4
 8003e86:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8c:	f003 021f 	and.w	r2, r3, #31
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	2104      	movs	r1, #4
 8003e96:	fa01 f202 	lsl.w	r2, r1, r2
 8003e9a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d071      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003eac:	e06c      	b.n	8003f88 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	f003 031f 	and.w	r3, r3, #31
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	409a      	lsls	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d02e      	beq.n	8003f20 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d029      	beq.n	8003f20 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10b      	bne.n	8003ef2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 020a 	bic.w	r2, r2, #10
 8003ee8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	f003 021f 	and.w	r2, r3, #31
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	2102      	movs	r1, #2
 8003f00:	fa01 f202 	lsl.w	r2, r1, r2
 8003f04:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d038      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003f1e:	e033      	b.n	8003f88 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f24:	f003 031f 	and.w	r3, r3, #31
 8003f28:	2208      	movs	r2, #8
 8003f2a:	409a      	lsls	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d02a      	beq.n	8003f8a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d025      	beq.n	8003f8a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 020e 	bic.w	r2, r2, #14
 8003f4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f52:	f003 021f 	and.w	r2, r3, #31
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f60:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d004      	beq.n	8003f8a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003f88:	bf00      	nop
 8003f8a:	bf00      	nop
}
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b085      	sub	sp, #20
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	607a      	str	r2, [r7, #4]
 8003f9e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003fa8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d004      	beq.n	8003fbc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003fba:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc0:	f003 021f 	and.w	r2, r3, #31
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	2101      	movs	r1, #1
 8003fca:	fa01 f202 	lsl.w	r2, r1, r2
 8003fce:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b10      	cmp	r3, #16
 8003fde:	d108      	bne.n	8003ff2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ff0:	e007      	b.n	8004002 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	60da      	str	r2, [r3, #12]
}
 8004002:	bf00      	nop
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
	...

08004010 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004010:	b480      	push	{r7}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	4b16      	ldr	r3, [pc, #88]	; (8004078 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004020:	429a      	cmp	r2, r3
 8004022:	d802      	bhi.n	800402a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004024:	4b15      	ldr	r3, [pc, #84]	; (800407c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	e001      	b.n	800402e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800402a:	4b15      	ldr	r3, [pc, #84]	; (8004080 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800402c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	3b08      	subs	r3, #8
 800403a:	4a12      	ldr	r2, [pc, #72]	; (8004084 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800403c:	fba2 2303 	umull	r2, r3, r2, r3
 8004040:	091b      	lsrs	r3, r3, #4
 8004042:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004048:	089b      	lsrs	r3, r3, #2
 800404a:	009a      	lsls	r2, r3, #2
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	4413      	add	r3, r2
 8004050:	461a      	mov	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a0b      	ldr	r2, [pc, #44]	; (8004088 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800405a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 031f 	and.w	r3, r3, #31
 8004062:	2201      	movs	r2, #1
 8004064:	409a      	lsls	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	651a      	str	r2, [r3, #80]	; 0x50
}
 800406a:	bf00      	nop
 800406c:	371c      	adds	r7, #28
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40020407 	.word	0x40020407
 800407c:	40020800 	.word	0x40020800
 8004080:	40020820 	.word	0x40020820
 8004084:	cccccccd 	.word	0xcccccccd
 8004088:	40020880 	.word	0x40020880

0800408c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	461a      	mov	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a08      	ldr	r2, [pc, #32]	; (80040d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80040ae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	f003 031f 	and.w	r3, r3, #31
 80040b8:	2201      	movs	r2, #1
 80040ba:	409a      	lsls	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80040c0:	bf00      	nop
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	1000823f 	.word	0x1000823f
 80040d0:	40020940 	.word	0x40020940

080040d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040de:	2300      	movs	r3, #0
 80040e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80040e2:	e15a      	b.n	800439a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	2101      	movs	r1, #1
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	fa01 f303 	lsl.w	r3, r1, r3
 80040f0:	4013      	ands	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 814c 	beq.w	8004394 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	2b01      	cmp	r3, #1
 8004106:	d005      	beq.n	8004114 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004110:	2b02      	cmp	r3, #2
 8004112:	d130      	bne.n	8004176 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	2203      	movs	r2, #3
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	4013      	ands	r3, r2
 800412a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800414a:	2201      	movs	r2, #1
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43db      	mvns	r3, r3
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4013      	ands	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	091b      	lsrs	r3, r3, #4
 8004160:	f003 0201 	and.w	r2, r3, #1
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	2b03      	cmp	r3, #3
 8004180:	d017      	beq.n	80041b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	2203      	movs	r2, #3
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	43db      	mvns	r3, r3
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4013      	ands	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d123      	bne.n	8004206 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	08da      	lsrs	r2, r3, #3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3208      	adds	r2, #8
 80041c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	220f      	movs	r2, #15
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	43db      	mvns	r3, r3
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4013      	ands	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	691a      	ldr	r2, [r3, #16]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	fa02 f303 	lsl.w	r3, r2, r3
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	08da      	lsrs	r2, r3, #3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3208      	adds	r2, #8
 8004200:	6939      	ldr	r1, [r7, #16]
 8004202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	2203      	movs	r2, #3
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4013      	ands	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f003 0203 	and.w	r2, r3, #3
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	4313      	orrs	r3, r2
 8004232:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 80a6 	beq.w	8004394 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004248:	4b5b      	ldr	r3, [pc, #364]	; (80043b8 <HAL_GPIO_Init+0x2e4>)
 800424a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800424c:	4a5a      	ldr	r2, [pc, #360]	; (80043b8 <HAL_GPIO_Init+0x2e4>)
 800424e:	f043 0301 	orr.w	r3, r3, #1
 8004252:	6613      	str	r3, [r2, #96]	; 0x60
 8004254:	4b58      	ldr	r3, [pc, #352]	; (80043b8 <HAL_GPIO_Init+0x2e4>)
 8004256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004260:	4a56      	ldr	r2, [pc, #344]	; (80043bc <HAL_GPIO_Init+0x2e8>)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	089b      	lsrs	r3, r3, #2
 8004266:	3302      	adds	r3, #2
 8004268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800426c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f003 0303 	and.w	r3, r3, #3
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	220f      	movs	r2, #15
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	43db      	mvns	r3, r3
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	4013      	ands	r3, r2
 8004282:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800428a:	d01f      	beq.n	80042cc <HAL_GPIO_Init+0x1f8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a4c      	ldr	r2, [pc, #304]	; (80043c0 <HAL_GPIO_Init+0x2ec>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d019      	beq.n	80042c8 <HAL_GPIO_Init+0x1f4>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a4b      	ldr	r2, [pc, #300]	; (80043c4 <HAL_GPIO_Init+0x2f0>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d013      	beq.n	80042c4 <HAL_GPIO_Init+0x1f0>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a4a      	ldr	r2, [pc, #296]	; (80043c8 <HAL_GPIO_Init+0x2f4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00d      	beq.n	80042c0 <HAL_GPIO_Init+0x1ec>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a49      	ldr	r2, [pc, #292]	; (80043cc <HAL_GPIO_Init+0x2f8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d007      	beq.n	80042bc <HAL_GPIO_Init+0x1e8>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a48      	ldr	r2, [pc, #288]	; (80043d0 <HAL_GPIO_Init+0x2fc>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d101      	bne.n	80042b8 <HAL_GPIO_Init+0x1e4>
 80042b4:	2305      	movs	r3, #5
 80042b6:	e00a      	b.n	80042ce <HAL_GPIO_Init+0x1fa>
 80042b8:	2306      	movs	r3, #6
 80042ba:	e008      	b.n	80042ce <HAL_GPIO_Init+0x1fa>
 80042bc:	2304      	movs	r3, #4
 80042be:	e006      	b.n	80042ce <HAL_GPIO_Init+0x1fa>
 80042c0:	2303      	movs	r3, #3
 80042c2:	e004      	b.n	80042ce <HAL_GPIO_Init+0x1fa>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e002      	b.n	80042ce <HAL_GPIO_Init+0x1fa>
 80042c8:	2301      	movs	r3, #1
 80042ca:	e000      	b.n	80042ce <HAL_GPIO_Init+0x1fa>
 80042cc:	2300      	movs	r3, #0
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	f002 0203 	and.w	r2, r2, #3
 80042d4:	0092      	lsls	r2, r2, #2
 80042d6:	4093      	lsls	r3, r2
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042de:	4937      	ldr	r1, [pc, #220]	; (80043bc <HAL_GPIO_Init+0x2e8>)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	089b      	lsrs	r3, r3, #2
 80042e4:	3302      	adds	r3, #2
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042ec:	4b39      	ldr	r3, [pc, #228]	; (80043d4 <HAL_GPIO_Init+0x300>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	43db      	mvns	r3, r3
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4013      	ands	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4313      	orrs	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004310:	4a30      	ldr	r2, [pc, #192]	; (80043d4 <HAL_GPIO_Init+0x300>)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004316:	4b2f      	ldr	r3, [pc, #188]	; (80043d4 <HAL_GPIO_Init+0x300>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	43db      	mvns	r3, r3
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4013      	ands	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800433a:	4a26      	ldr	r2, [pc, #152]	; (80043d4 <HAL_GPIO_Init+0x300>)
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004340:	4b24      	ldr	r3, [pc, #144]	; (80043d4 <HAL_GPIO_Init+0x300>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	43db      	mvns	r3, r3
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4013      	ands	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004364:	4a1b      	ldr	r2, [pc, #108]	; (80043d4 <HAL_GPIO_Init+0x300>)
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800436a:	4b1a      	ldr	r3, [pc, #104]	; (80043d4 <HAL_GPIO_Init+0x300>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	43db      	mvns	r3, r3
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4013      	ands	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800438e:	4a11      	ldr	r2, [pc, #68]	; (80043d4 <HAL_GPIO_Init+0x300>)
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	3301      	adds	r3, #1
 8004398:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	fa22 f303 	lsr.w	r3, r2, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f47f ae9d 	bne.w	80040e4 <HAL_GPIO_Init+0x10>
  }
}
 80043aa:	bf00      	nop
 80043ac:	bf00      	nop
 80043ae:	371c      	adds	r7, #28
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	40021000 	.word	0x40021000
 80043bc:	40010000 	.word	0x40010000
 80043c0:	48000400 	.word	0x48000400
 80043c4:	48000800 	.word	0x48000800
 80043c8:	48000c00 	.word	0x48000c00
 80043cc:	48001000 	.word	0x48001000
 80043d0:	48001400 	.word	0x48001400
 80043d4:	40010400 	.word	0x40010400

080043d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	807b      	strh	r3, [r7, #2]
 80043e4:	4613      	mov	r3, r2
 80043e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043e8:	787b      	ldrb	r3, [r7, #1]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043ee:	887a      	ldrh	r2, [r7, #2]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043f4:	e002      	b.n	80043fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043f6:	887a      	ldrh	r2, [r7, #2]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800441a:	887a      	ldrh	r2, [r7, #2]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4013      	ands	r3, r2
 8004420:	041a      	lsls	r2, r3, #16
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	43d9      	mvns	r1, r3
 8004426:	887b      	ldrh	r3, [r7, #2]
 8004428:	400b      	ands	r3, r1
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	619a      	str	r2, [r3, #24]
}
 8004430:	bf00      	nop
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e08d      	b.n	800456a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d106      	bne.n	8004468 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fd f838 	bl	80014d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2224      	movs	r2, #36	; 0x24
 800446c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0201 	bic.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800448c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800449c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d107      	bne.n	80044b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044b2:	609a      	str	r2, [r3, #8]
 80044b4:	e006      	b.n	80044c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689a      	ldr	r2, [r3, #8]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80044c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d108      	bne.n	80044de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044da:	605a      	str	r2, [r3, #4]
 80044dc:	e007      	b.n	80044ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6812      	ldr	r2, [r2, #0]
 80044f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004500:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004510:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69d9      	ldr	r1, [r3, #28]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a1a      	ldr	r2, [r3, #32]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0201 	orr.w	r2, r2, #1
 800454a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2220      	movs	r2, #32
 8004556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b20      	cmp	r3, #32
 8004586:	d138      	bne.n	80045fa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004592:	2302      	movs	r3, #2
 8004594:	e032      	b.n	80045fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2224      	movs	r2, #36	; 0x24
 80045a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0201 	bic.w	r2, r2, #1
 80045b4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045c4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6819      	ldr	r1, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f042 0201 	orr.w	r2, r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	e000      	b.n	80045fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045fa:	2302      	movs	r3, #2
  }
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b20      	cmp	r3, #32
 800461c:	d139      	bne.n	8004692 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004628:	2302      	movs	r3, #2
 800462a:	e033      	b.n	8004694 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2224      	movs	r2, #36	; 0x24
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0201 	bic.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800465a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	021b      	lsls	r3, r3, #8
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0201 	orr.w	r2, r2, #1
 800467c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2220      	movs	r2, #32
 8004682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	e000      	b.n	8004694 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004692:	2302      	movs	r3, #2
  }
}
 8004694:	4618      	mov	r0, r3
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e0c0      	b.n	8004834 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d106      	bne.n	80046cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f007 fc6e 	bl	800bfa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2203      	movs	r2, #3
 80046d0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f003 faf2 	bl	8007cc2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046de:	2300      	movs	r3, #0
 80046e0:	73fb      	strb	r3, [r7, #15]
 80046e2:	e03e      	b.n	8004762 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046e4:	7bfa      	ldrb	r2, [r7, #15]
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	4613      	mov	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	440b      	add	r3, r1
 80046f2:	3311      	adds	r3, #17
 80046f4:	2201      	movs	r2, #1
 80046f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046f8:	7bfa      	ldrb	r2, [r7, #15]
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	4613      	mov	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	440b      	add	r3, r1
 8004706:	3310      	adds	r3, #16
 8004708:	7bfa      	ldrb	r2, [r7, #15]
 800470a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800470c:	7bfa      	ldrb	r2, [r7, #15]
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	440b      	add	r3, r1
 800471a:	3313      	adds	r3, #19
 800471c:	2200      	movs	r2, #0
 800471e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004720:	7bfa      	ldrb	r2, [r7, #15]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	440b      	add	r3, r1
 800472e:	3320      	adds	r3, #32
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004734:	7bfa      	ldrb	r2, [r7, #15]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	440b      	add	r3, r1
 8004742:	3324      	adds	r3, #36	; 0x24
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004748:	7bfb      	ldrb	r3, [r7, #15]
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	4613      	mov	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	440b      	add	r3, r1
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	3301      	adds	r3, #1
 8004760:	73fb      	strb	r3, [r7, #15]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	791b      	ldrb	r3, [r3, #4]
 8004766:	7bfa      	ldrb	r2, [r7, #15]
 8004768:	429a      	cmp	r2, r3
 800476a:	d3bb      	bcc.n	80046e4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800476c:	2300      	movs	r3, #0
 800476e:	73fb      	strb	r3, [r7, #15]
 8004770:	e044      	b.n	80047fc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004772:	7bfa      	ldrb	r2, [r7, #15]
 8004774:	6879      	ldr	r1, [r7, #4]
 8004776:	4613      	mov	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	440b      	add	r3, r1
 8004780:	f203 1351 	addw	r3, r3, #337	; 0x151
 8004784:	2200      	movs	r2, #0
 8004786:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004788:	7bfa      	ldrb	r2, [r7, #15]
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	4613      	mov	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	440b      	add	r3, r1
 8004796:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800479a:	7bfa      	ldrb	r2, [r7, #15]
 800479c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800479e:	7bfa      	ldrb	r2, [r7, #15]
 80047a0:	6879      	ldr	r1, [r7, #4]
 80047a2:	4613      	mov	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	440b      	add	r3, r1
 80047ac:	f203 1353 	addw	r3, r3, #339	; 0x153
 80047b0:	2200      	movs	r2, #0
 80047b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047b4:	7bfa      	ldrb	r2, [r7, #15]
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	440b      	add	r3, r1
 80047c2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047ca:	7bfa      	ldrb	r2, [r7, #15]
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	440b      	add	r3, r1
 80047d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047e0:	7bfa      	ldrb	r2, [r7, #15]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	440b      	add	r3, r1
 80047ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
 80047f8:	3301      	adds	r3, #1
 80047fa:	73fb      	strb	r3, [r7, #15]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	791b      	ldrb	r3, [r3, #4]
 8004800:	7bfa      	ldrb	r2, [r7, #15]
 8004802:	429a      	cmp	r2, r3
 8004804:	d3b5      	bcc.n	8004772 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6818      	ldr	r0, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3304      	adds	r3, #4
 800480e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004812:	f003 fa71 	bl	8007cf8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	7a9b      	ldrb	r3, [r3, #10]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d102      	bne.n	8004832 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f001 fc41 	bl	80060b4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800484a:	2b01      	cmp	r3, #1
 800484c:	d101      	bne.n	8004852 <HAL_PCD_Start+0x16>
 800484e:	2302      	movs	r3, #2
 8004850:	e012      	b.n	8004878 <HAL_PCD_Start+0x3c>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f003 fa18 	bl	8007c94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f005 fcd8 	bl	800a21e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f005 fcdd 	bl	800a24c <USB_ReadInterrupts>
 8004892:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 fb04 	bl	8004eac <PCD_EP_ISR_Handler>

    return;
 80048a4:	e110      	b.n	8004ac8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d013      	beq.n	80048d8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c2:	b292      	uxth	r2, r2
 80048c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f007 fc06 	bl	800c0da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80048ce:	2100      	movs	r1, #0
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f8fc 	bl	8004ace <HAL_PCD_SetAddress>

    return;
 80048d6:	e0f7      	b.n	8004ac8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00c      	beq.n	80048fc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048f4:	b292      	uxth	r2, r2
 80048f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80048fa:	e0e5      	b.n	8004ac8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00c      	beq.n	8004920 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800490e:	b29a      	uxth	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004918:	b292      	uxth	r2, r2
 800491a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800491e:	e0d3      	b.n	8004ac8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d034      	beq.n	8004994 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004932:	b29a      	uxth	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0204 	bic.w	r2, r2, #4
 800493c:	b292      	uxth	r2, r2
 800493e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800494a:	b29a      	uxth	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0208 	bic.w	r2, r2, #8
 8004954:	b292      	uxth	r2, r2
 8004956:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8004960:	2b01      	cmp	r3, #1
 8004962:	d107      	bne.n	8004974 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800496c:	2100      	movs	r1, #0
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f007 fda6 	bl	800c4c0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f007 fbe9 	bl	800c14c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004982:	b29a      	uxth	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800498c:	b292      	uxth	r2, r2
 800498e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004992:	e099      	b.n	8004ac8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800499a:	2b00      	cmp	r3, #0
 800499c:	d027      	beq.n	80049ee <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0208 	orr.w	r2, r2, #8
 80049b0:	b292      	uxth	r2, r2
 80049b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049be:	b29a      	uxth	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049c8:	b292      	uxth	r2, r2
 80049ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0204 	orr.w	r2, r2, #4
 80049e0:	b292      	uxth	r2, r2
 80049e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f007 fb96 	bl	800c118 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80049ec:	e06c      	b.n	8004ac8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d040      	beq.n	8004a7a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a0a:	b292      	uxth	r2, r2
 8004a0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d12b      	bne.n	8004a72 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 0204 	orr.w	r2, r2, #4
 8004a2c:	b292      	uxth	r2, r2
 8004a2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0208 	orr.w	r2, r2, #8
 8004a44:	b292      	uxth	r2, r2
 8004a46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	089b      	lsrs	r3, r3, #2
 8004a5e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004a68:	2101      	movs	r1, #1
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f007 fd28 	bl	800c4c0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004a70:	e02a      	b.n	8004ac8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f007 fb50 	bl	800c118 <HAL_PCD_SuspendCallback>
    return;
 8004a78:	e026      	b.n	8004ac8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00f      	beq.n	8004aa4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a96:	b292      	uxth	r2, r2
 8004a98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f007 fb0e 	bl	800c0be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004aa2:	e011      	b.n	8004ac8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00c      	beq.n	8004ac8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ac0:	b292      	uxth	r2, r2
 8004ac2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004ac6:	bf00      	nop
  }
}
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b082      	sub	sp, #8
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_PCD_SetAddress+0x1a>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e012      	b.n	8004b0e <HAL_PCD_SetAddress+0x40>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	78fa      	ldrb	r2, [r7, #3]
 8004af4:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	78fa      	ldrb	r2, [r7, #3]
 8004afc:	4611      	mov	r1, r2
 8004afe:	4618      	mov	r0, r3
 8004b00:	f005 fb79 	bl	800a1f6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	4608      	mov	r0, r1
 8004b20:	4611      	mov	r1, r2
 8004b22:	461a      	mov	r2, r3
 8004b24:	4603      	mov	r3, r0
 8004b26:	70fb      	strb	r3, [r7, #3]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	803b      	strh	r3, [r7, #0]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	da0e      	bge.n	8004b5a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	f003 0207 	and.w	r2, r3, #7
 8004b42:	4613      	mov	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	3310      	adds	r3, #16
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	4413      	add	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2201      	movs	r2, #1
 8004b56:	705a      	strb	r2, [r3, #1]
 8004b58:	e00e      	b.n	8004b78 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	f003 0207 	and.w	r2, r3, #7
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	4413      	add	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b78:	78fb      	ldrb	r3, [r7, #3]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b84:	883a      	ldrh	r2, [r7, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	78ba      	ldrb	r2, [r7, #2]
 8004b8e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b90:	78bb      	ldrb	r3, [r7, #2]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d102      	bne.n	8004b9c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d101      	bne.n	8004baa <HAL_PCD_EP_Open+0x94>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e00e      	b.n	8004bc8 <HAL_PCD_EP_Open+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68f9      	ldr	r1, [r7, #12]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f003 f8bb 	bl	8007d34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8004bc6:	7afb      	ldrb	r3, [r7, #11]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	da0e      	bge.n	8004c02 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	f003 0207 	and.w	r2, r3, #7
 8004bea:	4613      	mov	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	3310      	adds	r3, #16
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	705a      	strb	r2, [r3, #1]
 8004c00:	e00e      	b.n	8004c20 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	f003 0207 	and.w	r2, r3, #7
 8004c08:	4613      	mov	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	4413      	add	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c20:	78fb      	ldrb	r3, [r7, #3]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_PCD_EP_Close+0x6a>
 8004c36:	2302      	movs	r3, #2
 8004c38:	e00e      	b.n	8004c58 <HAL_PCD_EP_Close+0x88>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68f9      	ldr	r1, [r7, #12]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f003 fc37 	bl	80084bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	607a      	str	r2, [r7, #4]
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c70:	7afb      	ldrb	r3, [r7, #11]
 8004c72:	f003 0207 	and.w	r2, r3, #7
 8004c76:	4613      	mov	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4413      	add	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	2200      	movs	r2, #0
 8004c98:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ca0:	7afb      	ldrb	r3, [r7, #11]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6979      	ldr	r1, [r7, #20]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f003 fdef 	bl	8008896 <USB_EPStartXfer>

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	460b      	mov	r3, r1
 8004ccc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004cce:	78fb      	ldrb	r3, [r7, #3]
 8004cd0:	f003 0207 	and.w	r2, r3, #7
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	00db      	lsls	r3, r3, #3
 8004cde:	440b      	add	r3, r1
 8004ce0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8004ce4:	681b      	ldr	r3, [r3, #0]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b086      	sub	sp, #24
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	603b      	str	r3, [r7, #0]
 8004cfe:	460b      	mov	r3, r1
 8004d00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d02:	7afb      	ldrb	r3, [r7, #11]
 8004d04:	f003 0207 	and.w	r2, r3, #7
 8004d08:	4613      	mov	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	3310      	adds	r3, #16
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	4413      	add	r3, r2
 8004d16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2200      	movs	r2, #0
 8004d36:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d3e:	7afb      	ldrb	r3, [r7, #11]
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6979      	ldr	r1, [r7, #20]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f003 fda0 	bl	8008896 <USB_EPStartXfer>

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3718      	adds	r7, #24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d6c:	78fb      	ldrb	r3, [r7, #3]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	7912      	ldrb	r2, [r2, #4]
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d901      	bls.n	8004d7e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e03e      	b.n	8004dfc <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	da0e      	bge.n	8004da4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d86:	78fb      	ldrb	r3, [r7, #3]
 8004d88:	f003 0207 	and.w	r2, r3, #7
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	3310      	adds	r3, #16
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	4413      	add	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	705a      	strb	r2, [r3, #1]
 8004da2:	e00c      	b.n	8004dbe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004da4:	78fa      	ldrb	r2, [r7, #3]
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	4413      	add	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d101      	bne.n	8004dde <HAL_PCD_EP_SetStall+0x7e>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	e00e      	b.n	8004dfc <HAL_PCD_EP_SetStall+0x9c>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68f9      	ldr	r1, [r7, #12]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f005 f903 	bl	8009ff8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	7912      	ldrb	r2, [r2, #4]
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d901      	bls.n	8004e22 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e040      	b.n	8004ea4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	da0e      	bge.n	8004e48 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e2a:	78fb      	ldrb	r3, [r7, #3]
 8004e2c:	f003 0207 	and.w	r2, r3, #7
 8004e30:	4613      	mov	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	3310      	adds	r3, #16
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2201      	movs	r2, #1
 8004e44:	705a      	strb	r2, [r3, #1]
 8004e46:	e00e      	b.n	8004e66 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	f003 0207 	and.w	r2, r3, #7
 8004e4e:	4613      	mov	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e6c:	78fb      	ldrb	r3, [r7, #3]
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d101      	bne.n	8004e86 <HAL_PCD_EP_ClrStall+0x82>
 8004e82:	2302      	movs	r3, #2
 8004e84:	e00e      	b.n	8004ea4 <HAL_PCD_EP_ClrStall+0xa0>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68f9      	ldr	r1, [r7, #12]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f005 f900 	bl	800a09a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b096      	sub	sp, #88	; 0x58
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004eb4:	e3ae      	b.n	8005614 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ebe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004ec2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8004ed0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f040 8170 	bne.w	80051ba <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004eda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d14d      	bne.n	8004f82 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef6:	81fb      	strh	r3, [r7, #14]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	89fb      	ldrh	r3, [r7, #14]
 8004efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3310      	adds	r3, #16
 8004f0e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	4413      	add	r3, r2
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6812      	ldr	r2, [r2, #0]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f36:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f3a:	695a      	ldr	r2, [r3, #20]
 8004f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	441a      	add	r2, r3
 8004f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f44:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004f46:	2100      	movs	r1, #0
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f007 f89e 	bl	800c08a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	7b1b      	ldrb	r3, [r3, #12]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 835d 	beq.w	8005614 <PCD_EP_ISR_Handler+0x768>
 8004f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f040 8358 	bne.w	8005614 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	7b1b      	ldrb	r3, [r3, #12]
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	b292      	uxth	r2, r2
 8004f76:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	731a      	strb	r2, [r3, #12]
 8004f80:	e348      	b.n	8005614 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004f88:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004f94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d032      	beq.n	8005006 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	461a      	mov	r2, r3
 8004fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	4413      	add	r3, r2
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fc6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8004fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fd4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fd8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	f005 f988 	bl	800a2f0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004fec:	4013      	ands	r3, r2
 8004fee:	823b      	strh	r3, [r7, #16]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	8a3a      	ldrh	r2, [r7, #16]
 8004ff6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ffa:	b292      	uxth	r2, r2
 8004ffc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f007 f816 	bl	800c030 <HAL_PCD_SetupStageCallback>
 8005004:	e306      	b.n	8005614 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005006:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800500a:	2b00      	cmp	r3, #0
 800500c:	f280 8302 	bge.w	8005614 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	b29a      	uxth	r2, r3
 8005018:	f640 738f 	movw	r3, #3983	; 0xf8f
 800501c:	4013      	ands	r3, r2
 800501e:	83fb      	strh	r3, [r7, #30]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	8bfa      	ldrh	r2, [r7, #30]
 8005026:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800502a:	b292      	uxth	r2, r2
 800502c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005036:	b29b      	uxth	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	4413      	add	r3, r2
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6812      	ldr	r2, [r2, #0]
 8005046:	4413      	add	r3, r2
 8005048:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005054:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d019      	beq.n	8005092 <PCD_EP_ISR_Handler+0x1e6>
 800505e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d015      	beq.n	8005092 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800506c:	6959      	ldr	r1, [r3, #20]
 800506e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005070:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005074:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005076:	b29b      	uxth	r3, r3
 8005078:	f005 f93a 	bl	800a2f0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800507c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800507e:	695a      	ldr	r2, [r3, #20]
 8005080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	441a      	add	r2, r3
 8005086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005088:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800508a:	2100      	movs	r1, #0
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f006 ffe1 	bl	800c054 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800509c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80050a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f040 82b5 	bne.w	8005614 <PCD_EP_ISR_Handler+0x768>
 80050aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80050ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80050b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050b6:	f000 82ad 	beq.w	8005614 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	61bb      	str	r3, [r7, #24]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	461a      	mov	r2, r3
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	4413      	add	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	b29b      	uxth	r3, r3
 80050e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	801a      	strh	r2, [r3, #0]
 80050ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b3e      	cmp	r3, #62	; 0x3e
 80050f0:	d91d      	bls.n	800512e <PCD_EP_ISR_Handler+0x282>
 80050f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	095b      	lsrs	r3, r3, #5
 80050f8:	647b      	str	r3, [r7, #68]	; 0x44
 80050fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f003 031f 	and.w	r3, r3, #31
 8005102:	2b00      	cmp	r3, #0
 8005104:	d102      	bne.n	800510c <PCD_EP_ISR_Handler+0x260>
 8005106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005108:	3b01      	subs	r3, #1
 800510a:	647b      	str	r3, [r7, #68]	; 0x44
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	b29a      	uxth	r2, r3
 8005112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005114:	b29b      	uxth	r3, r3
 8005116:	029b      	lsls	r3, r3, #10
 8005118:	b29b      	uxth	r3, r3
 800511a:	4313      	orrs	r3, r2
 800511c:	b29b      	uxth	r3, r3
 800511e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005126:	b29a      	uxth	r2, r3
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	801a      	strh	r2, [r3, #0]
 800512c:	e026      	b.n	800517c <PCD_EP_ISR_Handler+0x2d0>
 800512e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10a      	bne.n	800514c <PCD_EP_ISR_Handler+0x2a0>
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	b29b      	uxth	r3, r3
 800513c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005144:	b29a      	uxth	r2, r3
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	801a      	strh	r2, [r3, #0]
 800514a:	e017      	b.n	800517c <PCD_EP_ISR_Handler+0x2d0>
 800514c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	085b      	lsrs	r3, r3, #1
 8005152:	647b      	str	r3, [r7, #68]	; 0x44
 8005154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <PCD_EP_ISR_Handler+0x2ba>
 8005160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005162:	3301      	adds	r3, #1
 8005164:	647b      	str	r3, [r7, #68]	; 0x44
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b29a      	uxth	r2, r3
 800516c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800516e:	b29b      	uxth	r3, r3
 8005170:	029b      	lsls	r3, r3, #10
 8005172:	b29b      	uxth	r3, r3
 8005174:	4313      	orrs	r3, r2
 8005176:	b29a      	uxth	r2, r3
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	b29b      	uxth	r3, r3
 8005184:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518c:	827b      	strh	r3, [r7, #18]
 800518e:	8a7b      	ldrh	r3, [r7, #18]
 8005190:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005194:	827b      	strh	r3, [r7, #18]
 8005196:	8a7b      	ldrh	r3, [r7, #18]
 8005198:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800519c:	827b      	strh	r3, [r7, #18]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	8a7b      	ldrh	r3, [r7, #18]
 80051a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	8013      	strh	r3, [r2, #0]
 80051b8:	e22c      	b.n	8005614 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	461a      	mov	r2, r3
 80051c0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80051ce:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f280 80f6 	bge.w	80053c4 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	461a      	mov	r2, r3
 80051de:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	f640 738f 	movw	r3, #3983	; 0xf8f
 80051ee:	4013      	ands	r3, r2
 80051f0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	461a      	mov	r2, r3
 80051fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005206:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800520a:	b292      	uxth	r2, r2
 800520c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800520e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005212:	4613      	mov	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	4413      	add	r3, r2
 8005222:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005226:	7b1b      	ldrb	r3, [r3, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d123      	bne.n	8005274 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005234:	b29b      	uxth	r3, r3
 8005236:	461a      	mov	r2, r3
 8005238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	4413      	add	r3, r2
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6812      	ldr	r2, [r2, #0]
 8005244:	4413      	add	r3, r2
 8005246:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005250:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8005254:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 808e 	beq.w	800537a <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6818      	ldr	r0, [r3, #0]
 8005262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005264:	6959      	ldr	r1, [r3, #20]
 8005266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005268:	88da      	ldrh	r2, [r3, #6]
 800526a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800526e:	f005 f83f 	bl	800a2f0 <USB_ReadPMA>
 8005272:	e082      	b.n	800537a <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005276:	78db      	ldrb	r3, [r3, #3]
 8005278:	2b02      	cmp	r3, #2
 800527a:	d10a      	bne.n	8005292 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800527c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005280:	461a      	mov	r2, r3
 8005282:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f9d3 	bl	8005630 <HAL_PCD_EP_DB_Receive>
 800528a:	4603      	mov	r3, r0
 800528c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005290:	e073      	b.n	800537a <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	461a      	mov	r2, r3
 8005298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ac:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	461a      	mov	r2, r3
 80052b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	441a      	add	r2, r3
 80052be:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80052c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	461a      	mov	r2, r3
 80052dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d022      	beq.n	8005336 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	461a      	mov	r2, r3
 80052fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	4413      	add	r3, r2
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6812      	ldr	r2, [r2, #0]
 8005308:	4413      	add	r3, r2
 800530a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800530e:	881b      	ldrh	r3, [r3, #0]
 8005310:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005314:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005318:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800531c:	2b00      	cmp	r3, #0
 800531e:	d02c      	beq.n	800537a <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6818      	ldr	r0, [r3, #0]
 8005324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005326:	6959      	ldr	r1, [r3, #20]
 8005328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800532a:	891a      	ldrh	r2, [r3, #8]
 800532c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005330:	f004 ffde 	bl	800a2f0 <USB_ReadPMA>
 8005334:	e021      	b.n	800537a <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800533e:	b29b      	uxth	r3, r3
 8005340:	461a      	mov	r2, r3
 8005342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	4413      	add	r3, r2
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6812      	ldr	r2, [r2, #0]
 800534e:	4413      	add	r3, r2
 8005350:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800535a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800535e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005362:	2b00      	cmp	r3, #0
 8005364:	d009      	beq.n	800537a <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6818      	ldr	r0, [r3, #0]
 800536a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800536c:	6959      	ldr	r1, [r3, #20]
 800536e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005370:	895a      	ldrh	r2, [r3, #10]
 8005372:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005376:	f004 ffbb 	bl	800a2f0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800537a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800537c:	69da      	ldr	r2, [r3, #28]
 800537e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005382:	441a      	add	r2, r3
 8005384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005386:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800538a:	695a      	ldr	r2, [r3, #20]
 800538c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005390:	441a      	add	r2, r3
 8005392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005394:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d005      	beq.n	80053aa <PCD_EP_ISR_Handler+0x4fe>
 800539e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80053a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d206      	bcs.n	80053b8 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80053aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	4619      	mov	r1, r3
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f006 fe4f 	bl	800c054 <HAL_PCD_DataOutStageCallback>
 80053b6:	e005      	b.n	80053c4 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053be:	4618      	mov	r0, r3
 80053c0:	f003 fa69 	bl	8008896 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80053c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80053c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 8121 	beq.w	8005614 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 80053d2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	3310      	adds	r3, #16
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	4413      	add	r3, r2
 80053e4:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80053fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005400:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	461a      	mov	r2, r3
 800540a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	441a      	add	r2, r3
 8005412:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800541a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800541e:	b29b      	uxth	r3, r3
 8005420:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005424:	78db      	ldrb	r3, [r3, #3]
 8005426:	2b01      	cmp	r3, #1
 8005428:	f040 80a2 	bne.w	8005570 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800542c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800542e:	2200      	movs	r2, #0
 8005430:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005434:	7b1b      	ldrb	r3, [r3, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 8093 	beq.w	8005562 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800543c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005444:	2b00      	cmp	r3, #0
 8005446:	d046      	beq.n	80054d6 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800544a:	785b      	ldrb	r3, [r3, #1]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d126      	bne.n	800549e <PCD_EP_ISR_Handler+0x5f2>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800545e:	b29b      	uxth	r3, r3
 8005460:	461a      	mov	r2, r3
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	4413      	add	r3, r2
 8005466:	627b      	str	r3, [r7, #36]	; 0x24
 8005468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	00da      	lsls	r2, r3, #3
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	4413      	add	r3, r2
 8005472:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005476:	623b      	str	r3, [r7, #32]
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	b29b      	uxth	r3, r3
 800547e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005482:	b29a      	uxth	r2, r3
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	801a      	strh	r2, [r3, #0]
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	b29b      	uxth	r3, r3
 800548e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005496:	b29a      	uxth	r2, r3
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	801a      	strh	r2, [r3, #0]
 800549c:	e061      	b.n	8005562 <PCD_EP_ISR_Handler+0x6b6>
 800549e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054a0:	785b      	ldrb	r3, [r3, #1]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d15d      	bne.n	8005562 <PCD_EP_ISR_Handler+0x6b6>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	461a      	mov	r2, r3
 80054b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ba:	4413      	add	r3, r2
 80054bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	00da      	lsls	r2, r3, #3
 80054c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c6:	4413      	add	r3, r2
 80054c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80054cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	2200      	movs	r2, #0
 80054d2:	801a      	strh	r2, [r3, #0]
 80054d4:	e045      	b.n	8005562 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054de:	785b      	ldrb	r3, [r3, #1]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d126      	bne.n	8005532 <PCD_EP_ISR_Handler+0x686>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	637b      	str	r3, [r7, #52]	; 0x34
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	461a      	mov	r2, r3
 80054f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f8:	4413      	add	r3, r2
 80054fa:	637b      	str	r3, [r7, #52]	; 0x34
 80054fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	00da      	lsls	r2, r3, #3
 8005502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005504:	4413      	add	r3, r2
 8005506:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800550a:	633b      	str	r3, [r7, #48]	; 0x30
 800550c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	b29b      	uxth	r3, r3
 8005512:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005516:	b29a      	uxth	r2, r3
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	801a      	strh	r2, [r3, #0]
 800551c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	b29b      	uxth	r3, r3
 8005522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800552a:	b29a      	uxth	r2, r3
 800552c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552e:	801a      	strh	r2, [r3, #0]
 8005530:	e017      	b.n	8005562 <PCD_EP_ISR_Handler+0x6b6>
 8005532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005534:	785b      	ldrb	r3, [r3, #1]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d113      	bne.n	8005562 <PCD_EP_ISR_Handler+0x6b6>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005542:	b29b      	uxth	r3, r3
 8005544:	461a      	mov	r2, r3
 8005546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005548:	4413      	add	r3, r2
 800554a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800554c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	00da      	lsls	r2, r3, #3
 8005552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005554:	4413      	add	r3, r2
 8005556:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800555a:	63bb      	str	r3, [r7, #56]	; 0x38
 800555c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555e:	2200      	movs	r2, #0
 8005560:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	4619      	mov	r1, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f006 fd8e 	bl	800c08a <HAL_PCD_DataInStageCallback>
 800556e:	e051      	b.n	8005614 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005570:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005578:	2b00      	cmp	r3, #0
 800557a:	d144      	bne.n	8005606 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005584:	b29b      	uxth	r3, r3
 8005586:	461a      	mov	r2, r3
 8005588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	4413      	add	r3, r2
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6812      	ldr	r2, [r2, #0]
 8005594:	4413      	add	r3, r2
 8005596:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055a0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80055a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055a6:	699a      	ldr	r2, [r3, #24]
 80055a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d907      	bls.n	80055c0 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 80055b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055b2:	699a      	ldr	r2, [r3, #24]
 80055b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80055b8:	1ad2      	subs	r2, r2, r3
 80055ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055bc:	619a      	str	r2, [r3, #24]
 80055be:	e002      	b.n	80055c6 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 80055c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055c2:	2200      	movs	r2, #0
 80055c4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80055c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d106      	bne.n	80055dc <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80055ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f006 fd58 	bl	800c08a <HAL_PCD_DataInStageCallback>
 80055da:	e01b      	b.n	8005614 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80055dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055de:	695a      	ldr	r2, [r3, #20]
 80055e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80055e4:	441a      	add	r2, r3
 80055e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055e8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80055ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055ec:	69da      	ldr	r2, [r3, #28]
 80055ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80055f2:	441a      	add	r2, r3
 80055f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055f6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055fe:	4618      	mov	r0, r3
 8005600:	f003 f949 	bl	8008896 <USB_EPStartXfer>
 8005604:	e006      	b.n	8005614 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005606:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800560a:	461a      	mov	r2, r3
 800560c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f917 	bl	8005842 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800561c:	b29b      	uxth	r3, r3
 800561e:	b21b      	sxth	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	f6ff ac48 	blt.w	8004eb6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3758      	adds	r7, #88	; 0x58
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b088      	sub	sp, #32
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	4613      	mov	r3, r2
 800563c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800563e:	88fb      	ldrh	r3, [r7, #6]
 8005640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d07c      	beq.n	8005742 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005650:	b29b      	uxth	r3, r3
 8005652:	461a      	mov	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	4413      	add	r3, r2
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	6812      	ldr	r2, [r2, #0]
 8005660:	4413      	add	r3, r2
 8005662:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800566c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	699a      	ldr	r2, [r3, #24]
 8005672:	8b7b      	ldrh	r3, [r7, #26]
 8005674:	429a      	cmp	r2, r3
 8005676:	d306      	bcc.n	8005686 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	699a      	ldr	r2, [r3, #24]
 800567c:	8b7b      	ldrh	r3, [r7, #26]
 800567e:	1ad2      	subs	r2, r2, r3
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	619a      	str	r2, [r3, #24]
 8005684:	e002      	b.n	800568c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2200      	movs	r2, #0
 800568a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d123      	bne.n	80056dc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	461a      	mov	r2, r3
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ae:	833b      	strh	r3, [r7, #24]
 80056b0:	8b3b      	ldrh	r3, [r7, #24]
 80056b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056b6:	833b      	strh	r3, [r7, #24]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	461a      	mov	r2, r3
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	441a      	add	r2, r3
 80056c6:	8b3b      	ldrh	r3, [r7, #24]
 80056c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d8:	b29b      	uxth	r3, r3
 80056da:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80056dc:	88fb      	ldrh	r3, [r7, #6]
 80056de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d01f      	beq.n	8005726 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005700:	82fb      	strh	r3, [r7, #22]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	441a      	add	r2, r3
 8005710:	8afb      	ldrh	r3, [r7, #22]
 8005712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800571a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800571e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005722:	b29b      	uxth	r3, r3
 8005724:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005726:	8b7b      	ldrh	r3, [r7, #26]
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8085 	beq.w	8005838 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6818      	ldr	r0, [r3, #0]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	6959      	ldr	r1, [r3, #20]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	891a      	ldrh	r2, [r3, #8]
 800573a:	8b7b      	ldrh	r3, [r7, #26]
 800573c:	f004 fdd8 	bl	800a2f0 <USB_ReadPMA>
 8005740:	e07a      	b.n	8005838 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800574a:	b29b      	uxth	r3, r3
 800574c:	461a      	mov	r2, r3
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	4413      	add	r3, r2
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	4413      	add	r3, r2
 800575c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005766:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	699a      	ldr	r2, [r3, #24]
 800576c:	8b7b      	ldrh	r3, [r7, #26]
 800576e:	429a      	cmp	r2, r3
 8005770:	d306      	bcc.n	8005780 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	699a      	ldr	r2, [r3, #24]
 8005776:	8b7b      	ldrh	r3, [r7, #26]
 8005778:	1ad2      	subs	r2, r2, r3
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	619a      	str	r2, [r3, #24]
 800577e:	e002      	b.n	8005786 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2200      	movs	r2, #0
 8005784:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d123      	bne.n	80057d6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	b29b      	uxth	r3, r3
 80057a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a8:	83fb      	strh	r3, [r7, #30]
 80057aa:	8bfb      	ldrh	r3, [r7, #30]
 80057ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80057b0:	83fb      	strh	r3, [r7, #30]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	441a      	add	r2, r3
 80057c0:	8bfb      	ldrh	r3, [r7, #30]
 80057c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80057d6:	88fb      	ldrh	r3, [r7, #6]
 80057d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d11f      	bne.n	8005820 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	461a      	mov	r2, r3
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fa:	83bb      	strh	r3, [r7, #28]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	461a      	mov	r2, r3
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	441a      	add	r2, r3
 800580a:	8bbb      	ldrh	r3, [r7, #28]
 800580c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005818:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800581c:	b29b      	uxth	r3, r3
 800581e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005820:	8b7b      	ldrh	r3, [r7, #26]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d008      	beq.n	8005838 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	6959      	ldr	r1, [r3, #20]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	895a      	ldrh	r2, [r3, #10]
 8005832:	8b7b      	ldrh	r3, [r7, #26]
 8005834:	f004 fd5c 	bl	800a2f0 <USB_ReadPMA>
    }
  }

  return count;
 8005838:	8b7b      	ldrh	r3, [r7, #26]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3720      	adds	r7, #32
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b0a4      	sub	sp, #144	; 0x90
 8005846:	af00      	add	r7, sp, #0
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	4613      	mov	r3, r2
 800584e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 81db 	beq.w	8005c12 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005864:	b29b      	uxth	r3, r3
 8005866:	461a      	mov	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	4413      	add	r3, r2
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	6812      	ldr	r2, [r2, #0]
 8005874:	4413      	add	r3, r2
 8005876:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005880:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	699a      	ldr	r2, [r3, #24]
 8005888:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800588c:	429a      	cmp	r2, r3
 800588e:	d907      	bls.n	80058a0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	699a      	ldr	r2, [r3, #24]
 8005894:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005898:	1ad2      	subs	r2, r2, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	619a      	str	r2, [r3, #24]
 800589e:	e002      	b.n	80058a6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2200      	movs	r2, #0
 80058a4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f040 80b9 	bne.w	8005a22 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	785b      	ldrb	r3, [r3, #1]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d126      	bne.n	8005906 <HAL_PCD_EP_DB_Transmit+0xc4>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	461a      	mov	r2, r3
 80058ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058cc:	4413      	add	r3, r2
 80058ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	00da      	lsls	r2, r3, #3
 80058d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d8:	4413      	add	r3, r2
 80058da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058de:	62bb      	str	r3, [r7, #40]	; 0x28
 80058e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ee:	801a      	strh	r2, [r3, #0]
 80058f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058fe:	b29a      	uxth	r2, r3
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	801a      	strh	r2, [r3, #0]
 8005904:	e01a      	b.n	800593c <HAL_PCD_EP_DB_Transmit+0xfa>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	785b      	ldrb	r3, [r3, #1]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d116      	bne.n	800593c <HAL_PCD_EP_DB_Transmit+0xfa>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	637b      	str	r3, [r7, #52]	; 0x34
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800591c:	b29b      	uxth	r3, r3
 800591e:	461a      	mov	r2, r3
 8005920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005922:	4413      	add	r3, r2
 8005924:	637b      	str	r3, [r7, #52]	; 0x34
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	00da      	lsls	r2, r3, #3
 800592c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592e:	4413      	add	r3, r2
 8005930:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005934:	633b      	str	r3, [r7, #48]	; 0x30
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	2200      	movs	r2, #0
 800593a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	785b      	ldrb	r3, [r3, #1]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d126      	bne.n	8005998 <HAL_PCD_EP_DB_Transmit+0x156>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	61fb      	str	r3, [r7, #28]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005958:	b29b      	uxth	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	4413      	add	r3, r2
 8005960:	61fb      	str	r3, [r7, #28]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	00da      	lsls	r2, r3, #3
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	4413      	add	r3, r2
 800596c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005970:	61bb      	str	r3, [r7, #24]
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	b29b      	uxth	r3, r3
 8005978:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800597c:	b29a      	uxth	r2, r3
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	801a      	strh	r2, [r3, #0]
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	b29b      	uxth	r3, r3
 8005988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800598c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005990:	b29a      	uxth	r2, r3
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	801a      	strh	r2, [r3, #0]
 8005996:	e017      	b.n	80059c8 <HAL_PCD_EP_DB_Transmit+0x186>
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	785b      	ldrb	r3, [r3, #1]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d113      	bne.n	80059c8 <HAL_PCD_EP_DB_Transmit+0x186>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	461a      	mov	r2, r3
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	4413      	add	r3, r2
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	00da      	lsls	r2, r3, #3
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	4413      	add	r3, r2
 80059bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059c0:	623b      	str	r3, [r7, #32]
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	2200      	movs	r2, #0
 80059c6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	4619      	mov	r1, r3
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f006 fb5b 	bl	800c08a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80059d4:	88fb      	ldrh	r3, [r7, #6]
 80059d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 82fa 	beq.w	8005fd4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fa:	82fb      	strh	r3, [r7, #22]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	461a      	mov	r2, r3
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	441a      	add	r2, r3
 8005a0a:	8afb      	ldrh	r3, [r7, #22]
 8005a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	8013      	strh	r3, [r2, #0]
 8005a20:	e2d8      	b.n	8005fd4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005a22:	88fb      	ldrh	r3, [r7, #6]
 8005a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d021      	beq.n	8005a70 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	461a      	mov	r2, r3
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a46:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	441a      	add	r2, r3
 8005a58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	f040 82ac 	bne.w	8005fd4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	695a      	ldr	r2, [r3, #20]
 8005a80:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005a84:	441a      	add	r2, r3
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	69da      	ldr	r2, [r3, #28]
 8005a8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005a92:	441a      	add	r2, r3
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	6a1a      	ldr	r2, [r3, #32]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d30b      	bcc.n	8005abc <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	6a1a      	ldr	r2, [r3, #32]
 8005ab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ab4:	1ad2      	subs	r2, r2, r3
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	621a      	str	r2, [r3, #32]
 8005aba:	e017      	b.n	8005aec <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d108      	bne.n	8005ad6 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8005ac4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005ac8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005ad4:	e00a      	b.n	8005aec <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	785b      	ldrb	r3, [r3, #1]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d165      	bne.n	8005bc0 <HAL_PCD_EP_DB_Transmit+0x37e>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b08:	4413      	add	r3, r2
 8005b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	00da      	lsls	r2, r3, #3
 8005b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b14:	4413      	add	r3, r2
 8005b16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2a:	801a      	strh	r2, [r3, #0]
 8005b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b30:	2b3e      	cmp	r3, #62	; 0x3e
 8005b32:	d91d      	bls.n	8005b70 <HAL_PCD_EP_DB_Transmit+0x32e>
 8005b34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b38:	095b      	lsrs	r3, r3, #5
 8005b3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b40:	f003 031f 	and.w	r3, r3, #31
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d102      	bne.n	8005b4e <HAL_PCD_EP_DB_Transmit+0x30c>
 8005b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	029b      	lsls	r3, r3, #10
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6c:	801a      	strh	r2, [r3, #0]
 8005b6e:	e044      	b.n	8005bfa <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005b70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10a      	bne.n	8005b8e <HAL_PCD_EP_DB_Transmit+0x34c>
 8005b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8a:	801a      	strh	r2, [r3, #0]
 8005b8c:	e035      	b.n	8005bfa <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005b8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <HAL_PCD_EP_DB_Transmit+0x366>
 8005ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	029b      	lsls	r3, r3, #10
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbc:	801a      	strh	r2, [r3, #0]
 8005bbe:	e01c      	b.n	8005bfa <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	785b      	ldrb	r3, [r3, #1]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d118      	bne.n	8005bfa <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	647b      	str	r3, [r7, #68]	; 0x44
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	461a      	mov	r2, r3
 8005bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bdc:	4413      	add	r3, r2
 8005bde:	647b      	str	r3, [r7, #68]	; 0x44
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	00da      	lsls	r2, r3, #3
 8005be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005be8:	4413      	add	r3, r2
 8005bea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005bee:	643b      	str	r3, [r7, #64]	; 0x40
 8005bf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6818      	ldr	r0, [r3, #0]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	6959      	ldr	r1, [r3, #20]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	891a      	ldrh	r2, [r3, #8]
 8005c06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	f004 fb2e 	bl	800a26c <USB_WritePMA>
 8005c10:	e1e0      	b.n	8005fd4 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	4413      	add	r3, r2
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	6812      	ldr	r2, [r2, #0]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c36:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	699a      	ldr	r2, [r3, #24]
 8005c3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d307      	bcc.n	8005c56 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	699a      	ldr	r2, [r3, #24]
 8005c4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005c4e:	1ad2      	subs	r2, r2, r3
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	619a      	str	r2, [r3, #24]
 8005c54:	e002      	b.n	8005c5c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f040 80c0 	bne.w	8005de6 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	785b      	ldrb	r3, [r3, #1]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d126      	bne.n	8005cbc <HAL_PCD_EP_DB_Transmit+0x47a>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	461a      	mov	r2, r3
 8005c80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c82:	4413      	add	r3, r2
 8005c84:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	00da      	lsls	r2, r3, #3
 8005c8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c8e:	4413      	add	r3, r2
 8005c90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c94:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ca4:	801a      	strh	r2, [r3, #0]
 8005ca6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cb8:	801a      	strh	r2, [r3, #0]
 8005cba:	e01a      	b.n	8005cf2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	785b      	ldrb	r3, [r3, #1]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d116      	bne.n	8005cf2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	667b      	str	r3, [r7, #100]	; 0x64
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cd8:	4413      	add	r3, r2
 8005cda:	667b      	str	r3, [r7, #100]	; 0x64
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	00da      	lsls	r2, r3, #3
 8005ce2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005cea:	663b      	str	r3, [r7, #96]	; 0x60
 8005cec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cee:	2200      	movs	r2, #0
 8005cf0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	677b      	str	r3, [r7, #116]	; 0x74
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	785b      	ldrb	r3, [r3, #1]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d12b      	bne.n	8005d58 <HAL_PCD_EP_DB_Transmit+0x516>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d14:	4413      	add	r3, r2
 8005d16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	00da      	lsls	r2, r3, #3
 8005d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d20:	4413      	add	r3, r2
 8005d22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d3c:	801a      	strh	r2, [r3, #0]
 8005d3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d54:	801a      	strh	r2, [r3, #0]
 8005d56:	e017      	b.n	8005d88 <HAL_PCD_EP_DB_Transmit+0x546>
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	785b      	ldrb	r3, [r3, #1]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d113      	bne.n	8005d88 <HAL_PCD_EP_DB_Transmit+0x546>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d6e:	4413      	add	r3, r2
 8005d70:	677b      	str	r3, [r7, #116]	; 0x74
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	00da      	lsls	r2, r3, #3
 8005d78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d80:	673b      	str	r3, [r7, #112]	; 0x70
 8005d82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d84:	2200      	movs	r2, #0
 8005d86:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f006 f97b 	bl	800c08a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005d94:	88fb      	ldrh	r3, [r7, #6]
 8005d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f040 811a 	bne.w	8005fd4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	461a      	mov	r2, r3
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dba:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	441a      	add	r2, r3
 8005dcc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	8013      	strh	r3, [r2, #0]
 8005de4:	e0f6      	b.n	8005fd4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005de6:	88fb      	ldrh	r3, [r7, #6]
 8005de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d121      	bne.n	8005e34 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	461a      	mov	r2, r3
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	441a      	add	r2, r3
 8005e1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	f040 80ca 	bne.w	8005fd4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	695a      	ldr	r2, [r3, #20]
 8005e44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005e48:	441a      	add	r2, r3
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	69da      	ldr	r2, [r3, #28]
 8005e52:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005e56:	441a      	add	r2, r3
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	6a1a      	ldr	r2, [r3, #32]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d30b      	bcc.n	8005e80 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	6a1a      	ldr	r2, [r3, #32]
 8005e74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e78:	1ad2      	subs	r2, r2, r3
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	621a      	str	r2, [r3, #32]
 8005e7e:	e017      	b.n	8005eb0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d108      	bne.n	8005e9a <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005e88:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005e8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005e98:	e00a      	b.n	8005eb0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	657b      	str	r3, [r7, #84]	; 0x54
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	785b      	ldrb	r3, [r3, #1]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d165      	bne.n	8005f8a <HAL_PCD_EP_DB_Transmit+0x748>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	461a      	mov	r2, r3
 8005ed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ed2:	4413      	add	r3, r2
 8005ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	00da      	lsls	r2, r3, #3
 8005edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ede:	4413      	add	r3, r2
 8005ee0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ee4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ef4:	801a      	strh	r2, [r3, #0]
 8005ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005efa:	2b3e      	cmp	r3, #62	; 0x3e
 8005efc:	d91d      	bls.n	8005f3a <HAL_PCD_EP_DB_Transmit+0x6f8>
 8005efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f02:	095b      	lsrs	r3, r3, #5
 8005f04:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f0a:	f003 031f 	and.w	r3, r3, #31
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d102      	bne.n	8005f18 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005f12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f14:	3b01      	subs	r3, #1
 8005f16:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	029b      	lsls	r3, r3, #10
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	4313      	orrs	r3, r2
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f36:	801a      	strh	r2, [r3, #0]
 8005f38:	e041      	b.n	8005fbe <HAL_PCD_EP_DB_Transmit+0x77c>
 8005f3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10a      	bne.n	8005f58 <HAL_PCD_EP_DB_Transmit+0x716>
 8005f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f44:	881b      	ldrh	r3, [r3, #0]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f54:	801a      	strh	r2, [r3, #0]
 8005f56:	e032      	b.n	8005fbe <HAL_PCD_EP_DB_Transmit+0x77c>
 8005f58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f5c:	085b      	lsrs	r3, r3, #1
 8005f5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <HAL_PCD_EP_DB_Transmit+0x730>
 8005f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f6e:	3301      	adds	r3, #1
 8005f70:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	029b      	lsls	r3, r3, #10
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	4313      	orrs	r3, r2
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f86:	801a      	strh	r2, [r3, #0]
 8005f88:	e019      	b.n	8005fbe <HAL_PCD_EP_DB_Transmit+0x77c>
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	785b      	ldrb	r3, [r3, #1]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d115      	bne.n	8005fbe <HAL_PCD_EP_DB_Transmit+0x77c>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fa0:	4413      	add	r3, r2
 8005fa2:	657b      	str	r3, [r7, #84]	; 0x54
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	00da      	lsls	r2, r3, #3
 8005faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fac:	4413      	add	r3, r2
 8005fae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fb2:	653b      	str	r3, [r7, #80]	; 0x50
 8005fb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fbc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6818      	ldr	r0, [r3, #0]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	6959      	ldr	r1, [r3, #20]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	895a      	ldrh	r2, [r3, #10]
 8005fca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	f004 f94c 	bl	800a26c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fee:	82bb      	strh	r3, [r7, #20]
 8005ff0:	8abb      	ldrh	r3, [r7, #20]
 8005ff2:	f083 0310 	eor.w	r3, r3, #16
 8005ff6:	82bb      	strh	r3, [r7, #20]
 8005ff8:	8abb      	ldrh	r3, [r7, #20]
 8005ffa:	f083 0320 	eor.w	r3, r3, #32
 8005ffe:	82bb      	strh	r3, [r7, #20]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	461a      	mov	r2, r3
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	441a      	add	r2, r3
 800600e:	8abb      	ldrh	r3, [r7, #20]
 8006010:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006014:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800601c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006020:	b29b      	uxth	r3, r3
 8006022:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3790      	adds	r7, #144	; 0x90
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800602e:	b480      	push	{r7}
 8006030:	b087      	sub	sp, #28
 8006032:	af00      	add	r7, sp, #0
 8006034:	60f8      	str	r0, [r7, #12]
 8006036:	607b      	str	r3, [r7, #4]
 8006038:	460b      	mov	r3, r1
 800603a:	817b      	strh	r3, [r7, #10]
 800603c:	4613      	mov	r3, r2
 800603e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006040:	897b      	ldrh	r3, [r7, #10]
 8006042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00b      	beq.n	8006064 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800604c:	897b      	ldrh	r3, [r7, #10]
 800604e:	f003 0207 	and.w	r2, r3, #7
 8006052:	4613      	mov	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	00db      	lsls	r3, r3, #3
 800605a:	3310      	adds	r3, #16
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	617b      	str	r3, [r7, #20]
 8006062:	e009      	b.n	8006078 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006064:	897a      	ldrh	r2, [r7, #10]
 8006066:	4613      	mov	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	4413      	add	r3, r2
 8006076:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006078:	893b      	ldrh	r3, [r7, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d107      	bne.n	800608e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2200      	movs	r2, #0
 8006082:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	b29a      	uxth	r2, r3
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	80da      	strh	r2, [r3, #6]
 800608c:	e00b      	b.n	80060a6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2201      	movs	r2, #1
 8006092:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	b29a      	uxth	r2, r3
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	0c1b      	lsrs	r3, r3, #16
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	371c      	adds	r7, #28
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80060d8:	b29b      	uxth	r3, r3
 80060da:	f043 0301 	orr.w	r3, r3, #1
 80060de:	b29a      	uxth	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	f043 0302 	orr.w	r3, r3, #2
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d141      	bne.n	800619a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006116:	4b4b      	ldr	r3, [pc, #300]	; (8006244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800611e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006122:	d131      	bne.n	8006188 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006124:	4b47      	ldr	r3, [pc, #284]	; (8006244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800612a:	4a46      	ldr	r2, [pc, #280]	; (8006244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800612c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006130:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006134:	4b43      	ldr	r3, [pc, #268]	; (8006244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800613c:	4a41      	ldr	r2, [pc, #260]	; (8006244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800613e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006142:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006144:	4b40      	ldr	r3, [pc, #256]	; (8006248 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2232      	movs	r2, #50	; 0x32
 800614a:	fb02 f303 	mul.w	r3, r2, r3
 800614e:	4a3f      	ldr	r2, [pc, #252]	; (800624c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006150:	fba2 2303 	umull	r2, r3, r2, r3
 8006154:	0c9b      	lsrs	r3, r3, #18
 8006156:	3301      	adds	r3, #1
 8006158:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800615a:	e002      	b.n	8006162 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3b01      	subs	r3, #1
 8006160:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006162:	4b38      	ldr	r3, [pc, #224]	; (8006244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800616a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800616e:	d102      	bne.n	8006176 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1f2      	bne.n	800615c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006176:	4b33      	ldr	r3, [pc, #204]	; (8006244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800617e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006182:	d158      	bne.n	8006236 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e057      	b.n	8006238 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006188:	4b2e      	ldr	r3, [pc, #184]	; (8006244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800618a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800618e:	4a2d      	ldr	r2, [pc, #180]	; (8006244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006194:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006198:	e04d      	b.n	8006236 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061a0:	d141      	bne.n	8006226 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80061a2:	4b28      	ldr	r3, [pc, #160]	; (8006244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80061aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ae:	d131      	bne.n	8006214 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061b0:	4b24      	ldr	r3, [pc, #144]	; (8006244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061b6:	4a23      	ldr	r2, [pc, #140]	; (8006244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80061c0:	4b20      	ldr	r3, [pc, #128]	; (8006244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80061c8:	4a1e      	ldr	r2, [pc, #120]	; (8006244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80061d0:	4b1d      	ldr	r3, [pc, #116]	; (8006248 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2232      	movs	r2, #50	; 0x32
 80061d6:	fb02 f303 	mul.w	r3, r2, r3
 80061da:	4a1c      	ldr	r2, [pc, #112]	; (800624c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80061dc:	fba2 2303 	umull	r2, r3, r2, r3
 80061e0:	0c9b      	lsrs	r3, r3, #18
 80061e2:	3301      	adds	r3, #1
 80061e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061e6:	e002      	b.n	80061ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3b01      	subs	r3, #1
 80061ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061ee:	4b15      	ldr	r3, [pc, #84]	; (8006244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061fa:	d102      	bne.n	8006202 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1f2      	bne.n	80061e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006202:	4b10      	ldr	r3, [pc, #64]	; (8006244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800620a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800620e:	d112      	bne.n	8006236 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e011      	b.n	8006238 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006214:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800621a:	4a0a      	ldr	r2, [pc, #40]	; (8006244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800621c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006220:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006224:	e007      	b.n	8006236 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006226:	4b07      	ldr	r3, [pc, #28]	; (8006244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800622e:	4a05      	ldr	r2, [pc, #20]	; (8006244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006230:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006234:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	40007000 	.word	0x40007000
 8006248:	20000008 	.word	0x20000008
 800624c:	431bde83 	.word	0x431bde83

08006250 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006250:	b480      	push	{r7}
 8006252:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006254:	4b05      	ldr	r3, [pc, #20]	; (800626c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	4a04      	ldr	r2, [pc, #16]	; (800626c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800625a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800625e:	6093      	str	r3, [r2, #8]
}
 8006260:	bf00      	nop
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40007000 	.word	0x40007000

08006270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e2fe      	b.n	8006880 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d075      	beq.n	800637a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800628e:	4b97      	ldr	r3, [pc, #604]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f003 030c 	and.w	r3, r3, #12
 8006296:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006298:	4b94      	ldr	r3, [pc, #592]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f003 0303 	and.w	r3, r3, #3
 80062a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	2b0c      	cmp	r3, #12
 80062a6:	d102      	bne.n	80062ae <HAL_RCC_OscConfig+0x3e>
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	d002      	beq.n	80062b4 <HAL_RCC_OscConfig+0x44>
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d10b      	bne.n	80062cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062b4:	4b8d      	ldr	r3, [pc, #564]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d05b      	beq.n	8006378 <HAL_RCC_OscConfig+0x108>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d157      	bne.n	8006378 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e2d9      	b.n	8006880 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d4:	d106      	bne.n	80062e4 <HAL_RCC_OscConfig+0x74>
 80062d6:	4b85      	ldr	r3, [pc, #532]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a84      	ldr	r2, [pc, #528]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 80062dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062e0:	6013      	str	r3, [r2, #0]
 80062e2:	e01d      	b.n	8006320 <HAL_RCC_OscConfig+0xb0>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062ec:	d10c      	bne.n	8006308 <HAL_RCC_OscConfig+0x98>
 80062ee:	4b7f      	ldr	r3, [pc, #508]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a7e      	ldr	r2, [pc, #504]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 80062f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062f8:	6013      	str	r3, [r2, #0]
 80062fa:	4b7c      	ldr	r3, [pc, #496]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a7b      	ldr	r2, [pc, #492]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 8006300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	e00b      	b.n	8006320 <HAL_RCC_OscConfig+0xb0>
 8006308:	4b78      	ldr	r3, [pc, #480]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a77      	ldr	r2, [pc, #476]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 800630e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006312:	6013      	str	r3, [r2, #0]
 8006314:	4b75      	ldr	r3, [pc, #468]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a74      	ldr	r2, [pc, #464]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 800631a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800631e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d013      	beq.n	8006350 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006328:	f7fb fb1c 	bl	8001964 <HAL_GetTick>
 800632c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800632e:	e008      	b.n	8006342 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006330:	f7fb fb18 	bl	8001964 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b64      	cmp	r3, #100	; 0x64
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e29e      	b.n	8006880 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006342:	4b6a      	ldr	r3, [pc, #424]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d0f0      	beq.n	8006330 <HAL_RCC_OscConfig+0xc0>
 800634e:	e014      	b.n	800637a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006350:	f7fb fb08 	bl	8001964 <HAL_GetTick>
 8006354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006358:	f7fb fb04 	bl	8001964 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b64      	cmp	r3, #100	; 0x64
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e28a      	b.n	8006880 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800636a:	4b60      	ldr	r3, [pc, #384]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1f0      	bne.n	8006358 <HAL_RCC_OscConfig+0xe8>
 8006376:	e000      	b.n	800637a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d075      	beq.n	8006472 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006386:	4b59      	ldr	r3, [pc, #356]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f003 030c 	and.w	r3, r3, #12
 800638e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006390:	4b56      	ldr	r3, [pc, #344]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f003 0303 	and.w	r3, r3, #3
 8006398:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	2b0c      	cmp	r3, #12
 800639e:	d102      	bne.n	80063a6 <HAL_RCC_OscConfig+0x136>
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d002      	beq.n	80063ac <HAL_RCC_OscConfig+0x13c>
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	d11f      	bne.n	80063ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063ac:	4b4f      	ldr	r3, [pc, #316]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d005      	beq.n	80063c4 <HAL_RCC_OscConfig+0x154>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e25d      	b.n	8006880 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063c4:	4b49      	ldr	r3, [pc, #292]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	061b      	lsls	r3, r3, #24
 80063d2:	4946      	ldr	r1, [pc, #280]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80063d8:	4b45      	ldr	r3, [pc, #276]	; (80064f0 <HAL_RCC_OscConfig+0x280>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4618      	mov	r0, r3
 80063de:	f7fb fa75 	bl	80018cc <HAL_InitTick>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d043      	beq.n	8006470 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e249      	b.n	8006880 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d023      	beq.n	800643c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063f4:	4b3d      	ldr	r3, [pc, #244]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a3c      	ldr	r2, [pc, #240]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 80063fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006400:	f7fb fab0 	bl	8001964 <HAL_GetTick>
 8006404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006406:	e008      	b.n	800641a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006408:	f7fb faac 	bl	8001964 <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	2b02      	cmp	r3, #2
 8006414:	d901      	bls.n	800641a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e232      	b.n	8006880 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800641a:	4b34      	ldr	r3, [pc, #208]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0f0      	beq.n	8006408 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006426:	4b31      	ldr	r3, [pc, #196]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	061b      	lsls	r3, r3, #24
 8006434:	492d      	ldr	r1, [pc, #180]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 8006436:	4313      	orrs	r3, r2
 8006438:	604b      	str	r3, [r1, #4]
 800643a:	e01a      	b.n	8006472 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800643c:	4b2b      	ldr	r3, [pc, #172]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a2a      	ldr	r2, [pc, #168]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 8006442:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006448:	f7fb fa8c 	bl	8001964 <HAL_GetTick>
 800644c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800644e:	e008      	b.n	8006462 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006450:	f7fb fa88 	bl	8001964 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d901      	bls.n	8006462 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e20e      	b.n	8006880 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006462:	4b22      	ldr	r3, [pc, #136]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1f0      	bne.n	8006450 <HAL_RCC_OscConfig+0x1e0>
 800646e:	e000      	b.n	8006472 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006470:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0308 	and.w	r3, r3, #8
 800647a:	2b00      	cmp	r3, #0
 800647c:	d041      	beq.n	8006502 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d01c      	beq.n	80064c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006486:	4b19      	ldr	r3, [pc, #100]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 8006488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800648c:	4a17      	ldr	r2, [pc, #92]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 800648e:	f043 0301 	orr.w	r3, r3, #1
 8006492:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006496:	f7fb fa65 	bl	8001964 <HAL_GetTick>
 800649a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800649c:	e008      	b.n	80064b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800649e:	f7fb fa61 	bl	8001964 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d901      	bls.n	80064b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e1e7      	b.n	8006880 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064b0:	4b0e      	ldr	r3, [pc, #56]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 80064b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0ef      	beq.n	800649e <HAL_RCC_OscConfig+0x22e>
 80064be:	e020      	b.n	8006502 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064c0:	4b0a      	ldr	r3, [pc, #40]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 80064c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064c6:	4a09      	ldr	r2, [pc, #36]	; (80064ec <HAL_RCC_OscConfig+0x27c>)
 80064c8:	f023 0301 	bic.w	r3, r3, #1
 80064cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064d0:	f7fb fa48 	bl	8001964 <HAL_GetTick>
 80064d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064d6:	e00d      	b.n	80064f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064d8:	f7fb fa44 	bl	8001964 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d906      	bls.n	80064f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e1ca      	b.n	8006880 <HAL_RCC_OscConfig+0x610>
 80064ea:	bf00      	nop
 80064ec:	40021000 	.word	0x40021000
 80064f0:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064f4:	4b8c      	ldr	r3, [pc, #560]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 80064f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1ea      	bne.n	80064d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0304 	and.w	r3, r3, #4
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 80a6 	beq.w	800665c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006510:	2300      	movs	r3, #0
 8006512:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006514:	4b84      	ldr	r3, [pc, #528]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 8006516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <HAL_RCC_OscConfig+0x2b4>
 8006520:	2301      	movs	r3, #1
 8006522:	e000      	b.n	8006526 <HAL_RCC_OscConfig+0x2b6>
 8006524:	2300      	movs	r3, #0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00d      	beq.n	8006546 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800652a:	4b7f      	ldr	r3, [pc, #508]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 800652c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800652e:	4a7e      	ldr	r2, [pc, #504]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 8006530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006534:	6593      	str	r3, [r2, #88]	; 0x58
 8006536:	4b7c      	ldr	r3, [pc, #496]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 8006538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800653a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006542:	2301      	movs	r3, #1
 8006544:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006546:	4b79      	ldr	r3, [pc, #484]	; (800672c <HAL_RCC_OscConfig+0x4bc>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654e:	2b00      	cmp	r3, #0
 8006550:	d118      	bne.n	8006584 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006552:	4b76      	ldr	r3, [pc, #472]	; (800672c <HAL_RCC_OscConfig+0x4bc>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a75      	ldr	r2, [pc, #468]	; (800672c <HAL_RCC_OscConfig+0x4bc>)
 8006558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800655c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800655e:	f7fb fa01 	bl	8001964 <HAL_GetTick>
 8006562:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006564:	e008      	b.n	8006578 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006566:	f7fb f9fd 	bl	8001964 <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	2b02      	cmp	r3, #2
 8006572:	d901      	bls.n	8006578 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e183      	b.n	8006880 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006578:	4b6c      	ldr	r3, [pc, #432]	; (800672c <HAL_RCC_OscConfig+0x4bc>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006580:	2b00      	cmp	r3, #0
 8006582:	d0f0      	beq.n	8006566 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d108      	bne.n	800659e <HAL_RCC_OscConfig+0x32e>
 800658c:	4b66      	ldr	r3, [pc, #408]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 800658e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006592:	4a65      	ldr	r2, [pc, #404]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 8006594:	f043 0301 	orr.w	r3, r3, #1
 8006598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800659c:	e024      	b.n	80065e8 <HAL_RCC_OscConfig+0x378>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	2b05      	cmp	r3, #5
 80065a4:	d110      	bne.n	80065c8 <HAL_RCC_OscConfig+0x358>
 80065a6:	4b60      	ldr	r3, [pc, #384]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 80065a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ac:	4a5e      	ldr	r2, [pc, #376]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 80065ae:	f043 0304 	orr.w	r3, r3, #4
 80065b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065b6:	4b5c      	ldr	r3, [pc, #368]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 80065b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065bc:	4a5a      	ldr	r2, [pc, #360]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 80065be:	f043 0301 	orr.w	r3, r3, #1
 80065c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065c6:	e00f      	b.n	80065e8 <HAL_RCC_OscConfig+0x378>
 80065c8:	4b57      	ldr	r3, [pc, #348]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 80065ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ce:	4a56      	ldr	r2, [pc, #344]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 80065d0:	f023 0301 	bic.w	r3, r3, #1
 80065d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065d8:	4b53      	ldr	r3, [pc, #332]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 80065da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065de:	4a52      	ldr	r2, [pc, #328]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 80065e0:	f023 0304 	bic.w	r3, r3, #4
 80065e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d016      	beq.n	800661e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f0:	f7fb f9b8 	bl	8001964 <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065f6:	e00a      	b.n	800660e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065f8:	f7fb f9b4 	bl	8001964 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	f241 3288 	movw	r2, #5000	; 0x1388
 8006606:	4293      	cmp	r3, r2
 8006608:	d901      	bls.n	800660e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e138      	b.n	8006880 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800660e:	4b46      	ldr	r3, [pc, #280]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 8006610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d0ed      	beq.n	80065f8 <HAL_RCC_OscConfig+0x388>
 800661c:	e015      	b.n	800664a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800661e:	f7fb f9a1 	bl	8001964 <HAL_GetTick>
 8006622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006624:	e00a      	b.n	800663c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006626:	f7fb f99d 	bl	8001964 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	f241 3288 	movw	r2, #5000	; 0x1388
 8006634:	4293      	cmp	r3, r2
 8006636:	d901      	bls.n	800663c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e121      	b.n	8006880 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800663c:	4b3a      	ldr	r3, [pc, #232]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 800663e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1ed      	bne.n	8006626 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800664a:	7ffb      	ldrb	r3, [r7, #31]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d105      	bne.n	800665c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006650:	4b35      	ldr	r3, [pc, #212]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 8006652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006654:	4a34      	ldr	r2, [pc, #208]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 8006656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800665a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b00      	cmp	r3, #0
 8006666:	d03c      	beq.n	80066e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d01c      	beq.n	80066aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006670:	4b2d      	ldr	r3, [pc, #180]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 8006672:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006676:	4a2c      	ldr	r2, [pc, #176]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 8006678:	f043 0301 	orr.w	r3, r3, #1
 800667c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006680:	f7fb f970 	bl	8001964 <HAL_GetTick>
 8006684:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006686:	e008      	b.n	800669a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006688:	f7fb f96c 	bl	8001964 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	2b02      	cmp	r3, #2
 8006694:	d901      	bls.n	800669a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e0f2      	b.n	8006880 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800669a:	4b23      	ldr	r3, [pc, #140]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 800669c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0ef      	beq.n	8006688 <HAL_RCC_OscConfig+0x418>
 80066a8:	e01b      	b.n	80066e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066aa:	4b1f      	ldr	r3, [pc, #124]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 80066ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066b0:	4a1d      	ldr	r2, [pc, #116]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 80066b2:	f023 0301 	bic.w	r3, r3, #1
 80066b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ba:	f7fb f953 	bl	8001964 <HAL_GetTick>
 80066be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80066c0:	e008      	b.n	80066d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066c2:	f7fb f94f 	bl	8001964 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d901      	bls.n	80066d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e0d5      	b.n	8006880 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80066d4:	4b14      	ldr	r3, [pc, #80]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 80066d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1ef      	bne.n	80066c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 80c9 	beq.w	800687e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066ec:	4b0e      	ldr	r3, [pc, #56]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f003 030c 	and.w	r3, r3, #12
 80066f4:	2b0c      	cmp	r3, #12
 80066f6:	f000 8083 	beq.w	8006800 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d15e      	bne.n	80067c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006702:	4b09      	ldr	r3, [pc, #36]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a08      	ldr	r2, [pc, #32]	; (8006728 <HAL_RCC_OscConfig+0x4b8>)
 8006708:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800670c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670e:	f7fb f929 	bl	8001964 <HAL_GetTick>
 8006712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006714:	e00c      	b.n	8006730 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006716:	f7fb f925 	bl	8001964 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b02      	cmp	r3, #2
 8006722:	d905      	bls.n	8006730 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e0ab      	b.n	8006880 <HAL_RCC_OscConfig+0x610>
 8006728:	40021000 	.word	0x40021000
 800672c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006730:	4b55      	ldr	r3, [pc, #340]	; (8006888 <HAL_RCC_OscConfig+0x618>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1ec      	bne.n	8006716 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800673c:	4b52      	ldr	r3, [pc, #328]	; (8006888 <HAL_RCC_OscConfig+0x618>)
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	4b52      	ldr	r3, [pc, #328]	; (800688c <HAL_RCC_OscConfig+0x61c>)
 8006742:	4013      	ands	r3, r2
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	6a11      	ldr	r1, [r2, #32]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800674c:	3a01      	subs	r2, #1
 800674e:	0112      	lsls	r2, r2, #4
 8006750:	4311      	orrs	r1, r2
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006756:	0212      	lsls	r2, r2, #8
 8006758:	4311      	orrs	r1, r2
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800675e:	0852      	lsrs	r2, r2, #1
 8006760:	3a01      	subs	r2, #1
 8006762:	0552      	lsls	r2, r2, #21
 8006764:	4311      	orrs	r1, r2
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800676a:	0852      	lsrs	r2, r2, #1
 800676c:	3a01      	subs	r2, #1
 800676e:	0652      	lsls	r2, r2, #25
 8006770:	4311      	orrs	r1, r2
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006776:	06d2      	lsls	r2, r2, #27
 8006778:	430a      	orrs	r2, r1
 800677a:	4943      	ldr	r1, [pc, #268]	; (8006888 <HAL_RCC_OscConfig+0x618>)
 800677c:	4313      	orrs	r3, r2
 800677e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006780:	4b41      	ldr	r3, [pc, #260]	; (8006888 <HAL_RCC_OscConfig+0x618>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a40      	ldr	r2, [pc, #256]	; (8006888 <HAL_RCC_OscConfig+0x618>)
 8006786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800678a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800678c:	4b3e      	ldr	r3, [pc, #248]	; (8006888 <HAL_RCC_OscConfig+0x618>)
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	4a3d      	ldr	r2, [pc, #244]	; (8006888 <HAL_RCC_OscConfig+0x618>)
 8006792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006796:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006798:	f7fb f8e4 	bl	8001964 <HAL_GetTick>
 800679c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800679e:	e008      	b.n	80067b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067a0:	f7fb f8e0 	bl	8001964 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e066      	b.n	8006880 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067b2:	4b35      	ldr	r3, [pc, #212]	; (8006888 <HAL_RCC_OscConfig+0x618>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0f0      	beq.n	80067a0 <HAL_RCC_OscConfig+0x530>
 80067be:	e05e      	b.n	800687e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067c0:	4b31      	ldr	r3, [pc, #196]	; (8006888 <HAL_RCC_OscConfig+0x618>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a30      	ldr	r2, [pc, #192]	; (8006888 <HAL_RCC_OscConfig+0x618>)
 80067c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067cc:	f7fb f8ca 	bl	8001964 <HAL_GetTick>
 80067d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067d4:	f7fb f8c6 	bl	8001964 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e04c      	b.n	8006880 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067e6:	4b28      	ldr	r3, [pc, #160]	; (8006888 <HAL_RCC_OscConfig+0x618>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1f0      	bne.n	80067d4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80067f2:	4b25      	ldr	r3, [pc, #148]	; (8006888 <HAL_RCC_OscConfig+0x618>)
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	4924      	ldr	r1, [pc, #144]	; (8006888 <HAL_RCC_OscConfig+0x618>)
 80067f8:	4b25      	ldr	r3, [pc, #148]	; (8006890 <HAL_RCC_OscConfig+0x620>)
 80067fa:	4013      	ands	r3, r2
 80067fc:	60cb      	str	r3, [r1, #12]
 80067fe:	e03e      	b.n	800687e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d101      	bne.n	800680c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e039      	b.n	8006880 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800680c:	4b1e      	ldr	r3, [pc, #120]	; (8006888 <HAL_RCC_OscConfig+0x618>)
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f003 0203 	and.w	r2, r3, #3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	429a      	cmp	r2, r3
 800681e:	d12c      	bne.n	800687a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682a:	3b01      	subs	r3, #1
 800682c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800682e:	429a      	cmp	r2, r3
 8006830:	d123      	bne.n	800687a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800683e:	429a      	cmp	r2, r3
 8006840:	d11b      	bne.n	800687a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800684e:	429a      	cmp	r2, r3
 8006850:	d113      	bne.n	800687a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685c:	085b      	lsrs	r3, r3, #1
 800685e:	3b01      	subs	r3, #1
 8006860:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006862:	429a      	cmp	r2, r3
 8006864:	d109      	bne.n	800687a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006870:	085b      	lsrs	r3, r3, #1
 8006872:	3b01      	subs	r3, #1
 8006874:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006876:	429a      	cmp	r2, r3
 8006878:	d001      	beq.n	800687e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e000      	b.n	8006880 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3720      	adds	r7, #32
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	40021000 	.word	0x40021000
 800688c:	019f800c 	.word	0x019f800c
 8006890:	feeefffc 	.word	0xfeeefffc

08006894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800689e:	2300      	movs	r3, #0
 80068a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e11e      	b.n	8006aea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068ac:	4b91      	ldr	r3, [pc, #580]	; (8006af4 <HAL_RCC_ClockConfig+0x260>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 030f 	and.w	r3, r3, #15
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d910      	bls.n	80068dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ba:	4b8e      	ldr	r3, [pc, #568]	; (8006af4 <HAL_RCC_ClockConfig+0x260>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f023 020f 	bic.w	r2, r3, #15
 80068c2:	498c      	ldr	r1, [pc, #560]	; (8006af4 <HAL_RCC_ClockConfig+0x260>)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ca:	4b8a      	ldr	r3, [pc, #552]	; (8006af4 <HAL_RCC_ClockConfig+0x260>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 030f 	and.w	r3, r3, #15
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d001      	beq.n	80068dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e106      	b.n	8006aea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0301 	and.w	r3, r3, #1
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d073      	beq.n	80069d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d129      	bne.n	8006944 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068f0:	4b81      	ldr	r3, [pc, #516]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d101      	bne.n	8006900 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e0f4      	b.n	8006aea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006900:	f000 f972 	bl	8006be8 <RCC_GetSysClockFreqFromPLLSource>
 8006904:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	4a7c      	ldr	r2, [pc, #496]	; (8006afc <HAL_RCC_ClockConfig+0x268>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d93f      	bls.n	800698e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800690e:	4b7a      	ldr	r3, [pc, #488]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d009      	beq.n	800692e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006922:	2b00      	cmp	r3, #0
 8006924:	d033      	beq.n	800698e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800692a:	2b00      	cmp	r3, #0
 800692c:	d12f      	bne.n	800698e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800692e:	4b72      	ldr	r3, [pc, #456]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006936:	4a70      	ldr	r2, [pc, #448]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 8006938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800693c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800693e:	2380      	movs	r3, #128	; 0x80
 8006940:	617b      	str	r3, [r7, #20]
 8006942:	e024      	b.n	800698e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	2b02      	cmp	r3, #2
 800694a:	d107      	bne.n	800695c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800694c:	4b6a      	ldr	r3, [pc, #424]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d109      	bne.n	800696c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e0c6      	b.n	8006aea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800695c:	4b66      	ldr	r3, [pc, #408]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e0be      	b.n	8006aea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800696c:	f000 f8ce 	bl	8006b0c <HAL_RCC_GetSysClockFreq>
 8006970:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	4a61      	ldr	r2, [pc, #388]	; (8006afc <HAL_RCC_ClockConfig+0x268>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d909      	bls.n	800698e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800697a:	4b5f      	ldr	r3, [pc, #380]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006982:	4a5d      	ldr	r2, [pc, #372]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 8006984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006988:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800698a:	2380      	movs	r3, #128	; 0x80
 800698c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800698e:	4b5a      	ldr	r3, [pc, #360]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f023 0203 	bic.w	r2, r3, #3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	4957      	ldr	r1, [pc, #348]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 800699c:	4313      	orrs	r3, r2
 800699e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069a0:	f7fa ffe0 	bl	8001964 <HAL_GetTick>
 80069a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069a6:	e00a      	b.n	80069be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069a8:	f7fa ffdc 	bl	8001964 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d901      	bls.n	80069be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e095      	b.n	8006aea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069be:	4b4e      	ldr	r3, [pc, #312]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f003 020c 	and.w	r2, r3, #12
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d1eb      	bne.n	80069a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d023      	beq.n	8006a24 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0304 	and.w	r3, r3, #4
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d005      	beq.n	80069f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069e8:	4b43      	ldr	r3, [pc, #268]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	4a42      	ldr	r2, [pc, #264]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 80069ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80069f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0308 	and.w	r3, r3, #8
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d007      	beq.n	8006a10 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006a00:	4b3d      	ldr	r3, [pc, #244]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006a08:	4a3b      	ldr	r2, [pc, #236]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 8006a0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006a0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a10:	4b39      	ldr	r3, [pc, #228]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	4936      	ldr	r1, [pc, #216]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	608b      	str	r3, [r1, #8]
 8006a22:	e008      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	2b80      	cmp	r3, #128	; 0x80
 8006a28:	d105      	bne.n	8006a36 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006a2a:	4b33      	ldr	r3, [pc, #204]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	4a32      	ldr	r2, [pc, #200]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 8006a30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a34:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a36:	4b2f      	ldr	r3, [pc, #188]	; (8006af4 <HAL_RCC_ClockConfig+0x260>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 030f 	and.w	r3, r3, #15
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d21d      	bcs.n	8006a80 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a44:	4b2b      	ldr	r3, [pc, #172]	; (8006af4 <HAL_RCC_ClockConfig+0x260>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f023 020f 	bic.w	r2, r3, #15
 8006a4c:	4929      	ldr	r1, [pc, #164]	; (8006af4 <HAL_RCC_ClockConfig+0x260>)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006a54:	f7fa ff86 	bl	8001964 <HAL_GetTick>
 8006a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a5a:	e00a      	b.n	8006a72 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a5c:	f7fa ff82 	bl	8001964 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e03b      	b.n	8006aea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a72:	4b20      	ldr	r3, [pc, #128]	; (8006af4 <HAL_RCC_ClockConfig+0x260>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 030f 	and.w	r3, r3, #15
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d1ed      	bne.n	8006a5c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0304 	and.w	r3, r3, #4
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d008      	beq.n	8006a9e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a8c:	4b1a      	ldr	r3, [pc, #104]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	4917      	ldr	r1, [pc, #92]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0308 	and.w	r3, r3, #8
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d009      	beq.n	8006abe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006aaa:	4b13      	ldr	r3, [pc, #76]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	490f      	ldr	r1, [pc, #60]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006abe:	f000 f825 	bl	8006b0c <HAL_RCC_GetSysClockFreq>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	4b0c      	ldr	r3, [pc, #48]	; (8006af8 <HAL_RCC_ClockConfig+0x264>)
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	091b      	lsrs	r3, r3, #4
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	490c      	ldr	r1, [pc, #48]	; (8006b00 <HAL_RCC_ClockConfig+0x26c>)
 8006ad0:	5ccb      	ldrb	r3, [r1, r3]
 8006ad2:	f003 031f 	and.w	r3, r3, #31
 8006ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8006ada:	4a0a      	ldr	r2, [pc, #40]	; (8006b04 <HAL_RCC_ClockConfig+0x270>)
 8006adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006ade:	4b0a      	ldr	r3, [pc, #40]	; (8006b08 <HAL_RCC_ClockConfig+0x274>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fa fef2 	bl	80018cc <HAL_InitTick>
 8006ae8:	4603      	mov	r3, r0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	40022000 	.word	0x40022000
 8006af8:	40021000 	.word	0x40021000
 8006afc:	04c4b400 	.word	0x04c4b400
 8006b00:	0800d618 	.word	0x0800d618
 8006b04:	20000008 	.word	0x20000008
 8006b08:	2000000c 	.word	0x2000000c

08006b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006b12:	4b2c      	ldr	r3, [pc, #176]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f003 030c 	and.w	r3, r3, #12
 8006b1a:	2b04      	cmp	r3, #4
 8006b1c:	d102      	bne.n	8006b24 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006b1e:	4b2a      	ldr	r3, [pc, #168]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b20:	613b      	str	r3, [r7, #16]
 8006b22:	e047      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006b24:	4b27      	ldr	r3, [pc, #156]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f003 030c 	and.w	r3, r3, #12
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d102      	bne.n	8006b36 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006b30:	4b26      	ldr	r3, [pc, #152]	; (8006bcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b32:	613b      	str	r3, [r7, #16]
 8006b34:	e03e      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006b36:	4b23      	ldr	r3, [pc, #140]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f003 030c 	and.w	r3, r3, #12
 8006b3e:	2b0c      	cmp	r3, #12
 8006b40:	d136      	bne.n	8006bb0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b42:	4b20      	ldr	r3, [pc, #128]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	f003 0303 	and.w	r3, r3, #3
 8006b4a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b4c:	4b1d      	ldr	r3, [pc, #116]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	091b      	lsrs	r3, r3, #4
 8006b52:	f003 030f 	and.w	r3, r3, #15
 8006b56:	3301      	adds	r3, #1
 8006b58:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d10c      	bne.n	8006b7a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b60:	4a1a      	ldr	r2, [pc, #104]	; (8006bcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b68:	4a16      	ldr	r2, [pc, #88]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b6a:	68d2      	ldr	r2, [r2, #12]
 8006b6c:	0a12      	lsrs	r2, r2, #8
 8006b6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b72:	fb02 f303 	mul.w	r3, r2, r3
 8006b76:	617b      	str	r3, [r7, #20]
      break;
 8006b78:	e00c      	b.n	8006b94 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b7a:	4a13      	ldr	r2, [pc, #76]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b82:	4a10      	ldr	r2, [pc, #64]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b84:	68d2      	ldr	r2, [r2, #12]
 8006b86:	0a12      	lsrs	r2, r2, #8
 8006b88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b8c:	fb02 f303 	mul.w	r3, r2, r3
 8006b90:	617b      	str	r3, [r7, #20]
      break;
 8006b92:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b94:	4b0b      	ldr	r3, [pc, #44]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	0e5b      	lsrs	r3, r3, #25
 8006b9a:	f003 0303 	and.w	r3, r3, #3
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bac:	613b      	str	r3, [r7, #16]
 8006bae:	e001      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006bb4:	693b      	ldr	r3, [r7, #16]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	371c      	adds	r7, #28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	40021000 	.word	0x40021000
 8006bc8:	00f42400 	.word	0x00f42400
 8006bcc:	007a1200 	.word	0x007a1200

08006bd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bd4:	4b03      	ldr	r3, [pc, #12]	; (8006be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	20000008 	.word	0x20000008

08006be8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006bee:	4b1e      	ldr	r3, [pc, #120]	; (8006c68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f003 0303 	and.w	r3, r3, #3
 8006bf6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006bf8:	4b1b      	ldr	r3, [pc, #108]	; (8006c68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	091b      	lsrs	r3, r3, #4
 8006bfe:	f003 030f 	and.w	r3, r3, #15
 8006c02:	3301      	adds	r3, #1
 8006c04:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	2b03      	cmp	r3, #3
 8006c0a:	d10c      	bne.n	8006c26 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c0c:	4a17      	ldr	r2, [pc, #92]	; (8006c6c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c14:	4a14      	ldr	r2, [pc, #80]	; (8006c68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c16:	68d2      	ldr	r2, [r2, #12]
 8006c18:	0a12      	lsrs	r2, r2, #8
 8006c1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006c1e:	fb02 f303 	mul.w	r3, r2, r3
 8006c22:	617b      	str	r3, [r7, #20]
    break;
 8006c24:	e00c      	b.n	8006c40 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c26:	4a12      	ldr	r2, [pc, #72]	; (8006c70 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c2e:	4a0e      	ldr	r2, [pc, #56]	; (8006c68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c30:	68d2      	ldr	r2, [r2, #12]
 8006c32:	0a12      	lsrs	r2, r2, #8
 8006c34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006c38:	fb02 f303 	mul.w	r3, r2, r3
 8006c3c:	617b      	str	r3, [r7, #20]
    break;
 8006c3e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c40:	4b09      	ldr	r3, [pc, #36]	; (8006c68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	0e5b      	lsrs	r3, r3, #25
 8006c46:	f003 0303 	and.w	r3, r3, #3
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c58:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006c5a:	687b      	ldr	r3, [r7, #4]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	371c      	adds	r7, #28
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	40021000 	.word	0x40021000
 8006c6c:	007a1200 	.word	0x007a1200
 8006c70:	00f42400 	.word	0x00f42400

08006c74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c80:	2300      	movs	r3, #0
 8006c82:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 8098 	beq.w	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c92:	2300      	movs	r3, #0
 8006c94:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c96:	4b43      	ldr	r3, [pc, #268]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10d      	bne.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ca2:	4b40      	ldr	r3, [pc, #256]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca6:	4a3f      	ldr	r2, [pc, #252]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cac:	6593      	str	r3, [r2, #88]	; 0x58
 8006cae:	4b3d      	ldr	r3, [pc, #244]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cb6:	60bb      	str	r3, [r7, #8]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cbe:	4b3a      	ldr	r3, [pc, #232]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a39      	ldr	r2, [pc, #228]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cca:	f7fa fe4b 	bl	8001964 <HAL_GetTick>
 8006cce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cd0:	e009      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cd2:	f7fa fe47 	bl	8001964 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d902      	bls.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	74fb      	strb	r3, [r7, #19]
        break;
 8006ce4:	e005      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ce6:	4b30      	ldr	r3, [pc, #192]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d0ef      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006cf2:	7cfb      	ldrb	r3, [r7, #19]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d159      	bne.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006cf8:	4b2a      	ldr	r3, [pc, #168]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d02:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d01e      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d019      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d14:	4b23      	ldr	r3, [pc, #140]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d20:	4b20      	ldr	r3, [pc, #128]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d26:	4a1f      	ldr	r2, [pc, #124]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d30:	4b1c      	ldr	r3, [pc, #112]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d36:	4a1b      	ldr	r2, [pc, #108]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d40:	4a18      	ldr	r2, [pc, #96]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d016      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d52:	f7fa fe07 	bl	8001964 <HAL_GetTick>
 8006d56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d58:	e00b      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d5a:	f7fa fe03 	bl	8001964 <HAL_GetTick>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d902      	bls.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	74fb      	strb	r3, [r7, #19]
            break;
 8006d70:	e006      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d72:	4b0c      	ldr	r3, [pc, #48]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d0ec      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006d80:	7cfb      	ldrb	r3, [r7, #19]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10b      	bne.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d86:	4b07      	ldr	r3, [pc, #28]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d94:	4903      	ldr	r1, [pc, #12]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006d9c:	e008      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d9e:	7cfb      	ldrb	r3, [r7, #19]
 8006da0:	74bb      	strb	r3, [r7, #18]
 8006da2:	e005      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006da4:	40021000 	.word	0x40021000
 8006da8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dac:	7cfb      	ldrb	r3, [r7, #19]
 8006dae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006db0:	7c7b      	ldrb	r3, [r7, #17]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d105      	bne.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006db6:	4ba7      	ldr	r3, [pc, #668]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dba:	4aa6      	ldr	r2, [pc, #664]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dc0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00a      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006dce:	4ba1      	ldr	r3, [pc, #644]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd4:	f023 0203 	bic.w	r2, r3, #3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	499d      	ldr	r1, [pc, #628]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00a      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006df0:	4b98      	ldr	r3, [pc, #608]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006df6:	f023 020c 	bic.w	r2, r3, #12
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	4995      	ldr	r1, [pc, #596]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0304 	and.w	r3, r3, #4
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00a      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e12:	4b90      	ldr	r3, [pc, #576]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	498c      	ldr	r1, [pc, #560]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0308 	and.w	r3, r3, #8
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00a      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e34:	4b87      	ldr	r3, [pc, #540]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	4984      	ldr	r1, [pc, #528]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0310 	and.w	r3, r3, #16
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00a      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e56:	4b7f      	ldr	r3, [pc, #508]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	497b      	ldr	r1, [pc, #492]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0320 	and.w	r3, r3, #32
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00a      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e78:	4b76      	ldr	r3, [pc, #472]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	4973      	ldr	r1, [pc, #460]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e9a:	4b6e      	ldr	r3, [pc, #440]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ea0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	69db      	ldr	r3, [r3, #28]
 8006ea8:	496a      	ldr	r1, [pc, #424]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00a      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ebc:	4b65      	ldr	r3, [pc, #404]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ec2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	4962      	ldr	r1, [pc, #392]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ede:	4b5d      	ldr	r3, [pc, #372]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eec:	4959      	ldr	r1, [pc, #356]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00a      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f00:	4b54      	ldr	r3, [pc, #336]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f06:	f023 0203 	bic.w	r2, r3, #3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0e:	4951      	ldr	r1, [pc, #324]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00a      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f22:	4b4c      	ldr	r3, [pc, #304]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f30:	4948      	ldr	r1, [pc, #288]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d015      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f44:	4b43      	ldr	r3, [pc, #268]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f52:	4940      	ldr	r1, [pc, #256]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f62:	d105      	bne.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f64:	4b3b      	ldr	r3, [pc, #236]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	4a3a      	ldr	r2, [pc, #232]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d015      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f7c:	4b35      	ldr	r3, [pc, #212]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8a:	4932      	ldr	r1, [pc, #200]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f9a:	d105      	bne.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f9c:	4b2d      	ldr	r3, [pc, #180]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	4a2c      	ldr	r2, [pc, #176]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fa6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d015      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006fb4:	4b27      	ldr	r3, [pc, #156]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc2:	4924      	ldr	r1, [pc, #144]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fd2:	d105      	bne.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fd4:	4b1f      	ldr	r3, [pc, #124]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	4a1e      	ldr	r2, [pc, #120]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fde:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d015      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fec:	4b19      	ldr	r3, [pc, #100]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffa:	4916      	ldr	r1, [pc, #88]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007006:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800700a:	d105      	bne.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800700c:	4b11      	ldr	r3, [pc, #68]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	4a10      	ldr	r2, [pc, #64]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007016:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d019      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007024:	4b0b      	ldr	r3, [pc, #44]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800702a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	4908      	ldr	r1, [pc, #32]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007034:	4313      	orrs	r3, r2
 8007036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007042:	d109      	bne.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007044:	4b03      	ldr	r3, [pc, #12]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	4a02      	ldr	r2, [pc, #8]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800704a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800704e:	60d3      	str	r3, [r2, #12]
 8007050:	e002      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007052:	bf00      	nop
 8007054:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d015      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007064:	4b29      	ldr	r3, [pc, #164]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800706a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007072:	4926      	ldr	r1, [pc, #152]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007074:	4313      	orrs	r3, r2
 8007076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800707e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007082:	d105      	bne.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007084:	4b21      	ldr	r3, [pc, #132]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	4a20      	ldr	r2, [pc, #128]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800708a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800708e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d015      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800709c:	4b1b      	ldr	r3, [pc, #108]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800709e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070aa:	4918      	ldr	r1, [pc, #96]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ba:	d105      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80070bc:	4b13      	ldr	r3, [pc, #76]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	4a12      	ldr	r2, [pc, #72]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070c6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d015      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80070d4:	4b0d      	ldr	r3, [pc, #52]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070e2:	490a      	ldr	r1, [pc, #40]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070f2:	d105      	bne.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070f4:	4b05      	ldr	r3, [pc, #20]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	4a04      	ldr	r2, [pc, #16]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007100:	7cbb      	ldrb	r3, [r7, #18]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3718      	adds	r7, #24
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	40021000 	.word	0x40021000

08007110 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e049      	b.n	80071b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d106      	bne.n	800713c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7fa fa28 	bl	800158c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2202      	movs	r2, #2
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	3304      	adds	r3, #4
 800714c:	4619      	mov	r1, r3
 800714e:	4610      	mov	r0, r2
 8007150:	f000 fb74 	bl	800783c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
	...

080071c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d001      	beq.n	80071d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e054      	b.n	8007282 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2202      	movs	r2, #2
 80071dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 0201 	orr.w	r2, r2, #1
 80071ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a26      	ldr	r2, [pc, #152]	; (8007290 <HAL_TIM_Base_Start_IT+0xd0>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d022      	beq.n	8007240 <HAL_TIM_Base_Start_IT+0x80>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007202:	d01d      	beq.n	8007240 <HAL_TIM_Base_Start_IT+0x80>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a22      	ldr	r2, [pc, #136]	; (8007294 <HAL_TIM_Base_Start_IT+0xd4>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d018      	beq.n	8007240 <HAL_TIM_Base_Start_IT+0x80>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a21      	ldr	r2, [pc, #132]	; (8007298 <HAL_TIM_Base_Start_IT+0xd8>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d013      	beq.n	8007240 <HAL_TIM_Base_Start_IT+0x80>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a1f      	ldr	r2, [pc, #124]	; (800729c <HAL_TIM_Base_Start_IT+0xdc>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d00e      	beq.n	8007240 <HAL_TIM_Base_Start_IT+0x80>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a1e      	ldr	r2, [pc, #120]	; (80072a0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d009      	beq.n	8007240 <HAL_TIM_Base_Start_IT+0x80>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a1c      	ldr	r2, [pc, #112]	; (80072a4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d004      	beq.n	8007240 <HAL_TIM_Base_Start_IT+0x80>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a1b      	ldr	r2, [pc, #108]	; (80072a8 <HAL_TIM_Base_Start_IT+0xe8>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d115      	bne.n	800726c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689a      	ldr	r2, [r3, #8]
 8007246:	4b19      	ldr	r3, [pc, #100]	; (80072ac <HAL_TIM_Base_Start_IT+0xec>)
 8007248:	4013      	ands	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b06      	cmp	r3, #6
 8007250:	d015      	beq.n	800727e <HAL_TIM_Base_Start_IT+0xbe>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007258:	d011      	beq.n	800727e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f042 0201 	orr.w	r2, r2, #1
 8007268:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800726a:	e008      	b.n	800727e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f042 0201 	orr.w	r2, r2, #1
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	e000      	b.n	8007280 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800727e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	40012c00 	.word	0x40012c00
 8007294:	40000400 	.word	0x40000400
 8007298:	40000800 	.word	0x40000800
 800729c:	40000c00 	.word	0x40000c00
 80072a0:	40013400 	.word	0x40013400
 80072a4:	40014000 	.word	0x40014000
 80072a8:	40015000 	.word	0x40015000
 80072ac:	00010007 	.word	0x00010007

080072b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68da      	ldr	r2, [r3, #12]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 0201 	bic.w	r2, r2, #1
 80072c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6a1a      	ldr	r2, [r3, #32]
 80072ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80072d2:	4013      	ands	r3, r2
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10f      	bne.n	80072f8 <HAL_TIM_Base_Stop_IT+0x48>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6a1a      	ldr	r2, [r3, #32]
 80072de:	f244 4344 	movw	r3, #17476	; 0x4444
 80072e2:	4013      	ands	r3, r2
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d107      	bne.n	80072f8 <HAL_TIM_Base_Stop_IT+0x48>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 0201 	bic.w	r2, r2, #1
 80072f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b084      	sub	sp, #16
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	f003 0302 	and.w	r3, r3, #2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d020      	beq.n	8007372 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d01b      	beq.n	8007372 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f06f 0202 	mvn.w	r2, #2
 8007342:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	f003 0303 	and.w	r3, r3, #3
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fa51 	bl	8007800 <HAL_TIM_IC_CaptureCallback>
 800735e:	e005      	b.n	800736c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fa43 	bl	80077ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fa54 	bl	8007814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	f003 0304 	and.w	r3, r3, #4
 8007378:	2b00      	cmp	r3, #0
 800737a:	d020      	beq.n	80073be <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f003 0304 	and.w	r3, r3, #4
 8007382:	2b00      	cmp	r3, #0
 8007384:	d01b      	beq.n	80073be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f06f 0204 	mvn.w	r2, #4
 800738e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d003      	beq.n	80073ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fa2b 	bl	8007800 <HAL_TIM_IC_CaptureCallback>
 80073aa:	e005      	b.n	80073b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fa1d 	bl	80077ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fa2e 	bl	8007814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f003 0308 	and.w	r3, r3, #8
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d020      	beq.n	800740a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f003 0308 	and.w	r3, r3, #8
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d01b      	beq.n	800740a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f06f 0208 	mvn.w	r2, #8
 80073da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2204      	movs	r2, #4
 80073e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	69db      	ldr	r3, [r3, #28]
 80073e8:	f003 0303 	and.w	r3, r3, #3
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fa05 	bl	8007800 <HAL_TIM_IC_CaptureCallback>
 80073f6:	e005      	b.n	8007404 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f9f7 	bl	80077ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fa08 	bl	8007814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	f003 0310 	and.w	r3, r3, #16
 8007410:	2b00      	cmp	r3, #0
 8007412:	d020      	beq.n	8007456 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f003 0310 	and.w	r3, r3, #16
 800741a:	2b00      	cmp	r3, #0
 800741c:	d01b      	beq.n	8007456 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f06f 0210 	mvn.w	r2, #16
 8007426:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2208      	movs	r2, #8
 800742c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007438:	2b00      	cmp	r3, #0
 800743a:	d003      	beq.n	8007444 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f9df 	bl	8007800 <HAL_TIM_IC_CaptureCallback>
 8007442:	e005      	b.n	8007450 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f9d1 	bl	80077ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f9e2 	bl	8007814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00c      	beq.n	800747a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f003 0301 	and.w	r3, r3, #1
 8007466:	2b00      	cmp	r3, #0
 8007468:	d007      	beq.n	800747a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f06f 0201 	mvn.w	r2, #1
 8007472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f9af 	bl	80077d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007480:	2b00      	cmp	r3, #0
 8007482:	d104      	bne.n	800748e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00c      	beq.n	80074a8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007494:	2b00      	cmp	r3, #0
 8007496:	d007      	beq.n	80074a8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80074a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fbba 	bl	8007c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00c      	beq.n	80074cc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d007      	beq.n	80074cc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80074c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fbb2 	bl	8007c30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00c      	beq.n	80074f0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d007      	beq.n	80074f0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f99c 	bl	8007828 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f003 0320 	and.w	r3, r3, #32
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00c      	beq.n	8007514 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f003 0320 	and.w	r3, r3, #32
 8007500:	2b00      	cmp	r3, #0
 8007502:	d007      	beq.n	8007514 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f06f 0220 	mvn.w	r2, #32
 800750c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fb7a 	bl	8007c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00c      	beq.n	8007538 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d007      	beq.n	8007538 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fb86 	bl	8007c44 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00c      	beq.n	800755c <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007548:	2b00      	cmp	r3, #0
 800754a:	d007      	beq.n	800755c <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fb7e 	bl	8007c58 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00c      	beq.n	8007580 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d007      	beq.n	8007580 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fb76 	bl	8007c6c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00c      	beq.n	80075a4 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d007      	beq.n	80075a4 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800759c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fb6e 	bl	8007c80 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075a4:	bf00      	nop
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d101      	bne.n	80075c8 <HAL_TIM_ConfigClockSource+0x1c>
 80075c4:	2302      	movs	r3, #2
 80075c6:	e0f6      	b.n	80077b6 <HAL_TIM_ConfigClockSource+0x20a>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80075e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80075ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a6f      	ldr	r2, [pc, #444]	; (80077c0 <HAL_TIM_ConfigClockSource+0x214>)
 8007602:	4293      	cmp	r3, r2
 8007604:	f000 80c1 	beq.w	800778a <HAL_TIM_ConfigClockSource+0x1de>
 8007608:	4a6d      	ldr	r2, [pc, #436]	; (80077c0 <HAL_TIM_ConfigClockSource+0x214>)
 800760a:	4293      	cmp	r3, r2
 800760c:	f200 80c6 	bhi.w	800779c <HAL_TIM_ConfigClockSource+0x1f0>
 8007610:	4a6c      	ldr	r2, [pc, #432]	; (80077c4 <HAL_TIM_ConfigClockSource+0x218>)
 8007612:	4293      	cmp	r3, r2
 8007614:	f000 80b9 	beq.w	800778a <HAL_TIM_ConfigClockSource+0x1de>
 8007618:	4a6a      	ldr	r2, [pc, #424]	; (80077c4 <HAL_TIM_ConfigClockSource+0x218>)
 800761a:	4293      	cmp	r3, r2
 800761c:	f200 80be 	bhi.w	800779c <HAL_TIM_ConfigClockSource+0x1f0>
 8007620:	4a69      	ldr	r2, [pc, #420]	; (80077c8 <HAL_TIM_ConfigClockSource+0x21c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	f000 80b1 	beq.w	800778a <HAL_TIM_ConfigClockSource+0x1de>
 8007628:	4a67      	ldr	r2, [pc, #412]	; (80077c8 <HAL_TIM_ConfigClockSource+0x21c>)
 800762a:	4293      	cmp	r3, r2
 800762c:	f200 80b6 	bhi.w	800779c <HAL_TIM_ConfigClockSource+0x1f0>
 8007630:	4a66      	ldr	r2, [pc, #408]	; (80077cc <HAL_TIM_ConfigClockSource+0x220>)
 8007632:	4293      	cmp	r3, r2
 8007634:	f000 80a9 	beq.w	800778a <HAL_TIM_ConfigClockSource+0x1de>
 8007638:	4a64      	ldr	r2, [pc, #400]	; (80077cc <HAL_TIM_ConfigClockSource+0x220>)
 800763a:	4293      	cmp	r3, r2
 800763c:	f200 80ae 	bhi.w	800779c <HAL_TIM_ConfigClockSource+0x1f0>
 8007640:	4a63      	ldr	r2, [pc, #396]	; (80077d0 <HAL_TIM_ConfigClockSource+0x224>)
 8007642:	4293      	cmp	r3, r2
 8007644:	f000 80a1 	beq.w	800778a <HAL_TIM_ConfigClockSource+0x1de>
 8007648:	4a61      	ldr	r2, [pc, #388]	; (80077d0 <HAL_TIM_ConfigClockSource+0x224>)
 800764a:	4293      	cmp	r3, r2
 800764c:	f200 80a6 	bhi.w	800779c <HAL_TIM_ConfigClockSource+0x1f0>
 8007650:	4a60      	ldr	r2, [pc, #384]	; (80077d4 <HAL_TIM_ConfigClockSource+0x228>)
 8007652:	4293      	cmp	r3, r2
 8007654:	f000 8099 	beq.w	800778a <HAL_TIM_ConfigClockSource+0x1de>
 8007658:	4a5e      	ldr	r2, [pc, #376]	; (80077d4 <HAL_TIM_ConfigClockSource+0x228>)
 800765a:	4293      	cmp	r3, r2
 800765c:	f200 809e 	bhi.w	800779c <HAL_TIM_ConfigClockSource+0x1f0>
 8007660:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007664:	f000 8091 	beq.w	800778a <HAL_TIM_ConfigClockSource+0x1de>
 8007668:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800766c:	f200 8096 	bhi.w	800779c <HAL_TIM_ConfigClockSource+0x1f0>
 8007670:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007674:	f000 8089 	beq.w	800778a <HAL_TIM_ConfigClockSource+0x1de>
 8007678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800767c:	f200 808e 	bhi.w	800779c <HAL_TIM_ConfigClockSource+0x1f0>
 8007680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007684:	d03e      	beq.n	8007704 <HAL_TIM_ConfigClockSource+0x158>
 8007686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800768a:	f200 8087 	bhi.w	800779c <HAL_TIM_ConfigClockSource+0x1f0>
 800768e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007692:	f000 8086 	beq.w	80077a2 <HAL_TIM_ConfigClockSource+0x1f6>
 8007696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800769a:	d87f      	bhi.n	800779c <HAL_TIM_ConfigClockSource+0x1f0>
 800769c:	2b70      	cmp	r3, #112	; 0x70
 800769e:	d01a      	beq.n	80076d6 <HAL_TIM_ConfigClockSource+0x12a>
 80076a0:	2b70      	cmp	r3, #112	; 0x70
 80076a2:	d87b      	bhi.n	800779c <HAL_TIM_ConfigClockSource+0x1f0>
 80076a4:	2b60      	cmp	r3, #96	; 0x60
 80076a6:	d050      	beq.n	800774a <HAL_TIM_ConfigClockSource+0x19e>
 80076a8:	2b60      	cmp	r3, #96	; 0x60
 80076aa:	d877      	bhi.n	800779c <HAL_TIM_ConfigClockSource+0x1f0>
 80076ac:	2b50      	cmp	r3, #80	; 0x50
 80076ae:	d03c      	beq.n	800772a <HAL_TIM_ConfigClockSource+0x17e>
 80076b0:	2b50      	cmp	r3, #80	; 0x50
 80076b2:	d873      	bhi.n	800779c <HAL_TIM_ConfigClockSource+0x1f0>
 80076b4:	2b40      	cmp	r3, #64	; 0x40
 80076b6:	d058      	beq.n	800776a <HAL_TIM_ConfigClockSource+0x1be>
 80076b8:	2b40      	cmp	r3, #64	; 0x40
 80076ba:	d86f      	bhi.n	800779c <HAL_TIM_ConfigClockSource+0x1f0>
 80076bc:	2b30      	cmp	r3, #48	; 0x30
 80076be:	d064      	beq.n	800778a <HAL_TIM_ConfigClockSource+0x1de>
 80076c0:	2b30      	cmp	r3, #48	; 0x30
 80076c2:	d86b      	bhi.n	800779c <HAL_TIM_ConfigClockSource+0x1f0>
 80076c4:	2b20      	cmp	r3, #32
 80076c6:	d060      	beq.n	800778a <HAL_TIM_ConfigClockSource+0x1de>
 80076c8:	2b20      	cmp	r3, #32
 80076ca:	d867      	bhi.n	800779c <HAL_TIM_ConfigClockSource+0x1f0>
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d05c      	beq.n	800778a <HAL_TIM_ConfigClockSource+0x1de>
 80076d0:	2b10      	cmp	r3, #16
 80076d2:	d05a      	beq.n	800778a <HAL_TIM_ConfigClockSource+0x1de>
 80076d4:	e062      	b.n	800779c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076e6:	f000 f9d9 	bl	8007a9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	609a      	str	r2, [r3, #8]
      break;
 8007702:	e04f      	b.n	80077a4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007714:	f000 f9c2 	bl	8007a9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689a      	ldr	r2, [r3, #8]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007726:	609a      	str	r2, [r3, #8]
      break;
 8007728:	e03c      	b.n	80077a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007736:	461a      	mov	r2, r3
 8007738:	f000 f934 	bl	80079a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2150      	movs	r1, #80	; 0x50
 8007742:	4618      	mov	r0, r3
 8007744:	f000 f98d 	bl	8007a62 <TIM_ITRx_SetConfig>
      break;
 8007748:	e02c      	b.n	80077a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007756:	461a      	mov	r2, r3
 8007758:	f000 f953 	bl	8007a02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2160      	movs	r1, #96	; 0x60
 8007762:	4618      	mov	r0, r3
 8007764:	f000 f97d 	bl	8007a62 <TIM_ITRx_SetConfig>
      break;
 8007768:	e01c      	b.n	80077a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007776:	461a      	mov	r2, r3
 8007778:	f000 f914 	bl	80079a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2140      	movs	r1, #64	; 0x40
 8007782:	4618      	mov	r0, r3
 8007784:	f000 f96d 	bl	8007a62 <TIM_ITRx_SetConfig>
      break;
 8007788:	e00c      	b.n	80077a4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4619      	mov	r1, r3
 8007794:	4610      	mov	r0, r2
 8007796:	f000 f964 	bl	8007a62 <TIM_ITRx_SetConfig>
      break;
 800779a:	e003      	b.n	80077a4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	73fb      	strb	r3, [r7, #15]
      break;
 80077a0:	e000      	b.n	80077a4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80077a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	00100070 	.word	0x00100070
 80077c4:	00100060 	.word	0x00100060
 80077c8:	00100050 	.word	0x00100050
 80077cc:	00100040 	.word	0x00100040
 80077d0:	00100030 	.word	0x00100030
 80077d4:	00100020 	.word	0x00100020

080077d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a4c      	ldr	r2, [pc, #304]	; (8007980 <TIM_Base_SetConfig+0x144>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d017      	beq.n	8007884 <TIM_Base_SetConfig+0x48>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800785a:	d013      	beq.n	8007884 <TIM_Base_SetConfig+0x48>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a49      	ldr	r2, [pc, #292]	; (8007984 <TIM_Base_SetConfig+0x148>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d00f      	beq.n	8007884 <TIM_Base_SetConfig+0x48>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a48      	ldr	r2, [pc, #288]	; (8007988 <TIM_Base_SetConfig+0x14c>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d00b      	beq.n	8007884 <TIM_Base_SetConfig+0x48>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a47      	ldr	r2, [pc, #284]	; (800798c <TIM_Base_SetConfig+0x150>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d007      	beq.n	8007884 <TIM_Base_SetConfig+0x48>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a46      	ldr	r2, [pc, #280]	; (8007990 <TIM_Base_SetConfig+0x154>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d003      	beq.n	8007884 <TIM_Base_SetConfig+0x48>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a45      	ldr	r2, [pc, #276]	; (8007994 <TIM_Base_SetConfig+0x158>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d108      	bne.n	8007896 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800788a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	4313      	orrs	r3, r2
 8007894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a39      	ldr	r2, [pc, #228]	; (8007980 <TIM_Base_SetConfig+0x144>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d023      	beq.n	80078e6 <TIM_Base_SetConfig+0xaa>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078a4:	d01f      	beq.n	80078e6 <TIM_Base_SetConfig+0xaa>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a36      	ldr	r2, [pc, #216]	; (8007984 <TIM_Base_SetConfig+0x148>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d01b      	beq.n	80078e6 <TIM_Base_SetConfig+0xaa>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a35      	ldr	r2, [pc, #212]	; (8007988 <TIM_Base_SetConfig+0x14c>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d017      	beq.n	80078e6 <TIM_Base_SetConfig+0xaa>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a34      	ldr	r2, [pc, #208]	; (800798c <TIM_Base_SetConfig+0x150>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d013      	beq.n	80078e6 <TIM_Base_SetConfig+0xaa>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a33      	ldr	r2, [pc, #204]	; (8007990 <TIM_Base_SetConfig+0x154>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d00f      	beq.n	80078e6 <TIM_Base_SetConfig+0xaa>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a33      	ldr	r2, [pc, #204]	; (8007998 <TIM_Base_SetConfig+0x15c>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d00b      	beq.n	80078e6 <TIM_Base_SetConfig+0xaa>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a32      	ldr	r2, [pc, #200]	; (800799c <TIM_Base_SetConfig+0x160>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d007      	beq.n	80078e6 <TIM_Base_SetConfig+0xaa>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a31      	ldr	r2, [pc, #196]	; (80079a0 <TIM_Base_SetConfig+0x164>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d003      	beq.n	80078e6 <TIM_Base_SetConfig+0xaa>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a2c      	ldr	r2, [pc, #176]	; (8007994 <TIM_Base_SetConfig+0x158>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d108      	bne.n	80078f8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	4313      	orrs	r3, r2
 8007904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	689a      	ldr	r2, [r3, #8]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a18      	ldr	r2, [pc, #96]	; (8007980 <TIM_Base_SetConfig+0x144>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d013      	beq.n	800794c <TIM_Base_SetConfig+0x110>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a1a      	ldr	r2, [pc, #104]	; (8007990 <TIM_Base_SetConfig+0x154>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d00f      	beq.n	800794c <TIM_Base_SetConfig+0x110>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a1a      	ldr	r2, [pc, #104]	; (8007998 <TIM_Base_SetConfig+0x15c>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d00b      	beq.n	800794c <TIM_Base_SetConfig+0x110>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a19      	ldr	r2, [pc, #100]	; (800799c <TIM_Base_SetConfig+0x160>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d007      	beq.n	800794c <TIM_Base_SetConfig+0x110>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a18      	ldr	r2, [pc, #96]	; (80079a0 <TIM_Base_SetConfig+0x164>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d003      	beq.n	800794c <TIM_Base_SetConfig+0x110>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a13      	ldr	r2, [pc, #76]	; (8007994 <TIM_Base_SetConfig+0x158>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d103      	bne.n	8007954 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	691a      	ldr	r2, [r3, #16]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	2b01      	cmp	r3, #1
 8007964:	d105      	bne.n	8007972 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f023 0201 	bic.w	r2, r3, #1
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	611a      	str	r2, [r3, #16]
  }
}
 8007972:	bf00      	nop
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	40012c00 	.word	0x40012c00
 8007984:	40000400 	.word	0x40000400
 8007988:	40000800 	.word	0x40000800
 800798c:	40000c00 	.word	0x40000c00
 8007990:	40013400 	.word	0x40013400
 8007994:	40015000 	.word	0x40015000
 8007998:	40014000 	.word	0x40014000
 800799c:	40014400 	.word	0x40014400
 80079a0:	40014800 	.word	0x40014800

080079a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b087      	sub	sp, #28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6a1b      	ldr	r3, [r3, #32]
 80079b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	f023 0201 	bic.w	r2, r3, #1
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	011b      	lsls	r3, r3, #4
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f023 030a 	bic.w	r3, r3, #10
 80079e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	621a      	str	r2, [r3, #32]
}
 80079f6:	bf00      	nop
 80079f8:	371c      	adds	r7, #28
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b087      	sub	sp, #28
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	60f8      	str	r0, [r7, #12]
 8007a0a:	60b9      	str	r1, [r7, #8]
 8007a0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6a1b      	ldr	r3, [r3, #32]
 8007a18:	f023 0210 	bic.w	r2, r3, #16
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	031b      	lsls	r3, r3, #12
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	011b      	lsls	r3, r3, #4
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	621a      	str	r2, [r3, #32]
}
 8007a56:	bf00      	nop
 8007a58:	371c      	adds	r7, #28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b085      	sub	sp, #20
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	f043 0307 	orr.w	r3, r3, #7
 8007a88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	609a      	str	r2, [r3, #8]
}
 8007a90:	bf00      	nop
 8007a92:	3714      	adds	r7, #20
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
 8007aa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ab6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	021a      	lsls	r2, r3, #8
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	431a      	orrs	r2, r3
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	697a      	ldr	r2, [r7, #20]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	609a      	str	r2, [r3, #8]
}
 8007ad0:	bf00      	nop
 8007ad2:	371c      	adds	r7, #28
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d101      	bne.n	8007af4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007af0:	2302      	movs	r3, #2
 8007af2:	e074      	b.n	8007bde <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a34      	ldr	r2, [pc, #208]	; (8007bec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d009      	beq.n	8007b32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a33      	ldr	r2, [pc, #204]	; (8007bf0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d004      	beq.n	8007b32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a31      	ldr	r2, [pc, #196]	; (8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d108      	bne.n	8007b44 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a21      	ldr	r2, [pc, #132]	; (8007bec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d022      	beq.n	8007bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b74:	d01d      	beq.n	8007bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a1f      	ldr	r2, [pc, #124]	; (8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d018      	beq.n	8007bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a1d      	ldr	r2, [pc, #116]	; (8007bfc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d013      	beq.n	8007bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a1c      	ldr	r2, [pc, #112]	; (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d00e      	beq.n	8007bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a15      	ldr	r2, [pc, #84]	; (8007bf0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d009      	beq.n	8007bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a18      	ldr	r2, [pc, #96]	; (8007c04 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d004      	beq.n	8007bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a11      	ldr	r2, [pc, #68]	; (8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d10c      	bne.n	8007bcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	40012c00 	.word	0x40012c00
 8007bf0:	40013400 	.word	0x40013400
 8007bf4:	40015000 	.word	0x40015000
 8007bf8:	40000400 	.word	0x40000400
 8007bfc:	40000800 	.word	0x40000800
 8007c00:	40000c00 	.word	0x40000c00
 8007c04:	40014000 	.word	0x40014000

08007c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007ca4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007ca8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b085      	sub	sp, #20
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007cca:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007cce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	43db      	mvns	r3, r3
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	1d3b      	adds	r3, r7, #4
 8007d02:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b09d      	sub	sp, #116	; 0x74
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	881b      	ldrh	r3, [r3, #0]
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d5a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	78db      	ldrb	r3, [r3, #3]
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d81f      	bhi.n	8007da6 <USB_ActivateEndpoint+0x72>
 8007d66:	a201      	add	r2, pc, #4	; (adr r2, 8007d6c <USB_ActivateEndpoint+0x38>)
 8007d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6c:	08007d7d 	.word	0x08007d7d
 8007d70:	08007d99 	.word	0x08007d99
 8007d74:	08007daf 	.word	0x08007daf
 8007d78:	08007d8b 	.word	0x08007d8b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007d7c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007d80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d84:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007d88:	e012      	b.n	8007db0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007d8a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007d8e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007d92:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007d96:	e00b      	b.n	8007db0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007d98:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007d9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007da0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007da4:	e004      	b.n	8007db0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007dac:	e000      	b.n	8007db0 <USB_ActivateEndpoint+0x7c>
      break;
 8007dae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	441a      	add	r2, r3
 8007dba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	4413      	add	r3, r2
 8007ddc:	881b      	ldrh	r3, [r3, #0]
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	b21b      	sxth	r3, r3
 8007de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dea:	b21a      	sxth	r2, r3
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	b21b      	sxth	r3, r3
 8007df2:	4313      	orrs	r3, r2
 8007df4:	b21b      	sxth	r3, r3
 8007df6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	441a      	add	r2, r3
 8007e04:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007e08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	7b1b      	ldrb	r3, [r3, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f040 8178 	bne.w	8008116 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	785b      	ldrb	r3, [r3, #1]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 8084 	beq.w	8007f38 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	61bb      	str	r3, [r7, #24]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	4413      	add	r3, r2
 8007e42:	61bb      	str	r3, [r7, #24]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	00da      	lsls	r2, r3, #3
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e52:	617b      	str	r3, [r7, #20]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	88db      	ldrh	r3, [r3, #6]
 8007e58:	085b      	lsrs	r3, r3, #1
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	005b      	lsls	r3, r3, #1
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	881b      	ldrh	r3, [r3, #0]
 8007e70:	827b      	strh	r3, [r7, #18]
 8007e72:	8a7b      	ldrh	r3, [r7, #18]
 8007e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d01b      	beq.n	8007eb4 <USB_ActivateEndpoint+0x180>
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	881b      	ldrh	r3, [r3, #0]
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e92:	823b      	strh	r3, [r7, #16]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	441a      	add	r2, r3
 8007e9e:	8a3b      	ldrh	r3, [r7, #16]
 8007ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	78db      	ldrb	r3, [r3, #3]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d020      	beq.n	8007efe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ed2:	81bb      	strh	r3, [r7, #12]
 8007ed4:	89bb      	ldrh	r3, [r7, #12]
 8007ed6:	f083 0320 	eor.w	r3, r3, #32
 8007eda:	81bb      	strh	r3, [r7, #12]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	441a      	add	r2, r3
 8007ee6:	89bb      	ldrh	r3, [r7, #12]
 8007ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	8013      	strh	r3, [r2, #0]
 8007efc:	e2d5      	b.n	80084aa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f14:	81fb      	strh	r3, [r7, #14]
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	441a      	add	r2, r3
 8007f20:	89fb      	ldrh	r3, [r7, #14]
 8007f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	8013      	strh	r3, [r2, #0]
 8007f36:	e2b8      	b.n	80084aa <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	633b      	str	r3, [r7, #48]	; 0x30
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	461a      	mov	r2, r3
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	4413      	add	r3, r2
 8007f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	00da      	lsls	r2, r3, #3
 8007f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f54:	4413      	add	r3, r2
 8007f56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	88db      	ldrh	r3, [r3, #6]
 8007f60:	085b      	lsrs	r3, r3, #1
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	005b      	lsls	r3, r3, #1
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	461a      	mov	r2, r3
 8007f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7c:	4413      	add	r3, r2
 8007f7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	00da      	lsls	r2, r3, #3
 8007f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f88:	4413      	add	r3, r2
 8007f8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	881b      	ldrh	r3, [r3, #0]
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	801a      	strh	r2, [r3, #0]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	2b3e      	cmp	r3, #62	; 0x3e
 8007fa6:	d91d      	bls.n	8007fe4 <USB_ActivateEndpoint+0x2b0>
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	095b      	lsrs	r3, r3, #5
 8007fae:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	f003 031f 	and.w	r3, r3, #31
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d102      	bne.n	8007fc2 <USB_ActivateEndpoint+0x28e>
 8007fbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc4:	881b      	ldrh	r3, [r3, #0]
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	029b      	lsls	r3, r3, #10
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	801a      	strh	r2, [r3, #0]
 8007fe2:	e026      	b.n	8008032 <USB_ActivateEndpoint+0x2fe>
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d10a      	bne.n	8008002 <USB_ActivateEndpoint+0x2ce>
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	881b      	ldrh	r3, [r3, #0]
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	801a      	strh	r2, [r3, #0]
 8008000:	e017      	b.n	8008032 <USB_ActivateEndpoint+0x2fe>
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	085b      	lsrs	r3, r3, #1
 8008008:	66bb      	str	r3, [r7, #104]	; 0x68
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	f003 0301 	and.w	r3, r3, #1
 8008012:	2b00      	cmp	r3, #0
 8008014:	d002      	beq.n	800801c <USB_ActivateEndpoint+0x2e8>
 8008016:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008018:	3301      	adds	r3, #1
 800801a:	66bb      	str	r3, [r7, #104]	; 0x68
 800801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801e:	881b      	ldrh	r3, [r3, #0]
 8008020:	b29a      	uxth	r2, r3
 8008022:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008024:	b29b      	uxth	r3, r3
 8008026:	029b      	lsls	r3, r3, #10
 8008028:	b29b      	uxth	r3, r3
 800802a:	4313      	orrs	r3, r2
 800802c:	b29a      	uxth	r2, r3
 800802e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008030:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4413      	add	r3, r2
 800803c:	881b      	ldrh	r3, [r3, #0]
 800803e:	847b      	strh	r3, [r7, #34]	; 0x22
 8008040:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d01b      	beq.n	8008082 <USB_ActivateEndpoint+0x34e>
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4413      	add	r3, r2
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	b29b      	uxth	r3, r3
 8008058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800805c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008060:	843b      	strh	r3, [r7, #32]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	441a      	add	r2, r3
 800806c:	8c3b      	ldrh	r3, [r7, #32]
 800806e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008076:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800807a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800807e:	b29b      	uxth	r3, r3
 8008080:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d124      	bne.n	80080d4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4413      	add	r3, r2
 8008094:	881b      	ldrh	r3, [r3, #0]
 8008096:	b29b      	uxth	r3, r3
 8008098:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800809c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a0:	83bb      	strh	r3, [r7, #28]
 80080a2:	8bbb      	ldrh	r3, [r7, #28]
 80080a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80080a8:	83bb      	strh	r3, [r7, #28]
 80080aa:	8bbb      	ldrh	r3, [r7, #28]
 80080ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80080b0:	83bb      	strh	r3, [r7, #28]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	441a      	add	r2, r3
 80080bc:	8bbb      	ldrh	r3, [r7, #28]
 80080be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	8013      	strh	r3, [r2, #0]
 80080d2:	e1ea      	b.n	80084aa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ea:	83fb      	strh	r3, [r7, #30]
 80080ec:	8bfb      	ldrh	r3, [r7, #30]
 80080ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80080f2:	83fb      	strh	r3, [r7, #30]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	441a      	add	r2, r3
 80080fe:	8bfb      	ldrh	r3, [r7, #30]
 8008100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800810c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008110:	b29b      	uxth	r3, r3
 8008112:	8013      	strh	r3, [r2, #0]
 8008114:	e1c9      	b.n	80084aa <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	78db      	ldrb	r3, [r3, #3]
 800811a:	2b02      	cmp	r3, #2
 800811c:	d11e      	bne.n	800815c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	b29b      	uxth	r3, r3
 800812c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008134:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	441a      	add	r2, r3
 8008142:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800814a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800814e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008156:	b29b      	uxth	r3, r3
 8008158:	8013      	strh	r3, [r2, #0]
 800815a:	e01d      	b.n	8008198 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4413      	add	r3, r2
 8008166:	881b      	ldrh	r3, [r3, #0]
 8008168:	b29b      	uxth	r3, r3
 800816a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800816e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008172:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	441a      	add	r2, r3
 8008180:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800818c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008194:	b29b      	uxth	r3, r3
 8008196:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	461a      	mov	r2, r3
 80081a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081a8:	4413      	add	r3, r2
 80081aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	00da      	lsls	r2, r3, #3
 80081b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081b4:	4413      	add	r3, r2
 80081b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	891b      	ldrh	r3, [r3, #8]
 80081c0:	085b      	lsrs	r3, r3, #1
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	005b      	lsls	r3, r3, #1
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081ca:	801a      	strh	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	657b      	str	r3, [r7, #84]	; 0x54
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	461a      	mov	r2, r3
 80081da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081dc:	4413      	add	r3, r2
 80081de:	657b      	str	r3, [r7, #84]	; 0x54
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	00da      	lsls	r2, r3, #3
 80081e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081e8:	4413      	add	r3, r2
 80081ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80081ee:	653b      	str	r3, [r7, #80]	; 0x50
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	895b      	ldrh	r3, [r3, #10]
 80081f4:	085b      	lsrs	r3, r3, #1
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	005b      	lsls	r3, r3, #1
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081fe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	785b      	ldrb	r3, [r3, #1]
 8008204:	2b00      	cmp	r3, #0
 8008206:	f040 8093 	bne.w	8008330 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800821a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800821e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008222:	2b00      	cmp	r3, #0
 8008224:	d01b      	beq.n	800825e <USB_ActivateEndpoint+0x52a>
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	881b      	ldrh	r3, [r3, #0]
 8008232:	b29b      	uxth	r3, r3
 8008234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800823c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	441a      	add	r2, r3
 8008248:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800824a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800824e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008252:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800825a:	b29b      	uxth	r3, r3
 800825c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800826c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800826e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008272:	2b00      	cmp	r3, #0
 8008274:	d01b      	beq.n	80082ae <USB_ActivateEndpoint+0x57a>
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	881b      	ldrh	r3, [r3, #0]
 8008282:	b29b      	uxth	r3, r3
 8008284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800828c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	441a      	add	r2, r3
 8008298:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800829a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800829e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4413      	add	r3, r2
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c4:	873b      	strh	r3, [r7, #56]	; 0x38
 80082c6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80082c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80082cc:	873b      	strh	r3, [r7, #56]	; 0x38
 80082ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80082d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80082d4:	873b      	strh	r3, [r7, #56]	; 0x38
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	441a      	add	r2, r3
 80082e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80082e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	b29b      	uxth	r3, r3
 8008304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800830c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	441a      	add	r2, r3
 8008318:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800831a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800831e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800832a:	b29b      	uxth	r3, r3
 800832c:	8013      	strh	r3, [r2, #0]
 800832e:	e0bc      	b.n	80084aa <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4413      	add	r3, r2
 800833a:	881b      	ldrh	r3, [r3, #0]
 800833c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008340:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d01d      	beq.n	8008388 <USB_ActivateEndpoint+0x654>
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	881b      	ldrh	r3, [r3, #0]
 8008358:	b29b      	uxth	r3, r3
 800835a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800835e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008362:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	441a      	add	r2, r3
 8008370:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800837c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008384:	b29b      	uxth	r3, r3
 8008386:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	881b      	ldrh	r3, [r3, #0]
 8008394:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008398:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800839c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d01d      	beq.n	80083e0 <USB_ActivateEndpoint+0x6ac>
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4413      	add	r3, r2
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	441a      	add	r2, r3
 80083c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80083cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80083dc:	b29b      	uxth	r3, r3
 80083de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	78db      	ldrb	r3, [r3, #3]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d024      	beq.n	8008432 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	881b      	ldrh	r3, [r3, #0]
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008402:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008406:	f083 0320 	eor.w	r3, r3, #32
 800840a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	441a      	add	r2, r3
 8008418:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800841c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008420:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008424:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800842c:	b29b      	uxth	r3, r3
 800842e:	8013      	strh	r3, [r2, #0]
 8008430:	e01d      	b.n	800846e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	881b      	ldrh	r3, [r3, #0]
 800843e:	b29b      	uxth	r3, r3
 8008440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008448:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	441a      	add	r2, r3
 8008456:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800845a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800845e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800846a:	b29b      	uxth	r3, r3
 800846c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	881b      	ldrh	r3, [r3, #0]
 800847a:	b29b      	uxth	r3, r3
 800847c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008484:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	441a      	add	r2, r3
 8008492:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800849a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800849e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80084aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3774      	adds	r7, #116	; 0x74
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop

080084bc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084bc:	b480      	push	{r7}
 80084be:	b08d      	sub	sp, #52	; 0x34
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	7b1b      	ldrb	r3, [r3, #12]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f040 808e 	bne.w	80085ec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	785b      	ldrb	r3, [r3, #1]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d044      	beq.n	8008562 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4413      	add	r3, r2
 80084e2:	881b      	ldrh	r3, [r3, #0]
 80084e4:	81bb      	strh	r3, [r7, #12]
 80084e6:	89bb      	ldrh	r3, [r7, #12]
 80084e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d01b      	beq.n	8008528 <USB_DeactivateEndpoint+0x6c>
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	881b      	ldrh	r3, [r3, #0]
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008506:	817b      	strh	r3, [r7, #10]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	441a      	add	r2, r3
 8008512:	897b      	ldrh	r3, [r7, #10]
 8008514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800851c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008520:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008524:	b29b      	uxth	r3, r3
 8008526:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	b29b      	uxth	r3, r3
 8008536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800853a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800853e:	813b      	strh	r3, [r7, #8]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	441a      	add	r2, r3
 800854a:	893b      	ldrh	r3, [r7, #8]
 800854c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800855c:	b29b      	uxth	r3, r3
 800855e:	8013      	strh	r3, [r2, #0]
 8008560:	e192      	b.n	8008888 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	827b      	strh	r3, [r7, #18]
 8008570:	8a7b      	ldrh	r3, [r7, #18]
 8008572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008576:	2b00      	cmp	r3, #0
 8008578:	d01b      	beq.n	80085b2 <USB_DeactivateEndpoint+0xf6>
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	4413      	add	r3, r2
 8008584:	881b      	ldrh	r3, [r3, #0]
 8008586:	b29b      	uxth	r3, r3
 8008588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800858c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008590:	823b      	strh	r3, [r7, #16]
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	441a      	add	r2, r3
 800859c:	8a3b      	ldrh	r3, [r7, #16]
 800859e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4413      	add	r3, r2
 80085bc:	881b      	ldrh	r3, [r3, #0]
 80085be:	b29b      	uxth	r3, r3
 80085c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085c8:	81fb      	strh	r3, [r7, #14]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	441a      	add	r2, r3
 80085d4:	89fb      	ldrh	r3, [r7, #14]
 80085d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	8013      	strh	r3, [r2, #0]
 80085ea:	e14d      	b.n	8008888 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	785b      	ldrb	r3, [r3, #1]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f040 80a5 	bne.w	8008740 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4413      	add	r3, r2
 8008600:	881b      	ldrh	r3, [r3, #0]
 8008602:	843b      	strh	r3, [r7, #32]
 8008604:	8c3b      	ldrh	r3, [r7, #32]
 8008606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d01b      	beq.n	8008646 <USB_DeactivateEndpoint+0x18a>
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4413      	add	r3, r2
 8008618:	881b      	ldrh	r3, [r3, #0]
 800861a:	b29b      	uxth	r3, r3
 800861c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008624:	83fb      	strh	r3, [r7, #30]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	441a      	add	r2, r3
 8008630:	8bfb      	ldrh	r3, [r7, #30]
 8008632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800863a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800863e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008642:	b29b      	uxth	r3, r3
 8008644:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	881b      	ldrh	r3, [r3, #0]
 8008652:	83bb      	strh	r3, [r7, #28]
 8008654:	8bbb      	ldrh	r3, [r7, #28]
 8008656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865a:	2b00      	cmp	r3, #0
 800865c:	d01b      	beq.n	8008696 <USB_DeactivateEndpoint+0x1da>
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	4413      	add	r3, r2
 8008668:	881b      	ldrh	r3, [r3, #0]
 800866a:	b29b      	uxth	r3, r3
 800866c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008674:	837b      	strh	r3, [r7, #26]
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	441a      	add	r2, r3
 8008680:	8b7b      	ldrh	r3, [r7, #26]
 8008682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800868a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800868e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008692:	b29b      	uxth	r3, r3
 8008694:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	4413      	add	r3, r2
 80086a0:	881b      	ldrh	r3, [r3, #0]
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ac:	833b      	strh	r3, [r7, #24]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	441a      	add	r2, r3
 80086b8:	8b3b      	ldrh	r3, [r7, #24]
 80086ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4413      	add	r3, r2
 80086d8:	881b      	ldrh	r3, [r3, #0]
 80086da:	b29b      	uxth	r3, r3
 80086dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086e4:	82fb      	strh	r3, [r7, #22]
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	441a      	add	r2, r3
 80086f0:	8afb      	ldrh	r3, [r7, #22]
 80086f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008702:	b29b      	uxth	r3, r3
 8008704:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	881b      	ldrh	r3, [r3, #0]
 8008712:	b29b      	uxth	r3, r3
 8008714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800871c:	82bb      	strh	r3, [r7, #20]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	441a      	add	r2, r3
 8008728:	8abb      	ldrh	r3, [r7, #20]
 800872a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800872e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800873a:	b29b      	uxth	r3, r3
 800873c:	8013      	strh	r3, [r2, #0]
 800873e:	e0a3      	b.n	8008888 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4413      	add	r3, r2
 800874a:	881b      	ldrh	r3, [r3, #0]
 800874c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800874e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d01b      	beq.n	8008790 <USB_DeactivateEndpoint+0x2d4>
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	4413      	add	r3, r2
 8008762:	881b      	ldrh	r3, [r3, #0]
 8008764:	b29b      	uxth	r3, r3
 8008766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800876a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800876e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	441a      	add	r2, r3
 800877a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800877c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008784:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800878c:	b29b      	uxth	r3, r3
 800878e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4413      	add	r3, r2
 800879a:	881b      	ldrh	r3, [r3, #0]
 800879c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800879e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80087a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d01b      	beq.n	80087e0 <USB_DeactivateEndpoint+0x324>
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	881b      	ldrh	r3, [r3, #0]
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087be:	853b      	strh	r3, [r7, #40]	; 0x28
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	441a      	add	r2, r3
 80087ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087dc:	b29b      	uxth	r3, r3
 80087de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	4413      	add	r3, r2
 80087ea:	881b      	ldrh	r3, [r3, #0]
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	441a      	add	r2, r3
 8008802:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800880c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008814:	b29b      	uxth	r3, r3
 8008816:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4413      	add	r3, r2
 8008822:	881b      	ldrh	r3, [r3, #0]
 8008824:	b29b      	uxth	r3, r3
 8008826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800882a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800882e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	441a      	add	r2, r3
 800883a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800883c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800884c:	b29b      	uxth	r3, r3
 800884e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	881b      	ldrh	r3, [r3, #0]
 800885c:	b29b      	uxth	r3, r3
 800885e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008866:	847b      	strh	r3, [r7, #34]	; 0x22
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	441a      	add	r2, r3
 8008872:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800887c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008884:	b29b      	uxth	r3, r3
 8008886:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3734      	adds	r7, #52	; 0x34
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr

08008896 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b0c2      	sub	sp, #264	; 0x108
 800889a:	af00      	add	r7, sp, #0
 800889c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088a4:	6018      	str	r0, [r3, #0]
 80088a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088ae:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80088b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	785b      	ldrb	r3, [r3, #1]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	f040 86b7 	bne.w	8009630 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80088c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	699a      	ldr	r2, [r3, #24]
 80088ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d908      	bls.n	80088f0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80088de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80088ee:	e007      	b.n	8008900 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80088f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	7b1b      	ldrb	r3, [r3, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d13a      	bne.n	8008986 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6959      	ldr	r1, [r3, #20]
 800891c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	88da      	ldrh	r2, [r3, #6]
 8008928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800892c:	b29b      	uxth	r3, r3
 800892e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008932:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008936:	6800      	ldr	r0, [r0, #0]
 8008938:	f001 fc98 	bl	800a26c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800893c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008940:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	613b      	str	r3, [r7, #16]
 8008948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800894c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008956:	b29b      	uxth	r3, r3
 8008958:	461a      	mov	r2, r3
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	4413      	add	r3, r2
 800895e:	613b      	str	r3, [r7, #16]
 8008960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	00da      	lsls	r2, r3, #3
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	4413      	add	r3, r2
 8008972:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008976:	60fb      	str	r3, [r7, #12]
 8008978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800897c:	b29a      	uxth	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	801a      	strh	r2, [r3, #0]
 8008982:	f000 be1f 	b.w	80095c4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800898a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	78db      	ldrb	r3, [r3, #3]
 8008992:	2b02      	cmp	r3, #2
 8008994:	f040 8462 	bne.w	800925c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800899c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	6a1a      	ldr	r2, [r3, #32]
 80089a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	f240 83df 	bls.w	8009174 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80089b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	881b      	ldrh	r3, [r3, #0]
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80089e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	441a      	add	r2, r3
 80089fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80089fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a06:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6a1a      	ldr	r2, [r3, #32]
 8008a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a22:	1ad2      	subs	r2, r2, r3
 8008a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4413      	add	r3, r2
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f000 81c7 	beq.w	8008de6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	633b      	str	r3, [r7, #48]	; 0x30
 8008a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	785b      	ldrb	r3, [r3, #1]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d177      	bne.n	8008b64 <USB_EPStartXfer+0x2ce>
 8008a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	461a      	mov	r2, r3
 8008a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a94:	4413      	add	r3, r2
 8008a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	00da      	lsls	r2, r3, #3
 8008aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008aae:	627b      	str	r3, [r7, #36]	; 0x24
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab2:	881b      	ldrh	r3, [r3, #0]
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008aba:	b29a      	uxth	r2, r3
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	801a      	strh	r2, [r3, #0]
 8008ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ac4:	2b3e      	cmp	r3, #62	; 0x3e
 8008ac6:	d921      	bls.n	8008b0c <USB_EPStartXfer+0x276>
 8008ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008acc:	095b      	lsrs	r3, r3, #5
 8008ace:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ad6:	f003 031f 	and.w	r3, r3, #31
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d104      	bne.n	8008ae8 <USB_EPStartXfer+0x252>
 8008ade:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aea:	881b      	ldrh	r3, [r3, #0]
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	029b      	lsls	r3, r3, #10
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	4313      	orrs	r3, r2
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b04:	b29a      	uxth	r2, r3
 8008b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b08:	801a      	strh	r2, [r3, #0]
 8008b0a:	e050      	b.n	8008bae <USB_EPStartXfer+0x318>
 8008b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d10a      	bne.n	8008b2a <USB_EPStartXfer+0x294>
 8008b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b16:	881b      	ldrh	r3, [r3, #0]
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	801a      	strh	r2, [r3, #0]
 8008b28:	e041      	b.n	8008bae <USB_EPStartXfer+0x318>
 8008b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b2e:	085b      	lsrs	r3, r3, #1
 8008b30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b38:	f003 0301 	and.w	r3, r3, #1
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d004      	beq.n	8008b4a <USB_EPStartXfer+0x2b4>
 8008b40:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008b44:	3301      	adds	r3, #1
 8008b46:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4c:	881b      	ldrh	r3, [r3, #0]
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	029b      	lsls	r3, r3, #10
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b60:	801a      	strh	r2, [r3, #0]
 8008b62:	e024      	b.n	8008bae <USB_EPStartXfer+0x318>
 8008b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	785b      	ldrb	r3, [r3, #1]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d11c      	bne.n	8008bae <USB_EPStartXfer+0x318>
 8008b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	461a      	mov	r2, r3
 8008b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b88:	4413      	add	r3, r2
 8008b8a:	633b      	str	r3, [r7, #48]	; 0x30
 8008b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	00da      	lsls	r2, r3, #3
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	895b      	ldrh	r3, [r3, #10]
 8008bba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	6959      	ldr	r1, [r3, #20]
 8008bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008bd4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008bd8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008bdc:	6800      	ldr	r0, [r0, #0]
 8008bde:	f001 fb45 	bl	800a26c <USB_WritePMA>
            ep->xfer_buff += len;
 8008be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008be6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	695a      	ldr	r2, [r3, #20]
 8008bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bf2:	441a      	add	r2, r3
 8008bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6a1a      	ldr	r2, [r3, #32]
 8008c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d90f      	bls.n	8008c3c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	6a1a      	ldr	r2, [r3, #32]
 8008c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c2c:	1ad2      	subs	r2, r2, r3
 8008c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	621a      	str	r2, [r3, #32]
 8008c3a:	e00e      	b.n	8008c5a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	6a1b      	ldr	r3, [r3, #32]
 8008c48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2200      	movs	r2, #0
 8008c58:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	785b      	ldrb	r3, [r3, #1]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d177      	bne.n	8008d5a <USB_EPStartXfer+0x4c4>
 8008c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	61bb      	str	r3, [r7, #24]
 8008c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	461a      	mov	r2, r3
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	61bb      	str	r3, [r7, #24]
 8008c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	00da      	lsls	r2, r3, #3
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ca4:	617b      	str	r3, [r7, #20]
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	881b      	ldrh	r3, [r3, #0]
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	801a      	strh	r2, [r3, #0]
 8008cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cba:	2b3e      	cmp	r3, #62	; 0x3e
 8008cbc:	d921      	bls.n	8008d02 <USB_EPStartXfer+0x46c>
 8008cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cc2:	095b      	lsrs	r3, r3, #5
 8008cc4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ccc:	f003 031f 	and.w	r3, r3, #31
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d104      	bne.n	8008cde <USB_EPStartXfer+0x448>
 8008cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	881b      	ldrh	r3, [r3, #0]
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	029b      	lsls	r3, r3, #10
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	801a      	strh	r2, [r3, #0]
 8008d00:	e056      	b.n	8008db0 <USB_EPStartXfer+0x51a>
 8008d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10a      	bne.n	8008d20 <USB_EPStartXfer+0x48a>
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	881b      	ldrh	r3, [r3, #0]
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	801a      	strh	r2, [r3, #0]
 8008d1e:	e047      	b.n	8008db0 <USB_EPStartXfer+0x51a>
 8008d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d24:	085b      	lsrs	r3, r3, #1
 8008d26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d2e:	f003 0301 	and.w	r3, r3, #1
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d004      	beq.n	8008d40 <USB_EPStartXfer+0x4aa>
 8008d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	881b      	ldrh	r3, [r3, #0]
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	029b      	lsls	r3, r3, #10
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	4313      	orrs	r3, r2
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	801a      	strh	r2, [r3, #0]
 8008d58:	e02a      	b.n	8008db0 <USB_EPStartXfer+0x51a>
 8008d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	785b      	ldrb	r3, [r3, #1]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d122      	bne.n	8008db0 <USB_EPStartXfer+0x51a>
 8008d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	623b      	str	r3, [r7, #32]
 8008d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	461a      	mov	r2, r3
 8008d88:	6a3b      	ldr	r3, [r7, #32]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	623b      	str	r3, [r7, #32]
 8008d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	00da      	lsls	r2, r3, #3
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
 8008d9e:	4413      	add	r3, r2
 8008da0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008da4:	61fb      	str	r3, [r7, #28]
 8008da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	891b      	ldrh	r3, [r3, #8]
 8008dbc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	6959      	ldr	r1, [r3, #20]
 8008dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008dd6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008dda:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008dde:	6800      	ldr	r0, [r0, #0]
 8008de0:	f001 fa44 	bl	800a26c <USB_WritePMA>
 8008de4:	e3ee      	b.n	80095c4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	785b      	ldrb	r3, [r3, #1]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d177      	bne.n	8008ee6 <USB_EPStartXfer+0x650>
 8008df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	461a      	mov	r2, r3
 8008e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e16:	4413      	add	r3, r2
 8008e18:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	00da      	lsls	r2, r3, #3
 8008e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e30:	647b      	str	r3, [r7, #68]	; 0x44
 8008e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e34:	881b      	ldrh	r3, [r3, #0]
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e40:	801a      	strh	r2, [r3, #0]
 8008e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e46:	2b3e      	cmp	r3, #62	; 0x3e
 8008e48:	d921      	bls.n	8008e8e <USB_EPStartXfer+0x5f8>
 8008e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e4e:	095b      	lsrs	r3, r3, #5
 8008e50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e58:	f003 031f 	and.w	r3, r3, #31
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d104      	bne.n	8008e6a <USB_EPStartXfer+0x5d4>
 8008e60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e64:	3b01      	subs	r3, #1
 8008e66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e6c:	881b      	ldrh	r3, [r3, #0]
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	029b      	lsls	r3, r3, #10
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e86:	b29a      	uxth	r2, r3
 8008e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e8a:	801a      	strh	r2, [r3, #0]
 8008e8c:	e056      	b.n	8008f3c <USB_EPStartXfer+0x6a6>
 8008e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10a      	bne.n	8008eac <USB_EPStartXfer+0x616>
 8008e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e98:	881b      	ldrh	r3, [r3, #0]
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ea0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ea4:	b29a      	uxth	r2, r3
 8008ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ea8:	801a      	strh	r2, [r3, #0]
 8008eaa:	e047      	b.n	8008f3c <USB_EPStartXfer+0x6a6>
 8008eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eb0:	085b      	lsrs	r3, r3, #1
 8008eb2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eba:	f003 0301 	and.w	r3, r3, #1
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d004      	beq.n	8008ecc <USB_EPStartXfer+0x636>
 8008ec2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ece:	881b      	ldrh	r3, [r3, #0]
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	029b      	lsls	r3, r3, #10
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	4313      	orrs	r3, r2
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ee2:	801a      	strh	r2, [r3, #0]
 8008ee4:	e02a      	b.n	8008f3c <USB_EPStartXfer+0x6a6>
 8008ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	785b      	ldrb	r3, [r3, #1]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d122      	bne.n	8008f3c <USB_EPStartXfer+0x6a6>
 8008ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008efa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	653b      	str	r3, [r7, #80]	; 0x50
 8008f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	461a      	mov	r2, r3
 8008f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f16:	4413      	add	r3, r2
 8008f18:	653b      	str	r3, [r7, #80]	; 0x50
 8008f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	00da      	lsls	r2, r3, #3
 8008f28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008f30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f3a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	891b      	ldrh	r3, [r3, #8]
 8008f48:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6959      	ldr	r1, [r3, #20]
 8008f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008f62:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008f66:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008f6a:	6800      	ldr	r0, [r0, #0]
 8008f6c:	f001 f97e 	bl	800a26c <USB_WritePMA>
            ep->xfer_buff += len;
 8008f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	695a      	ldr	r2, [r3, #20]
 8008f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f80:	441a      	add	r2, r3
 8008f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6a1a      	ldr	r2, [r3, #32]
 8008f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d90f      	bls.n	8008fca <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6a1a      	ldr	r2, [r3, #32]
 8008fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fba:	1ad2      	subs	r2, r2, r3
 8008fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	621a      	str	r2, [r3, #32]
 8008fc8:	e00e      	b.n	8008fe8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6a1b      	ldr	r3, [r3, #32]
 8008fd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	643b      	str	r3, [r7, #64]	; 0x40
 8008ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	785b      	ldrb	r3, [r3, #1]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d177      	bne.n	80090f4 <USB_EPStartXfer+0x85e>
 8009004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009008:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009014:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800901e:	b29b      	uxth	r3, r3
 8009020:	461a      	mov	r2, r3
 8009022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009024:	4413      	add	r3, r2
 8009026:	63bb      	str	r3, [r7, #56]	; 0x38
 8009028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800902c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	00da      	lsls	r2, r3, #3
 8009036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009038:	4413      	add	r3, r2
 800903a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800903e:	637b      	str	r3, [r7, #52]	; 0x34
 8009040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009042:	881b      	ldrh	r3, [r3, #0]
 8009044:	b29b      	uxth	r3, r3
 8009046:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800904a:	b29a      	uxth	r2, r3
 800904c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800904e:	801a      	strh	r2, [r3, #0]
 8009050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009054:	2b3e      	cmp	r3, #62	; 0x3e
 8009056:	d921      	bls.n	800909c <USB_EPStartXfer+0x806>
 8009058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800905c:	095b      	lsrs	r3, r3, #5
 800905e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009066:	f003 031f 	and.w	r3, r3, #31
 800906a:	2b00      	cmp	r3, #0
 800906c:	d104      	bne.n	8009078 <USB_EPStartXfer+0x7e2>
 800906e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009072:	3b01      	subs	r3, #1
 8009074:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800907a:	881b      	ldrh	r3, [r3, #0]
 800907c:	b29a      	uxth	r2, r3
 800907e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009082:	b29b      	uxth	r3, r3
 8009084:	029b      	lsls	r3, r3, #10
 8009086:	b29b      	uxth	r3, r3
 8009088:	4313      	orrs	r3, r2
 800908a:	b29b      	uxth	r3, r3
 800908c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009094:	b29a      	uxth	r2, r3
 8009096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009098:	801a      	strh	r2, [r3, #0]
 800909a:	e050      	b.n	800913e <USB_EPStartXfer+0x8a8>
 800909c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d10a      	bne.n	80090ba <USB_EPStartXfer+0x824>
 80090a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a6:	881b      	ldrh	r3, [r3, #0]
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b6:	801a      	strh	r2, [r3, #0]
 80090b8:	e041      	b.n	800913e <USB_EPStartXfer+0x8a8>
 80090ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090be:	085b      	lsrs	r3, r3, #1
 80090c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80090c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090c8:	f003 0301 	and.w	r3, r3, #1
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d004      	beq.n	80090da <USB_EPStartXfer+0x844>
 80090d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090d4:	3301      	adds	r3, #1
 80090d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80090da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090dc:	881b      	ldrh	r3, [r3, #0]
 80090de:	b29a      	uxth	r2, r3
 80090e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	029b      	lsls	r3, r3, #10
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	4313      	orrs	r3, r2
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f0:	801a      	strh	r2, [r3, #0]
 80090f2:	e024      	b.n	800913e <USB_EPStartXfer+0x8a8>
 80090f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	785b      	ldrb	r3, [r3, #1]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d11c      	bne.n	800913e <USB_EPStartXfer+0x8a8>
 8009104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009108:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009112:	b29b      	uxth	r3, r3
 8009114:	461a      	mov	r2, r3
 8009116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009118:	4413      	add	r3, r2
 800911a:	643b      	str	r3, [r7, #64]	; 0x40
 800911c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	00da      	lsls	r2, r3, #3
 800912a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800912c:	4413      	add	r3, r2
 800912e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009138:	b29a      	uxth	r2, r3
 800913a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800913c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800913e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	895b      	ldrh	r3, [r3, #10]
 800914a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800914e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	6959      	ldr	r1, [r3, #20]
 800915a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800915e:	b29b      	uxth	r3, r3
 8009160:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009164:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009168:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800916c:	6800      	ldr	r0, [r0, #0]
 800916e:	f001 f87d 	bl	800a26c <USB_WritePMA>
 8009172:	e227      	b.n	80095c4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	6a1b      	ldr	r3, [r3, #32]
 8009180:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009188:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80091a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091aa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80091ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	441a      	add	r2, r3
 80091c8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80091cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091dc:	b29b      	uxth	r3, r3
 80091de:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80091e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	461a      	mov	r2, r3
 80091fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009200:	4413      	add	r3, r2
 8009202:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	00da      	lsls	r2, r3, #3
 8009212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009214:	4413      	add	r3, r2
 8009216:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800921a:	65bb      	str	r3, [r7, #88]	; 0x58
 800921c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009220:	b29a      	uxth	r2, r3
 8009222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009224:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800922a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	891b      	ldrh	r3, [r3, #8]
 8009232:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800923a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6959      	ldr	r1, [r3, #20]
 8009242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009246:	b29b      	uxth	r3, r3
 8009248:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800924c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009250:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009254:	6800      	ldr	r0, [r0, #0]
 8009256:	f001 f809 	bl	800a26c <USB_WritePMA>
 800925a:	e1b3      	b.n	80095c4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800925c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	6a1a      	ldr	r2, [r3, #32]
 8009268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800926c:	1ad2      	subs	r2, r2, r3
 800926e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800927a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800927e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	4413      	add	r3, r2
 8009294:	881b      	ldrh	r3, [r3, #0]
 8009296:	b29b      	uxth	r3, r3
 8009298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800929c:	2b00      	cmp	r3, #0
 800929e:	f000 80c6 	beq.w	800942e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80092a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	673b      	str	r3, [r7, #112]	; 0x70
 80092ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	785b      	ldrb	r3, [r3, #1]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d177      	bne.n	80093ae <USB_EPStartXfer+0xb18>
 80092be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80092ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092d8:	b29b      	uxth	r3, r3
 80092da:	461a      	mov	r2, r3
 80092dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092de:	4413      	add	r3, r2
 80092e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80092e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	00da      	lsls	r2, r3, #3
 80092f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092f2:	4413      	add	r3, r2
 80092f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80092f8:	667b      	str	r3, [r7, #100]	; 0x64
 80092fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092fc:	881b      	ldrh	r3, [r3, #0]
 80092fe:	b29b      	uxth	r3, r3
 8009300:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009304:	b29a      	uxth	r2, r3
 8009306:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009308:	801a      	strh	r2, [r3, #0]
 800930a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800930e:	2b3e      	cmp	r3, #62	; 0x3e
 8009310:	d921      	bls.n	8009356 <USB_EPStartXfer+0xac0>
 8009312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009316:	095b      	lsrs	r3, r3, #5
 8009318:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800931c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009320:	f003 031f 	and.w	r3, r3, #31
 8009324:	2b00      	cmp	r3, #0
 8009326:	d104      	bne.n	8009332 <USB_EPStartXfer+0xa9c>
 8009328:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800932c:	3b01      	subs	r3, #1
 800932e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009332:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009334:	881b      	ldrh	r3, [r3, #0]
 8009336:	b29a      	uxth	r2, r3
 8009338:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800933c:	b29b      	uxth	r3, r3
 800933e:	029b      	lsls	r3, r3, #10
 8009340:	b29b      	uxth	r3, r3
 8009342:	4313      	orrs	r3, r2
 8009344:	b29b      	uxth	r3, r3
 8009346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800934a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800934e:	b29a      	uxth	r2, r3
 8009350:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009352:	801a      	strh	r2, [r3, #0]
 8009354:	e050      	b.n	80093f8 <USB_EPStartXfer+0xb62>
 8009356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10a      	bne.n	8009374 <USB_EPStartXfer+0xade>
 800935e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009360:	881b      	ldrh	r3, [r3, #0]
 8009362:	b29b      	uxth	r3, r3
 8009364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800936c:	b29a      	uxth	r2, r3
 800936e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009370:	801a      	strh	r2, [r3, #0]
 8009372:	e041      	b.n	80093f8 <USB_EPStartXfer+0xb62>
 8009374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009378:	085b      	lsrs	r3, r3, #1
 800937a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800937e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009382:	f003 0301 	and.w	r3, r3, #1
 8009386:	2b00      	cmp	r3, #0
 8009388:	d004      	beq.n	8009394 <USB_EPStartXfer+0xafe>
 800938a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800938e:	3301      	adds	r3, #1
 8009390:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009396:	881b      	ldrh	r3, [r3, #0]
 8009398:	b29a      	uxth	r2, r3
 800939a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800939e:	b29b      	uxth	r3, r3
 80093a0:	029b      	lsls	r3, r3, #10
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	4313      	orrs	r3, r2
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093aa:	801a      	strh	r2, [r3, #0]
 80093ac:	e024      	b.n	80093f8 <USB_EPStartXfer+0xb62>
 80093ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	785b      	ldrb	r3, [r3, #1]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d11c      	bne.n	80093f8 <USB_EPStartXfer+0xb62>
 80093be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	461a      	mov	r2, r3
 80093d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093d2:	4413      	add	r3, r2
 80093d4:	673b      	str	r3, [r7, #112]	; 0x70
 80093d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	00da      	lsls	r2, r3, #3
 80093e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093e6:	4413      	add	r3, r2
 80093e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80093ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80093f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	895b      	ldrh	r3, [r3, #10]
 8009404:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800940c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	6959      	ldr	r1, [r3, #20]
 8009414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009418:	b29b      	uxth	r3, r3
 800941a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800941e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009422:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009426:	6800      	ldr	r0, [r0, #0]
 8009428:	f000 ff20 	bl	800a26c <USB_WritePMA>
 800942c:	e0ca      	b.n	80095c4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800942e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	785b      	ldrb	r3, [r3, #1]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d177      	bne.n	800952e <USB_EPStartXfer+0xc98>
 800943e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009442:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	67fb      	str	r3, [r7, #124]	; 0x7c
 800944a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800944e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009458:	b29b      	uxth	r3, r3
 800945a:	461a      	mov	r2, r3
 800945c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800945e:	4413      	add	r3, r2
 8009460:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	00da      	lsls	r2, r3, #3
 8009470:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009472:	4413      	add	r3, r2
 8009474:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009478:	67bb      	str	r3, [r7, #120]	; 0x78
 800947a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800947c:	881b      	ldrh	r3, [r3, #0]
 800947e:	b29b      	uxth	r3, r3
 8009480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009484:	b29a      	uxth	r2, r3
 8009486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009488:	801a      	strh	r2, [r3, #0]
 800948a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800948e:	2b3e      	cmp	r3, #62	; 0x3e
 8009490:	d921      	bls.n	80094d6 <USB_EPStartXfer+0xc40>
 8009492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009496:	095b      	lsrs	r3, r3, #5
 8009498:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800949c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094a0:	f003 031f 	and.w	r3, r3, #31
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d104      	bne.n	80094b2 <USB_EPStartXfer+0xc1c>
 80094a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80094ac:	3b01      	subs	r3, #1
 80094ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80094b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094b4:	881b      	ldrh	r3, [r3, #0]
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80094bc:	b29b      	uxth	r3, r3
 80094be:	029b      	lsls	r3, r3, #10
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	4313      	orrs	r3, r2
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094d2:	801a      	strh	r2, [r3, #0]
 80094d4:	e05c      	b.n	8009590 <USB_EPStartXfer+0xcfa>
 80094d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10a      	bne.n	80094f4 <USB_EPStartXfer+0xc5e>
 80094de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094e0:	881b      	ldrh	r3, [r3, #0]
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094f0:	801a      	strh	r2, [r3, #0]
 80094f2:	e04d      	b.n	8009590 <USB_EPStartXfer+0xcfa>
 80094f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094f8:	085b      	lsrs	r3, r3, #1
 80094fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80094fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009502:	f003 0301 	and.w	r3, r3, #1
 8009506:	2b00      	cmp	r3, #0
 8009508:	d004      	beq.n	8009514 <USB_EPStartXfer+0xc7e>
 800950a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800950e:	3301      	adds	r3, #1
 8009510:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009516:	881b      	ldrh	r3, [r3, #0]
 8009518:	b29a      	uxth	r2, r3
 800951a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800951e:	b29b      	uxth	r3, r3
 8009520:	029b      	lsls	r3, r3, #10
 8009522:	b29b      	uxth	r3, r3
 8009524:	4313      	orrs	r3, r2
 8009526:	b29a      	uxth	r2, r3
 8009528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800952a:	801a      	strh	r2, [r3, #0]
 800952c:	e030      	b.n	8009590 <USB_EPStartXfer+0xcfa>
 800952e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	785b      	ldrb	r3, [r3, #1]
 800953a:	2b01      	cmp	r3, #1
 800953c:	d128      	bne.n	8009590 <USB_EPStartXfer+0xcfa>
 800953e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009542:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800954c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009550:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800955a:	b29b      	uxth	r3, r3
 800955c:	461a      	mov	r2, r3
 800955e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009562:	4413      	add	r3, r2
 8009564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800956c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	00da      	lsls	r2, r3, #3
 8009576:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800957a:	4413      	add	r3, r2
 800957c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009580:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009588:	b29a      	uxth	r2, r3
 800958a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800958e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	891b      	ldrh	r3, [r3, #8]
 800959c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	6959      	ldr	r1, [r3, #20]
 80095ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80095b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80095ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80095be:	6800      	ldr	r0, [r0, #0]
 80095c0:	f000 fe54 	bl	800a26c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80095c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4413      	add	r3, r2
 80095de:	881b      	ldrh	r3, [r3, #0]
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095ea:	817b      	strh	r3, [r7, #10]
 80095ec:	897b      	ldrh	r3, [r7, #10]
 80095ee:	f083 0310 	eor.w	r3, r3, #16
 80095f2:	817b      	strh	r3, [r7, #10]
 80095f4:	897b      	ldrh	r3, [r7, #10]
 80095f6:	f083 0320 	eor.w	r3, r3, #32
 80095fa:	817b      	strh	r3, [r7, #10]
 80095fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009600:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800960a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	441a      	add	r2, r3
 8009616:	897b      	ldrh	r3, [r7, #10]
 8009618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800961c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009628:	b29b      	uxth	r3, r3
 800962a:	8013      	strh	r3, [r2, #0]
 800962c:	f000 bcde 	b.w	8009fec <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	7b1b      	ldrb	r3, [r3, #12]
 800963c:	2b00      	cmp	r3, #0
 800963e:	f040 80bb 	bne.w	80097b8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	699a      	ldr	r2, [r3, #24]
 800964e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	429a      	cmp	r2, r3
 800965c:	d917      	bls.n	800968e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800965e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800966e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	699a      	ldr	r2, [r3, #24]
 800967a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800967e:	1ad2      	subs	r2, r2, r3
 8009680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	619a      	str	r2, [r3, #24]
 800968c:	e00e      	b.n	80096ac <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800968e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800969e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2200      	movs	r2, #0
 80096aa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80096ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80096ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	461a      	mov	r2, r3
 80096cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096d0:	4413      	add	r3, r2
 80096d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80096d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	00da      	lsls	r2, r3, #3
 80096e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096e8:	4413      	add	r3, r2
 80096ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80096ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80096f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096f6:	881b      	ldrh	r3, [r3, #0]
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096fe:	b29a      	uxth	r2, r3
 8009700:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009704:	801a      	strh	r2, [r3, #0]
 8009706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800970a:	2b3e      	cmp	r3, #62	; 0x3e
 800970c:	d924      	bls.n	8009758 <USB_EPStartXfer+0xec2>
 800970e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009712:	095b      	lsrs	r3, r3, #5
 8009714:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800971c:	f003 031f 	and.w	r3, r3, #31
 8009720:	2b00      	cmp	r3, #0
 8009722:	d104      	bne.n	800972e <USB_EPStartXfer+0xe98>
 8009724:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009728:	3b01      	subs	r3, #1
 800972a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800972e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009732:	881b      	ldrh	r3, [r3, #0]
 8009734:	b29a      	uxth	r2, r3
 8009736:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800973a:	b29b      	uxth	r3, r3
 800973c:	029b      	lsls	r3, r3, #10
 800973e:	b29b      	uxth	r3, r3
 8009740:	4313      	orrs	r3, r2
 8009742:	b29b      	uxth	r3, r3
 8009744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800974c:	b29a      	uxth	r2, r3
 800974e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009752:	801a      	strh	r2, [r3, #0]
 8009754:	f000 bc10 	b.w	8009f78 <USB_EPStartXfer+0x16e2>
 8009758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10c      	bne.n	800977a <USB_EPStartXfer+0xee4>
 8009760:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009764:	881b      	ldrh	r3, [r3, #0]
 8009766:	b29b      	uxth	r3, r3
 8009768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800976c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009770:	b29a      	uxth	r2, r3
 8009772:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009776:	801a      	strh	r2, [r3, #0]
 8009778:	e3fe      	b.n	8009f78 <USB_EPStartXfer+0x16e2>
 800977a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800977e:	085b      	lsrs	r3, r3, #1
 8009780:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009788:	f003 0301 	and.w	r3, r3, #1
 800978c:	2b00      	cmp	r3, #0
 800978e:	d004      	beq.n	800979a <USB_EPStartXfer+0xf04>
 8009790:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009794:	3301      	adds	r3, #1
 8009796:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800979a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800979e:	881b      	ldrh	r3, [r3, #0]
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	029b      	lsls	r3, r3, #10
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	4313      	orrs	r3, r2
 80097ae:	b29a      	uxth	r2, r3
 80097b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097b4:	801a      	strh	r2, [r3, #0]
 80097b6:	e3df      	b.n	8009f78 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80097b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	78db      	ldrb	r3, [r3, #3]
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	f040 8218 	bne.w	8009bfa <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80097ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	785b      	ldrb	r3, [r3, #1]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f040 809d 	bne.w	8009916 <USB_EPStartXfer+0x1080>
 80097dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80097ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	461a      	mov	r2, r3
 80097fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009800:	4413      	add	r3, r2
 8009802:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800980a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	00da      	lsls	r2, r3, #3
 8009814:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009818:	4413      	add	r3, r2
 800981a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800981e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009822:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009826:	881b      	ldrh	r3, [r3, #0]
 8009828:	b29b      	uxth	r3, r3
 800982a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800982e:	b29a      	uxth	r2, r3
 8009830:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009834:	801a      	strh	r2, [r3, #0]
 8009836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800983a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	691b      	ldr	r3, [r3, #16]
 8009842:	2b3e      	cmp	r3, #62	; 0x3e
 8009844:	d92b      	bls.n	800989e <USB_EPStartXfer+0x1008>
 8009846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800984a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	095b      	lsrs	r3, r3, #5
 8009854:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800985c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	f003 031f 	and.w	r3, r3, #31
 8009868:	2b00      	cmp	r3, #0
 800986a:	d104      	bne.n	8009876 <USB_EPStartXfer+0xfe0>
 800986c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009870:	3b01      	subs	r3, #1
 8009872:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009876:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800987a:	881b      	ldrh	r3, [r3, #0]
 800987c:	b29a      	uxth	r2, r3
 800987e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009882:	b29b      	uxth	r3, r3
 8009884:	029b      	lsls	r3, r3, #10
 8009886:	b29b      	uxth	r3, r3
 8009888:	4313      	orrs	r3, r2
 800988a:	b29b      	uxth	r3, r3
 800988c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009894:	b29a      	uxth	r2, r3
 8009896:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800989a:	801a      	strh	r2, [r3, #0]
 800989c:	e070      	b.n	8009980 <USB_EPStartXfer+0x10ea>
 800989e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d10c      	bne.n	80098c8 <USB_EPStartXfer+0x1032>
 80098ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80098b2:	881b      	ldrh	r3, [r3, #0]
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098be:	b29a      	uxth	r2, r3
 80098c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80098c4:	801a      	strh	r2, [r3, #0]
 80098c6:	e05b      	b.n	8009980 <USB_EPStartXfer+0x10ea>
 80098c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	085b      	lsrs	r3, r3, #1
 80098d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80098da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	f003 0301 	and.w	r3, r3, #1
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d004      	beq.n	80098f8 <USB_EPStartXfer+0x1062>
 80098ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098f2:	3301      	adds	r3, #1
 80098f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80098f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80098fc:	881b      	ldrh	r3, [r3, #0]
 80098fe:	b29a      	uxth	r2, r3
 8009900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009904:	b29b      	uxth	r3, r3
 8009906:	029b      	lsls	r3, r3, #10
 8009908:	b29b      	uxth	r3, r3
 800990a:	4313      	orrs	r3, r2
 800990c:	b29a      	uxth	r2, r3
 800990e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009912:	801a      	strh	r2, [r3, #0]
 8009914:	e034      	b.n	8009980 <USB_EPStartXfer+0x10ea>
 8009916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800991a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	785b      	ldrb	r3, [r3, #1]
 8009922:	2b01      	cmp	r3, #1
 8009924:	d12c      	bne.n	8009980 <USB_EPStartXfer+0x10ea>
 8009926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800992a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009938:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009942:	b29b      	uxth	r3, r3
 8009944:	461a      	mov	r2, r3
 8009946:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800994a:	4413      	add	r3, r2
 800994c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	00da      	lsls	r2, r3, #3
 800995e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009962:	4413      	add	r3, r2
 8009964:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009968:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800996c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	b29a      	uxth	r2, r3
 800997a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800997e:	801a      	strh	r2, [r3, #0]
 8009980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009984:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800998e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	785b      	ldrb	r3, [r3, #1]
 800999a:	2b00      	cmp	r3, #0
 800999c:	f040 809d 	bne.w	8009ada <USB_EPStartXfer+0x1244>
 80099a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80099ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099bc:	b29b      	uxth	r3, r3
 80099be:	461a      	mov	r2, r3
 80099c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099c4:	4413      	add	r3, r2
 80099c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80099ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	00da      	lsls	r2, r3, #3
 80099d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099dc:	4413      	add	r3, r2
 80099de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80099e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80099e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099ea:	881b      	ldrh	r3, [r3, #0]
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099f8:	801a      	strh	r2, [r3, #0]
 80099fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	2b3e      	cmp	r3, #62	; 0x3e
 8009a08:	d92b      	bls.n	8009a62 <USB_EPStartXfer+0x11cc>
 8009a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	095b      	lsrs	r3, r3, #5
 8009a18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	f003 031f 	and.w	r3, r3, #31
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d104      	bne.n	8009a3a <USB_EPStartXfer+0x11a4>
 8009a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a34:	3b01      	subs	r3, #1
 8009a36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a3e:	881b      	ldrh	r3, [r3, #0]
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	029b      	lsls	r3, r3, #10
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a58:	b29a      	uxth	r2, r3
 8009a5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a5e:	801a      	strh	r2, [r3, #0]
 8009a60:	e069      	b.n	8009b36 <USB_EPStartXfer+0x12a0>
 8009a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10c      	bne.n	8009a8c <USB_EPStartXfer+0x11f6>
 8009a72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a76:	881b      	ldrh	r3, [r3, #0]
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a82:	b29a      	uxth	r2, r3
 8009a84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a88:	801a      	strh	r2, [r3, #0]
 8009a8a:	e054      	b.n	8009b36 <USB_EPStartXfer+0x12a0>
 8009a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	085b      	lsrs	r3, r3, #1
 8009a9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	f003 0301 	and.w	r3, r3, #1
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d004      	beq.n	8009abc <USB_EPStartXfer+0x1226>
 8009ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009abc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ac0:	881b      	ldrh	r3, [r3, #0]
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	029b      	lsls	r3, r3, #10
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ad6:	801a      	strh	r2, [r3, #0]
 8009ad8:	e02d      	b.n	8009b36 <USB_EPStartXfer+0x12a0>
 8009ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	785b      	ldrb	r3, [r3, #1]
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d125      	bne.n	8009b36 <USB_EPStartXfer+0x12a0>
 8009aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	461a      	mov	r2, r3
 8009afc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009b00:	4413      	add	r3, r2
 8009b02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	00da      	lsls	r2, r3, #3
 8009b14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009b18:	4413      	add	r3, r2
 8009b1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b34:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	69db      	ldr	r3, [r3, #28]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f000 8218 	beq.w	8009f78 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	4413      	add	r3, r2
 8009b62:	881b      	ldrh	r3, [r3, #0]
 8009b64:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009b68:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d005      	beq.n	8009b80 <USB_EPStartXfer+0x12ea>
 8009b74:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d10d      	bne.n	8009b9c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009b80:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f040 81f5 	bne.w	8009f78 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009b8e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f040 81ee 	bne.w	8009f78 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ba0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	881b      	ldrh	r3, [r3, #0]
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bc2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	441a      	add	r2, r3
 8009be0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bf0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	8013      	strh	r3, [r2, #0]
 8009bf8:	e1be      	b.n	8009f78 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	78db      	ldrb	r3, [r3, #3]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	f040 81b4 	bne.w	8009f74 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	699a      	ldr	r2, [r3, #24]
 8009c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d917      	bls.n	8009c58 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	691b      	ldr	r3, [r3, #16]
 8009c34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	699a      	ldr	r2, [r3, #24]
 8009c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c48:	1ad2      	subs	r2, r2, r3
 8009c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	619a      	str	r2, [r3, #24]
 8009c56:	e00e      	b.n	8009c76 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	699b      	ldr	r3, [r3, #24]
 8009c64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2200      	movs	r2, #0
 8009c74:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	785b      	ldrb	r3, [r3, #1]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	f040 8085 	bne.w	8009d92 <USB_EPStartXfer+0x14fc>
 8009c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009cac:	4413      	add	r3, r2
 8009cae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	00da      	lsls	r2, r3, #3
 8009cc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009cc4:	4413      	add	r3, r2
 8009cc6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009cca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009cce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cd2:	881b      	ldrh	r3, [r3, #0]
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ce0:	801a      	strh	r2, [r3, #0]
 8009ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ce6:	2b3e      	cmp	r3, #62	; 0x3e
 8009ce8:	d923      	bls.n	8009d32 <USB_EPStartXfer+0x149c>
 8009cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cee:	095b      	lsrs	r3, r3, #5
 8009cf0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cf8:	f003 031f 	and.w	r3, r3, #31
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d104      	bne.n	8009d0a <USB_EPStartXfer+0x1474>
 8009d00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d04:	3b01      	subs	r3, #1
 8009d06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009d0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d0e:	881b      	ldrh	r3, [r3, #0]
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	029b      	lsls	r3, r3, #10
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d28:	b29a      	uxth	r2, r3
 8009d2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d2e:	801a      	strh	r2, [r3, #0]
 8009d30:	e060      	b.n	8009df4 <USB_EPStartXfer+0x155e>
 8009d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d10c      	bne.n	8009d54 <USB_EPStartXfer+0x14be>
 8009d3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d3e:	881b      	ldrh	r3, [r3, #0]
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d4a:	b29a      	uxth	r2, r3
 8009d4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d50:	801a      	strh	r2, [r3, #0]
 8009d52:	e04f      	b.n	8009df4 <USB_EPStartXfer+0x155e>
 8009d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d58:	085b      	lsrs	r3, r3, #1
 8009d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d62:	f003 0301 	and.w	r3, r3, #1
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d004      	beq.n	8009d74 <USB_EPStartXfer+0x14de>
 8009d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d6e:	3301      	adds	r3, #1
 8009d70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009d74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d78:	881b      	ldrh	r3, [r3, #0]
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	029b      	lsls	r3, r3, #10
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	4313      	orrs	r3, r2
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d8e:	801a      	strh	r2, [r3, #0]
 8009d90:	e030      	b.n	8009df4 <USB_EPStartXfer+0x155e>
 8009d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	785b      	ldrb	r3, [r3, #1]
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d128      	bne.n	8009df4 <USB_EPStartXfer+0x155e>
 8009da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009da6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009db4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	00da      	lsls	r2, r3, #3
 8009dda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009dde:	4413      	add	r3, r2
 8009de0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009de4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009df2:	801a      	strh	r2, [r3, #0]
 8009df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009df8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	785b      	ldrb	r3, [r3, #1]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f040 8085 	bne.w	8009f1e <USB_EPStartXfer+0x1688>
 8009e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	461a      	mov	r2, r3
 8009e34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009e38:	4413      	add	r3, r2
 8009e3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	00da      	lsls	r2, r3, #3
 8009e4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009e50:	4413      	add	r3, r2
 8009e52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e5e:	881b      	ldrh	r3, [r3, #0]
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e6c:	801a      	strh	r2, [r3, #0]
 8009e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e72:	2b3e      	cmp	r3, #62	; 0x3e
 8009e74:	d923      	bls.n	8009ebe <USB_EPStartXfer+0x1628>
 8009e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e7a:	095b      	lsrs	r3, r3, #5
 8009e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e84:	f003 031f 	and.w	r3, r3, #31
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d104      	bne.n	8009e96 <USB_EPStartXfer+0x1600>
 8009e8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e90:	3b01      	subs	r3, #1
 8009e92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e9a:	881b      	ldrh	r3, [r3, #0]
 8009e9c:	b29a      	uxth	r2, r3
 8009e9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	029b      	lsls	r3, r3, #10
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009eb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009eba:	801a      	strh	r2, [r3, #0]
 8009ebc:	e05c      	b.n	8009f78 <USB_EPStartXfer+0x16e2>
 8009ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d10c      	bne.n	8009ee0 <USB_EPStartXfer+0x164a>
 8009ec6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009eca:	881b      	ldrh	r3, [r3, #0]
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009edc:	801a      	strh	r2, [r3, #0]
 8009ede:	e04b      	b.n	8009f78 <USB_EPStartXfer+0x16e2>
 8009ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ee4:	085b      	lsrs	r3, r3, #1
 8009ee6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eee:	f003 0301 	and.w	r3, r3, #1
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d004      	beq.n	8009f00 <USB_EPStartXfer+0x166a>
 8009ef6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009efa:	3301      	adds	r3, #1
 8009efc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f04:	881b      	ldrh	r3, [r3, #0]
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	029b      	lsls	r3, r3, #10
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	4313      	orrs	r3, r2
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f1a:	801a      	strh	r2, [r3, #0]
 8009f1c:	e02c      	b.n	8009f78 <USB_EPStartXfer+0x16e2>
 8009f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	785b      	ldrb	r3, [r3, #1]
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d124      	bne.n	8009f78 <USB_EPStartXfer+0x16e2>
 8009f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	461a      	mov	r2, r3
 8009f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009f44:	4413      	add	r3, r2
 8009f46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	00da      	lsls	r2, r3, #3
 8009f58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009f5c:	4413      	add	r3, r2
 8009f5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009f70:	801a      	strh	r2, [r3, #0]
 8009f72:	e001      	b.n	8009f78 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009f74:	2301      	movs	r3, #1
 8009f76:	e03a      	b.n	8009fee <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	4413      	add	r3, r2
 8009f92:	881b      	ldrh	r3, [r3, #0]
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f9e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009fa2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009fa6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009faa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009fae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009fb2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009fb6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	441a      	add	r2, r3
 8009fd4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009fd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	785b      	ldrb	r3, [r3, #1]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d020      	beq.n	800a04c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4413      	add	r3, r2
 800a014:	881b      	ldrh	r3, [r3, #0]
 800a016:	b29b      	uxth	r3, r3
 800a018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a01c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a020:	81bb      	strh	r3, [r7, #12]
 800a022:	89bb      	ldrh	r3, [r7, #12]
 800a024:	f083 0310 	eor.w	r3, r3, #16
 800a028:	81bb      	strh	r3, [r7, #12]
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	441a      	add	r2, r3
 800a034:	89bb      	ldrh	r3, [r7, #12]
 800a036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a03a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a03e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a046:	b29b      	uxth	r3, r3
 800a048:	8013      	strh	r3, [r2, #0]
 800a04a:	e01f      	b.n	800a08c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4413      	add	r3, r2
 800a056:	881b      	ldrh	r3, [r3, #0]
 800a058:	b29b      	uxth	r3, r3
 800a05a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a05e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a062:	81fb      	strh	r3, [r7, #14]
 800a064:	89fb      	ldrh	r3, [r7, #14]
 800a066:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a06a:	81fb      	strh	r3, [r7, #14]
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	441a      	add	r2, r3
 800a076:	89fb      	ldrh	r3, [r7, #14]
 800a078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a07c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a088:	b29b      	uxth	r3, r3
 800a08a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3714      	adds	r7, #20
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr

0800a09a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a09a:	b480      	push	{r7}
 800a09c:	b087      	sub	sp, #28
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
 800a0a2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	7b1b      	ldrb	r3, [r3, #12]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f040 809d 	bne.w	800a1e8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	785b      	ldrb	r3, [r3, #1]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d04c      	beq.n	800a150 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	4413      	add	r3, r2
 800a0c0:	881b      	ldrh	r3, [r3, #0]
 800a0c2:	823b      	strh	r3, [r7, #16]
 800a0c4:	8a3b      	ldrh	r3, [r7, #16]
 800a0c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d01b      	beq.n	800a106 <USB_EPClearStall+0x6c>
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	4413      	add	r3, r2
 800a0d8:	881b      	ldrh	r3, [r3, #0]
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0e4:	81fb      	strh	r3, [r7, #14]
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	441a      	add	r2, r3
 800a0f0:	89fb      	ldrh	r3, [r7, #14]
 800a0f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a102:	b29b      	uxth	r3, r3
 800a104:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	78db      	ldrb	r3, [r3, #3]
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d06c      	beq.n	800a1e8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	4413      	add	r3, r2
 800a118:	881b      	ldrh	r3, [r3, #0]
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a124:	81bb      	strh	r3, [r7, #12]
 800a126:	89bb      	ldrh	r3, [r7, #12]
 800a128:	f083 0320 	eor.w	r3, r3, #32
 800a12c:	81bb      	strh	r3, [r7, #12]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	441a      	add	r2, r3
 800a138:	89bb      	ldrh	r3, [r7, #12]
 800a13a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a13e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	8013      	strh	r3, [r2, #0]
 800a14e:	e04b      	b.n	800a1e8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	4413      	add	r3, r2
 800a15a:	881b      	ldrh	r3, [r3, #0]
 800a15c:	82fb      	strh	r3, [r7, #22]
 800a15e:	8afb      	ldrh	r3, [r7, #22]
 800a160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a164:	2b00      	cmp	r3, #0
 800a166:	d01b      	beq.n	800a1a0 <USB_EPClearStall+0x106>
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	4413      	add	r3, r2
 800a172:	881b      	ldrh	r3, [r3, #0]
 800a174:	b29b      	uxth	r3, r3
 800a176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a17a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a17e:	82bb      	strh	r3, [r7, #20]
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	441a      	add	r2, r3
 800a18a:	8abb      	ldrh	r3, [r7, #20]
 800a18c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a194:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	4413      	add	r3, r2
 800a1aa:	881b      	ldrh	r3, [r3, #0]
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1b6:	827b      	strh	r3, [r7, #18]
 800a1b8:	8a7b      	ldrh	r3, [r7, #18]
 800a1ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a1be:	827b      	strh	r3, [r7, #18]
 800a1c0:	8a7b      	ldrh	r3, [r7, #18]
 800a1c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a1c6:	827b      	strh	r3, [r7, #18]
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	441a      	add	r2, r3
 800a1d2:	8a7b      	ldrh	r3, [r7, #18]
 800a1d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	371c      	adds	r7, #28
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr

0800a1f6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a1f6:	b480      	push	{r7}
 800a1f8:	b083      	sub	sp, #12
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
 800a1fe:	460b      	mov	r3, r1
 800a200:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a202:	78fb      	ldrb	r3, [r7, #3]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d103      	bne.n	800a210 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2280      	movs	r2, #128	; 0x80
 800a20c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	370c      	adds	r7, #12
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr

0800a21e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a21e:	b480      	push	{r7}
 800a220:	b083      	sub	sp, #12
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a236:	b29a      	uxth	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a25e:	68fb      	ldr	r3, [r7, #12]
}
 800a260:	4618      	mov	r0, r3
 800a262:	3714      	adds	r7, #20
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b08b      	sub	sp, #44	; 0x2c
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	4611      	mov	r1, r2
 800a278:	461a      	mov	r2, r3
 800a27a:	460b      	mov	r3, r1
 800a27c:	80fb      	strh	r3, [r7, #6]
 800a27e:	4613      	mov	r3, r2
 800a280:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a282:	88bb      	ldrh	r3, [r7, #4]
 800a284:	3301      	adds	r3, #1
 800a286:	085b      	lsrs	r3, r3, #1
 800a288:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a292:	88fa      	ldrh	r2, [r7, #6]
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	4413      	add	r3, r2
 800a298:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a29c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a2a2:	e01b      	b.n	800a2dc <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	021b      	lsls	r3, r3, #8
 800a2b2:	b21a      	sxth	r2, r3
 800a2b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	b21b      	sxth	r3, r3
 800a2bc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a2be:	6a3b      	ldr	r3, [r7, #32]
 800a2c0:	8a7a      	ldrh	r2, [r7, #18]
 800a2c2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a2c4:	6a3b      	ldr	r3, [r7, #32]
 800a2c6:	3302      	adds	r3, #2
 800a2c8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	627b      	str	r3, [r7, #36]	; 0x24
 800a2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1e0      	bne.n	800a2a4 <USB_WritePMA+0x38>
  }
}
 800a2e2:	bf00      	nop
 800a2e4:	bf00      	nop
 800a2e6:	372c      	adds	r7, #44	; 0x2c
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b08b      	sub	sp, #44	; 0x2c
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	4611      	mov	r1, r2
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	460b      	mov	r3, r1
 800a300:	80fb      	strh	r3, [r7, #6]
 800a302:	4613      	mov	r3, r2
 800a304:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a306:	88bb      	ldrh	r3, [r7, #4]
 800a308:	085b      	lsrs	r3, r3, #1
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a316:	88fa      	ldrh	r2, [r7, #6]
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	4413      	add	r3, r2
 800a31c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a320:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	627b      	str	r3, [r7, #36]	; 0x24
 800a326:	e018      	b.n	800a35a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a328:	6a3b      	ldr	r3, [r7, #32]
 800a32a:	881b      	ldrh	r3, [r3, #0]
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a330:	6a3b      	ldr	r3, [r7, #32]
 800a332:	3302      	adds	r3, #2
 800a334:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	3301      	adds	r3, #1
 800a342:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	0a1b      	lsrs	r3, r3, #8
 800a348:	b2da      	uxtb	r2, r3
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	3301      	adds	r3, #1
 800a352:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a356:	3b01      	subs	r3, #1
 800a358:	627b      	str	r3, [r7, #36]	; 0x24
 800a35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d1e3      	bne.n	800a328 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a360:	88bb      	ldrh	r3, [r7, #4]
 800a362:	f003 0301 	and.w	r3, r3, #1
 800a366:	b29b      	uxth	r3, r3
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d007      	beq.n	800a37c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a36c:	6a3b      	ldr	r3, [r7, #32]
 800a36e:	881b      	ldrh	r3, [r3, #0]
 800a370:	b29b      	uxth	r3, r3
 800a372:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	b2da      	uxtb	r2, r3
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	701a      	strb	r2, [r3, #0]
  }
}
 800a37c:	bf00      	nop
 800a37e:	372c      	adds	r7, #44	; 0x2c
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	460b      	mov	r3, r1
 800a392:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a394:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a398:	f002 f8c8 	bl	800c52c <USBD_static_malloc>
 800a39c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d105      	bne.n	800a3b0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a3ac:	2302      	movs	r3, #2
 800a3ae:	e066      	b.n	800a47e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	68fa      	ldr	r2, [r7, #12]
 800a3b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	7c1b      	ldrb	r3, [r3, #16]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d119      	bne.n	800a3f4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a3c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3c4:	2202      	movs	r2, #2
 800a3c6:	2181      	movs	r1, #129	; 0x81
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f001 ff56 	bl	800c27a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a3d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3d8:	2202      	movs	r2, #2
 800a3da:	2101      	movs	r1, #1
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f001 ff4c 	bl	800c27a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2210      	movs	r2, #16
 800a3ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a3f2:	e016      	b.n	800a422 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a3f4:	2340      	movs	r3, #64	; 0x40
 800a3f6:	2202      	movs	r2, #2
 800a3f8:	2181      	movs	r1, #129	; 0x81
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f001 ff3d 	bl	800c27a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a406:	2340      	movs	r3, #64	; 0x40
 800a408:	2202      	movs	r2, #2
 800a40a:	2101      	movs	r1, #1
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f001 ff34 	bl	800c27a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2201      	movs	r2, #1
 800a416:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2210      	movs	r2, #16
 800a41e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a422:	2308      	movs	r3, #8
 800a424:	2203      	movs	r2, #3
 800a426:	2182      	movs	r1, #130	; 0x82
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f001 ff26 	bl	800c27a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2201      	movs	r2, #1
 800a432:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2200      	movs	r2, #0
 800a444:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	7c1b      	ldrb	r3, [r3, #16]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d109      	bne.n	800a46c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a45e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a462:	2101      	movs	r1, #1
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f001 fff7 	bl	800c458 <USBD_LL_PrepareReceive>
 800a46a:	e007      	b.n	800a47c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a472:	2340      	movs	r3, #64	; 0x40
 800a474:	2101      	movs	r1, #1
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f001 ffee 	bl	800c458 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b082      	sub	sp, #8
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
 800a48e:	460b      	mov	r3, r1
 800a490:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a492:	2181      	movs	r1, #129	; 0x81
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f001 ff16 	bl	800c2c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a4a0:	2101      	movs	r1, #1
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f001 ff0f 	bl	800c2c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a4b0:	2182      	movs	r1, #130	; 0x82
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f001 ff07 	bl	800c2c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00e      	beq.n	800a4f0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f002 f830 	bl	800c548 <USBD_static_free>
    pdev->pClassData = NULL;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3708      	adds	r7, #8
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
	...

0800a4fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b086      	sub	sp, #24
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a50c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a50e:	2300      	movs	r3, #0
 800a510:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a512:	2300      	movs	r3, #0
 800a514:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a516:	2300      	movs	r3, #0
 800a518:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d101      	bne.n	800a524 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a520:	2303      	movs	r3, #3
 800a522:	e0af      	b.n	800a684 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d03f      	beq.n	800a5b0 <USBD_CDC_Setup+0xb4>
 800a530:	2b20      	cmp	r3, #32
 800a532:	f040 809f 	bne.w	800a674 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	88db      	ldrh	r3, [r3, #6]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d02e      	beq.n	800a59c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	b25b      	sxtb	r3, r3
 800a544:	2b00      	cmp	r3, #0
 800a546:	da16      	bge.n	800a576 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	683a      	ldr	r2, [r7, #0]
 800a552:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a554:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a556:	683a      	ldr	r2, [r7, #0]
 800a558:	88d2      	ldrh	r2, [r2, #6]
 800a55a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	88db      	ldrh	r3, [r3, #6]
 800a560:	2b07      	cmp	r3, #7
 800a562:	bf28      	it	cs
 800a564:	2307      	movcs	r3, #7
 800a566:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	89fa      	ldrh	r2, [r7, #14]
 800a56c:	4619      	mov	r1, r3
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f001 fa9f 	bl	800bab2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a574:	e085      	b.n	800a682 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	785a      	ldrb	r2, [r3, #1]
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	88db      	ldrh	r3, [r3, #6]
 800a584:	b2da      	uxtb	r2, r3
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a58c:	6939      	ldr	r1, [r7, #16]
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	88db      	ldrh	r3, [r3, #6]
 800a592:	461a      	mov	r2, r3
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f001 fab8 	bl	800bb0a <USBD_CtlPrepareRx>
      break;
 800a59a:	e072      	b.n	800a682 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	683a      	ldr	r2, [r7, #0]
 800a5a6:	7850      	ldrb	r0, [r2, #1]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	6839      	ldr	r1, [r7, #0]
 800a5ac:	4798      	blx	r3
      break;
 800a5ae:	e068      	b.n	800a682 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	785b      	ldrb	r3, [r3, #1]
 800a5b4:	2b0b      	cmp	r3, #11
 800a5b6:	d852      	bhi.n	800a65e <USBD_CDC_Setup+0x162>
 800a5b8:	a201      	add	r2, pc, #4	; (adr r2, 800a5c0 <USBD_CDC_Setup+0xc4>)
 800a5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5be:	bf00      	nop
 800a5c0:	0800a5f1 	.word	0x0800a5f1
 800a5c4:	0800a66d 	.word	0x0800a66d
 800a5c8:	0800a65f 	.word	0x0800a65f
 800a5cc:	0800a65f 	.word	0x0800a65f
 800a5d0:	0800a65f 	.word	0x0800a65f
 800a5d4:	0800a65f 	.word	0x0800a65f
 800a5d8:	0800a65f 	.word	0x0800a65f
 800a5dc:	0800a65f 	.word	0x0800a65f
 800a5e0:	0800a65f 	.word	0x0800a65f
 800a5e4:	0800a65f 	.word	0x0800a65f
 800a5e8:	0800a61b 	.word	0x0800a61b
 800a5ec:	0800a645 	.word	0x0800a645
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	2b03      	cmp	r3, #3
 800a5fa:	d107      	bne.n	800a60c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a5fc:	f107 030a 	add.w	r3, r7, #10
 800a600:	2202      	movs	r2, #2
 800a602:	4619      	mov	r1, r3
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f001 fa54 	bl	800bab2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a60a:	e032      	b.n	800a672 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a60c:	6839      	ldr	r1, [r7, #0]
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f001 f9de 	bl	800b9d0 <USBD_CtlError>
            ret = USBD_FAIL;
 800a614:	2303      	movs	r3, #3
 800a616:	75fb      	strb	r3, [r7, #23]
          break;
 800a618:	e02b      	b.n	800a672 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a620:	b2db      	uxtb	r3, r3
 800a622:	2b03      	cmp	r3, #3
 800a624:	d107      	bne.n	800a636 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a626:	f107 030d 	add.w	r3, r7, #13
 800a62a:	2201      	movs	r2, #1
 800a62c:	4619      	mov	r1, r3
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f001 fa3f 	bl	800bab2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a634:	e01d      	b.n	800a672 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a636:	6839      	ldr	r1, [r7, #0]
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f001 f9c9 	bl	800b9d0 <USBD_CtlError>
            ret = USBD_FAIL;
 800a63e:	2303      	movs	r3, #3
 800a640:	75fb      	strb	r3, [r7, #23]
          break;
 800a642:	e016      	b.n	800a672 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	2b03      	cmp	r3, #3
 800a64e:	d00f      	beq.n	800a670 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a650:	6839      	ldr	r1, [r7, #0]
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f001 f9bc 	bl	800b9d0 <USBD_CtlError>
            ret = USBD_FAIL;
 800a658:	2303      	movs	r3, #3
 800a65a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a65c:	e008      	b.n	800a670 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a65e:	6839      	ldr	r1, [r7, #0]
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f001 f9b5 	bl	800b9d0 <USBD_CtlError>
          ret = USBD_FAIL;
 800a666:	2303      	movs	r3, #3
 800a668:	75fb      	strb	r3, [r7, #23]
          break;
 800a66a:	e002      	b.n	800a672 <USBD_CDC_Setup+0x176>
          break;
 800a66c:	bf00      	nop
 800a66e:	e008      	b.n	800a682 <USBD_CDC_Setup+0x186>
          break;
 800a670:	bf00      	nop
      }
      break;
 800a672:	e006      	b.n	800a682 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a674:	6839      	ldr	r1, [r7, #0]
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f001 f9aa 	bl	800b9d0 <USBD_CtlError>
      ret = USBD_FAIL;
 800a67c:	2303      	movs	r3, #3
 800a67e:	75fb      	strb	r3, [r7, #23]
      break;
 800a680:	bf00      	nop
  }

  return (uint8_t)ret;
 800a682:	7dfb      	ldrb	r3, [r7, #23]
}
 800a684:	4618      	mov	r0, r3
 800a686:	3718      	adds	r7, #24
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	460b      	mov	r3, r1
 800a696:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a69e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d101      	bne.n	800a6ae <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a6aa:	2303      	movs	r3, #3
 800a6ac:	e04f      	b.n	800a74e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a6b6:	78fa      	ldrb	r2, [r7, #3]
 800a6b8:	6879      	ldr	r1, [r7, #4]
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	4413      	add	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	440b      	add	r3, r1
 800a6c4:	3318      	adds	r3, #24
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d029      	beq.n	800a720 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a6cc:	78fa      	ldrb	r2, [r7, #3]
 800a6ce:	6879      	ldr	r1, [r7, #4]
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	4413      	add	r3, r2
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	440b      	add	r3, r1
 800a6da:	3318      	adds	r3, #24
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	78f9      	ldrb	r1, [r7, #3]
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	440b      	add	r3, r1
 800a6e8:	00db      	lsls	r3, r3, #3
 800a6ea:	4403      	add	r3, r0
 800a6ec:	3320      	adds	r3, #32
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	fbb2 f1f3 	udiv	r1, r2, r3
 800a6f4:	fb01 f303 	mul.w	r3, r1, r3
 800a6f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d110      	bne.n	800a720 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a6fe:	78fa      	ldrb	r2, [r7, #3]
 800a700:	6879      	ldr	r1, [r7, #4]
 800a702:	4613      	mov	r3, r2
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	4413      	add	r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	440b      	add	r3, r1
 800a70c:	3318      	adds	r3, #24
 800a70e:	2200      	movs	r2, #0
 800a710:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a712:	78f9      	ldrb	r1, [r7, #3]
 800a714:	2300      	movs	r3, #0
 800a716:	2200      	movs	r2, #0
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f001 fe7c 	bl	800c416 <USBD_LL_Transmit>
 800a71e:	e015      	b.n	800a74c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	2200      	movs	r2, #0
 800a724:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a72e:	691b      	ldr	r3, [r3, #16]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00b      	beq.n	800a74c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	68ba      	ldr	r2, [r7, #8]
 800a73e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a742:	68ba      	ldr	r2, [r7, #8]
 800a744:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a748:	78fa      	ldrb	r2, [r7, #3]
 800a74a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b084      	sub	sp, #16
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
 800a75e:	460b      	mov	r3, r1
 800a760:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a768:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a770:	2b00      	cmp	r3, #0
 800a772:	d101      	bne.n	800a778 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a774:	2303      	movs	r3, #3
 800a776:	e015      	b.n	800a7a4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a778:	78fb      	ldrb	r3, [r7, #3]
 800a77a:	4619      	mov	r1, r3
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f001 fe8c 	bl	800c49a <USBD_LL_GetRxDataSize>
 800a782:	4602      	mov	r2, r0
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a790:	68db      	ldr	r3, [r3, #12]
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a79e:	4611      	mov	r1, r2
 800a7a0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3710      	adds	r7, #16
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7ba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d101      	bne.n	800a7c6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	e01b      	b.n	800a7fe <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d015      	beq.n	800a7fc <USBD_CDC_EP0_RxReady+0x50>
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a7d6:	2bff      	cmp	r3, #255	; 0xff
 800a7d8:	d010      	beq.n	800a7fc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	68fa      	ldr	r2, [r7, #12]
 800a7e4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a7e8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a7ea:	68fa      	ldr	r2, [r7, #12]
 800a7ec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a7f0:	b292      	uxth	r2, r2
 800a7f2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	22ff      	movs	r2, #255	; 0xff
 800a7f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
	...

0800a808 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2243      	movs	r2, #67	; 0x43
 800a814:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a816:	4b03      	ldr	r3, [pc, #12]	; (800a824 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a818:	4618      	mov	r0, r3
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr
 800a824:	2000009c 	.word	0x2000009c

0800a828 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2243      	movs	r2, #67	; 0x43
 800a834:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a836:	4b03      	ldr	r3, [pc, #12]	; (800a844 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a838:	4618      	mov	r0, r3
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr
 800a844:	20000058 	.word	0x20000058

0800a848 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2243      	movs	r2, #67	; 0x43
 800a854:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a856:	4b03      	ldr	r3, [pc, #12]	; (800a864 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a858:	4618      	mov	r0, r3
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr
 800a864:	200000e0 	.word	0x200000e0

0800a868 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	220a      	movs	r2, #10
 800a874:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a876:	4b03      	ldr	r3, [pc, #12]	; (800a884 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a878:	4618      	mov	r0, r3
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr
 800a884:	20000014 	.word	0x20000014

0800a888 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d101      	bne.n	800a89c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a898:	2303      	movs	r3, #3
 800a89a:	e004      	b.n	800a8a6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	683a      	ldr	r2, [r7, #0]
 800a8a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	370c      	adds	r7, #12
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr

0800a8b2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a8b2:	b480      	push	{r7}
 800a8b4:	b087      	sub	sp, #28
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	60f8      	str	r0, [r7, #12]
 800a8ba:	60b9      	str	r1, [r7, #8]
 800a8bc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8c4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d101      	bne.n	800a8d0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a8cc:	2303      	movs	r3, #3
 800a8ce:	e008      	b.n	800a8e2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	68ba      	ldr	r2, [r7, #8]
 800a8d4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a8e0:	2300      	movs	r3, #0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	371c      	adds	r7, #28
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr

0800a8ee <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a8ee:	b480      	push	{r7}
 800a8f0:	b085      	sub	sp, #20
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
 800a8f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8fe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d101      	bne.n	800a90a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a906:	2303      	movs	r3, #3
 800a908:	e004      	b.n	800a914 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	683a      	ldr	r2, [r7, #0]
 800a90e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3714      	adds	r7, #20
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a92e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a936:	2b00      	cmp	r3, #0
 800a938:	d101      	bne.n	800a93e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a93a:	2303      	movs	r3, #3
 800a93c:	e016      	b.n	800a96c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	7c1b      	ldrb	r3, [r3, #16]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d109      	bne.n	800a95a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a94c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a950:	2101      	movs	r1, #1
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f001 fd80 	bl	800c458 <USBD_LL_PrepareReceive>
 800a958:	e007      	b.n	800a96a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a960:	2340      	movs	r3, #64	; 0x40
 800a962:	2101      	movs	r1, #1
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f001 fd77 	bl	800c458 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a96a:	2300      	movs	r3, #0
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3710      	adds	r7, #16
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b086      	sub	sp, #24
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	4613      	mov	r3, r2
 800a980:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d101      	bne.n	800a98c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a988:	2303      	movs	r3, #3
 800a98a:	e01f      	b.n	800a9cc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2200      	movs	r2, #0
 800a990:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d003      	beq.n	800a9b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	79fa      	ldrb	r2, [r7, #7]
 800a9be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	f001 fbdf 	bl	800c184 <USBD_LL_Init>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a9ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3718      	adds	r7, #24
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d101      	bne.n	800a9ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a9e8:	2303      	movs	r3, #3
 800a9ea:	e016      	b.n	800aa1a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	683a      	ldr	r2, [r7, #0]
 800a9f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00b      	beq.n	800aa18 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa08:	f107 020e 	add.w	r2, r7, #14
 800aa0c:	4610      	mov	r0, r2
 800aa0e:	4798      	blx	r3
 800aa10:	4602      	mov	r2, r0
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b082      	sub	sp, #8
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f001 fc0a 	bl	800c244 <USBD_LL_Start>
 800aa30:	4603      	mov	r3, r0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800aa3a:	b480      	push	{r7}
 800aa3c:	b083      	sub	sp, #12
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800aa5c:	2303      	movs	r3, #3
 800aa5e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d009      	beq.n	800aa7e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	78fa      	ldrb	r2, [r7, #3]
 800aa74:	4611      	mov	r1, r2
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	4798      	blx	r3
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800aa7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	460b      	mov	r3, r1
 800aa92:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d007      	beq.n	800aaae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	78fa      	ldrb	r2, [r7, #3]
 800aaa8:	4611      	mov	r1, r2
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	4798      	blx	r3
  }

  return USBD_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aac8:	6839      	ldr	r1, [r7, #0]
 800aaca:	4618      	mov	r0, r3
 800aacc:	f000 ff46 	bl	800b95c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800aade:	461a      	mov	r2, r3
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aaec:	f003 031f 	and.w	r3, r3, #31
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	d01a      	beq.n	800ab2a <USBD_LL_SetupStage+0x72>
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	d822      	bhi.n	800ab3e <USBD_LL_SetupStage+0x86>
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d002      	beq.n	800ab02 <USBD_LL_SetupStage+0x4a>
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d00a      	beq.n	800ab16 <USBD_LL_SetupStage+0x5e>
 800ab00:	e01d      	b.n	800ab3e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab08:	4619      	mov	r1, r3
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 f9ee 	bl	800aeec <USBD_StdDevReq>
 800ab10:	4603      	mov	r3, r0
 800ab12:	73fb      	strb	r3, [r7, #15]
      break;
 800ab14:	e020      	b.n	800ab58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 fa52 	bl	800afc8 <USBD_StdItfReq>
 800ab24:	4603      	mov	r3, r0
 800ab26:	73fb      	strb	r3, [r7, #15]
      break;
 800ab28:	e016      	b.n	800ab58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab30:	4619      	mov	r1, r3
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 fa91 	bl	800b05a <USBD_StdEPReq>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	73fb      	strb	r3, [r7, #15]
      break;
 800ab3c:	e00c      	b.n	800ab58 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f001 fbd9 	bl	800c304 <USBD_LL_StallEP>
 800ab52:	4603      	mov	r3, r0
 800ab54:	73fb      	strb	r3, [r7, #15]
      break;
 800ab56:	bf00      	nop
  }

  return ret;
 800ab58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b086      	sub	sp, #24
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	60f8      	str	r0, [r7, #12]
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	607a      	str	r2, [r7, #4]
 800ab6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ab70:	7afb      	ldrb	r3, [r7, #11]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d138      	bne.n	800abe8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ab7c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab84:	2b03      	cmp	r3, #3
 800ab86:	d14a      	bne.n	800ac1e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	689a      	ldr	r2, [r3, #8]
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d913      	bls.n	800abbc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	689a      	ldr	r2, [r3, #8]
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	1ad2      	subs	r2, r2, r3
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	68da      	ldr	r2, [r3, #12]
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	4293      	cmp	r3, r2
 800abac:	bf28      	it	cs
 800abae:	4613      	movcs	r3, r2
 800abb0:	461a      	mov	r2, r3
 800abb2:	6879      	ldr	r1, [r7, #4]
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	f000 ffc5 	bl	800bb44 <USBD_CtlContinueRx>
 800abba:	e030      	b.n	800ac1e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	2b03      	cmp	r3, #3
 800abc6:	d10b      	bne.n	800abe0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abce:	691b      	ldr	r3, [r3, #16]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d005      	beq.n	800abe0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abda:	691b      	ldr	r3, [r3, #16]
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f000 ffc0 	bl	800bb66 <USBD_CtlSendStatus>
 800abe6:	e01a      	b.n	800ac1e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	2b03      	cmp	r3, #3
 800abf2:	d114      	bne.n	800ac1e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abfa:	699b      	ldr	r3, [r3, #24]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00e      	beq.n	800ac1e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac06:	699b      	ldr	r3, [r3, #24]
 800ac08:	7afa      	ldrb	r2, [r7, #11]
 800ac0a:	4611      	mov	r1, r2
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	4798      	blx	r3
 800ac10:	4603      	mov	r3, r0
 800ac12:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ac14:	7dfb      	ldrb	r3, [r7, #23]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d001      	beq.n	800ac1e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ac1a:	7dfb      	ldrb	r3, [r7, #23]
 800ac1c:	e000      	b.n	800ac20 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ac1e:	2300      	movs	r3, #0
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3718      	adds	r7, #24
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b086      	sub	sp, #24
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	460b      	mov	r3, r1
 800ac32:	607a      	str	r2, [r7, #4]
 800ac34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ac36:	7afb      	ldrb	r3, [r7, #11]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d16b      	bne.n	800ad14 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	3314      	adds	r3, #20
 800ac40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	d156      	bne.n	800acfa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	689a      	ldr	r2, [r3, #8]
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d914      	bls.n	800ac82 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	689a      	ldr	r2, [r3, #8]
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	1ad2      	subs	r2, r2, r3
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	6879      	ldr	r1, [r7, #4]
 800ac6e:	68f8      	ldr	r0, [r7, #12]
 800ac70:	f000 ff3a 	bl	800bae8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac74:	2300      	movs	r3, #0
 800ac76:	2200      	movs	r2, #0
 800ac78:	2100      	movs	r1, #0
 800ac7a:	68f8      	ldr	r0, [r7, #12]
 800ac7c:	f001 fbec 	bl	800c458 <USBD_LL_PrepareReceive>
 800ac80:	e03b      	b.n	800acfa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	68da      	ldr	r2, [r3, #12]
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	689b      	ldr	r3, [r3, #8]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d11c      	bne.n	800acc8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	685a      	ldr	r2, [r3, #4]
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d316      	bcc.n	800acc8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	685a      	ldr	r2, [r3, #4]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d20f      	bcs.n	800acc8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aca8:	2200      	movs	r2, #0
 800acaa:	2100      	movs	r1, #0
 800acac:	68f8      	ldr	r0, [r7, #12]
 800acae:	f000 ff1b 	bl	800bae8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acba:	2300      	movs	r3, #0
 800acbc:	2200      	movs	r2, #0
 800acbe:	2100      	movs	r1, #0
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f001 fbc9 	bl	800c458 <USBD_LL_PrepareReceive>
 800acc6:	e018      	b.n	800acfa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	2b03      	cmp	r3, #3
 800acd2:	d10b      	bne.n	800acec <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d005      	beq.n	800acec <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	68f8      	ldr	r0, [r7, #12]
 800acea:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800acec:	2180      	movs	r1, #128	; 0x80
 800acee:	68f8      	ldr	r0, [r7, #12]
 800acf0:	f001 fb08 	bl	800c304 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	f000 ff49 	bl	800bb8c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d122      	bne.n	800ad4a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ad04:	68f8      	ldr	r0, [r7, #12]
 800ad06:	f7ff fe98 	bl	800aa3a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ad12:	e01a      	b.n	800ad4a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	2b03      	cmp	r3, #3
 800ad1e:	d114      	bne.n	800ad4a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad26:	695b      	ldr	r3, [r3, #20]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00e      	beq.n	800ad4a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad32:	695b      	ldr	r3, [r3, #20]
 800ad34:	7afa      	ldrb	r2, [r7, #11]
 800ad36:	4611      	mov	r1, r2
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	4798      	blx	r3
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ad40:	7dfb      	ldrb	r3, [r7, #23]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d001      	beq.n	800ad4a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ad46:	7dfb      	ldrb	r3, [r7, #23]
 800ad48:	e000      	b.n	800ad4c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3718      	adds	r7, #24
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d101      	bne.n	800ad88 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ad84:	2303      	movs	r3, #3
 800ad86:	e02f      	b.n	800ade8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00f      	beq.n	800adb2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d009      	beq.n	800adb2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	6852      	ldr	r2, [r2, #4]
 800adaa:	b2d2      	uxtb	r2, r2
 800adac:	4611      	mov	r1, r2
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800adb2:	2340      	movs	r3, #64	; 0x40
 800adb4:	2200      	movs	r2, #0
 800adb6:	2100      	movs	r1, #0
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f001 fa5e 	bl	800c27a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2201      	movs	r2, #1
 800adc2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2240      	movs	r2, #64	; 0x40
 800adca:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800adce:	2340      	movs	r3, #64	; 0x40
 800add0:	2200      	movs	r2, #0
 800add2:	2180      	movs	r1, #128	; 0x80
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f001 fa50 	bl	800c27a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2201      	movs	r2, #1
 800adde:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2240      	movs	r2, #64	; 0x40
 800ade4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3708      	adds	r7, #8
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	460b      	mov	r3, r1
 800adfa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	78fa      	ldrb	r2, [r7, #3]
 800ae00:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ae02:	2300      	movs	r3, #0
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae1e:	b2da      	uxtb	r2, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2204      	movs	r2, #4
 800ae2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ae2e:	2300      	movs	r3, #0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	2b04      	cmp	r3, #4
 800ae4e:	d106      	bne.n	800ae5e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ae56:	b2da      	uxtb	r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ae5e:	2300      	movs	r3, #0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d101      	bne.n	800ae82 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ae7e:	2303      	movs	r3, #3
 800ae80:	e012      	b.n	800aea8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae88:	b2db      	uxtb	r3, r3
 800ae8a:	2b03      	cmp	r3, #3
 800ae8c:	d10b      	bne.n	800aea6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae94:	69db      	ldr	r3, [r3, #28]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d005      	beq.n	800aea6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aea0:	69db      	ldr	r3, [r3, #28]
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3708      	adds	r7, #8
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b087      	sub	sp, #28
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	3301      	adds	r3, #1
 800aec6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aece:	8a3b      	ldrh	r3, [r7, #16]
 800aed0:	021b      	lsls	r3, r3, #8
 800aed2:	b21a      	sxth	r2, r3
 800aed4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	b21b      	sxth	r3, r3
 800aedc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aede:	89fb      	ldrh	r3, [r7, #14]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	371c      	adds	r7, #28
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aef6:	2300      	movs	r3, #0
 800aef8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af02:	2b40      	cmp	r3, #64	; 0x40
 800af04:	d005      	beq.n	800af12 <USBD_StdDevReq+0x26>
 800af06:	2b40      	cmp	r3, #64	; 0x40
 800af08:	d853      	bhi.n	800afb2 <USBD_StdDevReq+0xc6>
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00b      	beq.n	800af26 <USBD_StdDevReq+0x3a>
 800af0e:	2b20      	cmp	r3, #32
 800af10:	d14f      	bne.n	800afb2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	6839      	ldr	r1, [r7, #0]
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	4798      	blx	r3
 800af20:	4603      	mov	r3, r0
 800af22:	73fb      	strb	r3, [r7, #15]
      break;
 800af24:	e04a      	b.n	800afbc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	785b      	ldrb	r3, [r3, #1]
 800af2a:	2b09      	cmp	r3, #9
 800af2c:	d83b      	bhi.n	800afa6 <USBD_StdDevReq+0xba>
 800af2e:	a201      	add	r2, pc, #4	; (adr r2, 800af34 <USBD_StdDevReq+0x48>)
 800af30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af34:	0800af89 	.word	0x0800af89
 800af38:	0800af9d 	.word	0x0800af9d
 800af3c:	0800afa7 	.word	0x0800afa7
 800af40:	0800af93 	.word	0x0800af93
 800af44:	0800afa7 	.word	0x0800afa7
 800af48:	0800af67 	.word	0x0800af67
 800af4c:	0800af5d 	.word	0x0800af5d
 800af50:	0800afa7 	.word	0x0800afa7
 800af54:	0800af7f 	.word	0x0800af7f
 800af58:	0800af71 	.word	0x0800af71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800af5c:	6839      	ldr	r1, [r7, #0]
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 f9de 	bl	800b320 <USBD_GetDescriptor>
          break;
 800af64:	e024      	b.n	800afb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800af66:	6839      	ldr	r1, [r7, #0]
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 fb6d 	bl	800b648 <USBD_SetAddress>
          break;
 800af6e:	e01f      	b.n	800afb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800af70:	6839      	ldr	r1, [r7, #0]
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 fbac 	bl	800b6d0 <USBD_SetConfig>
 800af78:	4603      	mov	r3, r0
 800af7a:	73fb      	strb	r3, [r7, #15]
          break;
 800af7c:	e018      	b.n	800afb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800af7e:	6839      	ldr	r1, [r7, #0]
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 fc4b 	bl	800b81c <USBD_GetConfig>
          break;
 800af86:	e013      	b.n	800afb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800af88:	6839      	ldr	r1, [r7, #0]
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 fc7c 	bl	800b888 <USBD_GetStatus>
          break;
 800af90:	e00e      	b.n	800afb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800af92:	6839      	ldr	r1, [r7, #0]
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 fcab 	bl	800b8f0 <USBD_SetFeature>
          break;
 800af9a:	e009      	b.n	800afb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800af9c:	6839      	ldr	r1, [r7, #0]
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 fcba 	bl	800b918 <USBD_ClrFeature>
          break;
 800afa4:	e004      	b.n	800afb0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 fd11 	bl	800b9d0 <USBD_CtlError>
          break;
 800afae:	bf00      	nop
      }
      break;
 800afb0:	e004      	b.n	800afbc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800afb2:	6839      	ldr	r1, [r7, #0]
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 fd0b 	bl	800b9d0 <USBD_CtlError>
      break;
 800afba:	bf00      	nop
  }

  return ret;
 800afbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3710      	adds	r7, #16
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop

0800afc8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afd2:	2300      	movs	r3, #0
 800afd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afde:	2b40      	cmp	r3, #64	; 0x40
 800afe0:	d005      	beq.n	800afee <USBD_StdItfReq+0x26>
 800afe2:	2b40      	cmp	r3, #64	; 0x40
 800afe4:	d82f      	bhi.n	800b046 <USBD_StdItfReq+0x7e>
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d001      	beq.n	800afee <USBD_StdItfReq+0x26>
 800afea:	2b20      	cmp	r3, #32
 800afec:	d12b      	bne.n	800b046 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	3b01      	subs	r3, #1
 800aff8:	2b02      	cmp	r3, #2
 800affa:	d81d      	bhi.n	800b038 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	889b      	ldrh	r3, [r3, #4]
 800b000:	b2db      	uxtb	r3, r3
 800b002:	2b01      	cmp	r3, #1
 800b004:	d813      	bhi.n	800b02e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	6839      	ldr	r1, [r7, #0]
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	4798      	blx	r3
 800b014:	4603      	mov	r3, r0
 800b016:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	88db      	ldrh	r3, [r3, #6]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d110      	bne.n	800b042 <USBD_StdItfReq+0x7a>
 800b020:	7bfb      	ldrb	r3, [r7, #15]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d10d      	bne.n	800b042 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 fd9d 	bl	800bb66 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b02c:	e009      	b.n	800b042 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b02e:	6839      	ldr	r1, [r7, #0]
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 fccd 	bl	800b9d0 <USBD_CtlError>
          break;
 800b036:	e004      	b.n	800b042 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b038:	6839      	ldr	r1, [r7, #0]
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 fcc8 	bl	800b9d0 <USBD_CtlError>
          break;
 800b040:	e000      	b.n	800b044 <USBD_StdItfReq+0x7c>
          break;
 800b042:	bf00      	nop
      }
      break;
 800b044:	e004      	b.n	800b050 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b046:	6839      	ldr	r1, [r7, #0]
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 fcc1 	bl	800b9d0 <USBD_CtlError>
      break;
 800b04e:	bf00      	nop
  }

  return ret;
 800b050:	7bfb      	ldrb	r3, [r7, #15]
}
 800b052:	4618      	mov	r0, r3
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}

0800b05a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b084      	sub	sp, #16
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
 800b062:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b064:	2300      	movs	r3, #0
 800b066:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	889b      	ldrh	r3, [r3, #4]
 800b06c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b076:	2b40      	cmp	r3, #64	; 0x40
 800b078:	d007      	beq.n	800b08a <USBD_StdEPReq+0x30>
 800b07a:	2b40      	cmp	r3, #64	; 0x40
 800b07c:	f200 8145 	bhi.w	800b30a <USBD_StdEPReq+0x2b0>
 800b080:	2b00      	cmp	r3, #0
 800b082:	d00c      	beq.n	800b09e <USBD_StdEPReq+0x44>
 800b084:	2b20      	cmp	r3, #32
 800b086:	f040 8140 	bne.w	800b30a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b090:	689b      	ldr	r3, [r3, #8]
 800b092:	6839      	ldr	r1, [r7, #0]
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	4798      	blx	r3
 800b098:	4603      	mov	r3, r0
 800b09a:	73fb      	strb	r3, [r7, #15]
      break;
 800b09c:	e13a      	b.n	800b314 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	785b      	ldrb	r3, [r3, #1]
 800b0a2:	2b03      	cmp	r3, #3
 800b0a4:	d007      	beq.n	800b0b6 <USBD_StdEPReq+0x5c>
 800b0a6:	2b03      	cmp	r3, #3
 800b0a8:	f300 8129 	bgt.w	800b2fe <USBD_StdEPReq+0x2a4>
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d07f      	beq.n	800b1b0 <USBD_StdEPReq+0x156>
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d03c      	beq.n	800b12e <USBD_StdEPReq+0xd4>
 800b0b4:	e123      	b.n	800b2fe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	2b02      	cmp	r3, #2
 800b0c0:	d002      	beq.n	800b0c8 <USBD_StdEPReq+0x6e>
 800b0c2:	2b03      	cmp	r3, #3
 800b0c4:	d016      	beq.n	800b0f4 <USBD_StdEPReq+0x9a>
 800b0c6:	e02c      	b.n	800b122 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0c8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00d      	beq.n	800b0ea <USBD_StdEPReq+0x90>
 800b0ce:	7bbb      	ldrb	r3, [r7, #14]
 800b0d0:	2b80      	cmp	r3, #128	; 0x80
 800b0d2:	d00a      	beq.n	800b0ea <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0d4:	7bbb      	ldrb	r3, [r7, #14]
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f001 f913 	bl	800c304 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0de:	2180      	movs	r1, #128	; 0x80
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f001 f90f 	bl	800c304 <USBD_LL_StallEP>
 800b0e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0e8:	e020      	b.n	800b12c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b0ea:	6839      	ldr	r1, [r7, #0]
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 fc6f 	bl	800b9d0 <USBD_CtlError>
              break;
 800b0f2:	e01b      	b.n	800b12c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	885b      	ldrh	r3, [r3, #2]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d10e      	bne.n	800b11a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b0fc:	7bbb      	ldrb	r3, [r7, #14]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d00b      	beq.n	800b11a <USBD_StdEPReq+0xc0>
 800b102:	7bbb      	ldrb	r3, [r7, #14]
 800b104:	2b80      	cmp	r3, #128	; 0x80
 800b106:	d008      	beq.n	800b11a <USBD_StdEPReq+0xc0>
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	88db      	ldrh	r3, [r3, #6]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d104      	bne.n	800b11a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b110:	7bbb      	ldrb	r3, [r7, #14]
 800b112:	4619      	mov	r1, r3
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f001 f8f5 	bl	800c304 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 fd23 	bl	800bb66 <USBD_CtlSendStatus>

              break;
 800b120:	e004      	b.n	800b12c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b122:	6839      	ldr	r1, [r7, #0]
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 fc53 	bl	800b9d0 <USBD_CtlError>
              break;
 800b12a:	bf00      	nop
          }
          break;
 800b12c:	e0ec      	b.n	800b308 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b134:	b2db      	uxtb	r3, r3
 800b136:	2b02      	cmp	r3, #2
 800b138:	d002      	beq.n	800b140 <USBD_StdEPReq+0xe6>
 800b13a:	2b03      	cmp	r3, #3
 800b13c:	d016      	beq.n	800b16c <USBD_StdEPReq+0x112>
 800b13e:	e030      	b.n	800b1a2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b140:	7bbb      	ldrb	r3, [r7, #14]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00d      	beq.n	800b162 <USBD_StdEPReq+0x108>
 800b146:	7bbb      	ldrb	r3, [r7, #14]
 800b148:	2b80      	cmp	r3, #128	; 0x80
 800b14a:	d00a      	beq.n	800b162 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b14c:	7bbb      	ldrb	r3, [r7, #14]
 800b14e:	4619      	mov	r1, r3
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f001 f8d7 	bl	800c304 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b156:	2180      	movs	r1, #128	; 0x80
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f001 f8d3 	bl	800c304 <USBD_LL_StallEP>
 800b15e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b160:	e025      	b.n	800b1ae <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b162:	6839      	ldr	r1, [r7, #0]
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 fc33 	bl	800b9d0 <USBD_CtlError>
              break;
 800b16a:	e020      	b.n	800b1ae <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	885b      	ldrh	r3, [r3, #2]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d11b      	bne.n	800b1ac <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b174:	7bbb      	ldrb	r3, [r7, #14]
 800b176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d004      	beq.n	800b188 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b17e:	7bbb      	ldrb	r3, [r7, #14]
 800b180:	4619      	mov	r1, r3
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f001 f8dd 	bl	800c342 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 fcec 	bl	800bb66 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b194:	689b      	ldr	r3, [r3, #8]
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	4798      	blx	r3
 800b19c:	4603      	mov	r3, r0
 800b19e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b1a0:	e004      	b.n	800b1ac <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b1a2:	6839      	ldr	r1, [r7, #0]
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 fc13 	bl	800b9d0 <USBD_CtlError>
              break;
 800b1aa:	e000      	b.n	800b1ae <USBD_StdEPReq+0x154>
              break;
 800b1ac:	bf00      	nop
          }
          break;
 800b1ae:	e0ab      	b.n	800b308 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1b6:	b2db      	uxtb	r3, r3
 800b1b8:	2b02      	cmp	r3, #2
 800b1ba:	d002      	beq.n	800b1c2 <USBD_StdEPReq+0x168>
 800b1bc:	2b03      	cmp	r3, #3
 800b1be:	d032      	beq.n	800b226 <USBD_StdEPReq+0x1cc>
 800b1c0:	e097      	b.n	800b2f2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1c2:	7bbb      	ldrb	r3, [r7, #14]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d007      	beq.n	800b1d8 <USBD_StdEPReq+0x17e>
 800b1c8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ca:	2b80      	cmp	r3, #128	; 0x80
 800b1cc:	d004      	beq.n	800b1d8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b1ce:	6839      	ldr	r1, [r7, #0]
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 fbfd 	bl	800b9d0 <USBD_CtlError>
                break;
 800b1d6:	e091      	b.n	800b2fc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	da0b      	bge.n	800b1f8 <USBD_StdEPReq+0x19e>
 800b1e0:	7bbb      	ldrb	r3, [r7, #14]
 800b1e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	4413      	add	r3, r2
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	3310      	adds	r3, #16
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	4413      	add	r3, r2
 800b1f4:	3304      	adds	r3, #4
 800b1f6:	e00b      	b.n	800b210 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1f8:	7bbb      	ldrb	r3, [r7, #14]
 800b1fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1fe:	4613      	mov	r3, r2
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	4413      	add	r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	4413      	add	r3, r2
 800b20e:	3304      	adds	r3, #4
 800b210:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	2200      	movs	r2, #0
 800b216:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	2202      	movs	r2, #2
 800b21c:	4619      	mov	r1, r3
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 fc47 	bl	800bab2 <USBD_CtlSendData>
              break;
 800b224:	e06a      	b.n	800b2fc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b226:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	da11      	bge.n	800b252 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b22e:	7bbb      	ldrb	r3, [r7, #14]
 800b230:	f003 020f 	and.w	r2, r3, #15
 800b234:	6879      	ldr	r1, [r7, #4]
 800b236:	4613      	mov	r3, r2
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4413      	add	r3, r2
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	440b      	add	r3, r1
 800b240:	3324      	adds	r3, #36	; 0x24
 800b242:	881b      	ldrh	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d117      	bne.n	800b278 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b248:	6839      	ldr	r1, [r7, #0]
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 fbc0 	bl	800b9d0 <USBD_CtlError>
                  break;
 800b250:	e054      	b.n	800b2fc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b252:	7bbb      	ldrb	r3, [r7, #14]
 800b254:	f003 020f 	and.w	r2, r3, #15
 800b258:	6879      	ldr	r1, [r7, #4]
 800b25a:	4613      	mov	r3, r2
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	4413      	add	r3, r2
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	440b      	add	r3, r1
 800b264:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b268:	881b      	ldrh	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d104      	bne.n	800b278 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b26e:	6839      	ldr	r1, [r7, #0]
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 fbad 	bl	800b9d0 <USBD_CtlError>
                  break;
 800b276:	e041      	b.n	800b2fc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b278:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	da0b      	bge.n	800b298 <USBD_StdEPReq+0x23e>
 800b280:	7bbb      	ldrb	r3, [r7, #14]
 800b282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b286:	4613      	mov	r3, r2
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	4413      	add	r3, r2
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	3310      	adds	r3, #16
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	4413      	add	r3, r2
 800b294:	3304      	adds	r3, #4
 800b296:	e00b      	b.n	800b2b0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b298:	7bbb      	ldrb	r3, [r7, #14]
 800b29a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b29e:	4613      	mov	r3, r2
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	4413      	add	r3, r2
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	4413      	add	r3, r2
 800b2ae:	3304      	adds	r3, #4
 800b2b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b2b2:	7bbb      	ldrb	r3, [r7, #14]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d002      	beq.n	800b2be <USBD_StdEPReq+0x264>
 800b2b8:	7bbb      	ldrb	r3, [r7, #14]
 800b2ba:	2b80      	cmp	r3, #128	; 0x80
 800b2bc:	d103      	bne.n	800b2c6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	601a      	str	r2, [r3, #0]
 800b2c4:	e00e      	b.n	800b2e4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b2c6:	7bbb      	ldrb	r3, [r7, #14]
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f001 f858 	bl	800c380 <USBD_LL_IsStallEP>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d003      	beq.n	800b2de <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	2201      	movs	r2, #1
 800b2da:	601a      	str	r2, [r3, #0]
 800b2dc:	e002      	b.n	800b2e4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	2202      	movs	r2, #2
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 fbe1 	bl	800bab2 <USBD_CtlSendData>
              break;
 800b2f0:	e004      	b.n	800b2fc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b2f2:	6839      	ldr	r1, [r7, #0]
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 fb6b 	bl	800b9d0 <USBD_CtlError>
              break;
 800b2fa:	bf00      	nop
          }
          break;
 800b2fc:	e004      	b.n	800b308 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b2fe:	6839      	ldr	r1, [r7, #0]
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 fb65 	bl	800b9d0 <USBD_CtlError>
          break;
 800b306:	bf00      	nop
      }
      break;
 800b308:	e004      	b.n	800b314 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b30a:	6839      	ldr	r1, [r7, #0]
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 fb5f 	bl	800b9d0 <USBD_CtlError>
      break;
 800b312:	bf00      	nop
  }

  return ret;
 800b314:	7bfb      	ldrb	r3, [r7, #15]
}
 800b316:	4618      	mov	r0, r3
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
	...

0800b320 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b32a:	2300      	movs	r3, #0
 800b32c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b32e:	2300      	movs	r3, #0
 800b330:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b332:	2300      	movs	r3, #0
 800b334:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	885b      	ldrh	r3, [r3, #2]
 800b33a:	0a1b      	lsrs	r3, r3, #8
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	3b01      	subs	r3, #1
 800b340:	2b0e      	cmp	r3, #14
 800b342:	f200 8152 	bhi.w	800b5ea <USBD_GetDescriptor+0x2ca>
 800b346:	a201      	add	r2, pc, #4	; (adr r2, 800b34c <USBD_GetDescriptor+0x2c>)
 800b348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b34c:	0800b3bd 	.word	0x0800b3bd
 800b350:	0800b3d5 	.word	0x0800b3d5
 800b354:	0800b415 	.word	0x0800b415
 800b358:	0800b5eb 	.word	0x0800b5eb
 800b35c:	0800b5eb 	.word	0x0800b5eb
 800b360:	0800b58b 	.word	0x0800b58b
 800b364:	0800b5b7 	.word	0x0800b5b7
 800b368:	0800b5eb 	.word	0x0800b5eb
 800b36c:	0800b5eb 	.word	0x0800b5eb
 800b370:	0800b5eb 	.word	0x0800b5eb
 800b374:	0800b5eb 	.word	0x0800b5eb
 800b378:	0800b5eb 	.word	0x0800b5eb
 800b37c:	0800b5eb 	.word	0x0800b5eb
 800b380:	0800b5eb 	.word	0x0800b5eb
 800b384:	0800b389 	.word	0x0800b389
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b38e:	69db      	ldr	r3, [r3, #28]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d00b      	beq.n	800b3ac <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b39a:	69db      	ldr	r3, [r3, #28]
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	7c12      	ldrb	r2, [r2, #16]
 800b3a0:	f107 0108 	add.w	r1, r7, #8
 800b3a4:	4610      	mov	r0, r2
 800b3a6:	4798      	blx	r3
 800b3a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3aa:	e126      	b.n	800b5fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b3ac:	6839      	ldr	r1, [r7, #0]
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 fb0e 	bl	800b9d0 <USBD_CtlError>
        err++;
 800b3b4:	7afb      	ldrb	r3, [r7, #11]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	72fb      	strb	r3, [r7, #11]
      break;
 800b3ba:	e11e      	b.n	800b5fa <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	7c12      	ldrb	r2, [r2, #16]
 800b3c8:	f107 0108 	add.w	r1, r7, #8
 800b3cc:	4610      	mov	r0, r2
 800b3ce:	4798      	blx	r3
 800b3d0:	60f8      	str	r0, [r7, #12]
      break;
 800b3d2:	e112      	b.n	800b5fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	7c1b      	ldrb	r3, [r3, #16]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d10d      	bne.n	800b3f8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3e4:	f107 0208 	add.w	r2, r7, #8
 800b3e8:	4610      	mov	r0, r2
 800b3ea:	4798      	blx	r3
 800b3ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	2202      	movs	r2, #2
 800b3f4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b3f6:	e100      	b.n	800b5fa <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b400:	f107 0208 	add.w	r2, r7, #8
 800b404:	4610      	mov	r0, r2
 800b406:	4798      	blx	r3
 800b408:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	3301      	adds	r3, #1
 800b40e:	2202      	movs	r2, #2
 800b410:	701a      	strb	r2, [r3, #0]
      break;
 800b412:	e0f2      	b.n	800b5fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	885b      	ldrh	r3, [r3, #2]
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	2b05      	cmp	r3, #5
 800b41c:	f200 80ac 	bhi.w	800b578 <USBD_GetDescriptor+0x258>
 800b420:	a201      	add	r2, pc, #4	; (adr r2, 800b428 <USBD_GetDescriptor+0x108>)
 800b422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b426:	bf00      	nop
 800b428:	0800b441 	.word	0x0800b441
 800b42c:	0800b475 	.word	0x0800b475
 800b430:	0800b4a9 	.word	0x0800b4a9
 800b434:	0800b4dd 	.word	0x0800b4dd
 800b438:	0800b511 	.word	0x0800b511
 800b43c:	0800b545 	.word	0x0800b545
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d00b      	beq.n	800b464 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	7c12      	ldrb	r2, [r2, #16]
 800b458:	f107 0108 	add.w	r1, r7, #8
 800b45c:	4610      	mov	r0, r2
 800b45e:	4798      	blx	r3
 800b460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b462:	e091      	b.n	800b588 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b464:	6839      	ldr	r1, [r7, #0]
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f000 fab2 	bl	800b9d0 <USBD_CtlError>
            err++;
 800b46c:	7afb      	ldrb	r3, [r7, #11]
 800b46e:	3301      	adds	r3, #1
 800b470:	72fb      	strb	r3, [r7, #11]
          break;
 800b472:	e089      	b.n	800b588 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d00b      	beq.n	800b498 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	7c12      	ldrb	r2, [r2, #16]
 800b48c:	f107 0108 	add.w	r1, r7, #8
 800b490:	4610      	mov	r0, r2
 800b492:	4798      	blx	r3
 800b494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b496:	e077      	b.n	800b588 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b498:	6839      	ldr	r1, [r7, #0]
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fa98 	bl	800b9d0 <USBD_CtlError>
            err++;
 800b4a0:	7afb      	ldrb	r3, [r7, #11]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	72fb      	strb	r3, [r7, #11]
          break;
 800b4a6:	e06f      	b.n	800b588 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d00b      	beq.n	800b4cc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	7c12      	ldrb	r2, [r2, #16]
 800b4c0:	f107 0108 	add.w	r1, r7, #8
 800b4c4:	4610      	mov	r0, r2
 800b4c6:	4798      	blx	r3
 800b4c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4ca:	e05d      	b.n	800b588 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4cc:	6839      	ldr	r1, [r7, #0]
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fa7e 	bl	800b9d0 <USBD_CtlError>
            err++;
 800b4d4:	7afb      	ldrb	r3, [r7, #11]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b4da:	e055      	b.n	800b588 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d00b      	beq.n	800b500 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	7c12      	ldrb	r2, [r2, #16]
 800b4f4:	f107 0108 	add.w	r1, r7, #8
 800b4f8:	4610      	mov	r0, r2
 800b4fa:	4798      	blx	r3
 800b4fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4fe:	e043      	b.n	800b588 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b500:	6839      	ldr	r1, [r7, #0]
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 fa64 	bl	800b9d0 <USBD_CtlError>
            err++;
 800b508:	7afb      	ldrb	r3, [r7, #11]
 800b50a:	3301      	adds	r3, #1
 800b50c:	72fb      	strb	r3, [r7, #11]
          break;
 800b50e:	e03b      	b.n	800b588 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b516:	695b      	ldr	r3, [r3, #20]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00b      	beq.n	800b534 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b522:	695b      	ldr	r3, [r3, #20]
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	7c12      	ldrb	r2, [r2, #16]
 800b528:	f107 0108 	add.w	r1, r7, #8
 800b52c:	4610      	mov	r0, r2
 800b52e:	4798      	blx	r3
 800b530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b532:	e029      	b.n	800b588 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b534:	6839      	ldr	r1, [r7, #0]
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 fa4a 	bl	800b9d0 <USBD_CtlError>
            err++;
 800b53c:	7afb      	ldrb	r3, [r7, #11]
 800b53e:	3301      	adds	r3, #1
 800b540:	72fb      	strb	r3, [r7, #11]
          break;
 800b542:	e021      	b.n	800b588 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b54a:	699b      	ldr	r3, [r3, #24]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d00b      	beq.n	800b568 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b556:	699b      	ldr	r3, [r3, #24]
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	7c12      	ldrb	r2, [r2, #16]
 800b55c:	f107 0108 	add.w	r1, r7, #8
 800b560:	4610      	mov	r0, r2
 800b562:	4798      	blx	r3
 800b564:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b566:	e00f      	b.n	800b588 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 fa30 	bl	800b9d0 <USBD_CtlError>
            err++;
 800b570:	7afb      	ldrb	r3, [r7, #11]
 800b572:	3301      	adds	r3, #1
 800b574:	72fb      	strb	r3, [r7, #11]
          break;
 800b576:	e007      	b.n	800b588 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 fa28 	bl	800b9d0 <USBD_CtlError>
          err++;
 800b580:	7afb      	ldrb	r3, [r7, #11]
 800b582:	3301      	adds	r3, #1
 800b584:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b586:	bf00      	nop
      }
      break;
 800b588:	e037      	b.n	800b5fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	7c1b      	ldrb	r3, [r3, #16]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d109      	bne.n	800b5a6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b59a:	f107 0208 	add.w	r2, r7, #8
 800b59e:	4610      	mov	r0, r2
 800b5a0:	4798      	blx	r3
 800b5a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5a4:	e029      	b.n	800b5fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b5a6:	6839      	ldr	r1, [r7, #0]
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 fa11 	bl	800b9d0 <USBD_CtlError>
        err++;
 800b5ae:	7afb      	ldrb	r3, [r7, #11]
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	72fb      	strb	r3, [r7, #11]
      break;
 800b5b4:	e021      	b.n	800b5fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	7c1b      	ldrb	r3, [r3, #16]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d10d      	bne.n	800b5da <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5c6:	f107 0208 	add.w	r2, r7, #8
 800b5ca:	4610      	mov	r0, r2
 800b5cc:	4798      	blx	r3
 800b5ce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	2207      	movs	r2, #7
 800b5d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5d8:	e00f      	b.n	800b5fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b5da:	6839      	ldr	r1, [r7, #0]
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 f9f7 	bl	800b9d0 <USBD_CtlError>
        err++;
 800b5e2:	7afb      	ldrb	r3, [r7, #11]
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	72fb      	strb	r3, [r7, #11]
      break;
 800b5e8:	e007      	b.n	800b5fa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b5ea:	6839      	ldr	r1, [r7, #0]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 f9ef 	bl	800b9d0 <USBD_CtlError>
      err++;
 800b5f2:	7afb      	ldrb	r3, [r7, #11]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	72fb      	strb	r3, [r7, #11]
      break;
 800b5f8:	bf00      	nop
  }

  if (err != 0U)
 800b5fa:	7afb      	ldrb	r3, [r7, #11]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d11e      	bne.n	800b63e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	88db      	ldrh	r3, [r3, #6]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d016      	beq.n	800b636 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b608:	893b      	ldrh	r3, [r7, #8]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d00e      	beq.n	800b62c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	88da      	ldrh	r2, [r3, #6]
 800b612:	893b      	ldrh	r3, [r7, #8]
 800b614:	4293      	cmp	r3, r2
 800b616:	bf28      	it	cs
 800b618:	4613      	movcs	r3, r2
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b61e:	893b      	ldrh	r3, [r7, #8]
 800b620:	461a      	mov	r2, r3
 800b622:	68f9      	ldr	r1, [r7, #12]
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 fa44 	bl	800bab2 <USBD_CtlSendData>
 800b62a:	e009      	b.n	800b640 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b62c:	6839      	ldr	r1, [r7, #0]
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 f9ce 	bl	800b9d0 <USBD_CtlError>
 800b634:	e004      	b.n	800b640 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 fa95 	bl	800bb66 <USBD_CtlSendStatus>
 800b63c:	e000      	b.n	800b640 <USBD_GetDescriptor+0x320>
    return;
 800b63e:	bf00      	nop
  }
}
 800b640:	3710      	adds	r7, #16
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop

0800b648 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	889b      	ldrh	r3, [r3, #4]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d131      	bne.n	800b6be <USBD_SetAddress+0x76>
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	88db      	ldrh	r3, [r3, #6]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d12d      	bne.n	800b6be <USBD_SetAddress+0x76>
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	885b      	ldrh	r3, [r3, #2]
 800b666:	2b7f      	cmp	r3, #127	; 0x7f
 800b668:	d829      	bhi.n	800b6be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	885b      	ldrh	r3, [r3, #2]
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b674:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	2b03      	cmp	r3, #3
 800b680:	d104      	bne.n	800b68c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b682:	6839      	ldr	r1, [r7, #0]
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 f9a3 	bl	800b9d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b68a:	e01d      	b.n	800b6c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	7bfa      	ldrb	r2, [r7, #15]
 800b690:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b694:	7bfb      	ldrb	r3, [r7, #15]
 800b696:	4619      	mov	r1, r3
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 fe9d 	bl	800c3d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 fa61 	bl	800bb66 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b6a4:	7bfb      	ldrb	r3, [r7, #15]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d004      	beq.n	800b6b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2202      	movs	r2, #2
 800b6ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6b2:	e009      	b.n	800b6c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6bc:	e004      	b.n	800b6c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b6be:	6839      	ldr	r1, [r7, #0]
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 f985 	bl	800b9d0 <USBD_CtlError>
  }
}
 800b6c6:	bf00      	nop
 800b6c8:	bf00      	nop
 800b6ca:	3710      	adds	r7, #16
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	885b      	ldrh	r3, [r3, #2]
 800b6e2:	b2da      	uxtb	r2, r3
 800b6e4:	4b4c      	ldr	r3, [pc, #304]	; (800b818 <USBD_SetConfig+0x148>)
 800b6e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b6e8:	4b4b      	ldr	r3, [pc, #300]	; (800b818 <USBD_SetConfig+0x148>)
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d905      	bls.n	800b6fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b6f0:	6839      	ldr	r1, [r7, #0]
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 f96c 	bl	800b9d0 <USBD_CtlError>
    return USBD_FAIL;
 800b6f8:	2303      	movs	r3, #3
 800b6fa:	e088      	b.n	800b80e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b702:	b2db      	uxtb	r3, r3
 800b704:	2b02      	cmp	r3, #2
 800b706:	d002      	beq.n	800b70e <USBD_SetConfig+0x3e>
 800b708:	2b03      	cmp	r3, #3
 800b70a:	d025      	beq.n	800b758 <USBD_SetConfig+0x88>
 800b70c:	e071      	b.n	800b7f2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b70e:	4b42      	ldr	r3, [pc, #264]	; (800b818 <USBD_SetConfig+0x148>)
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d01c      	beq.n	800b750 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b716:	4b40      	ldr	r3, [pc, #256]	; (800b818 <USBD_SetConfig+0x148>)
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	461a      	mov	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b720:	4b3d      	ldr	r3, [pc, #244]	; (800b818 <USBD_SetConfig+0x148>)
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	4619      	mov	r1, r3
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f7ff f992 	bl	800aa50 <USBD_SetClassConfig>
 800b72c:	4603      	mov	r3, r0
 800b72e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b730:	7bfb      	ldrb	r3, [r7, #15]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d004      	beq.n	800b740 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b736:	6839      	ldr	r1, [r7, #0]
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 f949 	bl	800b9d0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b73e:	e065      	b.n	800b80c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 fa10 	bl	800bb66 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2203      	movs	r2, #3
 800b74a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b74e:	e05d      	b.n	800b80c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 fa08 	bl	800bb66 <USBD_CtlSendStatus>
      break;
 800b756:	e059      	b.n	800b80c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b758:	4b2f      	ldr	r3, [pc, #188]	; (800b818 <USBD_SetConfig+0x148>)
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d112      	bne.n	800b786 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2202      	movs	r2, #2
 800b764:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b768:	4b2b      	ldr	r3, [pc, #172]	; (800b818 <USBD_SetConfig+0x148>)
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	461a      	mov	r2, r3
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b772:	4b29      	ldr	r3, [pc, #164]	; (800b818 <USBD_SetConfig+0x148>)
 800b774:	781b      	ldrb	r3, [r3, #0]
 800b776:	4619      	mov	r1, r3
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f7ff f985 	bl	800aa88 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 f9f1 	bl	800bb66 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b784:	e042      	b.n	800b80c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b786:	4b24      	ldr	r3, [pc, #144]	; (800b818 <USBD_SetConfig+0x148>)
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	461a      	mov	r2, r3
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	429a      	cmp	r2, r3
 800b792:	d02a      	beq.n	800b7ea <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	4619      	mov	r1, r3
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f7ff f973 	bl	800aa88 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b7a2:	4b1d      	ldr	r3, [pc, #116]	; (800b818 <USBD_SetConfig+0x148>)
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b7ac:	4b1a      	ldr	r3, [pc, #104]	; (800b818 <USBD_SetConfig+0x148>)
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f7ff f94c 	bl	800aa50 <USBD_SetClassConfig>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b7bc:	7bfb      	ldrb	r3, [r7, #15]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d00f      	beq.n	800b7e2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b7c2:	6839      	ldr	r1, [r7, #0]
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 f903 	bl	800b9d0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f7ff f958 	bl	800aa88 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2202      	movs	r2, #2
 800b7dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b7e0:	e014      	b.n	800b80c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 f9bf 	bl	800bb66 <USBD_CtlSendStatus>
      break;
 800b7e8:	e010      	b.n	800b80c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 f9bb 	bl	800bb66 <USBD_CtlSendStatus>
      break;
 800b7f0:	e00c      	b.n	800b80c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b7f2:	6839      	ldr	r1, [r7, #0]
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 f8eb 	bl	800b9d0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b7fa:	4b07      	ldr	r3, [pc, #28]	; (800b818 <USBD_SetConfig+0x148>)
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	4619      	mov	r1, r3
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f7ff f941 	bl	800aa88 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b806:	2303      	movs	r3, #3
 800b808:	73fb      	strb	r3, [r7, #15]
      break;
 800b80a:	bf00      	nop
  }

  return ret;
 800b80c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	200044cc 	.word	0x200044cc

0800b81c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	88db      	ldrh	r3, [r3, #6]
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d004      	beq.n	800b838 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b82e:	6839      	ldr	r1, [r7, #0]
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 f8cd 	bl	800b9d0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b836:	e023      	b.n	800b880 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	2b02      	cmp	r3, #2
 800b842:	dc02      	bgt.n	800b84a <USBD_GetConfig+0x2e>
 800b844:	2b00      	cmp	r3, #0
 800b846:	dc03      	bgt.n	800b850 <USBD_GetConfig+0x34>
 800b848:	e015      	b.n	800b876 <USBD_GetConfig+0x5a>
 800b84a:	2b03      	cmp	r3, #3
 800b84c:	d00b      	beq.n	800b866 <USBD_GetConfig+0x4a>
 800b84e:	e012      	b.n	800b876 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	3308      	adds	r3, #8
 800b85a:	2201      	movs	r2, #1
 800b85c:	4619      	mov	r1, r3
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 f927 	bl	800bab2 <USBD_CtlSendData>
        break;
 800b864:	e00c      	b.n	800b880 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	3304      	adds	r3, #4
 800b86a:	2201      	movs	r2, #1
 800b86c:	4619      	mov	r1, r3
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 f91f 	bl	800bab2 <USBD_CtlSendData>
        break;
 800b874:	e004      	b.n	800b880 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b876:	6839      	ldr	r1, [r7, #0]
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 f8a9 	bl	800b9d0 <USBD_CtlError>
        break;
 800b87e:	bf00      	nop
}
 800b880:	bf00      	nop
 800b882:	3708      	adds	r7, #8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	3b01      	subs	r3, #1
 800b89c:	2b02      	cmp	r3, #2
 800b89e:	d81e      	bhi.n	800b8de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	88db      	ldrh	r3, [r3, #6]
 800b8a4:	2b02      	cmp	r3, #2
 800b8a6:	d004      	beq.n	800b8b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 f890 	bl	800b9d0 <USBD_CtlError>
        break;
 800b8b0:	e01a      	b.n	800b8e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d005      	beq.n	800b8ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	f043 0202 	orr.w	r2, r3, #2
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	330c      	adds	r3, #12
 800b8d2:	2202      	movs	r2, #2
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 f8eb 	bl	800bab2 <USBD_CtlSendData>
      break;
 800b8dc:	e004      	b.n	800b8e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b8de:	6839      	ldr	r1, [r7, #0]
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 f875 	bl	800b9d0 <USBD_CtlError>
      break;
 800b8e6:	bf00      	nop
  }
}
 800b8e8:	bf00      	nop
 800b8ea:	3708      	adds	r7, #8
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	885b      	ldrh	r3, [r3, #2]
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d106      	bne.n	800b910 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2201      	movs	r2, #1
 800b906:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 f92b 	bl	800bb66 <USBD_CtlSendStatus>
  }
}
 800b910:	bf00      	nop
 800b912:	3708      	adds	r7, #8
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	3b01      	subs	r3, #1
 800b92c:	2b02      	cmp	r3, #2
 800b92e:	d80b      	bhi.n	800b948 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	885b      	ldrh	r3, [r3, #2]
 800b934:	2b01      	cmp	r3, #1
 800b936:	d10c      	bne.n	800b952 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 f910 	bl	800bb66 <USBD_CtlSendStatus>
      }
      break;
 800b946:	e004      	b.n	800b952 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b948:	6839      	ldr	r1, [r7, #0]
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 f840 	bl	800b9d0 <USBD_CtlError>
      break;
 800b950:	e000      	b.n	800b954 <USBD_ClrFeature+0x3c>
      break;
 800b952:	bf00      	nop
  }
}
 800b954:	bf00      	nop
 800b956:	3708      	adds	r7, #8
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	781a      	ldrb	r2, [r3, #0]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	3301      	adds	r3, #1
 800b976:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	781a      	ldrb	r2, [r3, #0]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	3301      	adds	r3, #1
 800b984:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f7ff fa92 	bl	800aeb0 <SWAPBYTE>
 800b98c:	4603      	mov	r3, r0
 800b98e:	461a      	mov	r2, r3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	3301      	adds	r3, #1
 800b998:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	3301      	adds	r3, #1
 800b99e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f7ff fa85 	bl	800aeb0 <SWAPBYTE>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f7ff fa78 	bl	800aeb0 <SWAPBYTE>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	80da      	strh	r2, [r3, #6]
}
 800b9c8:	bf00      	nop
 800b9ca:	3710      	adds	r7, #16
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9da:	2180      	movs	r1, #128	; 0x80
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 fc91 	bl	800c304 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 fc8d 	bl	800c304 <USBD_LL_StallEP>
}
 800b9ea:	bf00      	nop
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b086      	sub	sp, #24
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	60f8      	str	r0, [r7, #12]
 800b9fa:	60b9      	str	r1, [r7, #8]
 800b9fc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d036      	beq.n	800ba76 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ba0c:	6938      	ldr	r0, [r7, #16]
 800ba0e:	f000 f836 	bl	800ba7e <USBD_GetLen>
 800ba12:	4603      	mov	r3, r0
 800ba14:	3301      	adds	r3, #1
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	005b      	lsls	r3, r3, #1
 800ba1a:	b29a      	uxth	r2, r3
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ba20:	7dfb      	ldrb	r3, [r7, #23]
 800ba22:	68ba      	ldr	r2, [r7, #8]
 800ba24:	4413      	add	r3, r2
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	7812      	ldrb	r2, [r2, #0]
 800ba2a:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba2c:	7dfb      	ldrb	r3, [r7, #23]
 800ba2e:	3301      	adds	r3, #1
 800ba30:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ba32:	7dfb      	ldrb	r3, [r7, #23]
 800ba34:	68ba      	ldr	r2, [r7, #8]
 800ba36:	4413      	add	r3, r2
 800ba38:	2203      	movs	r2, #3
 800ba3a:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba3c:	7dfb      	ldrb	r3, [r7, #23]
 800ba3e:	3301      	adds	r3, #1
 800ba40:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ba42:	e013      	b.n	800ba6c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ba44:	7dfb      	ldrb	r3, [r7, #23]
 800ba46:	68ba      	ldr	r2, [r7, #8]
 800ba48:	4413      	add	r3, r2
 800ba4a:	693a      	ldr	r2, [r7, #16]
 800ba4c:	7812      	ldrb	r2, [r2, #0]
 800ba4e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	3301      	adds	r3, #1
 800ba54:	613b      	str	r3, [r7, #16]
    idx++;
 800ba56:	7dfb      	ldrb	r3, [r7, #23]
 800ba58:	3301      	adds	r3, #1
 800ba5a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ba5c:	7dfb      	ldrb	r3, [r7, #23]
 800ba5e:	68ba      	ldr	r2, [r7, #8]
 800ba60:	4413      	add	r3, r2
 800ba62:	2200      	movs	r2, #0
 800ba64:	701a      	strb	r2, [r3, #0]
    idx++;
 800ba66:	7dfb      	ldrb	r3, [r7, #23]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d1e7      	bne.n	800ba44 <USBD_GetString+0x52>
 800ba74:	e000      	b.n	800ba78 <USBD_GetString+0x86>
    return;
 800ba76:	bf00      	nop
  }
}
 800ba78:	3718      	adds	r7, #24
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ba7e:	b480      	push	{r7}
 800ba80:	b085      	sub	sp, #20
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ba86:	2300      	movs	r3, #0
 800ba88:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ba8e:	e005      	b.n	800ba9c <USBD_GetLen+0x1e>
  {
    len++;
 800ba90:	7bfb      	ldrb	r3, [r7, #15]
 800ba92:	3301      	adds	r3, #1
 800ba94:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	3301      	adds	r3, #1
 800ba9a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d1f5      	bne.n	800ba90 <USBD_GetLen+0x12>
  }

  return len;
 800baa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3714      	adds	r7, #20
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr

0800bab2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b084      	sub	sp, #16
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	60f8      	str	r0, [r7, #12]
 800baba:	60b9      	str	r1, [r7, #8]
 800babc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2202      	movs	r2, #2
 800bac2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	68ba      	ldr	r2, [r7, #8]
 800bad6:	2100      	movs	r1, #0
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	f000 fc9c 	bl	800c416 <USBD_LL_Transmit>

  return USBD_OK;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	68ba      	ldr	r2, [r7, #8]
 800baf8:	2100      	movs	r1, #0
 800bafa:	68f8      	ldr	r0, [r7, #12]
 800bafc:	f000 fc8b 	bl	800c416 <USBD_LL_Transmit>

  return USBD_OK;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b084      	sub	sp, #16
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	60f8      	str	r0, [r7, #12]
 800bb12:	60b9      	str	r1, [r7, #8]
 800bb14:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2203      	movs	r2, #3
 800bb1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	68ba      	ldr	r2, [r7, #8]
 800bb32:	2100      	movs	r1, #0
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	f000 fc8f 	bl	800c458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb3a:	2300      	movs	r3, #0
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3710      	adds	r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	68ba      	ldr	r2, [r7, #8]
 800bb54:	2100      	movs	r1, #0
 800bb56:	68f8      	ldr	r0, [r7, #12]
 800bb58:	f000 fc7e 	bl	800c458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b082      	sub	sp, #8
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2204      	movs	r2, #4
 800bb72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bb76:	2300      	movs	r3, #0
 800bb78:	2200      	movs	r2, #0
 800bb7a:	2100      	movs	r1, #0
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f000 fc4a 	bl	800c416 <USBD_LL_Transmit>

  return USBD_OK;
 800bb82:	2300      	movs	r3, #0
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3708      	adds	r7, #8
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2205      	movs	r2, #5
 800bb98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	2200      	movs	r2, #0
 800bba0:	2100      	movs	r1, #0
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 fc58 	bl	800c458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3708      	adds	r7, #8
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
	...

0800bbb4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800bbb8:	2200      	movs	r2, #0
 800bbba:	4912      	ldr	r1, [pc, #72]	; (800bc04 <MX_USB_Device_Init+0x50>)
 800bbbc:	4812      	ldr	r0, [pc, #72]	; (800bc08 <MX_USB_Device_Init+0x54>)
 800bbbe:	f7fe fed9 	bl	800a974 <USBD_Init>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d001      	beq.n	800bbcc <MX_USB_Device_Init+0x18>
    Error_Handler();
 800bbc8:	f7f5 fa18 	bl	8000ffc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800bbcc:	490f      	ldr	r1, [pc, #60]	; (800bc0c <MX_USB_Device_Init+0x58>)
 800bbce:	480e      	ldr	r0, [pc, #56]	; (800bc08 <MX_USB_Device_Init+0x54>)
 800bbd0:	f7fe ff00 	bl	800a9d4 <USBD_RegisterClass>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d001      	beq.n	800bbde <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800bbda:	f7f5 fa0f 	bl	8000ffc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800bbde:	490c      	ldr	r1, [pc, #48]	; (800bc10 <MX_USB_Device_Init+0x5c>)
 800bbe0:	4809      	ldr	r0, [pc, #36]	; (800bc08 <MX_USB_Device_Init+0x54>)
 800bbe2:	f7fe fe51 	bl	800a888 <USBD_CDC_RegisterInterface>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d001      	beq.n	800bbf0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800bbec:	f7f5 fa06 	bl	8000ffc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800bbf0:	4805      	ldr	r0, [pc, #20]	; (800bc08 <MX_USB_Device_Init+0x54>)
 800bbf2:	f7fe ff16 	bl	800aa22 <USBD_Start>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d001      	beq.n	800bc00 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800bbfc:	f7f5 f9fe 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800bc00:	bf00      	nop
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	20000138 	.word	0x20000138
 800bc08:	200044d0 	.word	0x200044d0
 800bc0c:	20000020 	.word	0x20000020
 800bc10:	20000124 	.word	0x20000124

0800bc14 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bc18:	2200      	movs	r2, #0
 800bc1a:	4905      	ldr	r1, [pc, #20]	; (800bc30 <CDC_Init_FS+0x1c>)
 800bc1c:	4805      	ldr	r0, [pc, #20]	; (800bc34 <CDC_Init_FS+0x20>)
 800bc1e:	f7fe fe48 	bl	800a8b2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bc22:	4905      	ldr	r1, [pc, #20]	; (800bc38 <CDC_Init_FS+0x24>)
 800bc24:	4803      	ldr	r0, [pc, #12]	; (800bc34 <CDC_Init_FS+0x20>)
 800bc26:	f7fe fe62 	bl	800a8ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bc2a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	20004fa0 	.word	0x20004fa0
 800bc34:	200044d0 	.word	0x200044d0
 800bc38:	200047a0 	.word	0x200047a0

0800bc3c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bc40:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr

0800bc4c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b083      	sub	sp, #12
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	4603      	mov	r3, r0
 800bc54:	6039      	str	r1, [r7, #0]
 800bc56:	71fb      	strb	r3, [r7, #7]
 800bc58:	4613      	mov	r3, r2
 800bc5a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bc5c:	79fb      	ldrb	r3, [r7, #7]
 800bc5e:	2b23      	cmp	r3, #35	; 0x23
 800bc60:	d84a      	bhi.n	800bcf8 <CDC_Control_FS+0xac>
 800bc62:	a201      	add	r2, pc, #4	; (adr r2, 800bc68 <CDC_Control_FS+0x1c>)
 800bc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc68:	0800bcf9 	.word	0x0800bcf9
 800bc6c:	0800bcf9 	.word	0x0800bcf9
 800bc70:	0800bcf9 	.word	0x0800bcf9
 800bc74:	0800bcf9 	.word	0x0800bcf9
 800bc78:	0800bcf9 	.word	0x0800bcf9
 800bc7c:	0800bcf9 	.word	0x0800bcf9
 800bc80:	0800bcf9 	.word	0x0800bcf9
 800bc84:	0800bcf9 	.word	0x0800bcf9
 800bc88:	0800bcf9 	.word	0x0800bcf9
 800bc8c:	0800bcf9 	.word	0x0800bcf9
 800bc90:	0800bcf9 	.word	0x0800bcf9
 800bc94:	0800bcf9 	.word	0x0800bcf9
 800bc98:	0800bcf9 	.word	0x0800bcf9
 800bc9c:	0800bcf9 	.word	0x0800bcf9
 800bca0:	0800bcf9 	.word	0x0800bcf9
 800bca4:	0800bcf9 	.word	0x0800bcf9
 800bca8:	0800bcf9 	.word	0x0800bcf9
 800bcac:	0800bcf9 	.word	0x0800bcf9
 800bcb0:	0800bcf9 	.word	0x0800bcf9
 800bcb4:	0800bcf9 	.word	0x0800bcf9
 800bcb8:	0800bcf9 	.word	0x0800bcf9
 800bcbc:	0800bcf9 	.word	0x0800bcf9
 800bcc0:	0800bcf9 	.word	0x0800bcf9
 800bcc4:	0800bcf9 	.word	0x0800bcf9
 800bcc8:	0800bcf9 	.word	0x0800bcf9
 800bccc:	0800bcf9 	.word	0x0800bcf9
 800bcd0:	0800bcf9 	.word	0x0800bcf9
 800bcd4:	0800bcf9 	.word	0x0800bcf9
 800bcd8:	0800bcf9 	.word	0x0800bcf9
 800bcdc:	0800bcf9 	.word	0x0800bcf9
 800bce0:	0800bcf9 	.word	0x0800bcf9
 800bce4:	0800bcf9 	.word	0x0800bcf9
 800bce8:	0800bcf9 	.word	0x0800bcf9
 800bcec:	0800bcf9 	.word	0x0800bcf9
 800bcf0:	0800bcf9 	.word	0x0800bcf9
 800bcf4:	0800bcf9 	.word	0x0800bcf9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bcf8:	bf00      	nop
  }

  return (USBD_OK);
 800bcfa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	370c      	adds	r7, #12
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bd12:	6879      	ldr	r1, [r7, #4]
 800bd14:	4810      	ldr	r0, [pc, #64]	; (800bd58 <CDC_Receive_FS+0x50>)
 800bd16:	f7fe fdea 	bl	800a8ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bd1a:	480f      	ldr	r0, [pc, #60]	; (800bd58 <CDC_Receive_FS+0x50>)
 800bd1c:	f7fe fe00 	bl	800a920 <USBD_CDC_ReceivePacket>

  memset (rx_buffer, '\0', USB_RX_BUFFER_SIZE);  // clear the buffer
 800bd20:	2240      	movs	r2, #64	; 0x40
 800bd22:	2100      	movs	r1, #0
 800bd24:	480d      	ldr	r0, [pc, #52]	; (800bd5c <CDC_Receive_FS+0x54>)
 800bd26:	f000 fdf2 	bl	800c90e <memset>
  uint8_t len = (uint8_t)*Len;
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	73fb      	strb	r3, [r7, #15]
  memcpy(rx_buffer, Buf, len);  // copy the data to the buffer
 800bd30:	7bfb      	ldrb	r3, [r7, #15]
 800bd32:	461a      	mov	r2, r3
 800bd34:	6879      	ldr	r1, [r7, #4]
 800bd36:	4809      	ldr	r0, [pc, #36]	; (800bd5c <CDC_Receive_FS+0x54>)
 800bd38:	f000 fe77 	bl	800ca2a <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800bd3c:	7bfb      	ldrb	r3, [r7, #15]
 800bd3e:	461a      	mov	r2, r3
 800bd40:	2100      	movs	r1, #0
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 fde3 	bl	800c90e <memset>

  conv_state = CFG_RECEIVED;
 800bd48:	4b05      	ldr	r3, [pc, #20]	; (800bd60 <CDC_Receive_FS+0x58>)
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800bd4e:	2300      	movs	r3, #0

  /* USER CODE END 6 */
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3710      	adds	r7, #16
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	200044d0 	.word	0x200044d0
 800bd5c:	20004468 	.word	0x20004468
 800bd60:	200044a8 	.word	0x200044a8

0800bd64 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b087      	sub	sp, #28
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	4613      	mov	r3, r2
 800bd70:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bd72:	2300      	movs	r3, #0
 800bd74:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bd76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	371c      	adds	r7, #28
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr
	...

0800bd88 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b083      	sub	sp, #12
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	4603      	mov	r3, r0
 800bd90:	6039      	str	r1, [r7, #0]
 800bd92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	2212      	movs	r2, #18
 800bd98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800bd9a:	4b03      	ldr	r3, [pc, #12]	; (800bda8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr
 800bda8:	20000158 	.word	0x20000158

0800bdac <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	6039      	str	r1, [r7, #0]
 800bdb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	2204      	movs	r2, #4
 800bdbc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bdbe:	4b03      	ldr	r3, [pc, #12]	; (800bdcc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	370c      	adds	r7, #12
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr
 800bdcc:	2000016c 	.word	0x2000016c

0800bdd0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	6039      	str	r1, [r7, #0]
 800bdda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bddc:	79fb      	ldrb	r3, [r7, #7]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d105      	bne.n	800bdee <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bde2:	683a      	ldr	r2, [r7, #0]
 800bde4:	4907      	ldr	r1, [pc, #28]	; (800be04 <USBD_CDC_ProductStrDescriptor+0x34>)
 800bde6:	4808      	ldr	r0, [pc, #32]	; (800be08 <USBD_CDC_ProductStrDescriptor+0x38>)
 800bde8:	f7ff fe03 	bl	800b9f2 <USBD_GetString>
 800bdec:	e004      	b.n	800bdf8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bdee:	683a      	ldr	r2, [r7, #0]
 800bdf0:	4904      	ldr	r1, [pc, #16]	; (800be04 <USBD_CDC_ProductStrDescriptor+0x34>)
 800bdf2:	4805      	ldr	r0, [pc, #20]	; (800be08 <USBD_CDC_ProductStrDescriptor+0x38>)
 800bdf4:	f7ff fdfd 	bl	800b9f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdf8:	4b02      	ldr	r3, [pc, #8]	; (800be04 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3708      	adds	r7, #8
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	200057a0 	.word	0x200057a0
 800be08:	0800d5e8 	.word	0x0800d5e8

0800be0c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
 800be12:	4603      	mov	r3, r0
 800be14:	6039      	str	r1, [r7, #0]
 800be16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be18:	683a      	ldr	r2, [r7, #0]
 800be1a:	4904      	ldr	r1, [pc, #16]	; (800be2c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800be1c:	4804      	ldr	r0, [pc, #16]	; (800be30 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800be1e:	f7ff fde8 	bl	800b9f2 <USBD_GetString>
  return USBD_StrDesc;
 800be22:	4b02      	ldr	r3, [pc, #8]	; (800be2c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800be24:	4618      	mov	r0, r3
 800be26:	3708      	adds	r7, #8
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	200057a0 	.word	0x200057a0
 800be30:	0800d5f8 	.word	0x0800d5f8

0800be34 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	4603      	mov	r3, r0
 800be3c:	6039      	str	r1, [r7, #0]
 800be3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	221a      	movs	r2, #26
 800be44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800be46:	f000 f843 	bl	800bed0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800be4a:	4b02      	ldr	r3, [pc, #8]	; (800be54 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3708      	adds	r7, #8
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	20000170 	.word	0x20000170

0800be58 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	4603      	mov	r3, r0
 800be60:	6039      	str	r1, [r7, #0]
 800be62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be64:	79fb      	ldrb	r3, [r7, #7]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d105      	bne.n	800be76 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800be6a:	683a      	ldr	r2, [r7, #0]
 800be6c:	4907      	ldr	r1, [pc, #28]	; (800be8c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800be6e:	4808      	ldr	r0, [pc, #32]	; (800be90 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800be70:	f7ff fdbf 	bl	800b9f2 <USBD_GetString>
 800be74:	e004      	b.n	800be80 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800be76:	683a      	ldr	r2, [r7, #0]
 800be78:	4904      	ldr	r1, [pc, #16]	; (800be8c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800be7a:	4805      	ldr	r0, [pc, #20]	; (800be90 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800be7c:	f7ff fdb9 	bl	800b9f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be80:	4b02      	ldr	r3, [pc, #8]	; (800be8c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800be82:	4618      	mov	r0, r3
 800be84:	3708      	adds	r7, #8
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	200057a0 	.word	0x200057a0
 800be90:	0800d5fc 	.word	0x0800d5fc

0800be94 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	4603      	mov	r3, r0
 800be9c:	6039      	str	r1, [r7, #0]
 800be9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bea0:	79fb      	ldrb	r3, [r7, #7]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d105      	bne.n	800beb2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bea6:	683a      	ldr	r2, [r7, #0]
 800bea8:	4907      	ldr	r1, [pc, #28]	; (800bec8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800beaa:	4808      	ldr	r0, [pc, #32]	; (800becc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800beac:	f7ff fda1 	bl	800b9f2 <USBD_GetString>
 800beb0:	e004      	b.n	800bebc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800beb2:	683a      	ldr	r2, [r7, #0]
 800beb4:	4904      	ldr	r1, [pc, #16]	; (800bec8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800beb6:	4805      	ldr	r0, [pc, #20]	; (800becc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800beb8:	f7ff fd9b 	bl	800b9f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bebc:	4b02      	ldr	r3, [pc, #8]	; (800bec8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3708      	adds	r7, #8
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	bf00      	nop
 800bec8:	200057a0 	.word	0x200057a0
 800becc:	0800d608 	.word	0x0800d608

0800bed0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bed6:	4b0f      	ldr	r3, [pc, #60]	; (800bf14 <Get_SerialNum+0x44>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bedc:	4b0e      	ldr	r3, [pc, #56]	; (800bf18 <Get_SerialNum+0x48>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bee2:	4b0e      	ldr	r3, [pc, #56]	; (800bf1c <Get_SerialNum+0x4c>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bee8:	68fa      	ldr	r2, [r7, #12]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	4413      	add	r3, r2
 800beee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d009      	beq.n	800bf0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bef6:	2208      	movs	r2, #8
 800bef8:	4909      	ldr	r1, [pc, #36]	; (800bf20 <Get_SerialNum+0x50>)
 800befa:	68f8      	ldr	r0, [r7, #12]
 800befc:	f000 f814 	bl	800bf28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf00:	2204      	movs	r2, #4
 800bf02:	4908      	ldr	r1, [pc, #32]	; (800bf24 <Get_SerialNum+0x54>)
 800bf04:	68b8      	ldr	r0, [r7, #8]
 800bf06:	f000 f80f 	bl	800bf28 <IntToUnicode>
  }
}
 800bf0a:	bf00      	nop
 800bf0c:	3710      	adds	r7, #16
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	1fff7590 	.word	0x1fff7590
 800bf18:	1fff7594 	.word	0x1fff7594
 800bf1c:	1fff7598 	.word	0x1fff7598
 800bf20:	20000172 	.word	0x20000172
 800bf24:	20000182 	.word	0x20000182

0800bf28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b087      	sub	sp, #28
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	60b9      	str	r1, [r7, #8]
 800bf32:	4613      	mov	r3, r2
 800bf34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bf36:	2300      	movs	r3, #0
 800bf38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	75fb      	strb	r3, [r7, #23]
 800bf3e:	e027      	b.n	800bf90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	0f1b      	lsrs	r3, r3, #28
 800bf44:	2b09      	cmp	r3, #9
 800bf46:	d80b      	bhi.n	800bf60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	0f1b      	lsrs	r3, r3, #28
 800bf4c:	b2da      	uxtb	r2, r3
 800bf4e:	7dfb      	ldrb	r3, [r7, #23]
 800bf50:	005b      	lsls	r3, r3, #1
 800bf52:	4619      	mov	r1, r3
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	440b      	add	r3, r1
 800bf58:	3230      	adds	r2, #48	; 0x30
 800bf5a:	b2d2      	uxtb	r2, r2
 800bf5c:	701a      	strb	r2, [r3, #0]
 800bf5e:	e00a      	b.n	800bf76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	0f1b      	lsrs	r3, r3, #28
 800bf64:	b2da      	uxtb	r2, r3
 800bf66:	7dfb      	ldrb	r3, [r7, #23]
 800bf68:	005b      	lsls	r3, r3, #1
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	440b      	add	r3, r1
 800bf70:	3237      	adds	r2, #55	; 0x37
 800bf72:	b2d2      	uxtb	r2, r2
 800bf74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	011b      	lsls	r3, r3, #4
 800bf7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bf7c:	7dfb      	ldrb	r3, [r7, #23]
 800bf7e:	005b      	lsls	r3, r3, #1
 800bf80:	3301      	adds	r3, #1
 800bf82:	68ba      	ldr	r2, [r7, #8]
 800bf84:	4413      	add	r3, r2
 800bf86:	2200      	movs	r2, #0
 800bf88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf8a:	7dfb      	ldrb	r3, [r7, #23]
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	75fb      	strb	r3, [r7, #23]
 800bf90:	7dfa      	ldrb	r2, [r7, #23]
 800bf92:	79fb      	ldrb	r3, [r7, #7]
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d3d3      	bcc.n	800bf40 <IntToUnicode+0x18>
  }
}
 800bf98:	bf00      	nop
 800bf9a:	bf00      	nop
 800bf9c:	371c      	adds	r7, #28
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr
	...

0800bfa8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b098      	sub	sp, #96	; 0x60
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bfb0:	f107 030c 	add.w	r3, r7, #12
 800bfb4:	2254      	movs	r2, #84	; 0x54
 800bfb6:	2100      	movs	r1, #0
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f000 fca8 	bl	800c90e <memset>
  if(pcdHandle->Instance==USB)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4a19      	ldr	r2, [pc, #100]	; (800c028 <HAL_PCD_MspInit+0x80>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d12a      	bne.n	800c01e <HAL_PCD_MspInit+0x76>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bfc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bfcc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bfd2:	f107 030c 	add.w	r3, r7, #12
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7fa fe4c 	bl	8006c74 <HAL_RCCEx_PeriphCLKConfig>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d001      	beq.n	800bfe6 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800bfe2:	f7f5 f80b 	bl	8000ffc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bfe6:	4b11      	ldr	r3, [pc, #68]	; (800c02c <HAL_PCD_MspInit+0x84>)
 800bfe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfea:	4a10      	ldr	r2, [pc, #64]	; (800c02c <HAL_PCD_MspInit+0x84>)
 800bfec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bff0:	6593      	str	r3, [r2, #88]	; 0x58
 800bff2:	4b0e      	ldr	r3, [pc, #56]	; (800c02c <HAL_PCD_MspInit+0x84>)
 800bff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bff6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bffa:	60bb      	str	r3, [r7, #8]
 800bffc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800bffe:	2200      	movs	r2, #0
 800c000:	2100      	movs	r1, #0
 800c002:	2013      	movs	r0, #19
 800c004:	f7f7 fb8b 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800c008:	2013      	movs	r0, #19
 800c00a:	f7f7 fba2 	bl	8003752 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c00e:	2200      	movs	r2, #0
 800c010:	2100      	movs	r1, #0
 800c012:	2014      	movs	r0, #20
 800c014:	f7f7 fb83 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c018:	2014      	movs	r0, #20
 800c01a:	f7f7 fb9a 	bl	8003752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c01e:	bf00      	nop
 800c020:	3760      	adds	r7, #96	; 0x60
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
 800c026:	bf00      	nop
 800c028:	40005c00 	.word	0x40005c00
 800c02c:	40021000 	.word	0x40021000

0800c030 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800c044:	4619      	mov	r1, r3
 800c046:	4610      	mov	r0, r2
 800c048:	f7fe fd36 	bl	800aab8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800c04c:	bf00      	nop
 800c04e:	3708      	adds	r7, #8
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b082      	sub	sp, #8
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	460b      	mov	r3, r1
 800c05e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800c066:	78fa      	ldrb	r2, [r7, #3]
 800c068:	6879      	ldr	r1, [r7, #4]
 800c06a:	4613      	mov	r3, r2
 800c06c:	009b      	lsls	r3, r3, #2
 800c06e:	4413      	add	r3, r2
 800c070:	00db      	lsls	r3, r3, #3
 800c072:	440b      	add	r3, r1
 800c074:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	78fb      	ldrb	r3, [r7, #3]
 800c07c:	4619      	mov	r1, r3
 800c07e:	f7fe fd70 	bl	800ab62 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800c082:	bf00      	nop
 800c084:	3708      	adds	r7, #8
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c08a:	b580      	push	{r7, lr}
 800c08c:	b082      	sub	sp, #8
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
 800c092:	460b      	mov	r3, r1
 800c094:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800c09c:	78fa      	ldrb	r2, [r7, #3]
 800c09e:	6879      	ldr	r1, [r7, #4]
 800c0a0:	4613      	mov	r3, r2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	4413      	add	r3, r2
 800c0a6:	00db      	lsls	r3, r3, #3
 800c0a8:	440b      	add	r3, r1
 800c0aa:	3324      	adds	r3, #36	; 0x24
 800c0ac:	681a      	ldr	r2, [r3, #0]
 800c0ae:	78fb      	ldrb	r3, [r7, #3]
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	f7fe fdb9 	bl	800ac28 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800c0b6:	bf00      	nop
 800c0b8:	3708      	adds	r7, #8
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b082      	sub	sp, #8
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7fe fecd 	bl	800ae6c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800c0d2:	bf00      	nop
 800c0d4:	3708      	adds	r7, #8
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b084      	sub	sp, #16
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	795b      	ldrb	r3, [r3, #5]
 800c0ea:	2b02      	cmp	r3, #2
 800c0ec:	d001      	beq.n	800c0f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c0ee:	f7f4 ff85 	bl	8000ffc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c0f8:	7bfa      	ldrb	r2, [r7, #15]
 800c0fa:	4611      	mov	r1, r2
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7fe fe77 	bl	800adf0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c108:	4618      	mov	r0, r3
 800c10a:	f7fe fe23 	bl	800ad54 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800c10e:	bf00      	nop
 800c110:	3710      	adds	r7, #16
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
	...

0800c118 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c126:	4618      	mov	r0, r3
 800c128:	f7fe fe72 	bl	800ae10 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	7a5b      	ldrb	r3, [r3, #9]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d005      	beq.n	800c140 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c134:	4b04      	ldr	r3, [pc, #16]	; (800c148 <HAL_PCD_SuspendCallback+0x30>)
 800c136:	691b      	ldr	r3, [r3, #16]
 800c138:	4a03      	ldr	r2, [pc, #12]	; (800c148 <HAL_PCD_SuspendCallback+0x30>)
 800c13a:	f043 0306 	orr.w	r3, r3, #6
 800c13e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800c140:	bf00      	nop
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	e000ed00 	.word	0xe000ed00

0800c14c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	7a5b      	ldrb	r3, [r3, #9]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d007      	beq.n	800c16c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c15c:	4b08      	ldr	r3, [pc, #32]	; (800c180 <HAL_PCD_ResumeCallback+0x34>)
 800c15e:	691b      	ldr	r3, [r3, #16]
 800c160:	4a07      	ldr	r2, [pc, #28]	; (800c180 <HAL_PCD_ResumeCallback+0x34>)
 800c162:	f023 0306 	bic.w	r3, r3, #6
 800c166:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c168:	f000 f9f8 	bl	800c55c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c172:	4618      	mov	r0, r3
 800c174:	f7fe fe62 	bl	800ae3c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800c178:	bf00      	nop
 800c17a:	3708      	adds	r7, #8
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}
 800c180:	e000ed00 	.word	0xe000ed00

0800c184 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800c18c:	4a2b      	ldr	r2, [pc, #172]	; (800c23c <USBD_LL_Init+0xb8>)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	4a29      	ldr	r2, [pc, #164]	; (800c23c <USBD_LL_Init+0xb8>)
 800c198:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800c19c:	4b27      	ldr	r3, [pc, #156]	; (800c23c <USBD_LL_Init+0xb8>)
 800c19e:	4a28      	ldr	r2, [pc, #160]	; (800c240 <USBD_LL_Init+0xbc>)
 800c1a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c1a2:	4b26      	ldr	r3, [pc, #152]	; (800c23c <USBD_LL_Init+0xb8>)
 800c1a4:	2208      	movs	r2, #8
 800c1a6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c1a8:	4b24      	ldr	r3, [pc, #144]	; (800c23c <USBD_LL_Init+0xb8>)
 800c1aa:	2202      	movs	r2, #2
 800c1ac:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c1ae:	4b23      	ldr	r3, [pc, #140]	; (800c23c <USBD_LL_Init+0xb8>)
 800c1b0:	2202      	movs	r2, #2
 800c1b2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c1b4:	4b21      	ldr	r3, [pc, #132]	; (800c23c <USBD_LL_Init+0xb8>)
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c1ba:	4b20      	ldr	r3, [pc, #128]	; (800c23c <USBD_LL_Init+0xb8>)
 800c1bc:	2200      	movs	r2, #0
 800c1be:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c1c0:	4b1e      	ldr	r3, [pc, #120]	; (800c23c <USBD_LL_Init+0xb8>)
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c1c6:	4b1d      	ldr	r3, [pc, #116]	; (800c23c <USBD_LL_Init+0xb8>)
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c1cc:	481b      	ldr	r0, [pc, #108]	; (800c23c <USBD_LL_Init+0xb8>)
 800c1ce:	f7f8 fa67 	bl	80046a0 <HAL_PCD_Init>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d001      	beq.n	800c1dc <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800c1d8:	f7f4 ff10 	bl	8000ffc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c1e2:	2318      	movs	r3, #24
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	2100      	movs	r1, #0
 800c1e8:	f7f9 ff21 	bl	800602e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c1f2:	2358      	movs	r3, #88	; 0x58
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	2180      	movs	r1, #128	; 0x80
 800c1f8:	f7f9 ff19 	bl	800602e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c202:	23c0      	movs	r3, #192	; 0xc0
 800c204:	2200      	movs	r2, #0
 800c206:	2181      	movs	r1, #129	; 0x81
 800c208:	f7f9 ff11 	bl	800602e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c212:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c216:	2200      	movs	r2, #0
 800c218:	2101      	movs	r1, #1
 800c21a:	f7f9 ff08 	bl	800602e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c224:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c228:	2200      	movs	r2, #0
 800c22a:	2182      	movs	r1, #130	; 0x82
 800c22c:	f7f9 feff 	bl	800602e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	200059a0 	.word	0x200059a0
 800c240:	40005c00 	.word	0x40005c00

0800c244 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c24c:	2300      	movs	r3, #0
 800c24e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c250:	2300      	movs	r3, #0
 800c252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7f8 faee 	bl	800483c <HAL_PCD_Start>
 800c260:	4603      	mov	r3, r0
 800c262:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c264:	7bfb      	ldrb	r3, [r7, #15]
 800c266:	4618      	mov	r0, r3
 800c268:	f000 f97e 	bl	800c568 <USBD_Get_USB_Status>
 800c26c:	4603      	mov	r3, r0
 800c26e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c270:	7bbb      	ldrb	r3, [r7, #14]
}
 800c272:	4618      	mov	r0, r3
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b084      	sub	sp, #16
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	4608      	mov	r0, r1
 800c284:	4611      	mov	r1, r2
 800c286:	461a      	mov	r2, r3
 800c288:	4603      	mov	r3, r0
 800c28a:	70fb      	strb	r3, [r7, #3]
 800c28c:	460b      	mov	r3, r1
 800c28e:	70bb      	strb	r3, [r7, #2]
 800c290:	4613      	mov	r3, r2
 800c292:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c294:	2300      	movs	r3, #0
 800c296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c298:	2300      	movs	r3, #0
 800c29a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c2a2:	78bb      	ldrb	r3, [r7, #2]
 800c2a4:	883a      	ldrh	r2, [r7, #0]
 800c2a6:	78f9      	ldrb	r1, [r7, #3]
 800c2a8:	f7f8 fc35 	bl	8004b16 <HAL_PCD_EP_Open>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2b0:	7bfb      	ldrb	r3, [r7, #15]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f000 f958 	bl	800c568 <USBD_Get_USB_Status>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3710      	adds	r7, #16
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}

0800c2c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2c6:	b580      	push	{r7, lr}
 800c2c8:	b084      	sub	sp, #16
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	6078      	str	r0, [r7, #4]
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c2e0:	78fa      	ldrb	r2, [r7, #3]
 800c2e2:	4611      	mov	r1, r2
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7f8 fc73 	bl	8004bd0 <HAL_PCD_EP_Close>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2ee:	7bfb      	ldrb	r3, [r7, #15]
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f000 f939 	bl	800c568 <USBD_Get_USB_Status>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3710      	adds	r7, #16
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}

0800c304 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b084      	sub	sp, #16
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	460b      	mov	r3, r1
 800c30e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c310:	2300      	movs	r3, #0
 800c312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c314:	2300      	movs	r3, #0
 800c316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c31e:	78fa      	ldrb	r2, [r7, #3]
 800c320:	4611      	mov	r1, r2
 800c322:	4618      	mov	r0, r3
 800c324:	f7f8 fd1c 	bl	8004d60 <HAL_PCD_EP_SetStall>
 800c328:	4603      	mov	r3, r0
 800c32a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c32c:	7bfb      	ldrb	r3, [r7, #15]
 800c32e:	4618      	mov	r0, r3
 800c330:	f000 f91a 	bl	800c568 <USBD_Get_USB_Status>
 800c334:	4603      	mov	r3, r0
 800c336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c338:	7bbb      	ldrb	r3, [r7, #14]
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3710      	adds	r7, #16
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}

0800c342 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c342:	b580      	push	{r7, lr}
 800c344:	b084      	sub	sp, #16
 800c346:	af00      	add	r7, sp, #0
 800c348:	6078      	str	r0, [r7, #4]
 800c34a:	460b      	mov	r3, r1
 800c34c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c34e:	2300      	movs	r3, #0
 800c350:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c352:	2300      	movs	r3, #0
 800c354:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c35c:	78fa      	ldrb	r2, [r7, #3]
 800c35e:	4611      	mov	r1, r2
 800c360:	4618      	mov	r0, r3
 800c362:	f7f8 fd4f 	bl	8004e04 <HAL_PCD_EP_ClrStall>
 800c366:	4603      	mov	r3, r0
 800c368:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c36a:	7bfb      	ldrb	r3, [r7, #15]
 800c36c:	4618      	mov	r0, r3
 800c36e:	f000 f8fb 	bl	800c568 <USBD_Get_USB_Status>
 800c372:	4603      	mov	r3, r0
 800c374:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c376:	7bbb      	ldrb	r3, [r7, #14]
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3710      	adds	r7, #16
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c380:	b480      	push	{r7}
 800c382:	b085      	sub	sp, #20
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	460b      	mov	r3, r1
 800c38a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c392:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	da0b      	bge.n	800c3b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c39c:	78fb      	ldrb	r3, [r7, #3]
 800c39e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3a2:	68f9      	ldr	r1, [r7, #12]
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	4413      	add	r3, r2
 800c3aa:	00db      	lsls	r3, r3, #3
 800c3ac:	440b      	add	r3, r1
 800c3ae:	3312      	adds	r3, #18
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	e00b      	b.n	800c3cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c3b4:	78fb      	ldrb	r3, [r7, #3]
 800c3b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3ba:	68f9      	ldr	r1, [r7, #12]
 800c3bc:	4613      	mov	r3, r2
 800c3be:	009b      	lsls	r3, r3, #2
 800c3c0:	4413      	add	r3, r2
 800c3c2:	00db      	lsls	r3, r3, #3
 800c3c4:	440b      	add	r3, r1
 800c3c6:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800c3ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3714      	adds	r7, #20
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr

0800c3d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c3f2:	78fa      	ldrb	r2, [r7, #3]
 800c3f4:	4611      	mov	r1, r2
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7f8 fb69 	bl	8004ace <HAL_PCD_SetAddress>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c400:	7bfb      	ldrb	r3, [r7, #15]
 800c402:	4618      	mov	r0, r3
 800c404:	f000 f8b0 	bl	800c568 <USBD_Get_USB_Status>
 800c408:	4603      	mov	r3, r0
 800c40a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c40c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3710      	adds	r7, #16
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}

0800c416 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c416:	b580      	push	{r7, lr}
 800c418:	b086      	sub	sp, #24
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	60f8      	str	r0, [r7, #12]
 800c41e:	607a      	str	r2, [r7, #4]
 800c420:	603b      	str	r3, [r7, #0]
 800c422:	460b      	mov	r3, r1
 800c424:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c426:	2300      	movs	r3, #0
 800c428:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c42a:	2300      	movs	r3, #0
 800c42c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c434:	7af9      	ldrb	r1, [r7, #11]
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	687a      	ldr	r2, [r7, #4]
 800c43a:	f7f8 fc5a 	bl	8004cf2 <HAL_PCD_EP_Transmit>
 800c43e:	4603      	mov	r3, r0
 800c440:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c442:	7dfb      	ldrb	r3, [r7, #23]
 800c444:	4618      	mov	r0, r3
 800c446:	f000 f88f 	bl	800c568 <USBD_Get_USB_Status>
 800c44a:	4603      	mov	r3, r0
 800c44c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c44e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c450:	4618      	mov	r0, r3
 800c452:	3718      	adds	r7, #24
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b086      	sub	sp, #24
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	607a      	str	r2, [r7, #4]
 800c462:	603b      	str	r3, [r7, #0]
 800c464:	460b      	mov	r3, r1
 800c466:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c468:	2300      	movs	r3, #0
 800c46a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c46c:	2300      	movs	r3, #0
 800c46e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c476:	7af9      	ldrb	r1, [r7, #11]
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	f7f8 fbf0 	bl	8004c60 <HAL_PCD_EP_Receive>
 800c480:	4603      	mov	r3, r0
 800c482:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c484:	7dfb      	ldrb	r3, [r7, #23]
 800c486:	4618      	mov	r0, r3
 800c488:	f000 f86e 	bl	800c568 <USBD_Get_USB_Status>
 800c48c:	4603      	mov	r3, r0
 800c48e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c490:	7dbb      	ldrb	r3, [r7, #22]
}
 800c492:	4618      	mov	r0, r3
 800c494:	3718      	adds	r7, #24
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c49a:	b580      	push	{r7, lr}
 800c49c:	b082      	sub	sp, #8
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c4ac:	78fa      	ldrb	r2, [r7, #3]
 800c4ae:	4611      	mov	r1, r2
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7f8 fc06 	bl	8004cc2 <HAL_PCD_EP_GetRxCount>
 800c4b6:	4603      	mov	r3, r0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c4cc:	78fb      	ldrb	r3, [r7, #3]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d002      	beq.n	800c4d8 <HAL_PCDEx_LPM_Callback+0x18>
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d013      	beq.n	800c4fe <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c4d6:	e023      	b.n	800c520 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	7a5b      	ldrb	r3, [r3, #9]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d007      	beq.n	800c4f0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c4e0:	f000 f83c 	bl	800c55c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c4e4:	4b10      	ldr	r3, [pc, #64]	; (800c528 <HAL_PCDEx_LPM_Callback+0x68>)
 800c4e6:	691b      	ldr	r3, [r3, #16]
 800c4e8:	4a0f      	ldr	r2, [pc, #60]	; (800c528 <HAL_PCDEx_LPM_Callback+0x68>)
 800c4ea:	f023 0306 	bic.w	r3, r3, #6
 800c4ee:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7fe fca0 	bl	800ae3c <USBD_LL_Resume>
    break;
 800c4fc:	e010      	b.n	800c520 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c504:	4618      	mov	r0, r3
 800c506:	f7fe fc83 	bl	800ae10 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	7a5b      	ldrb	r3, [r3, #9]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d005      	beq.n	800c51e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c512:	4b05      	ldr	r3, [pc, #20]	; (800c528 <HAL_PCDEx_LPM_Callback+0x68>)
 800c514:	691b      	ldr	r3, [r3, #16]
 800c516:	4a04      	ldr	r2, [pc, #16]	; (800c528 <HAL_PCDEx_LPM_Callback+0x68>)
 800c518:	f043 0306 	orr.w	r3, r3, #6
 800c51c:	6113      	str	r3, [r2, #16]
    break;
 800c51e:	bf00      	nop
}
 800c520:	bf00      	nop
 800c522:	3708      	adds	r7, #8
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}
 800c528:	e000ed00 	.word	0xe000ed00

0800c52c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b083      	sub	sp, #12
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c534:	4b03      	ldr	r3, [pc, #12]	; (800c544 <USBD_static_malloc+0x18>)
}
 800c536:	4618      	mov	r0, r3
 800c538:	370c      	adds	r7, #12
 800c53a:	46bd      	mov	sp, r7
 800c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c540:	4770      	bx	lr
 800c542:	bf00      	nop
 800c544:	20005c7c 	.word	0x20005c7c

0800c548 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c548:	b480      	push	{r7}
 800c54a:	b083      	sub	sp, #12
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]

}
 800c550:	bf00      	nop
 800c552:	370c      	adds	r7, #12
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr

0800c55c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c560:	f7f3 ff6a 	bl	8000438 <SystemClock_Config>
}
 800c564:	bf00      	nop
 800c566:	bd80      	pop	{r7, pc}

0800c568 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c568:	b480      	push	{r7}
 800c56a:	b085      	sub	sp, #20
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	4603      	mov	r3, r0
 800c570:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c572:	2300      	movs	r3, #0
 800c574:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c576:	79fb      	ldrb	r3, [r7, #7]
 800c578:	2b03      	cmp	r3, #3
 800c57a:	d817      	bhi.n	800c5ac <USBD_Get_USB_Status+0x44>
 800c57c:	a201      	add	r2, pc, #4	; (adr r2, 800c584 <USBD_Get_USB_Status+0x1c>)
 800c57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c582:	bf00      	nop
 800c584:	0800c595 	.word	0x0800c595
 800c588:	0800c59b 	.word	0x0800c59b
 800c58c:	0800c5a1 	.word	0x0800c5a1
 800c590:	0800c5a7 	.word	0x0800c5a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c594:	2300      	movs	r3, #0
 800c596:	73fb      	strb	r3, [r7, #15]
    break;
 800c598:	e00b      	b.n	800c5b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c59a:	2303      	movs	r3, #3
 800c59c:	73fb      	strb	r3, [r7, #15]
    break;
 800c59e:	e008      	b.n	800c5b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	73fb      	strb	r3, [r7, #15]
    break;
 800c5a4:	e005      	b.n	800c5b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5a6:	2303      	movs	r3, #3
 800c5a8:	73fb      	strb	r3, [r7, #15]
    break;
 800c5aa:	e002      	b.n	800c5b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c5ac:	2303      	movs	r3, #3
 800c5ae:	73fb      	strb	r3, [r7, #15]
    break;
 800c5b0:	bf00      	nop
  }
  return usb_status;
 800c5b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3714      	adds	r7, #20
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr

0800c5c0 <atoi>:
 800c5c0:	220a      	movs	r2, #10
 800c5c2:	2100      	movs	r1, #0
 800c5c4:	f000 b882 	b.w	800c6cc <strtol>

0800c5c8 <_strtol_l.constprop.0>:
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5ce:	d001      	beq.n	800c5d4 <_strtol_l.constprop.0+0xc>
 800c5d0:	2b24      	cmp	r3, #36	; 0x24
 800c5d2:	d906      	bls.n	800c5e2 <_strtol_l.constprop.0+0x1a>
 800c5d4:	f000 f9fc 	bl	800c9d0 <__errno>
 800c5d8:	2316      	movs	r3, #22
 800c5da:	6003      	str	r3, [r0, #0]
 800c5dc:	2000      	movs	r0, #0
 800c5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c6c8 <_strtol_l.constprop.0+0x100>
 800c5e6:	460d      	mov	r5, r1
 800c5e8:	462e      	mov	r6, r5
 800c5ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c5ee:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c5f2:	f017 0708 	ands.w	r7, r7, #8
 800c5f6:	d1f7      	bne.n	800c5e8 <_strtol_l.constprop.0+0x20>
 800c5f8:	2c2d      	cmp	r4, #45	; 0x2d
 800c5fa:	d132      	bne.n	800c662 <_strtol_l.constprop.0+0x9a>
 800c5fc:	782c      	ldrb	r4, [r5, #0]
 800c5fe:	2701      	movs	r7, #1
 800c600:	1cb5      	adds	r5, r6, #2
 800c602:	2b00      	cmp	r3, #0
 800c604:	d05b      	beq.n	800c6be <_strtol_l.constprop.0+0xf6>
 800c606:	2b10      	cmp	r3, #16
 800c608:	d109      	bne.n	800c61e <_strtol_l.constprop.0+0x56>
 800c60a:	2c30      	cmp	r4, #48	; 0x30
 800c60c:	d107      	bne.n	800c61e <_strtol_l.constprop.0+0x56>
 800c60e:	782c      	ldrb	r4, [r5, #0]
 800c610:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c614:	2c58      	cmp	r4, #88	; 0x58
 800c616:	d14d      	bne.n	800c6b4 <_strtol_l.constprop.0+0xec>
 800c618:	786c      	ldrb	r4, [r5, #1]
 800c61a:	2310      	movs	r3, #16
 800c61c:	3502      	adds	r5, #2
 800c61e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c622:	f108 38ff 	add.w	r8, r8, #4294967295
 800c626:	f04f 0e00 	mov.w	lr, #0
 800c62a:	fbb8 f9f3 	udiv	r9, r8, r3
 800c62e:	4676      	mov	r6, lr
 800c630:	fb03 8a19 	mls	sl, r3, r9, r8
 800c634:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c638:	f1bc 0f09 	cmp.w	ip, #9
 800c63c:	d816      	bhi.n	800c66c <_strtol_l.constprop.0+0xa4>
 800c63e:	4664      	mov	r4, ip
 800c640:	42a3      	cmp	r3, r4
 800c642:	dd24      	ble.n	800c68e <_strtol_l.constprop.0+0xc6>
 800c644:	f1be 3fff 	cmp.w	lr, #4294967295
 800c648:	d008      	beq.n	800c65c <_strtol_l.constprop.0+0x94>
 800c64a:	45b1      	cmp	r9, r6
 800c64c:	d31c      	bcc.n	800c688 <_strtol_l.constprop.0+0xc0>
 800c64e:	d101      	bne.n	800c654 <_strtol_l.constprop.0+0x8c>
 800c650:	45a2      	cmp	sl, r4
 800c652:	db19      	blt.n	800c688 <_strtol_l.constprop.0+0xc0>
 800c654:	fb06 4603 	mla	r6, r6, r3, r4
 800c658:	f04f 0e01 	mov.w	lr, #1
 800c65c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c660:	e7e8      	b.n	800c634 <_strtol_l.constprop.0+0x6c>
 800c662:	2c2b      	cmp	r4, #43	; 0x2b
 800c664:	bf04      	itt	eq
 800c666:	782c      	ldrbeq	r4, [r5, #0]
 800c668:	1cb5      	addeq	r5, r6, #2
 800c66a:	e7ca      	b.n	800c602 <_strtol_l.constprop.0+0x3a>
 800c66c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c670:	f1bc 0f19 	cmp.w	ip, #25
 800c674:	d801      	bhi.n	800c67a <_strtol_l.constprop.0+0xb2>
 800c676:	3c37      	subs	r4, #55	; 0x37
 800c678:	e7e2      	b.n	800c640 <_strtol_l.constprop.0+0x78>
 800c67a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c67e:	f1bc 0f19 	cmp.w	ip, #25
 800c682:	d804      	bhi.n	800c68e <_strtol_l.constprop.0+0xc6>
 800c684:	3c57      	subs	r4, #87	; 0x57
 800c686:	e7db      	b.n	800c640 <_strtol_l.constprop.0+0x78>
 800c688:	f04f 3eff 	mov.w	lr, #4294967295
 800c68c:	e7e6      	b.n	800c65c <_strtol_l.constprop.0+0x94>
 800c68e:	f1be 3fff 	cmp.w	lr, #4294967295
 800c692:	d105      	bne.n	800c6a0 <_strtol_l.constprop.0+0xd8>
 800c694:	2322      	movs	r3, #34	; 0x22
 800c696:	6003      	str	r3, [r0, #0]
 800c698:	4646      	mov	r6, r8
 800c69a:	b942      	cbnz	r2, 800c6ae <_strtol_l.constprop.0+0xe6>
 800c69c:	4630      	mov	r0, r6
 800c69e:	e79e      	b.n	800c5de <_strtol_l.constprop.0+0x16>
 800c6a0:	b107      	cbz	r7, 800c6a4 <_strtol_l.constprop.0+0xdc>
 800c6a2:	4276      	negs	r6, r6
 800c6a4:	2a00      	cmp	r2, #0
 800c6a6:	d0f9      	beq.n	800c69c <_strtol_l.constprop.0+0xd4>
 800c6a8:	f1be 0f00 	cmp.w	lr, #0
 800c6ac:	d000      	beq.n	800c6b0 <_strtol_l.constprop.0+0xe8>
 800c6ae:	1e69      	subs	r1, r5, #1
 800c6b0:	6011      	str	r1, [r2, #0]
 800c6b2:	e7f3      	b.n	800c69c <_strtol_l.constprop.0+0xd4>
 800c6b4:	2430      	movs	r4, #48	; 0x30
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d1b1      	bne.n	800c61e <_strtol_l.constprop.0+0x56>
 800c6ba:	2308      	movs	r3, #8
 800c6bc:	e7af      	b.n	800c61e <_strtol_l.constprop.0+0x56>
 800c6be:	2c30      	cmp	r4, #48	; 0x30
 800c6c0:	d0a5      	beq.n	800c60e <_strtol_l.constprop.0+0x46>
 800c6c2:	230a      	movs	r3, #10
 800c6c4:	e7ab      	b.n	800c61e <_strtol_l.constprop.0+0x56>
 800c6c6:	bf00      	nop
 800c6c8:	0800d629 	.word	0x0800d629

0800c6cc <strtol>:
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	460a      	mov	r2, r1
 800c6d0:	4601      	mov	r1, r0
 800c6d2:	4802      	ldr	r0, [pc, #8]	; (800c6dc <strtol+0x10>)
 800c6d4:	6800      	ldr	r0, [r0, #0]
 800c6d6:	f7ff bf77 	b.w	800c5c8 <_strtol_l.constprop.0>
 800c6da:	bf00      	nop
 800c6dc:	200001e4 	.word	0x200001e4

0800c6e0 <std>:
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	b510      	push	{r4, lr}
 800c6e4:	4604      	mov	r4, r0
 800c6e6:	e9c0 3300 	strd	r3, r3, [r0]
 800c6ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c6ee:	6083      	str	r3, [r0, #8]
 800c6f0:	8181      	strh	r1, [r0, #12]
 800c6f2:	6643      	str	r3, [r0, #100]	; 0x64
 800c6f4:	81c2      	strh	r2, [r0, #14]
 800c6f6:	6183      	str	r3, [r0, #24]
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	2208      	movs	r2, #8
 800c6fc:	305c      	adds	r0, #92	; 0x5c
 800c6fe:	f000 f906 	bl	800c90e <memset>
 800c702:	4b0d      	ldr	r3, [pc, #52]	; (800c738 <std+0x58>)
 800c704:	6263      	str	r3, [r4, #36]	; 0x24
 800c706:	4b0d      	ldr	r3, [pc, #52]	; (800c73c <std+0x5c>)
 800c708:	62a3      	str	r3, [r4, #40]	; 0x28
 800c70a:	4b0d      	ldr	r3, [pc, #52]	; (800c740 <std+0x60>)
 800c70c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c70e:	4b0d      	ldr	r3, [pc, #52]	; (800c744 <std+0x64>)
 800c710:	6323      	str	r3, [r4, #48]	; 0x30
 800c712:	4b0d      	ldr	r3, [pc, #52]	; (800c748 <std+0x68>)
 800c714:	6224      	str	r4, [r4, #32]
 800c716:	429c      	cmp	r4, r3
 800c718:	d006      	beq.n	800c728 <std+0x48>
 800c71a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c71e:	4294      	cmp	r4, r2
 800c720:	d002      	beq.n	800c728 <std+0x48>
 800c722:	33d0      	adds	r3, #208	; 0xd0
 800c724:	429c      	cmp	r4, r3
 800c726:	d105      	bne.n	800c734 <std+0x54>
 800c728:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c730:	f000 b978 	b.w	800ca24 <__retarget_lock_init_recursive>
 800c734:	bd10      	pop	{r4, pc}
 800c736:	bf00      	nop
 800c738:	0800c889 	.word	0x0800c889
 800c73c:	0800c8ab 	.word	0x0800c8ab
 800c740:	0800c8e3 	.word	0x0800c8e3
 800c744:	0800c907 	.word	0x0800c907
 800c748:	20005e9c 	.word	0x20005e9c

0800c74c <stdio_exit_handler>:
 800c74c:	4a02      	ldr	r2, [pc, #8]	; (800c758 <stdio_exit_handler+0xc>)
 800c74e:	4903      	ldr	r1, [pc, #12]	; (800c75c <stdio_exit_handler+0x10>)
 800c750:	4803      	ldr	r0, [pc, #12]	; (800c760 <stdio_exit_handler+0x14>)
 800c752:	f000 b869 	b.w	800c828 <_fwalk_sglue>
 800c756:	bf00      	nop
 800c758:	2000018c 	.word	0x2000018c
 800c75c:	0800d2ed 	.word	0x0800d2ed
 800c760:	20000198 	.word	0x20000198

0800c764 <cleanup_stdio>:
 800c764:	6841      	ldr	r1, [r0, #4]
 800c766:	4b0c      	ldr	r3, [pc, #48]	; (800c798 <cleanup_stdio+0x34>)
 800c768:	4299      	cmp	r1, r3
 800c76a:	b510      	push	{r4, lr}
 800c76c:	4604      	mov	r4, r0
 800c76e:	d001      	beq.n	800c774 <cleanup_stdio+0x10>
 800c770:	f000 fdbc 	bl	800d2ec <_fflush_r>
 800c774:	68a1      	ldr	r1, [r4, #8]
 800c776:	4b09      	ldr	r3, [pc, #36]	; (800c79c <cleanup_stdio+0x38>)
 800c778:	4299      	cmp	r1, r3
 800c77a:	d002      	beq.n	800c782 <cleanup_stdio+0x1e>
 800c77c:	4620      	mov	r0, r4
 800c77e:	f000 fdb5 	bl	800d2ec <_fflush_r>
 800c782:	68e1      	ldr	r1, [r4, #12]
 800c784:	4b06      	ldr	r3, [pc, #24]	; (800c7a0 <cleanup_stdio+0x3c>)
 800c786:	4299      	cmp	r1, r3
 800c788:	d004      	beq.n	800c794 <cleanup_stdio+0x30>
 800c78a:	4620      	mov	r0, r4
 800c78c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c790:	f000 bdac 	b.w	800d2ec <_fflush_r>
 800c794:	bd10      	pop	{r4, pc}
 800c796:	bf00      	nop
 800c798:	20005e9c 	.word	0x20005e9c
 800c79c:	20005f04 	.word	0x20005f04
 800c7a0:	20005f6c 	.word	0x20005f6c

0800c7a4 <global_stdio_init.part.0>:
 800c7a4:	b510      	push	{r4, lr}
 800c7a6:	4b0b      	ldr	r3, [pc, #44]	; (800c7d4 <global_stdio_init.part.0+0x30>)
 800c7a8:	4c0b      	ldr	r4, [pc, #44]	; (800c7d8 <global_stdio_init.part.0+0x34>)
 800c7aa:	4a0c      	ldr	r2, [pc, #48]	; (800c7dc <global_stdio_init.part.0+0x38>)
 800c7ac:	601a      	str	r2, [r3, #0]
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	2104      	movs	r1, #4
 800c7b4:	f7ff ff94 	bl	800c6e0 <std>
 800c7b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c7bc:	2201      	movs	r2, #1
 800c7be:	2109      	movs	r1, #9
 800c7c0:	f7ff ff8e 	bl	800c6e0 <std>
 800c7c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c7c8:	2202      	movs	r2, #2
 800c7ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7ce:	2112      	movs	r1, #18
 800c7d0:	f7ff bf86 	b.w	800c6e0 <std>
 800c7d4:	20005fd4 	.word	0x20005fd4
 800c7d8:	20005e9c 	.word	0x20005e9c
 800c7dc:	0800c74d 	.word	0x0800c74d

0800c7e0 <__sfp_lock_acquire>:
 800c7e0:	4801      	ldr	r0, [pc, #4]	; (800c7e8 <__sfp_lock_acquire+0x8>)
 800c7e2:	f000 b920 	b.w	800ca26 <__retarget_lock_acquire_recursive>
 800c7e6:	bf00      	nop
 800c7e8:	20005fdd 	.word	0x20005fdd

0800c7ec <__sfp_lock_release>:
 800c7ec:	4801      	ldr	r0, [pc, #4]	; (800c7f4 <__sfp_lock_release+0x8>)
 800c7ee:	f000 b91b 	b.w	800ca28 <__retarget_lock_release_recursive>
 800c7f2:	bf00      	nop
 800c7f4:	20005fdd 	.word	0x20005fdd

0800c7f8 <__sinit>:
 800c7f8:	b510      	push	{r4, lr}
 800c7fa:	4604      	mov	r4, r0
 800c7fc:	f7ff fff0 	bl	800c7e0 <__sfp_lock_acquire>
 800c800:	6a23      	ldr	r3, [r4, #32]
 800c802:	b11b      	cbz	r3, 800c80c <__sinit+0x14>
 800c804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c808:	f7ff bff0 	b.w	800c7ec <__sfp_lock_release>
 800c80c:	4b04      	ldr	r3, [pc, #16]	; (800c820 <__sinit+0x28>)
 800c80e:	6223      	str	r3, [r4, #32]
 800c810:	4b04      	ldr	r3, [pc, #16]	; (800c824 <__sinit+0x2c>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d1f5      	bne.n	800c804 <__sinit+0xc>
 800c818:	f7ff ffc4 	bl	800c7a4 <global_stdio_init.part.0>
 800c81c:	e7f2      	b.n	800c804 <__sinit+0xc>
 800c81e:	bf00      	nop
 800c820:	0800c765 	.word	0x0800c765
 800c824:	20005fd4 	.word	0x20005fd4

0800c828 <_fwalk_sglue>:
 800c828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c82c:	4607      	mov	r7, r0
 800c82e:	4688      	mov	r8, r1
 800c830:	4614      	mov	r4, r2
 800c832:	2600      	movs	r6, #0
 800c834:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c838:	f1b9 0901 	subs.w	r9, r9, #1
 800c83c:	d505      	bpl.n	800c84a <_fwalk_sglue+0x22>
 800c83e:	6824      	ldr	r4, [r4, #0]
 800c840:	2c00      	cmp	r4, #0
 800c842:	d1f7      	bne.n	800c834 <_fwalk_sglue+0xc>
 800c844:	4630      	mov	r0, r6
 800c846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c84a:	89ab      	ldrh	r3, [r5, #12]
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d907      	bls.n	800c860 <_fwalk_sglue+0x38>
 800c850:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c854:	3301      	adds	r3, #1
 800c856:	d003      	beq.n	800c860 <_fwalk_sglue+0x38>
 800c858:	4629      	mov	r1, r5
 800c85a:	4638      	mov	r0, r7
 800c85c:	47c0      	blx	r8
 800c85e:	4306      	orrs	r6, r0
 800c860:	3568      	adds	r5, #104	; 0x68
 800c862:	e7e9      	b.n	800c838 <_fwalk_sglue+0x10>

0800c864 <iprintf>:
 800c864:	b40f      	push	{r0, r1, r2, r3}
 800c866:	b507      	push	{r0, r1, r2, lr}
 800c868:	4906      	ldr	r1, [pc, #24]	; (800c884 <iprintf+0x20>)
 800c86a:	ab04      	add	r3, sp, #16
 800c86c:	6808      	ldr	r0, [r1, #0]
 800c86e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c872:	6881      	ldr	r1, [r0, #8]
 800c874:	9301      	str	r3, [sp, #4]
 800c876:	f000 fa09 	bl	800cc8c <_vfiprintf_r>
 800c87a:	b003      	add	sp, #12
 800c87c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c880:	b004      	add	sp, #16
 800c882:	4770      	bx	lr
 800c884:	200001e4 	.word	0x200001e4

0800c888 <__sread>:
 800c888:	b510      	push	{r4, lr}
 800c88a:	460c      	mov	r4, r1
 800c88c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c890:	f000 f87a 	bl	800c988 <_read_r>
 800c894:	2800      	cmp	r0, #0
 800c896:	bfab      	itete	ge
 800c898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c89a:	89a3      	ldrhlt	r3, [r4, #12]
 800c89c:	181b      	addge	r3, r3, r0
 800c89e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c8a2:	bfac      	ite	ge
 800c8a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c8a6:	81a3      	strhlt	r3, [r4, #12]
 800c8a8:	bd10      	pop	{r4, pc}

0800c8aa <__swrite>:
 800c8aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ae:	461f      	mov	r7, r3
 800c8b0:	898b      	ldrh	r3, [r1, #12]
 800c8b2:	05db      	lsls	r3, r3, #23
 800c8b4:	4605      	mov	r5, r0
 800c8b6:	460c      	mov	r4, r1
 800c8b8:	4616      	mov	r6, r2
 800c8ba:	d505      	bpl.n	800c8c8 <__swrite+0x1e>
 800c8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8c0:	2302      	movs	r3, #2
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f000 f84e 	bl	800c964 <_lseek_r>
 800c8c8:	89a3      	ldrh	r3, [r4, #12]
 800c8ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c8d2:	81a3      	strh	r3, [r4, #12]
 800c8d4:	4632      	mov	r2, r6
 800c8d6:	463b      	mov	r3, r7
 800c8d8:	4628      	mov	r0, r5
 800c8da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8de:	f000 b865 	b.w	800c9ac <_write_r>

0800c8e2 <__sseek>:
 800c8e2:	b510      	push	{r4, lr}
 800c8e4:	460c      	mov	r4, r1
 800c8e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8ea:	f000 f83b 	bl	800c964 <_lseek_r>
 800c8ee:	1c43      	adds	r3, r0, #1
 800c8f0:	89a3      	ldrh	r3, [r4, #12]
 800c8f2:	bf15      	itete	ne
 800c8f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c8f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c8fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c8fe:	81a3      	strheq	r3, [r4, #12]
 800c900:	bf18      	it	ne
 800c902:	81a3      	strhne	r3, [r4, #12]
 800c904:	bd10      	pop	{r4, pc}

0800c906 <__sclose>:
 800c906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c90a:	f000 b81b 	b.w	800c944 <_close_r>

0800c90e <memset>:
 800c90e:	4402      	add	r2, r0
 800c910:	4603      	mov	r3, r0
 800c912:	4293      	cmp	r3, r2
 800c914:	d100      	bne.n	800c918 <memset+0xa>
 800c916:	4770      	bx	lr
 800c918:	f803 1b01 	strb.w	r1, [r3], #1
 800c91c:	e7f9      	b.n	800c912 <memset+0x4>

0800c91e <strncpy>:
 800c91e:	b510      	push	{r4, lr}
 800c920:	3901      	subs	r1, #1
 800c922:	4603      	mov	r3, r0
 800c924:	b132      	cbz	r2, 800c934 <strncpy+0x16>
 800c926:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c92a:	f803 4b01 	strb.w	r4, [r3], #1
 800c92e:	3a01      	subs	r2, #1
 800c930:	2c00      	cmp	r4, #0
 800c932:	d1f7      	bne.n	800c924 <strncpy+0x6>
 800c934:	441a      	add	r2, r3
 800c936:	2100      	movs	r1, #0
 800c938:	4293      	cmp	r3, r2
 800c93a:	d100      	bne.n	800c93e <strncpy+0x20>
 800c93c:	bd10      	pop	{r4, pc}
 800c93e:	f803 1b01 	strb.w	r1, [r3], #1
 800c942:	e7f9      	b.n	800c938 <strncpy+0x1a>

0800c944 <_close_r>:
 800c944:	b538      	push	{r3, r4, r5, lr}
 800c946:	4d06      	ldr	r5, [pc, #24]	; (800c960 <_close_r+0x1c>)
 800c948:	2300      	movs	r3, #0
 800c94a:	4604      	mov	r4, r0
 800c94c:	4608      	mov	r0, r1
 800c94e:	602b      	str	r3, [r5, #0]
 800c950:	f7f4 fefd 	bl	800174e <_close>
 800c954:	1c43      	adds	r3, r0, #1
 800c956:	d102      	bne.n	800c95e <_close_r+0x1a>
 800c958:	682b      	ldr	r3, [r5, #0]
 800c95a:	b103      	cbz	r3, 800c95e <_close_r+0x1a>
 800c95c:	6023      	str	r3, [r4, #0]
 800c95e:	bd38      	pop	{r3, r4, r5, pc}
 800c960:	20005fd8 	.word	0x20005fd8

0800c964 <_lseek_r>:
 800c964:	b538      	push	{r3, r4, r5, lr}
 800c966:	4d07      	ldr	r5, [pc, #28]	; (800c984 <_lseek_r+0x20>)
 800c968:	4604      	mov	r4, r0
 800c96a:	4608      	mov	r0, r1
 800c96c:	4611      	mov	r1, r2
 800c96e:	2200      	movs	r2, #0
 800c970:	602a      	str	r2, [r5, #0]
 800c972:	461a      	mov	r2, r3
 800c974:	f7f4 ff12 	bl	800179c <_lseek>
 800c978:	1c43      	adds	r3, r0, #1
 800c97a:	d102      	bne.n	800c982 <_lseek_r+0x1e>
 800c97c:	682b      	ldr	r3, [r5, #0]
 800c97e:	b103      	cbz	r3, 800c982 <_lseek_r+0x1e>
 800c980:	6023      	str	r3, [r4, #0]
 800c982:	bd38      	pop	{r3, r4, r5, pc}
 800c984:	20005fd8 	.word	0x20005fd8

0800c988 <_read_r>:
 800c988:	b538      	push	{r3, r4, r5, lr}
 800c98a:	4d07      	ldr	r5, [pc, #28]	; (800c9a8 <_read_r+0x20>)
 800c98c:	4604      	mov	r4, r0
 800c98e:	4608      	mov	r0, r1
 800c990:	4611      	mov	r1, r2
 800c992:	2200      	movs	r2, #0
 800c994:	602a      	str	r2, [r5, #0]
 800c996:	461a      	mov	r2, r3
 800c998:	f7f4 fea0 	bl	80016dc <_read>
 800c99c:	1c43      	adds	r3, r0, #1
 800c99e:	d102      	bne.n	800c9a6 <_read_r+0x1e>
 800c9a0:	682b      	ldr	r3, [r5, #0]
 800c9a2:	b103      	cbz	r3, 800c9a6 <_read_r+0x1e>
 800c9a4:	6023      	str	r3, [r4, #0]
 800c9a6:	bd38      	pop	{r3, r4, r5, pc}
 800c9a8:	20005fd8 	.word	0x20005fd8

0800c9ac <_write_r>:
 800c9ac:	b538      	push	{r3, r4, r5, lr}
 800c9ae:	4d07      	ldr	r5, [pc, #28]	; (800c9cc <_write_r+0x20>)
 800c9b0:	4604      	mov	r4, r0
 800c9b2:	4608      	mov	r0, r1
 800c9b4:	4611      	mov	r1, r2
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	602a      	str	r2, [r5, #0]
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	f7f4 feab 	bl	8001716 <_write>
 800c9c0:	1c43      	adds	r3, r0, #1
 800c9c2:	d102      	bne.n	800c9ca <_write_r+0x1e>
 800c9c4:	682b      	ldr	r3, [r5, #0]
 800c9c6:	b103      	cbz	r3, 800c9ca <_write_r+0x1e>
 800c9c8:	6023      	str	r3, [r4, #0]
 800c9ca:	bd38      	pop	{r3, r4, r5, pc}
 800c9cc:	20005fd8 	.word	0x20005fd8

0800c9d0 <__errno>:
 800c9d0:	4b01      	ldr	r3, [pc, #4]	; (800c9d8 <__errno+0x8>)
 800c9d2:	6818      	ldr	r0, [r3, #0]
 800c9d4:	4770      	bx	lr
 800c9d6:	bf00      	nop
 800c9d8:	200001e4 	.word	0x200001e4

0800c9dc <__libc_init_array>:
 800c9dc:	b570      	push	{r4, r5, r6, lr}
 800c9de:	4d0d      	ldr	r5, [pc, #52]	; (800ca14 <__libc_init_array+0x38>)
 800c9e0:	4c0d      	ldr	r4, [pc, #52]	; (800ca18 <__libc_init_array+0x3c>)
 800c9e2:	1b64      	subs	r4, r4, r5
 800c9e4:	10a4      	asrs	r4, r4, #2
 800c9e6:	2600      	movs	r6, #0
 800c9e8:	42a6      	cmp	r6, r4
 800c9ea:	d109      	bne.n	800ca00 <__libc_init_array+0x24>
 800c9ec:	4d0b      	ldr	r5, [pc, #44]	; (800ca1c <__libc_init_array+0x40>)
 800c9ee:	4c0c      	ldr	r4, [pc, #48]	; (800ca20 <__libc_init_array+0x44>)
 800c9f0:	f000 fdce 	bl	800d590 <_init>
 800c9f4:	1b64      	subs	r4, r4, r5
 800c9f6:	10a4      	asrs	r4, r4, #2
 800c9f8:	2600      	movs	r6, #0
 800c9fa:	42a6      	cmp	r6, r4
 800c9fc:	d105      	bne.n	800ca0a <__libc_init_array+0x2e>
 800c9fe:	bd70      	pop	{r4, r5, r6, pc}
 800ca00:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca04:	4798      	blx	r3
 800ca06:	3601      	adds	r6, #1
 800ca08:	e7ee      	b.n	800c9e8 <__libc_init_array+0xc>
 800ca0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca0e:	4798      	blx	r3
 800ca10:	3601      	adds	r6, #1
 800ca12:	e7f2      	b.n	800c9fa <__libc_init_array+0x1e>
 800ca14:	0800d75c 	.word	0x0800d75c
 800ca18:	0800d75c 	.word	0x0800d75c
 800ca1c:	0800d75c 	.word	0x0800d75c
 800ca20:	0800d760 	.word	0x0800d760

0800ca24 <__retarget_lock_init_recursive>:
 800ca24:	4770      	bx	lr

0800ca26 <__retarget_lock_acquire_recursive>:
 800ca26:	4770      	bx	lr

0800ca28 <__retarget_lock_release_recursive>:
 800ca28:	4770      	bx	lr

0800ca2a <memcpy>:
 800ca2a:	440a      	add	r2, r1
 800ca2c:	4291      	cmp	r1, r2
 800ca2e:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca32:	d100      	bne.n	800ca36 <memcpy+0xc>
 800ca34:	4770      	bx	lr
 800ca36:	b510      	push	{r4, lr}
 800ca38:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca40:	4291      	cmp	r1, r2
 800ca42:	d1f9      	bne.n	800ca38 <memcpy+0xe>
 800ca44:	bd10      	pop	{r4, pc}
	...

0800ca48 <_free_r>:
 800ca48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca4a:	2900      	cmp	r1, #0
 800ca4c:	d044      	beq.n	800cad8 <_free_r+0x90>
 800ca4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca52:	9001      	str	r0, [sp, #4]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	f1a1 0404 	sub.w	r4, r1, #4
 800ca5a:	bfb8      	it	lt
 800ca5c:	18e4      	addlt	r4, r4, r3
 800ca5e:	f000 f8df 	bl	800cc20 <__malloc_lock>
 800ca62:	4a1e      	ldr	r2, [pc, #120]	; (800cadc <_free_r+0x94>)
 800ca64:	9801      	ldr	r0, [sp, #4]
 800ca66:	6813      	ldr	r3, [r2, #0]
 800ca68:	b933      	cbnz	r3, 800ca78 <_free_r+0x30>
 800ca6a:	6063      	str	r3, [r4, #4]
 800ca6c:	6014      	str	r4, [r2, #0]
 800ca6e:	b003      	add	sp, #12
 800ca70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca74:	f000 b8da 	b.w	800cc2c <__malloc_unlock>
 800ca78:	42a3      	cmp	r3, r4
 800ca7a:	d908      	bls.n	800ca8e <_free_r+0x46>
 800ca7c:	6825      	ldr	r5, [r4, #0]
 800ca7e:	1961      	adds	r1, r4, r5
 800ca80:	428b      	cmp	r3, r1
 800ca82:	bf01      	itttt	eq
 800ca84:	6819      	ldreq	r1, [r3, #0]
 800ca86:	685b      	ldreq	r3, [r3, #4]
 800ca88:	1949      	addeq	r1, r1, r5
 800ca8a:	6021      	streq	r1, [r4, #0]
 800ca8c:	e7ed      	b.n	800ca6a <_free_r+0x22>
 800ca8e:	461a      	mov	r2, r3
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	b10b      	cbz	r3, 800ca98 <_free_r+0x50>
 800ca94:	42a3      	cmp	r3, r4
 800ca96:	d9fa      	bls.n	800ca8e <_free_r+0x46>
 800ca98:	6811      	ldr	r1, [r2, #0]
 800ca9a:	1855      	adds	r5, r2, r1
 800ca9c:	42a5      	cmp	r5, r4
 800ca9e:	d10b      	bne.n	800cab8 <_free_r+0x70>
 800caa0:	6824      	ldr	r4, [r4, #0]
 800caa2:	4421      	add	r1, r4
 800caa4:	1854      	adds	r4, r2, r1
 800caa6:	42a3      	cmp	r3, r4
 800caa8:	6011      	str	r1, [r2, #0]
 800caaa:	d1e0      	bne.n	800ca6e <_free_r+0x26>
 800caac:	681c      	ldr	r4, [r3, #0]
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	6053      	str	r3, [r2, #4]
 800cab2:	440c      	add	r4, r1
 800cab4:	6014      	str	r4, [r2, #0]
 800cab6:	e7da      	b.n	800ca6e <_free_r+0x26>
 800cab8:	d902      	bls.n	800cac0 <_free_r+0x78>
 800caba:	230c      	movs	r3, #12
 800cabc:	6003      	str	r3, [r0, #0]
 800cabe:	e7d6      	b.n	800ca6e <_free_r+0x26>
 800cac0:	6825      	ldr	r5, [r4, #0]
 800cac2:	1961      	adds	r1, r4, r5
 800cac4:	428b      	cmp	r3, r1
 800cac6:	bf04      	itt	eq
 800cac8:	6819      	ldreq	r1, [r3, #0]
 800caca:	685b      	ldreq	r3, [r3, #4]
 800cacc:	6063      	str	r3, [r4, #4]
 800cace:	bf04      	itt	eq
 800cad0:	1949      	addeq	r1, r1, r5
 800cad2:	6021      	streq	r1, [r4, #0]
 800cad4:	6054      	str	r4, [r2, #4]
 800cad6:	e7ca      	b.n	800ca6e <_free_r+0x26>
 800cad8:	b003      	add	sp, #12
 800cada:	bd30      	pop	{r4, r5, pc}
 800cadc:	20005fe0 	.word	0x20005fe0

0800cae0 <sbrk_aligned>:
 800cae0:	b570      	push	{r4, r5, r6, lr}
 800cae2:	4e0e      	ldr	r6, [pc, #56]	; (800cb1c <sbrk_aligned+0x3c>)
 800cae4:	460c      	mov	r4, r1
 800cae6:	6831      	ldr	r1, [r6, #0]
 800cae8:	4605      	mov	r5, r0
 800caea:	b911      	cbnz	r1, 800caf2 <sbrk_aligned+0x12>
 800caec:	f000 fcbc 	bl	800d468 <_sbrk_r>
 800caf0:	6030      	str	r0, [r6, #0]
 800caf2:	4621      	mov	r1, r4
 800caf4:	4628      	mov	r0, r5
 800caf6:	f000 fcb7 	bl	800d468 <_sbrk_r>
 800cafa:	1c43      	adds	r3, r0, #1
 800cafc:	d00a      	beq.n	800cb14 <sbrk_aligned+0x34>
 800cafe:	1cc4      	adds	r4, r0, #3
 800cb00:	f024 0403 	bic.w	r4, r4, #3
 800cb04:	42a0      	cmp	r0, r4
 800cb06:	d007      	beq.n	800cb18 <sbrk_aligned+0x38>
 800cb08:	1a21      	subs	r1, r4, r0
 800cb0a:	4628      	mov	r0, r5
 800cb0c:	f000 fcac 	bl	800d468 <_sbrk_r>
 800cb10:	3001      	adds	r0, #1
 800cb12:	d101      	bne.n	800cb18 <sbrk_aligned+0x38>
 800cb14:	f04f 34ff 	mov.w	r4, #4294967295
 800cb18:	4620      	mov	r0, r4
 800cb1a:	bd70      	pop	{r4, r5, r6, pc}
 800cb1c:	20005fe4 	.word	0x20005fe4

0800cb20 <_malloc_r>:
 800cb20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb24:	1ccd      	adds	r5, r1, #3
 800cb26:	f025 0503 	bic.w	r5, r5, #3
 800cb2a:	3508      	adds	r5, #8
 800cb2c:	2d0c      	cmp	r5, #12
 800cb2e:	bf38      	it	cc
 800cb30:	250c      	movcc	r5, #12
 800cb32:	2d00      	cmp	r5, #0
 800cb34:	4607      	mov	r7, r0
 800cb36:	db01      	blt.n	800cb3c <_malloc_r+0x1c>
 800cb38:	42a9      	cmp	r1, r5
 800cb3a:	d905      	bls.n	800cb48 <_malloc_r+0x28>
 800cb3c:	230c      	movs	r3, #12
 800cb3e:	603b      	str	r3, [r7, #0]
 800cb40:	2600      	movs	r6, #0
 800cb42:	4630      	mov	r0, r6
 800cb44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cc1c <_malloc_r+0xfc>
 800cb4c:	f000 f868 	bl	800cc20 <__malloc_lock>
 800cb50:	f8d8 3000 	ldr.w	r3, [r8]
 800cb54:	461c      	mov	r4, r3
 800cb56:	bb5c      	cbnz	r4, 800cbb0 <_malloc_r+0x90>
 800cb58:	4629      	mov	r1, r5
 800cb5a:	4638      	mov	r0, r7
 800cb5c:	f7ff ffc0 	bl	800cae0 <sbrk_aligned>
 800cb60:	1c43      	adds	r3, r0, #1
 800cb62:	4604      	mov	r4, r0
 800cb64:	d155      	bne.n	800cc12 <_malloc_r+0xf2>
 800cb66:	f8d8 4000 	ldr.w	r4, [r8]
 800cb6a:	4626      	mov	r6, r4
 800cb6c:	2e00      	cmp	r6, #0
 800cb6e:	d145      	bne.n	800cbfc <_malloc_r+0xdc>
 800cb70:	2c00      	cmp	r4, #0
 800cb72:	d048      	beq.n	800cc06 <_malloc_r+0xe6>
 800cb74:	6823      	ldr	r3, [r4, #0]
 800cb76:	4631      	mov	r1, r6
 800cb78:	4638      	mov	r0, r7
 800cb7a:	eb04 0903 	add.w	r9, r4, r3
 800cb7e:	f000 fc73 	bl	800d468 <_sbrk_r>
 800cb82:	4581      	cmp	r9, r0
 800cb84:	d13f      	bne.n	800cc06 <_malloc_r+0xe6>
 800cb86:	6821      	ldr	r1, [r4, #0]
 800cb88:	1a6d      	subs	r5, r5, r1
 800cb8a:	4629      	mov	r1, r5
 800cb8c:	4638      	mov	r0, r7
 800cb8e:	f7ff ffa7 	bl	800cae0 <sbrk_aligned>
 800cb92:	3001      	adds	r0, #1
 800cb94:	d037      	beq.n	800cc06 <_malloc_r+0xe6>
 800cb96:	6823      	ldr	r3, [r4, #0]
 800cb98:	442b      	add	r3, r5
 800cb9a:	6023      	str	r3, [r4, #0]
 800cb9c:	f8d8 3000 	ldr.w	r3, [r8]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d038      	beq.n	800cc16 <_malloc_r+0xf6>
 800cba4:	685a      	ldr	r2, [r3, #4]
 800cba6:	42a2      	cmp	r2, r4
 800cba8:	d12b      	bne.n	800cc02 <_malloc_r+0xe2>
 800cbaa:	2200      	movs	r2, #0
 800cbac:	605a      	str	r2, [r3, #4]
 800cbae:	e00f      	b.n	800cbd0 <_malloc_r+0xb0>
 800cbb0:	6822      	ldr	r2, [r4, #0]
 800cbb2:	1b52      	subs	r2, r2, r5
 800cbb4:	d41f      	bmi.n	800cbf6 <_malloc_r+0xd6>
 800cbb6:	2a0b      	cmp	r2, #11
 800cbb8:	d917      	bls.n	800cbea <_malloc_r+0xca>
 800cbba:	1961      	adds	r1, r4, r5
 800cbbc:	42a3      	cmp	r3, r4
 800cbbe:	6025      	str	r5, [r4, #0]
 800cbc0:	bf18      	it	ne
 800cbc2:	6059      	strne	r1, [r3, #4]
 800cbc4:	6863      	ldr	r3, [r4, #4]
 800cbc6:	bf08      	it	eq
 800cbc8:	f8c8 1000 	streq.w	r1, [r8]
 800cbcc:	5162      	str	r2, [r4, r5]
 800cbce:	604b      	str	r3, [r1, #4]
 800cbd0:	4638      	mov	r0, r7
 800cbd2:	f104 060b 	add.w	r6, r4, #11
 800cbd6:	f000 f829 	bl	800cc2c <__malloc_unlock>
 800cbda:	f026 0607 	bic.w	r6, r6, #7
 800cbde:	1d23      	adds	r3, r4, #4
 800cbe0:	1af2      	subs	r2, r6, r3
 800cbe2:	d0ae      	beq.n	800cb42 <_malloc_r+0x22>
 800cbe4:	1b9b      	subs	r3, r3, r6
 800cbe6:	50a3      	str	r3, [r4, r2]
 800cbe8:	e7ab      	b.n	800cb42 <_malloc_r+0x22>
 800cbea:	42a3      	cmp	r3, r4
 800cbec:	6862      	ldr	r2, [r4, #4]
 800cbee:	d1dd      	bne.n	800cbac <_malloc_r+0x8c>
 800cbf0:	f8c8 2000 	str.w	r2, [r8]
 800cbf4:	e7ec      	b.n	800cbd0 <_malloc_r+0xb0>
 800cbf6:	4623      	mov	r3, r4
 800cbf8:	6864      	ldr	r4, [r4, #4]
 800cbfa:	e7ac      	b.n	800cb56 <_malloc_r+0x36>
 800cbfc:	4634      	mov	r4, r6
 800cbfe:	6876      	ldr	r6, [r6, #4]
 800cc00:	e7b4      	b.n	800cb6c <_malloc_r+0x4c>
 800cc02:	4613      	mov	r3, r2
 800cc04:	e7cc      	b.n	800cba0 <_malloc_r+0x80>
 800cc06:	230c      	movs	r3, #12
 800cc08:	603b      	str	r3, [r7, #0]
 800cc0a:	4638      	mov	r0, r7
 800cc0c:	f000 f80e 	bl	800cc2c <__malloc_unlock>
 800cc10:	e797      	b.n	800cb42 <_malloc_r+0x22>
 800cc12:	6025      	str	r5, [r4, #0]
 800cc14:	e7dc      	b.n	800cbd0 <_malloc_r+0xb0>
 800cc16:	605b      	str	r3, [r3, #4]
 800cc18:	deff      	udf	#255	; 0xff
 800cc1a:	bf00      	nop
 800cc1c:	20005fe0 	.word	0x20005fe0

0800cc20 <__malloc_lock>:
 800cc20:	4801      	ldr	r0, [pc, #4]	; (800cc28 <__malloc_lock+0x8>)
 800cc22:	f7ff bf00 	b.w	800ca26 <__retarget_lock_acquire_recursive>
 800cc26:	bf00      	nop
 800cc28:	20005fdc 	.word	0x20005fdc

0800cc2c <__malloc_unlock>:
 800cc2c:	4801      	ldr	r0, [pc, #4]	; (800cc34 <__malloc_unlock+0x8>)
 800cc2e:	f7ff befb 	b.w	800ca28 <__retarget_lock_release_recursive>
 800cc32:	bf00      	nop
 800cc34:	20005fdc 	.word	0x20005fdc

0800cc38 <__sfputc_r>:
 800cc38:	6893      	ldr	r3, [r2, #8]
 800cc3a:	3b01      	subs	r3, #1
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	b410      	push	{r4}
 800cc40:	6093      	str	r3, [r2, #8]
 800cc42:	da08      	bge.n	800cc56 <__sfputc_r+0x1e>
 800cc44:	6994      	ldr	r4, [r2, #24]
 800cc46:	42a3      	cmp	r3, r4
 800cc48:	db01      	blt.n	800cc4e <__sfputc_r+0x16>
 800cc4a:	290a      	cmp	r1, #10
 800cc4c:	d103      	bne.n	800cc56 <__sfputc_r+0x1e>
 800cc4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc52:	f000 bb73 	b.w	800d33c <__swbuf_r>
 800cc56:	6813      	ldr	r3, [r2, #0]
 800cc58:	1c58      	adds	r0, r3, #1
 800cc5a:	6010      	str	r0, [r2, #0]
 800cc5c:	7019      	strb	r1, [r3, #0]
 800cc5e:	4608      	mov	r0, r1
 800cc60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc64:	4770      	bx	lr

0800cc66 <__sfputs_r>:
 800cc66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc68:	4606      	mov	r6, r0
 800cc6a:	460f      	mov	r7, r1
 800cc6c:	4614      	mov	r4, r2
 800cc6e:	18d5      	adds	r5, r2, r3
 800cc70:	42ac      	cmp	r4, r5
 800cc72:	d101      	bne.n	800cc78 <__sfputs_r+0x12>
 800cc74:	2000      	movs	r0, #0
 800cc76:	e007      	b.n	800cc88 <__sfputs_r+0x22>
 800cc78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc7c:	463a      	mov	r2, r7
 800cc7e:	4630      	mov	r0, r6
 800cc80:	f7ff ffda 	bl	800cc38 <__sfputc_r>
 800cc84:	1c43      	adds	r3, r0, #1
 800cc86:	d1f3      	bne.n	800cc70 <__sfputs_r+0xa>
 800cc88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc8c <_vfiprintf_r>:
 800cc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc90:	460d      	mov	r5, r1
 800cc92:	b09d      	sub	sp, #116	; 0x74
 800cc94:	4614      	mov	r4, r2
 800cc96:	4698      	mov	r8, r3
 800cc98:	4606      	mov	r6, r0
 800cc9a:	b118      	cbz	r0, 800cca4 <_vfiprintf_r+0x18>
 800cc9c:	6a03      	ldr	r3, [r0, #32]
 800cc9e:	b90b      	cbnz	r3, 800cca4 <_vfiprintf_r+0x18>
 800cca0:	f7ff fdaa 	bl	800c7f8 <__sinit>
 800cca4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cca6:	07d9      	lsls	r1, r3, #31
 800cca8:	d405      	bmi.n	800ccb6 <_vfiprintf_r+0x2a>
 800ccaa:	89ab      	ldrh	r3, [r5, #12]
 800ccac:	059a      	lsls	r2, r3, #22
 800ccae:	d402      	bmi.n	800ccb6 <_vfiprintf_r+0x2a>
 800ccb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccb2:	f7ff feb8 	bl	800ca26 <__retarget_lock_acquire_recursive>
 800ccb6:	89ab      	ldrh	r3, [r5, #12]
 800ccb8:	071b      	lsls	r3, r3, #28
 800ccba:	d501      	bpl.n	800ccc0 <_vfiprintf_r+0x34>
 800ccbc:	692b      	ldr	r3, [r5, #16]
 800ccbe:	b99b      	cbnz	r3, 800cce8 <_vfiprintf_r+0x5c>
 800ccc0:	4629      	mov	r1, r5
 800ccc2:	4630      	mov	r0, r6
 800ccc4:	f000 fb78 	bl	800d3b8 <__swsetup_r>
 800ccc8:	b170      	cbz	r0, 800cce8 <_vfiprintf_r+0x5c>
 800ccca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cccc:	07dc      	lsls	r4, r3, #31
 800ccce:	d504      	bpl.n	800ccda <_vfiprintf_r+0x4e>
 800ccd0:	f04f 30ff 	mov.w	r0, #4294967295
 800ccd4:	b01d      	add	sp, #116	; 0x74
 800ccd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccda:	89ab      	ldrh	r3, [r5, #12]
 800ccdc:	0598      	lsls	r0, r3, #22
 800ccde:	d4f7      	bmi.n	800ccd0 <_vfiprintf_r+0x44>
 800cce0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cce2:	f7ff fea1 	bl	800ca28 <__retarget_lock_release_recursive>
 800cce6:	e7f3      	b.n	800ccd0 <_vfiprintf_r+0x44>
 800cce8:	2300      	movs	r3, #0
 800ccea:	9309      	str	r3, [sp, #36]	; 0x24
 800ccec:	2320      	movs	r3, #32
 800ccee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccf2:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccf6:	2330      	movs	r3, #48	; 0x30
 800ccf8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ceac <_vfiprintf_r+0x220>
 800ccfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd00:	f04f 0901 	mov.w	r9, #1
 800cd04:	4623      	mov	r3, r4
 800cd06:	469a      	mov	sl, r3
 800cd08:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd0c:	b10a      	cbz	r2, 800cd12 <_vfiprintf_r+0x86>
 800cd0e:	2a25      	cmp	r2, #37	; 0x25
 800cd10:	d1f9      	bne.n	800cd06 <_vfiprintf_r+0x7a>
 800cd12:	ebba 0b04 	subs.w	fp, sl, r4
 800cd16:	d00b      	beq.n	800cd30 <_vfiprintf_r+0xa4>
 800cd18:	465b      	mov	r3, fp
 800cd1a:	4622      	mov	r2, r4
 800cd1c:	4629      	mov	r1, r5
 800cd1e:	4630      	mov	r0, r6
 800cd20:	f7ff ffa1 	bl	800cc66 <__sfputs_r>
 800cd24:	3001      	adds	r0, #1
 800cd26:	f000 80a9 	beq.w	800ce7c <_vfiprintf_r+0x1f0>
 800cd2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd2c:	445a      	add	r2, fp
 800cd2e:	9209      	str	r2, [sp, #36]	; 0x24
 800cd30:	f89a 3000 	ldrb.w	r3, [sl]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	f000 80a1 	beq.w	800ce7c <_vfiprintf_r+0x1f0>
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd44:	f10a 0a01 	add.w	sl, sl, #1
 800cd48:	9304      	str	r3, [sp, #16]
 800cd4a:	9307      	str	r3, [sp, #28]
 800cd4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd50:	931a      	str	r3, [sp, #104]	; 0x68
 800cd52:	4654      	mov	r4, sl
 800cd54:	2205      	movs	r2, #5
 800cd56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd5a:	4854      	ldr	r0, [pc, #336]	; (800ceac <_vfiprintf_r+0x220>)
 800cd5c:	f7f3 fa70 	bl	8000240 <memchr>
 800cd60:	9a04      	ldr	r2, [sp, #16]
 800cd62:	b9d8      	cbnz	r0, 800cd9c <_vfiprintf_r+0x110>
 800cd64:	06d1      	lsls	r1, r2, #27
 800cd66:	bf44      	itt	mi
 800cd68:	2320      	movmi	r3, #32
 800cd6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd6e:	0713      	lsls	r3, r2, #28
 800cd70:	bf44      	itt	mi
 800cd72:	232b      	movmi	r3, #43	; 0x2b
 800cd74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd78:	f89a 3000 	ldrb.w	r3, [sl]
 800cd7c:	2b2a      	cmp	r3, #42	; 0x2a
 800cd7e:	d015      	beq.n	800cdac <_vfiprintf_r+0x120>
 800cd80:	9a07      	ldr	r2, [sp, #28]
 800cd82:	4654      	mov	r4, sl
 800cd84:	2000      	movs	r0, #0
 800cd86:	f04f 0c0a 	mov.w	ip, #10
 800cd8a:	4621      	mov	r1, r4
 800cd8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd90:	3b30      	subs	r3, #48	; 0x30
 800cd92:	2b09      	cmp	r3, #9
 800cd94:	d94d      	bls.n	800ce32 <_vfiprintf_r+0x1a6>
 800cd96:	b1b0      	cbz	r0, 800cdc6 <_vfiprintf_r+0x13a>
 800cd98:	9207      	str	r2, [sp, #28]
 800cd9a:	e014      	b.n	800cdc6 <_vfiprintf_r+0x13a>
 800cd9c:	eba0 0308 	sub.w	r3, r0, r8
 800cda0:	fa09 f303 	lsl.w	r3, r9, r3
 800cda4:	4313      	orrs	r3, r2
 800cda6:	9304      	str	r3, [sp, #16]
 800cda8:	46a2      	mov	sl, r4
 800cdaa:	e7d2      	b.n	800cd52 <_vfiprintf_r+0xc6>
 800cdac:	9b03      	ldr	r3, [sp, #12]
 800cdae:	1d19      	adds	r1, r3, #4
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	9103      	str	r1, [sp, #12]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	bfbb      	ittet	lt
 800cdb8:	425b      	neglt	r3, r3
 800cdba:	f042 0202 	orrlt.w	r2, r2, #2
 800cdbe:	9307      	strge	r3, [sp, #28]
 800cdc0:	9307      	strlt	r3, [sp, #28]
 800cdc2:	bfb8      	it	lt
 800cdc4:	9204      	strlt	r2, [sp, #16]
 800cdc6:	7823      	ldrb	r3, [r4, #0]
 800cdc8:	2b2e      	cmp	r3, #46	; 0x2e
 800cdca:	d10c      	bne.n	800cde6 <_vfiprintf_r+0x15a>
 800cdcc:	7863      	ldrb	r3, [r4, #1]
 800cdce:	2b2a      	cmp	r3, #42	; 0x2a
 800cdd0:	d134      	bne.n	800ce3c <_vfiprintf_r+0x1b0>
 800cdd2:	9b03      	ldr	r3, [sp, #12]
 800cdd4:	1d1a      	adds	r2, r3, #4
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	9203      	str	r2, [sp, #12]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	bfb8      	it	lt
 800cdde:	f04f 33ff 	movlt.w	r3, #4294967295
 800cde2:	3402      	adds	r4, #2
 800cde4:	9305      	str	r3, [sp, #20]
 800cde6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cebc <_vfiprintf_r+0x230>
 800cdea:	7821      	ldrb	r1, [r4, #0]
 800cdec:	2203      	movs	r2, #3
 800cdee:	4650      	mov	r0, sl
 800cdf0:	f7f3 fa26 	bl	8000240 <memchr>
 800cdf4:	b138      	cbz	r0, 800ce06 <_vfiprintf_r+0x17a>
 800cdf6:	9b04      	ldr	r3, [sp, #16]
 800cdf8:	eba0 000a 	sub.w	r0, r0, sl
 800cdfc:	2240      	movs	r2, #64	; 0x40
 800cdfe:	4082      	lsls	r2, r0
 800ce00:	4313      	orrs	r3, r2
 800ce02:	3401      	adds	r4, #1
 800ce04:	9304      	str	r3, [sp, #16]
 800ce06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce0a:	4829      	ldr	r0, [pc, #164]	; (800ceb0 <_vfiprintf_r+0x224>)
 800ce0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce10:	2206      	movs	r2, #6
 800ce12:	f7f3 fa15 	bl	8000240 <memchr>
 800ce16:	2800      	cmp	r0, #0
 800ce18:	d03f      	beq.n	800ce9a <_vfiprintf_r+0x20e>
 800ce1a:	4b26      	ldr	r3, [pc, #152]	; (800ceb4 <_vfiprintf_r+0x228>)
 800ce1c:	bb1b      	cbnz	r3, 800ce66 <_vfiprintf_r+0x1da>
 800ce1e:	9b03      	ldr	r3, [sp, #12]
 800ce20:	3307      	adds	r3, #7
 800ce22:	f023 0307 	bic.w	r3, r3, #7
 800ce26:	3308      	adds	r3, #8
 800ce28:	9303      	str	r3, [sp, #12]
 800ce2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce2c:	443b      	add	r3, r7
 800ce2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ce30:	e768      	b.n	800cd04 <_vfiprintf_r+0x78>
 800ce32:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce36:	460c      	mov	r4, r1
 800ce38:	2001      	movs	r0, #1
 800ce3a:	e7a6      	b.n	800cd8a <_vfiprintf_r+0xfe>
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	3401      	adds	r4, #1
 800ce40:	9305      	str	r3, [sp, #20]
 800ce42:	4619      	mov	r1, r3
 800ce44:	f04f 0c0a 	mov.w	ip, #10
 800ce48:	4620      	mov	r0, r4
 800ce4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce4e:	3a30      	subs	r2, #48	; 0x30
 800ce50:	2a09      	cmp	r2, #9
 800ce52:	d903      	bls.n	800ce5c <_vfiprintf_r+0x1d0>
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d0c6      	beq.n	800cde6 <_vfiprintf_r+0x15a>
 800ce58:	9105      	str	r1, [sp, #20]
 800ce5a:	e7c4      	b.n	800cde6 <_vfiprintf_r+0x15a>
 800ce5c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce60:	4604      	mov	r4, r0
 800ce62:	2301      	movs	r3, #1
 800ce64:	e7f0      	b.n	800ce48 <_vfiprintf_r+0x1bc>
 800ce66:	ab03      	add	r3, sp, #12
 800ce68:	9300      	str	r3, [sp, #0]
 800ce6a:	462a      	mov	r2, r5
 800ce6c:	4b12      	ldr	r3, [pc, #72]	; (800ceb8 <_vfiprintf_r+0x22c>)
 800ce6e:	a904      	add	r1, sp, #16
 800ce70:	4630      	mov	r0, r6
 800ce72:	f3af 8000 	nop.w
 800ce76:	4607      	mov	r7, r0
 800ce78:	1c78      	adds	r0, r7, #1
 800ce7a:	d1d6      	bne.n	800ce2a <_vfiprintf_r+0x19e>
 800ce7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce7e:	07d9      	lsls	r1, r3, #31
 800ce80:	d405      	bmi.n	800ce8e <_vfiprintf_r+0x202>
 800ce82:	89ab      	ldrh	r3, [r5, #12]
 800ce84:	059a      	lsls	r2, r3, #22
 800ce86:	d402      	bmi.n	800ce8e <_vfiprintf_r+0x202>
 800ce88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce8a:	f7ff fdcd 	bl	800ca28 <__retarget_lock_release_recursive>
 800ce8e:	89ab      	ldrh	r3, [r5, #12]
 800ce90:	065b      	lsls	r3, r3, #25
 800ce92:	f53f af1d 	bmi.w	800ccd0 <_vfiprintf_r+0x44>
 800ce96:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce98:	e71c      	b.n	800ccd4 <_vfiprintf_r+0x48>
 800ce9a:	ab03      	add	r3, sp, #12
 800ce9c:	9300      	str	r3, [sp, #0]
 800ce9e:	462a      	mov	r2, r5
 800cea0:	4b05      	ldr	r3, [pc, #20]	; (800ceb8 <_vfiprintf_r+0x22c>)
 800cea2:	a904      	add	r1, sp, #16
 800cea4:	4630      	mov	r0, r6
 800cea6:	f000 f879 	bl	800cf9c <_printf_i>
 800ceaa:	e7e4      	b.n	800ce76 <_vfiprintf_r+0x1ea>
 800ceac:	0800d729 	.word	0x0800d729
 800ceb0:	0800d733 	.word	0x0800d733
 800ceb4:	00000000 	.word	0x00000000
 800ceb8:	0800cc67 	.word	0x0800cc67
 800cebc:	0800d72f 	.word	0x0800d72f

0800cec0 <_printf_common>:
 800cec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cec4:	4616      	mov	r6, r2
 800cec6:	4699      	mov	r9, r3
 800cec8:	688a      	ldr	r2, [r1, #8]
 800ceca:	690b      	ldr	r3, [r1, #16]
 800cecc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ced0:	4293      	cmp	r3, r2
 800ced2:	bfb8      	it	lt
 800ced4:	4613      	movlt	r3, r2
 800ced6:	6033      	str	r3, [r6, #0]
 800ced8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cedc:	4607      	mov	r7, r0
 800cede:	460c      	mov	r4, r1
 800cee0:	b10a      	cbz	r2, 800cee6 <_printf_common+0x26>
 800cee2:	3301      	adds	r3, #1
 800cee4:	6033      	str	r3, [r6, #0]
 800cee6:	6823      	ldr	r3, [r4, #0]
 800cee8:	0699      	lsls	r1, r3, #26
 800ceea:	bf42      	ittt	mi
 800ceec:	6833      	ldrmi	r3, [r6, #0]
 800ceee:	3302      	addmi	r3, #2
 800cef0:	6033      	strmi	r3, [r6, #0]
 800cef2:	6825      	ldr	r5, [r4, #0]
 800cef4:	f015 0506 	ands.w	r5, r5, #6
 800cef8:	d106      	bne.n	800cf08 <_printf_common+0x48>
 800cefa:	f104 0a19 	add.w	sl, r4, #25
 800cefe:	68e3      	ldr	r3, [r4, #12]
 800cf00:	6832      	ldr	r2, [r6, #0]
 800cf02:	1a9b      	subs	r3, r3, r2
 800cf04:	42ab      	cmp	r3, r5
 800cf06:	dc26      	bgt.n	800cf56 <_printf_common+0x96>
 800cf08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cf0c:	1e13      	subs	r3, r2, #0
 800cf0e:	6822      	ldr	r2, [r4, #0]
 800cf10:	bf18      	it	ne
 800cf12:	2301      	movne	r3, #1
 800cf14:	0692      	lsls	r2, r2, #26
 800cf16:	d42b      	bmi.n	800cf70 <_printf_common+0xb0>
 800cf18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf1c:	4649      	mov	r1, r9
 800cf1e:	4638      	mov	r0, r7
 800cf20:	47c0      	blx	r8
 800cf22:	3001      	adds	r0, #1
 800cf24:	d01e      	beq.n	800cf64 <_printf_common+0xa4>
 800cf26:	6823      	ldr	r3, [r4, #0]
 800cf28:	6922      	ldr	r2, [r4, #16]
 800cf2a:	f003 0306 	and.w	r3, r3, #6
 800cf2e:	2b04      	cmp	r3, #4
 800cf30:	bf02      	ittt	eq
 800cf32:	68e5      	ldreq	r5, [r4, #12]
 800cf34:	6833      	ldreq	r3, [r6, #0]
 800cf36:	1aed      	subeq	r5, r5, r3
 800cf38:	68a3      	ldr	r3, [r4, #8]
 800cf3a:	bf0c      	ite	eq
 800cf3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf40:	2500      	movne	r5, #0
 800cf42:	4293      	cmp	r3, r2
 800cf44:	bfc4      	itt	gt
 800cf46:	1a9b      	subgt	r3, r3, r2
 800cf48:	18ed      	addgt	r5, r5, r3
 800cf4a:	2600      	movs	r6, #0
 800cf4c:	341a      	adds	r4, #26
 800cf4e:	42b5      	cmp	r5, r6
 800cf50:	d11a      	bne.n	800cf88 <_printf_common+0xc8>
 800cf52:	2000      	movs	r0, #0
 800cf54:	e008      	b.n	800cf68 <_printf_common+0xa8>
 800cf56:	2301      	movs	r3, #1
 800cf58:	4652      	mov	r2, sl
 800cf5a:	4649      	mov	r1, r9
 800cf5c:	4638      	mov	r0, r7
 800cf5e:	47c0      	blx	r8
 800cf60:	3001      	adds	r0, #1
 800cf62:	d103      	bne.n	800cf6c <_printf_common+0xac>
 800cf64:	f04f 30ff 	mov.w	r0, #4294967295
 800cf68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf6c:	3501      	adds	r5, #1
 800cf6e:	e7c6      	b.n	800cefe <_printf_common+0x3e>
 800cf70:	18e1      	adds	r1, r4, r3
 800cf72:	1c5a      	adds	r2, r3, #1
 800cf74:	2030      	movs	r0, #48	; 0x30
 800cf76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf7a:	4422      	add	r2, r4
 800cf7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf84:	3302      	adds	r3, #2
 800cf86:	e7c7      	b.n	800cf18 <_printf_common+0x58>
 800cf88:	2301      	movs	r3, #1
 800cf8a:	4622      	mov	r2, r4
 800cf8c:	4649      	mov	r1, r9
 800cf8e:	4638      	mov	r0, r7
 800cf90:	47c0      	blx	r8
 800cf92:	3001      	adds	r0, #1
 800cf94:	d0e6      	beq.n	800cf64 <_printf_common+0xa4>
 800cf96:	3601      	adds	r6, #1
 800cf98:	e7d9      	b.n	800cf4e <_printf_common+0x8e>
	...

0800cf9c <_printf_i>:
 800cf9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfa0:	7e0f      	ldrb	r7, [r1, #24]
 800cfa2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cfa4:	2f78      	cmp	r7, #120	; 0x78
 800cfa6:	4691      	mov	r9, r2
 800cfa8:	4680      	mov	r8, r0
 800cfaa:	460c      	mov	r4, r1
 800cfac:	469a      	mov	sl, r3
 800cfae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cfb2:	d807      	bhi.n	800cfc4 <_printf_i+0x28>
 800cfb4:	2f62      	cmp	r7, #98	; 0x62
 800cfb6:	d80a      	bhi.n	800cfce <_printf_i+0x32>
 800cfb8:	2f00      	cmp	r7, #0
 800cfba:	f000 80d4 	beq.w	800d166 <_printf_i+0x1ca>
 800cfbe:	2f58      	cmp	r7, #88	; 0x58
 800cfc0:	f000 80c0 	beq.w	800d144 <_printf_i+0x1a8>
 800cfc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cfcc:	e03a      	b.n	800d044 <_printf_i+0xa8>
 800cfce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cfd2:	2b15      	cmp	r3, #21
 800cfd4:	d8f6      	bhi.n	800cfc4 <_printf_i+0x28>
 800cfd6:	a101      	add	r1, pc, #4	; (adr r1, 800cfdc <_printf_i+0x40>)
 800cfd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cfdc:	0800d035 	.word	0x0800d035
 800cfe0:	0800d049 	.word	0x0800d049
 800cfe4:	0800cfc5 	.word	0x0800cfc5
 800cfe8:	0800cfc5 	.word	0x0800cfc5
 800cfec:	0800cfc5 	.word	0x0800cfc5
 800cff0:	0800cfc5 	.word	0x0800cfc5
 800cff4:	0800d049 	.word	0x0800d049
 800cff8:	0800cfc5 	.word	0x0800cfc5
 800cffc:	0800cfc5 	.word	0x0800cfc5
 800d000:	0800cfc5 	.word	0x0800cfc5
 800d004:	0800cfc5 	.word	0x0800cfc5
 800d008:	0800d14d 	.word	0x0800d14d
 800d00c:	0800d075 	.word	0x0800d075
 800d010:	0800d107 	.word	0x0800d107
 800d014:	0800cfc5 	.word	0x0800cfc5
 800d018:	0800cfc5 	.word	0x0800cfc5
 800d01c:	0800d16f 	.word	0x0800d16f
 800d020:	0800cfc5 	.word	0x0800cfc5
 800d024:	0800d075 	.word	0x0800d075
 800d028:	0800cfc5 	.word	0x0800cfc5
 800d02c:	0800cfc5 	.word	0x0800cfc5
 800d030:	0800d10f 	.word	0x0800d10f
 800d034:	682b      	ldr	r3, [r5, #0]
 800d036:	1d1a      	adds	r2, r3, #4
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	602a      	str	r2, [r5, #0]
 800d03c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d040:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d044:	2301      	movs	r3, #1
 800d046:	e09f      	b.n	800d188 <_printf_i+0x1ec>
 800d048:	6820      	ldr	r0, [r4, #0]
 800d04a:	682b      	ldr	r3, [r5, #0]
 800d04c:	0607      	lsls	r7, r0, #24
 800d04e:	f103 0104 	add.w	r1, r3, #4
 800d052:	6029      	str	r1, [r5, #0]
 800d054:	d501      	bpl.n	800d05a <_printf_i+0xbe>
 800d056:	681e      	ldr	r6, [r3, #0]
 800d058:	e003      	b.n	800d062 <_printf_i+0xc6>
 800d05a:	0646      	lsls	r6, r0, #25
 800d05c:	d5fb      	bpl.n	800d056 <_printf_i+0xba>
 800d05e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d062:	2e00      	cmp	r6, #0
 800d064:	da03      	bge.n	800d06e <_printf_i+0xd2>
 800d066:	232d      	movs	r3, #45	; 0x2d
 800d068:	4276      	negs	r6, r6
 800d06a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d06e:	485a      	ldr	r0, [pc, #360]	; (800d1d8 <_printf_i+0x23c>)
 800d070:	230a      	movs	r3, #10
 800d072:	e012      	b.n	800d09a <_printf_i+0xfe>
 800d074:	682b      	ldr	r3, [r5, #0]
 800d076:	6820      	ldr	r0, [r4, #0]
 800d078:	1d19      	adds	r1, r3, #4
 800d07a:	6029      	str	r1, [r5, #0]
 800d07c:	0605      	lsls	r5, r0, #24
 800d07e:	d501      	bpl.n	800d084 <_printf_i+0xe8>
 800d080:	681e      	ldr	r6, [r3, #0]
 800d082:	e002      	b.n	800d08a <_printf_i+0xee>
 800d084:	0641      	lsls	r1, r0, #25
 800d086:	d5fb      	bpl.n	800d080 <_printf_i+0xe4>
 800d088:	881e      	ldrh	r6, [r3, #0]
 800d08a:	4853      	ldr	r0, [pc, #332]	; (800d1d8 <_printf_i+0x23c>)
 800d08c:	2f6f      	cmp	r7, #111	; 0x6f
 800d08e:	bf0c      	ite	eq
 800d090:	2308      	moveq	r3, #8
 800d092:	230a      	movne	r3, #10
 800d094:	2100      	movs	r1, #0
 800d096:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d09a:	6865      	ldr	r5, [r4, #4]
 800d09c:	60a5      	str	r5, [r4, #8]
 800d09e:	2d00      	cmp	r5, #0
 800d0a0:	bfa2      	ittt	ge
 800d0a2:	6821      	ldrge	r1, [r4, #0]
 800d0a4:	f021 0104 	bicge.w	r1, r1, #4
 800d0a8:	6021      	strge	r1, [r4, #0]
 800d0aa:	b90e      	cbnz	r6, 800d0b0 <_printf_i+0x114>
 800d0ac:	2d00      	cmp	r5, #0
 800d0ae:	d04b      	beq.n	800d148 <_printf_i+0x1ac>
 800d0b0:	4615      	mov	r5, r2
 800d0b2:	fbb6 f1f3 	udiv	r1, r6, r3
 800d0b6:	fb03 6711 	mls	r7, r3, r1, r6
 800d0ba:	5dc7      	ldrb	r7, [r0, r7]
 800d0bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d0c0:	4637      	mov	r7, r6
 800d0c2:	42bb      	cmp	r3, r7
 800d0c4:	460e      	mov	r6, r1
 800d0c6:	d9f4      	bls.n	800d0b2 <_printf_i+0x116>
 800d0c8:	2b08      	cmp	r3, #8
 800d0ca:	d10b      	bne.n	800d0e4 <_printf_i+0x148>
 800d0cc:	6823      	ldr	r3, [r4, #0]
 800d0ce:	07de      	lsls	r6, r3, #31
 800d0d0:	d508      	bpl.n	800d0e4 <_printf_i+0x148>
 800d0d2:	6923      	ldr	r3, [r4, #16]
 800d0d4:	6861      	ldr	r1, [r4, #4]
 800d0d6:	4299      	cmp	r1, r3
 800d0d8:	bfde      	ittt	le
 800d0da:	2330      	movle	r3, #48	; 0x30
 800d0dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d0e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d0e4:	1b52      	subs	r2, r2, r5
 800d0e6:	6122      	str	r2, [r4, #16]
 800d0e8:	f8cd a000 	str.w	sl, [sp]
 800d0ec:	464b      	mov	r3, r9
 800d0ee:	aa03      	add	r2, sp, #12
 800d0f0:	4621      	mov	r1, r4
 800d0f2:	4640      	mov	r0, r8
 800d0f4:	f7ff fee4 	bl	800cec0 <_printf_common>
 800d0f8:	3001      	adds	r0, #1
 800d0fa:	d14a      	bne.n	800d192 <_printf_i+0x1f6>
 800d0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d100:	b004      	add	sp, #16
 800d102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d106:	6823      	ldr	r3, [r4, #0]
 800d108:	f043 0320 	orr.w	r3, r3, #32
 800d10c:	6023      	str	r3, [r4, #0]
 800d10e:	4833      	ldr	r0, [pc, #204]	; (800d1dc <_printf_i+0x240>)
 800d110:	2778      	movs	r7, #120	; 0x78
 800d112:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d116:	6823      	ldr	r3, [r4, #0]
 800d118:	6829      	ldr	r1, [r5, #0]
 800d11a:	061f      	lsls	r7, r3, #24
 800d11c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d120:	d402      	bmi.n	800d128 <_printf_i+0x18c>
 800d122:	065f      	lsls	r7, r3, #25
 800d124:	bf48      	it	mi
 800d126:	b2b6      	uxthmi	r6, r6
 800d128:	07df      	lsls	r7, r3, #31
 800d12a:	bf48      	it	mi
 800d12c:	f043 0320 	orrmi.w	r3, r3, #32
 800d130:	6029      	str	r1, [r5, #0]
 800d132:	bf48      	it	mi
 800d134:	6023      	strmi	r3, [r4, #0]
 800d136:	b91e      	cbnz	r6, 800d140 <_printf_i+0x1a4>
 800d138:	6823      	ldr	r3, [r4, #0]
 800d13a:	f023 0320 	bic.w	r3, r3, #32
 800d13e:	6023      	str	r3, [r4, #0]
 800d140:	2310      	movs	r3, #16
 800d142:	e7a7      	b.n	800d094 <_printf_i+0xf8>
 800d144:	4824      	ldr	r0, [pc, #144]	; (800d1d8 <_printf_i+0x23c>)
 800d146:	e7e4      	b.n	800d112 <_printf_i+0x176>
 800d148:	4615      	mov	r5, r2
 800d14a:	e7bd      	b.n	800d0c8 <_printf_i+0x12c>
 800d14c:	682b      	ldr	r3, [r5, #0]
 800d14e:	6826      	ldr	r6, [r4, #0]
 800d150:	6961      	ldr	r1, [r4, #20]
 800d152:	1d18      	adds	r0, r3, #4
 800d154:	6028      	str	r0, [r5, #0]
 800d156:	0635      	lsls	r5, r6, #24
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	d501      	bpl.n	800d160 <_printf_i+0x1c4>
 800d15c:	6019      	str	r1, [r3, #0]
 800d15e:	e002      	b.n	800d166 <_printf_i+0x1ca>
 800d160:	0670      	lsls	r0, r6, #25
 800d162:	d5fb      	bpl.n	800d15c <_printf_i+0x1c0>
 800d164:	8019      	strh	r1, [r3, #0]
 800d166:	2300      	movs	r3, #0
 800d168:	6123      	str	r3, [r4, #16]
 800d16a:	4615      	mov	r5, r2
 800d16c:	e7bc      	b.n	800d0e8 <_printf_i+0x14c>
 800d16e:	682b      	ldr	r3, [r5, #0]
 800d170:	1d1a      	adds	r2, r3, #4
 800d172:	602a      	str	r2, [r5, #0]
 800d174:	681d      	ldr	r5, [r3, #0]
 800d176:	6862      	ldr	r2, [r4, #4]
 800d178:	2100      	movs	r1, #0
 800d17a:	4628      	mov	r0, r5
 800d17c:	f7f3 f860 	bl	8000240 <memchr>
 800d180:	b108      	cbz	r0, 800d186 <_printf_i+0x1ea>
 800d182:	1b40      	subs	r0, r0, r5
 800d184:	6060      	str	r0, [r4, #4]
 800d186:	6863      	ldr	r3, [r4, #4]
 800d188:	6123      	str	r3, [r4, #16]
 800d18a:	2300      	movs	r3, #0
 800d18c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d190:	e7aa      	b.n	800d0e8 <_printf_i+0x14c>
 800d192:	6923      	ldr	r3, [r4, #16]
 800d194:	462a      	mov	r2, r5
 800d196:	4649      	mov	r1, r9
 800d198:	4640      	mov	r0, r8
 800d19a:	47d0      	blx	sl
 800d19c:	3001      	adds	r0, #1
 800d19e:	d0ad      	beq.n	800d0fc <_printf_i+0x160>
 800d1a0:	6823      	ldr	r3, [r4, #0]
 800d1a2:	079b      	lsls	r3, r3, #30
 800d1a4:	d413      	bmi.n	800d1ce <_printf_i+0x232>
 800d1a6:	68e0      	ldr	r0, [r4, #12]
 800d1a8:	9b03      	ldr	r3, [sp, #12]
 800d1aa:	4298      	cmp	r0, r3
 800d1ac:	bfb8      	it	lt
 800d1ae:	4618      	movlt	r0, r3
 800d1b0:	e7a6      	b.n	800d100 <_printf_i+0x164>
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	4632      	mov	r2, r6
 800d1b6:	4649      	mov	r1, r9
 800d1b8:	4640      	mov	r0, r8
 800d1ba:	47d0      	blx	sl
 800d1bc:	3001      	adds	r0, #1
 800d1be:	d09d      	beq.n	800d0fc <_printf_i+0x160>
 800d1c0:	3501      	adds	r5, #1
 800d1c2:	68e3      	ldr	r3, [r4, #12]
 800d1c4:	9903      	ldr	r1, [sp, #12]
 800d1c6:	1a5b      	subs	r3, r3, r1
 800d1c8:	42ab      	cmp	r3, r5
 800d1ca:	dcf2      	bgt.n	800d1b2 <_printf_i+0x216>
 800d1cc:	e7eb      	b.n	800d1a6 <_printf_i+0x20a>
 800d1ce:	2500      	movs	r5, #0
 800d1d0:	f104 0619 	add.w	r6, r4, #25
 800d1d4:	e7f5      	b.n	800d1c2 <_printf_i+0x226>
 800d1d6:	bf00      	nop
 800d1d8:	0800d73a 	.word	0x0800d73a
 800d1dc:	0800d74b 	.word	0x0800d74b

0800d1e0 <__sflush_r>:
 800d1e0:	898a      	ldrh	r2, [r1, #12]
 800d1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1e6:	4605      	mov	r5, r0
 800d1e8:	0710      	lsls	r0, r2, #28
 800d1ea:	460c      	mov	r4, r1
 800d1ec:	d458      	bmi.n	800d2a0 <__sflush_r+0xc0>
 800d1ee:	684b      	ldr	r3, [r1, #4]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	dc05      	bgt.n	800d200 <__sflush_r+0x20>
 800d1f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	dc02      	bgt.n	800d200 <__sflush_r+0x20>
 800d1fa:	2000      	movs	r0, #0
 800d1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d202:	2e00      	cmp	r6, #0
 800d204:	d0f9      	beq.n	800d1fa <__sflush_r+0x1a>
 800d206:	2300      	movs	r3, #0
 800d208:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d20c:	682f      	ldr	r7, [r5, #0]
 800d20e:	6a21      	ldr	r1, [r4, #32]
 800d210:	602b      	str	r3, [r5, #0]
 800d212:	d032      	beq.n	800d27a <__sflush_r+0x9a>
 800d214:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d216:	89a3      	ldrh	r3, [r4, #12]
 800d218:	075a      	lsls	r2, r3, #29
 800d21a:	d505      	bpl.n	800d228 <__sflush_r+0x48>
 800d21c:	6863      	ldr	r3, [r4, #4]
 800d21e:	1ac0      	subs	r0, r0, r3
 800d220:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d222:	b10b      	cbz	r3, 800d228 <__sflush_r+0x48>
 800d224:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d226:	1ac0      	subs	r0, r0, r3
 800d228:	2300      	movs	r3, #0
 800d22a:	4602      	mov	r2, r0
 800d22c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d22e:	6a21      	ldr	r1, [r4, #32]
 800d230:	4628      	mov	r0, r5
 800d232:	47b0      	blx	r6
 800d234:	1c43      	adds	r3, r0, #1
 800d236:	89a3      	ldrh	r3, [r4, #12]
 800d238:	d106      	bne.n	800d248 <__sflush_r+0x68>
 800d23a:	6829      	ldr	r1, [r5, #0]
 800d23c:	291d      	cmp	r1, #29
 800d23e:	d82b      	bhi.n	800d298 <__sflush_r+0xb8>
 800d240:	4a29      	ldr	r2, [pc, #164]	; (800d2e8 <__sflush_r+0x108>)
 800d242:	410a      	asrs	r2, r1
 800d244:	07d6      	lsls	r6, r2, #31
 800d246:	d427      	bmi.n	800d298 <__sflush_r+0xb8>
 800d248:	2200      	movs	r2, #0
 800d24a:	6062      	str	r2, [r4, #4]
 800d24c:	04d9      	lsls	r1, r3, #19
 800d24e:	6922      	ldr	r2, [r4, #16]
 800d250:	6022      	str	r2, [r4, #0]
 800d252:	d504      	bpl.n	800d25e <__sflush_r+0x7e>
 800d254:	1c42      	adds	r2, r0, #1
 800d256:	d101      	bne.n	800d25c <__sflush_r+0x7c>
 800d258:	682b      	ldr	r3, [r5, #0]
 800d25a:	b903      	cbnz	r3, 800d25e <__sflush_r+0x7e>
 800d25c:	6560      	str	r0, [r4, #84]	; 0x54
 800d25e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d260:	602f      	str	r7, [r5, #0]
 800d262:	2900      	cmp	r1, #0
 800d264:	d0c9      	beq.n	800d1fa <__sflush_r+0x1a>
 800d266:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d26a:	4299      	cmp	r1, r3
 800d26c:	d002      	beq.n	800d274 <__sflush_r+0x94>
 800d26e:	4628      	mov	r0, r5
 800d270:	f7ff fbea 	bl	800ca48 <_free_r>
 800d274:	2000      	movs	r0, #0
 800d276:	6360      	str	r0, [r4, #52]	; 0x34
 800d278:	e7c0      	b.n	800d1fc <__sflush_r+0x1c>
 800d27a:	2301      	movs	r3, #1
 800d27c:	4628      	mov	r0, r5
 800d27e:	47b0      	blx	r6
 800d280:	1c41      	adds	r1, r0, #1
 800d282:	d1c8      	bne.n	800d216 <__sflush_r+0x36>
 800d284:	682b      	ldr	r3, [r5, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d0c5      	beq.n	800d216 <__sflush_r+0x36>
 800d28a:	2b1d      	cmp	r3, #29
 800d28c:	d001      	beq.n	800d292 <__sflush_r+0xb2>
 800d28e:	2b16      	cmp	r3, #22
 800d290:	d101      	bne.n	800d296 <__sflush_r+0xb6>
 800d292:	602f      	str	r7, [r5, #0]
 800d294:	e7b1      	b.n	800d1fa <__sflush_r+0x1a>
 800d296:	89a3      	ldrh	r3, [r4, #12]
 800d298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d29c:	81a3      	strh	r3, [r4, #12]
 800d29e:	e7ad      	b.n	800d1fc <__sflush_r+0x1c>
 800d2a0:	690f      	ldr	r7, [r1, #16]
 800d2a2:	2f00      	cmp	r7, #0
 800d2a4:	d0a9      	beq.n	800d1fa <__sflush_r+0x1a>
 800d2a6:	0793      	lsls	r3, r2, #30
 800d2a8:	680e      	ldr	r6, [r1, #0]
 800d2aa:	bf08      	it	eq
 800d2ac:	694b      	ldreq	r3, [r1, #20]
 800d2ae:	600f      	str	r7, [r1, #0]
 800d2b0:	bf18      	it	ne
 800d2b2:	2300      	movne	r3, #0
 800d2b4:	eba6 0807 	sub.w	r8, r6, r7
 800d2b8:	608b      	str	r3, [r1, #8]
 800d2ba:	f1b8 0f00 	cmp.w	r8, #0
 800d2be:	dd9c      	ble.n	800d1fa <__sflush_r+0x1a>
 800d2c0:	6a21      	ldr	r1, [r4, #32]
 800d2c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d2c4:	4643      	mov	r3, r8
 800d2c6:	463a      	mov	r2, r7
 800d2c8:	4628      	mov	r0, r5
 800d2ca:	47b0      	blx	r6
 800d2cc:	2800      	cmp	r0, #0
 800d2ce:	dc06      	bgt.n	800d2de <__sflush_r+0xfe>
 800d2d0:	89a3      	ldrh	r3, [r4, #12]
 800d2d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2d6:	81a3      	strh	r3, [r4, #12]
 800d2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2dc:	e78e      	b.n	800d1fc <__sflush_r+0x1c>
 800d2de:	4407      	add	r7, r0
 800d2e0:	eba8 0800 	sub.w	r8, r8, r0
 800d2e4:	e7e9      	b.n	800d2ba <__sflush_r+0xda>
 800d2e6:	bf00      	nop
 800d2e8:	dfbffffe 	.word	0xdfbffffe

0800d2ec <_fflush_r>:
 800d2ec:	b538      	push	{r3, r4, r5, lr}
 800d2ee:	690b      	ldr	r3, [r1, #16]
 800d2f0:	4605      	mov	r5, r0
 800d2f2:	460c      	mov	r4, r1
 800d2f4:	b913      	cbnz	r3, 800d2fc <_fflush_r+0x10>
 800d2f6:	2500      	movs	r5, #0
 800d2f8:	4628      	mov	r0, r5
 800d2fa:	bd38      	pop	{r3, r4, r5, pc}
 800d2fc:	b118      	cbz	r0, 800d306 <_fflush_r+0x1a>
 800d2fe:	6a03      	ldr	r3, [r0, #32]
 800d300:	b90b      	cbnz	r3, 800d306 <_fflush_r+0x1a>
 800d302:	f7ff fa79 	bl	800c7f8 <__sinit>
 800d306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d0f3      	beq.n	800d2f6 <_fflush_r+0xa>
 800d30e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d310:	07d0      	lsls	r0, r2, #31
 800d312:	d404      	bmi.n	800d31e <_fflush_r+0x32>
 800d314:	0599      	lsls	r1, r3, #22
 800d316:	d402      	bmi.n	800d31e <_fflush_r+0x32>
 800d318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d31a:	f7ff fb84 	bl	800ca26 <__retarget_lock_acquire_recursive>
 800d31e:	4628      	mov	r0, r5
 800d320:	4621      	mov	r1, r4
 800d322:	f7ff ff5d 	bl	800d1e0 <__sflush_r>
 800d326:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d328:	07da      	lsls	r2, r3, #31
 800d32a:	4605      	mov	r5, r0
 800d32c:	d4e4      	bmi.n	800d2f8 <_fflush_r+0xc>
 800d32e:	89a3      	ldrh	r3, [r4, #12]
 800d330:	059b      	lsls	r3, r3, #22
 800d332:	d4e1      	bmi.n	800d2f8 <_fflush_r+0xc>
 800d334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d336:	f7ff fb77 	bl	800ca28 <__retarget_lock_release_recursive>
 800d33a:	e7dd      	b.n	800d2f8 <_fflush_r+0xc>

0800d33c <__swbuf_r>:
 800d33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d33e:	460e      	mov	r6, r1
 800d340:	4614      	mov	r4, r2
 800d342:	4605      	mov	r5, r0
 800d344:	b118      	cbz	r0, 800d34e <__swbuf_r+0x12>
 800d346:	6a03      	ldr	r3, [r0, #32]
 800d348:	b90b      	cbnz	r3, 800d34e <__swbuf_r+0x12>
 800d34a:	f7ff fa55 	bl	800c7f8 <__sinit>
 800d34e:	69a3      	ldr	r3, [r4, #24]
 800d350:	60a3      	str	r3, [r4, #8]
 800d352:	89a3      	ldrh	r3, [r4, #12]
 800d354:	071a      	lsls	r2, r3, #28
 800d356:	d525      	bpl.n	800d3a4 <__swbuf_r+0x68>
 800d358:	6923      	ldr	r3, [r4, #16]
 800d35a:	b31b      	cbz	r3, 800d3a4 <__swbuf_r+0x68>
 800d35c:	6823      	ldr	r3, [r4, #0]
 800d35e:	6922      	ldr	r2, [r4, #16]
 800d360:	1a98      	subs	r0, r3, r2
 800d362:	6963      	ldr	r3, [r4, #20]
 800d364:	b2f6      	uxtb	r6, r6
 800d366:	4283      	cmp	r3, r0
 800d368:	4637      	mov	r7, r6
 800d36a:	dc04      	bgt.n	800d376 <__swbuf_r+0x3a>
 800d36c:	4621      	mov	r1, r4
 800d36e:	4628      	mov	r0, r5
 800d370:	f7ff ffbc 	bl	800d2ec <_fflush_r>
 800d374:	b9e0      	cbnz	r0, 800d3b0 <__swbuf_r+0x74>
 800d376:	68a3      	ldr	r3, [r4, #8]
 800d378:	3b01      	subs	r3, #1
 800d37a:	60a3      	str	r3, [r4, #8]
 800d37c:	6823      	ldr	r3, [r4, #0]
 800d37e:	1c5a      	adds	r2, r3, #1
 800d380:	6022      	str	r2, [r4, #0]
 800d382:	701e      	strb	r6, [r3, #0]
 800d384:	6962      	ldr	r2, [r4, #20]
 800d386:	1c43      	adds	r3, r0, #1
 800d388:	429a      	cmp	r2, r3
 800d38a:	d004      	beq.n	800d396 <__swbuf_r+0x5a>
 800d38c:	89a3      	ldrh	r3, [r4, #12]
 800d38e:	07db      	lsls	r3, r3, #31
 800d390:	d506      	bpl.n	800d3a0 <__swbuf_r+0x64>
 800d392:	2e0a      	cmp	r6, #10
 800d394:	d104      	bne.n	800d3a0 <__swbuf_r+0x64>
 800d396:	4621      	mov	r1, r4
 800d398:	4628      	mov	r0, r5
 800d39a:	f7ff ffa7 	bl	800d2ec <_fflush_r>
 800d39e:	b938      	cbnz	r0, 800d3b0 <__swbuf_r+0x74>
 800d3a0:	4638      	mov	r0, r7
 800d3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3a4:	4621      	mov	r1, r4
 800d3a6:	4628      	mov	r0, r5
 800d3a8:	f000 f806 	bl	800d3b8 <__swsetup_r>
 800d3ac:	2800      	cmp	r0, #0
 800d3ae:	d0d5      	beq.n	800d35c <__swbuf_r+0x20>
 800d3b0:	f04f 37ff 	mov.w	r7, #4294967295
 800d3b4:	e7f4      	b.n	800d3a0 <__swbuf_r+0x64>
	...

0800d3b8 <__swsetup_r>:
 800d3b8:	b538      	push	{r3, r4, r5, lr}
 800d3ba:	4b2a      	ldr	r3, [pc, #168]	; (800d464 <__swsetup_r+0xac>)
 800d3bc:	4605      	mov	r5, r0
 800d3be:	6818      	ldr	r0, [r3, #0]
 800d3c0:	460c      	mov	r4, r1
 800d3c2:	b118      	cbz	r0, 800d3cc <__swsetup_r+0x14>
 800d3c4:	6a03      	ldr	r3, [r0, #32]
 800d3c6:	b90b      	cbnz	r3, 800d3cc <__swsetup_r+0x14>
 800d3c8:	f7ff fa16 	bl	800c7f8 <__sinit>
 800d3cc:	89a3      	ldrh	r3, [r4, #12]
 800d3ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3d2:	0718      	lsls	r0, r3, #28
 800d3d4:	d422      	bmi.n	800d41c <__swsetup_r+0x64>
 800d3d6:	06d9      	lsls	r1, r3, #27
 800d3d8:	d407      	bmi.n	800d3ea <__swsetup_r+0x32>
 800d3da:	2309      	movs	r3, #9
 800d3dc:	602b      	str	r3, [r5, #0]
 800d3de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d3e2:	81a3      	strh	r3, [r4, #12]
 800d3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3e8:	e034      	b.n	800d454 <__swsetup_r+0x9c>
 800d3ea:	0758      	lsls	r0, r3, #29
 800d3ec:	d512      	bpl.n	800d414 <__swsetup_r+0x5c>
 800d3ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3f0:	b141      	cbz	r1, 800d404 <__swsetup_r+0x4c>
 800d3f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d3f6:	4299      	cmp	r1, r3
 800d3f8:	d002      	beq.n	800d400 <__swsetup_r+0x48>
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	f7ff fb24 	bl	800ca48 <_free_r>
 800d400:	2300      	movs	r3, #0
 800d402:	6363      	str	r3, [r4, #52]	; 0x34
 800d404:	89a3      	ldrh	r3, [r4, #12]
 800d406:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d40a:	81a3      	strh	r3, [r4, #12]
 800d40c:	2300      	movs	r3, #0
 800d40e:	6063      	str	r3, [r4, #4]
 800d410:	6923      	ldr	r3, [r4, #16]
 800d412:	6023      	str	r3, [r4, #0]
 800d414:	89a3      	ldrh	r3, [r4, #12]
 800d416:	f043 0308 	orr.w	r3, r3, #8
 800d41a:	81a3      	strh	r3, [r4, #12]
 800d41c:	6923      	ldr	r3, [r4, #16]
 800d41e:	b94b      	cbnz	r3, 800d434 <__swsetup_r+0x7c>
 800d420:	89a3      	ldrh	r3, [r4, #12]
 800d422:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d42a:	d003      	beq.n	800d434 <__swsetup_r+0x7c>
 800d42c:	4621      	mov	r1, r4
 800d42e:	4628      	mov	r0, r5
 800d430:	f000 f850 	bl	800d4d4 <__smakebuf_r>
 800d434:	89a0      	ldrh	r0, [r4, #12]
 800d436:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d43a:	f010 0301 	ands.w	r3, r0, #1
 800d43e:	d00a      	beq.n	800d456 <__swsetup_r+0x9e>
 800d440:	2300      	movs	r3, #0
 800d442:	60a3      	str	r3, [r4, #8]
 800d444:	6963      	ldr	r3, [r4, #20]
 800d446:	425b      	negs	r3, r3
 800d448:	61a3      	str	r3, [r4, #24]
 800d44a:	6923      	ldr	r3, [r4, #16]
 800d44c:	b943      	cbnz	r3, 800d460 <__swsetup_r+0xa8>
 800d44e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d452:	d1c4      	bne.n	800d3de <__swsetup_r+0x26>
 800d454:	bd38      	pop	{r3, r4, r5, pc}
 800d456:	0781      	lsls	r1, r0, #30
 800d458:	bf58      	it	pl
 800d45a:	6963      	ldrpl	r3, [r4, #20]
 800d45c:	60a3      	str	r3, [r4, #8]
 800d45e:	e7f4      	b.n	800d44a <__swsetup_r+0x92>
 800d460:	2000      	movs	r0, #0
 800d462:	e7f7      	b.n	800d454 <__swsetup_r+0x9c>
 800d464:	200001e4 	.word	0x200001e4

0800d468 <_sbrk_r>:
 800d468:	b538      	push	{r3, r4, r5, lr}
 800d46a:	4d06      	ldr	r5, [pc, #24]	; (800d484 <_sbrk_r+0x1c>)
 800d46c:	2300      	movs	r3, #0
 800d46e:	4604      	mov	r4, r0
 800d470:	4608      	mov	r0, r1
 800d472:	602b      	str	r3, [r5, #0]
 800d474:	f7f4 f9a0 	bl	80017b8 <_sbrk>
 800d478:	1c43      	adds	r3, r0, #1
 800d47a:	d102      	bne.n	800d482 <_sbrk_r+0x1a>
 800d47c:	682b      	ldr	r3, [r5, #0]
 800d47e:	b103      	cbz	r3, 800d482 <_sbrk_r+0x1a>
 800d480:	6023      	str	r3, [r4, #0]
 800d482:	bd38      	pop	{r3, r4, r5, pc}
 800d484:	20005fd8 	.word	0x20005fd8

0800d488 <__swhatbuf_r>:
 800d488:	b570      	push	{r4, r5, r6, lr}
 800d48a:	460c      	mov	r4, r1
 800d48c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d490:	2900      	cmp	r1, #0
 800d492:	b096      	sub	sp, #88	; 0x58
 800d494:	4615      	mov	r5, r2
 800d496:	461e      	mov	r6, r3
 800d498:	da0d      	bge.n	800d4b6 <__swhatbuf_r+0x2e>
 800d49a:	89a3      	ldrh	r3, [r4, #12]
 800d49c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d4a0:	f04f 0100 	mov.w	r1, #0
 800d4a4:	bf0c      	ite	eq
 800d4a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d4aa:	2340      	movne	r3, #64	; 0x40
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	6031      	str	r1, [r6, #0]
 800d4b0:	602b      	str	r3, [r5, #0]
 800d4b2:	b016      	add	sp, #88	; 0x58
 800d4b4:	bd70      	pop	{r4, r5, r6, pc}
 800d4b6:	466a      	mov	r2, sp
 800d4b8:	f000 f848 	bl	800d54c <_fstat_r>
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	dbec      	blt.n	800d49a <__swhatbuf_r+0x12>
 800d4c0:	9901      	ldr	r1, [sp, #4]
 800d4c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d4c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d4ca:	4259      	negs	r1, r3
 800d4cc:	4159      	adcs	r1, r3
 800d4ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4d2:	e7eb      	b.n	800d4ac <__swhatbuf_r+0x24>

0800d4d4 <__smakebuf_r>:
 800d4d4:	898b      	ldrh	r3, [r1, #12]
 800d4d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d4d8:	079d      	lsls	r5, r3, #30
 800d4da:	4606      	mov	r6, r0
 800d4dc:	460c      	mov	r4, r1
 800d4de:	d507      	bpl.n	800d4f0 <__smakebuf_r+0x1c>
 800d4e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d4e4:	6023      	str	r3, [r4, #0]
 800d4e6:	6123      	str	r3, [r4, #16]
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	6163      	str	r3, [r4, #20]
 800d4ec:	b002      	add	sp, #8
 800d4ee:	bd70      	pop	{r4, r5, r6, pc}
 800d4f0:	ab01      	add	r3, sp, #4
 800d4f2:	466a      	mov	r2, sp
 800d4f4:	f7ff ffc8 	bl	800d488 <__swhatbuf_r>
 800d4f8:	9900      	ldr	r1, [sp, #0]
 800d4fa:	4605      	mov	r5, r0
 800d4fc:	4630      	mov	r0, r6
 800d4fe:	f7ff fb0f 	bl	800cb20 <_malloc_r>
 800d502:	b948      	cbnz	r0, 800d518 <__smakebuf_r+0x44>
 800d504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d508:	059a      	lsls	r2, r3, #22
 800d50a:	d4ef      	bmi.n	800d4ec <__smakebuf_r+0x18>
 800d50c:	f023 0303 	bic.w	r3, r3, #3
 800d510:	f043 0302 	orr.w	r3, r3, #2
 800d514:	81a3      	strh	r3, [r4, #12]
 800d516:	e7e3      	b.n	800d4e0 <__smakebuf_r+0xc>
 800d518:	89a3      	ldrh	r3, [r4, #12]
 800d51a:	6020      	str	r0, [r4, #0]
 800d51c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d520:	81a3      	strh	r3, [r4, #12]
 800d522:	9b00      	ldr	r3, [sp, #0]
 800d524:	6163      	str	r3, [r4, #20]
 800d526:	9b01      	ldr	r3, [sp, #4]
 800d528:	6120      	str	r0, [r4, #16]
 800d52a:	b15b      	cbz	r3, 800d544 <__smakebuf_r+0x70>
 800d52c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d530:	4630      	mov	r0, r6
 800d532:	f000 f81d 	bl	800d570 <_isatty_r>
 800d536:	b128      	cbz	r0, 800d544 <__smakebuf_r+0x70>
 800d538:	89a3      	ldrh	r3, [r4, #12]
 800d53a:	f023 0303 	bic.w	r3, r3, #3
 800d53e:	f043 0301 	orr.w	r3, r3, #1
 800d542:	81a3      	strh	r3, [r4, #12]
 800d544:	89a3      	ldrh	r3, [r4, #12]
 800d546:	431d      	orrs	r5, r3
 800d548:	81a5      	strh	r5, [r4, #12]
 800d54a:	e7cf      	b.n	800d4ec <__smakebuf_r+0x18>

0800d54c <_fstat_r>:
 800d54c:	b538      	push	{r3, r4, r5, lr}
 800d54e:	4d07      	ldr	r5, [pc, #28]	; (800d56c <_fstat_r+0x20>)
 800d550:	2300      	movs	r3, #0
 800d552:	4604      	mov	r4, r0
 800d554:	4608      	mov	r0, r1
 800d556:	4611      	mov	r1, r2
 800d558:	602b      	str	r3, [r5, #0]
 800d55a:	f7f4 f904 	bl	8001766 <_fstat>
 800d55e:	1c43      	adds	r3, r0, #1
 800d560:	d102      	bne.n	800d568 <_fstat_r+0x1c>
 800d562:	682b      	ldr	r3, [r5, #0]
 800d564:	b103      	cbz	r3, 800d568 <_fstat_r+0x1c>
 800d566:	6023      	str	r3, [r4, #0]
 800d568:	bd38      	pop	{r3, r4, r5, pc}
 800d56a:	bf00      	nop
 800d56c:	20005fd8 	.word	0x20005fd8

0800d570 <_isatty_r>:
 800d570:	b538      	push	{r3, r4, r5, lr}
 800d572:	4d06      	ldr	r5, [pc, #24]	; (800d58c <_isatty_r+0x1c>)
 800d574:	2300      	movs	r3, #0
 800d576:	4604      	mov	r4, r0
 800d578:	4608      	mov	r0, r1
 800d57a:	602b      	str	r3, [r5, #0]
 800d57c:	f7f4 f903 	bl	8001786 <_isatty>
 800d580:	1c43      	adds	r3, r0, #1
 800d582:	d102      	bne.n	800d58a <_isatty_r+0x1a>
 800d584:	682b      	ldr	r3, [r5, #0]
 800d586:	b103      	cbz	r3, 800d58a <_isatty_r+0x1a>
 800d588:	6023      	str	r3, [r4, #0]
 800d58a:	bd38      	pop	{r3, r4, r5, pc}
 800d58c:	20005fd8 	.word	0x20005fd8

0800d590 <_init>:
 800d590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d592:	bf00      	nop
 800d594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d596:	bc08      	pop	{r3}
 800d598:	469e      	mov	lr, r3
 800d59a:	4770      	bx	lr

0800d59c <_fini>:
 800d59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d59e:	bf00      	nop
 800d5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5a2:	bc08      	pop	{r3}
 800d5a4:	469e      	mov	lr, r3
 800d5a6:	4770      	bx	lr
