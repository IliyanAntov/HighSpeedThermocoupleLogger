
HS_thermocouple_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000126d0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  080128b0  080128b0  000228b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ef0  08012ef0  00030368  2**0
                  CONTENTS
  4 .ARM          00000000  08012ef0  08012ef0  00030368  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012ef0  08012ef0  00030368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ef0  08012ef0  00022ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012ef4  08012ef4  00022ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  08012ef8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f58  20000368  08013260  00030368  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  200052c0  08013260  000352c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030368  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030398  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020a4f  00000000  00000000  000303db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a5f  00000000  00000000  00050e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001da8  00000000  00000000  00055890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016c1  00000000  00000000  00057638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cfe9  00000000  00000000  00058cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002488c  00000000  00000000  00085ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00119c14  00000000  00000000  000aa56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009414  00000000  00000000  001c4184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001cd598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000368 	.word	0x20000368
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012898 	.word	0x08012898

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000036c 	.word	0x2000036c
 800021c:	08012898 	.word	0x08012898

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfe:	f002 f81e 	bl	8002d3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d02:	f000 f8af 	bl	8000e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d06:	f000 fbf1 	bl	80014ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000d0a:	f000 fbad 	bl	8001468 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d0e:	f000 f8f5 	bl	8000efc <MX_ADC1_Init>
  MX_ADC3_Init();
 8000d12:	f000 f9e9 	bl	80010e8 <MX_ADC3_Init>
  MX_ADC4_Init();
 8000d16:	f000 fa6d 	bl	80011f4 <MX_ADC4_Init>
  MX_TIM2_Init();
 8000d1a:	f000 fb59 	bl	80013d0 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8000d1e:	f00d f9d1 	bl	800e0c4 <MX_USB_Device_Init>
  MX_I2C3_Init();
 8000d22:	f000 fb15 	bl	8001350 <MX_I2C3_Init>
  MX_DAC1_Init();
 8000d26:	f000 fad7 	bl	80012d8 <MX_DAC1_Init>
  MX_ADC2_Init();
 8000d2a:	f000 f96b 	bl	8001004 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  ResetStates();
 8000d2e:	f001 faab 	bl	8002288 <ResetStates>

  int full_channels = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(prog_state == CFG_RECEIVED){
 8000d36:	4b42      	ldr	r3, [pc, #264]	; (8000e40 <main+0x148>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d101      	bne.n	8000d44 <main+0x4c>
		  InterpretConfig();
 8000d40:	f000 fc80 	bl	8001644 <InterpretConfig>
	  }
	  if(prog_state == CFG_INTERPRETED){
 8000d44:	4b3e      	ldr	r3, [pc, #248]	; (8000e40 <main+0x148>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d101      	bne.n	8000d52 <main+0x5a>
		  SetupMeasurement();
 8000d4e:	f000 fd9f 	bl	8001890 <SetupMeasurement>
	  }
	  if(prog_state == PARAMETERS_SET){
 8000d52:	4b3b      	ldr	r3, [pc, #236]	; (8000e40 <main+0x148>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	d101      	bne.n	8000d60 <main+0x68>
		  SendParameters();
 8000d5c:	f001 f87c 	bl	8001e58 <SendParameters>
	  }
	  if(prog_state == ARMED){
 8000d60:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <main+0x148>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	d106      	bne.n	8000d78 <main+0x80>
		  while(!measurement_activated);
 8000d6a:	bf00      	nop
 8000d6c:	4b35      	ldr	r3, [pc, #212]	; (8000e44 <main+0x14c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d0fb      	beq.n	8000d6c <main+0x74>
		  StartMeasurement();
 8000d74:	f001 f8da 	bl	8001f2c <StartMeasurement>
	  }
	  if(prog_state == MEASURING){
 8000d78:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <main+0x148>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b05      	cmp	r3, #5
 8000d80:	d14a      	bne.n	8000e18 <main+0x120>
		 full_channels = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
		 for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 8000d86:	2300      	movs	r3, #0
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	e02a      	b.n	8000de2 <main+0xea>
			 if(!channel_enabled_status[i])
 8000d8c:	4a2e      	ldr	r2, [pc, #184]	; (8000e48 <main+0x150>)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d020      	beq.n	8000dda <main+0xe2>
				 continue;
			 if(adc_states[i] == EMPTY)
 8000d98:	4a2c      	ldr	r2, [pc, #176]	; (8000e4c <main+0x154>)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d022      	beq.n	8000dea <main+0xf2>
				 break;

			 if(usb_transmition_state == EMPTY){
 8000da4:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <main+0x158>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d106      	bne.n	8000dba <main+0xc2>
				 usb_transmition_state = adc_states[i];
 8000dac:	4a27      	ldr	r2, [pc, #156]	; (8000e4c <main+0x154>)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	4413      	add	r3, r2
 8000db2:	781a      	ldrb	r2, [r3, #0]
 8000db4:	4b26      	ldr	r3, [pc, #152]	; (8000e50 <main+0x158>)
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e00b      	b.n	8000dd2 <main+0xda>
			 }
			 else if(adc_states[i] != usb_transmition_state){
 8000dba:	4a24      	ldr	r2, [pc, #144]	; (8000e4c <main+0x154>)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <main+0x158>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d003      	beq.n	8000dd2 <main+0xda>
				 transmission_error = 1;
 8000dca:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <main+0x15c>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	601a      	str	r2, [r3, #0]
				 break;
 8000dd0:	e00c      	b.n	8000dec <main+0xf4>
			 }

			 full_channels++;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	e000      	b.n	8000ddc <main+0xe4>
				 continue;
 8000dda:	bf00      	nop
		 for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	3301      	adds	r3, #1
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	ddd1      	ble.n	8000d8c <main+0x94>
 8000de8:	e000      	b.n	8000dec <main+0xf4>
				 break;
 8000dea:	bf00      	nop
		 }

		 if(full_channels == channel_enabled_count){
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <main+0x160>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d107      	bne.n	8000e06 <main+0x10e>
			 SendData(usb_transmition_state);
 8000df6:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <main+0x158>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 f988 	bl	8002110 <SendData>
			 usb_transmition_state = EMPTY;
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <main+0x158>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
		 }

		 if(current_packet_count >= target_packet_count) {
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <main+0x164>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <main+0x168>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	db02      	blt.n	8000e18 <main+0x120>
			 prog_state = REPORTING;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <main+0x148>)
 8000e14:	2206      	movs	r2, #6
 8000e16:	701a      	strb	r2, [r3, #0]
		 }
	  }
	  if(prog_state == REPORTING){
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <main+0x148>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d104      	bne.n	8000e2c <main+0x134>
		  SendTrasmissionReport();
 8000e22:	f001 fa03 	bl	800222c <SendTrasmissionReport>
		  prog_state = DONE;
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <main+0x148>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	701a      	strb	r2, [r3, #0]
	  }
	  if(prog_state == DONE){
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <main+0x148>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b07      	cmp	r3, #7
 8000e34:	f47f af7f 	bne.w	8000d36 <main+0x3e>

		  ResetStates();
 8000e38:	f001 fa26 	bl	8002288 <ResetStates>
	  if(prog_state == CFG_RECEIVED){
 8000e3c:	e77b      	b.n	8000d36 <main+0x3e>
 8000e3e:	bf00      	nop
 8000e40:	200027b4 	.word	0x200027b4
 8000e44:	200027e4 	.word	0x200027e4
 8000e48:	200027cc 	.word	0x200027cc
 8000e4c:	200027c4 	.word	0x200027c4
 8000e50:	200027c0 	.word	0x200027c0
 8000e54:	200027dc 	.word	0x200027dc
 8000e58:	200027c8 	.word	0x200027c8
 8000e5c:	20000768 	.word	0x20000768
 8000e60:	2000076c 	.word	0x2000076c

08000e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b094      	sub	sp, #80	; 0x50
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 0318 	add.w	r3, r7, #24
 8000e6e:	2238      	movs	r2, #56	; 0x38
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f00e fc6f 	bl	800f756 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e86:	2000      	movs	r0, #0
 8000e88:	f007 fd5c 	bl	8008944 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000e8c:	2321      	movs	r3, #33	; 0x21
 8000e8e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e94:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e96:	2301      	movs	r3, #1
 8000e98:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 78;
 8000ea6:	234e      	movs	r3, #78	; 0x4e
 8000ea8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000eaa:	2306      	movs	r3, #6
 8000eac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb6:	f107 0318 	add.w	r3, r7, #24
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f007 fdf6 	bl	8008aac <HAL_RCC_OscConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ec6:	f001 fa41 	bl	800234c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eca:	230f      	movs	r3, #15
 8000ecc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f008 f8f4 	bl	80090d0 <HAL_RCC_ClockConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000eee:	f001 fa2d 	bl	800234c <Error_Handler>
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3750      	adds	r7, #80	; 0x50
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	; 0x30
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2220      	movs	r2, #32
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f00e fc1e 	bl	800f756 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f1a:	4b38      	ldr	r3, [pc, #224]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f22:	4b36      	ldr	r3, [pc, #216]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f28:	4b34      	ldr	r3, [pc, #208]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f2e:	4b33      	ldr	r3, [pc, #204]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f34:	4b31      	ldr	r3, [pc, #196]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f3a:	4b30      	ldr	r3, [pc, #192]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f40:	4b2e      	ldr	r3, [pc, #184]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f42:	2204      	movs	r2, #4
 8000f44:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f46:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f4c:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f52:	4b2a      	ldr	r3, [pc, #168]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f58:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000f60:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f62:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f68:	4b24      	ldr	r3, [pc, #144]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f6e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f70:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f78:	4b20      	ldr	r3, [pc, #128]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f88:	2210      	movs	r2, #16
 8000f8a:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f8e:	2220      	movs	r2, #32
 8000f90:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000f92:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f9e:	4817      	ldr	r0, [pc, #92]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000fa0:	f002 fa18 	bl	80033d4 <HAL_ADC_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000faa:	f001 f9cf 	bl	800234c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4810      	ldr	r0, [pc, #64]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000fba:	f003 fdb3 	bl	8004b24 <HAL_ADCEx_MultiModeConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000fc4:	f001 f9c2 	bl	800234c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <MX_ADC1_Init+0x104>)
 8000fca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fcc:	2306      	movs	r3, #6
 8000fce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fd4:	237f      	movs	r3, #127	; 0x7f
 8000fd6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000fe6:	f002 fe63 	bl	8003cb0 <HAL_ADC_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000ff0:	f001 f9ac 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	3730      	adds	r7, #48	; 0x30
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000384 	.word	0x20000384
 8001000:	04300002 	.word	0x04300002

08001004 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800100a:	463b      	mov	r3, r7
 800100c:	2220      	movs	r2, #32
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f00e fba0 	bl	800f756 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001016:	4b31      	ldr	r3, [pc, #196]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001018:	4a31      	ldr	r2, [pc, #196]	; (80010e0 <MX_ADC2_Init+0xdc>)
 800101a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800101c:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <MX_ADC2_Init+0xd8>)
 800101e:	2200      	movs	r2, #0
 8001020:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001022:	4b2e      	ldr	r3, [pc, #184]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001028:	4b2c      	ldr	r3, [pc, #176]	; (80010dc <MX_ADC2_Init+0xd8>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800102e:	4b2b      	ldr	r3, [pc, #172]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001034:	4b29      	ldr	r3, [pc, #164]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800103a:	4b28      	ldr	r3, [pc, #160]	; (80010dc <MX_ADC2_Init+0xd8>)
 800103c:	2204      	movs	r2, #4
 800103e:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001040:	4b26      	ldr	r3, [pc, #152]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001042:	2200      	movs	r2, #0
 8001044:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001046:	4b25      	ldr	r3, [pc, #148]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001048:	2200      	movs	r2, #0
 800104a:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800104c:	4b23      	ldr	r3, [pc, #140]	; (80010dc <MX_ADC2_Init+0xd8>)
 800104e:	2201      	movs	r2, #1
 8001050:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001052:	4b22      	ldr	r3, [pc, #136]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <MX_ADC2_Init+0xd8>)
 800105c:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8001060:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001064:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001068:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <MX_ADC2_Init+0xd8>)
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001074:	2200      	movs	r2, #0
 8001076:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <MX_ADC2_Init+0xd8>)
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001082:	2210      	movs	r2, #16
 8001084:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001088:	2220      	movs	r2, #32
 800108a:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <MX_ADC2_Init+0xd8>)
 800108e:	2200      	movs	r2, #0
 8001090:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001092:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001094:	2201      	movs	r2, #1
 8001096:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001098:	4810      	ldr	r0, [pc, #64]	; (80010dc <MX_ADC2_Init+0xd8>)
 800109a:	f002 f99b 	bl	80033d4 <HAL_ADC_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 80010a4:	f001 f952 	bl	800234c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_ADC2_Init+0xe0>)
 80010aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ac:	2306      	movs	r3, #6
 80010ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010b4:	237f      	movs	r3, #127	; 0x7f
 80010b6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010b8:	2304      	movs	r3, #4
 80010ba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010c0:	463b      	mov	r3, r7
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_ADC2_Init+0xd8>)
 80010c6:	f002 fdf3 	bl	8003cb0 <HAL_ADC_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 80010d0:	f001 f93c 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200003f0 	.word	0x200003f0
 80010e0:	50000100 	.word	0x50000100
 80010e4:	0c900008 	.word	0x0c900008

080010e8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2220      	movs	r2, #32
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f00e fb28 	bl	800f756 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001106:	4b38      	ldr	r3, [pc, #224]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001108:	4a38      	ldr	r2, [pc, #224]	; (80011ec <MX_ADC3_Init+0x104>)
 800110a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800110c:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <MX_ADC3_Init+0x100>)
 800110e:	2200      	movs	r2, #0
 8001110:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001112:	4b35      	ldr	r3, [pc, #212]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001118:	4b33      	ldr	r3, [pc, #204]	; (80011e8 <MX_ADC3_Init+0x100>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 800111e:	4b32      	ldr	r3, [pc, #200]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001124:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001126:	2200      	movs	r2, #0
 8001128:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112a:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <MX_ADC3_Init+0x100>)
 800112c:	2204      	movs	r2, #4
 800112e:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001130:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001132:	2200      	movs	r2, #0
 8001134:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001136:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001138:	2200      	movs	r2, #0
 800113a:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800113c:	4b2a      	ldr	r3, [pc, #168]	; (80011e8 <MX_ADC3_Init+0x100>)
 800113e:	2201      	movs	r2, #1
 8001140:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001142:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800114a:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <MX_ADC3_Init+0x100>)
 800114c:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8001150:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001152:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001154:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001158:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800115a:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <MX_ADC3_Init+0x100>)
 800115c:	2201      	movs	r2, #1
 800115e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001164:	2200      	movs	r2, #0
 8001166:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_ADC3_Init+0x100>)
 800116a:	2201      	movs	r2, #1
 800116c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001172:	2210      	movs	r2, #16
 8001174:	645a      	str	r2, [r3, #68]	; 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001178:	2220      	movs	r2, #32
 800117a:	649a      	str	r2, [r3, #72]	; 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_ADC3_Init+0x100>)
 800117e:	2200      	movs	r2, #0
 8001180:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001184:	2201      	movs	r2, #1
 8001186:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001188:	4817      	ldr	r0, [pc, #92]	; (80011e8 <MX_ADC3_Init+0x100>)
 800118a:	f002 f923 	bl	80033d4 <HAL_ADC_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001194:	f001 f8da 	bl	800234c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800119c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a0:	4619      	mov	r1, r3
 80011a2:	4811      	ldr	r0, [pc, #68]	; (80011e8 <MX_ADC3_Init+0x100>)
 80011a4:	f003 fcbe 	bl	8004b24 <HAL_ADCEx_MultiModeConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_ADC3_Init+0xca>
  {
    Error_Handler();
 80011ae:	f001 f8cd 	bl	800234c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_ADC3_Init+0x108>)
 80011b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b6:	2306      	movs	r3, #6
 80011b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011be:	237f      	movs	r3, #127	; 0x7f
 80011c0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011c2:	2304      	movs	r3, #4
 80011c4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	4619      	mov	r1, r3
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <MX_ADC3_Init+0x100>)
 80011d0:	f002 fd6e 	bl	8003cb0 <HAL_ADC_ConfigChannel>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_ADC3_Init+0xf6>
  {
    Error_Handler();
 80011da:	f001 f8b7 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	3730      	adds	r7, #48	; 0x30
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000045c 	.word	0x2000045c
 80011ec:	50000400 	.word	0x50000400
 80011f0:	04300002 	.word	0x04300002

080011f4 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011fa:	463b      	mov	r3, r7
 80011fc:	2220      	movs	r2, #32
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f00e faa8 	bl	800f756 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001206:	4b31      	ldr	r3, [pc, #196]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001208:	4a31      	ldr	r2, [pc, #196]	; (80012d0 <MX_ADC4_Init+0xdc>)
 800120a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800120c:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <MX_ADC4_Init+0xd8>)
 800120e:	2200      	movs	r2, #0
 8001210:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001218:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <MX_ADC4_Init+0xd8>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001224:	4b29      	ldr	r3, [pc, #164]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800122a:	4b28      	ldr	r3, [pc, #160]	; (80012cc <MX_ADC4_Init+0xd8>)
 800122c:	2204      	movs	r2, #4
 800122e:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001230:	4b26      	ldr	r3, [pc, #152]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001232:	2200      	movs	r2, #0
 8001234:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8001236:	4b25      	ldr	r3, [pc, #148]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001238:	2200      	movs	r2, #0
 800123a:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <MX_ADC4_Init+0xd8>)
 800123e:	2201      	movs	r2, #1
 8001240:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <MX_ADC4_Init+0xd8>)
 800124c:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8001250:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001252:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001254:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001258:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <MX_ADC4_Init+0xd8>)
 800125c:	2201      	movs	r2, #1
 800125e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001264:	2200      	movs	r2, #0
 8001266:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = ENABLE;
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <MX_ADC4_Init+0xd8>)
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc4.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001272:	2210      	movs	r2, #16
 8001274:	645a      	str	r2, [r3, #68]	; 0x44
  hadc4.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001278:	2220      	movs	r2, #32
 800127a:	649a      	str	r2, [r3, #72]	; 0x48
  hadc4.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_ADC4_Init+0xd8>)
 800127e:	2200      	movs	r2, #0
 8001280:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc4.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001284:	2201      	movs	r2, #1
 8001286:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001288:	4810      	ldr	r0, [pc, #64]	; (80012cc <MX_ADC4_Init+0xd8>)
 800128a:	f002 f8a3 	bl	80033d4 <HAL_ADC_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ADC4_Init+0xa4>
  {
    Error_Handler();
 8001294:	f001 f85a 	bl	800234c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001298:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_ADC4_Init+0xe0>)
 800129a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800129c:	2306      	movs	r3, #6
 800129e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012a4:	237f      	movs	r3, #127	; 0x7f
 80012a6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012a8:	2304      	movs	r3, #4
 80012aa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_ADC4_Init+0xd8>)
 80012b6:	f002 fcfb 	bl	8003cb0 <HAL_ADC_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_ADC4_Init+0xd0>
  {
    Error_Handler();
 80012c0:	f001 f844 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200004c8 	.word	0x200004c8
 80012d0:	50000500 	.word	0x50000500
 80012d4:	14f00020 	.word	0x14f00020

080012d8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08c      	sub	sp, #48	; 0x30
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012de:	463b      	mov	r3, r7
 80012e0:	2230      	movs	r2, #48	; 0x30
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f00e fa36 	bl	800f756 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <MX_DAC1_Init+0x70>)
 80012ec:	4a17      	ldr	r2, [pc, #92]	; (800134c <MX_DAC1_Init+0x74>)
 80012ee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80012f0:	4815      	ldr	r0, [pc, #84]	; (8001348 <MX_DAC1_Init+0x70>)
 80012f2:	f003 fe2e 	bl	8004f52 <HAL_DAC_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80012fc:	f001 f826 	bl	800234c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001300:	2302      	movs	r3, #2
 8001302:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800131c:	2301      	movs	r3, #1
 800131e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_USER;
 8001320:	2301      	movs	r3, #1
 8001322:	61fb      	str	r3, [r7, #28]
  sConfig.DAC_TrimmingValue = 1;
 8001324:	2301      	movs	r3, #1
 8001326:	623b      	str	r3, [r7, #32]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001328:	463b      	mov	r3, r7
 800132a:	2200      	movs	r2, #0
 800132c:	4619      	mov	r1, r3
 800132e:	4806      	ldr	r0, [pc, #24]	; (8001348 <MX_DAC1_Init+0x70>)
 8001330:	f003 fecc 	bl	80050cc <HAL_DAC_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_DAC1_Init+0x66>
  {
    Error_Handler();
 800133a:	f001 f807 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	3730      	adds	r7, #48	; 0x30
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200006b4 	.word	0x200006b4
 800134c:	50000800 	.word	0x50000800

08001350 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_I2C3_Init+0x74>)
 8001356:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <MX_I2C3_Init+0x78>)
 8001358:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x40707EB4;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <MX_I2C3_Init+0x74>)
 800135c:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <MX_I2C3_Init+0x7c>)
 800135e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 144;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_I2C3_Init+0x74>)
 8001362:	2290      	movs	r2, #144	; 0x90
 8001364:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_I2C3_Init+0x74>)
 8001368:	2201      	movs	r2, #1
 800136a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_I2C3_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_I2C3_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_I2C3_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_I2C3_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_I2C3_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800138a:	480e      	ldr	r0, [pc, #56]	; (80013c4 <MX_I2C3_Init+0x74>)
 800138c:	f004 ff83 	bl	8006296 <HAL_I2C_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001396:	f000 ffd9 	bl	800234c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800139a:	2100      	movs	r1, #0
 800139c:	4809      	ldr	r0, [pc, #36]	; (80013c4 <MX_I2C3_Init+0x74>)
 800139e:	f005 fd05 	bl	8006dac <HAL_I2CEx_ConfigAnalogFilter>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80013a8:	f000 ffd0 	bl	800234c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80013ac:	2100      	movs	r1, #0
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_I2C3_Init+0x74>)
 80013b0:	f005 fd47 	bl	8006e42 <HAL_I2CEx_ConfigDigitalFilter>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80013ba:	f000 ffc7 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200006c8 	.word	0x200006c8
 80013c8:	40007800 	.word	0x40007800
 80013cc:	40707eb4 	.word	0x40707eb4

080013d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ee:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <MX_TIM2_Init+0x94>)
 80013f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 156 - 1;
 80013f6:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <MX_TIM2_Init+0x94>)
 80013f8:	229b      	movs	r2, #155	; 0x9b
 80013fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <MX_TIM2_Init+0x94>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <MX_TIM2_Init+0x94>)
 8001404:	2209      	movs	r2, #9
 8001406:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <MX_TIM2_Init+0x94>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <MX_TIM2_Init+0x94>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001414:	4813      	ldr	r0, [pc, #76]	; (8001464 <MX_TIM2_Init+0x94>)
 8001416:	f008 fa99 	bl	800994c <HAL_TIM_Base_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001420:	f000 ff94 	bl	800234c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001428:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	4619      	mov	r1, r3
 8001430:	480c      	ldr	r0, [pc, #48]	; (8001464 <MX_TIM2_Init+0x94>)
 8001432:	f008 fb8b 	bl	8009b4c <HAL_TIM_ConfigClockSource>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800143c:	f000 ff86 	bl	800234c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001440:	2320      	movs	r3, #32
 8001442:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	4619      	mov	r1, r3
 800144c:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_TIM2_Init+0x94>)
 800144e:	f008 fde3 	bl	800a018 <HAL_TIMEx_MasterConfigSynchronization>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001458:	f000 ff78 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800145c:	bf00      	nop
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	2000071c 	.word	0x2000071c

08001468 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800146e:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <MX_DMA_Init+0x80>)
 8001470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001472:	4a1d      	ldr	r2, [pc, #116]	; (80014e8 <MX_DMA_Init+0x80>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6493      	str	r3, [r2, #72]	; 0x48
 800147a:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <MX_DMA_Init+0x80>)
 800147c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <MX_DMA_Init+0x80>)
 8001488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800148a:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <MX_DMA_Init+0x80>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6493      	str	r3, [r2, #72]	; 0x48
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <MX_DMA_Init+0x80>)
 8001494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	200b      	movs	r0, #11
 80014a4:	f003 fd21 	bl	8004eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014a8:	200b      	movs	r0, #11
 80014aa:	f003 fd38 	bl	8004f1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	200c      	movs	r0, #12
 80014b4:	f003 fd19 	bl	8004eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014b8:	200c      	movs	r0, #12
 80014ba:	f003 fd30 	bl	8004f1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	200d      	movs	r0, #13
 80014c4:	f003 fd11 	bl	8004eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80014c8:	200d      	movs	r0, #13
 80014ca:	f003 fd28 	bl	8004f1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	200e      	movs	r0, #14
 80014d4:	f003 fd09 	bl	8004eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80014d8:	200e      	movs	r0, #14
 80014da:	f003 fd20 	bl	8004f1e <HAL_NVIC_EnableIRQ>

}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000

080014ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001502:	4b4d      	ldr	r3, [pc, #308]	; (8001638 <MX_GPIO_Init+0x14c>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	4a4c      	ldr	r2, [pc, #304]	; (8001638 <MX_GPIO_Init+0x14c>)
 8001508:	f043 0320 	orr.w	r3, r3, #32
 800150c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150e:	4b4a      	ldr	r3, [pc, #296]	; (8001638 <MX_GPIO_Init+0x14c>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	f003 0320 	and.w	r3, r3, #32
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	4b47      	ldr	r3, [pc, #284]	; (8001638 <MX_GPIO_Init+0x14c>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	4a46      	ldr	r2, [pc, #280]	; (8001638 <MX_GPIO_Init+0x14c>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001526:	4b44      	ldr	r3, [pc, #272]	; (8001638 <MX_GPIO_Init+0x14c>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <MX_GPIO_Init+0x14c>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	4a40      	ldr	r2, [pc, #256]	; (8001638 <MX_GPIO_Init+0x14c>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153e:	4b3e      	ldr	r3, [pc, #248]	; (8001638 <MX_GPIO_Init+0x14c>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	4b3b      	ldr	r3, [pc, #236]	; (8001638 <MX_GPIO_Init+0x14c>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	4a3a      	ldr	r2, [pc, #232]	; (8001638 <MX_GPIO_Init+0x14c>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001556:	4b38      	ldr	r3, [pc, #224]	; (8001638 <MX_GPIO_Init+0x14c>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ERRATA_FIX1_Pin|ERRATA_FIX2_Pin|ERRATA_FIX3_Pin|ERRATA_FIX4_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 41d8 	mov.w	r1, #27648	; 0x6c00
 8001568:	4834      	ldr	r0, [pc, #208]	; (800163c <MX_GPIO_Init+0x150>)
 800156a:	f004 fe59 	bl	8006220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IND_LED_R_Pin|IND_LED_G_Pin|IND_LED_B_Pin, GPIO_PIN_SET);
 800156e:	2201      	movs	r2, #1
 8001570:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001574:	4832      	ldr	r0, [pc, #200]	; (8001640 <MX_GPIO_Init+0x154>)
 8001576:	f004 fe53 	bl	8006220 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ERRATA_FIX1_Pin ERRATA_FIX2_Pin ERRATA_FIX3_Pin ERRATA_FIX4_Pin */
  GPIO_InitStruct.Pin = ERRATA_FIX1_Pin|ERRATA_FIX2_Pin|ERRATA_FIX3_Pin|ERRATA_FIX4_Pin;
 800157a:	f44f 43d8 	mov.w	r3, #27648	; 0x6c00
 800157e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	482a      	ldr	r0, [pc, #168]	; (800163c <MX_GPIO_Init+0x150>)
 8001594:	f004 fbe0 	bl	8005d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_ALERT_Pin */
  GPIO_InitStruct.Pin = TEMP_ALERT_Pin;
 8001598:	f44f 7380 	mov.w	r3, #256	; 0x100
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_ALERT_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b0:	f004 fbd2 	bl	8005d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : IND_LED_R_Pin IND_LED_G_Pin IND_LED_B_Pin */
  GPIO_InitStruct.Pin = IND_LED_R_Pin|IND_LED_G_Pin|IND_LED_B_Pin;
 80015b4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	481c      	ldr	r0, [pc, #112]	; (8001640 <MX_GPIO_Init+0x154>)
 80015ce:	f004 fbc3 	bl	8005d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_SHORT_Pin */
  GPIO_InitStruct.Pin = TRIG_SHORT_Pin;
 80015d2:	2320      	movs	r3, #32
 80015d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_SHORT_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	4815      	ldr	r0, [pc, #84]	; (800163c <MX_GPIO_Init+0x150>)
 80015e8:	f004 fbb6 	bl	8005d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_EXT_2_Pin */
  GPIO_InitStruct.Pin = TRIG_EXT_2_Pin;
 80015ec:	2340      	movs	r3, #64	; 0x40
 80015ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_EXT_2_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	480e      	ldr	r0, [pc, #56]	; (800163c <MX_GPIO_Init+0x150>)
 8001602:	f004 fba9 	bl	8005d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_EXT_1_Pin */
  GPIO_InitStruct.Pin = TRIG_EXT_1_Pin;
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800160a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800160e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001610:	2302      	movs	r3, #2
 8001612:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_EXT_1_GPIO_Port, &GPIO_InitStruct);
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4619      	mov	r1, r3
 800161a:	4808      	ldr	r0, [pc, #32]	; (800163c <MX_GPIO_Init+0x150>)
 800161c:	f004 fb9c 	bl	8005d58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	2017      	movs	r0, #23
 8001626:	f003 fc60 	bl	8004eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800162a:	2017      	movs	r0, #23
 800162c:	f003 fc77 	bl	8004f1e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001630:	bf00      	nop
 8001632:	3728      	adds	r7, #40	; 0x28
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40021000 	.word	0x40021000
 800163c:	48000400 	.word	0x48000400
 8001640:	48000800 	.word	0x48000800

08001644 <InterpretConfig>:

/* USER CODE BEGIN 4 */

int InterpretConfig(void) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b0a6      	sub	sp, #152	; 0x98
 8001648:	af00      	add	r7, sp, #0
	char variable_name[CFG_VAR_SIZE];
	char variable_value[CFG_VAR_SIZE];
	memset(variable_name, 0, sizeof(variable_name));
 800164a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800164e:	2240      	movs	r2, #64	; 0x40
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f00e f87f 	bl	800f756 <memset>
	memset(variable_value, 0, sizeof(variable_value));
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	2240      	movs	r2, #64	; 0x40
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f00e f878 	bl	800f756 <memset>
	int variable_name_indexes[2] = {0, 0};
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
	int variable_value_indexes[2] = {0, 0};
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
	char reading_status = 'n';
 8001676:	236e      	movs	r3, #110	; 0x6e
 8001678:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	for(int i = 0; i < USB_RX_BUFFER_SIZE; i++){
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001682:	e077      	b.n	8001774 <InterpretConfig+0x130>
		if(rx_buffer[i] == '\0'){
 8001684:	4a42      	ldr	r2, [pc, #264]	; (8001790 <InterpretConfig+0x14c>)
 8001686:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800168a:	4413      	add	r3, r2
 800168c:	f993 3000 	ldrsb.w	r3, [r3]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d074      	beq.n	800177e <InterpretConfig+0x13a>
			break;
		}
		// Reading the variable name
		if(reading_status == 'n'){
 8001694:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001698:	2b6e      	cmp	r3, #110	; 0x6e
 800169a:	d112      	bne.n	80016c2 <InterpretConfig+0x7e>
			if(rx_buffer[i] == ':') {
 800169c:	4a3c      	ldr	r2, [pc, #240]	; (8001790 <InterpretConfig+0x14c>)
 800169e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016a2:	4413      	add	r3, r2
 80016a4:	f993 3000 	ldrsb.w	r3, [r3]
 80016a8:	2b3a      	cmp	r3, #58	; 0x3a
 80016aa:	d15e      	bne.n	800176a <InterpretConfig+0x126>
				variable_name_indexes[1] = i;
 80016ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016b0:	60fb      	str	r3, [r7, #12]
				variable_value_indexes[0] = i+1;
 80016b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016b6:	3301      	adds	r3, #1
 80016b8:	603b      	str	r3, [r7, #0]
				reading_status = 'v';
 80016ba:	2376      	movs	r3, #118	; 0x76
 80016bc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80016c0:	e053      	b.n	800176a <InterpretConfig+0x126>
			}
		}
		// Reading the variable value
		else if(reading_status == 'v'){
 80016c2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80016c6:	2b76      	cmp	r3, #118	; 0x76
 80016c8:	d14f      	bne.n	800176a <InterpretConfig+0x126>
			if(rx_buffer[i] == ';') {
 80016ca:	4a31      	ldr	r2, [pc, #196]	; (8001790 <InterpretConfig+0x14c>)
 80016cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016d0:	4413      	add	r3, r2
 80016d2:	f993 3000 	ldrsb.w	r3, [r3]
 80016d6:	2b3b      	cmp	r3, #59	; 0x3b
 80016d8:	d147      	bne.n	800176a <InterpretConfig+0x126>
				variable_value_indexes[1] = i;
 80016da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016de:	607b      	str	r3, [r7, #4]

				strncpy(variable_name, ((char*)rx_buffer + variable_name_indexes[0]), (variable_name_indexes[1] - variable_name_indexes[0]));
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <InterpretConfig+0x14c>)
 80016e6:	18d1      	adds	r1, r2, r3
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	461a      	mov	r2, r3
 80016f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00e f836 	bl	800f766 <strncpy>
				variable_name[variable_name_indexes[1] + 1] = '\0';
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3301      	adds	r3, #1
 80016fe:	3398      	adds	r3, #152	; 0x98
 8001700:	443b      	add	r3, r7
 8001702:	2200      	movs	r2, #0
 8001704:	f803 2c48 	strb.w	r2, [r3, #-72]
				strncpy(variable_value, ((char*)rx_buffer + variable_value_indexes[0]), (variable_value_indexes[1] - variable_value_indexes[0]));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	4b20      	ldr	r3, [pc, #128]	; (8001790 <InterpretConfig+0x14c>)
 800170e:	18d1      	adds	r1, r2, r3
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	461a      	mov	r2, r3
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	4618      	mov	r0, r3
 800171e:	f00e f822 	bl	800f766 <strncpy>
				variable_value[variable_value_indexes[1] + 1] = '\0';
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3301      	adds	r3, #1
 8001726:	3398      	adds	r3, #152	; 0x98
 8001728:	443b      	add	r3, r7
 800172a:	2200      	movs	r2, #0
 800172c:	f803 2c88 	strb.w	r2, [r3, #-136]

				InterpretVariable(variable_name, variable_value);
 8001730:	f107 0210 	add.w	r2, r7, #16
 8001734:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001738:	4611      	mov	r1, r2
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f82c 	bl	8001798 <InterpretVariable>
				memset(variable_name, 0, sizeof(variable_name));
 8001740:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001744:	2240      	movs	r2, #64	; 0x40
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f00e f804 	bl	800f756 <memset>
				memset(variable_value, 0, sizeof(variable_value));
 800174e:	f107 0310 	add.w	r3, r7, #16
 8001752:	2240      	movs	r2, #64	; 0x40
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f00d fffd 	bl	800f756 <memset>
				variable_name_indexes[0] = i + 1;
 800175c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001760:	3301      	adds	r3, #1
 8001762:	60bb      	str	r3, [r7, #8]
				reading_status = 'n';
 8001764:	236e      	movs	r3, #110	; 0x6e
 8001766:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	for(int i = 0; i < USB_RX_BUFFER_SIZE; i++){
 800176a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800176e:	3301      	adds	r3, #1
 8001770:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001774:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001778:	2bff      	cmp	r3, #255	; 0xff
 800177a:	dd83      	ble.n	8001684 <InterpretConfig+0x40>
 800177c:	e000      	b.n	8001780 <InterpretConfig+0x13c>
			break;
 800177e:	bf00      	nop
			}
		}
	}

	prog_state = CFG_INTERPRETED;
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <InterpretConfig+0x150>)
 8001782:	2202      	movs	r2, #2
 8001784:	701a      	strb	r2, [r3, #0]
	return 1;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	3798      	adds	r7, #152	; 0x98
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	200026b4 	.word	0x200026b4
 8001794:	200027b4 	.word	0x200027b4

08001798 <InterpretVariable>:

int InterpretVariable(char name[CFG_VAR_SIZE], char value[CFG_VAR_SIZE]) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
	if(strcmp(name, "RecLen") == 0) {
 80017a2:	4931      	ldr	r1, [pc, #196]	; (8001868 <InterpretVariable+0xd0>)
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7fe fd3b 	bl	8000220 <strcmp>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d107      	bne.n	80017c0 <InterpretVariable+0x28>
		record_length_ms = (uint16_t)atoi(value);
 80017b0:	6838      	ldr	r0, [r7, #0]
 80017b2:	f00d f9b5 	bl	800eb20 <atoi>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	4b2c      	ldr	r3, [pc, #176]	; (800186c <InterpretVariable+0xd4>)
 80017bc:	801a      	strh	r2, [r3, #0]
 80017be:	e04e      	b.n	800185e <InterpretVariable+0xc6>
	}
	else if(strcmp(name, "RecInt") == 0) {
 80017c0:	492b      	ldr	r1, [pc, #172]	; (8001870 <InterpretVariable+0xd8>)
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7fe fd2c 	bl	8000220 <strcmp>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d107      	bne.n	80017de <InterpretVariable+0x46>
		record_interval_us = (uint16_t)atoi(value);
 80017ce:	6838      	ldr	r0, [r7, #0]
 80017d0:	f00d f9a6 	bl	800eb20 <atoi>
 80017d4:	4603      	mov	r3, r0
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	4b26      	ldr	r3, [pc, #152]	; (8001874 <InterpretVariable+0xdc>)
 80017da:	801a      	strh	r2, [r3, #0]
 80017dc:	e03f      	b.n	800185e <InterpretVariable+0xc6>
	}
	else if(strcmp(name, "TcType") == 0) {
 80017de:	4926      	ldr	r1, [pc, #152]	; (8001878 <InterpretVariable+0xe0>)
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7fe fd1d 	bl	8000220 <strcmp>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d104      	bne.n	80017f6 <InterpretVariable+0x5e>
		tc_type = value[0];
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	4b22      	ldr	r3, [pc, #136]	; (800187c <InterpretVariable+0xe4>)
 80017f2:	701a      	strb	r2, [r3, #0]
 80017f4:	e033      	b.n	800185e <InterpretVariable+0xc6>
	}
	else if(strcmp(name, "EnChan") == 0) {
 80017f6:	4922      	ldr	r1, [pc, #136]	; (8001880 <InterpretVariable+0xe8>)
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7fe fd11 	bl	8000220 <strcmp>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d12c      	bne.n	800185e <InterpretVariable+0xc6>
		int channel_index = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
		char *channel_status = strtok(value, "|");
 8001808:	491e      	ldr	r1, [pc, #120]	; (8001884 <InterpretVariable+0xec>)
 800180a:	6838      	ldr	r0, [r7, #0]
 800180c:	f00d ffbe 	bl	800f78c <strtok>
 8001810:	6138      	str	r0, [r7, #16]

		while(channel_status != NULL) {
 8001812:	e00f      	b.n	8001834 <InterpretVariable+0x9c>
			channel_enabled_status[channel_index] = channel_status[0] - '0';
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	3b30      	subs	r3, #48	; 0x30
 800181a:	4619      	mov	r1, r3
 800181c:	4a1a      	ldr	r2, [pc, #104]	; (8001888 <InterpretVariable+0xf0>)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			channel_status = strtok(NULL, "|");
 8001824:	4917      	ldr	r1, [pc, #92]	; (8001884 <InterpretVariable+0xec>)
 8001826:	2000      	movs	r0, #0
 8001828:	f00d ffb0 	bl	800f78c <strtok>
 800182c:	6138      	str	r0, [r7, #16]
			channel_index++;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3301      	adds	r3, #1
 8001832:	617b      	str	r3, [r7, #20]
		while(channel_status != NULL) {
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1ec      	bne.n	8001814 <InterpretVariable+0x7c>
		}

		for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	e00b      	b.n	8001858 <InterpretVariable+0xc0>
			channel_enabled_count += channel_enabled_status[i];
 8001840:	4a11      	ldr	r2, [pc, #68]	; (8001888 <InterpretVariable+0xf0>)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <InterpretVariable+0xf4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4413      	add	r3, r2
 800184e:	4a0f      	ldr	r2, [pc, #60]	; (800188c <InterpretVariable+0xf4>)
 8001850:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3301      	adds	r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b03      	cmp	r3, #3
 800185c:	ddf0      	ble.n	8001840 <InterpretVariable+0xa8>
		}
	}

	return 1;
 800185e:	2301      	movs	r3, #1
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	080128b0 	.word	0x080128b0
 800186c:	20000004 	.word	0x20000004
 8001870:	080128b8 	.word	0x080128b8
 8001874:	20000006 	.word	0x20000006
 8001878:	080128c0 	.word	0x080128c0
 800187c:	20000008 	.word	0x20000008
 8001880:	080128c8 	.word	0x080128c8
 8001884:	080128d0 	.word	0x080128d0
 8001888:	200027cc 	.word	0x200027cc
 800188c:	200027c8 	.word	0x200027c8

08001890 <SetupMeasurement>:

int SetupMeasurement(void){
 8001890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001894:	b09c      	sub	sp, #112	; 0x70
 8001896:	af04      	add	r7, sp, #16
	// > Set the correct analog reference voltage and get the relevant coefficients

	const double *used_coefficients;
	uint8_t coefficients_count;
	if(tc_type == 'E') {
 8001898:	4b64      	ldr	r3, [pc, #400]	; (8001a2c <SetupMeasurement+0x19c>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b45      	cmp	r3, #69	; 0x45
 800189e:	d108      	bne.n	80018b2 <SetupMeasurement+0x22>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2); // 2.9V
 80018a0:	2020      	movs	r0, #32
 80018a2:	f001 fadf 	bl	8002e64 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		used_coefficients = type_e_coefficients;
 80018a6:	4b62      	ldr	r3, [pc, #392]	; (8001a30 <SetupMeasurement+0x1a0>)
 80018a8:	65fb      	str	r3, [r7, #92]	; 0x5c
		coefficients_count = type_e_coefficients_count;
 80018aa:	230e      	movs	r3, #14
 80018ac:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80018b0:	e025      	b.n	80018fe <SetupMeasurement+0x6e>
	}
	else if(tc_type == 'J') {
 80018b2:	4b5e      	ldr	r3, [pc, #376]	; (8001a2c <SetupMeasurement+0x19c>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b4a      	cmp	r3, #74	; 0x4a
 80018b8:	d108      	bne.n	80018cc <SetupMeasurement+0x3c>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1); // 2.5V
 80018ba:	2010      	movs	r0, #16
 80018bc:	f001 fad2 	bl	8002e64 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		used_coefficients = type_j_coefficients;
 80018c0:	4b5c      	ldr	r3, [pc, #368]	; (8001a34 <SetupMeasurement+0x1a4>)
 80018c2:	65fb      	str	r3, [r7, #92]	; 0x5c
		coefficients_count = type_j_coefficients_count;
 80018c4:	2309      	movs	r3, #9
 80018c6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80018ca:	e018      	b.n	80018fe <SetupMeasurement+0x6e>
	}
	else if(tc_type == 'K') {
 80018cc:	4b57      	ldr	r3, [pc, #348]	; (8001a2c <SetupMeasurement+0x19c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b4b      	cmp	r3, #75	; 0x4b
 80018d2:	d108      	bne.n	80018e6 <SetupMeasurement+0x56>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0); // 2.048V
 80018d4:	2000      	movs	r0, #0
 80018d6:	f001 fac5 	bl	8002e64 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		used_coefficients = type_k_coefficients;
 80018da:	4b57      	ldr	r3, [pc, #348]	; (8001a38 <SetupMeasurement+0x1a8>)
 80018dc:	65fb      	str	r3, [r7, #92]	; 0x5c
		coefficients_count = type_k_coefficients_count;
 80018de:	230b      	movs	r3, #11
 80018e0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80018e4:	e00b      	b.n	80018fe <SetupMeasurement+0x6e>
	}
	else if(tc_type == 'T') {
 80018e6:	4b51      	ldr	r3, [pc, #324]	; (8001a2c <SetupMeasurement+0x19c>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b54      	cmp	r3, #84	; 0x54
 80018ec:	d107      	bne.n	80018fe <SetupMeasurement+0x6e>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0); // 2.048V
 80018ee:	2000      	movs	r0, #0
 80018f0:	f001 fab8 	bl	8002e64 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		used_coefficients = type_t_coefficients;
 80018f4:	4b51      	ldr	r3, [pc, #324]	; (8001a3c <SetupMeasurement+0x1ac>)
 80018f6:	65fb      	str	r3, [r7, #92]	; 0x5c
		coefficients_count = type_t_coefficients_count;
 80018f8:	230f      	movs	r3, #15
 80018fa:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	}

	// Measure the actual analog reference voltage
	HAL_Delay(100);
 80018fe:	2064      	movs	r0, #100	; 0x64
 8001900:	f001 fa8e 	bl	8002e20 <HAL_Delay>
	analog_reference_voltage = MeasureVref();
 8001904:	f000 f9e4 	bl	8001cd0 <MeasureVref>
 8001908:	eef0 7a40 	vmov.f32	s15, s0
 800190c:	4b4c      	ldr	r3, [pc, #304]	; (8001a40 <SetupMeasurement+0x1b0>)
 800190e:	edc3 7a00 	vstr	s15, [r3]
	adc_states[0] = EMPTY;
 8001912:	4b4c      	ldr	r3, [pc, #304]	; (8001a44 <SetupMeasurement+0x1b4>)
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]

	// > Calculate and set ADC sync timer
	__HAL_TIM_SET_AUTORELOAD(&htim2, record_interval_us - 1);
 8001918:	4b4b      	ldr	r3, [pc, #300]	; (8001a48 <SetupMeasurement+0x1b8>)
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	1e5a      	subs	r2, r3, #1
 800191e:	4b4b      	ldr	r3, [pc, #300]	; (8001a4c <SetupMeasurement+0x1bc>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	62da      	str	r2, [r3, #44]	; 0x2c
 8001924:	4b48      	ldr	r3, [pc, #288]	; (8001a48 <SetupMeasurement+0x1b8>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	3b01      	subs	r3, #1
 800192a:	461a      	mov	r2, r3
 800192c:	4b47      	ldr	r3, [pc, #284]	; (8001a4c <SetupMeasurement+0x1bc>)
 800192e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(&htim2, record_interval_us - 1);
 8001930:	4b45      	ldr	r3, [pc, #276]	; (8001a48 <SetupMeasurement+0x1b8>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	1e5a      	subs	r2, r3, #1
 8001936:	4b45      	ldr	r3, [pc, #276]	; (8001a4c <SetupMeasurement+0x1bc>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	625a      	str	r2, [r3, #36]	; 0x24

	// > Calculate and set DAC value

	// Initiate a one shot temperature conversion
	uint8_t one_shot_conversion_command = 0b01000100;
 800193c:	2344      	movs	r3, #68	; 0x44
 800193e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	HAL_I2C_Mem_Write(&hi2c3, (TEMP_SENSOR_ADDR << 1), 0x1, I2C_MEMADD_SIZE_8BIT, &one_shot_conversion_command, 1, HAL_MAX_DELAY);
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	9302      	str	r3, [sp, #8]
 8001948:	2301      	movs	r3, #1
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	2301      	movs	r3, #1
 8001954:	2201      	movs	r2, #1
 8001956:	2190      	movs	r1, #144	; 0x90
 8001958:	483d      	ldr	r0, [pc, #244]	; (8001a50 <SetupMeasurement+0x1c0>)
 800195a:	f004 fd37 	bl	80063cc <HAL_I2C_Mem_Write>
	// Read the temperature
	uint8_t temp_buffer[2];
	HAL_I2C_Mem_Read(&hi2c3, (TEMP_SENSOR_ADDR << 1), 0x0, I2C_MEMADD_SIZE_8BIT, temp_buffer, 2, HAL_MAX_DELAY);
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
 8001962:	9302      	str	r3, [sp, #8]
 8001964:	2302      	movs	r3, #2
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2301      	movs	r3, #1
 8001970:	2200      	movs	r2, #0
 8001972:	2190      	movs	r1, #144	; 0x90
 8001974:	4836      	ldr	r0, [pc, #216]	; (8001a50 <SetupMeasurement+0x1c0>)
 8001976:	f004 fe3d 	bl	80065f4 <HAL_I2C_Mem_Read>

	// Calculate the temperature in C
	uint8_t negative_temperature_flag = temp_buffer[0] >> 7;
 800197a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800197e:	09db      	lsrs	r3, r3, #7
 8001980:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	temp_buffer[0] &= 0b01111111;
 8001984:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800198c:	b2db      	uxtb	r3, r3
 800198e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	uint16_t sensor_output = (temp_buffer[0] << 2) | (temp_buffer[1] >> 6);
 8001992:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	b21a      	sxth	r2, r3
 800199a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800199e:	099b      	lsrs	r3, r3, #6
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	b21b      	sxth	r3, r3
 80019a4:	4313      	orrs	r3, r2
 80019a6:	b21b      	sxth	r3, r3
 80019a8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

	if(negative_temperature_flag) {
 80019ac:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d015      	beq.n	80019e0 <SetupMeasurement+0x150>
		cold_junction_temp = (sensor_output - 512)/4.0;
 80019b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80019b8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fde9 	bl	8000594 <__aeabi_i2d>
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <SetupMeasurement+0x1c4>)
 80019c8:	f7fe ff78 	bl	80008bc <__aeabi_ddiv>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff f940 	bl	8000c58 <__aeabi_d2f>
 80019d8:	4603      	mov	r3, r0
 80019da:	4a1f      	ldr	r2, [pc, #124]	; (8001a58 <SetupMeasurement+0x1c8>)
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	e012      	b.n	8001a06 <SetupMeasurement+0x176>
	}
	else{
		cold_junction_temp = (sensor_output)/4.0;
 80019e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fdd5 	bl	8000594 <__aeabi_i2d>
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <SetupMeasurement+0x1c4>)
 80019f0:	f7fe ff64 	bl	80008bc <__aeabi_ddiv>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f7ff f92c 	bl	8000c58 <__aeabi_d2f>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4a15      	ldr	r2, [pc, #84]	; (8001a58 <SetupMeasurement+0x1c8>)
 8001a04:	6013      	str	r3, [r2, #0]
	}

	// Calculate the required DAC offset
	float cjc_offset_temperature = MINIMUM_TEMPERATURE - cold_junction_temp;
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <SetupMeasurement+0x1c8>)
 8001a08:	edd3 7a00 	vldr	s15, [r3]
 8001a0c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8001a10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a14:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	double cjc_offset_voltage = 0;
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	for(int i = 0; i < coefficients_count; i++) {
 8001a24:	2300      	movs	r3, #0
 8001a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a28:	e041      	b.n	8001aae <SetupMeasurement+0x21e>
 8001a2a:	bf00      	nop
 8001a2c:	20000008 	.word	0x20000008
 8001a30:	08012a70 	.word	0x08012a70
 8001a34:	08012958 	.word	0x08012958
 8001a38:	080129a0 	.word	0x080129a0
 8001a3c:	080129f8 	.word	0x080129f8
 8001a40:	20000000 	.word	0x20000000
 8001a44:	200027c4 	.word	0x200027c4
 8001a48:	20000006 	.word	0x20000006
 8001a4c:	2000071c 	.word	0x2000071c
 8001a50:	200006c8 	.word	0x200006c8
 8001a54:	40100000 	.word	0x40100000
 8001a58:	200027b8 	.word	0x200027b8
		cjc_offset_voltage += used_coefficients[i] * pow(cjc_offset_temperature, i);
 8001a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a62:	4413      	add	r3, r2
 8001a64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001a68:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a6a:	f7fe fda5 	bl	80005b8 <__aeabi_f2d>
 8001a6e:	4682      	mov	sl, r0
 8001a70:	468b      	mov	fp, r1
 8001a72:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a74:	f7fe fd8e 	bl	8000594 <__aeabi_i2d>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	ec43 2b11 	vmov	d1, r2, r3
 8001a80:	ec4b ab10 	vmov	d0, sl, fp
 8001a84:	f00f ffd0 	bl	8011a28 <pow>
 8001a88:	ec53 2b10 	vmov	r2, r3, d0
 8001a8c:	4640      	mov	r0, r8
 8001a8e:	4649      	mov	r1, r9
 8001a90:	f7fe fdea 	bl	8000668 <__aeabi_dmul>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001a9c:	f7fe fc2e 	bl	80002fc <__adddf3>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	for(int i = 0; i < coefficients_count; i++) {
 8001aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aaa:	3301      	adds	r3, #1
 8001aac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001aae:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001ab2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	dbd1      	blt.n	8001a5c <SetupMeasurement+0x1cc>
	}

	double total_offset_calc = INAMP_OUTPUT_BUFFER_OFFSET + ((-1) * (cjc_offset_voltage * pow(10, -6)) * INAMP_GAIN);
 8001ab8:	a37f      	add	r3, pc, #508	; (adr r3, 8001cb8 <SetupMeasurement+0x428>)
 8001aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001ac2:	f7fe fdd1 	bl	8000668 <__aeabi_dmul>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4614      	mov	r4, r2
 8001acc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001ad0:	a37b      	add	r3, pc, #492	; (adr r3, 8001cc0 <SetupMeasurement+0x430>)
 8001ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	4629      	mov	r1, r5
 8001ada:	f7fe fdc5 	bl	8000668 <__aeabi_dmul>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	a378      	add	r3, pc, #480	; (adr r3, 8001cc8 <SetupMeasurement+0x438>)
 8001ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aec:	f7fe fc06 	bl	80002fc <__adddf3>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	uint32_t offset = (uint32_t)(total_offset_calc * 4096) / analog_reference_voltage;
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	4b62      	ldr	r3, [pc, #392]	; (8001c88 <SetupMeasurement+0x3f8>)
 8001afe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b02:	f7fe fdb1 	bl	8000668 <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f7ff f883 	bl	8000c18 <__aeabi_d2uiz>
 8001b12:	ee07 0a90 	vmov	s15, r0
 8001b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b1a:	4b5c      	ldr	r3, [pc, #368]	; (8001c8c <SetupMeasurement+0x3fc>)
 8001b1c:	ed93 7a00 	vldr	s14, [r3]
 8001b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b28:	ee17 3a90 	vmov	r3, s15
 8001b2c:	637b      	str	r3, [r7, #52]	; 0x34
	applied_voltage_offset = (float)(offset * analog_reference_voltage) / 4096;
 8001b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b30:	ee07 3a90 	vmov	s15, r3
 8001b34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b38:	4b54      	ldr	r3, [pc, #336]	; (8001c8c <SetupMeasurement+0x3fc>)
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b42:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001c90 <SetupMeasurement+0x400>
 8001b46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b4a:	4b52      	ldr	r3, [pc, #328]	; (8001c94 <SetupMeasurement+0x404>)
 8001b4c:	edc3 7a00 	vstr	s15, [r3]

	// Calibrate the DAC
	DAC_ChannelConfTypeDef sConfig = {0};
 8001b50:	463b      	mov	r3, r7
 8001b52:	2230      	movs	r2, #48	; 0x30
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f00d fdfd 	bl	800f756 <memset>
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	603b      	str	r3, [r7, #0]
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	713b      	strb	r3, [r7, #4]
	sConfig.DAC_SignedFormat = DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	717b      	strb	r3, [r7, #5]
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	613b      	str	r3, [r7, #16]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	61bb      	str	r3, [r7, #24]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_USER;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	61fb      	str	r3, [r7, #28]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001b80:	463b      	mov	r3, r7
 8001b82:	2200      	movs	r2, #0
 8001b84:	4619      	mov	r1, r3
 8001b86:	4844      	ldr	r0, [pc, #272]	; (8001c98 <SetupMeasurement+0x408>)
 8001b88:	f003 faa0 	bl	80050cc <HAL_DAC_ConfigChannel>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <SetupMeasurement+0x306>
	{
	Error_Handler();
 8001b92:	f000 fbdb 	bl	800234c <Error_Handler>
	}
	HAL_DACEx_SelfCalibrate(&hdac1, &sConfig, DAC_CHANNEL_1);
 8001b96:	463b      	mov	r3, r7
 8001b98:	2200      	movs	r2, #0
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	483e      	ldr	r0, [pc, #248]	; (8001c98 <SetupMeasurement+0x408>)
 8001b9e:	f003 fc4d 	bl	800543c <HAL_DACEx_SelfCalibrate>

	// Set the DAC voltage
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, offset);
 8001ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	483b      	ldr	r0, [pc, #236]	; (8001c98 <SetupMeasurement+0x408>)
 8001baa:	f003 fa61 	bl	8005070 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4839      	ldr	r0, [pc, #228]	; (8001c98 <SetupMeasurement+0x408>)
 8001bb2:	f003 f9f1 	bl	8004f98 <HAL_DAC_Start>


	// Calculate the target packet number
	target_packet_count = (record_length_ms * 1000.0 / record_interval_us) / (ADC_BUFFER_SIZE / 2);
 8001bb6:	4b39      	ldr	r3, [pc, #228]	; (8001c9c <SetupMeasurement+0x40c>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fcea 	bl	8000594 <__aeabi_i2d>
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	4b36      	ldr	r3, [pc, #216]	; (8001ca0 <SetupMeasurement+0x410>)
 8001bc6:	f7fe fd4f 	bl	8000668 <__aeabi_dmul>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4614      	mov	r4, r2
 8001bd0:	461d      	mov	r5, r3
 8001bd2:	4b34      	ldr	r3, [pc, #208]	; (8001ca4 <SetupMeasurement+0x414>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fcdc 	bl	8000594 <__aeabi_i2d>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4620      	mov	r0, r4
 8001be2:	4629      	mov	r1, r5
 8001be4:	f7fe fe6a 	bl	80008bc <__aeabi_ddiv>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <SetupMeasurement+0x418>)
 8001bf6:	f7fe fe61 	bl	80008bc <__aeabi_ddiv>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4619      	mov	r1, r3
 8001c02:	f7fe ffe1 	bl	8000bc8 <__aeabi_d2iz>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4a28      	ldr	r2, [pc, #160]	; (8001cac <SetupMeasurement+0x41c>)
 8001c0a:	6013      	str	r3, [r2, #0]
	if((int)(record_length_ms * 1000.0 / record_interval_us) % (ADC_BUFFER_SIZE / 2) != 0){
 8001c0c:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <SetupMeasurement+0x40c>)
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fcbf 	bl	8000594 <__aeabi_i2d>
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <SetupMeasurement+0x410>)
 8001c1c:	f7fe fd24 	bl	8000668 <__aeabi_dmul>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4614      	mov	r4, r2
 8001c26:	461d      	mov	r5, r3
 8001c28:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <SetupMeasurement+0x414>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fcb1 	bl	8000594 <__aeabi_i2d>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4620      	mov	r0, r4
 8001c38:	4629      	mov	r1, r5
 8001c3a:	f7fe fe3f 	bl	80008bc <__aeabi_ddiv>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f7fe ffbf 	bl	8000bc8 <__aeabi_d2iz>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <SetupMeasurement+0x420>)
 8001c4e:	fb83 1302 	smull	r1, r3, r3, r2
 8001c52:	1159      	asrs	r1, r3, #5
 8001c54:	17d3      	asrs	r3, r2, #31
 8001c56:	1acb      	subs	r3, r1, r3
 8001c58:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c5c:	fb01 f303 	mul.w	r3, r1, r3
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d004      	beq.n	8001c70 <SetupMeasurement+0x3e0>
		target_packet_count += 1;
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <SetupMeasurement+0x41c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	4a0f      	ldr	r2, [pc, #60]	; (8001cac <SetupMeasurement+0x41c>)
 8001c6e:	6013      	str	r3, [r2, #0]
	}

	prog_state = PARAMETERS_SET;
 8001c70:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <SetupMeasurement+0x424>)
 8001c72:	2203      	movs	r2, #3
 8001c74:	701a      	strb	r2, [r3, #0]
	return 1;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3760      	adds	r7, #96	; 0x60
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c82:	bf00      	nop
 8001c84:	f3af 8000 	nop.w
 8001c88:	40b00000 	.word	0x40b00000
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	45800000 	.word	0x45800000
 8001c94:	200027bc 	.word	0x200027bc
 8001c98:	200006b4 	.word	0x200006b4
 8001c9c:	20000004 	.word	0x20000004
 8001ca0:	408f4000 	.word	0x408f4000
 8001ca4:	20000006 	.word	0x20000006
 8001ca8:	407f4000 	.word	0x407f4000
 8001cac:	2000076c 	.word	0x2000076c
 8001cb0:	10624dd3 	.word	0x10624dd3
 8001cb4:	200027b4 	.word	0x200027b4
 8001cb8:	a0b5ed8d 	.word	0xa0b5ed8d
 8001cbc:	3eb0c6f7 	.word	0x3eb0c6f7
 8001cc0:	e6d1d609 	.word	0xe6d1d609
 8001cc4:	4066aa7d 	.word	0x4066aa7d
 8001cc8:	9999999a 	.word	0x9999999a
 8001ccc:	3fc99999 	.word	0x3fc99999

08001cd0 <MeasureVref>:

float MeasureVref(void) {
 8001cd0:	b5b0      	push	{r4, r5, r7, lr}
 8001cd2:	b08e      	sub	sp, #56	; 0x38
 8001cd4:	af00      	add	r7, sp, #0
	HAL_ADC_DeInit(&hadc1);
 8001cd6:	485c      	ldr	r0, [pc, #368]	; (8001e48 <MeasureVref+0x178>)
 8001cd8:	f001 fd38 	bl	800374c <HAL_ADC_DeInit>

	// Measure Vref
	hadc1.Instance = ADC1;
 8001cdc:	4b5a      	ldr	r3, [pc, #360]	; (8001e48 <MeasureVref+0x178>)
 8001cde:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001ce2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001ce4:	4b58      	ldr	r3, [pc, #352]	; (8001e48 <MeasureVref+0x178>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cea:	4b57      	ldr	r3, [pc, #348]	; (8001e48 <MeasureVref+0x178>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cf0:	4b55      	ldr	r3, [pc, #340]	; (8001e48 <MeasureVref+0x178>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 8001cf6:	4b54      	ldr	r3, [pc, #336]	; (8001e48 <MeasureVref+0x178>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cfc:	4b52      	ldr	r3, [pc, #328]	; (8001e48 <MeasureVref+0x178>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d02:	4b51      	ldr	r3, [pc, #324]	; (8001e48 <MeasureVref+0x178>)
 8001d04:	2204      	movs	r2, #4
 8001d06:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d08:	4b4f      	ldr	r3, [pc, #316]	; (8001e48 <MeasureVref+0x178>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001d0e:	4b4e      	ldr	r3, [pc, #312]	; (8001e48 <MeasureVref+0x178>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 1;
 8001d14:	4b4c      	ldr	r3, [pc, #304]	; (8001e48 <MeasureVref+0x178>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d1a:	4b4b      	ldr	r3, [pc, #300]	; (8001e48 <MeasureVref+0x178>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d22:	4b49      	ldr	r3, [pc, #292]	; (8001e48 <MeasureVref+0x178>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d28:	4b47      	ldr	r3, [pc, #284]	; (8001e48 <MeasureVref+0x178>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d2e:	4b46      	ldr	r3, [pc, #280]	; (8001e48 <MeasureVref+0x178>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d36:	4b44      	ldr	r3, [pc, #272]	; (8001e48 <MeasureVref+0x178>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8001d3c:	4b42      	ldr	r3, [pc, #264]	; (8001e48 <MeasureVref+0x178>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001d44:	4840      	ldr	r0, [pc, #256]	; (8001e48 <MeasureVref+0x178>)
 8001d46:	f001 fb45 	bl	80033d4 <HAL_ADC_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MeasureVref+0x84>
		Error_Handler();
 8001d50:	f000 fafc 	bl	800234c <Error_Handler>
	}

	ADC_MultiModeTypeDef multimode = {0};
 8001d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]

	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001d60:	2300      	movs	r3, #0
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4837      	ldr	r0, [pc, #220]	; (8001e48 <MeasureVref+0x178>)
 8001d6c:	f002 feda 	bl	8004b24 <HAL_ADCEx_MultiModeConfigChannel>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MeasureVref+0xaa>
		Error_Handler();
 8001d76:	f000 fae9 	bl	800234c <Error_Handler>
	}

	ADC_ChannelConfTypeDef sConfig = {0};
 8001d7a:	1d3b      	adds	r3, r7, #4
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f00d fce8 	bl	800f756 <memset>

	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001d86:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <MeasureVref+0x17c>)
 8001d88:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d8a:	2306      	movs	r3, #6
 8001d8c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5; // 4.76us sampling time (min 4us)
 8001d8e:	2307      	movs	r3, #7
 8001d90:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d92:	237f      	movs	r3, #127	; 0x7f
 8001d94:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d96:	2304      	movs	r3, #4
 8001d98:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	4619      	mov	r1, r3
 8001da2:	4829      	ldr	r0, [pc, #164]	; (8001e48 <MeasureVref+0x178>)
 8001da4:	f001 ff84 	bl	8003cb0 <HAL_ADC_ConfigChannel>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MeasureVref+0xe2>
		Error_Handler();
 8001dae:	f000 facd 	bl	800234c <Error_Handler>
	}

	uint16_t vrefint_data = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	807b      	strh	r3, [r7, #2]
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001db6:	217f      	movs	r1, #127	; 0x7f
 8001db8:	4823      	ldr	r0, [pc, #140]	; (8001e48 <MeasureVref+0x178>)
 8001dba:	f002 fe51 	bl	8004a60 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&vrefint_data, 1);
 8001dbe:	1cbb      	adds	r3, r7, #2
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4820      	ldr	r0, [pc, #128]	; (8001e48 <MeasureVref+0x178>)
 8001dc6:	f001 fe33 	bl	8003a30 <HAL_ADC_Start_DMA>
	HAL_Delay(1);
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f001 f828 	bl	8002e20 <HAL_Delay>
	HAL_ADC_Stop_DMA(&hadc1);
 8001dd0:	481d      	ldr	r0, [pc, #116]	; (8001e48 <MeasureVref+0x178>)
 8001dd2:	f001 ff01 	bl	8003bd8 <HAL_ADC_Stop_DMA>

	uint16_t vrefint_cal;
	vrefint_cal= *((uint16_t*)VREFINT_CAL_ADDR);
 8001dd6:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <MeasureVref+0x180>)
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	86fb      	strh	r3, [r7, #54]	; 0x36

	float vref = (VREFINT_CAL_VREF / 1000.0) * (float)vrefint_cal / (float)vrefint_data;
 8001ddc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dde:	ee07 3a90 	vmov	s15, r3
 8001de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001de6:	ee17 0a90 	vmov	r0, s15
 8001dea:	f7fe fbe5 	bl	80005b8 <__aeabi_f2d>
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <MeasureVref+0x184>)
 8001df4:	f7fe fc38 	bl	8000668 <__aeabi_dmul>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4614      	mov	r4, r2
 8001dfe:	461d      	mov	r5, r3
 8001e00:	887b      	ldrh	r3, [r7, #2]
 8001e02:	ee07 3a90 	vmov	s15, r3
 8001e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e0a:	ee17 0a90 	vmov	r0, s15
 8001e0e:	f7fe fbd3 	bl	80005b8 <__aeabi_f2d>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4620      	mov	r0, r4
 8001e18:	4629      	mov	r1, r5
 8001e1a:	f7fe fd4f 	bl	80008bc <__aeabi_ddiv>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4610      	mov	r0, r2
 8001e24:	4619      	mov	r1, r3
 8001e26:	f7fe ff17 	bl	8000c58 <__aeabi_d2f>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	633b      	str	r3, [r7, #48]	; 0x30

	// Return ADC to initial state
	HAL_ADC_DeInit(&hadc1);
 8001e2e:	4806      	ldr	r0, [pc, #24]	; (8001e48 <MeasureVref+0x178>)
 8001e30:	f001 fc8c 	bl	800374c <HAL_ADC_DeInit>
	MX_ADC1_Init();
 8001e34:	f7ff f862 	bl	8000efc <MX_ADC1_Init>

	return vref;
 8001e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3a:	ee07 3a90 	vmov	s15, r3
}
 8001e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e42:	3738      	adds	r7, #56	; 0x38
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bdb0      	pop	{r4, r5, r7, pc}
 8001e48:	20000384 	.word	0x20000384
 8001e4c:	cb840000 	.word	0xcb840000
 8001e50:	1fff75aa 	.word	0x1fff75aa
 8001e54:	40080000 	.word	0x40080000

08001e58 <SendParameters>:

int SendParameters(void) {
 8001e58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e5c:	b0c8      	sub	sp, #288	; 0x120
 8001e5e:	af06      	add	r7, sp, #24
	unsigned char parameters_msg[PARAMETERS_MSG_SIZE];

	sprintf((char *)parameters_msg, "CjcTmp:%.2f;AlgRfr:%.3f;AplOfs:%.4f;AdcBuf:%d;PktCnt:%d\n",
 8001e60:	4b2a      	ldr	r3, [pc, #168]	; (8001f0c <SendParameters+0xb4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fba7 	bl	80005b8 <__aeabi_f2d>
 8001e6a:	4680      	mov	r8, r0
 8001e6c:	4689      	mov	r9, r1
 8001e6e:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <SendParameters+0xb8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fba0 	bl	80005b8 <__aeabi_f2d>
 8001e78:	4604      	mov	r4, r0
 8001e7a:	460d      	mov	r5, r1
 8001e7c:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <SendParameters+0xbc>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fb99 	bl	80005b8 <__aeabi_f2d>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4923      	ldr	r1, [pc, #140]	; (8001f18 <SendParameters+0xc0>)
 8001e8c:	6809      	ldr	r1, [r1, #0]
 8001e8e:	1d38      	adds	r0, r7, #4
 8001e90:	9105      	str	r1, [sp, #20]
 8001e92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e96:	9104      	str	r1, [sp, #16]
 8001e98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e9c:	e9cd 4500 	strd	r4, r5, [sp]
 8001ea0:	4642      	mov	r2, r8
 8001ea2:	464b      	mov	r3, r9
 8001ea4:	491d      	ldr	r1, [pc, #116]	; (8001f1c <SendParameters+0xc4>)
 8001ea6:	f00d fbf3 	bl	800f690 <siprintf>
									cold_junction_temp,
									analog_reference_voltage,
									applied_voltage_offset,
									ADC_BUFFER_SIZE,
									target_packet_count);
	uint16_t line_len = strlen((char *)parameters_msg);
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fa17 	bl	80002e0 <strlen>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
	while(CDC_Transmit_FS(parameters_msg, line_len) != USBD_OK);
 8001eb8:	bf00      	nop
 8001eba:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f00c f9d8 	bl	800e278 <CDC_Transmit_FS>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f5      	bne.n	8001eba <SendParameters+0x62>

	HAL_GPIO_WritePin(IND_LED_G_GPIO_Port, IND_LED_G_Pin, GPIO_PIN_SET);
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ed4:	4812      	ldr	r0, [pc, #72]	; (8001f20 <SendParameters+0xc8>)
 8001ed6:	f004 f9a3 	bl	8006220 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_LED_R_GPIO_Port, IND_LED_R_Pin, GPIO_PIN_SET);
 8001eda:	2201      	movs	r2, #1
 8001edc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ee0:	480f      	ldr	r0, [pc, #60]	; (8001f20 <SendParameters+0xc8>)
 8001ee2:	f004 f99d 	bl	8006220 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_LED_B_GPIO_Port, IND_LED_B_Pin, GPIO_PIN_RESET);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eec:	480c      	ldr	r0, [pc, #48]	; (8001f20 <SendParameters+0xc8>)
 8001eee:	f004 f997 	bl	8006220 <HAL_GPIO_WritePin>
	measurement_activated = 0;
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <SendParameters+0xcc>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
	prog_state = ARMED;
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <SendParameters+0xd0>)
 8001efa:	2204      	movs	r2, #4
 8001efc:	701a      	strb	r2, [r3, #0]

	return 1;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001f06:	46bd      	mov	sp, r7
 8001f08:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f0c:	200027b8 	.word	0x200027b8
 8001f10:	20000000 	.word	0x20000000
 8001f14:	200027bc 	.word	0x200027bc
 8001f18:	2000076c 	.word	0x2000076c
 8001f1c:	080128d4 	.word	0x080128d4
 8001f20:	48000800 	.word	0x48000800
 8001f24:	200027e4 	.word	0x200027e4
 8001f28:	200027b4 	.word	0x200027b4

08001f2c <StartMeasurement>:

int StartMeasurement(void) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IND_LED_G_GPIO_Port, IND_LED_G_Pin, GPIO_PIN_SET);
 8001f30:	2201      	movs	r2, #1
 8001f32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f36:	4828      	ldr	r0, [pc, #160]	; (8001fd8 <StartMeasurement+0xac>)
 8001f38:	f004 f972 	bl	8006220 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_LED_R_GPIO_Port, IND_LED_R_Pin, GPIO_PIN_RESET);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f42:	4825      	ldr	r0, [pc, #148]	; (8001fd8 <StartMeasurement+0xac>)
 8001f44:	f004 f96c 	bl	8006220 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_LED_B_GPIO_Port, IND_LED_B_Pin, GPIO_PIN_SET);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f4e:	4822      	ldr	r0, [pc, #136]	; (8001fd8 <StartMeasurement+0xac>)
 8001f50:	f004 f966 	bl	8006220 <HAL_GPIO_WritePin>

	// Setup ADCs
	if(channel_enabled_status[0]){
 8001f54:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <StartMeasurement+0xb0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d009      	beq.n	8001f70 <StartMeasurement+0x44>
		HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001f5c:	217f      	movs	r1, #127	; 0x7f
 8001f5e:	4820      	ldr	r0, [pc, #128]	; (8001fe0 <StartMeasurement+0xb4>)
 8001f60:	f002 fd7e 	bl	8004a60 <HAL_ADCEx_Calibration_Start>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffers[0], ADC_BUFFER_SIZE);
 8001f64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f68:	491e      	ldr	r1, [pc, #120]	; (8001fe4 <StartMeasurement+0xb8>)
 8001f6a:	481d      	ldr	r0, [pc, #116]	; (8001fe0 <StartMeasurement+0xb4>)
 8001f6c:	f001 fd60 	bl	8003a30 <HAL_ADC_Start_DMA>
	}
	if(channel_enabled_status[1]){
 8001f70:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <StartMeasurement+0xb0>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d009      	beq.n	8001f8c <StartMeasurement+0x60>
		HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001f78:	217f      	movs	r1, #127	; 0x7f
 8001f7a:	481b      	ldr	r0, [pc, #108]	; (8001fe8 <StartMeasurement+0xbc>)
 8001f7c:	f002 fd70 	bl	8004a60 <HAL_ADCEx_Calibration_Start>
		HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_buffers[1], ADC_BUFFER_SIZE);
 8001f80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f84:	4919      	ldr	r1, [pc, #100]	; (8001fec <StartMeasurement+0xc0>)
 8001f86:	4818      	ldr	r0, [pc, #96]	; (8001fe8 <StartMeasurement+0xbc>)
 8001f88:	f001 fd52 	bl	8003a30 <HAL_ADC_Start_DMA>
	}
	if(channel_enabled_status[2]){
 8001f8c:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <StartMeasurement+0xb0>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d009      	beq.n	8001fa8 <StartMeasurement+0x7c>
		HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8001f94:	217f      	movs	r1, #127	; 0x7f
 8001f96:	4816      	ldr	r0, [pc, #88]	; (8001ff0 <StartMeasurement+0xc4>)
 8001f98:	f002 fd62 	bl	8004a60 <HAL_ADCEx_Calibration_Start>
		HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc_buffers[2], ADC_BUFFER_SIZE);
 8001f9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fa0:	4914      	ldr	r1, [pc, #80]	; (8001ff4 <StartMeasurement+0xc8>)
 8001fa2:	4813      	ldr	r0, [pc, #76]	; (8001ff0 <StartMeasurement+0xc4>)
 8001fa4:	f001 fd44 	bl	8003a30 <HAL_ADC_Start_DMA>
	}
	if(channel_enabled_status[3]){
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <StartMeasurement+0xb0>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d009      	beq.n	8001fc4 <StartMeasurement+0x98>
		HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8001fb0:	217f      	movs	r1, #127	; 0x7f
 8001fb2:	4811      	ldr	r0, [pc, #68]	; (8001ff8 <StartMeasurement+0xcc>)
 8001fb4:	f002 fd54 	bl	8004a60 <HAL_ADCEx_Calibration_Start>
		HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc_buffers[3], ADC_BUFFER_SIZE);
 8001fb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fbc:	490f      	ldr	r1, [pc, #60]	; (8001ffc <StartMeasurement+0xd0>)
 8001fbe:	480e      	ldr	r0, [pc, #56]	; (8001ff8 <StartMeasurement+0xcc>)
 8001fc0:	f001 fd36 	bl	8003a30 <HAL_ADC_Start_DMA>
	}

	HAL_TIM_Base_Start_IT(&htim2);
 8001fc4:	480e      	ldr	r0, [pc, #56]	; (8002000 <StartMeasurement+0xd4>)
 8001fc6:	f007 fd19 	bl	80099fc <HAL_TIM_Base_Start_IT>

	prog_state = MEASURING;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <StartMeasurement+0xd8>)
 8001fcc:	2205      	movs	r2, #5
 8001fce:	701a      	strb	r2, [r3, #0]

	return 1;
 8001fd0:	2301      	movs	r3, #1
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	48000800 	.word	0x48000800
 8001fdc:	200027cc 	.word	0x200027cc
 8001fe0:	20000384 	.word	0x20000384
 8001fe4:	20000774 	.word	0x20000774
 8001fe8:	200003f0 	.word	0x200003f0
 8001fec:	20000f44 	.word	0x20000f44
 8001ff0:	2000045c 	.word	0x2000045c
 8001ff4:	20001714 	.word	0x20001714
 8001ff8:	200004c8 	.word	0x200004c8
 8001ffc:	20001ee4 	.word	0x20001ee4
 8002000:	2000071c 	.word	0x2000071c
 8002004:	200027b4 	.word	0x200027b4

08002008 <HAL_ADC_ConvHalfCpltCallback>:

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	int adc_index;

	if (hadc == &hadc1){
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a18      	ldr	r2, [pc, #96]	; (8002074 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d102      	bne.n	800201e <HAL_ADC_ConvHalfCpltCallback+0x16>
		adc_index = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	e013      	b.n	8002046 <HAL_ADC_ConvHalfCpltCallback+0x3e>
	}
	else if(hadc == &hadc2){
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a15      	ldr	r2, [pc, #84]	; (8002078 <HAL_ADC_ConvHalfCpltCallback+0x70>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d102      	bne.n	800202c <HAL_ADC_ConvHalfCpltCallback+0x24>
		adc_index = 1;
 8002026:	2301      	movs	r3, #1
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	e00c      	b.n	8002046 <HAL_ADC_ConvHalfCpltCallback+0x3e>
	}
	else if(hadc == &hadc3){
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a13      	ldr	r2, [pc, #76]	; (800207c <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d102      	bne.n	800203a <HAL_ADC_ConvHalfCpltCallback+0x32>
		adc_index = 2;
 8002034:	2302      	movs	r3, #2
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	e005      	b.n	8002046 <HAL_ADC_ConvHalfCpltCallback+0x3e>
	}
	else if(hadc == &hadc4){
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a10      	ldr	r2, [pc, #64]	; (8002080 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d101      	bne.n	8002046 <HAL_ADC_ConvHalfCpltCallback+0x3e>
		adc_index = 3;
 8002042:	2303      	movs	r3, #3
 8002044:	60fb      	str	r3, [r7, #12]
	}

	if (adc_states[adc_index] != EMPTY)
 8002046:	4a0f      	ldr	r2, [pc, #60]	; (8002084 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4413      	add	r3, r2
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d004      	beq.n	800205c <HAL_ADC_ConvHalfCpltCallback+0x54>
		dropped_packet_count++;
 8002052:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <HAL_ADC_ConvHalfCpltCallback+0x80>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	3301      	adds	r3, #1
 8002058:	4a0b      	ldr	r2, [pc, #44]	; (8002088 <HAL_ADC_ConvHalfCpltCallback+0x80>)
 800205a:	6013      	str	r3, [r2, #0]
	adc_states[adc_index] = START_FULL;
 800205c:	4a09      	ldr	r2, [pc, #36]	; (8002084 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4413      	add	r3, r2
 8002062:	2201      	movs	r2, #1
 8002064:	701a      	strb	r2, [r3, #0]
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000384 	.word	0x20000384
 8002078:	200003f0 	.word	0x200003f0
 800207c:	2000045c 	.word	0x2000045c
 8002080:	200004c8 	.word	0x200004c8
 8002084:	200027c4 	.word	0x200027c4
 8002088:	20000770 	.word	0x20000770

0800208c <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	int adc_index;

	if (hadc == &hadc1){
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a18      	ldr	r2, [pc, #96]	; (80020f8 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d102      	bne.n	80020a2 <HAL_ADC_ConvCpltCallback+0x16>
		adc_index = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	e013      	b.n	80020ca <HAL_ADC_ConvCpltCallback+0x3e>
	}
	else if(hadc == &hadc2){
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a15      	ldr	r2, [pc, #84]	; (80020fc <HAL_ADC_ConvCpltCallback+0x70>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d102      	bne.n	80020b0 <HAL_ADC_ConvCpltCallback+0x24>
		adc_index = 1;
 80020aa:	2301      	movs	r3, #1
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	e00c      	b.n	80020ca <HAL_ADC_ConvCpltCallback+0x3e>
	}
	else if(hadc == &hadc3){
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a13      	ldr	r2, [pc, #76]	; (8002100 <HAL_ADC_ConvCpltCallback+0x74>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d102      	bne.n	80020be <HAL_ADC_ConvCpltCallback+0x32>
		adc_index = 2;
 80020b8:	2302      	movs	r3, #2
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	e005      	b.n	80020ca <HAL_ADC_ConvCpltCallback+0x3e>
	}
	else if(hadc == &hadc4){
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a10      	ldr	r2, [pc, #64]	; (8002104 <HAL_ADC_ConvCpltCallback+0x78>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d101      	bne.n	80020ca <HAL_ADC_ConvCpltCallback+0x3e>
		adc_index = 3;
 80020c6:	2303      	movs	r3, #3
 80020c8:	60fb      	str	r3, [r7, #12]
	}

	if (adc_states[adc_index] != EMPTY)
 80020ca:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <HAL_ADC_ConvCpltCallback+0x7c>)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4413      	add	r3, r2
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d004      	beq.n	80020e0 <HAL_ADC_ConvCpltCallback+0x54>
		dropped_packet_count++;
 80020d6:	4b0d      	ldr	r3, [pc, #52]	; (800210c <HAL_ADC_ConvCpltCallback+0x80>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	3301      	adds	r3, #1
 80020dc:	4a0b      	ldr	r2, [pc, #44]	; (800210c <HAL_ADC_ConvCpltCallback+0x80>)
 80020de:	6013      	str	r3, [r2, #0]
	adc_states[adc_index] = END_FULL;
 80020e0:	4a09      	ldr	r2, [pc, #36]	; (8002108 <HAL_ADC_ConvCpltCallback+0x7c>)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4413      	add	r3, r2
 80020e6:	2202      	movs	r2, #2
 80020e8:	701a      	strb	r2, [r3, #0]
}
 80020ea:	bf00      	nop
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000384 	.word	0x20000384
 80020fc:	200003f0 	.word	0x200003f0
 8002100:	2000045c 	.word	0x2000045c
 8002104:	200004c8 	.word	0x200004c8
 8002108:	200027c4 	.word	0x200027c4
 800210c:	20000770 	.word	0x20000770

08002110 <SendData>:

unsigned char usb_buffer[USB_BUFFER_SIZE];
unsigned int usb_buffer_index;
unsigned int adc_buffer_start_index;

int SendData(enum ADC_BUFFER_STATE usb_transmition_state) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
	// > Create the USB buffer data
	if(usb_transmition_state == START_FULL){
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d103      	bne.n	8002128 <SendData+0x18>
		adc_buffer_start_index = 0;
 8002120:	4b3b      	ldr	r3, [pc, #236]	; (8002210 <SendData+0x100>)
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	e006      	b.n	8002136 <SendData+0x26>
	}
	else if(usb_transmition_state == END_FULL){
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d103      	bne.n	8002136 <SendData+0x26>
		adc_buffer_start_index = ADC_BUFFER_SIZE/2;
 800212e:	4b38      	ldr	r3, [pc, #224]	; (8002210 <SendData+0x100>)
 8002130:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002134:	601a      	str	r2, [r3, #0]
	}

	usb_buffer_index = 0;
 8002136:	4b37      	ldr	r3, [pc, #220]	; (8002214 <SendData+0x104>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
	for(int channel_index = 0; channel_index < MAX_CHANNEL_COUNT; channel_index++) {
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	e04e      	b.n	80021e0 <SendData+0xd0>
		if(!channel_enabled_status[channel_index])
 8002142:	4a35      	ldr	r2, [pc, #212]	; (8002218 <SendData+0x108>)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d044      	beq.n	80021d8 <SendData+0xc8>
			continue;

		for(int i = 0; i < ADC_BUFFER_SIZE/2; i++){
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	e031      	b.n	80021b8 <SendData+0xa8>
			usb_buffer[usb_buffer_index + (i*2) + 1] = (uint8_t)(adc_buffers[channel_index][adc_buffer_start_index + i] & 0x00FF);
 8002154:	4b2e      	ldr	r3, [pc, #184]	; (8002210 <SendData+0x100>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	4413      	add	r3, r2
 800215c:	492f      	ldr	r1, [pc, #188]	; (800221c <SendData+0x10c>)
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002164:	fb00 f202 	mul.w	r2, r0, r2
 8002168:	4413      	add	r3, r2
 800216a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4619      	mov	r1, r3
 8002174:	4b27      	ldr	r3, [pc, #156]	; (8002214 <SendData+0x104>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	440b      	add	r3, r1
 800217a:	3301      	adds	r3, #1
 800217c:	b2d1      	uxtb	r1, r2
 800217e:	4a28      	ldr	r2, [pc, #160]	; (8002220 <SendData+0x110>)
 8002180:	54d1      	strb	r1, [r2, r3]
			usb_buffer[usb_buffer_index + i*2] = (uint8_t)((adc_buffers[channel_index][adc_buffer_start_index + i] >> 8) & 0x00FF);
 8002182:	4b23      	ldr	r3, [pc, #140]	; (8002210 <SendData+0x100>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	4413      	add	r3, r2
 800218a:	4924      	ldr	r1, [pc, #144]	; (800221c <SendData+0x10c>)
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002192:	fb00 f202 	mul.w	r2, r0, r2
 8002196:	4413      	add	r3, r2
 8002198:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	b29a      	uxth	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4619      	mov	r1, r3
 80021a6:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <SendData+0x104>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	440b      	add	r3, r1
 80021ac:	b2d1      	uxtb	r1, r2
 80021ae:	4a1c      	ldr	r2, [pc, #112]	; (8002220 <SendData+0x110>)
 80021b0:	54d1      	strb	r1, [r2, r3]
		for(int i = 0; i < ADC_BUFFER_SIZE/2; i++){
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	3301      	adds	r3, #1
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021be:	dbc9      	blt.n	8002154 <SendData+0x44>
		}
		adc_states[channel_index] = EMPTY;
 80021c0:	4a18      	ldr	r2, [pc, #96]	; (8002224 <SendData+0x114>)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4413      	add	r3, r2
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
		usb_buffer_index += ADC_BUFFER_SIZE;
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <SendData+0x104>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80021d2:	4a10      	ldr	r2, [pc, #64]	; (8002214 <SendData+0x104>)
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e000      	b.n	80021da <SendData+0xca>
			continue;
 80021d8:	bf00      	nop
	for(int channel_index = 0; channel_index < MAX_CHANNEL_COUNT; channel_index++) {
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	3301      	adds	r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	ddad      	ble.n	8002142 <SendData+0x32>
	}

	while(CDC_Transmit_FS(usb_buffer, usb_buffer_index) != USBD_OK);
 80021e6:	bf00      	nop
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <SendData+0x104>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	4619      	mov	r1, r3
 80021f0:	480b      	ldr	r0, [pc, #44]	; (8002220 <SendData+0x110>)
 80021f2:	f00c f841 	bl	800e278 <CDC_Transmit_FS>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f5      	bne.n	80021e8 <SendData+0xd8>

	current_packet_count++;
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <SendData+0x118>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3301      	adds	r3, #1
 8002202:	4a09      	ldr	r2, [pc, #36]	; (8002228 <SendData+0x118>)
 8002204:	6013      	str	r3, [r2, #0]

	return 1;
 8002206:	2301      	movs	r3, #1
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	2000378c 	.word	0x2000378c
 8002214:	20003788 	.word	0x20003788
 8002218:	200027cc 	.word	0x200027cc
 800221c:	20000774 	.word	0x20000774
 8002220:	200027e8 	.word	0x200027e8
 8002224:	200027c4 	.word	0x200027c4
 8002228:	20000768 	.word	0x20000768

0800222c <SendTrasmissionReport>:

int SendTrasmissionReport(void) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b0c2      	sub	sp, #264	; 0x108
 8002230:	af00      	add	r7, sp, #0
	unsigned char report_msg[REPORT_MSG_SIZE];

	sprintf((char *)report_msg, "TrsErr:%d;DrpPkt:%d\n",
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <SendTrasmissionReport+0x4c>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <SendTrasmissionReport+0x50>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	1d38      	adds	r0, r7, #4
 800223c:	4910      	ldr	r1, [pc, #64]	; (8002280 <SendTrasmissionReport+0x54>)
 800223e:	f00d fa27 	bl	800f690 <siprintf>
									transmission_error,
									dropped_packet_count);
	uint16_t line_len = strlen((char *)report_msg);
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe f84b 	bl	80002e0 <strlen>
 800224a:	4603      	mov	r3, r0
 800224c:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
	while(CDC_Transmit_FS(report_msg, line_len) != USBD_OK);
 8002250:	bf00      	nop
 8002252:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	4611      	mov	r1, r2
 800225a:	4618      	mov	r0, r3
 800225c:	f00c f80c 	bl	800e278 <CDC_Transmit_FS>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f5      	bne.n	8002252 <SendTrasmissionReport+0x26>

	prog_state = DONE;
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <SendTrasmissionReport+0x58>)
 8002268:	2207      	movs	r2, #7
 800226a:	701a      	strb	r2, [r3, #0]

	return 1;
 800226c:	2301      	movs	r3, #1
}
 800226e:	4618      	mov	r0, r3
 8002270:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	200027dc 	.word	0x200027dc
 800227c:	20000770 	.word	0x20000770
 8002280:	08012910 	.word	0x08012910
 8002284:	200027b4 	.word	0x200027b4

08002288 <ResetStates>:

int ResetStates(void) {
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Stop_IT(&htim2);
 800228c:	4820      	ldr	r0, [pc, #128]	; (8002310 <ResetStates+0x88>)
 800228e:	f007 fc2d 	bl	8009aec <HAL_TIM_Base_Stop_IT>
	  HAL_ADC_Stop_DMA(&hadc1);
 8002292:	4820      	ldr	r0, [pc, #128]	; (8002314 <ResetStates+0x8c>)
 8002294:	f001 fca0 	bl	8003bd8 <HAL_ADC_Stop_DMA>
	  HAL_ADC_Stop_DMA(&hadc2);
 8002298:	481f      	ldr	r0, [pc, #124]	; (8002318 <ResetStates+0x90>)
 800229a:	f001 fc9d 	bl	8003bd8 <HAL_ADC_Stop_DMA>
	  HAL_ADC_Stop_DMA(&hadc3);
 800229e:	481f      	ldr	r0, [pc, #124]	; (800231c <ResetStates+0x94>)
 80022a0:	f001 fc9a 	bl	8003bd8 <HAL_ADC_Stop_DMA>
	  HAL_ADC_Stop_DMA(&hadc4);
 80022a4:	481e      	ldr	r0, [pc, #120]	; (8002320 <ResetStates+0x98>)
 80022a6:	f001 fc97 	bl	8003bd8 <HAL_ADC_Stop_DMA>
	  memset(adc_buffers, 0, sizeof(adc_buffers));
 80022aa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80022ae:	2100      	movs	r1, #0
 80022b0:	481c      	ldr	r0, [pc, #112]	; (8002324 <ResetStates+0x9c>)
 80022b2:	f00d fa50 	bl	800f756 <memset>
	  prog_state = IDLE;
 80022b6:	4b1c      	ldr	r3, [pc, #112]	; (8002328 <ResetStates+0xa0>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
	  conv_count_reached = 0;
 80022bc:	4b1b      	ldr	r3, [pc, #108]	; (800232c <ResetStates+0xa4>)
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
	  target_packet_count = 0;
 80022c2:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <ResetStates+0xa8>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
	  current_packet_count = 0;
 80022c8:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <ResetStates+0xac>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
	  measurement_activated = 0;
 80022ce:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <ResetStates+0xb0>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
	  channel_enabled_count = 0;
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <ResetStates+0xb4>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
	  dropped_packet_count = 0;
 80022da:	4b19      	ldr	r3, [pc, #100]	; (8002340 <ResetStates+0xb8>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
	  transmission_error = 0;
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <ResetStates+0xbc>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]

	  HAL_GPIO_WritePin(IND_LED_G_GPIO_Port, IND_LED_G_Pin, GPIO_PIN_RESET);
 80022e6:	2200      	movs	r2, #0
 80022e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ec:	4816      	ldr	r0, [pc, #88]	; (8002348 <ResetStates+0xc0>)
 80022ee:	f003 ff97 	bl	8006220 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IND_LED_R_GPIO_Port, IND_LED_R_Pin, GPIO_PIN_SET);
 80022f2:	2201      	movs	r2, #1
 80022f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022f8:	4813      	ldr	r0, [pc, #76]	; (8002348 <ResetStates+0xc0>)
 80022fa:	f003 ff91 	bl	8006220 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IND_LED_B_GPIO_Port, IND_LED_B_Pin, GPIO_PIN_SET);
 80022fe:	2201      	movs	r2, #1
 8002300:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002304:	4810      	ldr	r0, [pc, #64]	; (8002348 <ResetStates+0xc0>)
 8002306:	f003 ff8b 	bl	8006220 <HAL_GPIO_WritePin>

	  return 1;
 800230a:	2301      	movs	r3, #1
}
 800230c:	4618      	mov	r0, r3
 800230e:	bd80      	pop	{r7, pc}
 8002310:	2000071c 	.word	0x2000071c
 8002314:	20000384 	.word	0x20000384
 8002318:	200003f0 	.word	0x200003f0
 800231c:	2000045c 	.word	0x2000045c
 8002320:	200004c8 	.word	0x200004c8
 8002324:	20000774 	.word	0x20000774
 8002328:	200027b4 	.word	0x200027b4
 800232c:	200027e0 	.word	0x200027e0
 8002330:	2000076c 	.word	0x2000076c
 8002334:	20000768 	.word	0x20000768
 8002338:	200027e4 	.word	0x200027e4
 800233c:	200027c8 	.word	0x200027c8
 8002340:	20000770 	.word	0x20000770
 8002344:	200027dc 	.word	0x200027dc
 8002348:	48000800 	.word	0x48000800

0800234c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002350:	b672      	cpsid	i
}
 8002352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002354:	e7fe      	b.n	8002354 <Error_Handler+0x8>
	...

08002358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235e:	4b13      	ldr	r3, [pc, #76]	; (80023ac <HAL_MspInit+0x54>)
 8002360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002362:	4a12      	ldr	r2, [pc, #72]	; (80023ac <HAL_MspInit+0x54>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6613      	str	r3, [r2, #96]	; 0x60
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <HAL_MspInit+0x54>)
 800236c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <HAL_MspInit+0x54>)
 8002378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237a:	4a0c      	ldr	r2, [pc, #48]	; (80023ac <HAL_MspInit+0x54>)
 800237c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002380:	6593      	str	r3, [r2, #88]	; 0x58
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_MspInit+0x54>)
 8002384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 800238e:	2020      	movs	r0, #32
 8002390:	f000 fd68 	bl	8002e64 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8002394:	f000 fd8e 	bl	8002eb4 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8002398:	2000      	movs	r0, #0
 800239a:	f000 fd77 	bl	8002e8c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800239e:	f006 fb75 	bl	8008a8c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000

080023b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b0a4      	sub	sp, #144	; 0x90
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023cc:	2254      	movs	r2, #84	; 0x54
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f00d f9c0 	bl	800f756 <memset>
  if(hadc->Instance==ADC1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023de:	d16c      	bne.n	80024ba <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80023e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023e4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80023e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80023ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023f0:	4618      	mov	r0, r3
 80023f2:	f007 f85d 	bl	80094b0 <HAL_RCCEx_PeriphCLKConfig>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80023fc:	f7ff ffa6 	bl	800234c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002400:	4b9f      	ldr	r3, [pc, #636]	; (8002680 <HAL_ADC_MspInit+0x2d0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3301      	adds	r3, #1
 8002406:	4a9e      	ldr	r2, [pc, #632]	; (8002680 <HAL_ADC_MspInit+0x2d0>)
 8002408:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800240a:	4b9d      	ldr	r3, [pc, #628]	; (8002680 <HAL_ADC_MspInit+0x2d0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d10b      	bne.n	800242a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002412:	4b9c      	ldr	r3, [pc, #624]	; (8002684 <HAL_ADC_MspInit+0x2d4>)
 8002414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002416:	4a9b      	ldr	r2, [pc, #620]	; (8002684 <HAL_ADC_MspInit+0x2d4>)
 8002418:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800241c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800241e:	4b99      	ldr	r3, [pc, #612]	; (8002684 <HAL_ADC_MspInit+0x2d4>)
 8002420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002422:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242a:	4b96      	ldr	r3, [pc, #600]	; (8002684 <HAL_ADC_MspInit+0x2d4>)
 800242c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242e:	4a95      	ldr	r2, [pc, #596]	; (8002684 <HAL_ADC_MspInit+0x2d4>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002436:	4b93      	ldr	r3, [pc, #588]	; (8002684 <HAL_ADC_MspInit+0x2d4>)
 8002438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	623b      	str	r3, [r7, #32]
 8002440:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002442:	2301      	movs	r3, #1
 8002444:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002446:	2303      	movs	r3, #3
 8002448:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002452:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002456:	4619      	mov	r1, r3
 8002458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800245c:	f003 fc7c 	bl	8005d58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002460:	4b89      	ldr	r3, [pc, #548]	; (8002688 <HAL_ADC_MspInit+0x2d8>)
 8002462:	4a8a      	ldr	r2, [pc, #552]	; (800268c <HAL_ADC_MspInit+0x2dc>)
 8002464:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002466:	4b88      	ldr	r3, [pc, #544]	; (8002688 <HAL_ADC_MspInit+0x2d8>)
 8002468:	2205      	movs	r2, #5
 800246a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800246c:	4b86      	ldr	r3, [pc, #536]	; (8002688 <HAL_ADC_MspInit+0x2d8>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002472:	4b85      	ldr	r3, [pc, #532]	; (8002688 <HAL_ADC_MspInit+0x2d8>)
 8002474:	2200      	movs	r2, #0
 8002476:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002478:	4b83      	ldr	r3, [pc, #524]	; (8002688 <HAL_ADC_MspInit+0x2d8>)
 800247a:	2280      	movs	r2, #128	; 0x80
 800247c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800247e:	4b82      	ldr	r3, [pc, #520]	; (8002688 <HAL_ADC_MspInit+0x2d8>)
 8002480:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002484:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002486:	4b80      	ldr	r3, [pc, #512]	; (8002688 <HAL_ADC_MspInit+0x2d8>)
 8002488:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800248c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800248e:	4b7e      	ldr	r3, [pc, #504]	; (8002688 <HAL_ADC_MspInit+0x2d8>)
 8002490:	2220      	movs	r2, #32
 8002492:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002494:	4b7c      	ldr	r3, [pc, #496]	; (8002688 <HAL_ADC_MspInit+0x2d8>)
 8002496:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800249a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800249c:	487a      	ldr	r0, [pc, #488]	; (8002688 <HAL_ADC_MspInit+0x2d8>)
 800249e:	f003 f8f9 	bl	8005694 <HAL_DMA_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80024a8:	f7ff ff50 	bl	800234c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a76      	ldr	r2, [pc, #472]	; (8002688 <HAL_ADC_MspInit+0x2d8>)
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
 80024b2:	4a75      	ldr	r2, [pc, #468]	; (8002688 <HAL_ADC_MspInit+0x2d8>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80024b8:	e16b      	b.n	8002792 <HAL_ADC_MspInit+0x3e2>
  else if(hadc->Instance==ADC2)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a74      	ldr	r2, [pc, #464]	; (8002690 <HAL_ADC_MspInit+0x2e0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d16b      	bne.n	800259c <HAL_ADC_MspInit+0x1ec>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80024c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80024ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80024ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024d4:	4618      	mov	r0, r3
 80024d6:	f006 ffeb 	bl	80094b0 <HAL_RCCEx_PeriphCLKConfig>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 80024e0:	f7ff ff34 	bl	800234c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80024e4:	4b66      	ldr	r3, [pc, #408]	; (8002680 <HAL_ADC_MspInit+0x2d0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	3301      	adds	r3, #1
 80024ea:	4a65      	ldr	r2, [pc, #404]	; (8002680 <HAL_ADC_MspInit+0x2d0>)
 80024ec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80024ee:	4b64      	ldr	r3, [pc, #400]	; (8002680 <HAL_ADC_MspInit+0x2d0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d10b      	bne.n	800250e <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80024f6:	4b63      	ldr	r3, [pc, #396]	; (8002684 <HAL_ADC_MspInit+0x2d4>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	4a62      	ldr	r2, [pc, #392]	; (8002684 <HAL_ADC_MspInit+0x2d4>)
 80024fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002502:	4b60      	ldr	r3, [pc, #384]	; (8002684 <HAL_ADC_MspInit+0x2d4>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800250a:	61fb      	str	r3, [r7, #28]
 800250c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800250e:	4b5d      	ldr	r3, [pc, #372]	; (8002684 <HAL_ADC_MspInit+0x2d4>)
 8002510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002512:	4a5c      	ldr	r2, [pc, #368]	; (8002684 <HAL_ADC_MspInit+0x2d4>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800251a:	4b5a      	ldr	r3, [pc, #360]	; (8002684 <HAL_ADC_MspInit+0x2d4>)
 800251c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	61bb      	str	r3, [r7, #24]
 8002524:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002526:	2340      	movs	r3, #64	; 0x40
 8002528:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800252a:	2303      	movs	r3, #3
 800252c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002536:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800253a:	4619      	mov	r1, r3
 800253c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002540:	f003 fc0a 	bl	8005d58 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8002544:	4b53      	ldr	r3, [pc, #332]	; (8002694 <HAL_ADC_MspInit+0x2e4>)
 8002546:	4a54      	ldr	r2, [pc, #336]	; (8002698 <HAL_ADC_MspInit+0x2e8>)
 8002548:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800254a:	4b52      	ldr	r3, [pc, #328]	; (8002694 <HAL_ADC_MspInit+0x2e4>)
 800254c:	2224      	movs	r2, #36	; 0x24
 800254e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002550:	4b50      	ldr	r3, [pc, #320]	; (8002694 <HAL_ADC_MspInit+0x2e4>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002556:	4b4f      	ldr	r3, [pc, #316]	; (8002694 <HAL_ADC_MspInit+0x2e4>)
 8002558:	2200      	movs	r2, #0
 800255a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800255c:	4b4d      	ldr	r3, [pc, #308]	; (8002694 <HAL_ADC_MspInit+0x2e4>)
 800255e:	2280      	movs	r2, #128	; 0x80
 8002560:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002562:	4b4c      	ldr	r3, [pc, #304]	; (8002694 <HAL_ADC_MspInit+0x2e4>)
 8002564:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002568:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800256a:	4b4a      	ldr	r3, [pc, #296]	; (8002694 <HAL_ADC_MspInit+0x2e4>)
 800256c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002570:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002572:	4b48      	ldr	r3, [pc, #288]	; (8002694 <HAL_ADC_MspInit+0x2e4>)
 8002574:	2220      	movs	r2, #32
 8002576:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002578:	4b46      	ldr	r3, [pc, #280]	; (8002694 <HAL_ADC_MspInit+0x2e4>)
 800257a:	2200      	movs	r2, #0
 800257c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800257e:	4845      	ldr	r0, [pc, #276]	; (8002694 <HAL_ADC_MspInit+0x2e4>)
 8002580:	f003 f888 	bl	8005694 <HAL_DMA_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_ADC_MspInit+0x1de>
      Error_Handler();
 800258a:	f7ff fedf 	bl	800234c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a40      	ldr	r2, [pc, #256]	; (8002694 <HAL_ADC_MspInit+0x2e4>)
 8002592:	655a      	str	r2, [r3, #84]	; 0x54
 8002594:	4a3f      	ldr	r2, [pc, #252]	; (8002694 <HAL_ADC_MspInit+0x2e4>)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6293      	str	r3, [r2, #40]	; 0x28
}
 800259a:	e0fa      	b.n	8002792 <HAL_ADC_MspInit+0x3e2>
  else if(hadc->Instance==ADC3)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a3e      	ldr	r2, [pc, #248]	; (800269c <HAL_ADC_MspInit+0x2ec>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	f040 8084 	bne.w	80026b0 <HAL_ADC_MspInit+0x300>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80025a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80025ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025b2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025b8:	4618      	mov	r0, r3
 80025ba:	f006 ff79 	bl	80094b0 <HAL_RCCEx_PeriphCLKConfig>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_ADC_MspInit+0x218>
      Error_Handler();
 80025c4:	f7ff fec2 	bl	800234c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80025c8:	4b35      	ldr	r3, [pc, #212]	; (80026a0 <HAL_ADC_MspInit+0x2f0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3301      	adds	r3, #1
 80025ce:	4a34      	ldr	r2, [pc, #208]	; (80026a0 <HAL_ADC_MspInit+0x2f0>)
 80025d0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80025d2:	4b33      	ldr	r3, [pc, #204]	; (80026a0 <HAL_ADC_MspInit+0x2f0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d10b      	bne.n	80025f2 <HAL_ADC_MspInit+0x242>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80025da:	4b2a      	ldr	r3, [pc, #168]	; (8002684 <HAL_ADC_MspInit+0x2d4>)
 80025dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025de:	4a29      	ldr	r2, [pc, #164]	; (8002684 <HAL_ADC_MspInit+0x2d4>)
 80025e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025e6:	4b27      	ldr	r3, [pc, #156]	; (8002684 <HAL_ADC_MspInit+0x2d4>)
 80025e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f2:	4b24      	ldr	r3, [pc, #144]	; (8002684 <HAL_ADC_MspInit+0x2d4>)
 80025f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f6:	4a23      	ldr	r2, [pc, #140]	; (8002684 <HAL_ADC_MspInit+0x2d4>)
 80025f8:	f043 0302 	orr.w	r3, r3, #2
 80025fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025fe:	4b21      	ldr	r3, [pc, #132]	; (8002684 <HAL_ADC_MspInit+0x2d4>)
 8002600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800260a:	2302      	movs	r3, #2
 800260c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800260e:	2303      	movs	r3, #3
 8002610:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800261e:	4619      	mov	r1, r3
 8002620:	4820      	ldr	r0, [pc, #128]	; (80026a4 <HAL_ADC_MspInit+0x2f4>)
 8002622:	f003 fb99 	bl	8005d58 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8002626:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <HAL_ADC_MspInit+0x2f8>)
 8002628:	4a20      	ldr	r2, [pc, #128]	; (80026ac <HAL_ADC_MspInit+0x2fc>)
 800262a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800262c:	4b1e      	ldr	r3, [pc, #120]	; (80026a8 <HAL_ADC_MspInit+0x2f8>)
 800262e:	2225      	movs	r2, #37	; 0x25
 8002630:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002632:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <HAL_ADC_MspInit+0x2f8>)
 8002634:	2200      	movs	r2, #0
 8002636:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002638:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <HAL_ADC_MspInit+0x2f8>)
 800263a:	2200      	movs	r2, #0
 800263c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800263e:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <HAL_ADC_MspInit+0x2f8>)
 8002640:	2280      	movs	r2, #128	; 0x80
 8002642:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002644:	4b18      	ldr	r3, [pc, #96]	; (80026a8 <HAL_ADC_MspInit+0x2f8>)
 8002646:	f44f 7280 	mov.w	r2, #256	; 0x100
 800264a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800264c:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <HAL_ADC_MspInit+0x2f8>)
 800264e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002652:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002654:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <HAL_ADC_MspInit+0x2f8>)
 8002656:	2220      	movs	r2, #32
 8002658:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800265a:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <HAL_ADC_MspInit+0x2f8>)
 800265c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002660:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002662:	4811      	ldr	r0, [pc, #68]	; (80026a8 <HAL_ADC_MspInit+0x2f8>)
 8002664:	f003 f816 	bl	8005694 <HAL_DMA_Init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_ADC_MspInit+0x2c2>
      Error_Handler();
 800266e:	f7ff fe6d 	bl	800234c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a0c      	ldr	r2, [pc, #48]	; (80026a8 <HAL_ADC_MspInit+0x2f8>)
 8002676:	655a      	str	r2, [r3, #84]	; 0x54
 8002678:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <HAL_ADC_MspInit+0x2f8>)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800267e:	e088      	b.n	8002792 <HAL_ADC_MspInit+0x3e2>
 8002680:	20003790 	.word	0x20003790
 8002684:	40021000 	.word	0x40021000
 8002688:	20000534 	.word	0x20000534
 800268c:	40020008 	.word	0x40020008
 8002690:	50000100 	.word	0x50000100
 8002694:	20000594 	.word	0x20000594
 8002698:	4002001c 	.word	0x4002001c
 800269c:	50000400 	.word	0x50000400
 80026a0:	20003794 	.word	0x20003794
 80026a4:	48000400 	.word	0x48000400
 80026a8:	200005f4 	.word	0x200005f4
 80026ac:	40020030 	.word	0x40020030
  else if(hadc->Instance==ADC4)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a39      	ldr	r2, [pc, #228]	; (800279c <HAL_ADC_MspInit+0x3ec>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d16b      	bne.n	8002792 <HAL_ADC_MspInit+0x3e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80026ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026be:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80026c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026c4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026ca:	4618      	mov	r0, r3
 80026cc:	f006 fef0 	bl	80094b0 <HAL_RCCEx_PeriphCLKConfig>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_ADC_MspInit+0x32a>
      Error_Handler();
 80026d6:	f7ff fe39 	bl	800234c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80026da:	4b31      	ldr	r3, [pc, #196]	; (80027a0 <HAL_ADC_MspInit+0x3f0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	3301      	adds	r3, #1
 80026e0:	4a2f      	ldr	r2, [pc, #188]	; (80027a0 <HAL_ADC_MspInit+0x3f0>)
 80026e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80026e4:	4b2e      	ldr	r3, [pc, #184]	; (80027a0 <HAL_ADC_MspInit+0x3f0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d10b      	bne.n	8002704 <HAL_ADC_MspInit+0x354>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80026ec:	4b2d      	ldr	r3, [pc, #180]	; (80027a4 <HAL_ADC_MspInit+0x3f4>)
 80026ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f0:	4a2c      	ldr	r2, [pc, #176]	; (80027a4 <HAL_ADC_MspInit+0x3f4>)
 80026f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026f8:	4b2a      	ldr	r3, [pc, #168]	; (80027a4 <HAL_ADC_MspInit+0x3f4>)
 80026fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002704:	4b27      	ldr	r3, [pc, #156]	; (80027a4 <HAL_ADC_MspInit+0x3f4>)
 8002706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002708:	4a26      	ldr	r2, [pc, #152]	; (80027a4 <HAL_ADC_MspInit+0x3f4>)
 800270a:	f043 0302 	orr.w	r3, r3, #2
 800270e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002710:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <HAL_ADC_MspInit+0x3f4>)
 8002712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800271c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002720:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002722:	2303      	movs	r3, #3
 8002724:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002732:	4619      	mov	r1, r3
 8002734:	481c      	ldr	r0, [pc, #112]	; (80027a8 <HAL_ADC_MspInit+0x3f8>)
 8002736:	f003 fb0f 	bl	8005d58 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 800273a:	4b1c      	ldr	r3, [pc, #112]	; (80027ac <HAL_ADC_MspInit+0x3fc>)
 800273c:	4a1c      	ldr	r2, [pc, #112]	; (80027b0 <HAL_ADC_MspInit+0x400>)
 800273e:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8002740:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <HAL_ADC_MspInit+0x3fc>)
 8002742:	2226      	movs	r2, #38	; 0x26
 8002744:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002746:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_ADC_MspInit+0x3fc>)
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800274c:	4b17      	ldr	r3, [pc, #92]	; (80027ac <HAL_ADC_MspInit+0x3fc>)
 800274e:	2200      	movs	r2, #0
 8002750:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8002752:	4b16      	ldr	r3, [pc, #88]	; (80027ac <HAL_ADC_MspInit+0x3fc>)
 8002754:	2280      	movs	r2, #128	; 0x80
 8002756:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002758:	4b14      	ldr	r3, [pc, #80]	; (80027ac <HAL_ADC_MspInit+0x3fc>)
 800275a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800275e:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002760:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_ADC_MspInit+0x3fc>)
 8002762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002766:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8002768:	4b10      	ldr	r3, [pc, #64]	; (80027ac <HAL_ADC_MspInit+0x3fc>)
 800276a:	2220      	movs	r2, #32
 800276c:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_HIGH;
 800276e:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <HAL_ADC_MspInit+0x3fc>)
 8002770:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002774:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8002776:	480d      	ldr	r0, [pc, #52]	; (80027ac <HAL_ADC_MspInit+0x3fc>)
 8002778:	f002 ff8c 	bl	8005694 <HAL_DMA_Init>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_ADC_MspInit+0x3d6>
      Error_Handler();
 8002782:	f7ff fde3 	bl	800234c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a08      	ldr	r2, [pc, #32]	; (80027ac <HAL_ADC_MspInit+0x3fc>)
 800278a:	655a      	str	r2, [r3, #84]	; 0x54
 800278c:	4a07      	ldr	r2, [pc, #28]	; (80027ac <HAL_ADC_MspInit+0x3fc>)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002792:	bf00      	nop
 8002794:	3790      	adds	r7, #144	; 0x90
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	50000500 	.word	0x50000500
 80027a0:	20003794 	.word	0x20003794
 80027a4:	40021000 	.word	0x40021000
 80027a8:	48000400 	.word	0x48000400
 80027ac:	20000654 	.word	0x20000654
 80027b0:	40020044 	.word	0x40020044

080027b4 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027c4:	d119      	bne.n	80027fa <HAL_ADC_MspDeInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_ADC12_CLK_ENABLED--;
 80027c6:	4b3c      	ldr	r3, [pc, #240]	; (80028b8 <HAL_ADC_MspDeInit+0x104>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	4a3a      	ldr	r2, [pc, #232]	; (80028b8 <HAL_ADC_MspDeInit+0x104>)
 80027ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==0){
 80027d0:	4b39      	ldr	r3, [pc, #228]	; (80028b8 <HAL_ADC_MspDeInit+0x104>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d105      	bne.n	80027e4 <HAL_ADC_MspDeInit+0x30>
      __HAL_RCC_ADC12_CLK_DISABLE();
 80027d8:	4b38      	ldr	r3, [pc, #224]	; (80028bc <HAL_ADC_MspDeInit+0x108>)
 80027da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027dc:	4a37      	ldr	r2, [pc, #220]	; (80028bc <HAL_ADC_MspDeInit+0x108>)
 80027de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027e2:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 80027e4:	2101      	movs	r1, #1
 80027e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ea:	f003 fc37 	bl	800605c <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f2:	4618      	mov	r0, r3
 80027f4:	f002 fff6 	bl	80057e4 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC4_MspDeInit 1 */

  /* USER CODE END ADC4_MspDeInit 1 */
  }

}
 80027f8:	e05a      	b.n	80028b0 <HAL_ADC_MspDeInit+0xfc>
  else if(hadc->Instance==ADC2)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a30      	ldr	r2, [pc, #192]	; (80028c0 <HAL_ADC_MspDeInit+0x10c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d119      	bne.n	8002838 <HAL_ADC_MspDeInit+0x84>
    HAL_RCC_ADC12_CLK_ENABLED--;
 8002804:	4b2c      	ldr	r3, [pc, #176]	; (80028b8 <HAL_ADC_MspDeInit+0x104>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	3b01      	subs	r3, #1
 800280a:	4a2b      	ldr	r2, [pc, #172]	; (80028b8 <HAL_ADC_MspDeInit+0x104>)
 800280c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==0){
 800280e:	4b2a      	ldr	r3, [pc, #168]	; (80028b8 <HAL_ADC_MspDeInit+0x104>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d105      	bne.n	8002822 <HAL_ADC_MspDeInit+0x6e>
      __HAL_RCC_ADC12_CLK_DISABLE();
 8002816:	4b29      	ldr	r3, [pc, #164]	; (80028bc <HAL_ADC_MspDeInit+0x108>)
 8002818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281a:	4a28      	ldr	r2, [pc, #160]	; (80028bc <HAL_ADC_MspDeInit+0x108>)
 800281c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002820:	64d3      	str	r3, [r2, #76]	; 0x4c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 8002822:	2140      	movs	r1, #64	; 0x40
 8002824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002828:	f003 fc18 	bl	800605c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hadc->DMA_Handle);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002830:	4618      	mov	r0, r3
 8002832:	f002 ffd7 	bl	80057e4 <HAL_DMA_DeInit>
}
 8002836:	e03b      	b.n	80028b0 <HAL_ADC_MspDeInit+0xfc>
  else if(hadc->Instance==ADC3)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a21      	ldr	r2, [pc, #132]	; (80028c4 <HAL_ADC_MspDeInit+0x110>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d118      	bne.n	8002874 <HAL_ADC_MspDeInit+0xc0>
    HAL_RCC_ADC345_CLK_ENABLED--;
 8002842:	4b21      	ldr	r3, [pc, #132]	; (80028c8 <HAL_ADC_MspDeInit+0x114>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	3b01      	subs	r3, #1
 8002848:	4a1f      	ldr	r2, [pc, #124]	; (80028c8 <HAL_ADC_MspDeInit+0x114>)
 800284a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==0){
 800284c:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <HAL_ADC_MspDeInit+0x114>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d105      	bne.n	8002860 <HAL_ADC_MspDeInit+0xac>
      __HAL_RCC_ADC345_CLK_DISABLE();
 8002854:	4b19      	ldr	r3, [pc, #100]	; (80028bc <HAL_ADC_MspDeInit+0x108>)
 8002856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002858:	4a18      	ldr	r2, [pc, #96]	; (80028bc <HAL_ADC_MspDeInit+0x108>)
 800285a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800285e:	64d3      	str	r3, [r2, #76]	; 0x4c
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_1);
 8002860:	2102      	movs	r1, #2
 8002862:	481a      	ldr	r0, [pc, #104]	; (80028cc <HAL_ADC_MspDeInit+0x118>)
 8002864:	f003 fbfa 	bl	800605c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286c:	4618      	mov	r0, r3
 800286e:	f002 ffb9 	bl	80057e4 <HAL_DMA_DeInit>
}
 8002872:	e01d      	b.n	80028b0 <HAL_ADC_MspDeInit+0xfc>
  else if(hadc->Instance==ADC4)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a15      	ldr	r2, [pc, #84]	; (80028d0 <HAL_ADC_MspDeInit+0x11c>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d118      	bne.n	80028b0 <HAL_ADC_MspDeInit+0xfc>
    HAL_RCC_ADC345_CLK_ENABLED--;
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_ADC_MspDeInit+0x114>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	3b01      	subs	r3, #1
 8002884:	4a10      	ldr	r2, [pc, #64]	; (80028c8 <HAL_ADC_MspDeInit+0x114>)
 8002886:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==0){
 8002888:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <HAL_ADC_MspDeInit+0x114>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <HAL_ADC_MspDeInit+0xe8>
      __HAL_RCC_ADC345_CLK_DISABLE();
 8002890:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <HAL_ADC_MspDeInit+0x108>)
 8002892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002894:	4a09      	ldr	r2, [pc, #36]	; (80028bc <HAL_ADC_MspDeInit+0x108>)
 8002896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800289a:	64d3      	str	r3, [r2, #76]	; 0x4c
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15);
 800289c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028a0:	480a      	ldr	r0, [pc, #40]	; (80028cc <HAL_ADC_MspDeInit+0x118>)
 80028a2:	f003 fbdb 	bl	800605c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hadc->DMA_Handle);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028aa:	4618      	mov	r0, r3
 80028ac:	f002 ff9a 	bl	80057e4 <HAL_DMA_DeInit>
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20003790 	.word	0x20003790
 80028bc:	40021000 	.word	0x40021000
 80028c0:	50000100 	.word	0x50000100
 80028c4:	50000400 	.word	0x50000400
 80028c8:	20003794 	.word	0x20003794
 80028cc:	48000400 	.word	0x48000400
 80028d0:	50000500 	.word	0x50000500

080028d4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08a      	sub	sp, #40	; 0x28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	f107 0314 	add.w	r3, r7, #20
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a15      	ldr	r2, [pc, #84]	; (8002948 <HAL_DAC_MspInit+0x74>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d124      	bne.n	8002940 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <HAL_DAC_MspInit+0x78>)
 80028f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fa:	4a14      	ldr	r2, [pc, #80]	; (800294c <HAL_DAC_MspInit+0x78>)
 80028fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_DAC_MspInit+0x78>)
 8002904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290e:	4b0f      	ldr	r3, [pc, #60]	; (800294c <HAL_DAC_MspInit+0x78>)
 8002910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002912:	4a0e      	ldr	r2, [pc, #56]	; (800294c <HAL_DAC_MspInit+0x78>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800291a:	4b0c      	ldr	r3, [pc, #48]	; (800294c <HAL_DAC_MspInit+0x78>)
 800291c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002926:	2310      	movs	r3, #16
 8002928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800292a:	2303      	movs	r3, #3
 800292c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002932:	f107 0314 	add.w	r3, r7, #20
 8002936:	4619      	mov	r1, r3
 8002938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800293c:	f003 fa0c 	bl	8005d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002940:	bf00      	nop
 8002942:	3728      	adds	r7, #40	; 0x28
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	50000800 	.word	0x50000800
 800294c:	40021000 	.word	0x40021000

08002950 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b09e      	sub	sp, #120	; 0x78
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002968:	f107 0310 	add.w	r3, r7, #16
 800296c:	2254      	movs	r2, #84	; 0x54
 800296e:	2100      	movs	r1, #0
 8002970:	4618      	mov	r0, r3
 8002972:	f00c fef0 	bl	800f756 <memset>
  if(hi2c->Instance==I2C3)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a1f      	ldr	r2, [pc, #124]	; (80029f8 <HAL_I2C_MspInit+0xa8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d137      	bne.n	80029f0 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002984:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002986:	2300      	movs	r3, #0
 8002988:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800298a:	f107 0310 	add.w	r3, r7, #16
 800298e:	4618      	mov	r0, r3
 8002990:	f006 fd8e 	bl	80094b0 <HAL_RCCEx_PeriphCLKConfig>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800299a:	f7ff fcd7 	bl	800234c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800299e:	4b17      	ldr	r3, [pc, #92]	; (80029fc <HAL_I2C_MspInit+0xac>)
 80029a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a2:	4a16      	ldr	r2, [pc, #88]	; (80029fc <HAL_I2C_MspInit+0xac>)
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029aa:	4b14      	ldr	r3, [pc, #80]	; (80029fc <HAL_I2C_MspInit+0xac>)
 80029ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = TEMP_SCL_Pin|TEMP_SDA_Pin;
 80029b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029ba:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029bc:	2312      	movs	r3, #18
 80029be:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c4:	2300      	movs	r3, #0
 80029c6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80029c8:	2308      	movs	r3, #8
 80029ca:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80029d0:	4619      	mov	r1, r3
 80029d2:	480b      	ldr	r0, [pc, #44]	; (8002a00 <HAL_I2C_MspInit+0xb0>)
 80029d4:	f003 f9c0 	bl	8005d58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <HAL_I2C_MspInit+0xac>)
 80029da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029dc:	4a07      	ldr	r2, [pc, #28]	; (80029fc <HAL_I2C_MspInit+0xac>)
 80029de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029e2:	6593      	str	r3, [r2, #88]	; 0x58
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_I2C_MspInit+0xac>)
 80029e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80029f0:	bf00      	nop
 80029f2:	3778      	adds	r7, #120	; 0x78
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40007800 	.word	0x40007800
 80029fc:	40021000 	.word	0x40021000
 8002a00:	48000800 	.word	0x48000800

08002a04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a14:	d10b      	bne.n	8002a2e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a16:	4b09      	ldr	r3, [pc, #36]	; (8002a3c <HAL_TIM_Base_MspInit+0x38>)
 8002a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1a:	4a08      	ldr	r2, [pc, #32]	; (8002a3c <HAL_TIM_Base_MspInit+0x38>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	6593      	str	r3, [r2, #88]	; 0x58
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <HAL_TIM_Base_MspInit+0x38>)
 8002a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a2e:	bf00      	nop
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000

08002a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a44:	e7fe      	b.n	8002a44 <NMI_Handler+0x4>

08002a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a4a:	e7fe      	b.n	8002a4a <HardFault_Handler+0x4>

08002a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a50:	e7fe      	b.n	8002a50 <MemManage_Handler+0x4>

08002a52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a56:	e7fe      	b.n	8002a56 <BusFault_Handler+0x4>

08002a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a5c:	e7fe      	b.n	8002a5c <UsageFault_Handler+0x4>

08002a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a8c:	f000 f9aa 	bl	8002de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a90:	bf00      	nop
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a98:	4804      	ldr	r0, [pc, #16]	; (8002aac <DMA1_Channel1_IRQHandler+0x18>)
 8002a9a:	f003 f80d 	bl	8005ab8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  dma_int_counter++;
 8002a9e:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <DMA1_Channel1_IRQHandler+0x1c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	4a02      	ldr	r2, [pc, #8]	; (8002ab0 <DMA1_Channel1_IRQHandler+0x1c>)
 8002aa6:	6013      	str	r3, [r2, #0]
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002aa8:	bf00      	nop
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20000534 	.word	0x20000534
 8002ab0:	20003798 	.word	0x20003798

08002ab4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002ab8:	4802      	ldr	r0, [pc, #8]	; (8002ac4 <DMA1_Channel2_IRQHandler+0x10>)
 8002aba:	f002 fffd 	bl	8005ab8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000594 	.word	0x20000594

08002ac8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002acc:	4802      	ldr	r0, [pc, #8]	; (8002ad8 <DMA1_Channel3_IRQHandler+0x10>)
 8002ace:	f002 fff3 	bl	8005ab8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	200005f4 	.word	0x200005f4

08002adc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8002ae0:	4802      	ldr	r0, [pc, #8]	; (8002aec <DMA1_Channel4_IRQHandler+0x10>)
 8002ae2:	f002 ffe9 	bl	8005ab8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000654 	.word	0x20000654

08002af0 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002af4:	4802      	ldr	r0, [pc, #8]	; (8002b00 <USB_HP_IRQHandler+0x10>)
 8002af6:	f004 fae0 	bl	80070ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20004c78 	.word	0x20004c78

08002b04 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002b08:	4802      	ldr	r0, [pc, #8]	; (8002b14 <USB_LP_IRQHandler+0x10>)
 8002b0a:	f004 fad6 	bl	80070ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20004c78 	.word	0x20004c78

08002b18 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TRIG_SHORT_Pin);
 8002b1c:	2020      	movs	r0, #32
 8002b1e:	f003 fb97 	bl	8006250 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TRIG_EXT_2_Pin);
 8002b22:	2040      	movs	r0, #64	; 0x40
 8002b24:	f003 fb94 	bl	8006250 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TRIG_EXT_1_Pin);
 8002b28:	2080      	movs	r0, #128	; 0x80
 8002b2a:	f003 fb91 	bl	8006250 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  measurement_activated = 1;
 8002b2e:	4b02      	ldr	r3, [pc, #8]	; (8002b38 <EXTI9_5_IRQHandler+0x20>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b34:	bf00      	nop
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	200027e4 	.word	0x200027e4

08002b3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return 1;
 8002b40:	2301      	movs	r3, #1
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <_kill>:

int _kill(int pid, int sig)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b56:	f00c febf 	bl	800f8d8 <__errno>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2216      	movs	r2, #22
 8002b5e:	601a      	str	r2, [r3, #0]
  return -1;
 8002b60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <_exit>:

void _exit (int status)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b74:	f04f 31ff 	mov.w	r1, #4294967295
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ffe7 	bl	8002b4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b7e:	e7fe      	b.n	8002b7e <_exit+0x12>

08002b80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	e00a      	b.n	8002ba8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b92:	f3af 8000 	nop.w
 8002b96:	4601      	mov	r1, r0
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	60ba      	str	r2, [r7, #8]
 8002b9e:	b2ca      	uxtb	r2, r1
 8002ba0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	dbf0      	blt.n	8002b92 <_read+0x12>
  }

  return len;
 8002bb0:	687b      	ldr	r3, [r7, #4]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	e009      	b.n	8002be0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	60ba      	str	r2, [r7, #8]
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	dbf1      	blt.n	8002bcc <_write+0x12>
  }
  return len;
 8002be8:	687b      	ldr	r3, [r7, #4]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <_close>:

int _close(int file)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c1a:	605a      	str	r2, [r3, #4]
  return 0;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <_isatty>:

int _isatty(int file)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c32:	2301      	movs	r3, #1
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c64:	4a14      	ldr	r2, [pc, #80]	; (8002cb8 <_sbrk+0x5c>)
 8002c66:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <_sbrk+0x60>)
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c70:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <_sbrk+0x64>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d102      	bne.n	8002c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c78:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <_sbrk+0x64>)
 8002c7a:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <_sbrk+0x68>)
 8002c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c7e:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <_sbrk+0x64>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d207      	bcs.n	8002c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c8c:	f00c fe24 	bl	800f8d8 <__errno>
 8002c90:	4603      	mov	r3, r0
 8002c92:	220c      	movs	r2, #12
 8002c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c96:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9a:	e009      	b.n	8002cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c9c:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <_sbrk+0x64>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ca2:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <_sbrk+0x64>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	4a05      	ldr	r2, [pc, #20]	; (8002cc0 <_sbrk+0x64>)
 8002cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cae:	68fb      	ldr	r3, [r7, #12]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20020000 	.word	0x20020000
 8002cbc:	00001000 	.word	0x00001000
 8002cc0:	2000379c 	.word	0x2000379c
 8002cc4:	200052c0 	.word	0x200052c0

08002cc8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <SystemInit+0x20>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd2:	4a05      	ldr	r2, [pc, #20]	; (8002ce8 <SystemInit+0x20>)
 8002cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002cec:	480d      	ldr	r0, [pc, #52]	; (8002d24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cf0:	f7ff ffea 	bl	8002cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cf4:	480c      	ldr	r0, [pc, #48]	; (8002d28 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cf6:	490d      	ldr	r1, [pc, #52]	; (8002d2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cf8:	4a0d      	ldr	r2, [pc, #52]	; (8002d30 <LoopForever+0xe>)
  movs r3, #0
 8002cfa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002cfc:	e002      	b.n	8002d04 <LoopCopyDataInit>

08002cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d02:	3304      	adds	r3, #4

08002d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d08:	d3f9      	bcc.n	8002cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d0a:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d0c:	4c0a      	ldr	r4, [pc, #40]	; (8002d38 <LoopForever+0x16>)
  movs r3, #0
 8002d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d10:	e001      	b.n	8002d16 <LoopFillZerobss>

08002d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d14:	3204      	adds	r2, #4

08002d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d18:	d3fb      	bcc.n	8002d12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d1a:	f00c fde3 	bl	800f8e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d1e:	f7fd ffeb 	bl	8000cf8 <main>

08002d22 <LoopForever>:

LoopForever:
    b LoopForever
 8002d22:	e7fe      	b.n	8002d22 <LoopForever>
  ldr   r0, =_estack
 8002d24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d2c:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 8002d30:	08012ef8 	.word	0x08012ef8
  ldr r2, =_sbss
 8002d34:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 8002d38:	200052c0 	.word	0x200052c0

08002d3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d3c:	e7fe      	b.n	8002d3c <ADC1_2_IRQHandler>

08002d3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d48:	2003      	movs	r0, #3
 8002d4a:	f002 f8c3 	bl	8004ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f000 f80e 	bl	8002d70 <HAL_InitTick>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	71fb      	strb	r3, [r7, #7]
 8002d5e:	e001      	b.n	8002d64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d60:	f7ff fafa 	bl	8002358 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d64:	79fb      	ldrb	r3, [r7, #7]

}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002d7c:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <HAL_InitTick+0x68>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d022      	beq.n	8002dca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002d84:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <HAL_InitTick+0x6c>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <HAL_InitTick+0x68>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d90:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f002 f8ce 	bl	8004f3a <HAL_SYSTICK_Config>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10f      	bne.n	8002dc4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b0f      	cmp	r3, #15
 8002da8:	d809      	bhi.n	8002dbe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002daa:	2200      	movs	r2, #0
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	f04f 30ff 	mov.w	r0, #4294967295
 8002db2:	f002 f89a 	bl	8004eea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002db6:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <HAL_InitTick+0x70>)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	e007      	b.n	8002dce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	73fb      	strb	r3, [r7, #15]
 8002dc2:	e004      	b.n	8002dce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
 8002dc8:	e001      	b.n	8002dce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20000014 	.word	0x20000014
 8002ddc:	2000000c 	.word	0x2000000c
 8002de0:	20000010 	.word	0x20000010

08002de4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <HAL_IncTick+0x1c>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <HAL_IncTick+0x20>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4413      	add	r3, r2
 8002df2:	4a03      	ldr	r2, [pc, #12]	; (8002e00 <HAL_IncTick+0x1c>)
 8002df4:	6013      	str	r3, [r2, #0]
}
 8002df6:	bf00      	nop
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	200037a0 	.word	0x200037a0
 8002e04:	20000014 	.word	0x20000014

08002e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e0c:	4b03      	ldr	r3, [pc, #12]	; (8002e1c <HAL_GetTick+0x14>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	200037a0 	.word	0x200037a0

08002e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e28:	f7ff ffee 	bl	8002e08 <HAL_GetTick>
 8002e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e38:	d004      	beq.n	8002e44 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_Delay+0x40>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4413      	add	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e44:	bf00      	nop
 8002e46:	f7ff ffdf 	bl	8002e08 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d8f7      	bhi.n	8002e46 <HAL_Delay+0x26>
  {
  }
}
 8002e56:	bf00      	nop
 8002e58:	bf00      	nop
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000014 	.word	0x20000014

08002e64 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8002e6c:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e74:	4904      	ldr	r1, [pc, #16]	; (8002e88 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	600b      	str	r3, [r1, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	40010030 	.word	0x40010030

08002e8c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f023 0202 	bic.w	r2, r3, #2
 8002e9c:	4904      	ldr	r1, [pc, #16]	; (8002eb0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	600b      	str	r3, [r1, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	40010030 	.word	0x40010030

08002eb4 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002eba:	4b0f      	ldr	r3, [pc, #60]	; (8002ef8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a0e      	ldr	r2, [pc, #56]	; (8002ef8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ec6:	f7ff ff9f 	bl	8002e08 <HAL_GetTick>
 8002eca:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8002ecc:	e008      	b.n	8002ee0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8002ece:	f7ff ff9b 	bl	8002e08 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b0a      	cmp	r3, #10
 8002eda:	d901      	bls.n	8002ee0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e006      	b.n	8002eee <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8002ee0:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0f0      	beq.n	8002ece <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40010030 	.word	0x40010030

08002efc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	609a      	str	r2, [r3, #8]
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	609a      	str	r2, [r3, #8]
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
 8002f70:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	3360      	adds	r3, #96	; 0x60
 8002f76:	461a      	mov	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <LL_ADC_SetOffset+0x44>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002f9c:	bf00      	nop
 8002f9e:	371c      	adds	r7, #28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	03fff000 	.word	0x03fff000

08002fac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3360      	adds	r3, #96	; 0x60
 8002fba:	461a      	mov	r2, r3
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3360      	adds	r3, #96	; 0x60
 8002fe8:	461a      	mov	r2, r3
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003002:	bf00      	nop
 8003004:	371c      	adds	r7, #28
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800300e:	b480      	push	{r7}
 8003010:	b087      	sub	sp, #28
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3360      	adds	r3, #96	; 0x60
 800301e:	461a      	mov	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	431a      	orrs	r2, r3
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003038:	bf00      	nop
 800303a:	371c      	adds	r7, #28
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	3360      	adds	r3, #96	; 0x60
 8003054:	461a      	mov	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	431a      	orrs	r2, r3
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800306e:	bf00      	nop
 8003070:	371c      	adds	r7, #28
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	615a      	str	r2, [r3, #20]
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b087      	sub	sp, #28
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	3330      	adds	r3, #48	; 0x30
 80030d6:	461a      	mov	r2, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	0a1b      	lsrs	r3, r3, #8
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	4413      	add	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	211f      	movs	r1, #31
 80030f2:	fa01 f303 	lsl.w	r3, r1, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	401a      	ands	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	0e9b      	lsrs	r3, r3, #26
 80030fe:	f003 011f 	and.w	r1, r3, #31
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f003 031f 	and.w	r3, r3, #31
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	431a      	orrs	r2, r3
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003112:	bf00      	nop
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800311e:	b480      	push	{r7}
 8003120:	b087      	sub	sp, #28
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	3314      	adds	r3, #20
 800312e:	461a      	mov	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	0e5b      	lsrs	r3, r3, #25
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	4413      	add	r3, r2
 800313c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	0d1b      	lsrs	r3, r3, #20
 8003146:	f003 031f 	and.w	r3, r3, #31
 800314a:	2107      	movs	r1, #7
 800314c:	fa01 f303 	lsl.w	r3, r1, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	401a      	ands	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	0d1b      	lsrs	r3, r3, #20
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	fa01 f303 	lsl.w	r3, r1, r3
 8003162:	431a      	orrs	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003168:	bf00      	nop
 800316a:	371c      	adds	r7, #28
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318c:	43db      	mvns	r3, r3
 800318e:	401a      	ands	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f003 0318 	and.w	r3, r3, #24
 8003196:	4908      	ldr	r1, [pc, #32]	; (80031b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003198:	40d9      	lsrs	r1, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	400b      	ands	r3, r1
 800319e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a2:	431a      	orrs	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	0007ffff 	.word	0x0007ffff

080031bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 031f 	and.w	r3, r3, #31
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80031e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6093      	str	r3, [r2, #8]
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800320c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003210:	d101      	bne.n	8003216 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003234:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003238:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003260:	d101      	bne.n	8003266 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003284:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003288:	f043 0201 	orr.w	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032b0:	f043 0202 	orr.w	r2, r3, #2
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d101      	bne.n	80032dc <LL_ADC_IsEnabled+0x18>
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <LL_ADC_IsEnabled+0x1a>
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d101      	bne.n	8003302 <LL_ADC_IsDisableOngoing+0x18>
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <LL_ADC_IsDisableOngoing+0x1a>
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003320:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003324:	f043 0204 	orr.w	r2, r3, #4
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003348:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800334c:	f043 0210 	orr.w	r2, r3, #16
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b04      	cmp	r3, #4
 8003372:	d101      	bne.n	8003378 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003396:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800339a:	f043 0220 	orr.w	r2, r3, #32
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d101      	bne.n	80033c6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033d4:	b590      	push	{r4, r7, lr}
 80033d6:	b089      	sub	sp, #36	; 0x24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e1a9      	b.n	8003742 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d109      	bne.n	8003410 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7fe ffd7 	bl	80023b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff fef1 	bl	80031fc <LL_ADC_IsDeepPowerDownEnabled>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d004      	beq.n	800342a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fed7 	bl	80031d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff ff0c 	bl	800324c <LL_ADC_IsInternalRegulatorEnabled>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d115      	bne.n	8003466 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fef0 	bl	8003224 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003444:	4b9c      	ldr	r3, [pc, #624]	; (80036b8 <HAL_ADC_Init+0x2e4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	099b      	lsrs	r3, r3, #6
 800344a:	4a9c      	ldr	r2, [pc, #624]	; (80036bc <HAL_ADC_Init+0x2e8>)
 800344c:	fba2 2303 	umull	r2, r3, r2, r3
 8003450:	099b      	lsrs	r3, r3, #6
 8003452:	3301      	adds	r3, #1
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003458:	e002      	b.n	8003460 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	3b01      	subs	r3, #1
 800345e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f9      	bne.n	800345a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff feee 	bl	800324c <LL_ADC_IsInternalRegulatorEnabled>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10d      	bne.n	8003492 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347a:	f043 0210 	orr.w	r2, r3, #16
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003486:	f043 0201 	orr.w	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff ff62 	bl	8003360 <LL_ADC_REG_IsConversionOngoing>
 800349c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f040 8142 	bne.w	8003730 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f040 813e 	bne.w	8003730 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80034bc:	f043 0202 	orr.w	r2, r3, #2
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff fefb 	bl	80032c4 <LL_ADC_IsEnabled>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d141      	bne.n	8003558 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034dc:	d004      	beq.n	80034e8 <HAL_ADC_Init+0x114>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a77      	ldr	r2, [pc, #476]	; (80036c0 <HAL_ADC_Init+0x2ec>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d10f      	bne.n	8003508 <HAL_ADC_Init+0x134>
 80034e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80034ec:	f7ff feea 	bl	80032c4 <LL_ADC_IsEnabled>
 80034f0:	4604      	mov	r4, r0
 80034f2:	4873      	ldr	r0, [pc, #460]	; (80036c0 <HAL_ADC_Init+0x2ec>)
 80034f4:	f7ff fee6 	bl	80032c4 <LL_ADC_IsEnabled>
 80034f8:	4603      	mov	r3, r0
 80034fa:	4323      	orrs	r3, r4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	bf0c      	ite	eq
 8003500:	2301      	moveq	r3, #1
 8003502:	2300      	movne	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	e012      	b.n	800352e <HAL_ADC_Init+0x15a>
 8003508:	486e      	ldr	r0, [pc, #440]	; (80036c4 <HAL_ADC_Init+0x2f0>)
 800350a:	f7ff fedb 	bl	80032c4 <LL_ADC_IsEnabled>
 800350e:	4604      	mov	r4, r0
 8003510:	486d      	ldr	r0, [pc, #436]	; (80036c8 <HAL_ADC_Init+0x2f4>)
 8003512:	f7ff fed7 	bl	80032c4 <LL_ADC_IsEnabled>
 8003516:	4603      	mov	r3, r0
 8003518:	431c      	orrs	r4, r3
 800351a:	486c      	ldr	r0, [pc, #432]	; (80036cc <HAL_ADC_Init+0x2f8>)
 800351c:	f7ff fed2 	bl	80032c4 <LL_ADC_IsEnabled>
 8003520:	4603      	mov	r3, r0
 8003522:	4323      	orrs	r3, r4
 8003524:	2b00      	cmp	r3, #0
 8003526:	bf0c      	ite	eq
 8003528:	2301      	moveq	r3, #1
 800352a:	2300      	movne	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d012      	beq.n	8003558 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800353a:	d004      	beq.n	8003546 <HAL_ADC_Init+0x172>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a5f      	ldr	r2, [pc, #380]	; (80036c0 <HAL_ADC_Init+0x2ec>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d101      	bne.n	800354a <HAL_ADC_Init+0x176>
 8003546:	4a62      	ldr	r2, [pc, #392]	; (80036d0 <HAL_ADC_Init+0x2fc>)
 8003548:	e000      	b.n	800354c <HAL_ADC_Init+0x178>
 800354a:	4a62      	ldr	r2, [pc, #392]	; (80036d4 <HAL_ADC_Init+0x300>)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	4619      	mov	r1, r3
 8003552:	4610      	mov	r0, r2
 8003554:	f7ff fcd2 	bl	8002efc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	7f5b      	ldrb	r3, [r3, #29]
 800355c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003562:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003568:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800356e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003576:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003578:	4313      	orrs	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003582:	2b01      	cmp	r3, #1
 8003584:	d106      	bne.n	8003594 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	3b01      	subs	r3, #1
 800358c:	045b      	lsls	r3, r3, #17
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4313      	orrs	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	2b00      	cmp	r3, #0
 800359a:	d009      	beq.n	80035b0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	4b48      	ldr	r3, [pc, #288]	; (80036d8 <HAL_ADC_Init+0x304>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	69b9      	ldr	r1, [r7, #24]
 80035c0:	430b      	orrs	r3, r1
 80035c2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff fee5 	bl	80033ae <LL_ADC_INJ_IsConversionOngoing>
 80035e4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d17f      	bne.n	80036ec <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d17c      	bne.n	80036ec <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80035f6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035fe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003600:	4313      	orrs	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800360e:	f023 0302 	bic.w	r3, r3, #2
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6812      	ldr	r2, [r2, #0]
 8003616:	69b9      	ldr	r1, [r7, #24]
 8003618:	430b      	orrs	r3, r1
 800361a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d017      	beq.n	8003654 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003632:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800363c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003640:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6911      	ldr	r1, [r2, #16]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	430b      	orrs	r3, r1
 800364e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003652:	e013      	b.n	800367c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003662:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003674:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003678:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003682:	2b01      	cmp	r3, #1
 8003684:	d12a      	bne.n	80036dc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003690:	f023 0304 	bic.w	r3, r3, #4
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800369c:	4311      	orrs	r1, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80036a2:	4311      	orrs	r1, r2
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036a8:	430a      	orrs	r2, r1
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0201 	orr.w	r2, r2, #1
 80036b4:	611a      	str	r2, [r3, #16]
 80036b6:	e019      	b.n	80036ec <HAL_ADC_Init+0x318>
 80036b8:	2000000c 	.word	0x2000000c
 80036bc:	053e2d63 	.word	0x053e2d63
 80036c0:	50000100 	.word	0x50000100
 80036c4:	50000400 	.word	0x50000400
 80036c8:	50000500 	.word	0x50000500
 80036cc:	50000600 	.word	0x50000600
 80036d0:	50000300 	.word	0x50000300
 80036d4:	50000700 	.word	0x50000700
 80036d8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691a      	ldr	r2, [r3, #16]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0201 	bic.w	r2, r2, #1
 80036ea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d10c      	bne.n	800370e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	f023 010f 	bic.w	r1, r3, #15
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	1e5a      	subs	r2, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
 800370c:	e007      	b.n	800371e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 020f 	bic.w	r2, r2, #15
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003722:	f023 0303 	bic.w	r3, r3, #3
 8003726:	f043 0201 	orr.w	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	65da      	str	r2, [r3, #92]	; 0x5c
 800372e:	e007      	b.n	8003740 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003734:	f043 0210 	orr.w	r2, r3, #16
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003740:	7ffb      	ldrb	r3, [r7, #31]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3724      	adds	r7, #36	; 0x24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd90      	pop	{r4, r7, pc}
 800374a:	bf00      	nop

0800374c <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800374c:	b590      	push	{r4, r7, lr}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e14d      	b.n	80039fa <HAL_ADC_DeInit+0x2ae>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003762:	f043 0202 	orr.w	r2, r3, #2
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800376a:	2103      	movs	r1, #3
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 fedf 	bl	8004530 <ADC_ConversionStop>
 8003772:	4603      	mov	r3, r0
 8003774:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003784:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003786:	7bfb      	ldrb	r3, [r7, #15]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10a      	bne.n	80037a2 <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f001 f821 	bl	80047d4 <ADC_Disable>
 8003792:	4603      	mov	r3, r0
 8003794:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d102      	bne.n	80037a2 <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	65da      	str	r2, [r3, #92]	; 0x5c
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80037b0:	f023 0307 	bic.w	r3, r3, #7
 80037b4:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80037be:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 42a0 	bic.w	r2, r2, #1342177280	; 0x50000000
 80037ce:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80037de:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_FIELDS);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68d9      	ldr	r1, [r3, #12]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	4b86      	ldr	r3, [pc, #536]	; (8003a04 <HAL_ADC_DeInit+0x2b8>)
 80037ec:	400b      	ands	r3, r1
 80037ee:	60d3      	str	r3, [r2, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80037fe:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800380e:	f023 0307 	bic.w	r3, r3, #7
 8003812:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695a      	ldr	r2, [r3, #20]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003822:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699a      	ldr	r2, [r3, #24]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 8003832:	619a      	str	r2, [r3, #24]
            ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
            ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10);

  /* Reset register TR1 */
  CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6a1a      	ldr	r2, [r3, #32]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003842:	621a      	str	r2, [r3, #32]

  /* Reset register TR2 */
  CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8003852:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset register TR3 */
  CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8003862:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	4b66      	ldr	r3, [pc, #408]	; (8003a08 <HAL_ADC_DeInit+0x2bc>)
 8003870:	400b      	ands	r3, r1
 8003872:	6313      	str	r3, [r2, #48]	; 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	4b63      	ldr	r3, [pc, #396]	; (8003a0c <HAL_ADC_DeInit+0x2c0>)
 8003880:	400b      	ands	r3, r1
 8003882:	6353      	str	r3, [r2, #52]	; 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	4b5f      	ldr	r3, [pc, #380]	; (8003a0c <HAL_ADC_DeInit+0x2c0>)
 8003890:	400b      	ands	r3, r1
 8003892:	6393      	str	r3, [r2, #56]	; 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6812      	ldr	r2, [r2, #0]
 800389e:	f423 63fb 	bic.w	r3, r3, #2008	; 0x7d8
 80038a2:	f023 0307 	bic.w	r3, r3, #7
 80038a6:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	4b57      	ldr	r3, [pc, #348]	; (8003a10 <HAL_ADC_DeInit+0x2c4>)
 80038b4:	400b      	ands	r3, r1
 80038b6:	6613      	str	r3, [r2, #96]	; 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	4b53      	ldr	r3, [pc, #332]	; (8003a10 <HAL_ADC_DeInit+0x2c4>)
 80038c4:	400b      	ands	r3, r1
 80038c6:	6653      	str	r3, [r2, #100]	; 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	4b4f      	ldr	r3, [pc, #316]	; (8003a10 <HAL_ADC_DeInit+0x2c4>)
 80038d4:	400b      	ands	r3, r1
 80038d6:	6693      	str	r3, [r2, #104]	; 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	4b4b      	ldr	r3, [pc, #300]	; (8003a10 <HAL_ADC_DeInit+0x2c4>)
 80038e4:	400b      	ands	r3, r1
 80038e6:	66d3      	str	r3, [r2, #108]	; 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6812      	ldr	r2, [r2, #0]
 80038f4:	0cdb      	lsrs	r3, r3, #19
 80038f6:	04db      	lsls	r3, r3, #19
 80038f8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	0cdb      	lsrs	r3, r3, #19
 800390a:	04db      	lsls	r3, r3, #19
 800390c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	0cdb      	lsrs	r3, r3, #19
 800391e:	04db      	lsls	r3, r3, #19
 8003920:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 8003934:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003940:	d004      	beq.n	800394c <HAL_ADC_DeInit+0x200>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a33      	ldr	r2, [pc, #204]	; (8003a14 <HAL_ADC_DeInit+0x2c8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d10f      	bne.n	800396c <HAL_ADC_DeInit+0x220>
 800394c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003950:	f7ff fcb8 	bl	80032c4 <LL_ADC_IsEnabled>
 8003954:	4604      	mov	r4, r0
 8003956:	482f      	ldr	r0, [pc, #188]	; (8003a14 <HAL_ADC_DeInit+0x2c8>)
 8003958:	f7ff fcb4 	bl	80032c4 <LL_ADC_IsEnabled>
 800395c:	4603      	mov	r3, r0
 800395e:	4323      	orrs	r3, r4
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf0c      	ite	eq
 8003964:	2301      	moveq	r3, #1
 8003966:	2300      	movne	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e012      	b.n	8003992 <HAL_ADC_DeInit+0x246>
 800396c:	482a      	ldr	r0, [pc, #168]	; (8003a18 <HAL_ADC_DeInit+0x2cc>)
 800396e:	f7ff fca9 	bl	80032c4 <LL_ADC_IsEnabled>
 8003972:	4604      	mov	r4, r0
 8003974:	4829      	ldr	r0, [pc, #164]	; (8003a1c <HAL_ADC_DeInit+0x2d0>)
 8003976:	f7ff fca5 	bl	80032c4 <LL_ADC_IsEnabled>
 800397a:	4603      	mov	r3, r0
 800397c:	431c      	orrs	r4, r3
 800397e:	4828      	ldr	r0, [pc, #160]	; (8003a20 <HAL_ADC_DeInit+0x2d4>)
 8003980:	f7ff fca0 	bl	80032c4 <LL_ADC_IsEnabled>
 8003984:	4603      	mov	r3, r0
 8003986:	4323      	orrs	r3, r4
 8003988:	2b00      	cmp	r3, #0
 800398a:	bf0c      	ite	eq
 800398c:	2301      	moveq	r3, #1
 800398e:	2300      	movne	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d020      	beq.n	80039d8 <HAL_ADC_DeInit+0x28c>
      - multimode related parameters (when this feature is available): MDMA,
        DMACFG, DELAY, DUAL (set by HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800399e:	d004      	beq.n	80039aa <HAL_ADC_DeInit+0x25e>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a1b      	ldr	r2, [pc, #108]	; (8003a14 <HAL_ADC_DeInit+0x2c8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d101      	bne.n	80039ae <HAL_ADC_DeInit+0x262>
 80039aa:	4b1e      	ldr	r3, [pc, #120]	; (8003a24 <HAL_ADC_DeInit+0x2d8>)
 80039ac:	e000      	b.n	80039b0 <HAL_ADC_DeInit+0x264>
 80039ae:	4b1e      	ldr	r3, [pc, #120]	; (8003a28 <HAL_ADC_DeInit+0x2dc>)
 80039b0:	6899      	ldr	r1, [r3, #8]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039ba:	d004      	beq.n	80039c6 <HAL_ADC_DeInit+0x27a>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a14      	ldr	r2, [pc, #80]	; (8003a14 <HAL_ADC_DeInit+0x2c8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d101      	bne.n	80039ca <HAL_ADC_DeInit+0x27e>
 80039c6:	4a17      	ldr	r2, [pc, #92]	; (8003a24 <HAL_ADC_DeInit+0x2d8>)
 80039c8:	e000      	b.n	80039cc <HAL_ADC_DeInit+0x280>
 80039ca:	4a17      	ldr	r2, [pc, #92]	; (8003a28 <HAL_ADC_DeInit+0x2dc>)
 80039cc:	4b17      	ldr	r3, [pc, #92]	; (8003a2c <HAL_ADC_DeInit+0x2e0>)
 80039ce:	400b      	ands	r3, r1
 80039d0:	6093      	str	r3, [r2, #8]

    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7fe feee 	bl	80027b4 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	665a      	str	r2, [r3, #100]	; 0x64
  hadc->InjectionConfig.ChannelCount = 0;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd90      	pop	{r4, r7, pc}
 8003a02:	bf00      	nop
 8003a04:	80000004 	.word	0x80000004
 8003a08:	e0820830 	.word	0xe0820830
 8003a0c:	e0820820 	.word	0xe0820820
 8003a10:	03fff000 	.word	0x03fff000
 8003a14:	50000100 	.word	0x50000100
 8003a18:	50000400 	.word	0x50000400
 8003a1c:	50000500 	.word	0x50000500
 8003a20:	50000600 	.word	0x50000600
 8003a24:	50000300 	.word	0x50000300
 8003a28:	50000700 	.word	0x50000700
 8003a2c:	fe0010e0 	.word	0xfe0010e0

08003a30 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a44:	d004      	beq.n	8003a50 <HAL_ADC_Start_DMA+0x20>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a5a      	ldr	r2, [pc, #360]	; (8003bb4 <HAL_ADC_Start_DMA+0x184>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d101      	bne.n	8003a54 <HAL_ADC_Start_DMA+0x24>
 8003a50:	4b59      	ldr	r3, [pc, #356]	; (8003bb8 <HAL_ADC_Start_DMA+0x188>)
 8003a52:	e000      	b.n	8003a56 <HAL_ADC_Start_DMA+0x26>
 8003a54:	4b59      	ldr	r3, [pc, #356]	; (8003bbc <HAL_ADC_Start_DMA+0x18c>)
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff fbb0 	bl	80031bc <LL_ADC_GetMultimode>
 8003a5c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff fc7c 	bl	8003360 <LL_ADC_REG_IsConversionOngoing>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f040 809b 	bne.w	8003ba6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_ADC_Start_DMA+0x4e>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e096      	b.n	8003bac <HAL_ADC_Start_DMA+0x17c>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a4d      	ldr	r2, [pc, #308]	; (8003bc0 <HAL_ADC_Start_DMA+0x190>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d008      	beq.n	8003aa2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d005      	beq.n	8003aa2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	2b05      	cmp	r3, #5
 8003a9a:	d002      	beq.n	8003aa2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	2b09      	cmp	r3, #9
 8003aa0:	d17a      	bne.n	8003b98 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 fe00 	bl	80046a8 <ADC_Enable>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003aac:	7dfb      	ldrb	r3, [r7, #23]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d16d      	bne.n	8003b8e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003aba:	f023 0301 	bic.w	r3, r3, #1
 8003abe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a3a      	ldr	r2, [pc, #232]	; (8003bb4 <HAL_ADC_Start_DMA+0x184>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d009      	beq.n	8003ae4 <HAL_ADC_Start_DMA+0xb4>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a3b      	ldr	r2, [pc, #236]	; (8003bc4 <HAL_ADC_Start_DMA+0x194>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d002      	beq.n	8003ae0 <HAL_ADC_Start_DMA+0xb0>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	e003      	b.n	8003ae8 <HAL_ADC_Start_DMA+0xb8>
 8003ae0:	4b39      	ldr	r3, [pc, #228]	; (8003bc8 <HAL_ADC_Start_DMA+0x198>)
 8003ae2:	e001      	b.n	8003ae8 <HAL_ADC_Start_DMA+0xb8>
 8003ae4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	6812      	ldr	r2, [r2, #0]
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d002      	beq.n	8003af6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d105      	bne.n	8003b02 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d006      	beq.n	8003b1c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b12:	f023 0206 	bic.w	r2, r3, #6
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	661a      	str	r2, [r3, #96]	; 0x60
 8003b1a:	e002      	b.n	8003b22 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b26:	4a29      	ldr	r2, [pc, #164]	; (8003bcc <HAL_ADC_Start_DMA+0x19c>)
 8003b28:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2e:	4a28      	ldr	r2, [pc, #160]	; (8003bd0 <HAL_ADC_Start_DMA+0x1a0>)
 8003b30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b36:	4a27      	ldr	r2, [pc, #156]	; (8003bd4 <HAL_ADC_Start_DMA+0x1a4>)
 8003b38:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	221c      	movs	r2, #28
 8003b40:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0210 	orr.w	r2, r2, #16
 8003b58:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0201 	orr.w	r2, r2, #1
 8003b68:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	3340      	adds	r3, #64	; 0x40
 8003b74:	4619      	mov	r1, r3
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f001 fec9 	bl	8005910 <HAL_DMA_Start_IT>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff fbc2 	bl	8003310 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003b8c:	e00d      	b.n	8003baa <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003b96:	e008      	b.n	8003baa <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003ba4:	e001      	b.n	8003baa <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	50000100 	.word	0x50000100
 8003bb8:	50000300 	.word	0x50000300
 8003bbc:	50000700 	.word	0x50000700
 8003bc0:	50000600 	.word	0x50000600
 8003bc4:	50000500 	.word	0x50000500
 8003bc8:	50000400 	.word	0x50000400
 8003bcc:	08004893 	.word	0x08004893
 8003bd0:	0800496b 	.word	0x0800496b
 8003bd4:	08004987 	.word	0x08004987

08003bd8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_ADC_Stop_DMA+0x16>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e051      	b.n	8003c92 <HAL_ADC_Stop_DMA+0xba>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003bf6:	2103      	movs	r1, #3
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 fc99 	bl	8004530 <ADC_ConversionStop>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003c02:	7bfb      	ldrb	r3, [r7, #15]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d13f      	bne.n	8003c88 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0201 	bic.w	r2, r2, #1
 8003c16:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d10f      	bne.n	8003c46 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f001 feeb 	bl	8005a06 <HAL_DMA_Abort>
 8003c30:	4603      	mov	r3, r0
 8003c32:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0210 	bic.w	r2, r2, #16
 8003c54:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d105      	bne.n	8003c68 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fdb9 	bl	80047d4 <ADC_Disable>
 8003c62:	4603      	mov	r3, r0
 8003c64:	73fb      	strb	r3, [r7, #15]
 8003c66:	e002      	b.n	8003c6e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fdb3 	bl	80047d4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d109      	bne.n	8003c88 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	f043 0201 	orr.w	r2, r3, #1
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b0b6      	sub	sp, #216	; 0xd8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d102      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x24>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	f000 bc13 	b.w	80044fa <HAL_ADC_ConfigChannel+0x84a>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff fb3d 	bl	8003360 <LL_ADC_REG_IsConversionOngoing>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f040 83f3 	bne.w	80044d4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6859      	ldr	r1, [r3, #4]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f7ff f9e3 	bl	80030c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff fb2b 	bl	8003360 <LL_ADC_REG_IsConversionOngoing>
 8003d0a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff fb4b 	bl	80033ae <LL_ADC_INJ_IsConversionOngoing>
 8003d18:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f040 81d9 	bne.w	80040d8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f040 81d4 	bne.w	80040d8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d38:	d10f      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2200      	movs	r2, #0
 8003d44:	4619      	mov	r1, r3
 8003d46:	f7ff f9ea 	bl	800311e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff f991 	bl	800307a <LL_ADC_SetSamplingTimeCommonConfig>
 8003d58:	e00e      	b.n	8003d78 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	6819      	ldr	r1, [r3, #0]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	461a      	mov	r2, r3
 8003d68:	f7ff f9d9 	bl	800311e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2100      	movs	r1, #0
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff f981 	bl	800307a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	695a      	ldr	r2, [r3, #20]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	08db      	lsrs	r3, r3, #3
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d022      	beq.n	8003de0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6919      	ldr	r1, [r3, #16]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003daa:	f7ff f8db 	bl	8002f64 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	6919      	ldr	r1, [r3, #16]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f7ff f927 	bl	800300e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6818      	ldr	r0, [r3, #0]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d102      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x126>
 8003dd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dd4:	e000      	b.n	8003dd8 <HAL_ADC_ConfigChannel+0x128>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	461a      	mov	r2, r3
 8003dda:	f7ff f933 	bl	8003044 <LL_ADC_SetOffsetSaturation>
 8003dde:	e17b      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2100      	movs	r1, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff f8e0 	bl	8002fac <LL_ADC_GetOffsetChannel>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10a      	bne.n	8003e0c <HAL_ADC_ConfigChannel+0x15c>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff f8d5 	bl	8002fac <LL_ADC_GetOffsetChannel>
 8003e02:	4603      	mov	r3, r0
 8003e04:	0e9b      	lsrs	r3, r3, #26
 8003e06:	f003 021f 	and.w	r2, r3, #31
 8003e0a:	e01e      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x19a>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2100      	movs	r1, #0
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff f8ca 	bl	8002fac <LL_ADC_GetOffsetChannel>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e22:	fa93 f3a3 	rbit	r3, r3
 8003e26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003e3a:	2320      	movs	r3, #32
 8003e3c:	e004      	b.n	8003e48 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003e3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e42:	fab3 f383 	clz	r3, r3
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d105      	bne.n	8003e62 <HAL_ADC_ConfigChannel+0x1b2>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	0e9b      	lsrs	r3, r3, #26
 8003e5c:	f003 031f 	and.w	r3, r3, #31
 8003e60:	e018      	b.n	8003e94 <HAL_ADC_ConfigChannel+0x1e4>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e6e:	fa93 f3a3 	rbit	r3, r3
 8003e72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003e7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003e86:	2320      	movs	r3, #32
 8003e88:	e004      	b.n	8003e94 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003e8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e8e:	fab3 f383 	clz	r3, r3
 8003e92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d106      	bne.n	8003ea6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff f899 	bl	8002fd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2101      	movs	r1, #1
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff f87d 	bl	8002fac <LL_ADC_GetOffsetChannel>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10a      	bne.n	8003ed2 <HAL_ADC_ConfigChannel+0x222>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff f872 	bl	8002fac <LL_ADC_GetOffsetChannel>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	0e9b      	lsrs	r3, r3, #26
 8003ecc:	f003 021f 	and.w	r2, r3, #31
 8003ed0:	e01e      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x260>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff f867 	bl	8002fac <LL_ADC_GetOffsetChannel>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ee8:	fa93 f3a3 	rbit	r3, r3
 8003eec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003ef0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ef4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003ef8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003f00:	2320      	movs	r3, #32
 8003f02:	e004      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003f04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f08:	fab3 f383 	clz	r3, r3
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d105      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x278>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	0e9b      	lsrs	r3, r3, #26
 8003f22:	f003 031f 	and.w	r3, r3, #31
 8003f26:	e018      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x2aa>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f34:	fa93 f3a3 	rbit	r3, r3
 8003f38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003f3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003f44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003f4c:	2320      	movs	r3, #32
 8003f4e:	e004      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003f50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f54:	fab3 f383 	clz	r3, r3
 8003f58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d106      	bne.n	8003f6c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2200      	movs	r2, #0
 8003f64:	2101      	movs	r1, #1
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff f836 	bl	8002fd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2102      	movs	r1, #2
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff f81a 	bl	8002fac <LL_ADC_GetOffsetChannel>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10a      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x2e8>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2102      	movs	r1, #2
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff f80f 	bl	8002fac <LL_ADC_GetOffsetChannel>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	0e9b      	lsrs	r3, r3, #26
 8003f92:	f003 021f 	and.w	r2, r3, #31
 8003f96:	e01e      	b.n	8003fd6 <HAL_ADC_ConfigChannel+0x326>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2102      	movs	r1, #2
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff f804 	bl	8002fac <LL_ADC_GetOffsetChannel>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fae:	fa93 f3a3 	rbit	r3, r3
 8003fb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003fb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003fbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003fc6:	2320      	movs	r3, #32
 8003fc8:	e004      	b.n	8003fd4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003fca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fce:	fab3 f383 	clz	r3, r3
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d105      	bne.n	8003fee <HAL_ADC_ConfigChannel+0x33e>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	0e9b      	lsrs	r3, r3, #26
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	e016      	b.n	800401c <HAL_ADC_ConfigChannel+0x36c>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ffa:	fa93 f3a3 	rbit	r3, r3
 8003ffe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004000:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004002:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004006:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800400e:	2320      	movs	r3, #32
 8004010:	e004      	b.n	800401c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004012:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004016:	fab3 f383 	clz	r3, r3
 800401a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800401c:	429a      	cmp	r2, r3
 800401e:	d106      	bne.n	800402e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2200      	movs	r2, #0
 8004026:	2102      	movs	r1, #2
 8004028:	4618      	mov	r0, r3
 800402a:	f7fe ffd5 	bl	8002fd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2103      	movs	r1, #3
 8004034:	4618      	mov	r0, r3
 8004036:	f7fe ffb9 	bl	8002fac <LL_ADC_GetOffsetChannel>
 800403a:	4603      	mov	r3, r0
 800403c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10a      	bne.n	800405a <HAL_ADC_ConfigChannel+0x3aa>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2103      	movs	r1, #3
 800404a:	4618      	mov	r0, r3
 800404c:	f7fe ffae 	bl	8002fac <LL_ADC_GetOffsetChannel>
 8004050:	4603      	mov	r3, r0
 8004052:	0e9b      	lsrs	r3, r3, #26
 8004054:	f003 021f 	and.w	r2, r3, #31
 8004058:	e017      	b.n	800408a <HAL_ADC_ConfigChannel+0x3da>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2103      	movs	r1, #3
 8004060:	4618      	mov	r0, r3
 8004062:	f7fe ffa3 	bl	8002fac <LL_ADC_GetOffsetChannel>
 8004066:	4603      	mov	r3, r0
 8004068:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800406c:	fa93 f3a3 	rbit	r3, r3
 8004070:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004074:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800407c:	2320      	movs	r3, #32
 800407e:	e003      	b.n	8004088 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004082:	fab3 f383 	clz	r3, r3
 8004086:	b2db      	uxtb	r3, r3
 8004088:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004092:	2b00      	cmp	r3, #0
 8004094:	d105      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x3f2>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	0e9b      	lsrs	r3, r3, #26
 800409c:	f003 031f 	and.w	r3, r3, #31
 80040a0:	e011      	b.n	80040c6 <HAL_ADC_ConfigChannel+0x416>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040aa:	fa93 f3a3 	rbit	r3, r3
 80040ae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80040b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80040b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80040ba:	2320      	movs	r3, #32
 80040bc:	e003      	b.n	80040c6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80040be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c0:	fab3 f383 	clz	r3, r3
 80040c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d106      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2200      	movs	r2, #0
 80040d0:	2103      	movs	r1, #3
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fe ff80 	bl	8002fd8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff f8f1 	bl	80032c4 <LL_ADC_IsEnabled>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f040 813d 	bne.w	8004364 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6819      	ldr	r1, [r3, #0]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f7ff f83c 	bl	8003174 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	4aa2      	ldr	r2, [pc, #648]	; (800438c <HAL_ADC_ConfigChannel+0x6dc>)
 8004102:	4293      	cmp	r3, r2
 8004104:	f040 812e 	bne.w	8004364 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10b      	bne.n	8004130 <HAL_ADC_ConfigChannel+0x480>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	0e9b      	lsrs	r3, r3, #26
 800411e:	3301      	adds	r3, #1
 8004120:	f003 031f 	and.w	r3, r3, #31
 8004124:	2b09      	cmp	r3, #9
 8004126:	bf94      	ite	ls
 8004128:	2301      	movls	r3, #1
 800412a:	2300      	movhi	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	e019      	b.n	8004164 <HAL_ADC_ConfigChannel+0x4b4>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004138:	fa93 f3a3 	rbit	r3, r3
 800413c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800413e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004140:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004148:	2320      	movs	r3, #32
 800414a:	e003      	b.n	8004154 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800414c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800414e:	fab3 f383 	clz	r3, r3
 8004152:	b2db      	uxtb	r3, r3
 8004154:	3301      	adds	r3, #1
 8004156:	f003 031f 	and.w	r3, r3, #31
 800415a:	2b09      	cmp	r3, #9
 800415c:	bf94      	ite	ls
 800415e:	2301      	movls	r3, #1
 8004160:	2300      	movhi	r3, #0
 8004162:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004164:	2b00      	cmp	r3, #0
 8004166:	d079      	beq.n	800425c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004170:	2b00      	cmp	r3, #0
 8004172:	d107      	bne.n	8004184 <HAL_ADC_ConfigChannel+0x4d4>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	0e9b      	lsrs	r3, r3, #26
 800417a:	3301      	adds	r3, #1
 800417c:	069b      	lsls	r3, r3, #26
 800417e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004182:	e015      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x500>
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800418c:	fa93 f3a3 	rbit	r3, r3
 8004190:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004194:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800419c:	2320      	movs	r3, #32
 800419e:	e003      	b.n	80041a8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80041a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a2:	fab3 f383 	clz	r3, r3
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	3301      	adds	r3, #1
 80041aa:	069b      	lsls	r3, r3, #26
 80041ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d109      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x520>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	0e9b      	lsrs	r3, r3, #26
 80041c2:	3301      	adds	r3, #1
 80041c4:	f003 031f 	and.w	r3, r3, #31
 80041c8:	2101      	movs	r1, #1
 80041ca:	fa01 f303 	lsl.w	r3, r1, r3
 80041ce:	e017      	b.n	8004200 <HAL_ADC_ConfigChannel+0x550>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041d8:	fa93 f3a3 	rbit	r3, r3
 80041dc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80041de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80041e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80041e8:	2320      	movs	r3, #32
 80041ea:	e003      	b.n	80041f4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80041ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ee:	fab3 f383 	clz	r3, r3
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	3301      	adds	r3, #1
 80041f6:	f003 031f 	and.w	r3, r3, #31
 80041fa:	2101      	movs	r1, #1
 80041fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004200:	ea42 0103 	orr.w	r1, r2, r3
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10a      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x576>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	0e9b      	lsrs	r3, r3, #26
 8004216:	3301      	adds	r3, #1
 8004218:	f003 021f 	and.w	r2, r3, #31
 800421c:	4613      	mov	r3, r2
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	4413      	add	r3, r2
 8004222:	051b      	lsls	r3, r3, #20
 8004224:	e018      	b.n	8004258 <HAL_ADC_ConfigChannel+0x5a8>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422e:	fa93 f3a3 	rbit	r3, r3
 8004232:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004236:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800423e:	2320      	movs	r3, #32
 8004240:	e003      	b.n	800424a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004244:	fab3 f383 	clz	r3, r3
 8004248:	b2db      	uxtb	r3, r3
 800424a:	3301      	adds	r3, #1
 800424c:	f003 021f 	and.w	r2, r3, #31
 8004250:	4613      	mov	r3, r2
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	4413      	add	r3, r2
 8004256:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004258:	430b      	orrs	r3, r1
 800425a:	e07e      	b.n	800435a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004264:	2b00      	cmp	r3, #0
 8004266:	d107      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x5c8>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	0e9b      	lsrs	r3, r3, #26
 800426e:	3301      	adds	r3, #1
 8004270:	069b      	lsls	r3, r3, #26
 8004272:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004276:	e015      	b.n	80042a4 <HAL_ADC_ConfigChannel+0x5f4>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004280:	fa93 f3a3 	rbit	r3, r3
 8004284:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004288:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004290:	2320      	movs	r3, #32
 8004292:	e003      	b.n	800429c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	fab3 f383 	clz	r3, r3
 800429a:	b2db      	uxtb	r3, r3
 800429c:	3301      	adds	r3, #1
 800429e:	069b      	lsls	r3, r3, #26
 80042a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d109      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x614>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	0e9b      	lsrs	r3, r3, #26
 80042b6:	3301      	adds	r3, #1
 80042b8:	f003 031f 	and.w	r3, r3, #31
 80042bc:	2101      	movs	r1, #1
 80042be:	fa01 f303 	lsl.w	r3, r1, r3
 80042c2:	e017      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x644>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	fa93 f3a3 	rbit	r3, r3
 80042d0:	61fb      	str	r3, [r7, #28]
  return result;
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80042dc:	2320      	movs	r3, #32
 80042de:	e003      	b.n	80042e8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	fab3 f383 	clz	r3, r3
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	3301      	adds	r3, #1
 80042ea:	f003 031f 	and.w	r3, r3, #31
 80042ee:	2101      	movs	r1, #1
 80042f0:	fa01 f303 	lsl.w	r3, r1, r3
 80042f4:	ea42 0103 	orr.w	r1, r2, r3
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10d      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x670>
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	0e9b      	lsrs	r3, r3, #26
 800430a:	3301      	adds	r3, #1
 800430c:	f003 021f 	and.w	r2, r3, #31
 8004310:	4613      	mov	r3, r2
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	4413      	add	r3, r2
 8004316:	3b1e      	subs	r3, #30
 8004318:	051b      	lsls	r3, r3, #20
 800431a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800431e:	e01b      	b.n	8004358 <HAL_ADC_ConfigChannel+0x6a8>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	fa93 f3a3 	rbit	r3, r3
 800432c:	613b      	str	r3, [r7, #16]
  return result;
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004338:	2320      	movs	r3, #32
 800433a:	e003      	b.n	8004344 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	fab3 f383 	clz	r3, r3
 8004342:	b2db      	uxtb	r3, r3
 8004344:	3301      	adds	r3, #1
 8004346:	f003 021f 	and.w	r2, r3, #31
 800434a:	4613      	mov	r3, r2
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	4413      	add	r3, r2
 8004350:	3b1e      	subs	r3, #30
 8004352:	051b      	lsls	r3, r3, #20
 8004354:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004358:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800435e:	4619      	mov	r1, r3
 8004360:	f7fe fedd 	bl	800311e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	4b09      	ldr	r3, [pc, #36]	; (8004390 <HAL_ADC_ConfigChannel+0x6e0>)
 800436a:	4013      	ands	r3, r2
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80be 	beq.w	80044ee <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800437a:	d004      	beq.n	8004386 <HAL_ADC_ConfigChannel+0x6d6>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a04      	ldr	r2, [pc, #16]	; (8004394 <HAL_ADC_ConfigChannel+0x6e4>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d10a      	bne.n	800439c <HAL_ADC_ConfigChannel+0x6ec>
 8004386:	4b04      	ldr	r3, [pc, #16]	; (8004398 <HAL_ADC_ConfigChannel+0x6e8>)
 8004388:	e009      	b.n	800439e <HAL_ADC_ConfigChannel+0x6ee>
 800438a:	bf00      	nop
 800438c:	407f0000 	.word	0x407f0000
 8004390:	80080000 	.word	0x80080000
 8004394:	50000100 	.word	0x50000100
 8004398:	50000300 	.word	0x50000300
 800439c:	4b59      	ldr	r3, [pc, #356]	; (8004504 <HAL_ADC_ConfigChannel+0x854>)
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fe fdd2 	bl	8002f48 <LL_ADC_GetCommonPathInternalCh>
 80043a4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a56      	ldr	r2, [pc, #344]	; (8004508 <HAL_ADC_ConfigChannel+0x858>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d004      	beq.n	80043bc <HAL_ADC_ConfigChannel+0x70c>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a55      	ldr	r2, [pc, #340]	; (800450c <HAL_ADC_ConfigChannel+0x85c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d13a      	bne.n	8004432 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d134      	bne.n	8004432 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043d0:	d005      	beq.n	80043de <HAL_ADC_ConfigChannel+0x72e>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a4e      	ldr	r2, [pc, #312]	; (8004510 <HAL_ADC_ConfigChannel+0x860>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	f040 8085 	bne.w	80044e8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043e6:	d004      	beq.n	80043f2 <HAL_ADC_ConfigChannel+0x742>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a49      	ldr	r2, [pc, #292]	; (8004514 <HAL_ADC_ConfigChannel+0x864>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d101      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x746>
 80043f2:	4a49      	ldr	r2, [pc, #292]	; (8004518 <HAL_ADC_ConfigChannel+0x868>)
 80043f4:	e000      	b.n	80043f8 <HAL_ADC_ConfigChannel+0x748>
 80043f6:	4a43      	ldr	r2, [pc, #268]	; (8004504 <HAL_ADC_ConfigChannel+0x854>)
 80043f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004400:	4619      	mov	r1, r3
 8004402:	4610      	mov	r0, r2
 8004404:	f7fe fd8d 	bl	8002f22 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004408:	4b44      	ldr	r3, [pc, #272]	; (800451c <HAL_ADC_ConfigChannel+0x86c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	099b      	lsrs	r3, r3, #6
 800440e:	4a44      	ldr	r2, [pc, #272]	; (8004520 <HAL_ADC_ConfigChannel+0x870>)
 8004410:	fba2 2303 	umull	r2, r3, r2, r3
 8004414:	099b      	lsrs	r3, r3, #6
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	4613      	mov	r3, r2
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004422:	e002      	b.n	800442a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	3b01      	subs	r3, #1
 8004428:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f9      	bne.n	8004424 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004430:	e05a      	b.n	80044e8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a3b      	ldr	r2, [pc, #236]	; (8004524 <HAL_ADC_ConfigChannel+0x874>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d125      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800443c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d11f      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a31      	ldr	r2, [pc, #196]	; (8004514 <HAL_ADC_ConfigChannel+0x864>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d104      	bne.n	800445c <HAL_ADC_ConfigChannel+0x7ac>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a34      	ldr	r2, [pc, #208]	; (8004528 <HAL_ADC_ConfigChannel+0x878>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d047      	beq.n	80044ec <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004464:	d004      	beq.n	8004470 <HAL_ADC_ConfigChannel+0x7c0>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a2a      	ldr	r2, [pc, #168]	; (8004514 <HAL_ADC_ConfigChannel+0x864>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d101      	bne.n	8004474 <HAL_ADC_ConfigChannel+0x7c4>
 8004470:	4a29      	ldr	r2, [pc, #164]	; (8004518 <HAL_ADC_ConfigChannel+0x868>)
 8004472:	e000      	b.n	8004476 <HAL_ADC_ConfigChannel+0x7c6>
 8004474:	4a23      	ldr	r2, [pc, #140]	; (8004504 <HAL_ADC_ConfigChannel+0x854>)
 8004476:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800447a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800447e:	4619      	mov	r1, r3
 8004480:	4610      	mov	r0, r2
 8004482:	f7fe fd4e 	bl	8002f22 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004486:	e031      	b.n	80044ec <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a27      	ldr	r2, [pc, #156]	; (800452c <HAL_ADC_ConfigChannel+0x87c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d12d      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004492:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d127      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a1c      	ldr	r2, [pc, #112]	; (8004514 <HAL_ADC_ConfigChannel+0x864>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d022      	beq.n	80044ee <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044b0:	d004      	beq.n	80044bc <HAL_ADC_ConfigChannel+0x80c>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a17      	ldr	r2, [pc, #92]	; (8004514 <HAL_ADC_ConfigChannel+0x864>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d101      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x810>
 80044bc:	4a16      	ldr	r2, [pc, #88]	; (8004518 <HAL_ADC_ConfigChannel+0x868>)
 80044be:	e000      	b.n	80044c2 <HAL_ADC_ConfigChannel+0x812>
 80044c0:	4a10      	ldr	r2, [pc, #64]	; (8004504 <HAL_ADC_ConfigChannel+0x854>)
 80044c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044ca:	4619      	mov	r1, r3
 80044cc:	4610      	mov	r0, r2
 80044ce:	f7fe fd28 	bl	8002f22 <LL_ADC_SetCommonPathInternalCh>
 80044d2:	e00c      	b.n	80044ee <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d8:	f043 0220 	orr.w	r2, r3, #32
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80044e6:	e002      	b.n	80044ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044e8:	bf00      	nop
 80044ea:	e000      	b.n	80044ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80044f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	37d8      	adds	r7, #216	; 0xd8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	50000700 	.word	0x50000700
 8004508:	c3210000 	.word	0xc3210000
 800450c:	90c00010 	.word	0x90c00010
 8004510:	50000600 	.word	0x50000600
 8004514:	50000100 	.word	0x50000100
 8004518:	50000300 	.word	0x50000300
 800451c:	2000000c 	.word	0x2000000c
 8004520:	053e2d63 	.word	0x053e2d63
 8004524:	c7520000 	.word	0xc7520000
 8004528:	50000500 	.word	0x50000500
 800452c:	cb840000 	.word	0xcb840000

08004530 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800453a:	2300      	movs	r3, #0
 800453c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f7fe ff0a 	bl	8003360 <LL_ADC_REG_IsConversionOngoing>
 800454c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe ff2b 	bl	80033ae <LL_ADC_INJ_IsConversionOngoing>
 8004558:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d103      	bne.n	8004568 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 8098 	beq.w	8004698 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d02a      	beq.n	80045cc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	7f5b      	ldrb	r3, [r3, #29]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d126      	bne.n	80045cc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	7f1b      	ldrb	r3, [r3, #28]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d122      	bne.n	80045cc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004586:	2301      	movs	r3, #1
 8004588:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800458a:	e014      	b.n	80045b6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	4a45      	ldr	r2, [pc, #276]	; (80046a4 <ADC_ConversionStop+0x174>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d90d      	bls.n	80045b0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004598:	f043 0210 	orr.w	r2, r3, #16
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a4:	f043 0201 	orr.w	r2, r3, #1
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e074      	b.n	800469a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	3301      	adds	r3, #1
 80045b4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c0:	2b40      	cmp	r3, #64	; 0x40
 80045c2:	d1e3      	bne.n	800458c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2240      	movs	r2, #64	; 0x40
 80045ca:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d014      	beq.n	80045fc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fe fec2 	bl	8003360 <LL_ADC_REG_IsConversionOngoing>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00c      	beq.n	80045fc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe fe7f 	bl	80032ea <LL_ADC_IsDisableOngoing>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d104      	bne.n	80045fc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fe fe9e 	bl	8003338 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d014      	beq.n	800462c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f7fe fed1 	bl	80033ae <LL_ADC_INJ_IsConversionOngoing>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00c      	beq.n	800462c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f7fe fe67 	bl	80032ea <LL_ADC_IsDisableOngoing>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d104      	bne.n	800462c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe fead 	bl	8003386 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d005      	beq.n	800463e <ADC_ConversionStop+0x10e>
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	2b03      	cmp	r3, #3
 8004636:	d105      	bne.n	8004644 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004638:	230c      	movs	r3, #12
 800463a:	617b      	str	r3, [r7, #20]
        break;
 800463c:	e005      	b.n	800464a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800463e:	2308      	movs	r3, #8
 8004640:	617b      	str	r3, [r7, #20]
        break;
 8004642:	e002      	b.n	800464a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004644:	2304      	movs	r3, #4
 8004646:	617b      	str	r3, [r7, #20]
        break;
 8004648:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800464a:	f7fe fbdd 	bl	8002e08 <HAL_GetTick>
 800464e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004650:	e01b      	b.n	800468a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004652:	f7fe fbd9 	bl	8002e08 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b05      	cmp	r3, #5
 800465e:	d914      	bls.n	800468a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	4013      	ands	r3, r2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00d      	beq.n	800468a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004672:	f043 0210 	orr.w	r2, r3, #16
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800467e:	f043 0201 	orr.w	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e007      	b.n	800469a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1dc      	bne.n	8004652 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3720      	adds	r7, #32
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	a33fffff 	.word	0xa33fffff

080046a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fe fe03 	bl	80032c4 <LL_ADC_IsEnabled>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d176      	bne.n	80047b2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	4b3c      	ldr	r3, [pc, #240]	; (80047bc <ADC_Enable+0x114>)
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00d      	beq.n	80046ee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d6:	f043 0210 	orr.w	r2, r3, #16
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e2:	f043 0201 	orr.w	r2, r3, #1
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e062      	b.n	80047b4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fe fdbe 	bl	8003274 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004700:	d004      	beq.n	800470c <ADC_Enable+0x64>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a2e      	ldr	r2, [pc, #184]	; (80047c0 <ADC_Enable+0x118>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d101      	bne.n	8004710 <ADC_Enable+0x68>
 800470c:	4b2d      	ldr	r3, [pc, #180]	; (80047c4 <ADC_Enable+0x11c>)
 800470e:	e000      	b.n	8004712 <ADC_Enable+0x6a>
 8004710:	4b2d      	ldr	r3, [pc, #180]	; (80047c8 <ADC_Enable+0x120>)
 8004712:	4618      	mov	r0, r3
 8004714:	f7fe fc18 	bl	8002f48 <LL_ADC_GetCommonPathInternalCh>
 8004718:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800471a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800471e:	2b00      	cmp	r3, #0
 8004720:	d013      	beq.n	800474a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004722:	4b2a      	ldr	r3, [pc, #168]	; (80047cc <ADC_Enable+0x124>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	099b      	lsrs	r3, r3, #6
 8004728:	4a29      	ldr	r2, [pc, #164]	; (80047d0 <ADC_Enable+0x128>)
 800472a:	fba2 2303 	umull	r2, r3, r2, r3
 800472e:	099b      	lsrs	r3, r3, #6
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	4613      	mov	r3, r2
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	4413      	add	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800473c:	e002      	b.n	8004744 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	3b01      	subs	r3, #1
 8004742:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f9      	bne.n	800473e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800474a:	f7fe fb5d 	bl	8002e08 <HAL_GetTick>
 800474e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004750:	e028      	b.n	80047a4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f7fe fdb4 	bl	80032c4 <LL_ADC_IsEnabled>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d104      	bne.n	800476c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe fd84 	bl	8003274 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800476c:	f7fe fb4c 	bl	8002e08 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d914      	bls.n	80047a4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b01      	cmp	r3, #1
 8004786:	d00d      	beq.n	80047a4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478c:	f043 0210 	orr.w	r2, r3, #16
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004798:	f043 0201 	orr.w	r2, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e007      	b.n	80047b4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d1cf      	bne.n	8004752 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	8000003f 	.word	0x8000003f
 80047c0:	50000100 	.word	0x50000100
 80047c4:	50000300 	.word	0x50000300
 80047c8:	50000700 	.word	0x50000700
 80047cc:	2000000c 	.word	0x2000000c
 80047d0:	053e2d63 	.word	0x053e2d63

080047d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fe fd82 	bl	80032ea <LL_ADC_IsDisableOngoing>
 80047e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fe fd69 	bl	80032c4 <LL_ADC_IsEnabled>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d047      	beq.n	8004888 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d144      	bne.n	8004888 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 030d 	and.w	r3, r3, #13
 8004808:	2b01      	cmp	r3, #1
 800480a:	d10c      	bne.n	8004826 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4618      	mov	r0, r3
 8004812:	f7fe fd43 	bl	800329c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2203      	movs	r2, #3
 800481c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800481e:	f7fe faf3 	bl	8002e08 <HAL_GetTick>
 8004822:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004824:	e029      	b.n	800487a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482a:	f043 0210 	orr.w	r2, r3, #16
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004836:	f043 0201 	orr.w	r2, r3, #1
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e023      	b.n	800488a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004842:	f7fe fae1 	bl	8002e08 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d914      	bls.n	800487a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00d      	beq.n	800487a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004862:	f043 0210 	orr.w	r2, r3, #16
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800486e:	f043 0201 	orr.w	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e007      	b.n	800488a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1dc      	bne.n	8004842 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b084      	sub	sp, #16
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d14b      	bne.n	8004944 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d021      	beq.n	800490a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fe fbe8 	bl	80030a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d032      	beq.n	800493c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d12b      	bne.n	800493c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d11f      	bne.n	800493c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004900:	f043 0201 	orr.w	r2, r3, #1
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	65da      	str	r2, [r3, #92]	; 0x5c
 8004908:	e018      	b.n	800493c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d111      	bne.n	800493c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d105      	bne.n	800493c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004934:	f043 0201 	orr.w	r2, r3, #1
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f7fd fba5 	bl	800208c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004942:	e00e      	b.n	8004962 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004948:	f003 0310 	and.w	r3, r3, #16
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f7ff f9a2 	bl	8003c9a <HAL_ADC_ErrorCallback>
}
 8004956:	e004      	b.n	8004962 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	4798      	blx	r3
}
 8004962:	bf00      	nop
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b084      	sub	sp, #16
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004976:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f7fd fb45 	bl	8002008 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800497e:	bf00      	nop
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004998:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a4:	f043 0204 	orr.w	r2, r3, #4
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f7ff f974 	bl	8003c9a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049b2:	bf00      	nop
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <LL_ADC_IsEnabled>:
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d101      	bne.n	80049d2 <LL_ADC_IsEnabled+0x18>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <LL_ADC_IsEnabled+0x1a>
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <LL_ADC_StartCalibration>:
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80049f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	609a      	str	r2, [r3, #8]
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <LL_ADC_IsCalibrationOnGoing>:
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a26:	d101      	bne.n	8004a2c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e000      	b.n	8004a2e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <LL_ADC_REG_IsConversionOngoing>:
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d101      	bne.n	8004a52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d101      	bne.n	8004a7c <HAL_ADCEx_Calibration_Start+0x1c>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	e04d      	b.n	8004b18 <HAL_ADCEx_Calibration_Start+0xb8>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff fea5 	bl	80047d4 <ADC_Disable>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d136      	bne.n	8004b02 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004a9c:	f023 0302 	bic.w	r3, r3, #2
 8004aa0:	f043 0202 	orr.w	r2, r3, #2
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6839      	ldr	r1, [r7, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff ff96 	bl	80049e0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004ab4:	e014      	b.n	8004ae0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4a18      	ldr	r2, [pc, #96]	; (8004b20 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d90d      	bls.n	8004ae0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac8:	f023 0312 	bic.w	r3, r3, #18
 8004acc:	f043 0210 	orr.w	r2, r3, #16
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e01b      	b.n	8004b18 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff ff94 	bl	8004a12 <LL_ADC_IsCalibrationOnGoing>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1e2      	bne.n	8004ab6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af4:	f023 0303 	bic.w	r3, r3, #3
 8004af8:	f043 0201 	orr.w	r2, r3, #1
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b00:	e005      	b.n	8004b0e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b06:	f043 0210 	orr.w	r2, r3, #16
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	0004de01 	.word	0x0004de01

08004b24 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004b24:	b590      	push	{r4, r7, lr}
 8004b26:	b0a1      	sub	sp, #132	; 0x84
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d101      	bne.n	8004b42 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e0e7      	b.n	8004d12 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004b4e:	2300      	movs	r3, #0
 8004b50:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b5a:	d102      	bne.n	8004b62 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004b5c:	4b6f      	ldr	r3, [pc, #444]	; (8004d1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b5e:	60bb      	str	r3, [r7, #8]
 8004b60:	e009      	b.n	8004b76 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a6e      	ldr	r2, [pc, #440]	; (8004d20 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d102      	bne.n	8004b72 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004b6c:	4b6d      	ldr	r3, [pc, #436]	; (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004b6e:	60bb      	str	r3, [r7, #8]
 8004b70:	e001      	b.n	8004b76 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004b72:	2300      	movs	r3, #0
 8004b74:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10b      	bne.n	8004b94 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b80:	f043 0220 	orr.w	r2, r3, #32
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e0be      	b.n	8004d12 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff ff4f 	bl	8004a3a <LL_ADC_REG_IsConversionOngoing>
 8004b9c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff ff49 	bl	8004a3a <LL_ADC_REG_IsConversionOngoing>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f040 80a0 	bne.w	8004cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f040 809c 	bne.w	8004cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bc0:	d004      	beq.n	8004bcc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a55      	ldr	r2, [pc, #340]	; (8004d1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d101      	bne.n	8004bd0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004bcc:	4b56      	ldr	r3, [pc, #344]	; (8004d28 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004bce:	e000      	b.n	8004bd2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004bd0:	4b56      	ldr	r3, [pc, #344]	; (8004d2c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004bd2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d04b      	beq.n	8004c74 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004bdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	6859      	ldr	r1, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bee:	035b      	lsls	r3, r3, #13
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bf6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c00:	d004      	beq.n	8004c0c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a45      	ldr	r2, [pc, #276]	; (8004d1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d10f      	bne.n	8004c2c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004c0c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004c10:	f7ff fed3 	bl	80049ba <LL_ADC_IsEnabled>
 8004c14:	4604      	mov	r4, r0
 8004c16:	4841      	ldr	r0, [pc, #260]	; (8004d1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c18:	f7ff fecf 	bl	80049ba <LL_ADC_IsEnabled>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	4323      	orrs	r3, r4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	bf0c      	ite	eq
 8004c24:	2301      	moveq	r3, #1
 8004c26:	2300      	movne	r3, #0
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	e012      	b.n	8004c52 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004c2c:	483c      	ldr	r0, [pc, #240]	; (8004d20 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004c2e:	f7ff fec4 	bl	80049ba <LL_ADC_IsEnabled>
 8004c32:	4604      	mov	r4, r0
 8004c34:	483b      	ldr	r0, [pc, #236]	; (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004c36:	f7ff fec0 	bl	80049ba <LL_ADC_IsEnabled>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	431c      	orrs	r4, r3
 8004c3e:	483c      	ldr	r0, [pc, #240]	; (8004d30 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004c40:	f7ff febb 	bl	80049ba <LL_ADC_IsEnabled>
 8004c44:	4603      	mov	r3, r0
 8004c46:	4323      	orrs	r3, r4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	bf0c      	ite	eq
 8004c4c:	2301      	moveq	r3, #1
 8004c4e:	2300      	movne	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d056      	beq.n	8004d04 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004c5e:	f023 030f 	bic.w	r3, r3, #15
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	6811      	ldr	r1, [r2, #0]
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	6892      	ldr	r2, [r2, #8]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c70:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c72:	e047      	b.n	8004d04 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004c74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c7e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c88:	d004      	beq.n	8004c94 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a23      	ldr	r2, [pc, #140]	; (8004d1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d10f      	bne.n	8004cb4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004c94:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004c98:	f7ff fe8f 	bl	80049ba <LL_ADC_IsEnabled>
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	481f      	ldr	r0, [pc, #124]	; (8004d1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ca0:	f7ff fe8b 	bl	80049ba <LL_ADC_IsEnabled>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	4323      	orrs	r3, r4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	e012      	b.n	8004cda <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004cb4:	481a      	ldr	r0, [pc, #104]	; (8004d20 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004cb6:	f7ff fe80 	bl	80049ba <LL_ADC_IsEnabled>
 8004cba:	4604      	mov	r4, r0
 8004cbc:	4819      	ldr	r0, [pc, #100]	; (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004cbe:	f7ff fe7c 	bl	80049ba <LL_ADC_IsEnabled>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	431c      	orrs	r4, r3
 8004cc6:	481a      	ldr	r0, [pc, #104]	; (8004d30 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004cc8:	f7ff fe77 	bl	80049ba <LL_ADC_IsEnabled>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	4323      	orrs	r3, r4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	bf0c      	ite	eq
 8004cd4:	2301      	moveq	r3, #1
 8004cd6:	2300      	movne	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d012      	beq.n	8004d04 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004cde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004ce6:	f023 030f 	bic.w	r3, r3, #15
 8004cea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004cec:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cee:	e009      	b.n	8004d04 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf4:	f043 0220 	orr.w	r2, r3, #32
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004d02:	e000      	b.n	8004d06 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d04:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004d0e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3784      	adds	r7, #132	; 0x84
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd90      	pop	{r4, r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	50000100 	.word	0x50000100
 8004d20:	50000400 	.word	0x50000400
 8004d24:	50000500 	.word	0x50000500
 8004d28:	50000300 	.word	0x50000300
 8004d2c:	50000700 	.word	0x50000700
 8004d30:	50000600 	.word	0x50000600

08004d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d44:	4b0c      	ldr	r3, [pc, #48]	; (8004d78 <__NVIC_SetPriorityGrouping+0x44>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d50:	4013      	ands	r3, r2
 8004d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d66:	4a04      	ldr	r2, [pc, #16]	; (8004d78 <__NVIC_SetPriorityGrouping+0x44>)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	60d3      	str	r3, [r2, #12]
}
 8004d6c:	bf00      	nop
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	e000ed00 	.word	0xe000ed00

08004d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d80:	4b04      	ldr	r3, [pc, #16]	; (8004d94 <__NVIC_GetPriorityGrouping+0x18>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	0a1b      	lsrs	r3, r3, #8
 8004d86:	f003 0307 	and.w	r3, r3, #7
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	e000ed00 	.word	0xe000ed00

08004d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	4603      	mov	r3, r0
 8004da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	db0b      	blt.n	8004dc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	f003 021f 	and.w	r2, r3, #31
 8004db0:	4907      	ldr	r1, [pc, #28]	; (8004dd0 <__NVIC_EnableIRQ+0x38>)
 8004db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	2001      	movs	r0, #1
 8004dba:	fa00 f202 	lsl.w	r2, r0, r2
 8004dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	e000e100 	.word	0xe000e100

08004dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	4603      	mov	r3, r0
 8004ddc:	6039      	str	r1, [r7, #0]
 8004dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	db0a      	blt.n	8004dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	490c      	ldr	r1, [pc, #48]	; (8004e20 <__NVIC_SetPriority+0x4c>)
 8004dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df2:	0112      	lsls	r2, r2, #4
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	440b      	add	r3, r1
 8004df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004dfc:	e00a      	b.n	8004e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	4908      	ldr	r1, [pc, #32]	; (8004e24 <__NVIC_SetPriority+0x50>)
 8004e04:	79fb      	ldrb	r3, [r7, #7]
 8004e06:	f003 030f 	and.w	r3, r3, #15
 8004e0a:	3b04      	subs	r3, #4
 8004e0c:	0112      	lsls	r2, r2, #4
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	440b      	add	r3, r1
 8004e12:	761a      	strb	r2, [r3, #24]
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	e000e100 	.word	0xe000e100
 8004e24:	e000ed00 	.word	0xe000ed00

08004e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b089      	sub	sp, #36	; 0x24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	f1c3 0307 	rsb	r3, r3, #7
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	bf28      	it	cs
 8004e46:	2304      	movcs	r3, #4
 8004e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	2b06      	cmp	r3, #6
 8004e50:	d902      	bls.n	8004e58 <NVIC_EncodePriority+0x30>
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	3b03      	subs	r3, #3
 8004e56:	e000      	b.n	8004e5a <NVIC_EncodePriority+0x32>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	43da      	mvns	r2, r3
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	401a      	ands	r2, r3
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e70:	f04f 31ff 	mov.w	r1, #4294967295
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	fa01 f303 	lsl.w	r3, r1, r3
 8004e7a:	43d9      	mvns	r1, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e80:	4313      	orrs	r3, r2
         );
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3724      	adds	r7, #36	; 0x24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
	...

08004e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ea0:	d301      	bcc.n	8004ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e00f      	b.n	8004ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ea6:	4a0a      	ldr	r2, [pc, #40]	; (8004ed0 <SysTick_Config+0x40>)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004eae:	210f      	movs	r1, #15
 8004eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb4:	f7ff ff8e 	bl	8004dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004eb8:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <SysTick_Config+0x40>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ebe:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <SysTick_Config+0x40>)
 8004ec0:	2207      	movs	r2, #7
 8004ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	e000e010 	.word	0xe000e010

08004ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff ff29 	bl	8004d34 <__NVIC_SetPriorityGrouping>
}
 8004ee2:	bf00      	nop
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b086      	sub	sp, #24
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	60b9      	str	r1, [r7, #8]
 8004ef4:	607a      	str	r2, [r7, #4]
 8004ef6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ef8:	f7ff ff40 	bl	8004d7c <__NVIC_GetPriorityGrouping>
 8004efc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	68b9      	ldr	r1, [r7, #8]
 8004f02:	6978      	ldr	r0, [r7, #20]
 8004f04:	f7ff ff90 	bl	8004e28 <NVIC_EncodePriority>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f0e:	4611      	mov	r1, r2
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff ff5f 	bl	8004dd4 <__NVIC_SetPriority>
}
 8004f16:	bf00      	nop
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b082      	sub	sp, #8
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	4603      	mov	r3, r0
 8004f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff ff33 	bl	8004d98 <__NVIC_EnableIRQ>
}
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b082      	sub	sp, #8
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7ff ffa4 	bl	8004e90 <SysTick_Config>
 8004f48:	4603      	mov	r3, r0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e014      	b.n	8004f8e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	791b      	ldrb	r3, [r3, #4]
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d105      	bne.n	8004f7a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7fd fcad 	bl	80028d4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
	...

08004f98 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e056      	b.n	800505a <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	795b      	ldrb	r3, [r3, #5]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_DAC_Start+0x20>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e050      	b.n	800505a <HAL_DAC_Start+0xc2>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6819      	ldr	r1, [r3, #0]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	f003 0310 	and.w	r3, r3, #16
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	409a      	lsls	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004fdc:	4b22      	ldr	r3, [pc, #136]	; (8005068 <HAL_DAC_Start+0xd0>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	099b      	lsrs	r3, r3, #6
 8004fe2:	4a22      	ldr	r2, [pc, #136]	; (800506c <HAL_DAC_Start+0xd4>)
 8004fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe8:	099b      	lsrs	r3, r3, #6
 8004fea:	3301      	adds	r3, #1
 8004fec:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8004fee:	e002      	b.n	8004ff6 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1f9      	bne.n	8004ff0 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10f      	bne.n	8005022 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800500c:	2b02      	cmp	r3, #2
 800500e:	d11d      	bne.n	800504c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	605a      	str	r2, [r3, #4]
 8005020:	e014      	b.n	800504c <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	f003 0310 	and.w	r3, r3, #16
 8005032:	2102      	movs	r1, #2
 8005034:	fa01 f303 	lsl.w	r3, r1, r3
 8005038:	429a      	cmp	r2, r3
 800503a:	d107      	bne.n	800504c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0202 	orr.w	r2, r2, #2
 800504a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	2000000c 	.word	0x2000000c
 800506c:	053e2d63 	.word	0x053e2d63

08005070 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
 800507c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800507e:	2300      	movs	r3, #0
 8005080:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e018      	b.n	80050be <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d105      	bne.n	80050aa <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4413      	add	r3, r2
 80050a4:	3308      	adds	r3, #8
 80050a6:	617b      	str	r3, [r7, #20]
 80050a8:	e004      	b.n	80050b4 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4413      	add	r3, r2
 80050b0:	3314      	adds	r3, #20
 80050b2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	461a      	mov	r2, r3
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	371c      	adds	r7, #28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
	...

080050cc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08a      	sub	sp, #40	; 0x28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <HAL_DAC_ConfigChannel+0x1c>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e19e      	b.n	800542a <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	795b      	ldrb	r3, [r3, #5]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d101      	bne.n	80050f8 <HAL_DAC_ConfigChannel+0x2c>
 80050f4:	2302      	movs	r3, #2
 80050f6:	e198      	b.n	800542a <HAL_DAC_ConfigChannel+0x35e>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2201      	movs	r2, #1
 80050fc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2202      	movs	r2, #2
 8005102:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	2b04      	cmp	r3, #4
 800510a:	d17a      	bne.n	8005202 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800510c:	f7fd fe7c 	bl	8002e08 <HAL_GetTick>
 8005110:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d13d      	bne.n	8005194 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005118:	e018      	b.n	800514c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800511a:	f7fd fe75 	bl	8002e08 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b01      	cmp	r3, #1
 8005126:	d911      	bls.n	800514c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f043 0208 	orr.w	r2, r3, #8
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2203      	movs	r2, #3
 8005146:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e16e      	b.n	800542a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1df      	bne.n	800511a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005162:	641a      	str	r2, [r3, #64]	; 0x40
 8005164:	e020      	b.n	80051a8 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005166:	f7fd fe4f 	bl	8002e08 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b01      	cmp	r3, #1
 8005172:	d90f      	bls.n	8005194 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517a:	2b00      	cmp	r3, #0
 800517c:	da0a      	bge.n	8005194 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f043 0208 	orr.w	r2, r3, #8
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2203      	movs	r2, #3
 800518e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e14a      	b.n	800542a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519a:	2b00      	cmp	r3, #0
 800519c:	dbe3      	blt.n	8005166 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051a6:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f003 0310 	and.w	r3, r3, #16
 80051b4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80051b8:	fa01 f303 	lsl.w	r3, r1, r3
 80051bc:	43db      	mvns	r3, r3
 80051be:	ea02 0103 	and.w	r1, r2, r3
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	409a      	lsls	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f003 0310 	and.w	r3, r3, #16
 80051e2:	21ff      	movs	r1, #255	; 0xff
 80051e4:	fa01 f303 	lsl.w	r3, r1, r3
 80051e8:	43db      	mvns	r3, r3
 80051ea:	ea02 0103 	and.w	r1, r2, r3
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	409a      	lsls	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d11d      	bne.n	8005246 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f003 0310 	and.w	r3, r3, #16
 8005218:	221f      	movs	r2, #31
 800521a:	fa02 f303 	lsl.w	r3, r2, r3
 800521e:	43db      	mvns	r3, r3
 8005220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005222:	4013      	ands	r3, r2
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f003 0310 	and.w	r3, r3, #16
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	fa02 f303 	lsl.w	r3, r2, r3
 8005238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523a:	4313      	orrs	r3, r2
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005244:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f003 0310 	and.w	r3, r3, #16
 8005254:	2207      	movs	r2, #7
 8005256:	fa02 f303 	lsl.w	r3, r2, r3
 800525a:	43db      	mvns	r3, r3
 800525c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525e:	4013      	ands	r3, r2
 8005260:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d102      	bne.n	8005270 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800526a:	2300      	movs	r3, #0
 800526c:	623b      	str	r3, [r7, #32]
 800526e:	e00f      	b.n	8005290 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	2b02      	cmp	r3, #2
 8005276:	d102      	bne.n	800527e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005278:	2301      	movs	r3, #1
 800527a:	623b      	str	r3, [r7, #32]
 800527c:	e008      	b.n	8005290 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d102      	bne.n	800528c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005286:	2301      	movs	r3, #1
 8005288:	623b      	str	r3, [r7, #32]
 800528a:	e001      	b.n	8005290 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800528c:	2300      	movs	r3, #0
 800528e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	4313      	orrs	r3, r2
 800529a:	6a3a      	ldr	r2, [r7, #32]
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f003 0310 	and.w	r3, r3, #16
 80052a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052aa:	fa02 f303 	lsl.w	r3, r2, r3
 80052ae:	43db      	mvns	r3, r3
 80052b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b2:	4013      	ands	r3, r2
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	791b      	ldrb	r3, [r3, #4]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d102      	bne.n	80052c4 <HAL_DAC_ConfigChannel+0x1f8>
 80052be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052c2:	e000      	b.n	80052c6 <HAL_DAC_ConfigChannel+0x1fa>
 80052c4:	2300      	movs	r3, #0
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f003 0310 	and.w	r3, r3, #16
 80052d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052d6:	fa02 f303 	lsl.w	r3, r2, r3
 80052da:	43db      	mvns	r3, r3
 80052dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052de:	4013      	ands	r3, r2
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	795b      	ldrb	r3, [r3, #5]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d102      	bne.n	80052f0 <HAL_DAC_ConfigChannel+0x224>
 80052ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052ee:	e000      	b.n	80052f2 <HAL_DAC_ConfigChannel+0x226>
 80052f0:	2300      	movs	r3, #0
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b02      	cmp	r3, #2
 8005306:	d114      	bne.n	8005332 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005308:	f004 f880 	bl	800940c <HAL_RCC_GetHCLKFreq>
 800530c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	4a48      	ldr	r2, [pc, #288]	; (8005434 <HAL_DAC_ConfigChannel+0x368>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d904      	bls.n	8005320 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
 800531e:	e00f      	b.n	8005340 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	4a45      	ldr	r2, [pc, #276]	; (8005438 <HAL_DAC_ConfigChannel+0x36c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d90a      	bls.n	800533e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800532e:	627b      	str	r3, [r7, #36]	; 0x24
 8005330:	e006      	b.n	8005340 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005338:	4313      	orrs	r3, r2
 800533a:	627b      	str	r3, [r7, #36]	; 0x24
 800533c:	e000      	b.n	8005340 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800533e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f003 0310 	and.w	r3, r3, #16
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	fa02 f303 	lsl.w	r3, r2, r3
 800534c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800534e:	4313      	orrs	r3, r2
 8005350:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005358:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6819      	ldr	r1, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f003 0310 	and.w	r3, r3, #16
 8005366:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800536a:	fa02 f303 	lsl.w	r3, r2, r3
 800536e:	43da      	mvns	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	400a      	ands	r2, r1
 8005376:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f003 0310 	and.w	r3, r3, #16
 8005386:	f640 72fe 	movw	r2, #4094	; 0xffe
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	43db      	mvns	r3, r3
 8005390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005392:	4013      	ands	r3, r2
 8005394:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f003 0310 	and.w	r3, r3, #16
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	fa02 f303 	lsl.w	r3, r2, r3
 80053a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053aa:	4313      	orrs	r3, r2
 80053ac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6819      	ldr	r1, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	22c0      	movs	r2, #192	; 0xc0
 80053c4:	fa02 f303 	lsl.w	r3, r2, r3
 80053c8:	43da      	mvns	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	400a      	ands	r2, r1
 80053d0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	089b      	lsrs	r3, r3, #2
 80053d8:	f003 030f 	and.w	r3, r3, #15
 80053dc:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	089b      	lsrs	r3, r3, #2
 80053e4:	021b      	lsls	r3, r3, #8
 80053e6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f003 0310 	and.w	r3, r3, #16
 80053fc:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005400:	fa01 f303 	lsl.w	r3, r1, r3
 8005404:	43db      	mvns	r3, r3
 8005406:	ea02 0103 	and.w	r1, r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	409a      	lsls	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2201      	movs	r2, #1
 8005420:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005428:	7ffb      	ldrb	r3, [r7, #31]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3728      	adds	r7, #40	; 0x28
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	09896800 	.word	0x09896800
 8005438:	04c4b400 	.word	0x04c4b400

0800543c <HAL_DACEx_SelfCalibrate>:
  * @retval Updates DAC_TrimmingValue. , DAC_UserTrimming set to DAC_UserTrimming
  * @retval HAL status
  * @note   Calibration runs about 7 ms.
  */
HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08a      	sub	sp, #40	; 0x28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005448:	2300      	movs	r3, #0
 800544a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Check the DAC handle allocation */
  /* Check if DAC running */
  if ((hdac == NULL) || (sConfig == NULL))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <HAL_DACEx_SelfCalibrate+0x1e>
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d103      	bne.n	8005462 <HAL_DACEx_SelfCalibrate+0x26>
  {
    status = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005460:	e10e      	b.n	8005680 <HAL_DACEx_SelfCalibrate+0x244>
  }
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	791b      	ldrb	r3, [r3, #4]
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d103      	bne.n	8005474 <HAL_DACEx_SelfCalibrate+0x38>
  {
    status = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005472:	e105      	b.n	8005680 <HAL_DACEx_SelfCalibrate+0x244>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hdac);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	795b      	ldrb	r3, [r3, #5]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <HAL_DACEx_SelfCalibrate+0x44>
 800547c:	2302      	movs	r3, #2
 800547e:	e101      	b.n	8005684 <HAL_DACEx_SelfCalibrate+0x248>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2201      	movs	r2, #1
 8005484:	715a      	strb	r2, [r3, #5]

    /* Store configuration */
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f003 0310 	and.w	r3, r3, #16
 8005492:	2107      	movs	r1, #7
 8005494:	fa01 f303 	lsl.w	r3, r1, r3
 8005498:	4013      	ands	r3, r2
 800549a:	61bb      	str	r3, [r7, #24]

    /* Disable the selected DAC channel */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6819      	ldr	r1, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f003 0310 	and.w	r3, r3, #16
 80054a8:	2201      	movs	r2, #1
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	43da      	mvns	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	400a      	ands	r2, r1
 80054b6:	601a      	str	r2, [r3, #0]
    /* Wait for ready bit to be de-asserted */
    HAL_Delay(1);
 80054b8:	2001      	movs	r0, #1
 80054ba:	f7fd fcb1 	bl	8002e20 <HAL_Delay>

    /* Set mode in MCR  for calibration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f003 0310 	and.w	r3, r3, #16
 80054ca:	2207      	movs	r2, #7
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	43da      	mvns	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	400a      	ands	r2, r1
 80054d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Enable the selected DAC channel calibration */
    /* i.e. set DAC_CR_CENx bit */
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6819      	ldr	r1, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f003 0310 	and.w	r3, r3, #16
 80054e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80054ea:	409a      	lsls	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	601a      	str	r2, [r3, #0]

    /* Init trimming counter */
    /* Medium value */
    trimmingvalue = 16UL;
 80054f4:	2310      	movs	r3, #16
 80054f6:	623b      	str	r3, [r7, #32]
    delta = 8UL;
 80054f8:	2308      	movs	r3, #8
 80054fa:	61fb      	str	r3, [r7, #28]
    while (delta != 0UL)
 80054fc:	e047      	b.n	800558e <HAL_DACEx_SelfCalibrate+0x152>
    {
      /* Set candidate trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f003 0310 	and.w	r3, r3, #16
 800550a:	211f      	movs	r1, #31
 800550c:	fa01 f303 	lsl.w	r3, r1, r3
 8005510:	43db      	mvns	r3, r3
 8005512:	ea02 0103 	and.w	r1, r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f003 0310 	and.w	r3, r3, #16
 800551c:	6a3a      	ldr	r2, [r7, #32]
 800551e:	409a      	lsls	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	639a      	str	r2, [r3, #56]	; 0x38

      /* Wait minimum time needed between two calibration steps (OTRIM) */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed */
      /*       32 bits register capacity and handle low frequency. */
      wait_loop_index = ((DAC_DELAY_TRIM_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005528:	4b58      	ldr	r3, [pc, #352]	; (800568c <HAL_DACEx_SelfCalibrate+0x250>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	099b      	lsrs	r3, r3, #6
 800552e:	4a58      	ldr	r2, [pc, #352]	; (8005690 <HAL_DACEx_SelfCalibrate+0x254>)
 8005530:	fba2 2303 	umull	r2, r3, r2, r3
 8005534:	099b      	lsrs	r3, r3, #6
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	4613      	mov	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8005540:	e002      	b.n	8005548 <HAL_DACEx_SelfCalibrate+0x10c>
      {
        wait_loop_index--;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	3b01      	subs	r3, #1
 8005546:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f9      	bne.n	8005542 <HAL_DACEx_SelfCalibrate+0x106>
      }

      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f003 0310 	and.w	r3, r3, #16
 800555a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800555e:	fa01 f303 	lsl.w	r3, r1, r3
 8005562:	401a      	ands	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f003 0310 	and.w	r3, r3, #16
 800556a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800556e:	fa01 f303 	lsl.w	r3, r1, r3
 8005572:	429a      	cmp	r2, r3
 8005574:	d104      	bne.n	8005580 <HAL_DACEx_SelfCalibrate+0x144>
      {
        /* DAC_SR_CAL_FLAGx is HIGH try higher trimming */
        trimmingvalue -= delta;
 8005576:	6a3a      	ldr	r2, [r7, #32]
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	623b      	str	r3, [r7, #32]
 800557e:	e003      	b.n	8005588 <HAL_DACEx_SelfCalibrate+0x14c>
      }
      else
      {
        /* DAC_SR_CAL_FLAGx is LOW try lower trimming */
        trimmingvalue += delta;
 8005580:	6a3a      	ldr	r2, [r7, #32]
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	4413      	add	r3, r2
 8005586:	623b      	str	r3, [r7, #32]
      }
      delta >>= 1UL;
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	085b      	lsrs	r3, r3, #1
 800558c:	61fb      	str	r3, [r7, #28]
    while (delta != 0UL)
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1b4      	bne.n	80054fe <HAL_DACEx_SelfCalibrate+0xc2>
    }

    /* Still need to check if right calibration is current value or one step below */
    /* Indeed the first value that causes the DAC_SR_CAL_FLAGx bit to change from 0 to 1  */
    /* Set candidate trimming */
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f003 0310 	and.w	r3, r3, #16
 80055a0:	211f      	movs	r1, #31
 80055a2:	fa01 f303 	lsl.w	r3, r1, r3
 80055a6:	43db      	mvns	r3, r3
 80055a8:	ea02 0103 	and.w	r1, r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f003 0310 	and.w	r3, r3, #16
 80055b2:	6a3a      	ldr	r2, [r7, #32]
 80055b4:	409a      	lsls	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Wait minimum time needed between two calibration steps (OTRIM) */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed */
    /*       32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_TRIM_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80055be:	4b33      	ldr	r3, [pc, #204]	; (800568c <HAL_DACEx_SelfCalibrate+0x250>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	099b      	lsrs	r3, r3, #6
 80055c4:	4a32      	ldr	r2, [pc, #200]	; (8005690 <HAL_DACEx_SelfCalibrate+0x254>)
 80055c6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ca:	099b      	lsrs	r3, r3, #6
 80055cc:	1c5a      	adds	r2, r3, #1
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80055d6:	e002      	b.n	80055de <HAL_DACEx_SelfCalibrate+0x1a2>
    {
      wait_loop_index--;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	3b01      	subs	r3, #1
 80055dc:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1f9      	bne.n	80055d8 <HAL_DACEx_SelfCalibrate+0x19c>
    }

    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055f4:	fa01 f303 	lsl.w	r3, r1, r3
 80055f8:	4013      	ands	r3, r2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d117      	bne.n	800562e <HAL_DACEx_SelfCalibrate+0x1f2>
    {
      /* Trimming is actually one value more */
      trimmingvalue++;
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	3301      	adds	r3, #1
 8005602:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	211f      	movs	r1, #31
 8005612:	fa01 f303 	lsl.w	r3, r1, r3
 8005616:	43db      	mvns	r3, r3
 8005618:	ea02 0103 	and.w	r1, r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f003 0310 	and.w	r3, r3, #16
 8005622:	6a3a      	ldr	r2, [r7, #32]
 8005624:	409a      	lsls	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Disable the selected DAC channel calibration */
    /* i.e. clear DAC_CR_CENx bit */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6819      	ldr	r1, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f003 0310 	and.w	r3, r3, #16
 800563a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	43da      	mvns	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	400a      	ands	r2, r1
 800564a:	601a      	str	r2, [r3, #0]

    sConfig->DAC_TrimmingValue = trimmingvalue;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	6a3a      	ldr	r2, [r7, #32]
 8005650:	621a      	str	r2, [r3, #32]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2201      	movs	r2, #1
 8005656:	61da      	str	r2, [r3, #28]

    /* Restore configuration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f003 0310 	and.w	r3, r3, #16
 8005664:	2107      	movs	r1, #7
 8005666:	fa01 f303 	lsl.w	r3, r1, r3
 800566a:	43db      	mvns	r3, r3
 800566c:	ea02 0103 	and.w	r1, r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	430a      	orrs	r2, r1
 8005678:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process unlocked */
    __HAL_UNLOCK(hdac);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	715a      	strb	r2, [r3, #5]
  }

  return status;
 8005680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005684:	4618      	mov	r0, r3
 8005686:	3728      	adds	r7, #40	; 0x28
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	2000000c 	.word	0x2000000c
 8005690:	053e2d63 	.word	0x053e2d63

08005694 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e08d      	b.n	80057c2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	4b47      	ldr	r3, [pc, #284]	; (80057cc <HAL_DMA_Init+0x138>)
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d80f      	bhi.n	80056d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	4b45      	ldr	r3, [pc, #276]	; (80057d0 <HAL_DMA_Init+0x13c>)
 80056ba:	4413      	add	r3, r2
 80056bc:	4a45      	ldr	r2, [pc, #276]	; (80057d4 <HAL_DMA_Init+0x140>)
 80056be:	fba2 2303 	umull	r2, r3, r2, r3
 80056c2:	091b      	lsrs	r3, r3, #4
 80056c4:	009a      	lsls	r2, r3, #2
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a42      	ldr	r2, [pc, #264]	; (80057d8 <HAL_DMA_Init+0x144>)
 80056ce:	641a      	str	r2, [r3, #64]	; 0x40
 80056d0:	e00e      	b.n	80056f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	4b40      	ldr	r3, [pc, #256]	; (80057dc <HAL_DMA_Init+0x148>)
 80056da:	4413      	add	r3, r2
 80056dc:	4a3d      	ldr	r2, [pc, #244]	; (80057d4 <HAL_DMA_Init+0x140>)
 80056de:	fba2 2303 	umull	r2, r3, r2, r3
 80056e2:	091b      	lsrs	r3, r3, #4
 80056e4:	009a      	lsls	r2, r3, #2
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a3c      	ldr	r2, [pc, #240]	; (80057e0 <HAL_DMA_Init+0x14c>)
 80056ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005714:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005720:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800572c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 faa6 	bl	8005c94 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005750:	d102      	bne.n	8005758 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800576c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d010      	beq.n	8005798 <HAL_DMA_Init+0x104>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2b04      	cmp	r3, #4
 800577c:	d80c      	bhi.n	8005798 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fac6 	bl	8005d10 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005794:	605a      	str	r2, [r3, #4]
 8005796:	e008      	b.n	80057aa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	40020407 	.word	0x40020407
 80057d0:	bffdfff8 	.word	0xbffdfff8
 80057d4:	cccccccd 	.word	0xcccccccd
 80057d8:	40020000 	.word	0x40020000
 80057dc:	bffdfbf8 	.word	0xbffdfbf8
 80057e0:	40020400 	.word	0x40020400

080057e4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e07b      	b.n	80058ee <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0201 	bic.w	r2, r2, #1
 8005804:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	4b3a      	ldr	r3, [pc, #232]	; (80058f8 <HAL_DMA_DeInit+0x114>)
 800580e:	429a      	cmp	r2, r3
 8005810:	d80f      	bhi.n	8005832 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	461a      	mov	r2, r3
 8005818:	4b38      	ldr	r3, [pc, #224]	; (80058fc <HAL_DMA_DeInit+0x118>)
 800581a:	4413      	add	r3, r2
 800581c:	4a38      	ldr	r2, [pc, #224]	; (8005900 <HAL_DMA_DeInit+0x11c>)
 800581e:	fba2 2303 	umull	r2, r3, r2, r3
 8005822:	091b      	lsrs	r3, r3, #4
 8005824:	009a      	lsls	r2, r3, #2
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a35      	ldr	r2, [pc, #212]	; (8005904 <HAL_DMA_DeInit+0x120>)
 800582e:	641a      	str	r2, [r3, #64]	; 0x40
 8005830:	e00e      	b.n	8005850 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	461a      	mov	r2, r3
 8005838:	4b33      	ldr	r3, [pc, #204]	; (8005908 <HAL_DMA_DeInit+0x124>)
 800583a:	4413      	add	r3, r2
 800583c:	4a30      	ldr	r2, [pc, #192]	; (8005900 <HAL_DMA_DeInit+0x11c>)
 800583e:	fba2 2303 	umull	r2, r3, r2, r3
 8005842:	091b      	lsrs	r3, r3, #4
 8005844:	009a      	lsls	r2, r3, #2
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a2f      	ldr	r2, [pc, #188]	; (800590c <HAL_DMA_DeInit+0x128>)
 800584e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585c:	f003 021f 	and.w	r2, r3, #31
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	2101      	movs	r1, #1
 8005866:	fa01 f202 	lsl.w	r2, r1, r2
 800586a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fa11 	bl	8005c94 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005876:	2200      	movs	r2, #0
 8005878:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005882:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00f      	beq.n	80058ac <HAL_DMA_DeInit+0xc8>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	2b04      	cmp	r3, #4
 8005892:	d80b      	bhi.n	80058ac <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fa3b 	bl	8005d10 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589e:	2200      	movs	r2, #0
 80058a0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80058aa:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	40020407 	.word	0x40020407
 80058fc:	bffdfff8 	.word	0xbffdfff8
 8005900:	cccccccd 	.word	0xcccccccd
 8005904:	40020000 	.word	0x40020000
 8005908:	bffdfbf8 	.word	0xbffdfbf8
 800590c:	40020400 	.word	0x40020400

08005910 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_DMA_Start_IT+0x20>
 800592c:	2302      	movs	r3, #2
 800592e:	e066      	b.n	80059fe <HAL_DMA_Start_IT+0xee>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b01      	cmp	r3, #1
 8005942:	d155      	bne.n	80059f0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0201 	bic.w	r2, r2, #1
 8005960:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	68b9      	ldr	r1, [r7, #8]
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 f954 	bl	8005c16 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005972:	2b00      	cmp	r3, #0
 8005974:	d008      	beq.n	8005988 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f042 020e 	orr.w	r2, r2, #14
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	e00f      	b.n	80059a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 0204 	bic.w	r2, r2, #4
 8005996:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 020a 	orr.w	r2, r2, #10
 80059a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d007      	beq.n	80059c6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059c4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d007      	beq.n	80059de <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f042 0201 	orr.w	r2, r2, #1
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	e005      	b.n	80059fc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80059f8:	2302      	movs	r3, #2
 80059fa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80059fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b085      	sub	sp, #20
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d005      	beq.n	8005a2a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2204      	movs	r2, #4
 8005a22:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	73fb      	strb	r3, [r7, #15]
 8005a28:	e037      	b.n	8005a9a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 020e 	bic.w	r2, r2, #14
 8005a38:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a48:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0201 	bic.w	r2, r2, #1
 8005a58:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	f003 021f 	and.w	r2, r3, #31
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	2101      	movs	r1, #1
 8005a68:	fa01 f202 	lsl.w	r2, r1, r2
 8005a6c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005a76:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00c      	beq.n	8005a9a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a8e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005a98:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad4:	f003 031f 	and.w	r3, r3, #31
 8005ad8:	2204      	movs	r2, #4
 8005ada:	409a      	lsls	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d026      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x7a>
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f003 0304 	and.w	r3, r3, #4
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d021      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0320 	and.w	r3, r3, #32
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d107      	bne.n	8005b0c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0204 	bic.w	r2, r2, #4
 8005b0a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b10:	f003 021f 	and.w	r2, r3, #31
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b18:	2104      	movs	r1, #4
 8005b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8005b1e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d071      	beq.n	8005c0c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005b30:	e06c      	b.n	8005c0c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b36:	f003 031f 	and.w	r3, r3, #31
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	409a      	lsls	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4013      	ands	r3, r2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d02e      	beq.n	8005ba4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d029      	beq.n	8005ba4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10b      	bne.n	8005b76 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 020a 	bic.w	r2, r2, #10
 8005b6c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7a:	f003 021f 	and.w	r2, r3, #31
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	2102      	movs	r1, #2
 8005b84:	fa01 f202 	lsl.w	r2, r1, r2
 8005b88:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d038      	beq.n	8005c0c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005ba2:	e033      	b.n	8005c0c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba8:	f003 031f 	and.w	r3, r3, #31
 8005bac:	2208      	movs	r2, #8
 8005bae:	409a      	lsls	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d02a      	beq.n	8005c0e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d025      	beq.n	8005c0e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 020e 	bic.w	r2, r2, #14
 8005bd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd6:	f003 021f 	and.w	r2, r3, #31
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	2101      	movs	r1, #1
 8005be0:	fa01 f202 	lsl.w	r2, r1, r2
 8005be4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d004      	beq.n	8005c0e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005c0c:	bf00      	nop
 8005c0e:	bf00      	nop
}
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b085      	sub	sp, #20
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	60f8      	str	r0, [r7, #12]
 8005c1e:	60b9      	str	r1, [r7, #8]
 8005c20:	607a      	str	r2, [r7, #4]
 8005c22:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005c2c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d004      	beq.n	8005c40 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005c3e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c44:	f003 021f 	and.w	r2, r3, #31
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c52:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	2b10      	cmp	r3, #16
 8005c62:	d108      	bne.n	8005c76 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005c74:	e007      	b.n	8005c86 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	60da      	str	r2, [r3, #12]
}
 8005c86:	bf00      	nop
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
	...

08005c94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	4b16      	ldr	r3, [pc, #88]	; (8005cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d802      	bhi.n	8005cae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005ca8:	4b15      	ldr	r3, [pc, #84]	; (8005d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005caa:	617b      	str	r3, [r7, #20]
 8005cac:	e001      	b.n	8005cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005cae:	4b15      	ldr	r3, [pc, #84]	; (8005d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005cb0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	3b08      	subs	r3, #8
 8005cbe:	4a12      	ldr	r2, [pc, #72]	; (8005d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc4:	091b      	lsrs	r3, r3, #4
 8005cc6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ccc:	089b      	lsrs	r3, r3, #2
 8005cce:	009a      	lsls	r2, r3, #2
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a0b      	ldr	r2, [pc, #44]	; (8005d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005cde:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f003 031f 	and.w	r3, r3, #31
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	409a      	lsls	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005cee:	bf00      	nop
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40020407 	.word	0x40020407
 8005d00:	40020800 	.word	0x40020800
 8005d04:	40020820 	.word	0x40020820
 8005d08:	cccccccd 	.word	0xcccccccd
 8005d0c:	40020880 	.word	0x40020880

08005d10 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005d24:	4413      	add	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	461a      	mov	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a08      	ldr	r2, [pc, #32]	; (8005d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005d32:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	f003 031f 	and.w	r3, r3, #31
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	409a      	lsls	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005d44:	bf00      	nop
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	1000823f 	.word	0x1000823f
 8005d54:	40020940 	.word	0x40020940

08005d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d66:	e15a      	b.n	800601e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	2101      	movs	r1, #1
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	fa01 f303 	lsl.w	r3, r1, r3
 8005d74:	4013      	ands	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 814c 	beq.w	8006018 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f003 0303 	and.w	r3, r3, #3
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d005      	beq.n	8005d98 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d130      	bne.n	8005dfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	2203      	movs	r2, #3
 8005da4:	fa02 f303 	lsl.w	r3, r2, r3
 8005da8:	43db      	mvns	r3, r3
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	4013      	ands	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005dce:	2201      	movs	r2, #1
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd6:	43db      	mvns	r3, r3
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	4013      	ands	r3, r2
 8005ddc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	091b      	lsrs	r3, r3, #4
 8005de4:	f003 0201 	and.w	r2, r3, #1
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	fa02 f303 	lsl.w	r3, r2, r3
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	2b03      	cmp	r3, #3
 8005e04:	d017      	beq.n	8005e36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	2203      	movs	r2, #3
 8005e12:	fa02 f303 	lsl.w	r3, r2, r3
 8005e16:	43db      	mvns	r3, r3
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	689a      	ldr	r2, [r3, #8]
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	005b      	lsls	r3, r3, #1
 8005e26:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d123      	bne.n	8005e8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	08da      	lsrs	r2, r3, #3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	3208      	adds	r2, #8
 8005e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	220f      	movs	r2, #15
 8005e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5e:	43db      	mvns	r3, r3
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	4013      	ands	r3, r2
 8005e64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	691a      	ldr	r2, [r3, #16]
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f003 0307 	and.w	r3, r3, #7
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	fa02 f303 	lsl.w	r3, r2, r3
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	08da      	lsrs	r2, r3, #3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3208      	adds	r2, #8
 8005e84:	6939      	ldr	r1, [r7, #16]
 8005e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	2203      	movs	r2, #3
 8005e96:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9a:	43db      	mvns	r3, r3
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f003 0203 	and.w	r2, r3, #3
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 80a6 	beq.w	8006018 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ecc:	4b5b      	ldr	r3, [pc, #364]	; (800603c <HAL_GPIO_Init+0x2e4>)
 8005ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed0:	4a5a      	ldr	r2, [pc, #360]	; (800603c <HAL_GPIO_Init+0x2e4>)
 8005ed2:	f043 0301 	orr.w	r3, r3, #1
 8005ed6:	6613      	str	r3, [r2, #96]	; 0x60
 8005ed8:	4b58      	ldr	r3, [pc, #352]	; (800603c <HAL_GPIO_Init+0x2e4>)
 8005eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	60bb      	str	r3, [r7, #8]
 8005ee2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ee4:	4a56      	ldr	r2, [pc, #344]	; (8006040 <HAL_GPIO_Init+0x2e8>)
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	089b      	lsrs	r3, r3, #2
 8005eea:	3302      	adds	r3, #2
 8005eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f003 0303 	and.w	r3, r3, #3
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	220f      	movs	r2, #15
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	43db      	mvns	r3, r3
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4013      	ands	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005f0e:	d01f      	beq.n	8005f50 <HAL_GPIO_Init+0x1f8>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a4c      	ldr	r2, [pc, #304]	; (8006044 <HAL_GPIO_Init+0x2ec>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d019      	beq.n	8005f4c <HAL_GPIO_Init+0x1f4>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a4b      	ldr	r2, [pc, #300]	; (8006048 <HAL_GPIO_Init+0x2f0>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d013      	beq.n	8005f48 <HAL_GPIO_Init+0x1f0>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a4a      	ldr	r2, [pc, #296]	; (800604c <HAL_GPIO_Init+0x2f4>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d00d      	beq.n	8005f44 <HAL_GPIO_Init+0x1ec>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a49      	ldr	r2, [pc, #292]	; (8006050 <HAL_GPIO_Init+0x2f8>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d007      	beq.n	8005f40 <HAL_GPIO_Init+0x1e8>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a48      	ldr	r2, [pc, #288]	; (8006054 <HAL_GPIO_Init+0x2fc>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d101      	bne.n	8005f3c <HAL_GPIO_Init+0x1e4>
 8005f38:	2305      	movs	r3, #5
 8005f3a:	e00a      	b.n	8005f52 <HAL_GPIO_Init+0x1fa>
 8005f3c:	2306      	movs	r3, #6
 8005f3e:	e008      	b.n	8005f52 <HAL_GPIO_Init+0x1fa>
 8005f40:	2304      	movs	r3, #4
 8005f42:	e006      	b.n	8005f52 <HAL_GPIO_Init+0x1fa>
 8005f44:	2303      	movs	r3, #3
 8005f46:	e004      	b.n	8005f52 <HAL_GPIO_Init+0x1fa>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	e002      	b.n	8005f52 <HAL_GPIO_Init+0x1fa>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e000      	b.n	8005f52 <HAL_GPIO_Init+0x1fa>
 8005f50:	2300      	movs	r3, #0
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	f002 0203 	and.w	r2, r2, #3
 8005f58:	0092      	lsls	r2, r2, #2
 8005f5a:	4093      	lsls	r3, r2
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f62:	4937      	ldr	r1, [pc, #220]	; (8006040 <HAL_GPIO_Init+0x2e8>)
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	089b      	lsrs	r3, r3, #2
 8005f68:	3302      	adds	r3, #2
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f70:	4b39      	ldr	r3, [pc, #228]	; (8006058 <HAL_GPIO_Init+0x300>)
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	43db      	mvns	r3, r3
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f94:	4a30      	ldr	r2, [pc, #192]	; (8006058 <HAL_GPIO_Init+0x300>)
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f9a:	4b2f      	ldr	r3, [pc, #188]	; (8006058 <HAL_GPIO_Init+0x300>)
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	43db      	mvns	r3, r3
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005fbe:	4a26      	ldr	r2, [pc, #152]	; (8006058 <HAL_GPIO_Init+0x300>)
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005fc4:	4b24      	ldr	r3, [pc, #144]	; (8006058 <HAL_GPIO_Init+0x300>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	43db      	mvns	r3, r3
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d003      	beq.n	8005fe8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005fe8:	4a1b      	ldr	r2, [pc, #108]	; (8006058 <HAL_GPIO_Init+0x300>)
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005fee:	4b1a      	ldr	r3, [pc, #104]	; (8006058 <HAL_GPIO_Init+0x300>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	43db      	mvns	r3, r3
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4313      	orrs	r3, r2
 8006010:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006012:	4a11      	ldr	r2, [pc, #68]	; (8006058 <HAL_GPIO_Init+0x300>)
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	3301      	adds	r3, #1
 800601c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	fa22 f303 	lsr.w	r3, r2, r3
 8006028:	2b00      	cmp	r3, #0
 800602a:	f47f ae9d 	bne.w	8005d68 <HAL_GPIO_Init+0x10>
  }
}
 800602e:	bf00      	nop
 8006030:	bf00      	nop
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	40021000 	.word	0x40021000
 8006040:	40010000 	.word	0x40010000
 8006044:	48000400 	.word	0x48000400
 8006048:	48000800 	.word	0x48000800
 800604c:	48000c00 	.word	0x48000c00
 8006050:	48001000 	.word	0x48001000
 8006054:	48001400 	.word	0x48001400
 8006058:	40010400 	.word	0x40010400

0800605c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006066:	2300      	movs	r3, #0
 8006068:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800606a:	e0bd      	b.n	80061e8 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800606c:	2201      	movs	r2, #1
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	fa02 f303 	lsl.w	r3, r2, r3
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	4013      	ands	r3, r2
 8006078:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 80b0 	beq.w	80061e2 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8006082:	4a60      	ldr	r2, [pc, #384]	; (8006204 <HAL_GPIO_DeInit+0x1a8>)
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	089b      	lsrs	r3, r3, #2
 8006088:	3302      	adds	r3, #2
 800608a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800608e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f003 0303 	and.w	r3, r3, #3
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	220f      	movs	r2, #15
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4013      	ands	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80060aa:	d01f      	beq.n	80060ec <HAL_GPIO_DeInit+0x90>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a56      	ldr	r2, [pc, #344]	; (8006208 <HAL_GPIO_DeInit+0x1ac>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d019      	beq.n	80060e8 <HAL_GPIO_DeInit+0x8c>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a55      	ldr	r2, [pc, #340]	; (800620c <HAL_GPIO_DeInit+0x1b0>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d013      	beq.n	80060e4 <HAL_GPIO_DeInit+0x88>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a54      	ldr	r2, [pc, #336]	; (8006210 <HAL_GPIO_DeInit+0x1b4>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00d      	beq.n	80060e0 <HAL_GPIO_DeInit+0x84>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a53      	ldr	r2, [pc, #332]	; (8006214 <HAL_GPIO_DeInit+0x1b8>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d007      	beq.n	80060dc <HAL_GPIO_DeInit+0x80>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a52      	ldr	r2, [pc, #328]	; (8006218 <HAL_GPIO_DeInit+0x1bc>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d101      	bne.n	80060d8 <HAL_GPIO_DeInit+0x7c>
 80060d4:	2305      	movs	r3, #5
 80060d6:	e00a      	b.n	80060ee <HAL_GPIO_DeInit+0x92>
 80060d8:	2306      	movs	r3, #6
 80060da:	e008      	b.n	80060ee <HAL_GPIO_DeInit+0x92>
 80060dc:	2304      	movs	r3, #4
 80060de:	e006      	b.n	80060ee <HAL_GPIO_DeInit+0x92>
 80060e0:	2303      	movs	r3, #3
 80060e2:	e004      	b.n	80060ee <HAL_GPIO_DeInit+0x92>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e002      	b.n	80060ee <HAL_GPIO_DeInit+0x92>
 80060e8:	2301      	movs	r3, #1
 80060ea:	e000      	b.n	80060ee <HAL_GPIO_DeInit+0x92>
 80060ec:	2300      	movs	r3, #0
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	f002 0203 	and.w	r2, r2, #3
 80060f4:	0092      	lsls	r2, r2, #2
 80060f6:	4093      	lsls	r3, r2
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d132      	bne.n	8006164 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80060fe:	4b47      	ldr	r3, [pc, #284]	; (800621c <HAL_GPIO_DeInit+0x1c0>)
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	43db      	mvns	r3, r3
 8006106:	4945      	ldr	r1, [pc, #276]	; (800621c <HAL_GPIO_DeInit+0x1c0>)
 8006108:	4013      	ands	r3, r2
 800610a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800610c:	4b43      	ldr	r3, [pc, #268]	; (800621c <HAL_GPIO_DeInit+0x1c0>)
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	43db      	mvns	r3, r3
 8006114:	4941      	ldr	r1, [pc, #260]	; (800621c <HAL_GPIO_DeInit+0x1c0>)
 8006116:	4013      	ands	r3, r2
 8006118:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800611a:	4b40      	ldr	r3, [pc, #256]	; (800621c <HAL_GPIO_DeInit+0x1c0>)
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	43db      	mvns	r3, r3
 8006122:	493e      	ldr	r1, [pc, #248]	; (800621c <HAL_GPIO_DeInit+0x1c0>)
 8006124:	4013      	ands	r3, r2
 8006126:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8006128:	4b3c      	ldr	r3, [pc, #240]	; (800621c <HAL_GPIO_DeInit+0x1c0>)
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	43db      	mvns	r3, r3
 8006130:	493a      	ldr	r1, [pc, #232]	; (800621c <HAL_GPIO_DeInit+0x1c0>)
 8006132:	4013      	ands	r3, r2
 8006134:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f003 0303 	and.w	r3, r3, #3
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	220f      	movs	r2, #15
 8006140:	fa02 f303 	lsl.w	r3, r2, r3
 8006144:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006146:	4a2f      	ldr	r2, [pc, #188]	; (8006204 <HAL_GPIO_DeInit+0x1a8>)
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	089b      	lsrs	r3, r3, #2
 800614c:	3302      	adds	r3, #2
 800614e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	43da      	mvns	r2, r3
 8006156:	482b      	ldr	r0, [pc, #172]	; (8006204 <HAL_GPIO_DeInit+0x1a8>)
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	089b      	lsrs	r3, r3, #2
 800615c:	400a      	ands	r2, r1
 800615e:	3302      	adds	r3, #2
 8006160:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	2103      	movs	r1, #3
 800616e:	fa01 f303 	lsl.w	r3, r1, r3
 8006172:	431a      	orrs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	08da      	lsrs	r2, r3, #3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3208      	adds	r2, #8
 8006180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	220f      	movs	r2, #15
 800618e:	fa02 f303 	lsl.w	r3, r2, r3
 8006192:	43db      	mvns	r3, r3
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	08d2      	lsrs	r2, r2, #3
 8006198:	4019      	ands	r1, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	3208      	adds	r2, #8
 800619e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	2103      	movs	r1, #3
 80061ac:	fa01 f303 	lsl.w	r3, r1, r3
 80061b0:	43db      	mvns	r3, r3
 80061b2:	401a      	ands	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	2101      	movs	r1, #1
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	fa01 f303 	lsl.w	r3, r1, r3
 80061c4:	43db      	mvns	r3, r3
 80061c6:	401a      	ands	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	2103      	movs	r1, #3
 80061d6:	fa01 f303 	lsl.w	r3, r1, r3
 80061da:	43db      	mvns	r3, r3
 80061dc:	401a      	ands	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	609a      	str	r2, [r3, #8]
    }

    position++;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	3301      	adds	r3, #1
 80061e6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	fa22 f303 	lsr.w	r3, r2, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f47f af3b 	bne.w	800606c <HAL_GPIO_DeInit+0x10>
  }
}
 80061f6:	bf00      	nop
 80061f8:	bf00      	nop
 80061fa:	371c      	adds	r7, #28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	40010000 	.word	0x40010000
 8006208:	48000400 	.word	0x48000400
 800620c:	48000800 	.word	0x48000800
 8006210:	48000c00 	.word	0x48000c00
 8006214:	48001000 	.word	0x48001000
 8006218:	48001400 	.word	0x48001400
 800621c:	40010400 	.word	0x40010400

08006220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	460b      	mov	r3, r1
 800622a:	807b      	strh	r3, [r7, #2]
 800622c:	4613      	mov	r3, r2
 800622e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006230:	787b      	ldrb	r3, [r7, #1]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006236:	887a      	ldrh	r2, [r7, #2]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800623c:	e002      	b.n	8006244 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800623e:	887a      	ldrh	r2, [r7, #2]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	4603      	mov	r3, r0
 8006258:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800625a:	4b08      	ldr	r3, [pc, #32]	; (800627c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800625c:	695a      	ldr	r2, [r3, #20]
 800625e:	88fb      	ldrh	r3, [r7, #6]
 8006260:	4013      	ands	r3, r2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d006      	beq.n	8006274 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006266:	4a05      	ldr	r2, [pc, #20]	; (800627c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006268:	88fb      	ldrh	r3, [r7, #6]
 800626a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800626c:	88fb      	ldrh	r3, [r7, #6]
 800626e:	4618      	mov	r0, r3
 8006270:	f000 f806 	bl	8006280 <HAL_GPIO_EXTI_Callback>
  }
}
 8006274:	bf00      	nop
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	40010400 	.word	0x40010400

08006280 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	4603      	mov	r3, r0
 8006288:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b082      	sub	sp, #8
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e08d      	b.n	80063c4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d106      	bne.n	80062c2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7fc fb47 	bl	8002950 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2224      	movs	r2, #36	; 0x24
 80062c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0201 	bic.w	r2, r2, #1
 80062d8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80062e6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689a      	ldr	r2, [r3, #8]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062f6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d107      	bne.n	8006310 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800630c:	609a      	str	r2, [r3, #8]
 800630e:	e006      	b.n	800631e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800631c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d108      	bne.n	8006338 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006334:	605a      	str	r2, [r3, #4]
 8006336:	e007      	b.n	8006348 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006346:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6812      	ldr	r2, [r2, #0]
 8006352:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800635a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68da      	ldr	r2, [r3, #12]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800636a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	430a      	orrs	r2, r1
 8006384:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	69d9      	ldr	r1, [r3, #28]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1a      	ldr	r2, [r3, #32]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f042 0201 	orr.w	r2, r2, #1
 80063a4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b088      	sub	sp, #32
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	4608      	mov	r0, r1
 80063d6:	4611      	mov	r1, r2
 80063d8:	461a      	mov	r2, r3
 80063da:	4603      	mov	r3, r0
 80063dc:	817b      	strh	r3, [r7, #10]
 80063de:	460b      	mov	r3, r1
 80063e0:	813b      	strh	r3, [r7, #8]
 80063e2:	4613      	mov	r3, r2
 80063e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	f040 80f9 	bne.w	80065e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <HAL_I2C_Mem_Write+0x34>
 80063fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d105      	bne.n	800640c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006406:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e0ed      	b.n	80065e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006412:	2b01      	cmp	r3, #1
 8006414:	d101      	bne.n	800641a <HAL_I2C_Mem_Write+0x4e>
 8006416:	2302      	movs	r3, #2
 8006418:	e0e6      	b.n	80065e8 <HAL_I2C_Mem_Write+0x21c>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006422:	f7fc fcf1 	bl	8002e08 <HAL_GetTick>
 8006426:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	2319      	movs	r3, #25
 800642e:	2201      	movs	r2, #1
 8006430:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 fac3 	bl	80069c0 <I2C_WaitOnFlagUntilTimeout>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e0d1      	b.n	80065e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2221      	movs	r2, #33	; 0x21
 8006448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2240      	movs	r2, #64	; 0x40
 8006450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a3a      	ldr	r2, [r7, #32]
 800645e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006464:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800646c:	88f8      	ldrh	r0, [r7, #6]
 800646e:	893a      	ldrh	r2, [r7, #8]
 8006470:	8979      	ldrh	r1, [r7, #10]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	9301      	str	r3, [sp, #4]
 8006476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	4603      	mov	r3, r0
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 f9d3 	bl	8006828 <I2C_RequestMemoryWrite>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d005      	beq.n	8006494 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e0a9      	b.n	80065e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006498:	b29b      	uxth	r3, r3
 800649a:	2bff      	cmp	r3, #255	; 0xff
 800649c:	d90e      	bls.n	80064bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	22ff      	movs	r2, #255	; 0xff
 80064a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	8979      	ldrh	r1, [r7, #10]
 80064ac:	2300      	movs	r3, #0
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 fc47 	bl	8006d48 <I2C_TransferConfig>
 80064ba:	e00f      	b.n	80064dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	8979      	ldrh	r1, [r7, #10]
 80064ce:	2300      	movs	r3, #0
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 fc36 	bl	8006d48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 fac6 	bl	8006a72 <I2C_WaitOnTXISFlagUntilTimeout>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e07b      	b.n	80065e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	781a      	ldrb	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650a:	b29b      	uxth	r3, r3
 800650c:	3b01      	subs	r3, #1
 800650e:	b29a      	uxth	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006518:	3b01      	subs	r3, #1
 800651a:	b29a      	uxth	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006524:	b29b      	uxth	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d034      	beq.n	8006594 <HAL_I2C_Mem_Write+0x1c8>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800652e:	2b00      	cmp	r3, #0
 8006530:	d130      	bne.n	8006594 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	2200      	movs	r2, #0
 800653a:	2180      	movs	r1, #128	; 0x80
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 fa3f 	bl	80069c0 <I2C_WaitOnFlagUntilTimeout>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e04d      	b.n	80065e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006550:	b29b      	uxth	r3, r3
 8006552:	2bff      	cmp	r3, #255	; 0xff
 8006554:	d90e      	bls.n	8006574 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	22ff      	movs	r2, #255	; 0xff
 800655a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006560:	b2da      	uxtb	r2, r3
 8006562:	8979      	ldrh	r1, [r7, #10]
 8006564:	2300      	movs	r3, #0
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 fbeb 	bl	8006d48 <I2C_TransferConfig>
 8006572:	e00f      	b.n	8006594 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006578:	b29a      	uxth	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006582:	b2da      	uxtb	r2, r3
 8006584:	8979      	ldrh	r1, [r7, #10]
 8006586:	2300      	movs	r3, #0
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f000 fbda 	bl	8006d48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006598:	b29b      	uxth	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d19e      	bne.n	80064dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 faac 	bl	8006b00 <I2C_WaitOnSTOPFlagUntilTimeout>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e01a      	b.n	80065e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2220      	movs	r2, #32
 80065b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6859      	ldr	r1, [r3, #4]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	4b0a      	ldr	r3, [pc, #40]	; (80065f0 <HAL_I2C_Mem_Write+0x224>)
 80065c6:	400b      	ands	r3, r1
 80065c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2220      	movs	r2, #32
 80065ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	e000      	b.n	80065e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80065e6:	2302      	movs	r3, #2
  }
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3718      	adds	r7, #24
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	fe00e800 	.word	0xfe00e800

080065f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	4608      	mov	r0, r1
 80065fe:	4611      	mov	r1, r2
 8006600:	461a      	mov	r2, r3
 8006602:	4603      	mov	r3, r0
 8006604:	817b      	strh	r3, [r7, #10]
 8006606:	460b      	mov	r3, r1
 8006608:	813b      	strh	r3, [r7, #8]
 800660a:	4613      	mov	r3, r2
 800660c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b20      	cmp	r3, #32
 8006618:	f040 80fd 	bne.w	8006816 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <HAL_I2C_Mem_Read+0x34>
 8006622:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006624:	2b00      	cmp	r3, #0
 8006626:	d105      	bne.n	8006634 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800662e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e0f1      	b.n	8006818 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800663a:	2b01      	cmp	r3, #1
 800663c:	d101      	bne.n	8006642 <HAL_I2C_Mem_Read+0x4e>
 800663e:	2302      	movs	r3, #2
 8006640:	e0ea      	b.n	8006818 <HAL_I2C_Mem_Read+0x224>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800664a:	f7fc fbdd 	bl	8002e08 <HAL_GetTick>
 800664e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	2319      	movs	r3, #25
 8006656:	2201      	movs	r2, #1
 8006658:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 f9af 	bl	80069c0 <I2C_WaitOnFlagUntilTimeout>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e0d5      	b.n	8006818 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2222      	movs	r2, #34	; 0x22
 8006670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2240      	movs	r2, #64	; 0x40
 8006678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6a3a      	ldr	r2, [r7, #32]
 8006686:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800668c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006694:	88f8      	ldrh	r0, [r7, #6]
 8006696:	893a      	ldrh	r2, [r7, #8]
 8006698:	8979      	ldrh	r1, [r7, #10]
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	9301      	str	r3, [sp, #4]
 800669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	4603      	mov	r3, r0
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 f913 	bl	80068d0 <I2C_RequestMemoryRead>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d005      	beq.n	80066bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e0ad      	b.n	8006818 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	2bff      	cmp	r3, #255	; 0xff
 80066c4:	d90e      	bls.n	80066e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	22ff      	movs	r2, #255	; 0xff
 80066ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	8979      	ldrh	r1, [r7, #10]
 80066d4:	4b52      	ldr	r3, [pc, #328]	; (8006820 <HAL_I2C_Mem_Read+0x22c>)
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f000 fb33 	bl	8006d48 <I2C_TransferConfig>
 80066e2:	e00f      	b.n	8006704 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	8979      	ldrh	r1, [r7, #10]
 80066f6:	4b4a      	ldr	r3, [pc, #296]	; (8006820 <HAL_I2C_Mem_Read+0x22c>)
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f000 fb22 	bl	8006d48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670a:	2200      	movs	r2, #0
 800670c:	2104      	movs	r1, #4
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f000 f956 	bl	80069c0 <I2C_WaitOnFlagUntilTimeout>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e07c      	b.n	8006818 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	b2d2      	uxtb	r2, r2
 800672a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800673a:	3b01      	subs	r3, #1
 800673c:	b29a      	uxth	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006746:	b29b      	uxth	r3, r3
 8006748:	3b01      	subs	r3, #1
 800674a:	b29a      	uxth	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d034      	beq.n	80067c4 <HAL_I2C_Mem_Read+0x1d0>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800675e:	2b00      	cmp	r3, #0
 8006760:	d130      	bne.n	80067c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006768:	2200      	movs	r2, #0
 800676a:	2180      	movs	r1, #128	; 0x80
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 f927 	bl	80069c0 <I2C_WaitOnFlagUntilTimeout>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d001      	beq.n	800677c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e04d      	b.n	8006818 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006780:	b29b      	uxth	r3, r3
 8006782:	2bff      	cmp	r3, #255	; 0xff
 8006784:	d90e      	bls.n	80067a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	22ff      	movs	r2, #255	; 0xff
 800678a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006790:	b2da      	uxtb	r2, r3
 8006792:	8979      	ldrh	r1, [r7, #10]
 8006794:	2300      	movs	r3, #0
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 fad3 	bl	8006d48 <I2C_TransferConfig>
 80067a2:	e00f      	b.n	80067c4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	8979      	ldrh	r1, [r7, #10]
 80067b6:	2300      	movs	r3, #0
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 fac2 	bl	8006d48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d19a      	bne.n	8006704 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 f994 	bl	8006b00 <I2C_WaitOnSTOPFlagUntilTimeout>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e01a      	b.n	8006818 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2220      	movs	r2, #32
 80067e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	6859      	ldr	r1, [r3, #4]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	4b0b      	ldr	r3, [pc, #44]	; (8006824 <HAL_I2C_Mem_Read+0x230>)
 80067f6:	400b      	ands	r3, r1
 80067f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2220      	movs	r2, #32
 80067fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	e000      	b.n	8006818 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006816:	2302      	movs	r3, #2
  }
}
 8006818:	4618      	mov	r0, r3
 800681a:	3718      	adds	r7, #24
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	80002400 	.word	0x80002400
 8006824:	fe00e800 	.word	0xfe00e800

08006828 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af02      	add	r7, sp, #8
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	4608      	mov	r0, r1
 8006832:	4611      	mov	r1, r2
 8006834:	461a      	mov	r2, r3
 8006836:	4603      	mov	r3, r0
 8006838:	817b      	strh	r3, [r7, #10]
 800683a:	460b      	mov	r3, r1
 800683c:	813b      	strh	r3, [r7, #8]
 800683e:	4613      	mov	r3, r2
 8006840:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006842:	88fb      	ldrh	r3, [r7, #6]
 8006844:	b2da      	uxtb	r2, r3
 8006846:	8979      	ldrh	r1, [r7, #10]
 8006848:	4b20      	ldr	r3, [pc, #128]	; (80068cc <I2C_RequestMemoryWrite+0xa4>)
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 fa79 	bl	8006d48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006856:	69fa      	ldr	r2, [r7, #28]
 8006858:	69b9      	ldr	r1, [r7, #24]
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 f909 	bl	8006a72 <I2C_WaitOnTXISFlagUntilTimeout>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e02c      	b.n	80068c4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800686a:	88fb      	ldrh	r3, [r7, #6]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d105      	bne.n	800687c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006870:	893b      	ldrh	r3, [r7, #8]
 8006872:	b2da      	uxtb	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	629a      	str	r2, [r3, #40]	; 0x28
 800687a:	e015      	b.n	80068a8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800687c:	893b      	ldrh	r3, [r7, #8]
 800687e:	0a1b      	lsrs	r3, r3, #8
 8006880:	b29b      	uxth	r3, r3
 8006882:	b2da      	uxtb	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800688a:	69fa      	ldr	r2, [r7, #28]
 800688c:	69b9      	ldr	r1, [r7, #24]
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 f8ef 	bl	8006a72 <I2C_WaitOnTXISFlagUntilTimeout>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e012      	b.n	80068c4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800689e:	893b      	ldrh	r3, [r7, #8]
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	2200      	movs	r2, #0
 80068b0:	2180      	movs	r1, #128	; 0x80
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f000 f884 	bl	80069c0 <I2C_WaitOnFlagUntilTimeout>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e000      	b.n	80068c4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	80002000 	.word	0x80002000

080068d0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af02      	add	r7, sp, #8
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	4608      	mov	r0, r1
 80068da:	4611      	mov	r1, r2
 80068dc:	461a      	mov	r2, r3
 80068de:	4603      	mov	r3, r0
 80068e0:	817b      	strh	r3, [r7, #10]
 80068e2:	460b      	mov	r3, r1
 80068e4:	813b      	strh	r3, [r7, #8]
 80068e6:	4613      	mov	r3, r2
 80068e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80068ea:	88fb      	ldrh	r3, [r7, #6]
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	8979      	ldrh	r1, [r7, #10]
 80068f0:	4b20      	ldr	r3, [pc, #128]	; (8006974 <I2C_RequestMemoryRead+0xa4>)
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	2300      	movs	r3, #0
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f000 fa26 	bl	8006d48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068fc:	69fa      	ldr	r2, [r7, #28]
 80068fe:	69b9      	ldr	r1, [r7, #24]
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 f8b6 	bl	8006a72 <I2C_WaitOnTXISFlagUntilTimeout>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e02c      	b.n	800696a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006910:	88fb      	ldrh	r3, [r7, #6]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d105      	bne.n	8006922 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006916:	893b      	ldrh	r3, [r7, #8]
 8006918:	b2da      	uxtb	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	629a      	str	r2, [r3, #40]	; 0x28
 8006920:	e015      	b.n	800694e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006922:	893b      	ldrh	r3, [r7, #8]
 8006924:	0a1b      	lsrs	r3, r3, #8
 8006926:	b29b      	uxth	r3, r3
 8006928:	b2da      	uxtb	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006930:	69fa      	ldr	r2, [r7, #28]
 8006932:	69b9      	ldr	r1, [r7, #24]
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 f89c 	bl	8006a72 <I2C_WaitOnTXISFlagUntilTimeout>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e012      	b.n	800696a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006944:	893b      	ldrh	r3, [r7, #8]
 8006946:	b2da      	uxtb	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	2200      	movs	r2, #0
 8006956:	2140      	movs	r1, #64	; 0x40
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 f831 	bl	80069c0 <I2C_WaitOnFlagUntilTimeout>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e000      	b.n	800696a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	80002000 	.word	0x80002000

08006978 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b02      	cmp	r3, #2
 800698c:	d103      	bne.n	8006996 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2200      	movs	r2, #0
 8006994:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d007      	beq.n	80069b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699a      	ldr	r2, [r3, #24]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f042 0201 	orr.w	r2, r2, #1
 80069b2:	619a      	str	r2, [r3, #24]
  }
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	603b      	str	r3, [r7, #0]
 80069cc:	4613      	mov	r3, r2
 80069ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069d0:	e03b      	b.n	8006a4a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80069d2:	69ba      	ldr	r2, [r7, #24]
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 f8d6 	bl	8006b88 <I2C_IsErrorOccurred>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e041      	b.n	8006a6a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ec:	d02d      	beq.n	8006a4a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ee:	f7fc fa0b 	bl	8002e08 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d302      	bcc.n	8006a04 <I2C_WaitOnFlagUntilTimeout+0x44>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d122      	bne.n	8006a4a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699a      	ldr	r2, [r3, #24]
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	bf0c      	ite	eq
 8006a14:	2301      	moveq	r3, #1
 8006a16:	2300      	movne	r3, #0
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	79fb      	ldrb	r3, [r7, #7]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d113      	bne.n	8006a4a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a26:	f043 0220 	orr.w	r2, r3, #32
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2220      	movs	r2, #32
 8006a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e00f      	b.n	8006a6a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	699a      	ldr	r2, [r3, #24]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	4013      	ands	r3, r2
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	bf0c      	ite	eq
 8006a5a:	2301      	moveq	r3, #1
 8006a5c:	2300      	movne	r3, #0
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	461a      	mov	r2, r3
 8006a62:	79fb      	ldrb	r3, [r7, #7]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d0b4      	beq.n	80069d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	60f8      	str	r0, [r7, #12]
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a7e:	e033      	b.n	8006ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	68b9      	ldr	r1, [r7, #8]
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 f87f 	bl	8006b88 <I2C_IsErrorOccurred>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e031      	b.n	8006af8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9a:	d025      	beq.n	8006ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a9c:	f7fc f9b4 	bl	8002e08 <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d302      	bcc.n	8006ab2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d11a      	bne.n	8006ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d013      	beq.n	8006ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac4:	f043 0220 	orr.w	r2, r3, #32
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e007      	b.n	8006af8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d1c4      	bne.n	8006a80 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b0c:	e02f      	b.n	8006b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	68b9      	ldr	r1, [r7, #8]
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 f838 	bl	8006b88 <I2C_IsErrorOccurred>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e02d      	b.n	8006b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b22:	f7fc f971 	bl	8002e08 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d302      	bcc.n	8006b38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d11a      	bne.n	8006b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	f003 0320 	and.w	r3, r3, #32
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	d013      	beq.n	8006b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b4a:	f043 0220 	orr.w	r2, r3, #32
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2220      	movs	r2, #32
 8006b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e007      	b.n	8006b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	f003 0320 	and.w	r3, r3, #32
 8006b78:	2b20      	cmp	r3, #32
 8006b7a:	d1c8      	bne.n	8006b0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08a      	sub	sp, #40	; 0x28
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	f003 0310 	and.w	r3, r3, #16
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d068      	beq.n	8006c86 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2210      	movs	r2, #16
 8006bba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006bbc:	e049      	b.n	8006c52 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc4:	d045      	beq.n	8006c52 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006bc6:	f7fc f91f 	bl	8002e08 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d302      	bcc.n	8006bdc <I2C_IsErrorOccurred+0x54>
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d13a      	bne.n	8006c52 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006be6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bfe:	d121      	bne.n	8006c44 <I2C_IsErrorOccurred+0xbc>
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c06:	d01d      	beq.n	8006c44 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006c08:	7cfb      	ldrb	r3, [r7, #19]
 8006c0a:	2b20      	cmp	r3, #32
 8006c0c:	d01a      	beq.n	8006c44 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c1c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006c1e:	f7fc f8f3 	bl	8002e08 <HAL_GetTick>
 8006c22:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c24:	e00e      	b.n	8006c44 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006c26:	f7fc f8ef 	bl	8002e08 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b19      	cmp	r3, #25
 8006c32:	d907      	bls.n	8006c44 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	f043 0320 	orr.w	r3, r3, #32
 8006c3a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006c42:	e006      	b.n	8006c52 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	f003 0320 	and.w	r3, r3, #32
 8006c4e:	2b20      	cmp	r3, #32
 8006c50:	d1e9      	bne.n	8006c26 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	f003 0320 	and.w	r3, r3, #32
 8006c5c:	2b20      	cmp	r3, #32
 8006c5e:	d003      	beq.n	8006c68 <I2C_IsErrorOccurred+0xe0>
 8006c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d0aa      	beq.n	8006bbe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d103      	bne.n	8006c78 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2220      	movs	r2, #32
 8006c76:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	f043 0304 	orr.w	r3, r3, #4
 8006c7e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00b      	beq.n	8006cb0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	f043 0301 	orr.w	r3, r3, #1
 8006c9e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ca8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00b      	beq.n	8006cd2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	f043 0308 	orr.w	r3, r3, #8
 8006cc0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00b      	beq.n	8006cf4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	f043 0302 	orr.w	r3, r3, #2
 8006ce2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d01c      	beq.n	8006d36 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f7ff fe3b 	bl	8006978 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	6859      	ldr	r1, [r3, #4]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	4b0d      	ldr	r3, [pc, #52]	; (8006d44 <I2C_IsErrorOccurred+0x1bc>)
 8006d0e:	400b      	ands	r3, r1
 8006d10:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2220      	movs	r2, #32
 8006d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006d36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3728      	adds	r7, #40	; 0x28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	fe00e800 	.word	0xfe00e800

08006d48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	607b      	str	r3, [r7, #4]
 8006d52:	460b      	mov	r3, r1
 8006d54:	817b      	strh	r3, [r7, #10]
 8006d56:	4613      	mov	r3, r2
 8006d58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006d5a:	897b      	ldrh	r3, [r7, #10]
 8006d5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006d60:	7a7b      	ldrb	r3, [r7, #9]
 8006d62:	041b      	lsls	r3, r3, #16
 8006d64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006d68:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d76:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	0d5b      	lsrs	r3, r3, #21
 8006d82:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006d86:	4b08      	ldr	r3, [pc, #32]	; (8006da8 <I2C_TransferConfig+0x60>)
 8006d88:	430b      	orrs	r3, r1
 8006d8a:	43db      	mvns	r3, r3
 8006d8c:	ea02 0103 	and.w	r1, r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006d9a:	bf00      	nop
 8006d9c:	371c      	adds	r7, #28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	03ff63ff 	.word	0x03ff63ff

08006dac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b20      	cmp	r3, #32
 8006dc0:	d138      	bne.n	8006e34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d101      	bne.n	8006dd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006dcc:	2302      	movs	r3, #2
 8006dce:	e032      	b.n	8006e36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2224      	movs	r2, #36	; 0x24
 8006ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 0201 	bic.w	r2, r2, #1
 8006dee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006dfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6819      	ldr	r1, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f042 0201 	orr.w	r2, r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2220      	movs	r2, #32
 8006e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e30:	2300      	movs	r3, #0
 8006e32:	e000      	b.n	8006e36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e34:	2302      	movs	r3, #2
  }
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b085      	sub	sp, #20
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b20      	cmp	r3, #32
 8006e56:	d139      	bne.n	8006ecc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d101      	bne.n	8006e66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006e62:	2302      	movs	r3, #2
 8006e64:	e033      	b.n	8006ece <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2224      	movs	r2, #36	; 0x24
 8006e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f022 0201 	bic.w	r2, r2, #1
 8006e84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	021b      	lsls	r3, r3, #8
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f042 0201 	orr.w	r2, r2, #1
 8006eb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	e000      	b.n	8006ece <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006ecc:	2302      	movs	r3, #2
  }
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b084      	sub	sp, #16
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e0c0      	b.n	800706e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d106      	bne.n	8006f06 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f007 fb01 	bl	800e508 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2203      	movs	r2, #3
 8006f0a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f003 f92d 	bl	800a172 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f18:	2300      	movs	r3, #0
 8006f1a:	73fb      	strb	r3, [r7, #15]
 8006f1c:	e03e      	b.n	8006f9c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006f1e:	7bfa      	ldrb	r2, [r7, #15]
 8006f20:	6879      	ldr	r1, [r7, #4]
 8006f22:	4613      	mov	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	00db      	lsls	r3, r3, #3
 8006f2a:	440b      	add	r3, r1
 8006f2c:	3311      	adds	r3, #17
 8006f2e:	2201      	movs	r2, #1
 8006f30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006f32:	7bfa      	ldrb	r2, [r7, #15]
 8006f34:	6879      	ldr	r1, [r7, #4]
 8006f36:	4613      	mov	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	00db      	lsls	r3, r3, #3
 8006f3e:	440b      	add	r3, r1
 8006f40:	3310      	adds	r3, #16
 8006f42:	7bfa      	ldrb	r2, [r7, #15]
 8006f44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006f46:	7bfa      	ldrb	r2, [r7, #15]
 8006f48:	6879      	ldr	r1, [r7, #4]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	00db      	lsls	r3, r3, #3
 8006f52:	440b      	add	r3, r1
 8006f54:	3313      	adds	r3, #19
 8006f56:	2200      	movs	r2, #0
 8006f58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006f5a:	7bfa      	ldrb	r2, [r7, #15]
 8006f5c:	6879      	ldr	r1, [r7, #4]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	00db      	lsls	r3, r3, #3
 8006f66:	440b      	add	r3, r1
 8006f68:	3320      	adds	r3, #32
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006f6e:	7bfa      	ldrb	r2, [r7, #15]
 8006f70:	6879      	ldr	r1, [r7, #4]
 8006f72:	4613      	mov	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	00db      	lsls	r3, r3, #3
 8006f7a:	440b      	add	r3, r1
 8006f7c:	3324      	adds	r3, #36	; 0x24
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006f82:	7bfb      	ldrb	r3, [r7, #15]
 8006f84:	6879      	ldr	r1, [r7, #4]
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	4613      	mov	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	440b      	add	r3, r1
 8006f92:	2200      	movs	r2, #0
 8006f94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	73fb      	strb	r3, [r7, #15]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	791b      	ldrb	r3, [r3, #4]
 8006fa0:	7bfa      	ldrb	r2, [r7, #15]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d3bb      	bcc.n	8006f1e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	73fb      	strb	r3, [r7, #15]
 8006faa:	e044      	b.n	8007036 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006fac:	7bfa      	ldrb	r2, [r7, #15]
 8006fae:	6879      	ldr	r1, [r7, #4]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	00db      	lsls	r3, r3, #3
 8006fb8:	440b      	add	r3, r1
 8006fba:	f203 1351 	addw	r3, r3, #337	; 0x151
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006fc2:	7bfa      	ldrb	r2, [r7, #15]
 8006fc4:	6879      	ldr	r1, [r7, #4]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	00db      	lsls	r3, r3, #3
 8006fce:	440b      	add	r3, r1
 8006fd0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fd4:	7bfa      	ldrb	r2, [r7, #15]
 8006fd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006fd8:	7bfa      	ldrb	r2, [r7, #15]
 8006fda:	6879      	ldr	r1, [r7, #4]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	00db      	lsls	r3, r3, #3
 8006fe4:	440b      	add	r3, r1
 8006fe6:	f203 1353 	addw	r3, r3, #339	; 0x153
 8006fea:	2200      	movs	r2, #0
 8006fec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006fee:	7bfa      	ldrb	r2, [r7, #15]
 8006ff0:	6879      	ldr	r1, [r7, #4]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	00db      	lsls	r3, r3, #3
 8006ffa:	440b      	add	r3, r1
 8006ffc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8007000:	2200      	movs	r2, #0
 8007002:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007004:	7bfa      	ldrb	r2, [r7, #15]
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	4613      	mov	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4413      	add	r3, r2
 800700e:	00db      	lsls	r3, r3, #3
 8007010:	440b      	add	r3, r1
 8007012:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007016:	2200      	movs	r2, #0
 8007018:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800701a:	7bfa      	ldrb	r2, [r7, #15]
 800701c:	6879      	ldr	r1, [r7, #4]
 800701e:	4613      	mov	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	00db      	lsls	r3, r3, #3
 8007026:	440b      	add	r3, r1
 8007028:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800702c:	2200      	movs	r2, #0
 800702e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	3301      	adds	r3, #1
 8007034:	73fb      	strb	r3, [r7, #15]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	791b      	ldrb	r3, [r3, #4]
 800703a:	7bfa      	ldrb	r2, [r7, #15]
 800703c:	429a      	cmp	r2, r3
 800703e:	d3b5      	bcc.n	8006fac <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6818      	ldr	r0, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	3304      	adds	r3, #4
 8007048:	e893 0006 	ldmia.w	r3, {r1, r2}
 800704c:	f003 f8ac 	bl	800a1a8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	7a9b      	ldrb	r3, [r3, #10]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d102      	bne.n	800706c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f001 fc41 	bl	80088ee <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b082      	sub	sp, #8
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8007084:	2b01      	cmp	r3, #1
 8007086:	d101      	bne.n	800708c <HAL_PCD_Start+0x16>
 8007088:	2302      	movs	r3, #2
 800708a:	e012      	b.n	80070b2 <HAL_PCD_Start+0x3c>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4618      	mov	r0, r3
 800709a:	f003 f853 	bl	800a144 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f005 fb13 	bl	800c6ce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f005 fb18 	bl	800c6fc <USB_ReadInterrupts>
 80070cc:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fb04 	bl	80076e6 <PCD_EP_ISR_Handler>

    return;
 80070de:	e110      	b.n	8007302 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d013      	beq.n	8007112 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070fc:	b292      	uxth	r2, r2
 80070fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f007 fa99 	bl	800e63a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007108:	2100      	movs	r1, #0
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f8fc 	bl	8007308 <HAL_PCD_SetAddress>

    return;
 8007110:	e0f7      	b.n	8007302 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00c      	beq.n	8007136 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007124:	b29a      	uxth	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800712e:	b292      	uxth	r2, r2
 8007130:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007134:	e0e5      	b.n	8007302 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00c      	beq.n	800715a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007148:	b29a      	uxth	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007152:	b292      	uxth	r2, r2
 8007154:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007158:	e0d3      	b.n	8007302 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d034      	beq.n	80071ce <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800716c:	b29a      	uxth	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 0204 	bic.w	r2, r2, #4
 8007176:	b292      	uxth	r2, r2
 8007178:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007184:	b29a      	uxth	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0208 	bic.w	r2, r2, #8
 800718e:	b292      	uxth	r2, r2
 8007190:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800719a:	2b01      	cmp	r3, #1
 800719c:	d107      	bne.n	80071ae <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80071a6:	2100      	movs	r1, #0
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f007 fc39 	bl	800ea20 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f007 fa7c 	bl	800e6ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80071bc:	b29a      	uxth	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80071c6:	b292      	uxth	r2, r2
 80071c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80071cc:	e099      	b.n	8007302 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d027      	beq.n	8007228 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f042 0208 	orr.w	r2, r2, #8
 80071ea:	b292      	uxth	r2, r2
 80071ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007202:	b292      	uxth	r2, r2
 8007204:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007210:	b29a      	uxth	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f042 0204 	orr.w	r2, r2, #4
 800721a:	b292      	uxth	r2, r2
 800721c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f007 fa29 	bl	800e678 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007226:	e06c      	b.n	8007302 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800722e:	2b00      	cmp	r3, #0
 8007230:	d040      	beq.n	80072b4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800723a:	b29a      	uxth	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007244:	b292      	uxth	r2, r2
 8007246:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8007250:	2b00      	cmp	r3, #0
 8007252:	d12b      	bne.n	80072ac <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800725c:	b29a      	uxth	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f042 0204 	orr.w	r2, r2, #4
 8007266:	b292      	uxth	r2, r2
 8007268:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007274:	b29a      	uxth	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f042 0208 	orr.w	r2, r2, #8
 800727e:	b292      	uxth	r2, r2
 8007280:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007294:	b29b      	uxth	r3, r3
 8007296:	089b      	lsrs	r3, r3, #2
 8007298:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80072a2:	2101      	movs	r1, #1
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f007 fbbb 	bl	800ea20 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80072aa:	e02a      	b.n	8007302 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f007 f9e3 	bl	800e678 <HAL_PCD_SuspendCallback>
    return;
 80072b2:	e026      	b.n	8007302 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00f      	beq.n	80072de <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80072d0:	b292      	uxth	r2, r2
 80072d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f007 f9a1 	bl	800e61e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80072dc:	e011      	b.n	8007302 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00c      	beq.n	8007302 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072fa:	b292      	uxth	r2, r2
 80072fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007300:	bf00      	nop
  }
}
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800731a:	2b01      	cmp	r3, #1
 800731c:	d101      	bne.n	8007322 <HAL_PCD_SetAddress+0x1a>
 800731e:	2302      	movs	r3, #2
 8007320:	e012      	b.n	8007348 <HAL_PCD_SetAddress+0x40>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	78fa      	ldrb	r2, [r7, #3]
 800732e:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	78fa      	ldrb	r2, [r7, #3]
 8007336:	4611      	mov	r1, r2
 8007338:	4618      	mov	r0, r3
 800733a:	f005 f9b4 	bl	800c6a6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	4608      	mov	r0, r1
 800735a:	4611      	mov	r1, r2
 800735c:	461a      	mov	r2, r3
 800735e:	4603      	mov	r3, r0
 8007360:	70fb      	strb	r3, [r7, #3]
 8007362:	460b      	mov	r3, r1
 8007364:	803b      	strh	r3, [r7, #0]
 8007366:	4613      	mov	r3, r2
 8007368:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800736e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007372:	2b00      	cmp	r3, #0
 8007374:	da0e      	bge.n	8007394 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007376:	78fb      	ldrb	r3, [r7, #3]
 8007378:	f003 0207 	and.w	r2, r3, #7
 800737c:	4613      	mov	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	3310      	adds	r3, #16
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	4413      	add	r3, r2
 800738a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2201      	movs	r2, #1
 8007390:	705a      	strb	r2, [r3, #1]
 8007392:	e00e      	b.n	80073b2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007394:	78fb      	ldrb	r3, [r7, #3]
 8007396:	f003 0207 	and.w	r2, r3, #7
 800739a:	4613      	mov	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	00db      	lsls	r3, r3, #3
 80073a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	4413      	add	r3, r2
 80073aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80073b2:	78fb      	ldrb	r3, [r7, #3]
 80073b4:	f003 0307 	and.w	r3, r3, #7
 80073b8:	b2da      	uxtb	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80073be:	883a      	ldrh	r2, [r7, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	78ba      	ldrb	r2, [r7, #2]
 80073c8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80073ca:	78bb      	ldrb	r3, [r7, #2]
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d102      	bne.n	80073d6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d101      	bne.n	80073e4 <HAL_PCD_EP_Open+0x94>
 80073e0:	2302      	movs	r3, #2
 80073e2:	e00e      	b.n	8007402 <HAL_PCD_EP_Open+0xb2>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68f9      	ldr	r1, [r7, #12]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f002 fef6 	bl	800a1e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8007400:	7afb      	ldrb	r3, [r7, #11]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	460b      	mov	r3, r1
 8007414:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007416:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800741a:	2b00      	cmp	r3, #0
 800741c:	da0e      	bge.n	800743c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800741e:	78fb      	ldrb	r3, [r7, #3]
 8007420:	f003 0207 	and.w	r2, r3, #7
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	3310      	adds	r3, #16
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	4413      	add	r3, r2
 8007432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2201      	movs	r2, #1
 8007438:	705a      	strb	r2, [r3, #1]
 800743a:	e00e      	b.n	800745a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800743c:	78fb      	ldrb	r3, [r7, #3]
 800743e:	f003 0207 	and.w	r2, r3, #7
 8007442:	4613      	mov	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	00db      	lsls	r3, r3, #3
 800744a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	4413      	add	r3, r2
 8007452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800745a:	78fb      	ldrb	r3, [r7, #3]
 800745c:	f003 0307 	and.w	r3, r3, #7
 8007460:	b2da      	uxtb	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <HAL_PCD_EP_Close+0x6a>
 8007470:	2302      	movs	r3, #2
 8007472:	e00e      	b.n	8007492 <HAL_PCD_EP_Close+0x88>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68f9      	ldr	r1, [r7, #12]
 8007482:	4618      	mov	r0, r3
 8007484:	f003 fa72 	bl	800a96c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b086      	sub	sp, #24
 800749e:	af00      	add	r7, sp, #0
 80074a0:	60f8      	str	r0, [r7, #12]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	603b      	str	r3, [r7, #0]
 80074a6:	460b      	mov	r3, r1
 80074a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074aa:	7afb      	ldrb	r3, [r7, #11]
 80074ac:	f003 0207 	and.w	r2, r3, #7
 80074b0:	4613      	mov	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	4413      	add	r3, r2
 80074b6:	00db      	lsls	r3, r3, #3
 80074b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	4413      	add	r3, r2
 80074c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2200      	movs	r2, #0
 80074d2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	2200      	movs	r2, #0
 80074d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80074da:	7afb      	ldrb	r3, [r7, #11]
 80074dc:	f003 0307 	and.w	r3, r3, #7
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6979      	ldr	r1, [r7, #20]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f003 fc2a 	bl	800ad46 <USB_EPStartXfer>

  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3718      	adds	r7, #24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007508:	78fb      	ldrb	r3, [r7, #3]
 800750a:	f003 0207 	and.w	r2, r3, #7
 800750e:	6879      	ldr	r1, [r7, #4]
 8007510:	4613      	mov	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	00db      	lsls	r3, r3, #3
 8007518:	440b      	add	r3, r1
 800751a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800751e:	681b      	ldr	r3, [r3, #0]
}
 8007520:	4618      	mov	r0, r3
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	607a      	str	r2, [r7, #4]
 8007536:	603b      	str	r3, [r7, #0]
 8007538:	460b      	mov	r3, r1
 800753a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800753c:	7afb      	ldrb	r3, [r7, #11]
 800753e:	f003 0207 	and.w	r2, r3, #7
 8007542:	4613      	mov	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	00db      	lsls	r3, r3, #3
 800754a:	3310      	adds	r3, #16
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	4413      	add	r3, r2
 8007550:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	683a      	ldr	r2, [r7, #0]
 800756a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	2200      	movs	r2, #0
 8007570:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2201      	movs	r2, #1
 8007576:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007578:	7afb      	ldrb	r3, [r7, #11]
 800757a:	f003 0307 	and.w	r3, r3, #7
 800757e:	b2da      	uxtb	r2, r3
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	6979      	ldr	r1, [r7, #20]
 800758a:	4618      	mov	r0, r3
 800758c:	f003 fbdb 	bl	800ad46 <USB_EPStartXfer>

  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	460b      	mov	r3, r1
 80075a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80075a6:	78fb      	ldrb	r3, [r7, #3]
 80075a8:	f003 0307 	and.w	r3, r3, #7
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	7912      	ldrb	r2, [r2, #4]
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d901      	bls.n	80075b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e03e      	b.n	8007636 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80075b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	da0e      	bge.n	80075de <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075c0:	78fb      	ldrb	r3, [r7, #3]
 80075c2:	f003 0207 	and.w	r2, r3, #7
 80075c6:	4613      	mov	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	00db      	lsls	r3, r3, #3
 80075ce:	3310      	adds	r3, #16
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	4413      	add	r3, r2
 80075d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2201      	movs	r2, #1
 80075da:	705a      	strb	r2, [r3, #1]
 80075dc:	e00c      	b.n	80075f8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80075de:	78fa      	ldrb	r2, [r7, #3]
 80075e0:	4613      	mov	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	00db      	lsls	r3, r3, #3
 80075e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	4413      	add	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2201      	movs	r2, #1
 80075fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80075fe:	78fb      	ldrb	r3, [r7, #3]
 8007600:	f003 0307 	and.w	r3, r3, #7
 8007604:	b2da      	uxtb	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8007610:	2b01      	cmp	r3, #1
 8007612:	d101      	bne.n	8007618 <HAL_PCD_EP_SetStall+0x7e>
 8007614:	2302      	movs	r3, #2
 8007616:	e00e      	b.n	8007636 <HAL_PCD_EP_SetStall+0x9c>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68f9      	ldr	r1, [r7, #12]
 8007626:	4618      	mov	r0, r3
 8007628:	f004 ff3e 	bl	800c4a8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	460b      	mov	r3, r1
 8007648:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800764a:	78fb      	ldrb	r3, [r7, #3]
 800764c:	f003 030f 	and.w	r3, r3, #15
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	7912      	ldrb	r2, [r2, #4]
 8007654:	4293      	cmp	r3, r2
 8007656:	d901      	bls.n	800765c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e040      	b.n	80076de <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800765c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007660:	2b00      	cmp	r3, #0
 8007662:	da0e      	bge.n	8007682 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007664:	78fb      	ldrb	r3, [r7, #3]
 8007666:	f003 0207 	and.w	r2, r3, #7
 800766a:	4613      	mov	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4413      	add	r3, r2
 8007670:	00db      	lsls	r3, r3, #3
 8007672:	3310      	adds	r3, #16
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	4413      	add	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2201      	movs	r2, #1
 800767e:	705a      	strb	r2, [r3, #1]
 8007680:	e00e      	b.n	80076a0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007682:	78fb      	ldrb	r3, [r7, #3]
 8007684:	f003 0207 	and.w	r2, r3, #7
 8007688:	4613      	mov	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	00db      	lsls	r3, r3, #3
 8007690:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	4413      	add	r3, r2
 8007698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80076a6:	78fb      	ldrb	r3, [r7, #3]
 80076a8:	f003 0307 	and.w	r3, r3, #7
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d101      	bne.n	80076c0 <HAL_PCD_EP_ClrStall+0x82>
 80076bc:	2302      	movs	r3, #2
 80076be:	e00e      	b.n	80076de <HAL_PCD_EP_ClrStall+0xa0>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68f9      	ldr	r1, [r7, #12]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f004 ff3b 	bl	800c54a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b096      	sub	sp, #88	; 0x58
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80076ee:	e3ae      	b.n	8007e4e <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80076f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80076fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007700:	b2db      	uxtb	r3, r3
 8007702:	f003 030f 	and.w	r3, r3, #15
 8007706:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800770a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800770e:	2b00      	cmp	r3, #0
 8007710:	f040 8170 	bne.w	80079f4 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007714:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007718:	f003 0310 	and.w	r3, r3, #16
 800771c:	2b00      	cmp	r3, #0
 800771e:	d14d      	bne.n	80077bc <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	b29b      	uxth	r3, r3
 8007728:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800772c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007730:	81fb      	strh	r3, [r7, #14]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	89fb      	ldrh	r3, [r7, #14]
 8007738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800773c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007740:	b29b      	uxth	r3, r3
 8007742:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	3310      	adds	r3, #16
 8007748:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007752:	b29b      	uxth	r3, r3
 8007754:	461a      	mov	r2, r3
 8007756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	00db      	lsls	r3, r3, #3
 800775c:	4413      	add	r3, r2
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	6812      	ldr	r2, [r2, #0]
 8007762:	4413      	add	r3, r2
 8007764:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800776e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007770:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007774:	695a      	ldr	r2, [r3, #20]
 8007776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	441a      	add	r2, r3
 800777c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800777e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007780:	2100      	movs	r1, #0
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f006 ff31 	bl	800e5ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	7b1b      	ldrb	r3, [r3, #12]
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	f000 835d 	beq.w	8007e4e <PCD_EP_ISR_Handler+0x768>
 8007794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	2b00      	cmp	r3, #0
 800779a:	f040 8358 	bne.w	8007e4e <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	7b1b      	ldrb	r3, [r3, #12]
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	b292      	uxth	r2, r2
 80077b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	731a      	strb	r2, [r3, #12]
 80077ba:	e348      	b.n	8007e4e <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077c2:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80077ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80077d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d032      	beq.n	8007840 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	461a      	mov	r2, r3
 80077e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	00db      	lsls	r3, r3, #3
 80077ec:	4413      	add	r3, r2
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	6812      	ldr	r2, [r2, #0]
 80077f2:	4413      	add	r3, r2
 80077f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077f8:	881b      	ldrh	r3, [r3, #0]
 80077fa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80077fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007800:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6818      	ldr	r0, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800780c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800780e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007812:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007814:	b29b      	uxth	r3, r3
 8007816:	f004 ffc3 	bl	800c7a0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	b29a      	uxth	r2, r3
 8007822:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007826:	4013      	ands	r3, r2
 8007828:	823b      	strh	r3, [r7, #16]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	8a3a      	ldrh	r2, [r7, #16]
 8007830:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007834:	b292      	uxth	r2, r2
 8007836:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f006 fea9 	bl	800e590 <HAL_PCD_SetupStageCallback>
 800783e:	e306      	b.n	8007e4e <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007840:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8007844:	2b00      	cmp	r3, #0
 8007846:	f280 8302 	bge.w	8007e4e <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	b29a      	uxth	r2, r3
 8007852:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007856:	4013      	ands	r3, r2
 8007858:	83fb      	strh	r3, [r7, #30]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	8bfa      	ldrh	r2, [r7, #30]
 8007860:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007864:	b292      	uxth	r2, r2
 8007866:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007870:	b29b      	uxth	r3, r3
 8007872:	461a      	mov	r2, r3
 8007874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	00db      	lsls	r3, r3, #3
 800787a:	4413      	add	r3, r2
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	6812      	ldr	r2, [r2, #0]
 8007880:	4413      	add	r3, r2
 8007882:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007886:	881b      	ldrh	r3, [r3, #0]
 8007888:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800788c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800788e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d019      	beq.n	80078cc <PCD_EP_ISR_Handler+0x1e6>
 8007898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d015      	beq.n	80078cc <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6818      	ldr	r0, [r3, #0]
 80078a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078a6:	6959      	ldr	r1, [r3, #20]
 80078a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078aa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80078ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078ae:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	f004 ff75 	bl	800c7a0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80078b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078b8:	695a      	ldr	r2, [r3, #20]
 80078ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	441a      	add	r2, r3
 80078c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078c2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80078c4:	2100      	movs	r1, #0
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f006 fe74 	bl	800e5b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80078d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80078da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f040 82b5 	bne.w	8007e4e <PCD_EP_ISR_Handler+0x768>
 80078e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80078e8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80078ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078f0:	f000 82ad 	beq.w	8007e4e <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	61bb      	str	r3, [r7, #24]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007902:	b29b      	uxth	r3, r3
 8007904:	461a      	mov	r2, r3
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	4413      	add	r3, r2
 800790a:	61bb      	str	r3, [r7, #24]
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007912:	617b      	str	r3, [r7, #20]
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	881b      	ldrh	r3, [r3, #0]
 8007918:	b29b      	uxth	r3, r3
 800791a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800791e:	b29a      	uxth	r2, r3
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	801a      	strh	r2, [r3, #0]
 8007924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	2b3e      	cmp	r3, #62	; 0x3e
 800792a:	d91d      	bls.n	8007968 <PCD_EP_ISR_Handler+0x282>
 800792c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	095b      	lsrs	r3, r3, #5
 8007932:	647b      	str	r3, [r7, #68]	; 0x44
 8007934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	f003 031f 	and.w	r3, r3, #31
 800793c:	2b00      	cmp	r3, #0
 800793e:	d102      	bne.n	8007946 <PCD_EP_ISR_Handler+0x260>
 8007940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007942:	3b01      	subs	r3, #1
 8007944:	647b      	str	r3, [r7, #68]	; 0x44
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	881b      	ldrh	r3, [r3, #0]
 800794a:	b29a      	uxth	r2, r3
 800794c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800794e:	b29b      	uxth	r3, r3
 8007950:	029b      	lsls	r3, r3, #10
 8007952:	b29b      	uxth	r3, r3
 8007954:	4313      	orrs	r3, r2
 8007956:	b29b      	uxth	r3, r3
 8007958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800795c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007960:	b29a      	uxth	r2, r3
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	801a      	strh	r2, [r3, #0]
 8007966:	e026      	b.n	80079b6 <PCD_EP_ISR_Handler+0x2d0>
 8007968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10a      	bne.n	8007986 <PCD_EP_ISR_Handler+0x2a0>
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	881b      	ldrh	r3, [r3, #0]
 8007974:	b29b      	uxth	r3, r3
 8007976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800797a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800797e:	b29a      	uxth	r2, r3
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	801a      	strh	r2, [r3, #0]
 8007984:	e017      	b.n	80079b6 <PCD_EP_ISR_Handler+0x2d0>
 8007986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	085b      	lsrs	r3, r3, #1
 800798c:	647b      	str	r3, [r7, #68]	; 0x44
 800798e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	2b00      	cmp	r3, #0
 8007998:	d002      	beq.n	80079a0 <PCD_EP_ISR_Handler+0x2ba>
 800799a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800799c:	3301      	adds	r3, #1
 800799e:	647b      	str	r3, [r7, #68]	; 0x44
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	029b      	lsls	r3, r3, #10
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	4313      	orrs	r3, r2
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c6:	827b      	strh	r3, [r7, #18]
 80079c8:	8a7b      	ldrh	r3, [r7, #18]
 80079ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80079ce:	827b      	strh	r3, [r7, #18]
 80079d0:	8a7b      	ldrh	r3, [r7, #18]
 80079d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80079d6:	827b      	strh	r3, [r7, #18]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	8a7b      	ldrh	r3, [r7, #18]
 80079de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	8013      	strh	r3, [r2, #0]
 80079f2:	e22c      	b.n	8007e4e <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	461a      	mov	r2, r3
 80079fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	881b      	ldrh	r3, [r3, #0]
 8007a04:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007a08:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f280 80f6 	bge.w	8007bfe <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	461a      	mov	r2, r3
 8007a18:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007a28:	4013      	ands	r3, r2
 8007a2a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	461a      	mov	r2, r3
 8007a34:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007a40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a44:	b292      	uxth	r2, r2
 8007a46:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007a48:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4413      	add	r3, r2
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a60:	7b1b      	ldrb	r3, [r3, #12]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d123      	bne.n	8007aae <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	461a      	mov	r2, r3
 8007a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	00db      	lsls	r3, r3, #3
 8007a78:	4413      	add	r3, r2
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	6812      	ldr	r2, [r2, #0]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a84:	881b      	ldrh	r3, [r3, #0]
 8007a86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a8a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8007a8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 808e 	beq.w	8007bb4 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6818      	ldr	r0, [r3, #0]
 8007a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a9e:	6959      	ldr	r1, [r3, #20]
 8007aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aa2:	88da      	ldrh	r2, [r3, #6]
 8007aa4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007aa8:	f004 fe7a 	bl	800c7a0 <USB_ReadPMA>
 8007aac:	e082      	b.n	8007bb4 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ab0:	78db      	ldrb	r3, [r3, #3]
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d10a      	bne.n	8007acc <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007ab6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007aba:	461a      	mov	r2, r3
 8007abc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f9d3 	bl	8007e6a <HAL_PCD_EP_DB_Receive>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8007aca:	e073      	b.n	8007bb4 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4413      	add	r3, r2
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ae6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	461a      	mov	r2, r3
 8007af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	441a      	add	r2, r3
 8007af8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	461a      	mov	r2, r3
 8007b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	4413      	add	r3, r2
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d022      	beq.n	8007b70 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	461a      	mov	r2, r3
 8007b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	00db      	lsls	r3, r3, #3
 8007b3c:	4413      	add	r3, r2
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	6812      	ldr	r2, [r2, #0]
 8007b42:	4413      	add	r3, r2
 8007b44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b48:	881b      	ldrh	r3, [r3, #0]
 8007b4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b4e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8007b52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d02c      	beq.n	8007bb4 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6818      	ldr	r0, [r3, #0]
 8007b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b60:	6959      	ldr	r1, [r3, #20]
 8007b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b64:	891a      	ldrh	r2, [r3, #8]
 8007b66:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007b6a:	f004 fe19 	bl	800c7a0 <USB_ReadPMA>
 8007b6e:	e021      	b.n	8007bb4 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	00db      	lsls	r3, r3, #3
 8007b82:	4413      	add	r3, r2
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	6812      	ldr	r2, [r2, #0]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b8e:	881b      	ldrh	r3, [r3, #0]
 8007b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b94:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8007b98:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d009      	beq.n	8007bb4 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6818      	ldr	r0, [r3, #0]
 8007ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ba6:	6959      	ldr	r1, [r3, #20]
 8007ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007baa:	895a      	ldrh	r2, [r3, #10]
 8007bac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007bb0:	f004 fdf6 	bl	800c7a0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bb6:	69da      	ldr	r2, [r3, #28]
 8007bb8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007bbc:	441a      	add	r2, r3
 8007bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bc0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bc4:	695a      	ldr	r2, [r3, #20]
 8007bc6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007bca:	441a      	add	r2, r3
 8007bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bce:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d005      	beq.n	8007be4 <PCD_EP_ISR_Handler+0x4fe>
 8007bd8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8007bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d206      	bcs.n	8007bf2 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	4619      	mov	r1, r3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f006 fce2 	bl	800e5b4 <HAL_PCD_DataOutStageCallback>
 8007bf0:	e005      	b.n	8007bfe <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f003 f8a4 	bl	800ad46 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007bfe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 8121 	beq.w	8007e4e <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8007c0c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8007c10:	4613      	mov	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	00db      	lsls	r3, r3, #3
 8007c18:	3310      	adds	r3, #16
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	461a      	mov	r2, r3
 8007c26:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4413      	add	r3, r2
 8007c2e:	881b      	ldrh	r3, [r3, #0]
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	461a      	mov	r2, r3
 8007c44:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	441a      	add	r2, r3
 8007c4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c5e:	78db      	ldrb	r3, [r3, #3]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	f040 80a2 	bne.w	8007daa <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8007c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c68:	2200      	movs	r2, #0
 8007c6a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c6e:	7b1b      	ldrb	r3, [r3, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 8093 	beq.w	8007d9c <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007c76:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d046      	beq.n	8007d10 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c84:	785b      	ldrb	r3, [r3, #1]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d126      	bne.n	8007cd8 <PCD_EP_ISR_Handler+0x5f2>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	4413      	add	r3, r2
 8007ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	00da      	lsls	r2, r3, #3
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	4413      	add	r3, r2
 8007cac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007cb0:	623b      	str	r3, [r7, #32]
 8007cb2:	6a3b      	ldr	r3, [r7, #32]
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	6a3b      	ldr	r3, [r7, #32]
 8007cc0:	801a      	strh	r2, [r3, #0]
 8007cc2:	6a3b      	ldr	r3, [r7, #32]
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	801a      	strh	r2, [r3, #0]
 8007cd6:	e061      	b.n	8007d9c <PCD_EP_ISR_Handler+0x6b6>
 8007cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cda:	785b      	ldrb	r3, [r3, #1]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d15d      	bne.n	8007d9c <PCD_EP_ISR_Handler+0x6b6>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf4:	4413      	add	r3, r2
 8007cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	00da      	lsls	r2, r3, #3
 8007cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d00:	4413      	add	r3, r2
 8007d02:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	801a      	strh	r2, [r3, #0]
 8007d0e:	e045      	b.n	8007d9c <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d18:	785b      	ldrb	r3, [r3, #1]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d126      	bne.n	8007d6c <PCD_EP_ISR_Handler+0x686>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	637b      	str	r3, [r7, #52]	; 0x34
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	461a      	mov	r2, r3
 8007d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d32:	4413      	add	r3, r2
 8007d34:	637b      	str	r3, [r7, #52]	; 0x34
 8007d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	00da      	lsls	r2, r3, #3
 8007d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3e:	4413      	add	r3, r2
 8007d40:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d44:	633b      	str	r3, [r7, #48]	; 0x30
 8007d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d54:	801a      	strh	r2, [r3, #0]
 8007d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d68:	801a      	strh	r2, [r3, #0]
 8007d6a:	e017      	b.n	8007d9c <PCD_EP_ISR_Handler+0x6b6>
 8007d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d6e:	785b      	ldrb	r3, [r3, #1]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d113      	bne.n	8007d9c <PCD_EP_ISR_Handler+0x6b6>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	461a      	mov	r2, r3
 8007d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d82:	4413      	add	r3, r2
 8007d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	00da      	lsls	r2, r3, #3
 8007d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d8e:	4413      	add	r3, r2
 8007d90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d94:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d98:	2200      	movs	r2, #0
 8007d9a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	4619      	mov	r1, r3
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f006 fc21 	bl	800e5ea <HAL_PCD_DataInStageCallback>
 8007da8:	e051      	b.n	8007e4e <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007daa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d144      	bne.n	8007e40 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	00db      	lsls	r3, r3, #3
 8007dc8:	4413      	add	r3, r2
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	6812      	ldr	r2, [r2, #0]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007dd4:	881b      	ldrh	r3, [r3, #0]
 8007dd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dda:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8007dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007de0:	699a      	ldr	r2, [r3, #24]
 8007de2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d907      	bls.n	8007dfa <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8007dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dec:	699a      	ldr	r2, [r3, #24]
 8007dee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007df2:	1ad2      	subs	r2, r2, r3
 8007df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007df6:	619a      	str	r2, [r3, #24]
 8007df8:	e002      	b.n	8007e00 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8007dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d106      	bne.n	8007e16 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f006 fbeb 	bl	800e5ea <HAL_PCD_DataInStageCallback>
 8007e14:	e01b      	b.n	8007e4e <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e18:	695a      	ldr	r2, [r3, #20]
 8007e1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007e1e:	441a      	add	r2, r3
 8007e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e22:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e26:	69da      	ldr	r2, [r3, #28]
 8007e28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007e2c:	441a      	add	r2, r3
 8007e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e30:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f002 ff84 	bl	800ad46 <USB_EPStartXfer>
 8007e3e:	e006      	b.n	8007e4e <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007e40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007e44:	461a      	mov	r2, r3
 8007e46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f917 	bl	800807c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	b21b      	sxth	r3, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f6ff ac48 	blt.w	80076f0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3758      	adds	r7, #88	; 0x58
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b088      	sub	sp, #32
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	60f8      	str	r0, [r7, #12]
 8007e72:	60b9      	str	r1, [r7, #8]
 8007e74:	4613      	mov	r3, r2
 8007e76:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007e78:	88fb      	ldrh	r3, [r7, #6]
 8007e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d07c      	beq.n	8007f7c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	00db      	lsls	r3, r3, #3
 8007e94:	4413      	add	r3, r2
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	6812      	ldr	r2, [r2, #0]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ea6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	699a      	ldr	r2, [r3, #24]
 8007eac:	8b7b      	ldrh	r3, [r7, #26]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d306      	bcc.n	8007ec0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	699a      	ldr	r2, [r3, #24]
 8007eb6:	8b7b      	ldrh	r3, [r7, #26]
 8007eb8:	1ad2      	subs	r2, r2, r3
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	619a      	str	r2, [r3, #24]
 8007ebe:	e002      	b.n	8007ec6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d123      	bne.n	8007f16 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4413      	add	r3, r2
 8007edc:	881b      	ldrh	r3, [r3, #0]
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ee8:	833b      	strh	r3, [r7, #24]
 8007eea:	8b3b      	ldrh	r3, [r7, #24]
 8007eec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ef0:	833b      	strh	r3, [r7, #24]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	441a      	add	r2, r3
 8007f00:	8b3b      	ldrh	r3, [r7, #24]
 8007f02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007f16:	88fb      	ldrh	r3, [r7, #6]
 8007f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d01f      	beq.n	8007f60 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	461a      	mov	r2, r3
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	881b      	ldrh	r3, [r3, #0]
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f3a:	82fb      	strh	r3, [r7, #22]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	461a      	mov	r2, r3
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	441a      	add	r2, r3
 8007f4a:	8afb      	ldrh	r3, [r7, #22]
 8007f4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007f60:	8b7b      	ldrh	r3, [r7, #26]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f000 8085 	beq.w	8008072 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6818      	ldr	r0, [r3, #0]
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	6959      	ldr	r1, [r3, #20]
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	891a      	ldrh	r2, [r3, #8]
 8007f74:	8b7b      	ldrh	r3, [r7, #26]
 8007f76:	f004 fc13 	bl	800c7a0 <USB_ReadPMA>
 8007f7a:	e07a      	b.n	8008072 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	461a      	mov	r2, r3
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	00db      	lsls	r3, r3, #3
 8007f8e:	4413      	add	r3, r2
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	6812      	ldr	r2, [r2, #0]
 8007f94:	4413      	add	r3, r2
 8007f96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fa0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	699a      	ldr	r2, [r3, #24]
 8007fa6:	8b7b      	ldrh	r3, [r7, #26]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d306      	bcc.n	8007fba <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	699a      	ldr	r2, [r3, #24]
 8007fb0:	8b7b      	ldrh	r3, [r7, #26]
 8007fb2:	1ad2      	subs	r2, r2, r3
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	619a      	str	r2, [r3, #24]
 8007fb8:	e002      	b.n	8007fc0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d123      	bne.n	8008010 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	461a      	mov	r2, r3
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4413      	add	r3, r2
 8007fd6:	881b      	ldrh	r3, [r3, #0]
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fe2:	83fb      	strh	r3, [r7, #30]
 8007fe4:	8bfb      	ldrh	r3, [r7, #30]
 8007fe6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007fea:	83fb      	strh	r3, [r7, #30]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	441a      	add	r2, r3
 8007ffa:	8bfb      	ldrh	r3, [r7, #30]
 8007ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800800c:	b29b      	uxth	r3, r3
 800800e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008010:	88fb      	ldrh	r3, [r7, #6]
 8008012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008016:	2b00      	cmp	r3, #0
 8008018:	d11f      	bne.n	800805a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	461a      	mov	r2, r3
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	b29b      	uxth	r3, r3
 800802c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008034:	83bb      	strh	r3, [r7, #28]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	461a      	mov	r2, r3
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	441a      	add	r2, r3
 8008044:	8bbb      	ldrh	r3, [r7, #28]
 8008046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800804a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800804e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008052:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008056:	b29b      	uxth	r3, r3
 8008058:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800805a:	8b7b      	ldrh	r3, [r7, #26]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d008      	beq.n	8008072 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6818      	ldr	r0, [r3, #0]
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	6959      	ldr	r1, [r3, #20]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	895a      	ldrh	r2, [r3, #10]
 800806c:	8b7b      	ldrh	r3, [r7, #26]
 800806e:	f004 fb97 	bl	800c7a0 <USB_ReadPMA>
    }
  }

  return count;
 8008072:	8b7b      	ldrh	r3, [r7, #26]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3720      	adds	r7, #32
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b0a4      	sub	sp, #144	; 0x90
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	4613      	mov	r3, r2
 8008088:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800808a:	88fb      	ldrh	r3, [r7, #6]
 800808c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 81db 	beq.w	800844c <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800809e:	b29b      	uxth	r3, r3
 80080a0:	461a      	mov	r2, r3
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	00db      	lsls	r3, r3, #3
 80080a8:	4413      	add	r3, r2
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	6812      	ldr	r2, [r2, #0]
 80080ae:	4413      	add	r3, r2
 80080b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080ba:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	699a      	ldr	r2, [r3, #24]
 80080c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d907      	bls.n	80080da <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	699a      	ldr	r2, [r3, #24]
 80080ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80080d2:	1ad2      	subs	r2, r2, r3
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	619a      	str	r2, [r3, #24]
 80080d8:	e002      	b.n	80080e0 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	2200      	movs	r2, #0
 80080de:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f040 80b9 	bne.w	800825c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	785b      	ldrb	r3, [r3, #1]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d126      	bne.n	8008140 <HAL_PCD_EP_DB_Transmit+0xc4>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008100:	b29b      	uxth	r3, r3
 8008102:	461a      	mov	r2, r3
 8008104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008106:	4413      	add	r3, r2
 8008108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	00da      	lsls	r2, r3, #3
 8008110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008112:	4413      	add	r3, r2
 8008114:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008118:	62bb      	str	r3, [r7, #40]	; 0x28
 800811a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	b29b      	uxth	r3, r3
 8008120:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008124:	b29a      	uxth	r2, r3
 8008126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008128:	801a      	strh	r2, [r3, #0]
 800812a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812c:	881b      	ldrh	r3, [r3, #0]
 800812e:	b29b      	uxth	r3, r3
 8008130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008138:	b29a      	uxth	r2, r3
 800813a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813c:	801a      	strh	r2, [r3, #0]
 800813e:	e01a      	b.n	8008176 <HAL_PCD_EP_DB_Transmit+0xfa>
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	785b      	ldrb	r3, [r3, #1]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d116      	bne.n	8008176 <HAL_PCD_EP_DB_Transmit+0xfa>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	637b      	str	r3, [r7, #52]	; 0x34
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008156:	b29b      	uxth	r3, r3
 8008158:	461a      	mov	r2, r3
 800815a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800815c:	4413      	add	r3, r2
 800815e:	637b      	str	r3, [r7, #52]	; 0x34
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	00da      	lsls	r2, r3, #3
 8008166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008168:	4413      	add	r3, r2
 800816a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800816e:	633b      	str	r3, [r7, #48]	; 0x30
 8008170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008172:	2200      	movs	r2, #0
 8008174:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	627b      	str	r3, [r7, #36]	; 0x24
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	785b      	ldrb	r3, [r3, #1]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d126      	bne.n	80081d2 <HAL_PCD_EP_DB_Transmit+0x156>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	61fb      	str	r3, [r7, #28]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008192:	b29b      	uxth	r3, r3
 8008194:	461a      	mov	r2, r3
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	4413      	add	r3, r2
 800819a:	61fb      	str	r3, [r7, #28]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	00da      	lsls	r2, r3, #3
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	4413      	add	r3, r2
 80081a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80081aa:	61bb      	str	r3, [r7, #24]
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	881b      	ldrh	r3, [r3, #0]
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	801a      	strh	r2, [r3, #0]
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	881b      	ldrh	r3, [r3, #0]
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	801a      	strh	r2, [r3, #0]
 80081d0:	e017      	b.n	8008202 <HAL_PCD_EP_DB_Transmit+0x186>
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	785b      	ldrb	r3, [r3, #1]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d113      	bne.n	8008202 <HAL_PCD_EP_DB_Transmit+0x186>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	461a      	mov	r2, r3
 80081e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e8:	4413      	add	r3, r2
 80081ea:	627b      	str	r3, [r7, #36]	; 0x24
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	00da      	lsls	r2, r3, #3
 80081f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f4:	4413      	add	r3, r2
 80081f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80081fa:	623b      	str	r3, [r7, #32]
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	2200      	movs	r2, #0
 8008200:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	4619      	mov	r1, r3
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f006 f9ee 	bl	800e5ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800820e:	88fb      	ldrh	r3, [r7, #6]
 8008210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 82fa 	beq.w	800880e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	461a      	mov	r2, r3
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	881b      	ldrh	r3, [r3, #0]
 800822a:	b29b      	uxth	r3, r3
 800822c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008234:	82fb      	strh	r3, [r7, #22]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	441a      	add	r2, r3
 8008244:	8afb      	ldrh	r3, [r7, #22]
 8008246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800824a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800824e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008256:	b29b      	uxth	r3, r3
 8008258:	8013      	strh	r3, [r2, #0]
 800825a:	e2d8      	b.n	800880e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800825c:	88fb      	ldrh	r3, [r7, #6]
 800825e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d021      	beq.n	80082aa <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	461a      	mov	r2, r3
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	b29b      	uxth	r3, r3
 8008278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800827c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008280:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	461a      	mov	r2, r3
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	441a      	add	r2, r3
 8008292:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800829a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800829e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	f040 82ac 	bne.w	800880e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	695a      	ldr	r2, [r3, #20]
 80082ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80082be:	441a      	add	r2, r3
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	69da      	ldr	r2, [r3, #28]
 80082c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80082cc:	441a      	add	r2, r3
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	6a1a      	ldr	r2, [r3, #32]
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d30b      	bcc.n	80082f6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	6a1a      	ldr	r2, [r3, #32]
 80082ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082ee:	1ad2      	subs	r2, r2, r3
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	621a      	str	r2, [r3, #32]
 80082f4:	e017      	b.n	8008326 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d108      	bne.n	8008310 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80082fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008302:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800830e:	e00a      	b.n	8008326 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	6a1b      	ldr	r3, [r3, #32]
 800831c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	2200      	movs	r2, #0
 8008324:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	785b      	ldrb	r3, [r3, #1]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d165      	bne.n	80083fa <HAL_PCD_EP_DB_Transmit+0x37e>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800833c:	b29b      	uxth	r3, r3
 800833e:	461a      	mov	r2, r3
 8008340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008342:	4413      	add	r3, r2
 8008344:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	00da      	lsls	r2, r3, #3
 800834c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800834e:	4413      	add	r3, r2
 8008350:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008354:	63bb      	str	r3, [r7, #56]	; 0x38
 8008356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	b29b      	uxth	r3, r3
 800835c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008360:	b29a      	uxth	r2, r3
 8008362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008364:	801a      	strh	r2, [r3, #0]
 8008366:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800836a:	2b3e      	cmp	r3, #62	; 0x3e
 800836c:	d91d      	bls.n	80083aa <HAL_PCD_EP_DB_Transmit+0x32e>
 800836e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008372:	095b      	lsrs	r3, r3, #5
 8008374:	64bb      	str	r3, [r7, #72]	; 0x48
 8008376:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800837a:	f003 031f 	and.w	r3, r3, #31
 800837e:	2b00      	cmp	r3, #0
 8008380:	d102      	bne.n	8008388 <HAL_PCD_EP_DB_Transmit+0x30c>
 8008382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008384:	3b01      	subs	r3, #1
 8008386:	64bb      	str	r3, [r7, #72]	; 0x48
 8008388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838a:	881b      	ldrh	r3, [r3, #0]
 800838c:	b29a      	uxth	r2, r3
 800838e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008390:	b29b      	uxth	r3, r3
 8008392:	029b      	lsls	r3, r3, #10
 8008394:	b29b      	uxth	r3, r3
 8008396:	4313      	orrs	r3, r2
 8008398:	b29b      	uxth	r3, r3
 800839a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800839e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a6:	801a      	strh	r2, [r3, #0]
 80083a8:	e044      	b.n	8008434 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80083aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10a      	bne.n	80083c8 <HAL_PCD_EP_DB_Transmit+0x34c>
 80083b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c4:	801a      	strh	r2, [r3, #0]
 80083c6:	e035      	b.n	8008434 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80083c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083cc:	085b      	lsrs	r3, r3, #1
 80083ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80083d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d002      	beq.n	80083e2 <HAL_PCD_EP_DB_Transmit+0x366>
 80083dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083de:	3301      	adds	r3, #1
 80083e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80083e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	029b      	lsls	r3, r3, #10
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	4313      	orrs	r3, r2
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f6:	801a      	strh	r2, [r3, #0]
 80083f8:	e01c      	b.n	8008434 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	785b      	ldrb	r3, [r3, #1]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d118      	bne.n	8008434 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	647b      	str	r3, [r7, #68]	; 0x44
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008410:	b29b      	uxth	r3, r3
 8008412:	461a      	mov	r2, r3
 8008414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008416:	4413      	add	r3, r2
 8008418:	647b      	str	r3, [r7, #68]	; 0x44
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	00da      	lsls	r2, r3, #3
 8008420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008422:	4413      	add	r3, r2
 8008424:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008428:	643b      	str	r3, [r7, #64]	; 0x40
 800842a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800842e:	b29a      	uxth	r2, r3
 8008430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008432:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6818      	ldr	r0, [r3, #0]
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	6959      	ldr	r1, [r3, #20]
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	891a      	ldrh	r2, [r3, #8]
 8008440:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008444:	b29b      	uxth	r3, r3
 8008446:	f004 f969 	bl	800c71c <USB_WritePMA>
 800844a:	e1e0      	b.n	800880e <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008454:	b29b      	uxth	r3, r3
 8008456:	461a      	mov	r2, r3
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	00db      	lsls	r3, r3, #3
 800845e:	4413      	add	r3, r2
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	6812      	ldr	r2, [r2, #0]
 8008464:	4413      	add	r3, r2
 8008466:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800846a:	881b      	ldrh	r3, [r3, #0]
 800846c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008470:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	699a      	ldr	r2, [r3, #24]
 8008478:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800847c:	429a      	cmp	r2, r3
 800847e:	d307      	bcc.n	8008490 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	699a      	ldr	r2, [r3, #24]
 8008484:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008488:	1ad2      	subs	r2, r2, r3
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	619a      	str	r2, [r3, #24]
 800848e:	e002      	b.n	8008496 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2200      	movs	r2, #0
 8008494:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	2b00      	cmp	r3, #0
 800849c:	f040 80c0 	bne.w	8008620 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	785b      	ldrb	r3, [r3, #1]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d126      	bne.n	80084f6 <HAL_PCD_EP_DB_Transmit+0x47a>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	461a      	mov	r2, r3
 80084ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084bc:	4413      	add	r3, r2
 80084be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	00da      	lsls	r2, r3, #3
 80084c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084c8:	4413      	add	r3, r2
 80084ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80084ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80084d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084d2:	881b      	ldrh	r3, [r3, #0]
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084da:	b29a      	uxth	r2, r3
 80084dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084de:	801a      	strh	r2, [r3, #0]
 80084e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084e2:	881b      	ldrh	r3, [r3, #0]
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084f2:	801a      	strh	r2, [r3, #0]
 80084f4:	e01a      	b.n	800852c <HAL_PCD_EP_DB_Transmit+0x4b0>
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	785b      	ldrb	r3, [r3, #1]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d116      	bne.n	800852c <HAL_PCD_EP_DB_Transmit+0x4b0>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	667b      	str	r3, [r7, #100]	; 0x64
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800850c:	b29b      	uxth	r3, r3
 800850e:	461a      	mov	r2, r3
 8008510:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008512:	4413      	add	r3, r2
 8008514:	667b      	str	r3, [r7, #100]	; 0x64
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	00da      	lsls	r2, r3, #3
 800851c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800851e:	4413      	add	r3, r2
 8008520:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008524:	663b      	str	r3, [r7, #96]	; 0x60
 8008526:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008528:	2200      	movs	r2, #0
 800852a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	677b      	str	r3, [r7, #116]	; 0x74
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	785b      	ldrb	r3, [r3, #1]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d12b      	bne.n	8008592 <HAL_PCD_EP_DB_Transmit+0x516>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008548:	b29b      	uxth	r3, r3
 800854a:	461a      	mov	r2, r3
 800854c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800854e:	4413      	add	r3, r2
 8008550:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	00da      	lsls	r2, r3, #3
 8008558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800855a:	4413      	add	r3, r2
 800855c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008560:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008564:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	b29b      	uxth	r3, r3
 800856c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008570:	b29a      	uxth	r2, r3
 8008572:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008576:	801a      	strh	r2, [r3, #0]
 8008578:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	b29b      	uxth	r3, r3
 8008580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008588:	b29a      	uxth	r2, r3
 800858a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800858e:	801a      	strh	r2, [r3, #0]
 8008590:	e017      	b.n	80085c2 <HAL_PCD_EP_DB_Transmit+0x546>
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	785b      	ldrb	r3, [r3, #1]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d113      	bne.n	80085c2 <HAL_PCD_EP_DB_Transmit+0x546>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	461a      	mov	r2, r3
 80085a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085a8:	4413      	add	r3, r2
 80085aa:	677b      	str	r3, [r7, #116]	; 0x74
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	00da      	lsls	r2, r3, #3
 80085b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085b4:	4413      	add	r3, r2
 80085b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80085ba:	673b      	str	r3, [r7, #112]	; 0x70
 80085bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085be:	2200      	movs	r2, #0
 80085c0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	4619      	mov	r1, r3
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f006 f80e 	bl	800e5ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80085ce:	88fb      	ldrh	r3, [r7, #6]
 80085d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f040 811a 	bne.w	800880e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	881b      	ldrh	r3, [r3, #0]
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	461a      	mov	r2, r3
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	441a      	add	r2, r3
 8008606:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800860a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800860e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008612:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800861a:	b29b      	uxth	r3, r3
 800861c:	8013      	strh	r3, [r2, #0]
 800861e:	e0f6      	b.n	800880e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008620:	88fb      	ldrh	r3, [r7, #6]
 8008622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d121      	bne.n	800866e <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	461a      	mov	r2, r3
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4413      	add	r3, r2
 8008638:	881b      	ldrh	r3, [r3, #0]
 800863a:	b29b      	uxth	r3, r3
 800863c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008644:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	461a      	mov	r2, r3
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	441a      	add	r2, r3
 8008656:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800865a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800865e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008662:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800866a:	b29b      	uxth	r3, r3
 800866c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008674:	2b01      	cmp	r3, #1
 8008676:	f040 80ca 	bne.w	800880e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	695a      	ldr	r2, [r3, #20]
 800867e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008682:	441a      	add	r2, r3
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	69da      	ldr	r2, [r3, #28]
 800868c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008690:	441a      	add	r2, r3
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	6a1a      	ldr	r2, [r3, #32]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d30b      	bcc.n	80086ba <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	6a1a      	ldr	r2, [r3, #32]
 80086ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086b2:	1ad2      	subs	r2, r2, r3
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	621a      	str	r2, [r3, #32]
 80086b8:	e017      	b.n	80086ea <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d108      	bne.n	80086d4 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80086c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80086c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80086d2:	e00a      	b.n	80086ea <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	6a1b      	ldr	r3, [r3, #32]
 80086d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	2200      	movs	r2, #0
 80086e0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	657b      	str	r3, [r7, #84]	; 0x54
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	785b      	ldrb	r3, [r3, #1]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d165      	bne.n	80087c4 <HAL_PCD_EP_DB_Transmit+0x748>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008706:	b29b      	uxth	r3, r3
 8008708:	461a      	mov	r2, r3
 800870a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800870c:	4413      	add	r3, r2
 800870e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	00da      	lsls	r2, r3, #3
 8008716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008718:	4413      	add	r3, r2
 800871a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800871e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008720:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008722:	881b      	ldrh	r3, [r3, #0]
 8008724:	b29b      	uxth	r3, r3
 8008726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800872a:	b29a      	uxth	r2, r3
 800872c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800872e:	801a      	strh	r2, [r3, #0]
 8008730:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008734:	2b3e      	cmp	r3, #62	; 0x3e
 8008736:	d91d      	bls.n	8008774 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8008738:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800873c:	095b      	lsrs	r3, r3, #5
 800873e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008740:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008744:	f003 031f 	and.w	r3, r3, #31
 8008748:	2b00      	cmp	r3, #0
 800874a:	d102      	bne.n	8008752 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800874c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800874e:	3b01      	subs	r3, #1
 8008750:	66bb      	str	r3, [r7, #104]	; 0x68
 8008752:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008754:	881b      	ldrh	r3, [r3, #0]
 8008756:	b29a      	uxth	r2, r3
 8008758:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800875a:	b29b      	uxth	r3, r3
 800875c:	029b      	lsls	r3, r3, #10
 800875e:	b29b      	uxth	r3, r3
 8008760:	4313      	orrs	r3, r2
 8008762:	b29b      	uxth	r3, r3
 8008764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800876c:	b29a      	uxth	r2, r3
 800876e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008770:	801a      	strh	r2, [r3, #0]
 8008772:	e041      	b.n	80087f8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008774:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10a      	bne.n	8008792 <HAL_PCD_EP_DB_Transmit+0x716>
 800877c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800877e:	881b      	ldrh	r3, [r3, #0]
 8008780:	b29b      	uxth	r3, r3
 8008782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800878a:	b29a      	uxth	r2, r3
 800878c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800878e:	801a      	strh	r2, [r3, #0]
 8008790:	e032      	b.n	80087f8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008796:	085b      	lsrs	r3, r3, #1
 8008798:	66bb      	str	r3, [r7, #104]	; 0x68
 800879a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d002      	beq.n	80087ac <HAL_PCD_EP_DB_Transmit+0x730>
 80087a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087a8:	3301      	adds	r3, #1
 80087aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80087ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087ae:	881b      	ldrh	r3, [r3, #0]
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	029b      	lsls	r3, r3, #10
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	4313      	orrs	r3, r2
 80087bc:	b29a      	uxth	r2, r3
 80087be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087c0:	801a      	strh	r2, [r3, #0]
 80087c2:	e019      	b.n	80087f8 <HAL_PCD_EP_DB_Transmit+0x77c>
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	785b      	ldrb	r3, [r3, #1]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d115      	bne.n	80087f8 <HAL_PCD_EP_DB_Transmit+0x77c>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	461a      	mov	r2, r3
 80087d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087da:	4413      	add	r3, r2
 80087dc:	657b      	str	r3, [r7, #84]	; 0x54
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	00da      	lsls	r2, r3, #3
 80087e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087e6:	4413      	add	r3, r2
 80087e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80087ec:	653b      	str	r3, [r7, #80]	; 0x50
 80087ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087f6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6818      	ldr	r0, [r3, #0]
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	6959      	ldr	r1, [r3, #20]
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	895a      	ldrh	r2, [r3, #10]
 8008804:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008808:	b29b      	uxth	r3, r3
 800880a:	f003 ff87 	bl	800c71c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4413      	add	r3, r2
 800881c:	881b      	ldrh	r3, [r3, #0]
 800881e:	b29b      	uxth	r3, r3
 8008820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008828:	82bb      	strh	r3, [r7, #20]
 800882a:	8abb      	ldrh	r3, [r7, #20]
 800882c:	f083 0310 	eor.w	r3, r3, #16
 8008830:	82bb      	strh	r3, [r7, #20]
 8008832:	8abb      	ldrh	r3, [r7, #20]
 8008834:	f083 0320 	eor.w	r3, r3, #32
 8008838:	82bb      	strh	r3, [r7, #20]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	461a      	mov	r2, r3
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	441a      	add	r2, r3
 8008848:	8abb      	ldrh	r3, [r7, #20]
 800884a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800884e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800885a:	b29b      	uxth	r3, r3
 800885c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3790      	adds	r7, #144	; 0x90
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008868:	b480      	push	{r7}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	607b      	str	r3, [r7, #4]
 8008872:	460b      	mov	r3, r1
 8008874:	817b      	strh	r3, [r7, #10]
 8008876:	4613      	mov	r3, r2
 8008878:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800887a:	897b      	ldrh	r3, [r7, #10]
 800887c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008880:	b29b      	uxth	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00b      	beq.n	800889e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008886:	897b      	ldrh	r3, [r7, #10]
 8008888:	f003 0207 	and.w	r2, r3, #7
 800888c:	4613      	mov	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	00db      	lsls	r3, r3, #3
 8008894:	3310      	adds	r3, #16
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	4413      	add	r3, r2
 800889a:	617b      	str	r3, [r7, #20]
 800889c:	e009      	b.n	80088b2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800889e:	897a      	ldrh	r2, [r7, #10]
 80088a0:	4613      	mov	r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	00db      	lsls	r3, r3, #3
 80088a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	4413      	add	r3, r2
 80088b0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80088b2:	893b      	ldrh	r3, [r7, #8]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d107      	bne.n	80088c8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	2200      	movs	r2, #0
 80088bc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	80da      	strh	r2, [r3, #6]
 80088c6:	e00b      	b.n	80088e0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	2201      	movs	r2, #1
 80088cc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	0c1b      	lsrs	r3, r3, #16
 80088da:	b29a      	uxth	r2, r3
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	371c      	adds	r7, #28
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr

080088ee <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80088ee:	b480      	push	{r7}
 80088f0:	b085      	sub	sp, #20
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008912:	b29b      	uxth	r3, r3
 8008914:	f043 0301 	orr.w	r3, r3, #1
 8008918:	b29a      	uxth	r2, r3
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008926:	b29b      	uxth	r3, r3
 8008928:	f043 0302 	orr.w	r3, r3, #2
 800892c:	b29a      	uxth	r2, r3
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
	...

08008944 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d141      	bne.n	80089d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008952:	4b4b      	ldr	r3, [pc, #300]	; (8008a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800895a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800895e:	d131      	bne.n	80089c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008960:	4b47      	ldr	r3, [pc, #284]	; (8008a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008966:	4a46      	ldr	r2, [pc, #280]	; (8008a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800896c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008970:	4b43      	ldr	r3, [pc, #268]	; (8008a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008978:	4a41      	ldr	r2, [pc, #260]	; (8008a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800897a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800897e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008980:	4b40      	ldr	r3, [pc, #256]	; (8008a84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2232      	movs	r2, #50	; 0x32
 8008986:	fb02 f303 	mul.w	r3, r2, r3
 800898a:	4a3f      	ldr	r2, [pc, #252]	; (8008a88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800898c:	fba2 2303 	umull	r2, r3, r2, r3
 8008990:	0c9b      	lsrs	r3, r3, #18
 8008992:	3301      	adds	r3, #1
 8008994:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008996:	e002      	b.n	800899e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	3b01      	subs	r3, #1
 800899c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800899e:	4b38      	ldr	r3, [pc, #224]	; (8008a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089aa:	d102      	bne.n	80089b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1f2      	bne.n	8008998 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80089b2:	4b33      	ldr	r3, [pc, #204]	; (8008a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089be:	d158      	bne.n	8008a72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80089c0:	2303      	movs	r3, #3
 80089c2:	e057      	b.n	8008a74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80089c4:	4b2e      	ldr	r3, [pc, #184]	; (8008a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089ca:	4a2d      	ldr	r2, [pc, #180]	; (8008a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80089d4:	e04d      	b.n	8008a72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089dc:	d141      	bne.n	8008a62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80089de:	4b28      	ldr	r3, [pc, #160]	; (8008a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80089e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089ea:	d131      	bne.n	8008a50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80089ec:	4b24      	ldr	r3, [pc, #144]	; (8008a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089f2:	4a23      	ldr	r2, [pc, #140]	; (8008a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80089fc:	4b20      	ldr	r3, [pc, #128]	; (8008a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008a04:	4a1e      	ldr	r2, [pc, #120]	; (8008a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008a0c:	4b1d      	ldr	r3, [pc, #116]	; (8008a84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2232      	movs	r2, #50	; 0x32
 8008a12:	fb02 f303 	mul.w	r3, r2, r3
 8008a16:	4a1c      	ldr	r2, [pc, #112]	; (8008a88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008a18:	fba2 2303 	umull	r2, r3, r2, r3
 8008a1c:	0c9b      	lsrs	r3, r3, #18
 8008a1e:	3301      	adds	r3, #1
 8008a20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a22:	e002      	b.n	8008a2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	3b01      	subs	r3, #1
 8008a28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a2a:	4b15      	ldr	r3, [pc, #84]	; (8008a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a36:	d102      	bne.n	8008a3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1f2      	bne.n	8008a24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008a3e:	4b10      	ldr	r3, [pc, #64]	; (8008a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a4a:	d112      	bne.n	8008a72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	e011      	b.n	8008a74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008a50:	4b0b      	ldr	r3, [pc, #44]	; (8008a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a56:	4a0a      	ldr	r2, [pc, #40]	; (8008a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008a60:	e007      	b.n	8008a72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008a62:	4b07      	ldr	r3, [pc, #28]	; (8008a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008a6a:	4a05      	ldr	r2, [pc, #20]	; (8008a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a70:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3714      	adds	r7, #20
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr
 8008a80:	40007000 	.word	0x40007000
 8008a84:	2000000c 	.word	0x2000000c
 8008a88:	431bde83 	.word	0x431bde83

08008a8c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008a90:	4b05      	ldr	r3, [pc, #20]	; (8008aa8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	4a04      	ldr	r2, [pc, #16]	; (8008aa8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008a96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a9a:	6093      	str	r3, [r2, #8]
}
 8008a9c:	bf00      	nop
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	40007000 	.word	0x40007000

08008aac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b088      	sub	sp, #32
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e2fe      	b.n	80090bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 0301 	and.w	r3, r3, #1
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d075      	beq.n	8008bb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008aca:	4b97      	ldr	r3, [pc, #604]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	f003 030c 	and.w	r3, r3, #12
 8008ad2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ad4:	4b94      	ldr	r3, [pc, #592]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	f003 0303 	and.w	r3, r3, #3
 8008adc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	2b0c      	cmp	r3, #12
 8008ae2:	d102      	bne.n	8008aea <HAL_RCC_OscConfig+0x3e>
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	2b03      	cmp	r3, #3
 8008ae8:	d002      	beq.n	8008af0 <HAL_RCC_OscConfig+0x44>
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	2b08      	cmp	r3, #8
 8008aee:	d10b      	bne.n	8008b08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008af0:	4b8d      	ldr	r3, [pc, #564]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d05b      	beq.n	8008bb4 <HAL_RCC_OscConfig+0x108>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d157      	bne.n	8008bb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e2d9      	b.n	80090bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b10:	d106      	bne.n	8008b20 <HAL_RCC_OscConfig+0x74>
 8008b12:	4b85      	ldr	r3, [pc, #532]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a84      	ldr	r2, [pc, #528]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b1c:	6013      	str	r3, [r2, #0]
 8008b1e:	e01d      	b.n	8008b5c <HAL_RCC_OscConfig+0xb0>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b28:	d10c      	bne.n	8008b44 <HAL_RCC_OscConfig+0x98>
 8008b2a:	4b7f      	ldr	r3, [pc, #508]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a7e      	ldr	r2, [pc, #504]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b34:	6013      	str	r3, [r2, #0]
 8008b36:	4b7c      	ldr	r3, [pc, #496]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a7b      	ldr	r2, [pc, #492]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b40:	6013      	str	r3, [r2, #0]
 8008b42:	e00b      	b.n	8008b5c <HAL_RCC_OscConfig+0xb0>
 8008b44:	4b78      	ldr	r3, [pc, #480]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a77      	ldr	r2, [pc, #476]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b4e:	6013      	str	r3, [r2, #0]
 8008b50:	4b75      	ldr	r3, [pc, #468]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a74      	ldr	r2, [pc, #464]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d013      	beq.n	8008b8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b64:	f7fa f950 	bl	8002e08 <HAL_GetTick>
 8008b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b6a:	e008      	b.n	8008b7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b6c:	f7fa f94c 	bl	8002e08 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	2b64      	cmp	r3, #100	; 0x64
 8008b78:	d901      	bls.n	8008b7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e29e      	b.n	80090bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b7e:	4b6a      	ldr	r3, [pc, #424]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d0f0      	beq.n	8008b6c <HAL_RCC_OscConfig+0xc0>
 8008b8a:	e014      	b.n	8008bb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b8c:	f7fa f93c 	bl	8002e08 <HAL_GetTick>
 8008b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008b92:	e008      	b.n	8008ba6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b94:	f7fa f938 	bl	8002e08 <HAL_GetTick>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	2b64      	cmp	r3, #100	; 0x64
 8008ba0:	d901      	bls.n	8008ba6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e28a      	b.n	80090bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008ba6:	4b60      	ldr	r3, [pc, #384]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1f0      	bne.n	8008b94 <HAL_RCC_OscConfig+0xe8>
 8008bb2:	e000      	b.n	8008bb6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 0302 	and.w	r3, r3, #2
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d075      	beq.n	8008cae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bc2:	4b59      	ldr	r3, [pc, #356]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f003 030c 	and.w	r3, r3, #12
 8008bca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008bcc:	4b56      	ldr	r3, [pc, #344]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	f003 0303 	and.w	r3, r3, #3
 8008bd4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	2b0c      	cmp	r3, #12
 8008bda:	d102      	bne.n	8008be2 <HAL_RCC_OscConfig+0x136>
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d002      	beq.n	8008be8 <HAL_RCC_OscConfig+0x13c>
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	2b04      	cmp	r3, #4
 8008be6:	d11f      	bne.n	8008c28 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008be8:	4b4f      	ldr	r3, [pc, #316]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d005      	beq.n	8008c00 <HAL_RCC_OscConfig+0x154>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d101      	bne.n	8008c00 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e25d      	b.n	80090bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c00:	4b49      	ldr	r3, [pc, #292]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	061b      	lsls	r3, r3, #24
 8008c0e:	4946      	ldr	r1, [pc, #280]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008c10:	4313      	orrs	r3, r2
 8008c12:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008c14:	4b45      	ldr	r3, [pc, #276]	; (8008d2c <HAL_RCC_OscConfig+0x280>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7fa f8a9 	bl	8002d70 <HAL_InitTick>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d043      	beq.n	8008cac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e249      	b.n	80090bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d023      	beq.n	8008c78 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c30:	4b3d      	ldr	r3, [pc, #244]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a3c      	ldr	r2, [pc, #240]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c3c:	f7fa f8e4 	bl	8002e08 <HAL_GetTick>
 8008c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c42:	e008      	b.n	8008c56 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c44:	f7fa f8e0 	bl	8002e08 <HAL_GetTick>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d901      	bls.n	8008c56 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008c52:	2303      	movs	r3, #3
 8008c54:	e232      	b.n	80090bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c56:	4b34      	ldr	r3, [pc, #208]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d0f0      	beq.n	8008c44 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c62:	4b31      	ldr	r3, [pc, #196]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	061b      	lsls	r3, r3, #24
 8008c70:	492d      	ldr	r1, [pc, #180]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008c72:	4313      	orrs	r3, r2
 8008c74:	604b      	str	r3, [r1, #4]
 8008c76:	e01a      	b.n	8008cae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c78:	4b2b      	ldr	r3, [pc, #172]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a2a      	ldr	r2, [pc, #168]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008c7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c84:	f7fa f8c0 	bl	8002e08 <HAL_GetTick>
 8008c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c8a:	e008      	b.n	8008c9e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c8c:	f7fa f8bc 	bl	8002e08 <HAL_GetTick>
 8008c90:	4602      	mov	r2, r0
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d901      	bls.n	8008c9e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e20e      	b.n	80090bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c9e:	4b22      	ldr	r3, [pc, #136]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1f0      	bne.n	8008c8c <HAL_RCC_OscConfig+0x1e0>
 8008caa:	e000      	b.n	8008cae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0308 	and.w	r3, r3, #8
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d041      	beq.n	8008d3e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	695b      	ldr	r3, [r3, #20]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d01c      	beq.n	8008cfc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008cc2:	4b19      	ldr	r3, [pc, #100]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cc8:	4a17      	ldr	r2, [pc, #92]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008cca:	f043 0301 	orr.w	r3, r3, #1
 8008cce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cd2:	f7fa f899 	bl	8002e08 <HAL_GetTick>
 8008cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008cd8:	e008      	b.n	8008cec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cda:	f7fa f895 	bl	8002e08 <HAL_GetTick>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d901      	bls.n	8008cec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	e1e7      	b.n	80090bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008cec:	4b0e      	ldr	r3, [pc, #56]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cf2:	f003 0302 	and.w	r3, r3, #2
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d0ef      	beq.n	8008cda <HAL_RCC_OscConfig+0x22e>
 8008cfa:	e020      	b.n	8008d3e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008cfc:	4b0a      	ldr	r3, [pc, #40]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d02:	4a09      	ldr	r2, [pc, #36]	; (8008d28 <HAL_RCC_OscConfig+0x27c>)
 8008d04:	f023 0301 	bic.w	r3, r3, #1
 8008d08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d0c:	f7fa f87c 	bl	8002e08 <HAL_GetTick>
 8008d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008d12:	e00d      	b.n	8008d30 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d14:	f7fa f878 	bl	8002e08 <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d906      	bls.n	8008d30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e1ca      	b.n	80090bc <HAL_RCC_OscConfig+0x610>
 8008d26:	bf00      	nop
 8008d28:	40021000 	.word	0x40021000
 8008d2c:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008d30:	4b8c      	ldr	r3, [pc, #560]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d36:	f003 0302 	and.w	r3, r3, #2
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1ea      	bne.n	8008d14 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 0304 	and.w	r3, r3, #4
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 80a6 	beq.w	8008e98 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008d50:	4b84      	ldr	r3, [pc, #528]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d101      	bne.n	8008d60 <HAL_RCC_OscConfig+0x2b4>
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e000      	b.n	8008d62 <HAL_RCC_OscConfig+0x2b6>
 8008d60:	2300      	movs	r3, #0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00d      	beq.n	8008d82 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d66:	4b7f      	ldr	r3, [pc, #508]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d6a:	4a7e      	ldr	r2, [pc, #504]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d70:	6593      	str	r3, [r2, #88]	; 0x58
 8008d72:	4b7c      	ldr	r3, [pc, #496]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d7a:	60fb      	str	r3, [r7, #12]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d82:	4b79      	ldr	r3, [pc, #484]	; (8008f68 <HAL_RCC_OscConfig+0x4bc>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d118      	bne.n	8008dc0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d8e:	4b76      	ldr	r3, [pc, #472]	; (8008f68 <HAL_RCC_OscConfig+0x4bc>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a75      	ldr	r2, [pc, #468]	; (8008f68 <HAL_RCC_OscConfig+0x4bc>)
 8008d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d9a:	f7fa f835 	bl	8002e08 <HAL_GetTick>
 8008d9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008da0:	e008      	b.n	8008db4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008da2:	f7fa f831 	bl	8002e08 <HAL_GetTick>
 8008da6:	4602      	mov	r2, r0
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d901      	bls.n	8008db4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e183      	b.n	80090bc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008db4:	4b6c      	ldr	r3, [pc, #432]	; (8008f68 <HAL_RCC_OscConfig+0x4bc>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d0f0      	beq.n	8008da2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d108      	bne.n	8008dda <HAL_RCC_OscConfig+0x32e>
 8008dc8:	4b66      	ldr	r3, [pc, #408]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dce:	4a65      	ldr	r2, [pc, #404]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008dd0:	f043 0301 	orr.w	r3, r3, #1
 8008dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008dd8:	e024      	b.n	8008e24 <HAL_RCC_OscConfig+0x378>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	2b05      	cmp	r3, #5
 8008de0:	d110      	bne.n	8008e04 <HAL_RCC_OscConfig+0x358>
 8008de2:	4b60      	ldr	r3, [pc, #384]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008de8:	4a5e      	ldr	r2, [pc, #376]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008dea:	f043 0304 	orr.w	r3, r3, #4
 8008dee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008df2:	4b5c      	ldr	r3, [pc, #368]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008df8:	4a5a      	ldr	r2, [pc, #360]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008dfa:	f043 0301 	orr.w	r3, r3, #1
 8008dfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008e02:	e00f      	b.n	8008e24 <HAL_RCC_OscConfig+0x378>
 8008e04:	4b57      	ldr	r3, [pc, #348]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e0a:	4a56      	ldr	r2, [pc, #344]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008e0c:	f023 0301 	bic.w	r3, r3, #1
 8008e10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008e14:	4b53      	ldr	r3, [pc, #332]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e1a:	4a52      	ldr	r2, [pc, #328]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008e1c:	f023 0304 	bic.w	r3, r3, #4
 8008e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d016      	beq.n	8008e5a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e2c:	f7f9 ffec 	bl	8002e08 <HAL_GetTick>
 8008e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e32:	e00a      	b.n	8008e4a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e34:	f7f9 ffe8 	bl	8002e08 <HAL_GetTick>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	1ad3      	subs	r3, r2, r3
 8008e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d901      	bls.n	8008e4a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e138      	b.n	80090bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e4a:	4b46      	ldr	r3, [pc, #280]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e50:	f003 0302 	and.w	r3, r3, #2
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d0ed      	beq.n	8008e34 <HAL_RCC_OscConfig+0x388>
 8008e58:	e015      	b.n	8008e86 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e5a:	f7f9 ffd5 	bl	8002e08 <HAL_GetTick>
 8008e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e60:	e00a      	b.n	8008e78 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e62:	f7f9 ffd1 	bl	8002e08 <HAL_GetTick>
 8008e66:	4602      	mov	r2, r0
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	1ad3      	subs	r3, r2, r3
 8008e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d901      	bls.n	8008e78 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e121      	b.n	80090bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e78:	4b3a      	ldr	r3, [pc, #232]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e7e:	f003 0302 	and.w	r3, r3, #2
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1ed      	bne.n	8008e62 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008e86:	7ffb      	ldrb	r3, [r7, #31]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d105      	bne.n	8008e98 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e8c:	4b35      	ldr	r3, [pc, #212]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e90:	4a34      	ldr	r2, [pc, #208]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008e92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 0320 	and.w	r3, r3, #32
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d03c      	beq.n	8008f1e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d01c      	beq.n	8008ee6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008eac:	4b2d      	ldr	r3, [pc, #180]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008eae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008eb2:	4a2c      	ldr	r2, [pc, #176]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008eb4:	f043 0301 	orr.w	r3, r3, #1
 8008eb8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ebc:	f7f9 ffa4 	bl	8002e08 <HAL_GetTick>
 8008ec0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008ec2:	e008      	b.n	8008ed6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ec4:	f7f9 ffa0 	bl	8002e08 <HAL_GetTick>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d901      	bls.n	8008ed6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	e0f2      	b.n	80090bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008ed6:	4b23      	ldr	r3, [pc, #140]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008ed8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008edc:	f003 0302 	and.w	r3, r3, #2
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d0ef      	beq.n	8008ec4 <HAL_RCC_OscConfig+0x418>
 8008ee4:	e01b      	b.n	8008f1e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008ee6:	4b1f      	ldr	r3, [pc, #124]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008ee8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008eec:	4a1d      	ldr	r2, [pc, #116]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008eee:	f023 0301 	bic.w	r3, r3, #1
 8008ef2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ef6:	f7f9 ff87 	bl	8002e08 <HAL_GetTick>
 8008efa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008efc:	e008      	b.n	8008f10 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008efe:	f7f9 ff83 	bl	8002e08 <HAL_GetTick>
 8008f02:	4602      	mov	r2, r0
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	2b02      	cmp	r3, #2
 8008f0a:	d901      	bls.n	8008f10 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	e0d5      	b.n	80090bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008f10:	4b14      	ldr	r3, [pc, #80]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008f12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f16:	f003 0302 	and.w	r3, r3, #2
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1ef      	bne.n	8008efe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	69db      	ldr	r3, [r3, #28]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f000 80c9 	beq.w	80090ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f28:	4b0e      	ldr	r3, [pc, #56]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f003 030c 	and.w	r3, r3, #12
 8008f30:	2b0c      	cmp	r3, #12
 8008f32:	f000 8083 	beq.w	800903c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	69db      	ldr	r3, [r3, #28]
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d15e      	bne.n	8008ffc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f3e:	4b09      	ldr	r3, [pc, #36]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a08      	ldr	r2, [pc, #32]	; (8008f64 <HAL_RCC_OscConfig+0x4b8>)
 8008f44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f4a:	f7f9 ff5d 	bl	8002e08 <HAL_GetTick>
 8008f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f50:	e00c      	b.n	8008f6c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f52:	f7f9 ff59 	bl	8002e08 <HAL_GetTick>
 8008f56:	4602      	mov	r2, r0
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d905      	bls.n	8008f6c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008f60:	2303      	movs	r3, #3
 8008f62:	e0ab      	b.n	80090bc <HAL_RCC_OscConfig+0x610>
 8008f64:	40021000 	.word	0x40021000
 8008f68:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f6c:	4b55      	ldr	r3, [pc, #340]	; (80090c4 <HAL_RCC_OscConfig+0x618>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1ec      	bne.n	8008f52 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f78:	4b52      	ldr	r3, [pc, #328]	; (80090c4 <HAL_RCC_OscConfig+0x618>)
 8008f7a:	68da      	ldr	r2, [r3, #12]
 8008f7c:	4b52      	ldr	r3, [pc, #328]	; (80090c8 <HAL_RCC_OscConfig+0x61c>)
 8008f7e:	4013      	ands	r3, r2
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	6a11      	ldr	r1, [r2, #32]
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f88:	3a01      	subs	r2, #1
 8008f8a:	0112      	lsls	r2, r2, #4
 8008f8c:	4311      	orrs	r1, r2
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008f92:	0212      	lsls	r2, r2, #8
 8008f94:	4311      	orrs	r1, r2
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008f9a:	0852      	lsrs	r2, r2, #1
 8008f9c:	3a01      	subs	r2, #1
 8008f9e:	0552      	lsls	r2, r2, #21
 8008fa0:	4311      	orrs	r1, r2
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008fa6:	0852      	lsrs	r2, r2, #1
 8008fa8:	3a01      	subs	r2, #1
 8008faa:	0652      	lsls	r2, r2, #25
 8008fac:	4311      	orrs	r1, r2
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008fb2:	06d2      	lsls	r2, r2, #27
 8008fb4:	430a      	orrs	r2, r1
 8008fb6:	4943      	ldr	r1, [pc, #268]	; (80090c4 <HAL_RCC_OscConfig+0x618>)
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008fbc:	4b41      	ldr	r3, [pc, #260]	; (80090c4 <HAL_RCC_OscConfig+0x618>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a40      	ldr	r2, [pc, #256]	; (80090c4 <HAL_RCC_OscConfig+0x618>)
 8008fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fc6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008fc8:	4b3e      	ldr	r3, [pc, #248]	; (80090c4 <HAL_RCC_OscConfig+0x618>)
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	4a3d      	ldr	r2, [pc, #244]	; (80090c4 <HAL_RCC_OscConfig+0x618>)
 8008fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fd2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fd4:	f7f9 ff18 	bl	8002e08 <HAL_GetTick>
 8008fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008fda:	e008      	b.n	8008fee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fdc:	f7f9 ff14 	bl	8002e08 <HAL_GetTick>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d901      	bls.n	8008fee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e066      	b.n	80090bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008fee:	4b35      	ldr	r3, [pc, #212]	; (80090c4 <HAL_RCC_OscConfig+0x618>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d0f0      	beq.n	8008fdc <HAL_RCC_OscConfig+0x530>
 8008ffa:	e05e      	b.n	80090ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ffc:	4b31      	ldr	r3, [pc, #196]	; (80090c4 <HAL_RCC_OscConfig+0x618>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a30      	ldr	r2, [pc, #192]	; (80090c4 <HAL_RCC_OscConfig+0x618>)
 8009002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009008:	f7f9 fefe 	bl	8002e08 <HAL_GetTick>
 800900c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800900e:	e008      	b.n	8009022 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009010:	f7f9 fefa 	bl	8002e08 <HAL_GetTick>
 8009014:	4602      	mov	r2, r0
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	1ad3      	subs	r3, r2, r3
 800901a:	2b02      	cmp	r3, #2
 800901c:	d901      	bls.n	8009022 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800901e:	2303      	movs	r3, #3
 8009020:	e04c      	b.n	80090bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009022:	4b28      	ldr	r3, [pc, #160]	; (80090c4 <HAL_RCC_OscConfig+0x618>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1f0      	bne.n	8009010 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800902e:	4b25      	ldr	r3, [pc, #148]	; (80090c4 <HAL_RCC_OscConfig+0x618>)
 8009030:	68da      	ldr	r2, [r3, #12]
 8009032:	4924      	ldr	r1, [pc, #144]	; (80090c4 <HAL_RCC_OscConfig+0x618>)
 8009034:	4b25      	ldr	r3, [pc, #148]	; (80090cc <HAL_RCC_OscConfig+0x620>)
 8009036:	4013      	ands	r3, r2
 8009038:	60cb      	str	r3, [r1, #12]
 800903a:	e03e      	b.n	80090ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	69db      	ldr	r3, [r3, #28]
 8009040:	2b01      	cmp	r3, #1
 8009042:	d101      	bne.n	8009048 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	e039      	b.n	80090bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009048:	4b1e      	ldr	r3, [pc, #120]	; (80090c4 <HAL_RCC_OscConfig+0x618>)
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	f003 0203 	and.w	r2, r3, #3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6a1b      	ldr	r3, [r3, #32]
 8009058:	429a      	cmp	r2, r3
 800905a:	d12c      	bne.n	80090b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009066:	3b01      	subs	r3, #1
 8009068:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800906a:	429a      	cmp	r2, r3
 800906c:	d123      	bne.n	80090b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009078:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800907a:	429a      	cmp	r2, r3
 800907c:	d11b      	bne.n	80090b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009088:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800908a:	429a      	cmp	r2, r3
 800908c:	d113      	bne.n	80090b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009098:	085b      	lsrs	r3, r3, #1
 800909a:	3b01      	subs	r3, #1
 800909c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800909e:	429a      	cmp	r2, r3
 80090a0:	d109      	bne.n	80090b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ac:	085b      	lsrs	r3, r3, #1
 80090ae:	3b01      	subs	r3, #1
 80090b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d001      	beq.n	80090ba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e000      	b.n	80090bc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3720      	adds	r7, #32
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	40021000 	.word	0x40021000
 80090c8:	019f800c 	.word	0x019f800c
 80090cc:	feeefffc 	.word	0xfeeefffc

080090d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80090da:	2300      	movs	r3, #0
 80090dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d101      	bne.n	80090e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e11e      	b.n	8009326 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80090e8:	4b91      	ldr	r3, [pc, #580]	; (8009330 <HAL_RCC_ClockConfig+0x260>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 030f 	and.w	r3, r3, #15
 80090f0:	683a      	ldr	r2, [r7, #0]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d910      	bls.n	8009118 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090f6:	4b8e      	ldr	r3, [pc, #568]	; (8009330 <HAL_RCC_ClockConfig+0x260>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f023 020f 	bic.w	r2, r3, #15
 80090fe:	498c      	ldr	r1, [pc, #560]	; (8009330 <HAL_RCC_ClockConfig+0x260>)
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	4313      	orrs	r3, r2
 8009104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009106:	4b8a      	ldr	r3, [pc, #552]	; (8009330 <HAL_RCC_ClockConfig+0x260>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 030f 	and.w	r3, r3, #15
 800910e:	683a      	ldr	r2, [r7, #0]
 8009110:	429a      	cmp	r2, r3
 8009112:	d001      	beq.n	8009118 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	e106      	b.n	8009326 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 0301 	and.w	r3, r3, #1
 8009120:	2b00      	cmp	r3, #0
 8009122:	d073      	beq.n	800920c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	2b03      	cmp	r3, #3
 800912a:	d129      	bne.n	8009180 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800912c:	4b81      	ldr	r3, [pc, #516]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e0f4      	b.n	8009326 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800913c:	f000 f972 	bl	8009424 <RCC_GetSysClockFreqFromPLLSource>
 8009140:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	4a7c      	ldr	r2, [pc, #496]	; (8009338 <HAL_RCC_ClockConfig+0x268>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d93f      	bls.n	80091ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800914a:	4b7a      	ldr	r3, [pc, #488]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d009      	beq.n	800916a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800915e:	2b00      	cmp	r3, #0
 8009160:	d033      	beq.n	80091ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009166:	2b00      	cmp	r3, #0
 8009168:	d12f      	bne.n	80091ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800916a:	4b72      	ldr	r3, [pc, #456]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009172:	4a70      	ldr	r2, [pc, #448]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 8009174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009178:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800917a:	2380      	movs	r3, #128	; 0x80
 800917c:	617b      	str	r3, [r7, #20]
 800917e:	e024      	b.n	80091ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	2b02      	cmp	r3, #2
 8009186:	d107      	bne.n	8009198 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009188:	4b6a      	ldr	r3, [pc, #424]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d109      	bne.n	80091a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	e0c6      	b.n	8009326 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009198:	4b66      	ldr	r3, [pc, #408]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d101      	bne.n	80091a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e0be      	b.n	8009326 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80091a8:	f000 f8ce 	bl	8009348 <HAL_RCC_GetSysClockFreq>
 80091ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	4a61      	ldr	r2, [pc, #388]	; (8009338 <HAL_RCC_ClockConfig+0x268>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d909      	bls.n	80091ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80091b6:	4b5f      	ldr	r3, [pc, #380]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091be:	4a5d      	ldr	r2, [pc, #372]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 80091c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80091c6:	2380      	movs	r3, #128	; 0x80
 80091c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80091ca:	4b5a      	ldr	r3, [pc, #360]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	f023 0203 	bic.w	r2, r3, #3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	4957      	ldr	r1, [pc, #348]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 80091d8:	4313      	orrs	r3, r2
 80091da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091dc:	f7f9 fe14 	bl	8002e08 <HAL_GetTick>
 80091e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091e2:	e00a      	b.n	80091fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091e4:	f7f9 fe10 	bl	8002e08 <HAL_GetTick>
 80091e8:	4602      	mov	r2, r0
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	1ad3      	subs	r3, r2, r3
 80091ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d901      	bls.n	80091fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80091f6:	2303      	movs	r3, #3
 80091f8:	e095      	b.n	8009326 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091fa:	4b4e      	ldr	r3, [pc, #312]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	f003 020c 	and.w	r2, r3, #12
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	429a      	cmp	r2, r3
 800920a:	d1eb      	bne.n	80091e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 0302 	and.w	r3, r3, #2
 8009214:	2b00      	cmp	r3, #0
 8009216:	d023      	beq.n	8009260 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 0304 	and.w	r3, r3, #4
 8009220:	2b00      	cmp	r3, #0
 8009222:	d005      	beq.n	8009230 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009224:	4b43      	ldr	r3, [pc, #268]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	4a42      	ldr	r2, [pc, #264]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 800922a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800922e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 0308 	and.w	r3, r3, #8
 8009238:	2b00      	cmp	r3, #0
 800923a:	d007      	beq.n	800924c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800923c:	4b3d      	ldr	r3, [pc, #244]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009244:	4a3b      	ldr	r2, [pc, #236]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 8009246:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800924a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800924c:	4b39      	ldr	r3, [pc, #228]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	4936      	ldr	r1, [pc, #216]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 800925a:	4313      	orrs	r3, r2
 800925c:	608b      	str	r3, [r1, #8]
 800925e:	e008      	b.n	8009272 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	2b80      	cmp	r3, #128	; 0x80
 8009264:	d105      	bne.n	8009272 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009266:	4b33      	ldr	r3, [pc, #204]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	4a32      	ldr	r2, [pc, #200]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 800926c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009270:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009272:	4b2f      	ldr	r3, [pc, #188]	; (8009330 <HAL_RCC_ClockConfig+0x260>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f003 030f 	and.w	r3, r3, #15
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	429a      	cmp	r2, r3
 800927e:	d21d      	bcs.n	80092bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009280:	4b2b      	ldr	r3, [pc, #172]	; (8009330 <HAL_RCC_ClockConfig+0x260>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f023 020f 	bic.w	r2, r3, #15
 8009288:	4929      	ldr	r1, [pc, #164]	; (8009330 <HAL_RCC_ClockConfig+0x260>)
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	4313      	orrs	r3, r2
 800928e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009290:	f7f9 fdba 	bl	8002e08 <HAL_GetTick>
 8009294:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009296:	e00a      	b.n	80092ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009298:	f7f9 fdb6 	bl	8002e08 <HAL_GetTick>
 800929c:	4602      	mov	r2, r0
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d901      	bls.n	80092ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80092aa:	2303      	movs	r3, #3
 80092ac:	e03b      	b.n	8009326 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092ae:	4b20      	ldr	r3, [pc, #128]	; (8009330 <HAL_RCC_ClockConfig+0x260>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 030f 	and.w	r3, r3, #15
 80092b6:	683a      	ldr	r2, [r7, #0]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d1ed      	bne.n	8009298 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f003 0304 	and.w	r3, r3, #4
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d008      	beq.n	80092da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80092c8:	4b1a      	ldr	r3, [pc, #104]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	4917      	ldr	r1, [pc, #92]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 80092d6:	4313      	orrs	r3, r2
 80092d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 0308 	and.w	r3, r3, #8
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d009      	beq.n	80092fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80092e6:	4b13      	ldr	r3, [pc, #76]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	00db      	lsls	r3, r3, #3
 80092f4:	490f      	ldr	r1, [pc, #60]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80092fa:	f000 f825 	bl	8009348 <HAL_RCC_GetSysClockFreq>
 80092fe:	4602      	mov	r2, r0
 8009300:	4b0c      	ldr	r3, [pc, #48]	; (8009334 <HAL_RCC_ClockConfig+0x264>)
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	091b      	lsrs	r3, r3, #4
 8009306:	f003 030f 	and.w	r3, r3, #15
 800930a:	490c      	ldr	r1, [pc, #48]	; (800933c <HAL_RCC_ClockConfig+0x26c>)
 800930c:	5ccb      	ldrb	r3, [r1, r3]
 800930e:	f003 031f 	and.w	r3, r3, #31
 8009312:	fa22 f303 	lsr.w	r3, r2, r3
 8009316:	4a0a      	ldr	r2, [pc, #40]	; (8009340 <HAL_RCC_ClockConfig+0x270>)
 8009318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800931a:	4b0a      	ldr	r3, [pc, #40]	; (8009344 <HAL_RCC_ClockConfig+0x274>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4618      	mov	r0, r3
 8009320:	f7f9 fd26 	bl	8002d70 <HAL_InitTick>
 8009324:	4603      	mov	r3, r0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3718      	adds	r7, #24
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	40022000 	.word	0x40022000
 8009334:	40021000 	.word	0x40021000
 8009338:	04c4b400 	.word	0x04c4b400
 800933c:	08012ae0 	.word	0x08012ae0
 8009340:	2000000c 	.word	0x2000000c
 8009344:	20000010 	.word	0x20000010

08009348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009348:	b480      	push	{r7}
 800934a:	b087      	sub	sp, #28
 800934c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800934e:	4b2c      	ldr	r3, [pc, #176]	; (8009400 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	f003 030c 	and.w	r3, r3, #12
 8009356:	2b04      	cmp	r3, #4
 8009358:	d102      	bne.n	8009360 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800935a:	4b2a      	ldr	r3, [pc, #168]	; (8009404 <HAL_RCC_GetSysClockFreq+0xbc>)
 800935c:	613b      	str	r3, [r7, #16]
 800935e:	e047      	b.n	80093f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009360:	4b27      	ldr	r3, [pc, #156]	; (8009400 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	f003 030c 	and.w	r3, r3, #12
 8009368:	2b08      	cmp	r3, #8
 800936a:	d102      	bne.n	8009372 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800936c:	4b26      	ldr	r3, [pc, #152]	; (8009408 <HAL_RCC_GetSysClockFreq+0xc0>)
 800936e:	613b      	str	r3, [r7, #16]
 8009370:	e03e      	b.n	80093f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009372:	4b23      	ldr	r3, [pc, #140]	; (8009400 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	f003 030c 	and.w	r3, r3, #12
 800937a:	2b0c      	cmp	r3, #12
 800937c:	d136      	bne.n	80093ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800937e:	4b20      	ldr	r3, [pc, #128]	; (8009400 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	f003 0303 	and.w	r3, r3, #3
 8009386:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009388:	4b1d      	ldr	r3, [pc, #116]	; (8009400 <HAL_RCC_GetSysClockFreq+0xb8>)
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	091b      	lsrs	r3, r3, #4
 800938e:	f003 030f 	and.w	r3, r3, #15
 8009392:	3301      	adds	r3, #1
 8009394:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2b03      	cmp	r3, #3
 800939a:	d10c      	bne.n	80093b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800939c:	4a1a      	ldr	r2, [pc, #104]	; (8009408 <HAL_RCC_GetSysClockFreq+0xc0>)
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80093a4:	4a16      	ldr	r2, [pc, #88]	; (8009400 <HAL_RCC_GetSysClockFreq+0xb8>)
 80093a6:	68d2      	ldr	r2, [r2, #12]
 80093a8:	0a12      	lsrs	r2, r2, #8
 80093aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80093ae:	fb02 f303 	mul.w	r3, r2, r3
 80093b2:	617b      	str	r3, [r7, #20]
      break;
 80093b4:	e00c      	b.n	80093d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80093b6:	4a13      	ldr	r2, [pc, #76]	; (8009404 <HAL_RCC_GetSysClockFreq+0xbc>)
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80093be:	4a10      	ldr	r2, [pc, #64]	; (8009400 <HAL_RCC_GetSysClockFreq+0xb8>)
 80093c0:	68d2      	ldr	r2, [r2, #12]
 80093c2:	0a12      	lsrs	r2, r2, #8
 80093c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80093c8:	fb02 f303 	mul.w	r3, r2, r3
 80093cc:	617b      	str	r3, [r7, #20]
      break;
 80093ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80093d0:	4b0b      	ldr	r3, [pc, #44]	; (8009400 <HAL_RCC_GetSysClockFreq+0xb8>)
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	0e5b      	lsrs	r3, r3, #25
 80093d6:	f003 0303 	and.w	r3, r3, #3
 80093da:	3301      	adds	r3, #1
 80093dc:	005b      	lsls	r3, r3, #1
 80093de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80093e0:	697a      	ldr	r2, [r7, #20]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80093e8:	613b      	str	r3, [r7, #16]
 80093ea:	e001      	b.n	80093f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80093ec:	2300      	movs	r3, #0
 80093ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80093f0:	693b      	ldr	r3, [r7, #16]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	371c      	adds	r7, #28
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	40021000 	.word	0x40021000
 8009404:	00f42400 	.word	0x00f42400
 8009408:	007a1200 	.word	0x007a1200

0800940c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800940c:	b480      	push	{r7}
 800940e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009410:	4b03      	ldr	r3, [pc, #12]	; (8009420 <HAL_RCC_GetHCLKFreq+0x14>)
 8009412:	681b      	ldr	r3, [r3, #0]
}
 8009414:	4618      	mov	r0, r3
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	2000000c 	.word	0x2000000c

08009424 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009424:	b480      	push	{r7}
 8009426:	b087      	sub	sp, #28
 8009428:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800942a:	4b1e      	ldr	r3, [pc, #120]	; (80094a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	f003 0303 	and.w	r3, r3, #3
 8009432:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009434:	4b1b      	ldr	r3, [pc, #108]	; (80094a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	091b      	lsrs	r3, r3, #4
 800943a:	f003 030f 	and.w	r3, r3, #15
 800943e:	3301      	adds	r3, #1
 8009440:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	2b03      	cmp	r3, #3
 8009446:	d10c      	bne.n	8009462 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009448:	4a17      	ldr	r2, [pc, #92]	; (80094a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009450:	4a14      	ldr	r2, [pc, #80]	; (80094a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009452:	68d2      	ldr	r2, [r2, #12]
 8009454:	0a12      	lsrs	r2, r2, #8
 8009456:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800945a:	fb02 f303 	mul.w	r3, r2, r3
 800945e:	617b      	str	r3, [r7, #20]
    break;
 8009460:	e00c      	b.n	800947c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009462:	4a12      	ldr	r2, [pc, #72]	; (80094ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	fbb2 f3f3 	udiv	r3, r2, r3
 800946a:	4a0e      	ldr	r2, [pc, #56]	; (80094a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800946c:	68d2      	ldr	r2, [r2, #12]
 800946e:	0a12      	lsrs	r2, r2, #8
 8009470:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009474:	fb02 f303 	mul.w	r3, r2, r3
 8009478:	617b      	str	r3, [r7, #20]
    break;
 800947a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800947c:	4b09      	ldr	r3, [pc, #36]	; (80094a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	0e5b      	lsrs	r3, r3, #25
 8009482:	f003 0303 	and.w	r3, r3, #3
 8009486:	3301      	adds	r3, #1
 8009488:	005b      	lsls	r3, r3, #1
 800948a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	fbb2 f3f3 	udiv	r3, r2, r3
 8009494:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009496:	687b      	ldr	r3, [r7, #4]
}
 8009498:	4618      	mov	r0, r3
 800949a:	371c      	adds	r7, #28
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr
 80094a4:	40021000 	.word	0x40021000
 80094a8:	007a1200 	.word	0x007a1200
 80094ac:	00f42400 	.word	0x00f42400

080094b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b086      	sub	sp, #24
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80094b8:	2300      	movs	r3, #0
 80094ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80094bc:	2300      	movs	r3, #0
 80094be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 8098 	beq.w	80095fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80094ce:	2300      	movs	r3, #0
 80094d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094d2:	4b43      	ldr	r3, [pc, #268]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10d      	bne.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094de:	4b40      	ldr	r3, [pc, #256]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094e2:	4a3f      	ldr	r2, [pc, #252]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094e8:	6593      	str	r3, [r2, #88]	; 0x58
 80094ea:	4b3d      	ldr	r3, [pc, #244]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094f2:	60bb      	str	r3, [r7, #8]
 80094f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80094f6:	2301      	movs	r3, #1
 80094f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80094fa:	4b3a      	ldr	r3, [pc, #232]	; (80095e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a39      	ldr	r2, [pc, #228]	; (80095e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009504:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009506:	f7f9 fc7f 	bl	8002e08 <HAL_GetTick>
 800950a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800950c:	e009      	b.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800950e:	f7f9 fc7b 	bl	8002e08 <HAL_GetTick>
 8009512:	4602      	mov	r2, r0
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	1ad3      	subs	r3, r2, r3
 8009518:	2b02      	cmp	r3, #2
 800951a:	d902      	bls.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800951c:	2303      	movs	r3, #3
 800951e:	74fb      	strb	r3, [r7, #19]
        break;
 8009520:	e005      	b.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009522:	4b30      	ldr	r3, [pc, #192]	; (80095e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800952a:	2b00      	cmp	r3, #0
 800952c:	d0ef      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800952e:	7cfb      	ldrb	r3, [r7, #19]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d159      	bne.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009534:	4b2a      	ldr	r3, [pc, #168]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800953a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800953e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d01e      	beq.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800954a:	697a      	ldr	r2, [r7, #20]
 800954c:	429a      	cmp	r2, r3
 800954e:	d019      	beq.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009550:	4b23      	ldr	r3, [pc, #140]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800955a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800955c:	4b20      	ldr	r3, [pc, #128]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800955e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009562:	4a1f      	ldr	r2, [pc, #124]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800956c:	4b1c      	ldr	r3, [pc, #112]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800956e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009572:	4a1b      	ldr	r2, [pc, #108]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800957c:	4a18      	ldr	r2, [pc, #96]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	f003 0301 	and.w	r3, r3, #1
 800958a:	2b00      	cmp	r3, #0
 800958c:	d016      	beq.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800958e:	f7f9 fc3b 	bl	8002e08 <HAL_GetTick>
 8009592:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009594:	e00b      	b.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009596:	f7f9 fc37 	bl	8002e08 <HAL_GetTick>
 800959a:	4602      	mov	r2, r0
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d902      	bls.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80095a8:	2303      	movs	r3, #3
 80095aa:	74fb      	strb	r3, [r7, #19]
            break;
 80095ac:	e006      	b.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80095ae:	4b0c      	ldr	r3, [pc, #48]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095b4:	f003 0302 	and.w	r3, r3, #2
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d0ec      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80095bc:	7cfb      	ldrb	r3, [r7, #19]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d10b      	bne.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095c2:	4b07      	ldr	r3, [pc, #28]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095d0:	4903      	ldr	r1, [pc, #12]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095d2:	4313      	orrs	r3, r2
 80095d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80095d8:	e008      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80095da:	7cfb      	ldrb	r3, [r7, #19]
 80095dc:	74bb      	strb	r3, [r7, #18]
 80095de:	e005      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80095e0:	40021000 	.word	0x40021000
 80095e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e8:	7cfb      	ldrb	r3, [r7, #19]
 80095ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80095ec:	7c7b      	ldrb	r3, [r7, #17]
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d105      	bne.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80095f2:	4ba7      	ldr	r3, [pc, #668]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095f6:	4aa6      	ldr	r2, [pc, #664]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 0301 	and.w	r3, r3, #1
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00a      	beq.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800960a:	4ba1      	ldr	r3, [pc, #644]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800960c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009610:	f023 0203 	bic.w	r2, r3, #3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	499d      	ldr	r1, [pc, #628]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800961a:	4313      	orrs	r3, r2
 800961c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 0302 	and.w	r3, r3, #2
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00a      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800962c:	4b98      	ldr	r3, [pc, #608]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800962e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009632:	f023 020c 	bic.w	r2, r3, #12
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	4995      	ldr	r1, [pc, #596]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800963c:	4313      	orrs	r3, r2
 800963e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 0304 	and.w	r3, r3, #4
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00a      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800964e:	4b90      	ldr	r3, [pc, #576]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009654:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	498c      	ldr	r1, [pc, #560]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800965e:	4313      	orrs	r3, r2
 8009660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f003 0308 	and.w	r3, r3, #8
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00a      	beq.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009670:	4b87      	ldr	r3, [pc, #540]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009676:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	4984      	ldr	r1, [pc, #528]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009680:	4313      	orrs	r3, r2
 8009682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 0310 	and.w	r3, r3, #16
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00a      	beq.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009692:	4b7f      	ldr	r3, [pc, #508]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009698:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	695b      	ldr	r3, [r3, #20]
 80096a0:	497b      	ldr	r1, [pc, #492]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096a2:	4313      	orrs	r3, r2
 80096a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 0320 	and.w	r3, r3, #32
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00a      	beq.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80096b4:	4b76      	ldr	r3, [pc, #472]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	699b      	ldr	r3, [r3, #24]
 80096c2:	4973      	ldr	r1, [pc, #460]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096c4:	4313      	orrs	r3, r2
 80096c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00a      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80096d6:	4b6e      	ldr	r3, [pc, #440]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	69db      	ldr	r3, [r3, #28]
 80096e4:	496a      	ldr	r1, [pc, #424]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096e6:	4313      	orrs	r3, r2
 80096e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00a      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80096f8:	4b65      	ldr	r3, [pc, #404]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a1b      	ldr	r3, [r3, #32]
 8009706:	4962      	ldr	r1, [pc, #392]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009708:	4313      	orrs	r3, r2
 800970a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00a      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800971a:	4b5d      	ldr	r3, [pc, #372]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800971c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009720:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009728:	4959      	ldr	r1, [pc, #356]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800972a:	4313      	orrs	r3, r2
 800972c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009738:	2b00      	cmp	r3, #0
 800973a:	d00a      	beq.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800973c:	4b54      	ldr	r3, [pc, #336]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800973e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009742:	f023 0203 	bic.w	r2, r3, #3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800974a:	4951      	ldr	r1, [pc, #324]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800974c:	4313      	orrs	r3, r2
 800974e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00a      	beq.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800975e:	4b4c      	ldr	r3, [pc, #304]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009764:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976c:	4948      	ldr	r1, [pc, #288]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800976e:	4313      	orrs	r3, r2
 8009770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800977c:	2b00      	cmp	r3, #0
 800977e:	d015      	beq.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009780:	4b43      	ldr	r3, [pc, #268]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009786:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800978e:	4940      	ldr	r1, [pc, #256]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009790:	4313      	orrs	r3, r2
 8009792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800979a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800979e:	d105      	bne.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80097a0:	4b3b      	ldr	r3, [pc, #236]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	4a3a      	ldr	r2, [pc, #232]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d015      	beq.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80097b8:	4b35      	ldr	r3, [pc, #212]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097c6:	4932      	ldr	r1, [pc, #200]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097c8:	4313      	orrs	r3, r2
 80097ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097d6:	d105      	bne.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80097d8:	4b2d      	ldr	r3, [pc, #180]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	4a2c      	ldr	r2, [pc, #176]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d015      	beq.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80097f0:	4b27      	ldr	r3, [pc, #156]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fe:	4924      	ldr	r1, [pc, #144]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009800:	4313      	orrs	r3, r2
 8009802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800980a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800980e:	d105      	bne.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009810:	4b1f      	ldr	r3, [pc, #124]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	4a1e      	ldr	r2, [pc, #120]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800981a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009824:	2b00      	cmp	r3, #0
 8009826:	d015      	beq.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009828:	4b19      	ldr	r3, [pc, #100]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800982a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800982e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009836:	4916      	ldr	r1, [pc, #88]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009838:	4313      	orrs	r3, r2
 800983a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009846:	d105      	bne.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009848:	4b11      	ldr	r3, [pc, #68]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	4a10      	ldr	r2, [pc, #64]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800984e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009852:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800985c:	2b00      	cmp	r3, #0
 800985e:	d019      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009860:	4b0b      	ldr	r3, [pc, #44]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009866:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986e:	4908      	ldr	r1, [pc, #32]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009870:	4313      	orrs	r3, r2
 8009872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800987a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800987e:	d109      	bne.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009880:	4b03      	ldr	r3, [pc, #12]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	4a02      	ldr	r2, [pc, #8]	; (8009890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009886:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800988a:	60d3      	str	r3, [r2, #12]
 800988c:	e002      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800988e:	bf00      	nop
 8009890:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800989c:	2b00      	cmp	r3, #0
 800989e:	d015      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80098a0:	4b29      	ldr	r3, [pc, #164]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ae:	4926      	ldr	r1, [pc, #152]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098b0:	4313      	orrs	r3, r2
 80098b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098be:	d105      	bne.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80098c0:	4b21      	ldr	r3, [pc, #132]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	4a20      	ldr	r2, [pc, #128]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098ca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d015      	beq.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80098d8:	4b1b      	ldr	r3, [pc, #108]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098de:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098e6:	4918      	ldr	r1, [pc, #96]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098e8:	4313      	orrs	r3, r2
 80098ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098f6:	d105      	bne.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80098f8:	4b13      	ldr	r3, [pc, #76]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	4a12      	ldr	r2, [pc, #72]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009902:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800990c:	2b00      	cmp	r3, #0
 800990e:	d015      	beq.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009910:	4b0d      	ldr	r3, [pc, #52]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009912:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009916:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800991e:	490a      	ldr	r1, [pc, #40]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009920:	4313      	orrs	r3, r2
 8009922:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800992a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800992e:	d105      	bne.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009930:	4b05      	ldr	r3, [pc, #20]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	4a04      	ldr	r2, [pc, #16]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009936:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800993a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800993c:	7cbb      	ldrb	r3, [r7, #18]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	40021000 	.word	0x40021000

0800994c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d101      	bne.n	800995e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	e049      	b.n	80099f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009964:	b2db      	uxtb	r3, r3
 8009966:	2b00      	cmp	r3, #0
 8009968:	d106      	bne.n	8009978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f7f9 f846 	bl	8002a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2202      	movs	r2, #2
 800997c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	3304      	adds	r3, #4
 8009988:	4619      	mov	r1, r3
 800998a:	4610      	mov	r0, r2
 800998c:	f000 f9f4 	bl	8009d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
	...

080099fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d001      	beq.n	8009a14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	e054      	b.n	8009abe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2202      	movs	r2, #2
 8009a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	68da      	ldr	r2, [r3, #12]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f042 0201 	orr.w	r2, r2, #1
 8009a2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a26      	ldr	r2, [pc, #152]	; (8009acc <HAL_TIM_Base_Start_IT+0xd0>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d022      	beq.n	8009a7c <HAL_TIM_Base_Start_IT+0x80>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a3e:	d01d      	beq.n	8009a7c <HAL_TIM_Base_Start_IT+0x80>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a22      	ldr	r2, [pc, #136]	; (8009ad0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d018      	beq.n	8009a7c <HAL_TIM_Base_Start_IT+0x80>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a21      	ldr	r2, [pc, #132]	; (8009ad4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d013      	beq.n	8009a7c <HAL_TIM_Base_Start_IT+0x80>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a1f      	ldr	r2, [pc, #124]	; (8009ad8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d00e      	beq.n	8009a7c <HAL_TIM_Base_Start_IT+0x80>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a1e      	ldr	r2, [pc, #120]	; (8009adc <HAL_TIM_Base_Start_IT+0xe0>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d009      	beq.n	8009a7c <HAL_TIM_Base_Start_IT+0x80>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a1c      	ldr	r2, [pc, #112]	; (8009ae0 <HAL_TIM_Base_Start_IT+0xe4>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d004      	beq.n	8009a7c <HAL_TIM_Base_Start_IT+0x80>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a1b      	ldr	r2, [pc, #108]	; (8009ae4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d115      	bne.n	8009aa8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	689a      	ldr	r2, [r3, #8]
 8009a82:	4b19      	ldr	r3, [pc, #100]	; (8009ae8 <HAL_TIM_Base_Start_IT+0xec>)
 8009a84:	4013      	ands	r3, r2
 8009a86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2b06      	cmp	r3, #6
 8009a8c:	d015      	beq.n	8009aba <HAL_TIM_Base_Start_IT+0xbe>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a94:	d011      	beq.n	8009aba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f042 0201 	orr.w	r2, r2, #1
 8009aa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aa6:	e008      	b.n	8009aba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f042 0201 	orr.w	r2, r2, #1
 8009ab6:	601a      	str	r2, [r3, #0]
 8009ab8:	e000      	b.n	8009abc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3714      	adds	r7, #20
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	40012c00 	.word	0x40012c00
 8009ad0:	40000400 	.word	0x40000400
 8009ad4:	40000800 	.word	0x40000800
 8009ad8:	40000c00 	.word	0x40000c00
 8009adc:	40013400 	.word	0x40013400
 8009ae0:	40014000 	.word	0x40014000
 8009ae4:	40015000 	.word	0x40015000
 8009ae8:	00010007 	.word	0x00010007

08009aec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68da      	ldr	r2, [r3, #12]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f022 0201 	bic.w	r2, r2, #1
 8009b02:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	6a1a      	ldr	r2, [r3, #32]
 8009b0a:	f241 1311 	movw	r3, #4369	; 0x1111
 8009b0e:	4013      	ands	r3, r2
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d10f      	bne.n	8009b34 <HAL_TIM_Base_Stop_IT+0x48>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	6a1a      	ldr	r2, [r3, #32]
 8009b1a:	f244 4344 	movw	r3, #17476	; 0x4444
 8009b1e:	4013      	ands	r3, r2
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d107      	bne.n	8009b34 <HAL_TIM_Base_Stop_IT+0x48>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f022 0201 	bic.w	r2, r2, #1
 8009b32:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	370c      	adds	r7, #12
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr
	...

08009b4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b56:	2300      	movs	r3, #0
 8009b58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d101      	bne.n	8009b68 <HAL_TIM_ConfigClockSource+0x1c>
 8009b64:	2302      	movs	r3, #2
 8009b66:	e0f6      	b.n	8009d56 <HAL_TIM_ConfigClockSource+0x20a>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2202      	movs	r2, #2
 8009b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009b86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a6f      	ldr	r2, [pc, #444]	; (8009d60 <HAL_TIM_ConfigClockSource+0x214>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	f000 80c1 	beq.w	8009d2a <HAL_TIM_ConfigClockSource+0x1de>
 8009ba8:	4a6d      	ldr	r2, [pc, #436]	; (8009d60 <HAL_TIM_ConfigClockSource+0x214>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	f200 80c6 	bhi.w	8009d3c <HAL_TIM_ConfigClockSource+0x1f0>
 8009bb0:	4a6c      	ldr	r2, [pc, #432]	; (8009d64 <HAL_TIM_ConfigClockSource+0x218>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	f000 80b9 	beq.w	8009d2a <HAL_TIM_ConfigClockSource+0x1de>
 8009bb8:	4a6a      	ldr	r2, [pc, #424]	; (8009d64 <HAL_TIM_ConfigClockSource+0x218>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	f200 80be 	bhi.w	8009d3c <HAL_TIM_ConfigClockSource+0x1f0>
 8009bc0:	4a69      	ldr	r2, [pc, #420]	; (8009d68 <HAL_TIM_ConfigClockSource+0x21c>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	f000 80b1 	beq.w	8009d2a <HAL_TIM_ConfigClockSource+0x1de>
 8009bc8:	4a67      	ldr	r2, [pc, #412]	; (8009d68 <HAL_TIM_ConfigClockSource+0x21c>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	f200 80b6 	bhi.w	8009d3c <HAL_TIM_ConfigClockSource+0x1f0>
 8009bd0:	4a66      	ldr	r2, [pc, #408]	; (8009d6c <HAL_TIM_ConfigClockSource+0x220>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	f000 80a9 	beq.w	8009d2a <HAL_TIM_ConfigClockSource+0x1de>
 8009bd8:	4a64      	ldr	r2, [pc, #400]	; (8009d6c <HAL_TIM_ConfigClockSource+0x220>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	f200 80ae 	bhi.w	8009d3c <HAL_TIM_ConfigClockSource+0x1f0>
 8009be0:	4a63      	ldr	r2, [pc, #396]	; (8009d70 <HAL_TIM_ConfigClockSource+0x224>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	f000 80a1 	beq.w	8009d2a <HAL_TIM_ConfigClockSource+0x1de>
 8009be8:	4a61      	ldr	r2, [pc, #388]	; (8009d70 <HAL_TIM_ConfigClockSource+0x224>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	f200 80a6 	bhi.w	8009d3c <HAL_TIM_ConfigClockSource+0x1f0>
 8009bf0:	4a60      	ldr	r2, [pc, #384]	; (8009d74 <HAL_TIM_ConfigClockSource+0x228>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	f000 8099 	beq.w	8009d2a <HAL_TIM_ConfigClockSource+0x1de>
 8009bf8:	4a5e      	ldr	r2, [pc, #376]	; (8009d74 <HAL_TIM_ConfigClockSource+0x228>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	f200 809e 	bhi.w	8009d3c <HAL_TIM_ConfigClockSource+0x1f0>
 8009c00:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009c04:	f000 8091 	beq.w	8009d2a <HAL_TIM_ConfigClockSource+0x1de>
 8009c08:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009c0c:	f200 8096 	bhi.w	8009d3c <HAL_TIM_ConfigClockSource+0x1f0>
 8009c10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c14:	f000 8089 	beq.w	8009d2a <HAL_TIM_ConfigClockSource+0x1de>
 8009c18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c1c:	f200 808e 	bhi.w	8009d3c <HAL_TIM_ConfigClockSource+0x1f0>
 8009c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c24:	d03e      	beq.n	8009ca4 <HAL_TIM_ConfigClockSource+0x158>
 8009c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c2a:	f200 8087 	bhi.w	8009d3c <HAL_TIM_ConfigClockSource+0x1f0>
 8009c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c32:	f000 8086 	beq.w	8009d42 <HAL_TIM_ConfigClockSource+0x1f6>
 8009c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c3a:	d87f      	bhi.n	8009d3c <HAL_TIM_ConfigClockSource+0x1f0>
 8009c3c:	2b70      	cmp	r3, #112	; 0x70
 8009c3e:	d01a      	beq.n	8009c76 <HAL_TIM_ConfigClockSource+0x12a>
 8009c40:	2b70      	cmp	r3, #112	; 0x70
 8009c42:	d87b      	bhi.n	8009d3c <HAL_TIM_ConfigClockSource+0x1f0>
 8009c44:	2b60      	cmp	r3, #96	; 0x60
 8009c46:	d050      	beq.n	8009cea <HAL_TIM_ConfigClockSource+0x19e>
 8009c48:	2b60      	cmp	r3, #96	; 0x60
 8009c4a:	d877      	bhi.n	8009d3c <HAL_TIM_ConfigClockSource+0x1f0>
 8009c4c:	2b50      	cmp	r3, #80	; 0x50
 8009c4e:	d03c      	beq.n	8009cca <HAL_TIM_ConfigClockSource+0x17e>
 8009c50:	2b50      	cmp	r3, #80	; 0x50
 8009c52:	d873      	bhi.n	8009d3c <HAL_TIM_ConfigClockSource+0x1f0>
 8009c54:	2b40      	cmp	r3, #64	; 0x40
 8009c56:	d058      	beq.n	8009d0a <HAL_TIM_ConfigClockSource+0x1be>
 8009c58:	2b40      	cmp	r3, #64	; 0x40
 8009c5a:	d86f      	bhi.n	8009d3c <HAL_TIM_ConfigClockSource+0x1f0>
 8009c5c:	2b30      	cmp	r3, #48	; 0x30
 8009c5e:	d064      	beq.n	8009d2a <HAL_TIM_ConfigClockSource+0x1de>
 8009c60:	2b30      	cmp	r3, #48	; 0x30
 8009c62:	d86b      	bhi.n	8009d3c <HAL_TIM_ConfigClockSource+0x1f0>
 8009c64:	2b20      	cmp	r3, #32
 8009c66:	d060      	beq.n	8009d2a <HAL_TIM_ConfigClockSource+0x1de>
 8009c68:	2b20      	cmp	r3, #32
 8009c6a:	d867      	bhi.n	8009d3c <HAL_TIM_ConfigClockSource+0x1f0>
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d05c      	beq.n	8009d2a <HAL_TIM_ConfigClockSource+0x1de>
 8009c70:	2b10      	cmp	r3, #16
 8009c72:	d05a      	beq.n	8009d2a <HAL_TIM_ConfigClockSource+0x1de>
 8009c74:	e062      	b.n	8009d3c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c86:	f000 f9a7 	bl	8009fd8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009c98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	68ba      	ldr	r2, [r7, #8]
 8009ca0:	609a      	str	r2, [r3, #8]
      break;
 8009ca2:	e04f      	b.n	8009d44 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009cb4:	f000 f990 	bl	8009fd8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	689a      	ldr	r2, [r3, #8]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009cc6:	609a      	str	r2, [r3, #8]
      break;
 8009cc8:	e03c      	b.n	8009d44 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	f000 f902 	bl	8009ee0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2150      	movs	r1, #80	; 0x50
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f000 f95b 	bl	8009f9e <TIM_ITRx_SetConfig>
      break;
 8009ce8:	e02c      	b.n	8009d44 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	f000 f921 	bl	8009f3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2160      	movs	r1, #96	; 0x60
 8009d02:	4618      	mov	r0, r3
 8009d04:	f000 f94b 	bl	8009f9e <TIM_ITRx_SetConfig>
      break;
 8009d08:	e01c      	b.n	8009d44 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d16:	461a      	mov	r2, r3
 8009d18:	f000 f8e2 	bl	8009ee0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2140      	movs	r1, #64	; 0x40
 8009d22:	4618      	mov	r0, r3
 8009d24:	f000 f93b 	bl	8009f9e <TIM_ITRx_SetConfig>
      break;
 8009d28:	e00c      	b.n	8009d44 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4619      	mov	r1, r3
 8009d34:	4610      	mov	r0, r2
 8009d36:	f000 f932 	bl	8009f9e <TIM_ITRx_SetConfig>
      break;
 8009d3a:	e003      	b.n	8009d44 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8009d40:	e000      	b.n	8009d44 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009d42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	00100070 	.word	0x00100070
 8009d64:	00100060 	.word	0x00100060
 8009d68:	00100050 	.word	0x00100050
 8009d6c:	00100040 	.word	0x00100040
 8009d70:	00100030 	.word	0x00100030
 8009d74:	00100020 	.word	0x00100020

08009d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4a4c      	ldr	r2, [pc, #304]	; (8009ebc <TIM_Base_SetConfig+0x144>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d017      	beq.n	8009dc0 <TIM_Base_SetConfig+0x48>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d96:	d013      	beq.n	8009dc0 <TIM_Base_SetConfig+0x48>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4a49      	ldr	r2, [pc, #292]	; (8009ec0 <TIM_Base_SetConfig+0x148>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d00f      	beq.n	8009dc0 <TIM_Base_SetConfig+0x48>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a48      	ldr	r2, [pc, #288]	; (8009ec4 <TIM_Base_SetConfig+0x14c>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d00b      	beq.n	8009dc0 <TIM_Base_SetConfig+0x48>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a47      	ldr	r2, [pc, #284]	; (8009ec8 <TIM_Base_SetConfig+0x150>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d007      	beq.n	8009dc0 <TIM_Base_SetConfig+0x48>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a46      	ldr	r2, [pc, #280]	; (8009ecc <TIM_Base_SetConfig+0x154>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d003      	beq.n	8009dc0 <TIM_Base_SetConfig+0x48>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a45      	ldr	r2, [pc, #276]	; (8009ed0 <TIM_Base_SetConfig+0x158>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d108      	bne.n	8009dd2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4a39      	ldr	r2, [pc, #228]	; (8009ebc <TIM_Base_SetConfig+0x144>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d023      	beq.n	8009e22 <TIM_Base_SetConfig+0xaa>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009de0:	d01f      	beq.n	8009e22 <TIM_Base_SetConfig+0xaa>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4a36      	ldr	r2, [pc, #216]	; (8009ec0 <TIM_Base_SetConfig+0x148>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d01b      	beq.n	8009e22 <TIM_Base_SetConfig+0xaa>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a35      	ldr	r2, [pc, #212]	; (8009ec4 <TIM_Base_SetConfig+0x14c>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d017      	beq.n	8009e22 <TIM_Base_SetConfig+0xaa>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4a34      	ldr	r2, [pc, #208]	; (8009ec8 <TIM_Base_SetConfig+0x150>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d013      	beq.n	8009e22 <TIM_Base_SetConfig+0xaa>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a33      	ldr	r2, [pc, #204]	; (8009ecc <TIM_Base_SetConfig+0x154>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d00f      	beq.n	8009e22 <TIM_Base_SetConfig+0xaa>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a33      	ldr	r2, [pc, #204]	; (8009ed4 <TIM_Base_SetConfig+0x15c>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d00b      	beq.n	8009e22 <TIM_Base_SetConfig+0xaa>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4a32      	ldr	r2, [pc, #200]	; (8009ed8 <TIM_Base_SetConfig+0x160>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d007      	beq.n	8009e22 <TIM_Base_SetConfig+0xaa>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a31      	ldr	r2, [pc, #196]	; (8009edc <TIM_Base_SetConfig+0x164>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d003      	beq.n	8009e22 <TIM_Base_SetConfig+0xaa>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a2c      	ldr	r2, [pc, #176]	; (8009ed0 <TIM_Base_SetConfig+0x158>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d108      	bne.n	8009e34 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	4313      	orrs	r3, r2
 8009e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	695b      	ldr	r3, [r3, #20]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	689a      	ldr	r2, [r3, #8]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	4a18      	ldr	r2, [pc, #96]	; (8009ebc <TIM_Base_SetConfig+0x144>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d013      	beq.n	8009e88 <TIM_Base_SetConfig+0x110>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4a1a      	ldr	r2, [pc, #104]	; (8009ecc <TIM_Base_SetConfig+0x154>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d00f      	beq.n	8009e88 <TIM_Base_SetConfig+0x110>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4a1a      	ldr	r2, [pc, #104]	; (8009ed4 <TIM_Base_SetConfig+0x15c>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d00b      	beq.n	8009e88 <TIM_Base_SetConfig+0x110>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4a19      	ldr	r2, [pc, #100]	; (8009ed8 <TIM_Base_SetConfig+0x160>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d007      	beq.n	8009e88 <TIM_Base_SetConfig+0x110>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4a18      	ldr	r2, [pc, #96]	; (8009edc <TIM_Base_SetConfig+0x164>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d003      	beq.n	8009e88 <TIM_Base_SetConfig+0x110>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a13      	ldr	r2, [pc, #76]	; (8009ed0 <TIM_Base_SetConfig+0x158>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d103      	bne.n	8009e90 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	691a      	ldr	r2, [r3, #16]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	f003 0301 	and.w	r3, r3, #1
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d105      	bne.n	8009eae <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	f023 0201 	bic.w	r2, r3, #1
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	611a      	str	r2, [r3, #16]
  }
}
 8009eae:	bf00      	nop
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	40012c00 	.word	0x40012c00
 8009ec0:	40000400 	.word	0x40000400
 8009ec4:	40000800 	.word	0x40000800
 8009ec8:	40000c00 	.word	0x40000c00
 8009ecc:	40013400 	.word	0x40013400
 8009ed0:	40015000 	.word	0x40015000
 8009ed4:	40014000 	.word	0x40014000
 8009ed8:	40014400 	.word	0x40014400
 8009edc:	40014800 	.word	0x40014800

08009ee0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b087      	sub	sp, #28
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6a1b      	ldr	r3, [r3, #32]
 8009ef0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6a1b      	ldr	r3, [r3, #32]
 8009ef6:	f023 0201 	bic.w	r2, r3, #1
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	699b      	ldr	r3, [r3, #24]
 8009f02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	011b      	lsls	r3, r3, #4
 8009f10:	693a      	ldr	r2, [r7, #16]
 8009f12:	4313      	orrs	r3, r2
 8009f14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	f023 030a 	bic.w	r3, r3, #10
 8009f1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f1e:	697a      	ldr	r2, [r7, #20]
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	697a      	ldr	r2, [r7, #20]
 8009f30:	621a      	str	r2, [r3, #32]
}
 8009f32:	bf00      	nop
 8009f34:	371c      	adds	r7, #28
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f3e:	b480      	push	{r7}
 8009f40:	b087      	sub	sp, #28
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	60f8      	str	r0, [r7, #12]
 8009f46:	60b9      	str	r1, [r7, #8]
 8009f48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6a1b      	ldr	r3, [r3, #32]
 8009f4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6a1b      	ldr	r3, [r3, #32]
 8009f54:	f023 0210 	bic.w	r2, r3, #16
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	031b      	lsls	r3, r3, #12
 8009f6e:	693a      	ldr	r2, [r7, #16]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	011b      	lsls	r3, r3, #4
 8009f80:	697a      	ldr	r2, [r7, #20]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	693a      	ldr	r2, [r7, #16]
 8009f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	621a      	str	r2, [r3, #32]
}
 8009f92:	bf00      	nop
 8009f94:	371c      	adds	r7, #28
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f9e:	b480      	push	{r7}
 8009fa0:	b085      	sub	sp, #20
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009fba:	683a      	ldr	r2, [r7, #0]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	f043 0307 	orr.w	r3, r3, #7
 8009fc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	609a      	str	r2, [r3, #8]
}
 8009fcc:	bf00      	nop
 8009fce:	3714      	adds	r7, #20
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b087      	sub	sp, #28
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]
 8009fe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ff2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	021a      	lsls	r2, r3, #8
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	431a      	orrs	r2, r3
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	4313      	orrs	r3, r2
 800a000:	697a      	ldr	r2, [r7, #20]
 800a002:	4313      	orrs	r3, r2
 800a004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	697a      	ldr	r2, [r7, #20]
 800a00a:	609a      	str	r2, [r3, #8]
}
 800a00c:	bf00      	nop
 800a00e:	371c      	adds	r7, #28
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d101      	bne.n	800a030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a02c:	2302      	movs	r3, #2
 800a02e:	e074      	b.n	800a11a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2202      	movs	r2, #2
 800a03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a34      	ldr	r2, [pc, #208]	; (800a128 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d009      	beq.n	800a06e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a33      	ldr	r2, [pc, #204]	; (800a12c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d004      	beq.n	800a06e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a31      	ldr	r2, [pc, #196]	; (800a130 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d108      	bne.n	800a080 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a074:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a08a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	4313      	orrs	r3, r2
 800a094:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a21      	ldr	r2, [pc, #132]	; (800a128 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d022      	beq.n	800a0ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0b0:	d01d      	beq.n	800a0ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a1f      	ldr	r2, [pc, #124]	; (800a134 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d018      	beq.n	800a0ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a1d      	ldr	r2, [pc, #116]	; (800a138 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d013      	beq.n	800a0ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a1c      	ldr	r2, [pc, #112]	; (800a13c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d00e      	beq.n	800a0ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a15      	ldr	r2, [pc, #84]	; (800a12c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d009      	beq.n	800a0ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a18      	ldr	r2, [pc, #96]	; (800a140 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d004      	beq.n	800a0ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a11      	ldr	r2, [pc, #68]	; (800a130 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d10c      	bne.n	800a108 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	68ba      	ldr	r2, [r7, #8]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	68ba      	ldr	r2, [r7, #8]
 800a106:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3714      	adds	r7, #20
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr
 800a126:	bf00      	nop
 800a128:	40012c00 	.word	0x40012c00
 800a12c:	40013400 	.word	0x40013400
 800a130:	40015000 	.word	0x40015000
 800a134:	40000400 	.word	0x40000400
 800a138:	40000800 	.word	0x40000800
 800a13c:	40000c00 	.word	0x40000c00
 800a140:	40014000 	.word	0x40014000

0800a144 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a154:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a158:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	b29a      	uxth	r2, r3
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr

0800a172 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a172:	b480      	push	{r7}
 800a174:	b085      	sub	sp, #20
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a17a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a17e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a186:	b29a      	uxth	r2, r3
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	43db      	mvns	r3, r3
 800a18e:	b29b      	uxth	r3, r3
 800a190:	4013      	ands	r3, r2
 800a192:	b29a      	uxth	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3714      	adds	r7, #20
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	1d3b      	adds	r3, r7, #4
 800a1b2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3714      	adds	r7, #20
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b09d      	sub	sp, #116	; 0x74
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	4413      	add	r3, r2
 800a1fe:	881b      	ldrh	r3, [r3, #0]
 800a200:	b29b      	uxth	r3, r3
 800a202:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a20a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	78db      	ldrb	r3, [r3, #3]
 800a212:	2b03      	cmp	r3, #3
 800a214:	d81f      	bhi.n	800a256 <USB_ActivateEndpoint+0x72>
 800a216:	a201      	add	r2, pc, #4	; (adr r2, 800a21c <USB_ActivateEndpoint+0x38>)
 800a218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21c:	0800a22d 	.word	0x0800a22d
 800a220:	0800a249 	.word	0x0800a249
 800a224:	0800a25f 	.word	0x0800a25f
 800a228:	0800a23b 	.word	0x0800a23b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a22c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a230:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a234:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a238:	e012      	b.n	800a260 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a23a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a23e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a242:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a246:	e00b      	b.n	800a260 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a248:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a24c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a250:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a254:	e004      	b.n	800a260 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a25c:	e000      	b.n	800a260 <USB_ActivateEndpoint+0x7c>
      break;
 800a25e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	441a      	add	r2, r3
 800a26a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a26e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a27a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a27e:	b29b      	uxth	r3, r3
 800a280:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	4413      	add	r3, r2
 800a28c:	881b      	ldrh	r3, [r3, #0]
 800a28e:	b29b      	uxth	r3, r3
 800a290:	b21b      	sxth	r3, r3
 800a292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a29a:	b21a      	sxth	r2, r3
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	b21b      	sxth	r3, r3
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	b21b      	sxth	r3, r3
 800a2a6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	441a      	add	r2, r3
 800a2b4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a2b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	7b1b      	ldrb	r3, [r3, #12]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f040 8178 	bne.w	800a5c6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	785b      	ldrb	r3, [r3, #1]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f000 8084 	beq.w	800a3e8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	61bb      	str	r3, [r7, #24]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	69bb      	ldr	r3, [r7, #24]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	61bb      	str	r3, [r7, #24]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	00da      	lsls	r2, r3, #3
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a302:	617b      	str	r3, [r7, #20]
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	88db      	ldrh	r3, [r3, #6]
 800a308:	085b      	lsrs	r3, r3, #1
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	005b      	lsls	r3, r3, #1
 800a30e:	b29a      	uxth	r2, r3
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	4413      	add	r3, r2
 800a31e:	881b      	ldrh	r3, [r3, #0]
 800a320:	827b      	strh	r3, [r7, #18]
 800a322:	8a7b      	ldrh	r3, [r7, #18]
 800a324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d01b      	beq.n	800a364 <USB_ActivateEndpoint+0x180>
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	4413      	add	r3, r2
 800a336:	881b      	ldrh	r3, [r3, #0]
 800a338:	b29b      	uxth	r3, r3
 800a33a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a33e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a342:	823b      	strh	r3, [r7, #16]
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	441a      	add	r2, r3
 800a34e:	8a3b      	ldrh	r3, [r7, #16]
 800a350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a35c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a360:	b29b      	uxth	r3, r3
 800a362:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	78db      	ldrb	r3, [r3, #3]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d020      	beq.n	800a3ae <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	4413      	add	r3, r2
 800a376:	881b      	ldrh	r3, [r3, #0]
 800a378:	b29b      	uxth	r3, r3
 800a37a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a37e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a382:	81bb      	strh	r3, [r7, #12]
 800a384:	89bb      	ldrh	r3, [r7, #12]
 800a386:	f083 0320 	eor.w	r3, r3, #32
 800a38a:	81bb      	strh	r3, [r7, #12]
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	441a      	add	r2, r3
 800a396:	89bb      	ldrh	r3, [r7, #12]
 800a398:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a39c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	8013      	strh	r3, [r2, #0]
 800a3ac:	e2d5      	b.n	800a95a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	4413      	add	r3, r2
 800a3b8:	881b      	ldrh	r3, [r3, #0]
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3c4:	81fb      	strh	r3, [r7, #14]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	441a      	add	r2, r3
 800a3d0:	89fb      	ldrh	r3, [r7, #14]
 800a3d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	8013      	strh	r3, [r2, #0]
 800a3e6:	e2b8      	b.n	800a95a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	633b      	str	r3, [r7, #48]	; 0x30
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f8:	4413      	add	r3, r2
 800a3fa:	633b      	str	r3, [r7, #48]	; 0x30
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	00da      	lsls	r2, r3, #3
 800a402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a404:	4413      	add	r3, r2
 800a406:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a40a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	88db      	ldrh	r3, [r3, #6]
 800a410:	085b      	lsrs	r3, r3, #1
 800a412:	b29b      	uxth	r3, r3
 800a414:	005b      	lsls	r3, r3, #1
 800a416:	b29a      	uxth	r2, r3
 800a418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a426:	b29b      	uxth	r3, r3
 800a428:	461a      	mov	r2, r3
 800a42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42c:	4413      	add	r3, r2
 800a42e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	00da      	lsls	r2, r3, #3
 800a436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a438:	4413      	add	r3, r2
 800a43a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a43e:	627b      	str	r3, [r7, #36]	; 0x24
 800a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a442:	881b      	ldrh	r3, [r3, #0]
 800a444:	b29b      	uxth	r3, r3
 800a446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a44a:	b29a      	uxth	r2, r3
 800a44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44e:	801a      	strh	r2, [r3, #0]
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	2b3e      	cmp	r3, #62	; 0x3e
 800a456:	d91d      	bls.n	800a494 <USB_ActivateEndpoint+0x2b0>
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	691b      	ldr	r3, [r3, #16]
 800a45c:	095b      	lsrs	r3, r3, #5
 800a45e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	f003 031f 	and.w	r3, r3, #31
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d102      	bne.n	800a472 <USB_ActivateEndpoint+0x28e>
 800a46c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a46e:	3b01      	subs	r3, #1
 800a470:	66bb      	str	r3, [r7, #104]	; 0x68
 800a472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a474:	881b      	ldrh	r3, [r3, #0]
 800a476:	b29a      	uxth	r2, r3
 800a478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	029b      	lsls	r3, r3, #10
 800a47e:	b29b      	uxth	r3, r3
 800a480:	4313      	orrs	r3, r2
 800a482:	b29b      	uxth	r3, r3
 800a484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a48c:	b29a      	uxth	r2, r3
 800a48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a490:	801a      	strh	r2, [r3, #0]
 800a492:	e026      	b.n	800a4e2 <USB_ActivateEndpoint+0x2fe>
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	691b      	ldr	r3, [r3, #16]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d10a      	bne.n	800a4b2 <USB_ActivateEndpoint+0x2ce>
 800a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49e:	881b      	ldrh	r3, [r3, #0]
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4aa:	b29a      	uxth	r2, r3
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	801a      	strh	r2, [r3, #0]
 800a4b0:	e017      	b.n	800a4e2 <USB_ActivateEndpoint+0x2fe>
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	691b      	ldr	r3, [r3, #16]
 800a4b6:	085b      	lsrs	r3, r3, #1
 800a4b8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	f003 0301 	and.w	r3, r3, #1
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d002      	beq.n	800a4cc <USB_ActivateEndpoint+0x2e8>
 800a4c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	66bb      	str	r3, [r7, #104]	; 0x68
 800a4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ce:	881b      	ldrh	r3, [r3, #0]
 800a4d0:	b29a      	uxth	r2, r3
 800a4d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	029b      	lsls	r3, r3, #10
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	4413      	add	r3, r2
 800a4ec:	881b      	ldrh	r3, [r3, #0]
 800a4ee:	847b      	strh	r3, [r7, #34]	; 0x22
 800a4f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a4f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d01b      	beq.n	800a532 <USB_ActivateEndpoint+0x34e>
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	4413      	add	r3, r2
 800a504:	881b      	ldrh	r3, [r3, #0]
 800a506:	b29b      	uxth	r3, r3
 800a508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a50c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a510:	843b      	strh	r3, [r7, #32]
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	441a      	add	r2, r3
 800a51c:	8c3b      	ldrh	r3, [r7, #32]
 800a51e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a526:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a52a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a52e:	b29b      	uxth	r3, r3
 800a530:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d124      	bne.n	800a584 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	4413      	add	r3, r2
 800a544:	881b      	ldrh	r3, [r3, #0]
 800a546:	b29b      	uxth	r3, r3
 800a548:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a54c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a550:	83bb      	strh	r3, [r7, #28]
 800a552:	8bbb      	ldrh	r3, [r7, #28]
 800a554:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a558:	83bb      	strh	r3, [r7, #28]
 800a55a:	8bbb      	ldrh	r3, [r7, #28]
 800a55c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a560:	83bb      	strh	r3, [r7, #28]
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	441a      	add	r2, r3
 800a56c:	8bbb      	ldrh	r3, [r7, #28]
 800a56e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a572:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a57a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a57e:	b29b      	uxth	r3, r3
 800a580:	8013      	strh	r3, [r2, #0]
 800a582:	e1ea      	b.n	800a95a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	4413      	add	r3, r2
 800a58e:	881b      	ldrh	r3, [r3, #0]
 800a590:	b29b      	uxth	r3, r3
 800a592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a59a:	83fb      	strh	r3, [r7, #30]
 800a59c:	8bfb      	ldrh	r3, [r7, #30]
 800a59e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a5a2:	83fb      	strh	r3, [r7, #30]
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	441a      	add	r2, r3
 800a5ae:	8bfb      	ldrh	r3, [r7, #30]
 800a5b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	8013      	strh	r3, [r2, #0]
 800a5c4:	e1c9      	b.n	800a95a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	78db      	ldrb	r3, [r3, #3]
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d11e      	bne.n	800a60c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	4413      	add	r3, r2
 800a5d8:	881b      	ldrh	r3, [r3, #0]
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5e4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	441a      	add	r2, r3
 800a5f2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a5f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a606:	b29b      	uxth	r3, r3
 800a608:	8013      	strh	r3, [r2, #0]
 800a60a:	e01d      	b.n	800a648 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	4413      	add	r3, r2
 800a616:	881b      	ldrh	r3, [r3, #0]
 800a618:	b29b      	uxth	r3, r3
 800a61a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a61e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a622:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	441a      	add	r2, r3
 800a630:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a63c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a644:	b29b      	uxth	r3, r3
 800a646:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a652:	b29b      	uxth	r3, r3
 800a654:	461a      	mov	r2, r3
 800a656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a658:	4413      	add	r3, r2
 800a65a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	00da      	lsls	r2, r3, #3
 800a662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a664:	4413      	add	r3, r2
 800a666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a66a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	891b      	ldrh	r3, [r3, #8]
 800a670:	085b      	lsrs	r3, r3, #1
 800a672:	b29b      	uxth	r3, r3
 800a674:	005b      	lsls	r3, r3, #1
 800a676:	b29a      	uxth	r2, r3
 800a678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a67a:	801a      	strh	r2, [r3, #0]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	657b      	str	r3, [r7, #84]	; 0x54
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a686:	b29b      	uxth	r3, r3
 800a688:	461a      	mov	r2, r3
 800a68a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a68c:	4413      	add	r3, r2
 800a68e:	657b      	str	r3, [r7, #84]	; 0x54
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	00da      	lsls	r2, r3, #3
 800a696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a698:	4413      	add	r3, r2
 800a69a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a69e:	653b      	str	r3, [r7, #80]	; 0x50
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	895b      	ldrh	r3, [r3, #10]
 800a6a4:	085b      	lsrs	r3, r3, #1
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	005b      	lsls	r3, r3, #1
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	785b      	ldrb	r3, [r3, #1]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f040 8093 	bne.w	800a7e0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	881b      	ldrh	r3, [r3, #0]
 800a6c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a6ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a6ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d01b      	beq.n	800a70e <USB_ActivateEndpoint+0x52a>
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	4413      	add	r3, r2
 800a6e0:	881b      	ldrh	r3, [r3, #0]
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	441a      	add	r2, r3
 800a6f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a6fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a702:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	4413      	add	r3, r2
 800a718:	881b      	ldrh	r3, [r3, #0]
 800a71a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a71c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a71e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a722:	2b00      	cmp	r3, #0
 800a724:	d01b      	beq.n	800a75e <USB_ActivateEndpoint+0x57a>
 800a726:	687a      	ldr	r2, [r7, #4]
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	009b      	lsls	r3, r3, #2
 800a72e:	4413      	add	r3, r2
 800a730:	881b      	ldrh	r3, [r3, #0]
 800a732:	b29b      	uxth	r3, r3
 800a734:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a73c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	441a      	add	r2, r3
 800a748:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a74a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a74e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a756:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	4413      	add	r3, r2
 800a768:	881b      	ldrh	r3, [r3, #0]
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a774:	873b      	strh	r3, [r7, #56]	; 0x38
 800a776:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a778:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a77c:	873b      	strh	r3, [r7, #56]	; 0x38
 800a77e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a780:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a784:	873b      	strh	r3, [r7, #56]	; 0x38
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	441a      	add	r2, r3
 800a790:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a79a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a79e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	4413      	add	r3, r2
 800a7b0:	881b      	ldrh	r3, [r3, #0]
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	441a      	add	r2, r3
 800a7c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a7ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	8013      	strh	r3, [r2, #0]
 800a7de:	e0bc      	b.n	800a95a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	4413      	add	r3, r2
 800a7ea:	881b      	ldrh	r3, [r3, #0]
 800a7ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a7f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a7f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d01d      	beq.n	800a838 <USB_ActivateEndpoint+0x654>
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	4413      	add	r3, r2
 800a806:	881b      	ldrh	r3, [r3, #0]
 800a808:	b29b      	uxth	r3, r3
 800a80a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a80e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a812:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	441a      	add	r2, r3
 800a820:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a82c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a834:	b29b      	uxth	r3, r3
 800a836:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	4413      	add	r3, r2
 800a842:	881b      	ldrh	r3, [r3, #0]
 800a844:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a848:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a84c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a850:	2b00      	cmp	r3, #0
 800a852:	d01d      	beq.n	800a890 <USB_ActivateEndpoint+0x6ac>
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	4413      	add	r3, r2
 800a85e:	881b      	ldrh	r3, [r3, #0]
 800a860:	b29b      	uxth	r3, r3
 800a862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a86a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	441a      	add	r2, r3
 800a878:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a87c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a888:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	78db      	ldrb	r3, [r3, #3]
 800a894:	2b01      	cmp	r3, #1
 800a896:	d024      	beq.n	800a8e2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	881b      	ldrh	r3, [r3, #0]
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a8b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a8b6:	f083 0320 	eor.w	r3, r3, #32
 800a8ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	009b      	lsls	r3, r3, #2
 800a8c6:	441a      	add	r2, r3
 800a8c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a8cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	8013      	strh	r3, [r2, #0]
 800a8e0:	e01d      	b.n	800a91e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	4413      	add	r3, r2
 800a8ec:	881b      	ldrh	r3, [r3, #0]
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	441a      	add	r2, r3
 800a906:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a90a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a90e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	4413      	add	r3, r2
 800a928:	881b      	ldrh	r3, [r3, #0]
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a934:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	441a      	add	r2, r3
 800a942:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a94a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a94e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a956:	b29b      	uxth	r3, r3
 800a958:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a95a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3774      	adds	r7, #116	; 0x74
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop

0800a96c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b08d      	sub	sp, #52	; 0x34
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	7b1b      	ldrb	r3, [r3, #12]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f040 808e 	bne.w	800aa9c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	785b      	ldrb	r3, [r3, #1]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d044      	beq.n	800aa12 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	4413      	add	r3, r2
 800a992:	881b      	ldrh	r3, [r3, #0]
 800a994:	81bb      	strh	r3, [r7, #12]
 800a996:	89bb      	ldrh	r3, [r7, #12]
 800a998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d01b      	beq.n	800a9d8 <USB_DeactivateEndpoint+0x6c>
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	4413      	add	r3, r2
 800a9aa:	881b      	ldrh	r3, [r3, #0]
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9b6:	817b      	strh	r3, [r7, #10]
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	441a      	add	r2, r3
 800a9c2:	897b      	ldrh	r3, [r7, #10]
 800a9c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4413      	add	r3, r2
 800a9e2:	881b      	ldrh	r3, [r3, #0]
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9ee:	813b      	strh	r3, [r7, #8]
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	441a      	add	r2, r3
 800a9fa:	893b      	ldrh	r3, [r7, #8]
 800a9fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	8013      	strh	r3, [r2, #0]
 800aa10:	e192      	b.n	800ad38 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	4413      	add	r3, r2
 800aa1c:	881b      	ldrh	r3, [r3, #0]
 800aa1e:	827b      	strh	r3, [r7, #18]
 800aa20:	8a7b      	ldrh	r3, [r7, #18]
 800aa22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d01b      	beq.n	800aa62 <USB_DeactivateEndpoint+0xf6>
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	4413      	add	r3, r2
 800aa34:	881b      	ldrh	r3, [r3, #0]
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa40:	823b      	strh	r3, [r7, #16]
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	441a      	add	r2, r3
 800aa4c:	8a3b      	ldrh	r3, [r7, #16]
 800aa4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	881b      	ldrh	r3, [r3, #0]
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa78:	81fb      	strh	r3, [r7, #14]
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	441a      	add	r2, r3
 800aa84:	89fb      	ldrh	r3, [r7, #14]
 800aa86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	8013      	strh	r3, [r2, #0]
 800aa9a:	e14d      	b.n	800ad38 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	785b      	ldrb	r3, [r3, #1]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f040 80a5 	bne.w	800abf0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	4413      	add	r3, r2
 800aab0:	881b      	ldrh	r3, [r3, #0]
 800aab2:	843b      	strh	r3, [r7, #32]
 800aab4:	8c3b      	ldrh	r3, [r7, #32]
 800aab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d01b      	beq.n	800aaf6 <USB_DeactivateEndpoint+0x18a>
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	4413      	add	r3, r2
 800aac8:	881b      	ldrh	r3, [r3, #0]
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aad4:	83fb      	strh	r3, [r7, #30]
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	441a      	add	r2, r3
 800aae0:	8bfb      	ldrh	r3, [r7, #30]
 800aae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aaee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4413      	add	r3, r2
 800ab00:	881b      	ldrh	r3, [r3, #0]
 800ab02:	83bb      	strh	r3, [r7, #28]
 800ab04:	8bbb      	ldrh	r3, [r7, #28]
 800ab06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d01b      	beq.n	800ab46 <USB_DeactivateEndpoint+0x1da>
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	4413      	add	r3, r2
 800ab18:	881b      	ldrh	r3, [r3, #0]
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab24:	837b      	strh	r3, [r7, #26]
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	441a      	add	r2, r3
 800ab30:	8b7b      	ldrh	r3, [r7, #26]
 800ab32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	4413      	add	r3, r2
 800ab50:	881b      	ldrh	r3, [r3, #0]
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab5c:	833b      	strh	r3, [r7, #24]
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	441a      	add	r2, r3
 800ab68:	8b3b      	ldrh	r3, [r7, #24]
 800ab6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	4413      	add	r3, r2
 800ab88:	881b      	ldrh	r3, [r3, #0]
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab94:	82fb      	strh	r3, [r7, #22]
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	441a      	add	r2, r3
 800aba0:	8afb      	ldrh	r3, [r7, #22]
 800aba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	4413      	add	r3, r2
 800abc0:	881b      	ldrh	r3, [r3, #0]
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abcc:	82bb      	strh	r3, [r7, #20]
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	441a      	add	r2, r3
 800abd8:	8abb      	ldrh	r3, [r7, #20]
 800abda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abea:	b29b      	uxth	r3, r3
 800abec:	8013      	strh	r3, [r2, #0]
 800abee:	e0a3      	b.n	800ad38 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	4413      	add	r3, r2
 800abfa:	881b      	ldrh	r3, [r3, #0]
 800abfc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800abfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ac00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d01b      	beq.n	800ac40 <USB_DeactivateEndpoint+0x2d4>
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4413      	add	r3, r2
 800ac12:	881b      	ldrh	r3, [r3, #0]
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac1e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	441a      	add	r2, r3
 800ac2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ac2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	4413      	add	r3, r2
 800ac4a:	881b      	ldrh	r3, [r3, #0]
 800ac4c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800ac4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ac50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d01b      	beq.n	800ac90 <USB_DeactivateEndpoint+0x324>
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	881b      	ldrh	r3, [r3, #0]
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac6e:	853b      	strh	r3, [r7, #40]	; 0x28
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	441a      	add	r2, r3
 800ac7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ac7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	4413      	add	r3, r2
 800ac9a:	881b      	ldrh	r3, [r3, #0]
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aca6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	441a      	add	r2, r3
 800acb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800acb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800acc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	4413      	add	r3, r2
 800acd2:	881b      	ldrh	r3, [r3, #0]
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acde:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	441a      	add	r2, r3
 800acea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	4413      	add	r3, r2
 800ad0a:	881b      	ldrh	r3, [r3, #0]
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad16:	847b      	strh	r3, [r7, #34]	; 0x22
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	441a      	add	r2, r3
 800ad22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3734      	adds	r7, #52	; 0x34
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr

0800ad46 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b0c2      	sub	sp, #264	; 0x108
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad54:	6018      	str	r0, [r3, #0]
 800ad56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad5e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ad60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	785b      	ldrb	r3, [r3, #1]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	f040 86b7 	bne.w	800bae0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ad72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	699a      	ldr	r2, [r3, #24]
 800ad7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	691b      	ldr	r3, [r3, #16]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d908      	bls.n	800ada0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800ad8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	691b      	ldr	r3, [r3, #16]
 800ad9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ad9e:	e007      	b.n	800adb0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800ada0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ada4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	699b      	ldr	r3, [r3, #24]
 800adac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800adb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	7b1b      	ldrb	r3, [r3, #12]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d13a      	bne.n	800ae36 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800adc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	6959      	ldr	r1, [r3, #20]
 800adcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800add0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	88da      	ldrh	r2, [r3, #6]
 800add8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800addc:	b29b      	uxth	r3, r3
 800adde:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ade2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ade6:	6800      	ldr	r0, [r0, #0]
 800ade8:	f001 fc98 	bl	800c71c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800adec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	613b      	str	r3, [r7, #16]
 800adf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	461a      	mov	r2, r3
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	613b      	str	r3, [r7, #16]
 800ae10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	00da      	lsls	r2, r3, #3
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	4413      	add	r3, r2
 800ae22:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ae26:	60fb      	str	r3, [r7, #12]
 800ae28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae2c:	b29a      	uxth	r2, r3
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	801a      	strh	r2, [r3, #0]
 800ae32:	f000 be1f 	b.w	800ba74 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800ae36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	78db      	ldrb	r3, [r3, #3]
 800ae42:	2b02      	cmp	r3, #2
 800ae44:	f040 8462 	bne.w	800b70c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ae48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	6a1a      	ldr	r2, [r3, #32]
 800ae54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	f240 83df 	bls.w	800b624 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ae66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	009b      	lsls	r3, r3, #2
 800ae7e:	4413      	add	r3, r2
 800ae80:	881b      	ldrh	r3, [r3, #0]
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae8c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800ae90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	009b      	lsls	r3, r3, #2
 800aea8:	441a      	add	r2, r3
 800aeaa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800aeae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aeb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aeb6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800aeba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800aec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	6a1a      	ldr	r2, [r3, #32]
 800aece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aed2:	1ad2      	subs	r2, r2, r3
 800aed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aee4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	4413      	add	r3, r2
 800aefa:	881b      	ldrh	r3, [r3, #0]
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af02:	2b00      	cmp	r3, #0
 800af04:	f000 81c7 	beq.w	800b296 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800af08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	633b      	str	r3, [r7, #48]	; 0x30
 800af14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	785b      	ldrb	r3, [r3, #1]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d177      	bne.n	800b014 <USB_EPStartXfer+0x2ce>
 800af24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800af30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af3e:	b29b      	uxth	r3, r3
 800af40:	461a      	mov	r2, r3
 800af42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af44:	4413      	add	r3, r2
 800af46:	62bb      	str	r3, [r7, #40]	; 0x28
 800af48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	00da      	lsls	r2, r3, #3
 800af56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af58:	4413      	add	r3, r2
 800af5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af5e:	627b      	str	r3, [r7, #36]	; 0x24
 800af60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af62:	881b      	ldrh	r3, [r3, #0]
 800af64:	b29b      	uxth	r3, r3
 800af66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af6a:	b29a      	uxth	r2, r3
 800af6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6e:	801a      	strh	r2, [r3, #0]
 800af70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af74:	2b3e      	cmp	r3, #62	; 0x3e
 800af76:	d921      	bls.n	800afbc <USB_EPStartXfer+0x276>
 800af78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af7c:	095b      	lsrs	r3, r3, #5
 800af7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800af82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af86:	f003 031f 	and.w	r3, r3, #31
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d104      	bne.n	800af98 <USB_EPStartXfer+0x252>
 800af8e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800af92:	3b01      	subs	r3, #1
 800af94:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800af98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9a:	881b      	ldrh	r3, [r3, #0]
 800af9c:	b29a      	uxth	r2, r3
 800af9e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	029b      	lsls	r3, r3, #10
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	4313      	orrs	r3, r2
 800afaa:	b29b      	uxth	r3, r3
 800afac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afb4:	b29a      	uxth	r2, r3
 800afb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb8:	801a      	strh	r2, [r3, #0]
 800afba:	e050      	b.n	800b05e <USB_EPStartXfer+0x318>
 800afbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d10a      	bne.n	800afda <USB_EPStartXfer+0x294>
 800afc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc6:	881b      	ldrh	r3, [r3, #0]
 800afc8:	b29b      	uxth	r3, r3
 800afca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afd2:	b29a      	uxth	r2, r3
 800afd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd6:	801a      	strh	r2, [r3, #0]
 800afd8:	e041      	b.n	800b05e <USB_EPStartXfer+0x318>
 800afda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afde:	085b      	lsrs	r3, r3, #1
 800afe0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800afe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afe8:	f003 0301 	and.w	r3, r3, #1
 800afec:	2b00      	cmp	r3, #0
 800afee:	d004      	beq.n	800affa <USB_EPStartXfer+0x2b4>
 800aff0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800aff4:	3301      	adds	r3, #1
 800aff6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800affa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affc:	881b      	ldrh	r3, [r3, #0]
 800affe:	b29a      	uxth	r2, r3
 800b000:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b004:	b29b      	uxth	r3, r3
 800b006:	029b      	lsls	r3, r3, #10
 800b008:	b29b      	uxth	r3, r3
 800b00a:	4313      	orrs	r3, r2
 800b00c:	b29a      	uxth	r2, r3
 800b00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b010:	801a      	strh	r2, [r3, #0]
 800b012:	e024      	b.n	800b05e <USB_EPStartXfer+0x318>
 800b014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	785b      	ldrb	r3, [r3, #1]
 800b020:	2b01      	cmp	r3, #1
 800b022:	d11c      	bne.n	800b05e <USB_EPStartXfer+0x318>
 800b024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b028:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b032:	b29b      	uxth	r3, r3
 800b034:	461a      	mov	r2, r3
 800b036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b038:	4413      	add	r3, r2
 800b03a:	633b      	str	r3, [r7, #48]	; 0x30
 800b03c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	00da      	lsls	r2, r3, #3
 800b04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04c:	4413      	add	r3, r2
 800b04e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b052:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b058:	b29a      	uxth	r2, r3
 800b05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b05e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	895b      	ldrh	r3, [r3, #10]
 800b06a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b06e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	6959      	ldr	r1, [r3, #20]
 800b07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b07e:	b29b      	uxth	r3, r3
 800b080:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b084:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b088:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b08c:	6800      	ldr	r0, [r0, #0]
 800b08e:	f001 fb45 	bl	800c71c <USB_WritePMA>
            ep->xfer_buff += len;
 800b092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	695a      	ldr	r2, [r3, #20]
 800b09e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0a2:	441a      	add	r2, r3
 800b0a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b0b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	6a1a      	ldr	r2, [r3, #32]
 800b0bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d90f      	bls.n	800b0ec <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b0cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	6a1a      	ldr	r2, [r3, #32]
 800b0d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0dc:	1ad2      	subs	r2, r2, r3
 800b0de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	621a      	str	r2, [r3, #32]
 800b0ea:	e00e      	b.n	800b10a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b0ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	6a1b      	ldr	r3, [r3, #32]
 800b0f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b0fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b100:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2200      	movs	r2, #0
 800b108:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b10a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b10e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	785b      	ldrb	r3, [r3, #1]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d177      	bne.n	800b20a <USB_EPStartXfer+0x4c4>
 800b11a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b11e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	61bb      	str	r3, [r7, #24]
 800b126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b12a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b134:	b29b      	uxth	r3, r3
 800b136:	461a      	mov	r2, r3
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	4413      	add	r3, r2
 800b13c:	61bb      	str	r3, [r7, #24]
 800b13e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	00da      	lsls	r2, r3, #3
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	4413      	add	r3, r2
 800b150:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b154:	617b      	str	r3, [r7, #20]
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	881b      	ldrh	r3, [r3, #0]
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b160:	b29a      	uxth	r2, r3
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	801a      	strh	r2, [r3, #0]
 800b166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b16a:	2b3e      	cmp	r3, #62	; 0x3e
 800b16c:	d921      	bls.n	800b1b2 <USB_EPStartXfer+0x46c>
 800b16e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b172:	095b      	lsrs	r3, r3, #5
 800b174:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b17c:	f003 031f 	and.w	r3, r3, #31
 800b180:	2b00      	cmp	r3, #0
 800b182:	d104      	bne.n	800b18e <USB_EPStartXfer+0x448>
 800b184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b188:	3b01      	subs	r3, #1
 800b18a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	881b      	ldrh	r3, [r3, #0]
 800b192:	b29a      	uxth	r2, r3
 800b194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b198:	b29b      	uxth	r3, r3
 800b19a:	029b      	lsls	r3, r3, #10
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1aa:	b29a      	uxth	r2, r3
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	801a      	strh	r2, [r3, #0]
 800b1b0:	e056      	b.n	800b260 <USB_EPStartXfer+0x51a>
 800b1b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10a      	bne.n	800b1d0 <USB_EPStartXfer+0x48a>
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	881b      	ldrh	r3, [r3, #0]
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1c8:	b29a      	uxth	r2, r3
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	801a      	strh	r2, [r3, #0]
 800b1ce:	e047      	b.n	800b260 <USB_EPStartXfer+0x51a>
 800b1d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1d4:	085b      	lsrs	r3, r3, #1
 800b1d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b1da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1de:	f003 0301 	and.w	r3, r3, #1
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d004      	beq.n	800b1f0 <USB_EPStartXfer+0x4aa>
 800b1e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	881b      	ldrh	r3, [r3, #0]
 800b1f4:	b29a      	uxth	r2, r3
 800b1f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	029b      	lsls	r3, r3, #10
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	4313      	orrs	r3, r2
 800b202:	b29a      	uxth	r2, r3
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	801a      	strh	r2, [r3, #0]
 800b208:	e02a      	b.n	800b260 <USB_EPStartXfer+0x51a>
 800b20a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b20e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	785b      	ldrb	r3, [r3, #1]
 800b216:	2b01      	cmp	r3, #1
 800b218:	d122      	bne.n	800b260 <USB_EPStartXfer+0x51a>
 800b21a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b21e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	623b      	str	r3, [r7, #32]
 800b226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b22a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b234:	b29b      	uxth	r3, r3
 800b236:	461a      	mov	r2, r3
 800b238:	6a3b      	ldr	r3, [r7, #32]
 800b23a:	4413      	add	r3, r2
 800b23c:	623b      	str	r3, [r7, #32]
 800b23e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	00da      	lsls	r2, r3, #3
 800b24c:	6a3b      	ldr	r3, [r7, #32]
 800b24e:	4413      	add	r3, r2
 800b250:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b254:	61fb      	str	r3, [r7, #28]
 800b256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b25a:	b29a      	uxth	r2, r3
 800b25c:	69fb      	ldr	r3, [r7, #28]
 800b25e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	891b      	ldrh	r3, [r3, #8]
 800b26c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	6959      	ldr	r1, [r3, #20]
 800b27c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b280:	b29b      	uxth	r3, r3
 800b282:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b286:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b28a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b28e:	6800      	ldr	r0, [r0, #0]
 800b290:	f001 fa44 	bl	800c71c <USB_WritePMA>
 800b294:	e3ee      	b.n	800ba74 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b29a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	785b      	ldrb	r3, [r3, #1]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d177      	bne.n	800b396 <USB_EPStartXfer+0x650>
 800b2a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2c6:	4413      	add	r3, r2
 800b2c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	00da      	lsls	r2, r3, #3
 800b2d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2da:	4413      	add	r3, r2
 800b2dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b2e0:	647b      	str	r3, [r7, #68]	; 0x44
 800b2e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2e4:	881b      	ldrh	r3, [r3, #0]
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2ec:	b29a      	uxth	r2, r3
 800b2ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2f0:	801a      	strh	r2, [r3, #0]
 800b2f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2f6:	2b3e      	cmp	r3, #62	; 0x3e
 800b2f8:	d921      	bls.n	800b33e <USB_EPStartXfer+0x5f8>
 800b2fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2fe:	095b      	lsrs	r3, r3, #5
 800b300:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b308:	f003 031f 	and.w	r3, r3, #31
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d104      	bne.n	800b31a <USB_EPStartXfer+0x5d4>
 800b310:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b314:	3b01      	subs	r3, #1
 800b316:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b31a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b31c:	881b      	ldrh	r3, [r3, #0]
 800b31e:	b29a      	uxth	r2, r3
 800b320:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b324:	b29b      	uxth	r3, r3
 800b326:	029b      	lsls	r3, r3, #10
 800b328:	b29b      	uxth	r3, r3
 800b32a:	4313      	orrs	r3, r2
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b336:	b29a      	uxth	r2, r3
 800b338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b33a:	801a      	strh	r2, [r3, #0]
 800b33c:	e056      	b.n	800b3ec <USB_EPStartXfer+0x6a6>
 800b33e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b342:	2b00      	cmp	r3, #0
 800b344:	d10a      	bne.n	800b35c <USB_EPStartXfer+0x616>
 800b346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b348:	881b      	ldrh	r3, [r3, #0]
 800b34a:	b29b      	uxth	r3, r3
 800b34c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b354:	b29a      	uxth	r2, r3
 800b356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b358:	801a      	strh	r2, [r3, #0]
 800b35a:	e047      	b.n	800b3ec <USB_EPStartXfer+0x6a6>
 800b35c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b360:	085b      	lsrs	r3, r3, #1
 800b362:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b36a:	f003 0301 	and.w	r3, r3, #1
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d004      	beq.n	800b37c <USB_EPStartXfer+0x636>
 800b372:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b376:	3301      	adds	r3, #1
 800b378:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b37c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b37e:	881b      	ldrh	r3, [r3, #0]
 800b380:	b29a      	uxth	r2, r3
 800b382:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b386:	b29b      	uxth	r3, r3
 800b388:	029b      	lsls	r3, r3, #10
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	4313      	orrs	r3, r2
 800b38e:	b29a      	uxth	r2, r3
 800b390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b392:	801a      	strh	r2, [r3, #0]
 800b394:	e02a      	b.n	800b3ec <USB_EPStartXfer+0x6a6>
 800b396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b39a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	785b      	ldrb	r3, [r3, #1]
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d122      	bne.n	800b3ec <USB_EPStartXfer+0x6a6>
 800b3a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	653b      	str	r3, [r7, #80]	; 0x50
 800b3b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3c6:	4413      	add	r3, r2
 800b3c8:	653b      	str	r3, [r7, #80]	; 0x50
 800b3ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	00da      	lsls	r2, r3, #3
 800b3d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3da:	4413      	add	r3, r2
 800b3dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b3e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3e6:	b29a      	uxth	r2, r3
 800b3e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b3ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	891b      	ldrh	r3, [r3, #8]
 800b3f8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b3fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	6959      	ldr	r1, [r3, #20]
 800b408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b412:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b416:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b41a:	6800      	ldr	r0, [r0, #0]
 800b41c:	f001 f97e 	bl	800c71c <USB_WritePMA>
            ep->xfer_buff += len;
 800b420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	695a      	ldr	r2, [r3, #20]
 800b42c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b430:	441a      	add	r2, r3
 800b432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b43e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	6a1a      	ldr	r2, [r3, #32]
 800b44a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b44e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	691b      	ldr	r3, [r3, #16]
 800b456:	429a      	cmp	r2, r3
 800b458:	d90f      	bls.n	800b47a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800b45a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b45e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	6a1a      	ldr	r2, [r3, #32]
 800b466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b46a:	1ad2      	subs	r2, r2, r3
 800b46c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	621a      	str	r2, [r3, #32]
 800b478:	e00e      	b.n	800b498 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800b47a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b47e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	6a1b      	ldr	r3, [r3, #32]
 800b486:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b48a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b48e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2200      	movs	r2, #0
 800b496:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b49c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	643b      	str	r3, [r7, #64]	; 0x40
 800b4a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	785b      	ldrb	r3, [r3, #1]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d177      	bne.n	800b5a4 <USB_EPStartXfer+0x85e>
 800b4b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d4:	4413      	add	r3, r2
 800b4d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	00da      	lsls	r2, r3, #3
 800b4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e8:	4413      	add	r3, r2
 800b4ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b4ee:	637b      	str	r3, [r7, #52]	; 0x34
 800b4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4f2:	881b      	ldrh	r3, [r3, #0]
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b4fa:	b29a      	uxth	r2, r3
 800b4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4fe:	801a      	strh	r2, [r3, #0]
 800b500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b504:	2b3e      	cmp	r3, #62	; 0x3e
 800b506:	d921      	bls.n	800b54c <USB_EPStartXfer+0x806>
 800b508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b50c:	095b      	lsrs	r3, r3, #5
 800b50e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b516:	f003 031f 	and.w	r3, r3, #31
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d104      	bne.n	800b528 <USB_EPStartXfer+0x7e2>
 800b51e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b522:	3b01      	subs	r3, #1
 800b524:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b52a:	881b      	ldrh	r3, [r3, #0]
 800b52c:	b29a      	uxth	r2, r3
 800b52e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b532:	b29b      	uxth	r3, r3
 800b534:	029b      	lsls	r3, r3, #10
 800b536:	b29b      	uxth	r3, r3
 800b538:	4313      	orrs	r3, r2
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b544:	b29a      	uxth	r2, r3
 800b546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b548:	801a      	strh	r2, [r3, #0]
 800b54a:	e050      	b.n	800b5ee <USB_EPStartXfer+0x8a8>
 800b54c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b550:	2b00      	cmp	r3, #0
 800b552:	d10a      	bne.n	800b56a <USB_EPStartXfer+0x824>
 800b554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b556:	881b      	ldrh	r3, [r3, #0]
 800b558:	b29b      	uxth	r3, r3
 800b55a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b55e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b562:	b29a      	uxth	r2, r3
 800b564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b566:	801a      	strh	r2, [r3, #0]
 800b568:	e041      	b.n	800b5ee <USB_EPStartXfer+0x8a8>
 800b56a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b56e:	085b      	lsrs	r3, r3, #1
 800b570:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b578:	f003 0301 	and.w	r3, r3, #1
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d004      	beq.n	800b58a <USB_EPStartXfer+0x844>
 800b580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b584:	3301      	adds	r3, #1
 800b586:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b58c:	881b      	ldrh	r3, [r3, #0]
 800b58e:	b29a      	uxth	r2, r3
 800b590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b594:	b29b      	uxth	r3, r3
 800b596:	029b      	lsls	r3, r3, #10
 800b598:	b29b      	uxth	r3, r3
 800b59a:	4313      	orrs	r3, r2
 800b59c:	b29a      	uxth	r2, r3
 800b59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5a0:	801a      	strh	r2, [r3, #0]
 800b5a2:	e024      	b.n	800b5ee <USB_EPStartXfer+0x8a8>
 800b5a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	785b      	ldrb	r3, [r3, #1]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d11c      	bne.n	800b5ee <USB_EPStartXfer+0x8a8>
 800b5b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5c2:	b29b      	uxth	r3, r3
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5c8:	4413      	add	r3, r2
 800b5ca:	643b      	str	r3, [r7, #64]	; 0x40
 800b5cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	00da      	lsls	r2, r3, #3
 800b5da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5dc:	4413      	add	r3, r2
 800b5de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b5ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	895b      	ldrh	r3, [r3, #10]
 800b5fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b5fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	6959      	ldr	r1, [r3, #20]
 800b60a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b60e:	b29b      	uxth	r3, r3
 800b610:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b614:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b618:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b61c:	6800      	ldr	r0, [r0, #0]
 800b61e:	f001 f87d 	bl	800c71c <USB_WritePMA>
 800b622:	e227      	b.n	800ba74 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	6a1b      	ldr	r3, [r3, #32]
 800b630:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b638:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	4413      	add	r3, r2
 800b64e:	881b      	ldrh	r3, [r3, #0]
 800b650:	b29b      	uxth	r3, r3
 800b652:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b65a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b65e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b662:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b66c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	441a      	add	r2, r3
 800b678:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b67c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b694:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b69c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6b0:	4413      	add	r3, r2
 800b6b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	00da      	lsls	r2, r3, #3
 800b6c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6c4:	4413      	add	r3, r2
 800b6c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b6ca:	65bb      	str	r3, [r7, #88]	; 0x58
 800b6cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d0:	b29a      	uxth	r2, r3
 800b6d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6d4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b6d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	891b      	ldrh	r3, [r3, #8]
 800b6e2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b6e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	6959      	ldr	r1, [r3, #20]
 800b6f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b6fc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b700:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b704:	6800      	ldr	r0, [r0, #0]
 800b706:	f001 f809 	bl	800c71c <USB_WritePMA>
 800b70a:	e1b3      	b.n	800ba74 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b70c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	6a1a      	ldr	r2, [r3, #32]
 800b718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b71c:	1ad2      	subs	r2, r2, r3
 800b71e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b72a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b72e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	4413      	add	r3, r2
 800b744:	881b      	ldrh	r3, [r3, #0]
 800b746:	b29b      	uxth	r3, r3
 800b748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	f000 80c6 	beq.w	800b8de <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b756:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	673b      	str	r3, [r7, #112]	; 0x70
 800b75e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	785b      	ldrb	r3, [r3, #1]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d177      	bne.n	800b85e <USB_EPStartXfer+0xb18>
 800b76e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b772:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	66bb      	str	r3, [r7, #104]	; 0x68
 800b77a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b77e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b788:	b29b      	uxth	r3, r3
 800b78a:	461a      	mov	r2, r3
 800b78c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b78e:	4413      	add	r3, r2
 800b790:	66bb      	str	r3, [r7, #104]	; 0x68
 800b792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	00da      	lsls	r2, r3, #3
 800b7a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b7a2:	4413      	add	r3, r2
 800b7a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b7a8:	667b      	str	r3, [r7, #100]	; 0x64
 800b7aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7ac:	881b      	ldrh	r3, [r3, #0]
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b7b4:	b29a      	uxth	r2, r3
 800b7b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7b8:	801a      	strh	r2, [r3, #0]
 800b7ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7be:	2b3e      	cmp	r3, #62	; 0x3e
 800b7c0:	d921      	bls.n	800b806 <USB_EPStartXfer+0xac0>
 800b7c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c6:	095b      	lsrs	r3, r3, #5
 800b7c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b7cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7d0:	f003 031f 	and.w	r3, r3, #31
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d104      	bne.n	800b7e2 <USB_EPStartXfer+0xa9c>
 800b7d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b7dc:	3b01      	subs	r3, #1
 800b7de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b7e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7e4:	881b      	ldrh	r3, [r3, #0]
 800b7e6:	b29a      	uxth	r2, r3
 800b7e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	029b      	lsls	r3, r3, #10
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7fe:	b29a      	uxth	r2, r3
 800b800:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b802:	801a      	strh	r2, [r3, #0]
 800b804:	e050      	b.n	800b8a8 <USB_EPStartXfer+0xb62>
 800b806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d10a      	bne.n	800b824 <USB_EPStartXfer+0xade>
 800b80e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b810:	881b      	ldrh	r3, [r3, #0]
 800b812:	b29b      	uxth	r3, r3
 800b814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b81c:	b29a      	uxth	r2, r3
 800b81e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b820:	801a      	strh	r2, [r3, #0]
 800b822:	e041      	b.n	800b8a8 <USB_EPStartXfer+0xb62>
 800b824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b828:	085b      	lsrs	r3, r3, #1
 800b82a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b82e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b832:	f003 0301 	and.w	r3, r3, #1
 800b836:	2b00      	cmp	r3, #0
 800b838:	d004      	beq.n	800b844 <USB_EPStartXfer+0xafe>
 800b83a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b83e:	3301      	adds	r3, #1
 800b840:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b846:	881b      	ldrh	r3, [r3, #0]
 800b848:	b29a      	uxth	r2, r3
 800b84a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b84e:	b29b      	uxth	r3, r3
 800b850:	029b      	lsls	r3, r3, #10
 800b852:	b29b      	uxth	r3, r3
 800b854:	4313      	orrs	r3, r2
 800b856:	b29a      	uxth	r2, r3
 800b858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b85a:	801a      	strh	r2, [r3, #0]
 800b85c:	e024      	b.n	800b8a8 <USB_EPStartXfer+0xb62>
 800b85e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b862:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	785b      	ldrb	r3, [r3, #1]
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d11c      	bne.n	800b8a8 <USB_EPStartXfer+0xb62>
 800b86e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b872:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	461a      	mov	r2, r3
 800b880:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b882:	4413      	add	r3, r2
 800b884:	673b      	str	r3, [r7, #112]	; 0x70
 800b886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b88a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	00da      	lsls	r2, r3, #3
 800b894:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b896:	4413      	add	r3, r2
 800b898:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b89c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b89e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a2:	b29a      	uxth	r2, r3
 800b8a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b8a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	895b      	ldrh	r3, [r3, #10]
 800b8b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b8b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	6959      	ldr	r1, [r3, #20]
 800b8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b8ce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b8d2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b8d6:	6800      	ldr	r0, [r0, #0]
 800b8d8:	f000 ff20 	bl	800c71c <USB_WritePMA>
 800b8dc:	e0ca      	b.n	800ba74 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b8de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	785b      	ldrb	r3, [r3, #1]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d177      	bne.n	800b9de <USB_EPStartXfer+0xc98>
 800b8ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b8fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b908:	b29b      	uxth	r3, r3
 800b90a:	461a      	mov	r2, r3
 800b90c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b90e:	4413      	add	r3, r2
 800b910:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	00da      	lsls	r2, r3, #3
 800b920:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b922:	4413      	add	r3, r2
 800b924:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b928:	67bb      	str	r3, [r7, #120]	; 0x78
 800b92a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b92c:	881b      	ldrh	r3, [r3, #0]
 800b92e:	b29b      	uxth	r3, r3
 800b930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b934:	b29a      	uxth	r2, r3
 800b936:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b938:	801a      	strh	r2, [r3, #0]
 800b93a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b93e:	2b3e      	cmp	r3, #62	; 0x3e
 800b940:	d921      	bls.n	800b986 <USB_EPStartXfer+0xc40>
 800b942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b946:	095b      	lsrs	r3, r3, #5
 800b948:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b94c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b950:	f003 031f 	and.w	r3, r3, #31
 800b954:	2b00      	cmp	r3, #0
 800b956:	d104      	bne.n	800b962 <USB_EPStartXfer+0xc1c>
 800b958:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b95c:	3b01      	subs	r3, #1
 800b95e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b962:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b964:	881b      	ldrh	r3, [r3, #0]
 800b966:	b29a      	uxth	r2, r3
 800b968:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	029b      	lsls	r3, r3, #10
 800b970:	b29b      	uxth	r3, r3
 800b972:	4313      	orrs	r3, r2
 800b974:	b29b      	uxth	r3, r3
 800b976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b97a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b97e:	b29a      	uxth	r2, r3
 800b980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b982:	801a      	strh	r2, [r3, #0]
 800b984:	e05c      	b.n	800ba40 <USB_EPStartXfer+0xcfa>
 800b986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d10a      	bne.n	800b9a4 <USB_EPStartXfer+0xc5e>
 800b98e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b990:	881b      	ldrh	r3, [r3, #0]
 800b992:	b29b      	uxth	r3, r3
 800b994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b99c:	b29a      	uxth	r2, r3
 800b99e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9a0:	801a      	strh	r2, [r3, #0]
 800b9a2:	e04d      	b.n	800ba40 <USB_EPStartXfer+0xcfa>
 800b9a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a8:	085b      	lsrs	r3, r3, #1
 800b9aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b9ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9b2:	f003 0301 	and.w	r3, r3, #1
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d004      	beq.n	800b9c4 <USB_EPStartXfer+0xc7e>
 800b9ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b9be:	3301      	adds	r3, #1
 800b9c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b9c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9c6:	881b      	ldrh	r3, [r3, #0]
 800b9c8:	b29a      	uxth	r2, r3
 800b9ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	029b      	lsls	r3, r3, #10
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9da:	801a      	strh	r2, [r3, #0]
 800b9dc:	e030      	b.n	800ba40 <USB_EPStartXfer+0xcfa>
 800b9de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	785b      	ldrb	r3, [r3, #1]
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d128      	bne.n	800ba40 <USB_EPStartXfer+0xcfa>
 800b9ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b9fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba12:	4413      	add	r3, r2
 800ba14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	00da      	lsls	r2, r3, #3
 800ba26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba2a:	4413      	add	r3, r2
 800ba2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ba30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba38:	b29a      	uxth	r2, r3
 800ba3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ba3e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ba40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	891b      	ldrh	r3, [r3, #8]
 800ba4c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ba50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	6959      	ldr	r1, [r3, #20]
 800ba5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ba66:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ba6a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ba6e:	6800      	ldr	r0, [r0, #0]
 800ba70:	f000 fe54 	bl	800c71c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ba74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	4413      	add	r3, r2
 800ba8e:	881b      	ldrh	r3, [r3, #0]
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba9a:	817b      	strh	r3, [r7, #10]
 800ba9c:	897b      	ldrh	r3, [r7, #10]
 800ba9e:	f083 0310 	eor.w	r3, r3, #16
 800baa2:	817b      	strh	r3, [r7, #10]
 800baa4:	897b      	ldrh	r3, [r7, #10]
 800baa6:	f083 0320 	eor.w	r3, r3, #32
 800baaa:	817b      	strh	r3, [r7, #10]
 800baac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bab0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	441a      	add	r2, r3
 800bac6:	897b      	ldrh	r3, [r7, #10]
 800bac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bacc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bad8:	b29b      	uxth	r3, r3
 800bada:	8013      	strh	r3, [r2, #0]
 800badc:	f000 bcde 	b.w	800c49c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	7b1b      	ldrb	r3, [r3, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	f040 80bb 	bne.w	800bc68 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800baf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	699a      	ldr	r2, [r3, #24]
 800bafe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	691b      	ldr	r3, [r3, #16]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d917      	bls.n	800bb3e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800bb0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	691b      	ldr	r3, [r3, #16]
 800bb1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800bb1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	699a      	ldr	r2, [r3, #24]
 800bb2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb2e:	1ad2      	subs	r2, r2, r3
 800bb30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	619a      	str	r2, [r3, #24]
 800bb3c:	e00e      	b.n	800bb5c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800bb3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	699b      	ldr	r3, [r3, #24]
 800bb4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800bb4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bb5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bb6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bb80:	4413      	add	r3, r2
 800bb82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bb86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	00da      	lsls	r2, r3, #3
 800bb94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bb98:	4413      	add	r3, r2
 800bb9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bb9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bba6:	881b      	ldrh	r3, [r3, #0]
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bbae:	b29a      	uxth	r2, r3
 800bbb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbb4:	801a      	strh	r2, [r3, #0]
 800bbb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbba:	2b3e      	cmp	r3, #62	; 0x3e
 800bbbc:	d924      	bls.n	800bc08 <USB_EPStartXfer+0xec2>
 800bbbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbc2:	095b      	lsrs	r3, r3, #5
 800bbc4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bbc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbcc:	f003 031f 	and.w	r3, r3, #31
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d104      	bne.n	800bbde <USB_EPStartXfer+0xe98>
 800bbd4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bbde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbe2:	881b      	ldrh	r3, [r3, #0]
 800bbe4:	b29a      	uxth	r2, r3
 800bbe6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bbea:	b29b      	uxth	r3, r3
 800bbec:	029b      	lsls	r3, r3, #10
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbfc:	b29a      	uxth	r2, r3
 800bbfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc02:	801a      	strh	r2, [r3, #0]
 800bc04:	f000 bc10 	b.w	800c428 <USB_EPStartXfer+0x16e2>
 800bc08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d10c      	bne.n	800bc2a <USB_EPStartXfer+0xee4>
 800bc10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc14:	881b      	ldrh	r3, [r3, #0]
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc20:	b29a      	uxth	r2, r3
 800bc22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc26:	801a      	strh	r2, [r3, #0]
 800bc28:	e3fe      	b.n	800c428 <USB_EPStartXfer+0x16e2>
 800bc2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc2e:	085b      	lsrs	r3, r3, #1
 800bc30:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bc34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc38:	f003 0301 	and.w	r3, r3, #1
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d004      	beq.n	800bc4a <USB_EPStartXfer+0xf04>
 800bc40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc44:	3301      	adds	r3, #1
 800bc46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bc4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc4e:	881b      	ldrh	r3, [r3, #0]
 800bc50:	b29a      	uxth	r2, r3
 800bc52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	029b      	lsls	r3, r3, #10
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	b29a      	uxth	r2, r3
 800bc60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc64:	801a      	strh	r2, [r3, #0]
 800bc66:	e3df      	b.n	800c428 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800bc68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	78db      	ldrb	r3, [r3, #3]
 800bc74:	2b02      	cmp	r3, #2
 800bc76:	f040 8218 	bne.w	800c0aa <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bc7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	785b      	ldrb	r3, [r3, #1]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	f040 809d 	bne.w	800bdc6 <USB_EPStartXfer+0x1080>
 800bc8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bc9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	461a      	mov	r2, r3
 800bcac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bcb0:	4413      	add	r3, r2
 800bcb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bcb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	00da      	lsls	r2, r3, #3
 800bcc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bcc8:	4413      	add	r3, r2
 800bcca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bcce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bcd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bcd6:	881b      	ldrh	r3, [r3, #0]
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bcde:	b29a      	uxth	r2, r3
 800bce0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bce4:	801a      	strh	r2, [r3, #0]
 800bce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	691b      	ldr	r3, [r3, #16]
 800bcf2:	2b3e      	cmp	r3, #62	; 0x3e
 800bcf4:	d92b      	bls.n	800bd4e <USB_EPStartXfer+0x1008>
 800bcf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	691b      	ldr	r3, [r3, #16]
 800bd02:	095b      	lsrs	r3, r3, #5
 800bd04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bd08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	691b      	ldr	r3, [r3, #16]
 800bd14:	f003 031f 	and.w	r3, r3, #31
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d104      	bne.n	800bd26 <USB_EPStartXfer+0xfe0>
 800bd1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd20:	3b01      	subs	r3, #1
 800bd22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bd26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bd2a:	881b      	ldrh	r3, [r3, #0]
 800bd2c:	b29a      	uxth	r2, r3
 800bd2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	029b      	lsls	r3, r3, #10
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd44:	b29a      	uxth	r2, r3
 800bd46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bd4a:	801a      	strh	r2, [r3, #0]
 800bd4c:	e070      	b.n	800be30 <USB_EPStartXfer+0x10ea>
 800bd4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	691b      	ldr	r3, [r3, #16]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d10c      	bne.n	800bd78 <USB_EPStartXfer+0x1032>
 800bd5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bd62:	881b      	ldrh	r3, [r3, #0]
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd6e:	b29a      	uxth	r2, r3
 800bd70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bd74:	801a      	strh	r2, [r3, #0]
 800bd76:	e05b      	b.n	800be30 <USB_EPStartXfer+0x10ea>
 800bd78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	691b      	ldr	r3, [r3, #16]
 800bd84:	085b      	lsrs	r3, r3, #1
 800bd86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bd8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	691b      	ldr	r3, [r3, #16]
 800bd96:	f003 0301 	and.w	r3, r3, #1
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d004      	beq.n	800bda8 <USB_EPStartXfer+0x1062>
 800bd9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bda2:	3301      	adds	r3, #1
 800bda4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bda8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bdac:	881b      	ldrh	r3, [r3, #0]
 800bdae:	b29a      	uxth	r2, r3
 800bdb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	029b      	lsls	r3, r3, #10
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	b29a      	uxth	r2, r3
 800bdbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bdc2:	801a      	strh	r2, [r3, #0]
 800bdc4:	e034      	b.n	800be30 <USB_EPStartXfer+0x10ea>
 800bdc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	785b      	ldrb	r3, [r3, #1]
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d12c      	bne.n	800be30 <USB_EPStartXfer+0x10ea>
 800bdd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bde4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bde8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bdfa:	4413      	add	r3, r2
 800bdfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	00da      	lsls	r2, r3, #3
 800be0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800be12:	4413      	add	r3, r2
 800be14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800be18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	691b      	ldr	r3, [r3, #16]
 800be28:	b29a      	uxth	r2, r3
 800be2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800be2e:	801a      	strh	r2, [r3, #0]
 800be30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800be3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	785b      	ldrb	r3, [r3, #1]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	f040 809d 	bne.w	800bf8a <USB_EPStartXfer+0x1244>
 800be50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800be5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	461a      	mov	r2, r3
 800be70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be74:	4413      	add	r3, r2
 800be76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800be7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	00da      	lsls	r2, r3, #3
 800be88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be8c:	4413      	add	r3, r2
 800be8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800be92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800be96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800be9a:	881b      	ldrh	r3, [r3, #0]
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bea2:	b29a      	uxth	r2, r3
 800bea4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bea8:	801a      	strh	r2, [r3, #0]
 800beaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800beae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	691b      	ldr	r3, [r3, #16]
 800beb6:	2b3e      	cmp	r3, #62	; 0x3e
 800beb8:	d92b      	bls.n	800bf12 <USB_EPStartXfer+0x11cc>
 800beba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	691b      	ldr	r3, [r3, #16]
 800bec6:	095b      	lsrs	r3, r3, #5
 800bec8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800becc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	691b      	ldr	r3, [r3, #16]
 800bed8:	f003 031f 	and.w	r3, r3, #31
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d104      	bne.n	800beea <USB_EPStartXfer+0x11a4>
 800bee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bee4:	3b01      	subs	r3, #1
 800bee6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800beea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800beee:	881b      	ldrh	r3, [r3, #0]
 800bef0:	b29a      	uxth	r2, r3
 800bef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	029b      	lsls	r3, r3, #10
 800befa:	b29b      	uxth	r3, r3
 800befc:	4313      	orrs	r3, r2
 800befe:	b29b      	uxth	r3, r3
 800bf00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf08:	b29a      	uxth	r2, r3
 800bf0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf0e:	801a      	strh	r2, [r3, #0]
 800bf10:	e069      	b.n	800bfe6 <USB_EPStartXfer+0x12a0>
 800bf12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	691b      	ldr	r3, [r3, #16]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d10c      	bne.n	800bf3c <USB_EPStartXfer+0x11f6>
 800bf22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf26:	881b      	ldrh	r3, [r3, #0]
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf32:	b29a      	uxth	r2, r3
 800bf34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf38:	801a      	strh	r2, [r3, #0]
 800bf3a:	e054      	b.n	800bfe6 <USB_EPStartXfer+0x12a0>
 800bf3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	691b      	ldr	r3, [r3, #16]
 800bf48:	085b      	lsrs	r3, r3, #1
 800bf4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bf4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	691b      	ldr	r3, [r3, #16]
 800bf5a:	f003 0301 	and.w	r3, r3, #1
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d004      	beq.n	800bf6c <USB_EPStartXfer+0x1226>
 800bf62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf66:	3301      	adds	r3, #1
 800bf68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bf6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf70:	881b      	ldrh	r3, [r3, #0]
 800bf72:	b29a      	uxth	r2, r3
 800bf74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	029b      	lsls	r3, r3, #10
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	b29a      	uxth	r2, r3
 800bf82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf86:	801a      	strh	r2, [r3, #0]
 800bf88:	e02d      	b.n	800bfe6 <USB_EPStartXfer+0x12a0>
 800bf8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	785b      	ldrb	r3, [r3, #1]
 800bf96:	2b01      	cmp	r3, #1
 800bf98:	d125      	bne.n	800bfe6 <USB_EPStartXfer+0x12a0>
 800bf9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfa8:	b29b      	uxth	r3, r3
 800bfaa:	461a      	mov	r2, r3
 800bfac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bfb0:	4413      	add	r3, r2
 800bfb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bfb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	00da      	lsls	r2, r3, #3
 800bfc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bfc8:	4413      	add	r3, r2
 800bfca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bfce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bfd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	691b      	ldr	r3, [r3, #16]
 800bfde:	b29a      	uxth	r2, r3
 800bfe0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bfe4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800bfe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	69db      	ldr	r3, [r3, #28]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	f000 8218 	beq.w	800c428 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bffc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	4413      	add	r3, r2
 800c012:	881b      	ldrh	r3, [r3, #0]
 800c014:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c018:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c01c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c020:	2b00      	cmp	r3, #0
 800c022:	d005      	beq.n	800c030 <USB_EPStartXfer+0x12ea>
 800c024:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d10d      	bne.n	800c04c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c030:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c038:	2b00      	cmp	r3, #0
 800c03a:	f040 81f5 	bne.w	800c428 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c03e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c046:	2b00      	cmp	r3, #0
 800c048:	f040 81ee 	bne.w	800c428 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c04c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c050:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c05a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	781b      	ldrb	r3, [r3, #0]
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	4413      	add	r3, r2
 800c066:	881b      	ldrh	r3, [r3, #0]
 800c068:	b29b      	uxth	r3, r3
 800c06a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c06e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c072:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c07a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	781b      	ldrb	r3, [r3, #0]
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	441a      	add	r2, r3
 800c090:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c09c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	8013      	strh	r3, [r2, #0]
 800c0a8:	e1be      	b.n	800c428 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c0aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	78db      	ldrb	r3, [r3, #3]
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	f040 81b4 	bne.w	800c424 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c0bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	699a      	ldr	r2, [r3, #24]
 800c0c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	691b      	ldr	r3, [r3, #16]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d917      	bls.n	800c108 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c0d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	691b      	ldr	r3, [r3, #16]
 800c0e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c0e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	699a      	ldr	r2, [r3, #24]
 800c0f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0f8:	1ad2      	subs	r2, r2, r3
 800c0fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	619a      	str	r2, [r3, #24]
 800c106:	e00e      	b.n	800c126 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c10c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	699b      	ldr	r3, [r3, #24]
 800c114:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800c118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c11c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2200      	movs	r2, #0
 800c124:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c12a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	785b      	ldrb	r3, [r3, #1]
 800c132:	2b00      	cmp	r3, #0
 800c134:	f040 8085 	bne.w	800c242 <USB_EPStartXfer+0x14fc>
 800c138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c13c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c14a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c154:	b29b      	uxth	r3, r3
 800c156:	461a      	mov	r2, r3
 800c158:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c15c:	4413      	add	r3, r2
 800c15e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	00da      	lsls	r2, r3, #3
 800c170:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c174:	4413      	add	r3, r2
 800c176:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c17a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c17e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c182:	881b      	ldrh	r3, [r3, #0]
 800c184:	b29b      	uxth	r3, r3
 800c186:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c18a:	b29a      	uxth	r2, r3
 800c18c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c190:	801a      	strh	r2, [r3, #0]
 800c192:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c196:	2b3e      	cmp	r3, #62	; 0x3e
 800c198:	d923      	bls.n	800c1e2 <USB_EPStartXfer+0x149c>
 800c19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c19e:	095b      	lsrs	r3, r3, #5
 800c1a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1a8:	f003 031f 	and.w	r3, r3, #31
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d104      	bne.n	800c1ba <USB_EPStartXfer+0x1474>
 800c1b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c1ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c1be:	881b      	ldrh	r3, [r3, #0]
 800c1c0:	b29a      	uxth	r2, r3
 800c1c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	029b      	lsls	r3, r3, #10
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	4313      	orrs	r3, r2
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1d8:	b29a      	uxth	r2, r3
 800c1da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c1de:	801a      	strh	r2, [r3, #0]
 800c1e0:	e060      	b.n	800c2a4 <USB_EPStartXfer+0x155e>
 800c1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d10c      	bne.n	800c204 <USB_EPStartXfer+0x14be>
 800c1ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c1ee:	881b      	ldrh	r3, [r3, #0]
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1fa:	b29a      	uxth	r2, r3
 800c1fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c200:	801a      	strh	r2, [r3, #0]
 800c202:	e04f      	b.n	800c2a4 <USB_EPStartXfer+0x155e>
 800c204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c208:	085b      	lsrs	r3, r3, #1
 800c20a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c20e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c212:	f003 0301 	and.w	r3, r3, #1
 800c216:	2b00      	cmp	r3, #0
 800c218:	d004      	beq.n	800c224 <USB_EPStartXfer+0x14de>
 800c21a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c21e:	3301      	adds	r3, #1
 800c220:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c224:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c228:	881b      	ldrh	r3, [r3, #0]
 800c22a:	b29a      	uxth	r2, r3
 800c22c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c230:	b29b      	uxth	r3, r3
 800c232:	029b      	lsls	r3, r3, #10
 800c234:	b29b      	uxth	r3, r3
 800c236:	4313      	orrs	r3, r2
 800c238:	b29a      	uxth	r2, r3
 800c23a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c23e:	801a      	strh	r2, [r3, #0]
 800c240:	e030      	b.n	800c2a4 <USB_EPStartXfer+0x155e>
 800c242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	785b      	ldrb	r3, [r3, #1]
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d128      	bne.n	800c2a4 <USB_EPStartXfer+0x155e>
 800c252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c256:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c264:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c26e:	b29b      	uxth	r3, r3
 800c270:	461a      	mov	r2, r3
 800c272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c276:	4413      	add	r3, r2
 800c278:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c27c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	00da      	lsls	r2, r3, #3
 800c28a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c28e:	4413      	add	r3, r2
 800c290:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c29c:	b29a      	uxth	r2, r3
 800c29e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c2a2:	801a      	strh	r2, [r3, #0]
 800c2a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c2b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	785b      	ldrb	r3, [r3, #1]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	f040 8085 	bne.w	800c3ce <USB_EPStartXfer+0x1688>
 800c2c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c2d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c2e8:	4413      	add	r3, r2
 800c2ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c2ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	00da      	lsls	r2, r3, #3
 800c2fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c300:	4413      	add	r3, r2
 800c302:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c306:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c30a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c30e:	881b      	ldrh	r3, [r3, #0]
 800c310:	b29b      	uxth	r3, r3
 800c312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c316:	b29a      	uxth	r2, r3
 800c318:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c31c:	801a      	strh	r2, [r3, #0]
 800c31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c322:	2b3e      	cmp	r3, #62	; 0x3e
 800c324:	d923      	bls.n	800c36e <USB_EPStartXfer+0x1628>
 800c326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c32a:	095b      	lsrs	r3, r3, #5
 800c32c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c334:	f003 031f 	and.w	r3, r3, #31
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d104      	bne.n	800c346 <USB_EPStartXfer+0x1600>
 800c33c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c340:	3b01      	subs	r3, #1
 800c342:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c346:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c34a:	881b      	ldrh	r3, [r3, #0]
 800c34c:	b29a      	uxth	r2, r3
 800c34e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c352:	b29b      	uxth	r3, r3
 800c354:	029b      	lsls	r3, r3, #10
 800c356:	b29b      	uxth	r3, r3
 800c358:	4313      	orrs	r3, r2
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c364:	b29a      	uxth	r2, r3
 800c366:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c36a:	801a      	strh	r2, [r3, #0]
 800c36c:	e05c      	b.n	800c428 <USB_EPStartXfer+0x16e2>
 800c36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c372:	2b00      	cmp	r3, #0
 800c374:	d10c      	bne.n	800c390 <USB_EPStartXfer+0x164a>
 800c376:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c37a:	881b      	ldrh	r3, [r3, #0]
 800c37c:	b29b      	uxth	r3, r3
 800c37e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c386:	b29a      	uxth	r2, r3
 800c388:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c38c:	801a      	strh	r2, [r3, #0]
 800c38e:	e04b      	b.n	800c428 <USB_EPStartXfer+0x16e2>
 800c390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c394:	085b      	lsrs	r3, r3, #1
 800c396:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c39a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c39e:	f003 0301 	and.w	r3, r3, #1
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d004      	beq.n	800c3b0 <USB_EPStartXfer+0x166a>
 800c3a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c3b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c3b4:	881b      	ldrh	r3, [r3, #0]
 800c3b6:	b29a      	uxth	r2, r3
 800c3b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	029b      	lsls	r3, r3, #10
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	b29a      	uxth	r2, r3
 800c3c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c3ca:	801a      	strh	r2, [r3, #0]
 800c3cc:	e02c      	b.n	800c428 <USB_EPStartXfer+0x16e2>
 800c3ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	785b      	ldrb	r3, [r3, #1]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d124      	bne.n	800c428 <USB_EPStartXfer+0x16e2>
 800c3de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c3f4:	4413      	add	r3, r2
 800c3f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c3fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	00da      	lsls	r2, r3, #3
 800c408:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c40c:	4413      	add	r3, r2
 800c40e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c412:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c41a:	b29a      	uxth	r2, r3
 800c41c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c420:	801a      	strh	r2, [r3, #0]
 800c422:	e001      	b.n	800c428 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800c424:	2301      	movs	r3, #1
 800c426:	e03a      	b.n	800c49e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c42c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c430:	681a      	ldr	r2, [r3, #0]
 800c432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	4413      	add	r3, r2
 800c442:	881b      	ldrh	r3, [r3, #0]
 800c444:	b29b      	uxth	r3, r3
 800c446:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c44a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c44e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c452:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c456:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c45a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c45e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c462:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c466:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c46a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c46e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	781b      	ldrb	r3, [r3, #0]
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	441a      	add	r2, r3
 800c484:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c48c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c498:	b29b      	uxth	r3, r3
 800c49a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c49c:	2300      	movs	r3, #0
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b085      	sub	sp, #20
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	785b      	ldrb	r3, [r3, #1]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d020      	beq.n	800c4fc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c4ba:	687a      	ldr	r2, [r7, #4]
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	4413      	add	r3, r2
 800c4c4:	881b      	ldrh	r3, [r3, #0]
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4d0:	81bb      	strh	r3, [r7, #12]
 800c4d2:	89bb      	ldrh	r3, [r7, #12]
 800c4d4:	f083 0310 	eor.w	r3, r3, #16
 800c4d8:	81bb      	strh	r3, [r7, #12]
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	009b      	lsls	r3, r3, #2
 800c4e2:	441a      	add	r2, r3
 800c4e4:	89bb      	ldrh	r3, [r7, #12]
 800c4e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	8013      	strh	r3, [r2, #0]
 800c4fa:	e01f      	b.n	800c53c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	4413      	add	r3, r2
 800c506:	881b      	ldrh	r3, [r3, #0]
 800c508:	b29b      	uxth	r3, r3
 800c50a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c50e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c512:	81fb      	strh	r3, [r7, #14]
 800c514:	89fb      	ldrh	r3, [r7, #14]
 800c516:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c51a:	81fb      	strh	r3, [r7, #14]
 800c51c:	687a      	ldr	r2, [r7, #4]
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	009b      	lsls	r3, r3, #2
 800c524:	441a      	add	r2, r3
 800c526:	89fb      	ldrh	r3, [r7, #14]
 800c528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c52c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c538:	b29b      	uxth	r3, r3
 800c53a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c53c:	2300      	movs	r3, #0
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3714      	adds	r7, #20
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr

0800c54a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c54a:	b480      	push	{r7}
 800c54c:	b087      	sub	sp, #28
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
 800c552:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	7b1b      	ldrb	r3, [r3, #12]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	f040 809d 	bne.w	800c698 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	785b      	ldrb	r3, [r3, #1]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d04c      	beq.n	800c600 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	4413      	add	r3, r2
 800c570:	881b      	ldrh	r3, [r3, #0]
 800c572:	823b      	strh	r3, [r7, #16]
 800c574:	8a3b      	ldrh	r3, [r7, #16]
 800c576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d01b      	beq.n	800c5b6 <USB_EPClearStall+0x6c>
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	4413      	add	r3, r2
 800c588:	881b      	ldrh	r3, [r3, #0]
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c594:	81fb      	strh	r3, [r7, #14]
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	009b      	lsls	r3, r3, #2
 800c59e:	441a      	add	r2, r3
 800c5a0:	89fb      	ldrh	r3, [r7, #14]
 800c5a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	78db      	ldrb	r3, [r3, #3]
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d06c      	beq.n	800c698 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	009b      	lsls	r3, r3, #2
 800c5c6:	4413      	add	r3, r2
 800c5c8:	881b      	ldrh	r3, [r3, #0]
 800c5ca:	b29b      	uxth	r3, r3
 800c5cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5d4:	81bb      	strh	r3, [r7, #12]
 800c5d6:	89bb      	ldrh	r3, [r7, #12]
 800c5d8:	f083 0320 	eor.w	r3, r3, #32
 800c5dc:	81bb      	strh	r3, [r7, #12]
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	009b      	lsls	r3, r3, #2
 800c5e6:	441a      	add	r2, r3
 800c5e8:	89bb      	ldrh	r3, [r7, #12]
 800c5ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	8013      	strh	r3, [r2, #0]
 800c5fe:	e04b      	b.n	800c698 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	009b      	lsls	r3, r3, #2
 800c608:	4413      	add	r3, r2
 800c60a:	881b      	ldrh	r3, [r3, #0]
 800c60c:	82fb      	strh	r3, [r7, #22]
 800c60e:	8afb      	ldrh	r3, [r7, #22]
 800c610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c614:	2b00      	cmp	r3, #0
 800c616:	d01b      	beq.n	800c650 <USB_EPClearStall+0x106>
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	4413      	add	r3, r2
 800c622:	881b      	ldrh	r3, [r3, #0]
 800c624:	b29b      	uxth	r3, r3
 800c626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c62a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c62e:	82bb      	strh	r3, [r7, #20]
 800c630:	687a      	ldr	r2, [r7, #4]
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	009b      	lsls	r3, r3, #2
 800c638:	441a      	add	r2, r3
 800c63a:	8abb      	ldrh	r3, [r7, #20]
 800c63c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c644:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c64c:	b29b      	uxth	r3, r3
 800c64e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	4413      	add	r3, r2
 800c65a:	881b      	ldrh	r3, [r3, #0]
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c666:	827b      	strh	r3, [r7, #18]
 800c668:	8a7b      	ldrh	r3, [r7, #18]
 800c66a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c66e:	827b      	strh	r3, [r7, #18]
 800c670:	8a7b      	ldrh	r3, [r7, #18]
 800c672:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c676:	827b      	strh	r3, [r7, #18]
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	009b      	lsls	r3, r3, #2
 800c680:	441a      	add	r2, r3
 800c682:	8a7b      	ldrh	r3, [r7, #18]
 800c684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c68c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c694:	b29b      	uxth	r3, r3
 800c696:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c698:	2300      	movs	r3, #0
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	371c      	adds	r7, #28
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr

0800c6a6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c6a6:	b480      	push	{r7}
 800c6a8:	b083      	sub	sp, #12
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	6078      	str	r0, [r7, #4]
 800c6ae:	460b      	mov	r3, r1
 800c6b0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c6b2:	78fb      	ldrb	r3, [r7, #3]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d103      	bne.n	800c6c0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2280      	movs	r2, #128	; 0x80
 800c6bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c6c0:	2300      	movs	r3, #0
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	370c      	adds	r7, #12
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr

0800c6ce <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c6ce:	b480      	push	{r7}
 800c6d0:	b083      	sub	sp, #12
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c6dc:	b29b      	uxth	r3, r3
 800c6de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6e6:	b29a      	uxth	r2, r3
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c6ee:	2300      	movs	r3, #0
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	370c      	adds	r7, #12
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b085      	sub	sp, #20
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c70e:	68fb      	ldr	r3, [r7, #12]
}
 800c710:	4618      	mov	r0, r3
 800c712:	3714      	adds	r7, #20
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr

0800c71c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b08b      	sub	sp, #44	; 0x2c
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	4611      	mov	r1, r2
 800c728:	461a      	mov	r2, r3
 800c72a:	460b      	mov	r3, r1
 800c72c:	80fb      	strh	r3, [r7, #6]
 800c72e:	4613      	mov	r3, r2
 800c730:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c732:	88bb      	ldrh	r3, [r7, #4]
 800c734:	3301      	adds	r3, #1
 800c736:	085b      	lsrs	r3, r3, #1
 800c738:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c742:	88fa      	ldrh	r2, [r7, #6]
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	4413      	add	r3, r2
 800c748:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c74c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	627b      	str	r3, [r7, #36]	; 0x24
 800c752:	e01b      	b.n	800c78c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800c754:	69fb      	ldr	r3, [r7, #28]
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c75a:	69fb      	ldr	r3, [r7, #28]
 800c75c:	3301      	adds	r3, #1
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	021b      	lsls	r3, r3, #8
 800c762:	b21a      	sxth	r2, r3
 800c764:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c768:	4313      	orrs	r3, r2
 800c76a:	b21b      	sxth	r3, r3
 800c76c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c76e:	6a3b      	ldr	r3, [r7, #32]
 800c770:	8a7a      	ldrh	r2, [r7, #18]
 800c772:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c774:	6a3b      	ldr	r3, [r7, #32]
 800c776:	3302      	adds	r3, #2
 800c778:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c77a:	69fb      	ldr	r3, [r7, #28]
 800c77c:	3301      	adds	r3, #1
 800c77e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	3301      	adds	r3, #1
 800c784:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c788:	3b01      	subs	r3, #1
 800c78a:	627b      	str	r3, [r7, #36]	; 0x24
 800c78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d1e0      	bne.n	800c754 <USB_WritePMA+0x38>
  }
}
 800c792:	bf00      	nop
 800c794:	bf00      	nop
 800c796:	372c      	adds	r7, #44	; 0x2c
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr

0800c7a0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b08b      	sub	sp, #44	; 0x2c
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	60b9      	str	r1, [r7, #8]
 800c7aa:	4611      	mov	r1, r2
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	460b      	mov	r3, r1
 800c7b0:	80fb      	strh	r3, [r7, #6]
 800c7b2:	4613      	mov	r3, r2
 800c7b4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c7b6:	88bb      	ldrh	r3, [r7, #4]
 800c7b8:	085b      	lsrs	r3, r3, #1
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c7c6:	88fa      	ldrh	r2, [r7, #6]
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c7d0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	627b      	str	r3, [r7, #36]	; 0x24
 800c7d6:	e018      	b.n	800c80a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c7d8:	6a3b      	ldr	r3, [r7, #32]
 800c7da:	881b      	ldrh	r3, [r3, #0]
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c7e0:	6a3b      	ldr	r3, [r7, #32]
 800c7e2:	3302      	adds	r3, #2
 800c7e4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	b2da      	uxtb	r2, r3
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c7ee:	69fb      	ldr	r3, [r7, #28]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	0a1b      	lsrs	r3, r3, #8
 800c7f8:	b2da      	uxtb	r2, r3
 800c7fa:	69fb      	ldr	r3, [r7, #28]
 800c7fc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c7fe:	69fb      	ldr	r3, [r7, #28]
 800c800:	3301      	adds	r3, #1
 800c802:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c806:	3b01      	subs	r3, #1
 800c808:	627b      	str	r3, [r7, #36]	; 0x24
 800c80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d1e3      	bne.n	800c7d8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c810:	88bb      	ldrh	r3, [r7, #4]
 800c812:	f003 0301 	and.w	r3, r3, #1
 800c816:	b29b      	uxth	r3, r3
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d007      	beq.n	800c82c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800c81c:	6a3b      	ldr	r3, [r7, #32]
 800c81e:	881b      	ldrh	r3, [r3, #0]
 800c820:	b29b      	uxth	r3, r3
 800c822:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	b2da      	uxtb	r2, r3
 800c828:	69fb      	ldr	r3, [r7, #28]
 800c82a:	701a      	strb	r2, [r3, #0]
  }
}
 800c82c:	bf00      	nop
 800c82e:	372c      	adds	r7, #44	; 0x2c
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr

0800c838 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b084      	sub	sp, #16
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	460b      	mov	r3, r1
 800c842:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c844:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c848:	f002 f920 	bl	800ea8c <USBD_static_malloc>
 800c84c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d105      	bne.n	800c860 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2200      	movs	r2, #0
 800c858:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c85c:	2302      	movs	r3, #2
 800c85e:	e066      	b.n	800c92e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	68fa      	ldr	r2, [r7, #12]
 800c864:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	7c1b      	ldrb	r3, [r3, #16]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d119      	bne.n	800c8a4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c870:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c874:	2202      	movs	r2, #2
 800c876:	2181      	movs	r1, #129	; 0x81
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f001 ffae 	bl	800e7da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2201      	movs	r2, #1
 800c882:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c884:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c888:	2202      	movs	r2, #2
 800c88a:	2101      	movs	r1, #1
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f001 ffa4 	bl	800e7da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2201      	movs	r2, #1
 800c896:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2210      	movs	r2, #16
 800c89e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800c8a2:	e016      	b.n	800c8d2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c8a4:	2340      	movs	r3, #64	; 0x40
 800c8a6:	2202      	movs	r2, #2
 800c8a8:	2181      	movs	r1, #129	; 0x81
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f001 ff95 	bl	800e7da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c8b6:	2340      	movs	r3, #64	; 0x40
 800c8b8:	2202      	movs	r2, #2
 800c8ba:	2101      	movs	r1, #1
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f001 ff8c 	bl	800e7da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2210      	movs	r2, #16
 800c8ce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c8d2:	2308      	movs	r3, #8
 800c8d4:	2203      	movs	r2, #3
 800c8d6:	2182      	movs	r1, #130	; 0x82
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f001 ff7e 	bl	800e7da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	7c1b      	ldrb	r3, [r3, #16]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d109      	bne.n	800c91c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c90e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c912:	2101      	movs	r1, #1
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f002 f84f 	bl	800e9b8 <USBD_LL_PrepareReceive>
 800c91a:	e007      	b.n	800c92c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c922:	2340      	movs	r3, #64	; 0x40
 800c924:	2101      	movs	r1, #1
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f002 f846 	bl	800e9b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c92c:	2300      	movs	r3, #0
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3710      	adds	r7, #16
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}

0800c936 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c936:	b580      	push	{r7, lr}
 800c938:	b082      	sub	sp, #8
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	6078      	str	r0, [r7, #4]
 800c93e:	460b      	mov	r3, r1
 800c940:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c942:	2181      	movs	r1, #129	; 0x81
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f001 ff6e 	bl	800e826 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2200      	movs	r2, #0
 800c94e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c950:	2101      	movs	r1, #1
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f001 ff67 	bl	800e826 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c960:	2182      	movs	r1, #130	; 0x82
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f001 ff5f 	bl	800e826 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2200      	movs	r2, #0
 800c96c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2200      	movs	r2, #0
 800c974:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d00e      	beq.n	800c9a0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c992:	4618      	mov	r0, r3
 800c994:	f002 f888 	bl	800eaa8 <USBD_static_free>
    pdev->pClassData = NULL;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2200      	movs	r2, #0
 800c99c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c9a0:	2300      	movs	r3, #0
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3708      	adds	r7, #8
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
	...

0800c9ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b086      	sub	sp, #24
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c9bc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d101      	bne.n	800c9d4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c9d0:	2303      	movs	r3, #3
 800c9d2:	e0af      	b.n	800cb34 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d03f      	beq.n	800ca60 <USBD_CDC_Setup+0xb4>
 800c9e0:	2b20      	cmp	r3, #32
 800c9e2:	f040 809f 	bne.w	800cb24 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	88db      	ldrh	r3, [r3, #6]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d02e      	beq.n	800ca4c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	b25b      	sxtb	r3, r3
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	da16      	bge.n	800ca26 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c9fe:	689b      	ldr	r3, [r3, #8]
 800ca00:	683a      	ldr	r2, [r7, #0]
 800ca02:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ca04:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ca06:	683a      	ldr	r2, [r7, #0]
 800ca08:	88d2      	ldrh	r2, [r2, #6]
 800ca0a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	88db      	ldrh	r3, [r3, #6]
 800ca10:	2b07      	cmp	r3, #7
 800ca12:	bf28      	it	cs
 800ca14:	2307      	movcs	r3, #7
 800ca16:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	89fa      	ldrh	r2, [r7, #14]
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f001 facf 	bl	800dfc2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ca24:	e085      	b.n	800cb32 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	785a      	ldrb	r2, [r3, #1]
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	88db      	ldrh	r3, [r3, #6]
 800ca34:	b2da      	uxtb	r2, r3
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ca3c:	6939      	ldr	r1, [r7, #16]
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	88db      	ldrh	r3, [r3, #6]
 800ca42:	461a      	mov	r2, r3
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f001 fae8 	bl	800e01a <USBD_CtlPrepareRx>
      break;
 800ca4a:	e072      	b.n	800cb32 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca52:	689b      	ldr	r3, [r3, #8]
 800ca54:	683a      	ldr	r2, [r7, #0]
 800ca56:	7850      	ldrb	r0, [r2, #1]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	6839      	ldr	r1, [r7, #0]
 800ca5c:	4798      	blx	r3
      break;
 800ca5e:	e068      	b.n	800cb32 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	785b      	ldrb	r3, [r3, #1]
 800ca64:	2b0b      	cmp	r3, #11
 800ca66:	d852      	bhi.n	800cb0e <USBD_CDC_Setup+0x162>
 800ca68:	a201      	add	r2, pc, #4	; (adr r2, 800ca70 <USBD_CDC_Setup+0xc4>)
 800ca6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca6e:	bf00      	nop
 800ca70:	0800caa1 	.word	0x0800caa1
 800ca74:	0800cb1d 	.word	0x0800cb1d
 800ca78:	0800cb0f 	.word	0x0800cb0f
 800ca7c:	0800cb0f 	.word	0x0800cb0f
 800ca80:	0800cb0f 	.word	0x0800cb0f
 800ca84:	0800cb0f 	.word	0x0800cb0f
 800ca88:	0800cb0f 	.word	0x0800cb0f
 800ca8c:	0800cb0f 	.word	0x0800cb0f
 800ca90:	0800cb0f 	.word	0x0800cb0f
 800ca94:	0800cb0f 	.word	0x0800cb0f
 800ca98:	0800cacb 	.word	0x0800cacb
 800ca9c:	0800caf5 	.word	0x0800caf5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	2b03      	cmp	r3, #3
 800caaa:	d107      	bne.n	800cabc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800caac:	f107 030a 	add.w	r3, r7, #10
 800cab0:	2202      	movs	r2, #2
 800cab2:	4619      	mov	r1, r3
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f001 fa84 	bl	800dfc2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800caba:	e032      	b.n	800cb22 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800cabc:	6839      	ldr	r1, [r7, #0]
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f001 fa0e 	bl	800dee0 <USBD_CtlError>
            ret = USBD_FAIL;
 800cac4:	2303      	movs	r3, #3
 800cac6:	75fb      	strb	r3, [r7, #23]
          break;
 800cac8:	e02b      	b.n	800cb22 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	2b03      	cmp	r3, #3
 800cad4:	d107      	bne.n	800cae6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cad6:	f107 030d 	add.w	r3, r7, #13
 800cada:	2201      	movs	r2, #1
 800cadc:	4619      	mov	r1, r3
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f001 fa6f 	bl	800dfc2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cae4:	e01d      	b.n	800cb22 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800cae6:	6839      	ldr	r1, [r7, #0]
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f001 f9f9 	bl	800dee0 <USBD_CtlError>
            ret = USBD_FAIL;
 800caee:	2303      	movs	r3, #3
 800caf0:	75fb      	strb	r3, [r7, #23]
          break;
 800caf2:	e016      	b.n	800cb22 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	2b03      	cmp	r3, #3
 800cafe:	d00f      	beq.n	800cb20 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800cb00:	6839      	ldr	r1, [r7, #0]
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f001 f9ec 	bl	800dee0 <USBD_CtlError>
            ret = USBD_FAIL;
 800cb08:	2303      	movs	r3, #3
 800cb0a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cb0c:	e008      	b.n	800cb20 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cb0e:	6839      	ldr	r1, [r7, #0]
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f001 f9e5 	bl	800dee0 <USBD_CtlError>
          ret = USBD_FAIL;
 800cb16:	2303      	movs	r3, #3
 800cb18:	75fb      	strb	r3, [r7, #23]
          break;
 800cb1a:	e002      	b.n	800cb22 <USBD_CDC_Setup+0x176>
          break;
 800cb1c:	bf00      	nop
 800cb1e:	e008      	b.n	800cb32 <USBD_CDC_Setup+0x186>
          break;
 800cb20:	bf00      	nop
      }
      break;
 800cb22:	e006      	b.n	800cb32 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800cb24:	6839      	ldr	r1, [r7, #0]
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f001 f9da 	bl	800dee0 <USBD_CtlError>
      ret = USBD_FAIL;
 800cb2c:	2303      	movs	r3, #3
 800cb2e:	75fb      	strb	r3, [r7, #23]
      break;
 800cb30:	bf00      	nop
  }

  return (uint8_t)ret;
 800cb32:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3718      	adds	r7, #24
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	460b      	mov	r3, r1
 800cb46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d101      	bne.n	800cb5e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cb5a:	2303      	movs	r3, #3
 800cb5c:	e04f      	b.n	800cbfe <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb64:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cb66:	78fa      	ldrb	r2, [r7, #3]
 800cb68:	6879      	ldr	r1, [r7, #4]
 800cb6a:	4613      	mov	r3, r2
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	4413      	add	r3, r2
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	440b      	add	r3, r1
 800cb74:	3318      	adds	r3, #24
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d029      	beq.n	800cbd0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800cb7c:	78fa      	ldrb	r2, [r7, #3]
 800cb7e:	6879      	ldr	r1, [r7, #4]
 800cb80:	4613      	mov	r3, r2
 800cb82:	009b      	lsls	r3, r3, #2
 800cb84:	4413      	add	r3, r2
 800cb86:	009b      	lsls	r3, r3, #2
 800cb88:	440b      	add	r3, r1
 800cb8a:	3318      	adds	r3, #24
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	78f9      	ldrb	r1, [r7, #3]
 800cb90:	68f8      	ldr	r0, [r7, #12]
 800cb92:	460b      	mov	r3, r1
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	440b      	add	r3, r1
 800cb98:	00db      	lsls	r3, r3, #3
 800cb9a:	4403      	add	r3, r0
 800cb9c:	3320      	adds	r3, #32
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	fbb2 f1f3 	udiv	r1, r2, r3
 800cba4:	fb01 f303 	mul.w	r3, r1, r3
 800cba8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d110      	bne.n	800cbd0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800cbae:	78fa      	ldrb	r2, [r7, #3]
 800cbb0:	6879      	ldr	r1, [r7, #4]
 800cbb2:	4613      	mov	r3, r2
 800cbb4:	009b      	lsls	r3, r3, #2
 800cbb6:	4413      	add	r3, r2
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	440b      	add	r3, r1
 800cbbc:	3318      	adds	r3, #24
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cbc2:	78f9      	ldrb	r1, [r7, #3]
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f001 fed4 	bl	800e976 <USBD_LL_Transmit>
 800cbce:	e015      	b.n	800cbfc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbde:	691b      	ldr	r3, [r3, #16]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d00b      	beq.n	800cbfc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbea:	691b      	ldr	r3, [r3, #16]
 800cbec:	68ba      	ldr	r2, [r7, #8]
 800cbee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cbf2:	68ba      	ldr	r2, [r7, #8]
 800cbf4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cbf8:	78fa      	ldrb	r2, [r7, #3]
 800cbfa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cbfc:	2300      	movs	r3, #0
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3710      	adds	r7, #16
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}

0800cc06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cc06:	b580      	push	{r7, lr}
 800cc08:	b084      	sub	sp, #16
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	6078      	str	r0, [r7, #4]
 800cc0e:	460b      	mov	r3, r1
 800cc10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc18:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d101      	bne.n	800cc28 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cc24:	2303      	movs	r3, #3
 800cc26:	e015      	b.n	800cc54 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cc28:	78fb      	ldrb	r3, [r7, #3]
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f001 fee4 	bl	800e9fa <USBD_LL_GetRxDataSize>
 800cc32:	4602      	mov	r2, r0
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc40:	68db      	ldr	r3, [r3, #12]
 800cc42:	68fa      	ldr	r2, [r7, #12]
 800cc44:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cc48:	68fa      	ldr	r2, [r7, #12]
 800cc4a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cc4e:	4611      	mov	r1, r2
 800cc50:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cc52:	2300      	movs	r3, #0
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3710      	adds	r7, #16
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc6a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d101      	bne.n	800cc76 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800cc72:	2303      	movs	r3, #3
 800cc74:	e01b      	b.n	800ccae <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d015      	beq.n	800ccac <USBD_CDC_EP0_RxReady+0x50>
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cc86:	2bff      	cmp	r3, #255	; 0xff
 800cc88:	d010      	beq.n	800ccac <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc90:	689b      	ldr	r3, [r3, #8]
 800cc92:	68fa      	ldr	r2, [r7, #12]
 800cc94:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800cc98:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800cc9a:	68fa      	ldr	r2, [r7, #12]
 800cc9c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cca0:	b292      	uxth	r2, r2
 800cca2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	22ff      	movs	r2, #255	; 0xff
 800cca8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ccac:	2300      	movs	r3, #0
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3710      	adds	r7, #16
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
	...

0800ccb8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2243      	movs	r2, #67	; 0x43
 800ccc4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ccc6:	4b03      	ldr	r3, [pc, #12]	; (800ccd4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	370c      	adds	r7, #12
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr
 800ccd4:	200000a0 	.word	0x200000a0

0800ccd8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b083      	sub	sp, #12
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2243      	movs	r2, #67	; 0x43
 800cce4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800cce6:	4b03      	ldr	r3, [pc, #12]	; (800ccf4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	370c      	adds	r7, #12
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr
 800ccf4:	2000005c 	.word	0x2000005c

0800ccf8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2243      	movs	r2, #67	; 0x43
 800cd04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800cd06:	4b03      	ldr	r3, [pc, #12]	; (800cd14 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	370c      	adds	r7, #12
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr
 800cd14:	200000e4 	.word	0x200000e4

0800cd18 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b083      	sub	sp, #12
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	220a      	movs	r2, #10
 800cd24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cd26:	4b03      	ldr	r3, [pc, #12]	; (800cd34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	370c      	adds	r7, #12
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr
 800cd34:	20000018 	.word	0x20000018

0800cd38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d101      	bne.n	800cd4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cd48:	2303      	movs	r3, #3
 800cd4a:	e004      	b.n	800cd56 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	683a      	ldr	r2, [r7, #0]
 800cd50:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800cd54:	2300      	movs	r3, #0
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	370c      	adds	r7, #12
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd60:	4770      	bx	lr

0800cd62 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cd62:	b480      	push	{r7}
 800cd64:	b087      	sub	sp, #28
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	60f8      	str	r0, [r7, #12]
 800cd6a:	60b9      	str	r1, [r7, #8]
 800cd6c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd74:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d101      	bne.n	800cd80 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800cd7c:	2303      	movs	r3, #3
 800cd7e:	e008      	b.n	800cd92 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	68ba      	ldr	r2, [r7, #8]
 800cd84:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cd90:	2300      	movs	r3, #0
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	371c      	adds	r7, #28
 800cd96:	46bd      	mov	sp, r7
 800cd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9c:	4770      	bx	lr

0800cd9e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cd9e:	b480      	push	{r7}
 800cda0:	b085      	sub	sp, #20
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
 800cda6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cdae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d101      	bne.n	800cdba <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800cdb6:	2303      	movs	r3, #3
 800cdb8:	e004      	b.n	800cdc4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	683a      	ldr	r2, [r7, #0]
 800cdbe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cdc2:	2300      	movs	r3, #0
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3714      	adds	r7, #20
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cdde:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800cde0:	2301      	movs	r3, #1
 800cde2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d101      	bne.n	800cdf2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cdee:	2303      	movs	r3, #3
 800cdf0:	e01a      	b.n	800ce28 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d114      	bne.n	800ce26 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ce1a:	2181      	movs	r1, #129	; 0x81
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f001 fdaa 	bl	800e976 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ce22:	2300      	movs	r3, #0
 800ce24:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ce26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3710      	adds	r7, #16
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d101      	bne.n	800ce4e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ce4a:	2303      	movs	r3, #3
 800ce4c:	e016      	b.n	800ce7c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	7c1b      	ldrb	r3, [r3, #16]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d109      	bne.n	800ce6a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce60:	2101      	movs	r1, #1
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f001 fda8 	bl	800e9b8 <USBD_LL_PrepareReceive>
 800ce68:	e007      	b.n	800ce7a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce70:	2340      	movs	r3, #64	; 0x40
 800ce72:	2101      	movs	r1, #1
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f001 fd9f 	bl	800e9b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ce7a:	2300      	movs	r3, #0
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3710      	adds	r7, #16
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b086      	sub	sp, #24
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	60f8      	str	r0, [r7, #12]
 800ce8c:	60b9      	str	r1, [r7, #8]
 800ce8e:	4613      	mov	r3, r2
 800ce90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d101      	bne.n	800ce9c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ce98:	2303      	movs	r3, #3
 800ce9a:	e01f      	b.n	800cedc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2200      	movs	r2, #0
 800cea8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d003      	beq.n	800cec2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	68ba      	ldr	r2, [r7, #8]
 800cebe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2201      	movs	r2, #1
 800cec6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	79fa      	ldrb	r2, [r7, #7]
 800cece:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ced0:	68f8      	ldr	r0, [r7, #12]
 800ced2:	f001 fc07 	bl	800e6e4 <USBD_LL_Init>
 800ced6:	4603      	mov	r3, r0
 800ced8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ceda:	7dfb      	ldrb	r3, [r7, #23]
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3718      	adds	r7, #24
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ceee:	2300      	movs	r3, #0
 800cef0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d101      	bne.n	800cefc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800cef8:	2303      	movs	r3, #3
 800cefa:	e016      	b.n	800cf2a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	683a      	ldr	r2, [r7, #0]
 800cf00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d00b      	beq.n	800cf28 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf18:	f107 020e 	add.w	r2, r7, #14
 800cf1c:	4610      	mov	r0, r2
 800cf1e:	4798      	blx	r3
 800cf20:	4602      	mov	r2, r0
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3710      	adds	r7, #16
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}

0800cf32 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cf32:	b580      	push	{r7, lr}
 800cf34:	b082      	sub	sp, #8
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f001 fc32 	bl	800e7a4 <USBD_LL_Start>
 800cf40:	4603      	mov	r3, r0
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3708      	adds	r7, #8
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cf4a:	b480      	push	{r7}
 800cf4c:	b083      	sub	sp, #12
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cf52:	2300      	movs	r3, #0
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b084      	sub	sp, #16
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	460b      	mov	r3, r1
 800cf6a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cf6c:	2303      	movs	r3, #3
 800cf6e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d009      	beq.n	800cf8e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	78fa      	ldrb	r2, [r7, #3]
 800cf84:	4611      	mov	r1, r2
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	4798      	blx	r3
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cf8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3710      	adds	r7, #16
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	460b      	mov	r3, r1
 800cfa2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d007      	beq.n	800cfbe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	78fa      	ldrb	r2, [r7, #3]
 800cfb8:	4611      	mov	r1, r2
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	4798      	blx	r3
  }

  return USBD_OK;
 800cfbe:	2300      	movs	r3, #0
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3708      	adds	r7, #8
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}

0800cfc8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b084      	sub	sp, #16
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cfd8:	6839      	ldr	r1, [r7, #0]
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f000 ff46 	bl	800de6c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cfee:	461a      	mov	r2, r3
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cffc:	f003 031f 	and.w	r3, r3, #31
 800d000:	2b02      	cmp	r3, #2
 800d002:	d01a      	beq.n	800d03a <USBD_LL_SetupStage+0x72>
 800d004:	2b02      	cmp	r3, #2
 800d006:	d822      	bhi.n	800d04e <USBD_LL_SetupStage+0x86>
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d002      	beq.n	800d012 <USBD_LL_SetupStage+0x4a>
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d00a      	beq.n	800d026 <USBD_LL_SetupStage+0x5e>
 800d010:	e01d      	b.n	800d04e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d018:	4619      	mov	r1, r3
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 f9ee 	bl	800d3fc <USBD_StdDevReq>
 800d020:	4603      	mov	r3, r0
 800d022:	73fb      	strb	r3, [r7, #15]
      break;
 800d024:	e020      	b.n	800d068 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d02c:	4619      	mov	r1, r3
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f000 fa52 	bl	800d4d8 <USBD_StdItfReq>
 800d034:	4603      	mov	r3, r0
 800d036:	73fb      	strb	r3, [r7, #15]
      break;
 800d038:	e016      	b.n	800d068 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d040:	4619      	mov	r1, r3
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f000 fa91 	bl	800d56a <USBD_StdEPReq>
 800d048:	4603      	mov	r3, r0
 800d04a:	73fb      	strb	r3, [r7, #15]
      break;
 800d04c:	e00c      	b.n	800d068 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d054:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	4619      	mov	r1, r3
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f001 fc01 	bl	800e864 <USBD_LL_StallEP>
 800d062:	4603      	mov	r3, r0
 800d064:	73fb      	strb	r3, [r7, #15]
      break;
 800d066:	bf00      	nop
  }

  return ret;
 800d068:	7bfb      	ldrb	r3, [r7, #15]
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	3710      	adds	r7, #16
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}

0800d072 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d072:	b580      	push	{r7, lr}
 800d074:	b086      	sub	sp, #24
 800d076:	af00      	add	r7, sp, #0
 800d078:	60f8      	str	r0, [r7, #12]
 800d07a:	460b      	mov	r3, r1
 800d07c:	607a      	str	r2, [r7, #4]
 800d07e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d080:	7afb      	ldrb	r3, [r7, #11]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d138      	bne.n	800d0f8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d08c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d094:	2b03      	cmp	r3, #3
 800d096:	d14a      	bne.n	800d12e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	689a      	ldr	r2, [r3, #8]
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	68db      	ldr	r3, [r3, #12]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d913      	bls.n	800d0cc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	689a      	ldr	r2, [r3, #8]
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	1ad2      	subs	r2, r2, r3
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	68da      	ldr	r2, [r3, #12]
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	689b      	ldr	r3, [r3, #8]
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	bf28      	it	cs
 800d0be:	4613      	movcs	r3, r2
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	6879      	ldr	r1, [r7, #4]
 800d0c4:	68f8      	ldr	r0, [r7, #12]
 800d0c6:	f000 ffc5 	bl	800e054 <USBD_CtlContinueRx>
 800d0ca:	e030      	b.n	800d12e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	2b03      	cmp	r3, #3
 800d0d6:	d10b      	bne.n	800d0f0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0de:	691b      	ldr	r3, [r3, #16]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d005      	beq.n	800d0f0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0ea:	691b      	ldr	r3, [r3, #16]
 800d0ec:	68f8      	ldr	r0, [r7, #12]
 800d0ee:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d0f0:	68f8      	ldr	r0, [r7, #12]
 800d0f2:	f000 ffc0 	bl	800e076 <USBD_CtlSendStatus>
 800d0f6:	e01a      	b.n	800d12e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0fe:	b2db      	uxtb	r3, r3
 800d100:	2b03      	cmp	r3, #3
 800d102:	d114      	bne.n	800d12e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d10a:	699b      	ldr	r3, [r3, #24]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d00e      	beq.n	800d12e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d116:	699b      	ldr	r3, [r3, #24]
 800d118:	7afa      	ldrb	r2, [r7, #11]
 800d11a:	4611      	mov	r1, r2
 800d11c:	68f8      	ldr	r0, [r7, #12]
 800d11e:	4798      	blx	r3
 800d120:	4603      	mov	r3, r0
 800d122:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d124:	7dfb      	ldrb	r3, [r7, #23]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d001      	beq.n	800d12e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d12a:	7dfb      	ldrb	r3, [r7, #23]
 800d12c:	e000      	b.n	800d130 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d12e:	2300      	movs	r3, #0
}
 800d130:	4618      	mov	r0, r3
 800d132:	3718      	adds	r7, #24
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b086      	sub	sp, #24
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	60f8      	str	r0, [r7, #12]
 800d140:	460b      	mov	r3, r1
 800d142:	607a      	str	r2, [r7, #4]
 800d144:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d146:	7afb      	ldrb	r3, [r7, #11]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d16b      	bne.n	800d224 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	3314      	adds	r3, #20
 800d150:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d158:	2b02      	cmp	r3, #2
 800d15a:	d156      	bne.n	800d20a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	689a      	ldr	r2, [r3, #8]
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	429a      	cmp	r2, r3
 800d166:	d914      	bls.n	800d192 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	689a      	ldr	r2, [r3, #8]
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	1ad2      	subs	r2, r2, r3
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	689b      	ldr	r3, [r3, #8]
 800d17a:	461a      	mov	r2, r3
 800d17c:	6879      	ldr	r1, [r7, #4]
 800d17e:	68f8      	ldr	r0, [r7, #12]
 800d180:	f000 ff3a 	bl	800dff8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d184:	2300      	movs	r3, #0
 800d186:	2200      	movs	r2, #0
 800d188:	2100      	movs	r1, #0
 800d18a:	68f8      	ldr	r0, [r7, #12]
 800d18c:	f001 fc14 	bl	800e9b8 <USBD_LL_PrepareReceive>
 800d190:	e03b      	b.n	800d20a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	68da      	ldr	r2, [r3, #12]
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	689b      	ldr	r3, [r3, #8]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d11c      	bne.n	800d1d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	685a      	ldr	r2, [r3, #4]
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d316      	bcc.n	800d1d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	685a      	ldr	r2, [r3, #4]
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d20f      	bcs.n	800d1d8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	2100      	movs	r1, #0
 800d1bc:	68f8      	ldr	r0, [r7, #12]
 800d1be:	f000 ff1b 	bl	800dff8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	2100      	movs	r1, #0
 800d1d0:	68f8      	ldr	r0, [r7, #12]
 800d1d2:	f001 fbf1 	bl	800e9b8 <USBD_LL_PrepareReceive>
 800d1d6:	e018      	b.n	800d20a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1de:	b2db      	uxtb	r3, r3
 800d1e0:	2b03      	cmp	r3, #3
 800d1e2:	d10b      	bne.n	800d1fc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1ea:	68db      	ldr	r3, [r3, #12]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d005      	beq.n	800d1fc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1f6:	68db      	ldr	r3, [r3, #12]
 800d1f8:	68f8      	ldr	r0, [r7, #12]
 800d1fa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1fc:	2180      	movs	r1, #128	; 0x80
 800d1fe:	68f8      	ldr	r0, [r7, #12]
 800d200:	f001 fb30 	bl	800e864 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d204:	68f8      	ldr	r0, [r7, #12]
 800d206:	f000 ff49 	bl	800e09c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d210:	2b01      	cmp	r3, #1
 800d212:	d122      	bne.n	800d25a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d214:	68f8      	ldr	r0, [r7, #12]
 800d216:	f7ff fe98 	bl	800cf4a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2200      	movs	r2, #0
 800d21e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d222:	e01a      	b.n	800d25a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d22a:	b2db      	uxtb	r3, r3
 800d22c:	2b03      	cmp	r3, #3
 800d22e:	d114      	bne.n	800d25a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d236:	695b      	ldr	r3, [r3, #20]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d00e      	beq.n	800d25a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d242:	695b      	ldr	r3, [r3, #20]
 800d244:	7afa      	ldrb	r2, [r7, #11]
 800d246:	4611      	mov	r1, r2
 800d248:	68f8      	ldr	r0, [r7, #12]
 800d24a:	4798      	blx	r3
 800d24c:	4603      	mov	r3, r0
 800d24e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d250:	7dfb      	ldrb	r3, [r7, #23]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d001      	beq.n	800d25a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d256:	7dfb      	ldrb	r3, [r7, #23]
 800d258:	e000      	b.n	800d25c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d25a:	2300      	movs	r3, #0
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3718      	adds	r7, #24
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2201      	movs	r2, #1
 800d270:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2200      	movs	r2, #0
 800d278:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2200      	movs	r2, #0
 800d280:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2200      	movs	r2, #0
 800d286:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d290:	2b00      	cmp	r3, #0
 800d292:	d101      	bne.n	800d298 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d294:	2303      	movs	r3, #3
 800d296:	e02f      	b.n	800d2f8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d00f      	beq.n	800d2c2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2a8:	685b      	ldr	r3, [r3, #4]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d009      	beq.n	800d2c2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2b4:	685b      	ldr	r3, [r3, #4]
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	6852      	ldr	r2, [r2, #4]
 800d2ba:	b2d2      	uxtb	r2, r2
 800d2bc:	4611      	mov	r1, r2
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d2c2:	2340      	movs	r3, #64	; 0x40
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	2100      	movs	r1, #0
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f001 fa86 	bl	800e7da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2240      	movs	r2, #64	; 0x40
 800d2da:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d2de:	2340      	movs	r3, #64	; 0x40
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	2180      	movs	r1, #128	; 0x80
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f001 fa78 	bl	800e7da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2240      	movs	r2, #64	; 0x40
 800d2f4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d2f6:	2300      	movs	r3, #0
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3708      	adds	r7, #8
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d300:	b480      	push	{r7}
 800d302:	b083      	sub	sp, #12
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	460b      	mov	r3, r1
 800d30a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	78fa      	ldrb	r2, [r7, #3]
 800d310:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d312:	2300      	movs	r3, #0
}
 800d314:	4618      	mov	r0, r3
 800d316:	370c      	adds	r7, #12
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr

0800d320 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d320:	b480      	push	{r7}
 800d322:	b083      	sub	sp, #12
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d32e:	b2da      	uxtb	r2, r3
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2204      	movs	r2, #4
 800d33a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d33e:	2300      	movs	r3, #0
}
 800d340:	4618      	mov	r0, r3
 800d342:	370c      	adds	r7, #12
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr

0800d34c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d34c:	b480      	push	{r7}
 800d34e:	b083      	sub	sp, #12
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d35a:	b2db      	uxtb	r3, r3
 800d35c:	2b04      	cmp	r3, #4
 800d35e:	d106      	bne.n	800d36e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d366:	b2da      	uxtb	r2, r3
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d36e:	2300      	movs	r3, #0
}
 800d370:	4618      	mov	r0, r3
 800d372:	370c      	adds	r7, #12
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr

0800d37c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b082      	sub	sp, #8
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d101      	bne.n	800d392 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d38e:	2303      	movs	r3, #3
 800d390:	e012      	b.n	800d3b8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	2b03      	cmp	r3, #3
 800d39c:	d10b      	bne.n	800d3b6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3a4:	69db      	ldr	r3, [r3, #28]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d005      	beq.n	800d3b6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3b0:	69db      	ldr	r3, [r3, #28]
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d3b6:	2300      	movs	r3, #0
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3708      	adds	r7, #8
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b087      	sub	sp, #28
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	781b      	ldrb	r3, [r3, #0]
 800d3dc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d3de:	8a3b      	ldrh	r3, [r7, #16]
 800d3e0:	021b      	lsls	r3, r3, #8
 800d3e2:	b21a      	sxth	r2, r3
 800d3e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d3e8:	4313      	orrs	r3, r2
 800d3ea:	b21b      	sxth	r3, r3
 800d3ec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d3ee:	89fb      	ldrh	r3, [r7, #14]
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	371c      	adds	r7, #28
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr

0800d3fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d406:	2300      	movs	r3, #0
 800d408:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d412:	2b40      	cmp	r3, #64	; 0x40
 800d414:	d005      	beq.n	800d422 <USBD_StdDevReq+0x26>
 800d416:	2b40      	cmp	r3, #64	; 0x40
 800d418:	d853      	bhi.n	800d4c2 <USBD_StdDevReq+0xc6>
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d00b      	beq.n	800d436 <USBD_StdDevReq+0x3a>
 800d41e:	2b20      	cmp	r3, #32
 800d420:	d14f      	bne.n	800d4c2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d428:	689b      	ldr	r3, [r3, #8]
 800d42a:	6839      	ldr	r1, [r7, #0]
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	4798      	blx	r3
 800d430:	4603      	mov	r3, r0
 800d432:	73fb      	strb	r3, [r7, #15]
      break;
 800d434:	e04a      	b.n	800d4cc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	785b      	ldrb	r3, [r3, #1]
 800d43a:	2b09      	cmp	r3, #9
 800d43c:	d83b      	bhi.n	800d4b6 <USBD_StdDevReq+0xba>
 800d43e:	a201      	add	r2, pc, #4	; (adr r2, 800d444 <USBD_StdDevReq+0x48>)
 800d440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d444:	0800d499 	.word	0x0800d499
 800d448:	0800d4ad 	.word	0x0800d4ad
 800d44c:	0800d4b7 	.word	0x0800d4b7
 800d450:	0800d4a3 	.word	0x0800d4a3
 800d454:	0800d4b7 	.word	0x0800d4b7
 800d458:	0800d477 	.word	0x0800d477
 800d45c:	0800d46d 	.word	0x0800d46d
 800d460:	0800d4b7 	.word	0x0800d4b7
 800d464:	0800d48f 	.word	0x0800d48f
 800d468:	0800d481 	.word	0x0800d481
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d46c:	6839      	ldr	r1, [r7, #0]
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f000 f9de 	bl	800d830 <USBD_GetDescriptor>
          break;
 800d474:	e024      	b.n	800d4c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d476:	6839      	ldr	r1, [r7, #0]
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f000 fb6d 	bl	800db58 <USBD_SetAddress>
          break;
 800d47e:	e01f      	b.n	800d4c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d480:	6839      	ldr	r1, [r7, #0]
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f000 fbac 	bl	800dbe0 <USBD_SetConfig>
 800d488:	4603      	mov	r3, r0
 800d48a:	73fb      	strb	r3, [r7, #15]
          break;
 800d48c:	e018      	b.n	800d4c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d48e:	6839      	ldr	r1, [r7, #0]
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f000 fc4b 	bl	800dd2c <USBD_GetConfig>
          break;
 800d496:	e013      	b.n	800d4c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d498:	6839      	ldr	r1, [r7, #0]
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 fc7c 	bl	800dd98 <USBD_GetStatus>
          break;
 800d4a0:	e00e      	b.n	800d4c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d4a2:	6839      	ldr	r1, [r7, #0]
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f000 fcab 	bl	800de00 <USBD_SetFeature>
          break;
 800d4aa:	e009      	b.n	800d4c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d4ac:	6839      	ldr	r1, [r7, #0]
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f000 fcba 	bl	800de28 <USBD_ClrFeature>
          break;
 800d4b4:	e004      	b.n	800d4c0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d4b6:	6839      	ldr	r1, [r7, #0]
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f000 fd11 	bl	800dee0 <USBD_CtlError>
          break;
 800d4be:	bf00      	nop
      }
      break;
 800d4c0:	e004      	b.n	800d4cc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d4c2:	6839      	ldr	r1, [r7, #0]
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f000 fd0b 	bl	800dee0 <USBD_CtlError>
      break;
 800d4ca:	bf00      	nop
  }

  return ret;
 800d4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3710      	adds	r7, #16
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop

0800d4d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d4ee:	2b40      	cmp	r3, #64	; 0x40
 800d4f0:	d005      	beq.n	800d4fe <USBD_StdItfReq+0x26>
 800d4f2:	2b40      	cmp	r3, #64	; 0x40
 800d4f4:	d82f      	bhi.n	800d556 <USBD_StdItfReq+0x7e>
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d001      	beq.n	800d4fe <USBD_StdItfReq+0x26>
 800d4fa:	2b20      	cmp	r3, #32
 800d4fc:	d12b      	bne.n	800d556 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d504:	b2db      	uxtb	r3, r3
 800d506:	3b01      	subs	r3, #1
 800d508:	2b02      	cmp	r3, #2
 800d50a:	d81d      	bhi.n	800d548 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	889b      	ldrh	r3, [r3, #4]
 800d510:	b2db      	uxtb	r3, r3
 800d512:	2b01      	cmp	r3, #1
 800d514:	d813      	bhi.n	800d53e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d51c:	689b      	ldr	r3, [r3, #8]
 800d51e:	6839      	ldr	r1, [r7, #0]
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	4798      	blx	r3
 800d524:	4603      	mov	r3, r0
 800d526:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	88db      	ldrh	r3, [r3, #6]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d110      	bne.n	800d552 <USBD_StdItfReq+0x7a>
 800d530:	7bfb      	ldrb	r3, [r7, #15]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d10d      	bne.n	800d552 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 fd9d 	bl	800e076 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d53c:	e009      	b.n	800d552 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d53e:	6839      	ldr	r1, [r7, #0]
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f000 fccd 	bl	800dee0 <USBD_CtlError>
          break;
 800d546:	e004      	b.n	800d552 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d548:	6839      	ldr	r1, [r7, #0]
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f000 fcc8 	bl	800dee0 <USBD_CtlError>
          break;
 800d550:	e000      	b.n	800d554 <USBD_StdItfReq+0x7c>
          break;
 800d552:	bf00      	nop
      }
      break;
 800d554:	e004      	b.n	800d560 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d556:	6839      	ldr	r1, [r7, #0]
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f000 fcc1 	bl	800dee0 <USBD_CtlError>
      break;
 800d55e:	bf00      	nop
  }

  return ret;
 800d560:	7bfb      	ldrb	r3, [r7, #15]
}
 800d562:	4618      	mov	r0, r3
 800d564:	3710      	adds	r7, #16
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}

0800d56a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d56a:	b580      	push	{r7, lr}
 800d56c:	b084      	sub	sp, #16
 800d56e:	af00      	add	r7, sp, #0
 800d570:	6078      	str	r0, [r7, #4]
 800d572:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d574:	2300      	movs	r3, #0
 800d576:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	889b      	ldrh	r3, [r3, #4]
 800d57c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d586:	2b40      	cmp	r3, #64	; 0x40
 800d588:	d007      	beq.n	800d59a <USBD_StdEPReq+0x30>
 800d58a:	2b40      	cmp	r3, #64	; 0x40
 800d58c:	f200 8145 	bhi.w	800d81a <USBD_StdEPReq+0x2b0>
 800d590:	2b00      	cmp	r3, #0
 800d592:	d00c      	beq.n	800d5ae <USBD_StdEPReq+0x44>
 800d594:	2b20      	cmp	r3, #32
 800d596:	f040 8140 	bne.w	800d81a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5a0:	689b      	ldr	r3, [r3, #8]
 800d5a2:	6839      	ldr	r1, [r7, #0]
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	4798      	blx	r3
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	73fb      	strb	r3, [r7, #15]
      break;
 800d5ac:	e13a      	b.n	800d824 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	785b      	ldrb	r3, [r3, #1]
 800d5b2:	2b03      	cmp	r3, #3
 800d5b4:	d007      	beq.n	800d5c6 <USBD_StdEPReq+0x5c>
 800d5b6:	2b03      	cmp	r3, #3
 800d5b8:	f300 8129 	bgt.w	800d80e <USBD_StdEPReq+0x2a4>
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d07f      	beq.n	800d6c0 <USBD_StdEPReq+0x156>
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d03c      	beq.n	800d63e <USBD_StdEPReq+0xd4>
 800d5c4:	e123      	b.n	800d80e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	2b02      	cmp	r3, #2
 800d5d0:	d002      	beq.n	800d5d8 <USBD_StdEPReq+0x6e>
 800d5d2:	2b03      	cmp	r3, #3
 800d5d4:	d016      	beq.n	800d604 <USBD_StdEPReq+0x9a>
 800d5d6:	e02c      	b.n	800d632 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d5d8:	7bbb      	ldrb	r3, [r7, #14]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d00d      	beq.n	800d5fa <USBD_StdEPReq+0x90>
 800d5de:	7bbb      	ldrb	r3, [r7, #14]
 800d5e0:	2b80      	cmp	r3, #128	; 0x80
 800d5e2:	d00a      	beq.n	800d5fa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d5e4:	7bbb      	ldrb	r3, [r7, #14]
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f001 f93b 	bl	800e864 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d5ee:	2180      	movs	r1, #128	; 0x80
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f001 f937 	bl	800e864 <USBD_LL_StallEP>
 800d5f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d5f8:	e020      	b.n	800d63c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d5fa:	6839      	ldr	r1, [r7, #0]
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f000 fc6f 	bl	800dee0 <USBD_CtlError>
              break;
 800d602:	e01b      	b.n	800d63c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	885b      	ldrh	r3, [r3, #2]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d10e      	bne.n	800d62a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d60c:	7bbb      	ldrb	r3, [r7, #14]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d00b      	beq.n	800d62a <USBD_StdEPReq+0xc0>
 800d612:	7bbb      	ldrb	r3, [r7, #14]
 800d614:	2b80      	cmp	r3, #128	; 0x80
 800d616:	d008      	beq.n	800d62a <USBD_StdEPReq+0xc0>
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	88db      	ldrh	r3, [r3, #6]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d104      	bne.n	800d62a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d620:	7bbb      	ldrb	r3, [r7, #14]
 800d622:	4619      	mov	r1, r3
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f001 f91d 	bl	800e864 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f000 fd23 	bl	800e076 <USBD_CtlSendStatus>

              break;
 800d630:	e004      	b.n	800d63c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d632:	6839      	ldr	r1, [r7, #0]
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f000 fc53 	bl	800dee0 <USBD_CtlError>
              break;
 800d63a:	bf00      	nop
          }
          break;
 800d63c:	e0ec      	b.n	800d818 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d644:	b2db      	uxtb	r3, r3
 800d646:	2b02      	cmp	r3, #2
 800d648:	d002      	beq.n	800d650 <USBD_StdEPReq+0xe6>
 800d64a:	2b03      	cmp	r3, #3
 800d64c:	d016      	beq.n	800d67c <USBD_StdEPReq+0x112>
 800d64e:	e030      	b.n	800d6b2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d650:	7bbb      	ldrb	r3, [r7, #14]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d00d      	beq.n	800d672 <USBD_StdEPReq+0x108>
 800d656:	7bbb      	ldrb	r3, [r7, #14]
 800d658:	2b80      	cmp	r3, #128	; 0x80
 800d65a:	d00a      	beq.n	800d672 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d65c:	7bbb      	ldrb	r3, [r7, #14]
 800d65e:	4619      	mov	r1, r3
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f001 f8ff 	bl	800e864 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d666:	2180      	movs	r1, #128	; 0x80
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f001 f8fb 	bl	800e864 <USBD_LL_StallEP>
 800d66e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d670:	e025      	b.n	800d6be <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d672:	6839      	ldr	r1, [r7, #0]
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 fc33 	bl	800dee0 <USBD_CtlError>
              break;
 800d67a:	e020      	b.n	800d6be <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	885b      	ldrh	r3, [r3, #2]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d11b      	bne.n	800d6bc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d684:	7bbb      	ldrb	r3, [r7, #14]
 800d686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d004      	beq.n	800d698 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d68e:	7bbb      	ldrb	r3, [r7, #14]
 800d690:	4619      	mov	r1, r3
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f001 f905 	bl	800e8a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f000 fcec 	bl	800e076 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6a4:	689b      	ldr	r3, [r3, #8]
 800d6a6:	6839      	ldr	r1, [r7, #0]
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	4798      	blx	r3
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d6b0:	e004      	b.n	800d6bc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d6b2:	6839      	ldr	r1, [r7, #0]
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f000 fc13 	bl	800dee0 <USBD_CtlError>
              break;
 800d6ba:	e000      	b.n	800d6be <USBD_StdEPReq+0x154>
              break;
 800d6bc:	bf00      	nop
          }
          break;
 800d6be:	e0ab      	b.n	800d818 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6c6:	b2db      	uxtb	r3, r3
 800d6c8:	2b02      	cmp	r3, #2
 800d6ca:	d002      	beq.n	800d6d2 <USBD_StdEPReq+0x168>
 800d6cc:	2b03      	cmp	r3, #3
 800d6ce:	d032      	beq.n	800d736 <USBD_StdEPReq+0x1cc>
 800d6d0:	e097      	b.n	800d802 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d6d2:	7bbb      	ldrb	r3, [r7, #14]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d007      	beq.n	800d6e8 <USBD_StdEPReq+0x17e>
 800d6d8:	7bbb      	ldrb	r3, [r7, #14]
 800d6da:	2b80      	cmp	r3, #128	; 0x80
 800d6dc:	d004      	beq.n	800d6e8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d6de:	6839      	ldr	r1, [r7, #0]
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f000 fbfd 	bl	800dee0 <USBD_CtlError>
                break;
 800d6e6:	e091      	b.n	800d80c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	da0b      	bge.n	800d708 <USBD_StdEPReq+0x19e>
 800d6f0:	7bbb      	ldrb	r3, [r7, #14]
 800d6f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6f6:	4613      	mov	r3, r2
 800d6f8:	009b      	lsls	r3, r3, #2
 800d6fa:	4413      	add	r3, r2
 800d6fc:	009b      	lsls	r3, r3, #2
 800d6fe:	3310      	adds	r3, #16
 800d700:	687a      	ldr	r2, [r7, #4]
 800d702:	4413      	add	r3, r2
 800d704:	3304      	adds	r3, #4
 800d706:	e00b      	b.n	800d720 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d708:	7bbb      	ldrb	r3, [r7, #14]
 800d70a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d70e:	4613      	mov	r3, r2
 800d710:	009b      	lsls	r3, r3, #2
 800d712:	4413      	add	r3, r2
 800d714:	009b      	lsls	r3, r3, #2
 800d716:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d71a:	687a      	ldr	r2, [r7, #4]
 800d71c:	4413      	add	r3, r2
 800d71e:	3304      	adds	r3, #4
 800d720:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	2200      	movs	r2, #0
 800d726:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	2202      	movs	r2, #2
 800d72c:	4619      	mov	r1, r3
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 fc47 	bl	800dfc2 <USBD_CtlSendData>
              break;
 800d734:	e06a      	b.n	800d80c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d736:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	da11      	bge.n	800d762 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d73e:	7bbb      	ldrb	r3, [r7, #14]
 800d740:	f003 020f 	and.w	r2, r3, #15
 800d744:	6879      	ldr	r1, [r7, #4]
 800d746:	4613      	mov	r3, r2
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	4413      	add	r3, r2
 800d74c:	009b      	lsls	r3, r3, #2
 800d74e:	440b      	add	r3, r1
 800d750:	3324      	adds	r3, #36	; 0x24
 800d752:	881b      	ldrh	r3, [r3, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d117      	bne.n	800d788 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d758:	6839      	ldr	r1, [r7, #0]
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 fbc0 	bl	800dee0 <USBD_CtlError>
                  break;
 800d760:	e054      	b.n	800d80c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d762:	7bbb      	ldrb	r3, [r7, #14]
 800d764:	f003 020f 	and.w	r2, r3, #15
 800d768:	6879      	ldr	r1, [r7, #4]
 800d76a:	4613      	mov	r3, r2
 800d76c:	009b      	lsls	r3, r3, #2
 800d76e:	4413      	add	r3, r2
 800d770:	009b      	lsls	r3, r3, #2
 800d772:	440b      	add	r3, r1
 800d774:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d778:	881b      	ldrh	r3, [r3, #0]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d104      	bne.n	800d788 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d77e:	6839      	ldr	r1, [r7, #0]
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 fbad 	bl	800dee0 <USBD_CtlError>
                  break;
 800d786:	e041      	b.n	800d80c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d788:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	da0b      	bge.n	800d7a8 <USBD_StdEPReq+0x23e>
 800d790:	7bbb      	ldrb	r3, [r7, #14]
 800d792:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d796:	4613      	mov	r3, r2
 800d798:	009b      	lsls	r3, r3, #2
 800d79a:	4413      	add	r3, r2
 800d79c:	009b      	lsls	r3, r3, #2
 800d79e:	3310      	adds	r3, #16
 800d7a0:	687a      	ldr	r2, [r7, #4]
 800d7a2:	4413      	add	r3, r2
 800d7a4:	3304      	adds	r3, #4
 800d7a6:	e00b      	b.n	800d7c0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d7a8:	7bbb      	ldrb	r3, [r7, #14]
 800d7aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d7ae:	4613      	mov	r3, r2
 800d7b0:	009b      	lsls	r3, r3, #2
 800d7b2:	4413      	add	r3, r2
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d7ba:	687a      	ldr	r2, [r7, #4]
 800d7bc:	4413      	add	r3, r2
 800d7be:	3304      	adds	r3, #4
 800d7c0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d7c2:	7bbb      	ldrb	r3, [r7, #14]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d002      	beq.n	800d7ce <USBD_StdEPReq+0x264>
 800d7c8:	7bbb      	ldrb	r3, [r7, #14]
 800d7ca:	2b80      	cmp	r3, #128	; 0x80
 800d7cc:	d103      	bne.n	800d7d6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	601a      	str	r2, [r3, #0]
 800d7d4:	e00e      	b.n	800d7f4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d7d6:	7bbb      	ldrb	r3, [r7, #14]
 800d7d8:	4619      	mov	r1, r3
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f001 f880 	bl	800e8e0 <USBD_LL_IsStallEP>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d003      	beq.n	800d7ee <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	601a      	str	r2, [r3, #0]
 800d7ec:	e002      	b.n	800d7f4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	2202      	movs	r2, #2
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f000 fbe1 	bl	800dfc2 <USBD_CtlSendData>
              break;
 800d800:	e004      	b.n	800d80c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d802:	6839      	ldr	r1, [r7, #0]
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f000 fb6b 	bl	800dee0 <USBD_CtlError>
              break;
 800d80a:	bf00      	nop
          }
          break;
 800d80c:	e004      	b.n	800d818 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d80e:	6839      	ldr	r1, [r7, #0]
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f000 fb65 	bl	800dee0 <USBD_CtlError>
          break;
 800d816:	bf00      	nop
      }
      break;
 800d818:	e004      	b.n	800d824 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d81a:	6839      	ldr	r1, [r7, #0]
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f000 fb5f 	bl	800dee0 <USBD_CtlError>
      break;
 800d822:	bf00      	nop
  }

  return ret;
 800d824:	7bfb      	ldrb	r3, [r7, #15]
}
 800d826:	4618      	mov	r0, r3
 800d828:	3710      	adds	r7, #16
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
	...

0800d830 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b084      	sub	sp, #16
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d83a:	2300      	movs	r3, #0
 800d83c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d83e:	2300      	movs	r3, #0
 800d840:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d842:	2300      	movs	r3, #0
 800d844:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	885b      	ldrh	r3, [r3, #2]
 800d84a:	0a1b      	lsrs	r3, r3, #8
 800d84c:	b29b      	uxth	r3, r3
 800d84e:	3b01      	subs	r3, #1
 800d850:	2b0e      	cmp	r3, #14
 800d852:	f200 8152 	bhi.w	800dafa <USBD_GetDescriptor+0x2ca>
 800d856:	a201      	add	r2, pc, #4	; (adr r2, 800d85c <USBD_GetDescriptor+0x2c>)
 800d858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d85c:	0800d8cd 	.word	0x0800d8cd
 800d860:	0800d8e5 	.word	0x0800d8e5
 800d864:	0800d925 	.word	0x0800d925
 800d868:	0800dafb 	.word	0x0800dafb
 800d86c:	0800dafb 	.word	0x0800dafb
 800d870:	0800da9b 	.word	0x0800da9b
 800d874:	0800dac7 	.word	0x0800dac7
 800d878:	0800dafb 	.word	0x0800dafb
 800d87c:	0800dafb 	.word	0x0800dafb
 800d880:	0800dafb 	.word	0x0800dafb
 800d884:	0800dafb 	.word	0x0800dafb
 800d888:	0800dafb 	.word	0x0800dafb
 800d88c:	0800dafb 	.word	0x0800dafb
 800d890:	0800dafb 	.word	0x0800dafb
 800d894:	0800d899 	.word	0x0800d899
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d89e:	69db      	ldr	r3, [r3, #28]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d00b      	beq.n	800d8bc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8aa:	69db      	ldr	r3, [r3, #28]
 800d8ac:	687a      	ldr	r2, [r7, #4]
 800d8ae:	7c12      	ldrb	r2, [r2, #16]
 800d8b0:	f107 0108 	add.w	r1, r7, #8
 800d8b4:	4610      	mov	r0, r2
 800d8b6:	4798      	blx	r3
 800d8b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8ba:	e126      	b.n	800db0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d8bc:	6839      	ldr	r1, [r7, #0]
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f000 fb0e 	bl	800dee0 <USBD_CtlError>
        err++;
 800d8c4:	7afb      	ldrb	r3, [r7, #11]
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	72fb      	strb	r3, [r7, #11]
      break;
 800d8ca:	e11e      	b.n	800db0a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	687a      	ldr	r2, [r7, #4]
 800d8d6:	7c12      	ldrb	r2, [r2, #16]
 800d8d8:	f107 0108 	add.w	r1, r7, #8
 800d8dc:	4610      	mov	r0, r2
 800d8de:	4798      	blx	r3
 800d8e0:	60f8      	str	r0, [r7, #12]
      break;
 800d8e2:	e112      	b.n	800db0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	7c1b      	ldrb	r3, [r3, #16]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d10d      	bne.n	800d908 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8f4:	f107 0208 	add.w	r2, r7, #8
 800d8f8:	4610      	mov	r0, r2
 800d8fa:	4798      	blx	r3
 800d8fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	3301      	adds	r3, #1
 800d902:	2202      	movs	r2, #2
 800d904:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d906:	e100      	b.n	800db0a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d910:	f107 0208 	add.w	r2, r7, #8
 800d914:	4610      	mov	r0, r2
 800d916:	4798      	blx	r3
 800d918:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	3301      	adds	r3, #1
 800d91e:	2202      	movs	r2, #2
 800d920:	701a      	strb	r2, [r3, #0]
      break;
 800d922:	e0f2      	b.n	800db0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	885b      	ldrh	r3, [r3, #2]
 800d928:	b2db      	uxtb	r3, r3
 800d92a:	2b05      	cmp	r3, #5
 800d92c:	f200 80ac 	bhi.w	800da88 <USBD_GetDescriptor+0x258>
 800d930:	a201      	add	r2, pc, #4	; (adr r2, 800d938 <USBD_GetDescriptor+0x108>)
 800d932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d936:	bf00      	nop
 800d938:	0800d951 	.word	0x0800d951
 800d93c:	0800d985 	.word	0x0800d985
 800d940:	0800d9b9 	.word	0x0800d9b9
 800d944:	0800d9ed 	.word	0x0800d9ed
 800d948:	0800da21 	.word	0x0800da21
 800d94c:	0800da55 	.word	0x0800da55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d00b      	beq.n	800d974 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	687a      	ldr	r2, [r7, #4]
 800d966:	7c12      	ldrb	r2, [r2, #16]
 800d968:	f107 0108 	add.w	r1, r7, #8
 800d96c:	4610      	mov	r0, r2
 800d96e:	4798      	blx	r3
 800d970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d972:	e091      	b.n	800da98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d974:	6839      	ldr	r1, [r7, #0]
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 fab2 	bl	800dee0 <USBD_CtlError>
            err++;
 800d97c:	7afb      	ldrb	r3, [r7, #11]
 800d97e:	3301      	adds	r3, #1
 800d980:	72fb      	strb	r3, [r7, #11]
          break;
 800d982:	e089      	b.n	800da98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d98a:	689b      	ldr	r3, [r3, #8]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d00b      	beq.n	800d9a8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d996:	689b      	ldr	r3, [r3, #8]
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	7c12      	ldrb	r2, [r2, #16]
 800d99c:	f107 0108 	add.w	r1, r7, #8
 800d9a0:	4610      	mov	r0, r2
 800d9a2:	4798      	blx	r3
 800d9a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d9a6:	e077      	b.n	800da98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d9a8:	6839      	ldr	r1, [r7, #0]
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 fa98 	bl	800dee0 <USBD_CtlError>
            err++;
 800d9b0:	7afb      	ldrb	r3, [r7, #11]
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	72fb      	strb	r3, [r7, #11]
          break;
 800d9b6:	e06f      	b.n	800da98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9be:	68db      	ldr	r3, [r3, #12]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d00b      	beq.n	800d9dc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	687a      	ldr	r2, [r7, #4]
 800d9ce:	7c12      	ldrb	r2, [r2, #16]
 800d9d0:	f107 0108 	add.w	r1, r7, #8
 800d9d4:	4610      	mov	r0, r2
 800d9d6:	4798      	blx	r3
 800d9d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d9da:	e05d      	b.n	800da98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d9dc:	6839      	ldr	r1, [r7, #0]
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f000 fa7e 	bl	800dee0 <USBD_CtlError>
            err++;
 800d9e4:	7afb      	ldrb	r3, [r7, #11]
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	72fb      	strb	r3, [r7, #11]
          break;
 800d9ea:	e055      	b.n	800da98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9f2:	691b      	ldr	r3, [r3, #16]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d00b      	beq.n	800da10 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9fe:	691b      	ldr	r3, [r3, #16]
 800da00:	687a      	ldr	r2, [r7, #4]
 800da02:	7c12      	ldrb	r2, [r2, #16]
 800da04:	f107 0108 	add.w	r1, r7, #8
 800da08:	4610      	mov	r0, r2
 800da0a:	4798      	blx	r3
 800da0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da0e:	e043      	b.n	800da98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da10:	6839      	ldr	r1, [r7, #0]
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f000 fa64 	bl	800dee0 <USBD_CtlError>
            err++;
 800da18:	7afb      	ldrb	r3, [r7, #11]
 800da1a:	3301      	adds	r3, #1
 800da1c:	72fb      	strb	r3, [r7, #11]
          break;
 800da1e:	e03b      	b.n	800da98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da26:	695b      	ldr	r3, [r3, #20]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d00b      	beq.n	800da44 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da32:	695b      	ldr	r3, [r3, #20]
 800da34:	687a      	ldr	r2, [r7, #4]
 800da36:	7c12      	ldrb	r2, [r2, #16]
 800da38:	f107 0108 	add.w	r1, r7, #8
 800da3c:	4610      	mov	r0, r2
 800da3e:	4798      	blx	r3
 800da40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da42:	e029      	b.n	800da98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da44:	6839      	ldr	r1, [r7, #0]
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f000 fa4a 	bl	800dee0 <USBD_CtlError>
            err++;
 800da4c:	7afb      	ldrb	r3, [r7, #11]
 800da4e:	3301      	adds	r3, #1
 800da50:	72fb      	strb	r3, [r7, #11]
          break;
 800da52:	e021      	b.n	800da98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da5a:	699b      	ldr	r3, [r3, #24]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d00b      	beq.n	800da78 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da66:	699b      	ldr	r3, [r3, #24]
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	7c12      	ldrb	r2, [r2, #16]
 800da6c:	f107 0108 	add.w	r1, r7, #8
 800da70:	4610      	mov	r0, r2
 800da72:	4798      	blx	r3
 800da74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da76:	e00f      	b.n	800da98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da78:	6839      	ldr	r1, [r7, #0]
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f000 fa30 	bl	800dee0 <USBD_CtlError>
            err++;
 800da80:	7afb      	ldrb	r3, [r7, #11]
 800da82:	3301      	adds	r3, #1
 800da84:	72fb      	strb	r3, [r7, #11]
          break;
 800da86:	e007      	b.n	800da98 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800da88:	6839      	ldr	r1, [r7, #0]
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f000 fa28 	bl	800dee0 <USBD_CtlError>
          err++;
 800da90:	7afb      	ldrb	r3, [r7, #11]
 800da92:	3301      	adds	r3, #1
 800da94:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800da96:	bf00      	nop
      }
      break;
 800da98:	e037      	b.n	800db0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	7c1b      	ldrb	r3, [r3, #16]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d109      	bne.n	800dab6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daaa:	f107 0208 	add.w	r2, r7, #8
 800daae:	4610      	mov	r0, r2
 800dab0:	4798      	blx	r3
 800dab2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dab4:	e029      	b.n	800db0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dab6:	6839      	ldr	r1, [r7, #0]
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f000 fa11 	bl	800dee0 <USBD_CtlError>
        err++;
 800dabe:	7afb      	ldrb	r3, [r7, #11]
 800dac0:	3301      	adds	r3, #1
 800dac2:	72fb      	strb	r3, [r7, #11]
      break;
 800dac4:	e021      	b.n	800db0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	7c1b      	ldrb	r3, [r3, #16]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d10d      	bne.n	800daea <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dad6:	f107 0208 	add.w	r2, r7, #8
 800dada:	4610      	mov	r0, r2
 800dadc:	4798      	blx	r3
 800dade:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	3301      	adds	r3, #1
 800dae4:	2207      	movs	r2, #7
 800dae6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dae8:	e00f      	b.n	800db0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800daea:	6839      	ldr	r1, [r7, #0]
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f000 f9f7 	bl	800dee0 <USBD_CtlError>
        err++;
 800daf2:	7afb      	ldrb	r3, [r7, #11]
 800daf4:	3301      	adds	r3, #1
 800daf6:	72fb      	strb	r3, [r7, #11]
      break;
 800daf8:	e007      	b.n	800db0a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800dafa:	6839      	ldr	r1, [r7, #0]
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f000 f9ef 	bl	800dee0 <USBD_CtlError>
      err++;
 800db02:	7afb      	ldrb	r3, [r7, #11]
 800db04:	3301      	adds	r3, #1
 800db06:	72fb      	strb	r3, [r7, #11]
      break;
 800db08:	bf00      	nop
  }

  if (err != 0U)
 800db0a:	7afb      	ldrb	r3, [r7, #11]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d11e      	bne.n	800db4e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	88db      	ldrh	r3, [r3, #6]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d016      	beq.n	800db46 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800db18:	893b      	ldrh	r3, [r7, #8]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d00e      	beq.n	800db3c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	88da      	ldrh	r2, [r3, #6]
 800db22:	893b      	ldrh	r3, [r7, #8]
 800db24:	4293      	cmp	r3, r2
 800db26:	bf28      	it	cs
 800db28:	4613      	movcs	r3, r2
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800db2e:	893b      	ldrh	r3, [r7, #8]
 800db30:	461a      	mov	r2, r3
 800db32:	68f9      	ldr	r1, [r7, #12]
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f000 fa44 	bl	800dfc2 <USBD_CtlSendData>
 800db3a:	e009      	b.n	800db50 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800db3c:	6839      	ldr	r1, [r7, #0]
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 f9ce 	bl	800dee0 <USBD_CtlError>
 800db44:	e004      	b.n	800db50 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f000 fa95 	bl	800e076 <USBD_CtlSendStatus>
 800db4c:	e000      	b.n	800db50 <USBD_GetDescriptor+0x320>
    return;
 800db4e:	bf00      	nop
  }
}
 800db50:	3710      	adds	r7, #16
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}
 800db56:	bf00      	nop

0800db58 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b084      	sub	sp, #16
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	889b      	ldrh	r3, [r3, #4]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d131      	bne.n	800dbce <USBD_SetAddress+0x76>
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	88db      	ldrh	r3, [r3, #6]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d12d      	bne.n	800dbce <USBD_SetAddress+0x76>
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	885b      	ldrh	r3, [r3, #2]
 800db76:	2b7f      	cmp	r3, #127	; 0x7f
 800db78:	d829      	bhi.n	800dbce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	885b      	ldrh	r3, [r3, #2]
 800db7e:	b2db      	uxtb	r3, r3
 800db80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db8c:	b2db      	uxtb	r3, r3
 800db8e:	2b03      	cmp	r3, #3
 800db90:	d104      	bne.n	800db9c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800db92:	6839      	ldr	r1, [r7, #0]
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f000 f9a3 	bl	800dee0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db9a:	e01d      	b.n	800dbd8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	7bfa      	ldrb	r2, [r7, #15]
 800dba0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dba4:	7bfb      	ldrb	r3, [r7, #15]
 800dba6:	4619      	mov	r1, r3
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f000 fec5 	bl	800e938 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f000 fa61 	bl	800e076 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dbb4:	7bfb      	ldrb	r3, [r7, #15]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d004      	beq.n	800dbc4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2202      	movs	r2, #2
 800dbbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbc2:	e009      	b.n	800dbd8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbcc:	e004      	b.n	800dbd8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dbce:	6839      	ldr	r1, [r7, #0]
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f000 f985 	bl	800dee0 <USBD_CtlError>
  }
}
 800dbd6:	bf00      	nop
 800dbd8:	bf00      	nop
 800dbda:	3710      	adds	r7, #16
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b084      	sub	sp, #16
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
 800dbe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbea:	2300      	movs	r3, #0
 800dbec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	885b      	ldrh	r3, [r3, #2]
 800dbf2:	b2da      	uxtb	r2, r3
 800dbf4:	4b4c      	ldr	r3, [pc, #304]	; (800dd28 <USBD_SetConfig+0x148>)
 800dbf6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dbf8:	4b4b      	ldr	r3, [pc, #300]	; (800dd28 <USBD_SetConfig+0x148>)
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d905      	bls.n	800dc0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dc00:	6839      	ldr	r1, [r7, #0]
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 f96c 	bl	800dee0 <USBD_CtlError>
    return USBD_FAIL;
 800dc08:	2303      	movs	r3, #3
 800dc0a:	e088      	b.n	800dd1e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc12:	b2db      	uxtb	r3, r3
 800dc14:	2b02      	cmp	r3, #2
 800dc16:	d002      	beq.n	800dc1e <USBD_SetConfig+0x3e>
 800dc18:	2b03      	cmp	r3, #3
 800dc1a:	d025      	beq.n	800dc68 <USBD_SetConfig+0x88>
 800dc1c:	e071      	b.n	800dd02 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800dc1e:	4b42      	ldr	r3, [pc, #264]	; (800dd28 <USBD_SetConfig+0x148>)
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d01c      	beq.n	800dc60 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800dc26:	4b40      	ldr	r3, [pc, #256]	; (800dd28 <USBD_SetConfig+0x148>)
 800dc28:	781b      	ldrb	r3, [r3, #0]
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dc30:	4b3d      	ldr	r3, [pc, #244]	; (800dd28 <USBD_SetConfig+0x148>)
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	4619      	mov	r1, r3
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f7ff f992 	bl	800cf60 <USBD_SetClassConfig>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dc40:	7bfb      	ldrb	r3, [r7, #15]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d004      	beq.n	800dc50 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800dc46:	6839      	ldr	r1, [r7, #0]
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f000 f949 	bl	800dee0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dc4e:	e065      	b.n	800dd1c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f000 fa10 	bl	800e076 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2203      	movs	r2, #3
 800dc5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dc5e:	e05d      	b.n	800dd1c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f000 fa08 	bl	800e076 <USBD_CtlSendStatus>
      break;
 800dc66:	e059      	b.n	800dd1c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dc68:	4b2f      	ldr	r3, [pc, #188]	; (800dd28 <USBD_SetConfig+0x148>)
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d112      	bne.n	800dc96 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2202      	movs	r2, #2
 800dc74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800dc78:	4b2b      	ldr	r3, [pc, #172]	; (800dd28 <USBD_SetConfig+0x148>)
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dc82:	4b29      	ldr	r3, [pc, #164]	; (800dd28 <USBD_SetConfig+0x148>)
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	4619      	mov	r1, r3
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f7ff f985 	bl	800cf98 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f000 f9f1 	bl	800e076 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dc94:	e042      	b.n	800dd1c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800dc96:	4b24      	ldr	r3, [pc, #144]	; (800dd28 <USBD_SetConfig+0x148>)
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	685b      	ldr	r3, [r3, #4]
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d02a      	beq.n	800dcfa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	4619      	mov	r1, r3
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f7ff f973 	bl	800cf98 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dcb2:	4b1d      	ldr	r3, [pc, #116]	; (800dd28 <USBD_SetConfig+0x148>)
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dcbc:	4b1a      	ldr	r3, [pc, #104]	; (800dd28 <USBD_SetConfig+0x148>)
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	4619      	mov	r1, r3
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f7ff f94c 	bl	800cf60 <USBD_SetClassConfig>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dccc:	7bfb      	ldrb	r3, [r7, #15]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d00f      	beq.n	800dcf2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800dcd2:	6839      	ldr	r1, [r7, #0]
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f000 f903 	bl	800dee0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	4619      	mov	r1, r3
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f7ff f958 	bl	800cf98 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2202      	movs	r2, #2
 800dcec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dcf0:	e014      	b.n	800dd1c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f000 f9bf 	bl	800e076 <USBD_CtlSendStatus>
      break;
 800dcf8:	e010      	b.n	800dd1c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f000 f9bb 	bl	800e076 <USBD_CtlSendStatus>
      break;
 800dd00:	e00c      	b.n	800dd1c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800dd02:	6839      	ldr	r1, [r7, #0]
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f000 f8eb 	bl	800dee0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dd0a:	4b07      	ldr	r3, [pc, #28]	; (800dd28 <USBD_SetConfig+0x148>)
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	4619      	mov	r1, r3
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f7ff f941 	bl	800cf98 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800dd16:	2303      	movs	r3, #3
 800dd18:	73fb      	strb	r3, [r7, #15]
      break;
 800dd1a:	bf00      	nop
  }

  return ret;
 800dd1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3710      	adds	r7, #16
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}
 800dd26:	bf00      	nop
 800dd28:	200037a4 	.word	0x200037a4

0800dd2c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b082      	sub	sp, #8
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	88db      	ldrh	r3, [r3, #6]
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d004      	beq.n	800dd48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dd3e:	6839      	ldr	r1, [r7, #0]
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f000 f8cd 	bl	800dee0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dd46:	e023      	b.n	800dd90 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	2b02      	cmp	r3, #2
 800dd52:	dc02      	bgt.n	800dd5a <USBD_GetConfig+0x2e>
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	dc03      	bgt.n	800dd60 <USBD_GetConfig+0x34>
 800dd58:	e015      	b.n	800dd86 <USBD_GetConfig+0x5a>
 800dd5a:	2b03      	cmp	r3, #3
 800dd5c:	d00b      	beq.n	800dd76 <USBD_GetConfig+0x4a>
 800dd5e:	e012      	b.n	800dd86 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2200      	movs	r2, #0
 800dd64:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	3308      	adds	r3, #8
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f000 f927 	bl	800dfc2 <USBD_CtlSendData>
        break;
 800dd74:	e00c      	b.n	800dd90 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	3304      	adds	r3, #4
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f000 f91f 	bl	800dfc2 <USBD_CtlSendData>
        break;
 800dd84:	e004      	b.n	800dd90 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dd86:	6839      	ldr	r1, [r7, #0]
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f000 f8a9 	bl	800dee0 <USBD_CtlError>
        break;
 800dd8e:	bf00      	nop
}
 800dd90:	bf00      	nop
 800dd92:	3708      	adds	r7, #8
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dda8:	b2db      	uxtb	r3, r3
 800ddaa:	3b01      	subs	r3, #1
 800ddac:	2b02      	cmp	r3, #2
 800ddae:	d81e      	bhi.n	800ddee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	88db      	ldrh	r3, [r3, #6]
 800ddb4:	2b02      	cmp	r3, #2
 800ddb6:	d004      	beq.n	800ddc2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ddb8:	6839      	ldr	r1, [r7, #0]
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f000 f890 	bl	800dee0 <USBD_CtlError>
        break;
 800ddc0:	e01a      	b.n	800ddf8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d005      	beq.n	800ddde <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	68db      	ldr	r3, [r3, #12]
 800ddd6:	f043 0202 	orr.w	r2, r3, #2
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	330c      	adds	r3, #12
 800dde2:	2202      	movs	r2, #2
 800dde4:	4619      	mov	r1, r3
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f000 f8eb 	bl	800dfc2 <USBD_CtlSendData>
      break;
 800ddec:	e004      	b.n	800ddf8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ddee:	6839      	ldr	r1, [r7, #0]
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f000 f875 	bl	800dee0 <USBD_CtlError>
      break;
 800ddf6:	bf00      	nop
  }
}
 800ddf8:	bf00      	nop
 800ddfa:	3708      	adds	r7, #8
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b082      	sub	sp, #8
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
 800de08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	885b      	ldrh	r3, [r3, #2]
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d106      	bne.n	800de20 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2201      	movs	r2, #1
 800de16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f000 f92b 	bl	800e076 <USBD_CtlSendStatus>
  }
}
 800de20:	bf00      	nop
 800de22:	3708      	adds	r7, #8
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de38:	b2db      	uxtb	r3, r3
 800de3a:	3b01      	subs	r3, #1
 800de3c:	2b02      	cmp	r3, #2
 800de3e:	d80b      	bhi.n	800de58 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	885b      	ldrh	r3, [r3, #2]
 800de44:	2b01      	cmp	r3, #1
 800de46:	d10c      	bne.n	800de62 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2200      	movs	r2, #0
 800de4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f000 f910 	bl	800e076 <USBD_CtlSendStatus>
      }
      break;
 800de56:	e004      	b.n	800de62 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800de58:	6839      	ldr	r1, [r7, #0]
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f000 f840 	bl	800dee0 <USBD_CtlError>
      break;
 800de60:	e000      	b.n	800de64 <USBD_ClrFeature+0x3c>
      break;
 800de62:	bf00      	nop
  }
}
 800de64:	bf00      	nop
 800de66:	3708      	adds	r7, #8
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}

0800de6c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b084      	sub	sp, #16
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	781a      	ldrb	r2, [r3, #0]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	3301      	adds	r3, #1
 800de86:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	781a      	ldrb	r2, [r3, #0]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	3301      	adds	r3, #1
 800de94:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800de96:	68f8      	ldr	r0, [r7, #12]
 800de98:	f7ff fa92 	bl	800d3c0 <SWAPBYTE>
 800de9c:	4603      	mov	r3, r0
 800de9e:	461a      	mov	r2, r3
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	3301      	adds	r3, #1
 800dea8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	3301      	adds	r3, #1
 800deae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	f7ff fa85 	bl	800d3c0 <SWAPBYTE>
 800deb6:	4603      	mov	r3, r0
 800deb8:	461a      	mov	r2, r3
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	3301      	adds	r3, #1
 800dec2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	3301      	adds	r3, #1
 800dec8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800deca:	68f8      	ldr	r0, [r7, #12]
 800decc:	f7ff fa78 	bl	800d3c0 <SWAPBYTE>
 800ded0:	4603      	mov	r3, r0
 800ded2:	461a      	mov	r2, r3
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	80da      	strh	r2, [r3, #6]
}
 800ded8:	bf00      	nop
 800deda:	3710      	adds	r7, #16
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b082      	sub	sp, #8
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800deea:	2180      	movs	r1, #128	; 0x80
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f000 fcb9 	bl	800e864 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800def2:	2100      	movs	r1, #0
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f000 fcb5 	bl	800e864 <USBD_LL_StallEP>
}
 800defa:	bf00      	nop
 800defc:	3708      	adds	r7, #8
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}

0800df02 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800df02:	b580      	push	{r7, lr}
 800df04:	b086      	sub	sp, #24
 800df06:	af00      	add	r7, sp, #0
 800df08:	60f8      	str	r0, [r7, #12]
 800df0a:	60b9      	str	r1, [r7, #8]
 800df0c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800df0e:	2300      	movs	r3, #0
 800df10:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d036      	beq.n	800df86 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800df1c:	6938      	ldr	r0, [r7, #16]
 800df1e:	f000 f836 	bl	800df8e <USBD_GetLen>
 800df22:	4603      	mov	r3, r0
 800df24:	3301      	adds	r3, #1
 800df26:	b29b      	uxth	r3, r3
 800df28:	005b      	lsls	r3, r3, #1
 800df2a:	b29a      	uxth	r2, r3
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800df30:	7dfb      	ldrb	r3, [r7, #23]
 800df32:	68ba      	ldr	r2, [r7, #8]
 800df34:	4413      	add	r3, r2
 800df36:	687a      	ldr	r2, [r7, #4]
 800df38:	7812      	ldrb	r2, [r2, #0]
 800df3a:	701a      	strb	r2, [r3, #0]
  idx++;
 800df3c:	7dfb      	ldrb	r3, [r7, #23]
 800df3e:	3301      	adds	r3, #1
 800df40:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800df42:	7dfb      	ldrb	r3, [r7, #23]
 800df44:	68ba      	ldr	r2, [r7, #8]
 800df46:	4413      	add	r3, r2
 800df48:	2203      	movs	r2, #3
 800df4a:	701a      	strb	r2, [r3, #0]
  idx++;
 800df4c:	7dfb      	ldrb	r3, [r7, #23]
 800df4e:	3301      	adds	r3, #1
 800df50:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800df52:	e013      	b.n	800df7c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800df54:	7dfb      	ldrb	r3, [r7, #23]
 800df56:	68ba      	ldr	r2, [r7, #8]
 800df58:	4413      	add	r3, r2
 800df5a:	693a      	ldr	r2, [r7, #16]
 800df5c:	7812      	ldrb	r2, [r2, #0]
 800df5e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800df60:	693b      	ldr	r3, [r7, #16]
 800df62:	3301      	adds	r3, #1
 800df64:	613b      	str	r3, [r7, #16]
    idx++;
 800df66:	7dfb      	ldrb	r3, [r7, #23]
 800df68:	3301      	adds	r3, #1
 800df6a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800df6c:	7dfb      	ldrb	r3, [r7, #23]
 800df6e:	68ba      	ldr	r2, [r7, #8]
 800df70:	4413      	add	r3, r2
 800df72:	2200      	movs	r2, #0
 800df74:	701a      	strb	r2, [r3, #0]
    idx++;
 800df76:	7dfb      	ldrb	r3, [r7, #23]
 800df78:	3301      	adds	r3, #1
 800df7a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800df7c:	693b      	ldr	r3, [r7, #16]
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d1e7      	bne.n	800df54 <USBD_GetString+0x52>
 800df84:	e000      	b.n	800df88 <USBD_GetString+0x86>
    return;
 800df86:	bf00      	nop
  }
}
 800df88:	3718      	adds	r7, #24
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}

0800df8e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800df8e:	b480      	push	{r7}
 800df90:	b085      	sub	sp, #20
 800df92:	af00      	add	r7, sp, #0
 800df94:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800df96:	2300      	movs	r3, #0
 800df98:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800df9e:	e005      	b.n	800dfac <USBD_GetLen+0x1e>
  {
    len++;
 800dfa0:	7bfb      	ldrb	r3, [r7, #15]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d1f5      	bne.n	800dfa0 <USBD_GetLen+0x12>
  }

  return len;
 800dfb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3714      	adds	r7, #20
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc0:	4770      	bx	lr

0800dfc2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dfc2:	b580      	push	{r7, lr}
 800dfc4:	b084      	sub	sp, #16
 800dfc6:	af00      	add	r7, sp, #0
 800dfc8:	60f8      	str	r0, [r7, #12]
 800dfca:	60b9      	str	r1, [r7, #8]
 800dfcc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2202      	movs	r2, #2
 800dfd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	687a      	ldr	r2, [r7, #4]
 800dfda:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	687a      	ldr	r2, [r7, #4]
 800dfe0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	68ba      	ldr	r2, [r7, #8]
 800dfe6:	2100      	movs	r1, #0
 800dfe8:	68f8      	ldr	r0, [r7, #12]
 800dfea:	f000 fcc4 	bl	800e976 <USBD_LL_Transmit>

  return USBD_OK;
 800dfee:	2300      	movs	r3, #0
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3710      	adds	r7, #16
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	60f8      	str	r0, [r7, #12]
 800e000:	60b9      	str	r1, [r7, #8]
 800e002:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	68ba      	ldr	r2, [r7, #8]
 800e008:	2100      	movs	r1, #0
 800e00a:	68f8      	ldr	r0, [r7, #12]
 800e00c:	f000 fcb3 	bl	800e976 <USBD_LL_Transmit>

  return USBD_OK;
 800e010:	2300      	movs	r3, #0
}
 800e012:	4618      	mov	r0, r3
 800e014:	3710      	adds	r7, #16
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}

0800e01a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e01a:	b580      	push	{r7, lr}
 800e01c:	b084      	sub	sp, #16
 800e01e:	af00      	add	r7, sp, #0
 800e020:	60f8      	str	r0, [r7, #12]
 800e022:	60b9      	str	r1, [r7, #8]
 800e024:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	2203      	movs	r2, #3
 800e02a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	687a      	ldr	r2, [r7, #4]
 800e032:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	68ba      	ldr	r2, [r7, #8]
 800e042:	2100      	movs	r1, #0
 800e044:	68f8      	ldr	r0, [r7, #12]
 800e046:	f000 fcb7 	bl	800e9b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e04a:	2300      	movs	r3, #0
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3710      	adds	r7, #16
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b084      	sub	sp, #16
 800e058:	af00      	add	r7, sp, #0
 800e05a:	60f8      	str	r0, [r7, #12]
 800e05c:	60b9      	str	r1, [r7, #8]
 800e05e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	68ba      	ldr	r2, [r7, #8]
 800e064:	2100      	movs	r1, #0
 800e066:	68f8      	ldr	r0, [r7, #12]
 800e068:	f000 fca6 	bl	800e9b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e06c:	2300      	movs	r3, #0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3710      	adds	r7, #16
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}

0800e076 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e076:	b580      	push	{r7, lr}
 800e078:	b082      	sub	sp, #8
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2204      	movs	r2, #4
 800e082:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e086:	2300      	movs	r3, #0
 800e088:	2200      	movs	r2, #0
 800e08a:	2100      	movs	r1, #0
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f000 fc72 	bl	800e976 <USBD_LL_Transmit>

  return USBD_OK;
 800e092:	2300      	movs	r3, #0
}
 800e094:	4618      	mov	r0, r3
 800e096:	3708      	adds	r7, #8
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b082      	sub	sp, #8
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2205      	movs	r2, #5
 800e0a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	2100      	movs	r1, #0
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f000 fc80 	bl	800e9b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e0b8:	2300      	movs	r3, #0
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3708      	adds	r7, #8
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
	...

0800e0c4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	4912      	ldr	r1, [pc, #72]	; (800e114 <MX_USB_Device_Init+0x50>)
 800e0cc:	4812      	ldr	r0, [pc, #72]	; (800e118 <MX_USB_Device_Init+0x54>)
 800e0ce:	f7fe fed9 	bl	800ce84 <USBD_Init>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d001      	beq.n	800e0dc <MX_USB_Device_Init+0x18>
    Error_Handler();
 800e0d8:	f7f4 f938 	bl	800234c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800e0dc:	490f      	ldr	r1, [pc, #60]	; (800e11c <MX_USB_Device_Init+0x58>)
 800e0de:	480e      	ldr	r0, [pc, #56]	; (800e118 <MX_USB_Device_Init+0x54>)
 800e0e0:	f7fe ff00 	bl	800cee4 <USBD_RegisterClass>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d001      	beq.n	800e0ee <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800e0ea:	f7f4 f92f 	bl	800234c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800e0ee:	490c      	ldr	r1, [pc, #48]	; (800e120 <MX_USB_Device_Init+0x5c>)
 800e0f0:	4809      	ldr	r0, [pc, #36]	; (800e118 <MX_USB_Device_Init+0x54>)
 800e0f2:	f7fe fe21 	bl	800cd38 <USBD_CDC_RegisterInterface>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d001      	beq.n	800e100 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800e0fc:	f7f4 f926 	bl	800234c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e100:	4805      	ldr	r0, [pc, #20]	; (800e118 <MX_USB_Device_Init+0x54>)
 800e102:	f7fe ff16 	bl	800cf32 <USBD_Start>
 800e106:	4603      	mov	r3, r0
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d001      	beq.n	800e110 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800e10c:	f7f4 f91e 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800e110:	bf00      	nop
 800e112:	bd80      	pop	{r7, pc}
 800e114:	2000013c 	.word	0x2000013c
 800e118:	200037a8 	.word	0x200037a8
 800e11c:	20000024 	.word	0x20000024
 800e120:	20000128 	.word	0x20000128

0800e124 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e128:	2200      	movs	r2, #0
 800e12a:	4905      	ldr	r1, [pc, #20]	; (800e140 <CDC_Init_FS+0x1c>)
 800e12c:	4805      	ldr	r0, [pc, #20]	; (800e144 <CDC_Init_FS+0x20>)
 800e12e:	f7fe fe18 	bl	800cd62 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e132:	4905      	ldr	r1, [pc, #20]	; (800e148 <CDC_Init_FS+0x24>)
 800e134:	4803      	ldr	r0, [pc, #12]	; (800e144 <CDC_Init_FS+0x20>)
 800e136:	f7fe fe32 	bl	800cd9e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e13a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	bd80      	pop	{r7, pc}
 800e140:	20004278 	.word	0x20004278
 800e144:	200037a8 	.word	0x200037a8
 800e148:	20003a78 	.word	0x20003a78

0800e14c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e14c:	b480      	push	{r7}
 800e14e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e150:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e152:	4618      	mov	r0, r3
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr

0800e15c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b083      	sub	sp, #12
 800e160:	af00      	add	r7, sp, #0
 800e162:	4603      	mov	r3, r0
 800e164:	6039      	str	r1, [r7, #0]
 800e166:	71fb      	strb	r3, [r7, #7]
 800e168:	4613      	mov	r3, r2
 800e16a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e16c:	79fb      	ldrb	r3, [r7, #7]
 800e16e:	2b23      	cmp	r3, #35	; 0x23
 800e170:	d84a      	bhi.n	800e208 <CDC_Control_FS+0xac>
 800e172:	a201      	add	r2, pc, #4	; (adr r2, 800e178 <CDC_Control_FS+0x1c>)
 800e174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e178:	0800e209 	.word	0x0800e209
 800e17c:	0800e209 	.word	0x0800e209
 800e180:	0800e209 	.word	0x0800e209
 800e184:	0800e209 	.word	0x0800e209
 800e188:	0800e209 	.word	0x0800e209
 800e18c:	0800e209 	.word	0x0800e209
 800e190:	0800e209 	.word	0x0800e209
 800e194:	0800e209 	.word	0x0800e209
 800e198:	0800e209 	.word	0x0800e209
 800e19c:	0800e209 	.word	0x0800e209
 800e1a0:	0800e209 	.word	0x0800e209
 800e1a4:	0800e209 	.word	0x0800e209
 800e1a8:	0800e209 	.word	0x0800e209
 800e1ac:	0800e209 	.word	0x0800e209
 800e1b0:	0800e209 	.word	0x0800e209
 800e1b4:	0800e209 	.word	0x0800e209
 800e1b8:	0800e209 	.word	0x0800e209
 800e1bc:	0800e209 	.word	0x0800e209
 800e1c0:	0800e209 	.word	0x0800e209
 800e1c4:	0800e209 	.word	0x0800e209
 800e1c8:	0800e209 	.word	0x0800e209
 800e1cc:	0800e209 	.word	0x0800e209
 800e1d0:	0800e209 	.word	0x0800e209
 800e1d4:	0800e209 	.word	0x0800e209
 800e1d8:	0800e209 	.word	0x0800e209
 800e1dc:	0800e209 	.word	0x0800e209
 800e1e0:	0800e209 	.word	0x0800e209
 800e1e4:	0800e209 	.word	0x0800e209
 800e1e8:	0800e209 	.word	0x0800e209
 800e1ec:	0800e209 	.word	0x0800e209
 800e1f0:	0800e209 	.word	0x0800e209
 800e1f4:	0800e209 	.word	0x0800e209
 800e1f8:	0800e209 	.word	0x0800e209
 800e1fc:	0800e209 	.word	0x0800e209
 800e200:	0800e209 	.word	0x0800e209
 800e204:	0800e209 	.word	0x0800e209
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e208:	bf00      	nop
  }

  return (USBD_OK);
 800e20a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	370c      	adds	r7, #12
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b084      	sub	sp, #16
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e222:	6879      	ldr	r1, [r7, #4]
 800e224:	4811      	ldr	r0, [pc, #68]	; (800e26c <CDC_Receive_FS+0x54>)
 800e226:	f7fe fdba 	bl	800cd9e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e22a:	4810      	ldr	r0, [pc, #64]	; (800e26c <CDC_Receive_FS+0x54>)
 800e22c:	f7fe fe00 	bl	800ce30 <USBD_CDC_ReceivePacket>

  memset (rx_buffer, '\0', USB_RX_BUFFER_SIZE);  // clear the buffer
 800e230:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e234:	2100      	movs	r1, #0
 800e236:	480e      	ldr	r0, [pc, #56]	; (800e270 <CDC_Receive_FS+0x58>)
 800e238:	f001 fa8d 	bl	800f756 <memset>
  uint8_t len = (uint8_t)*Len;
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	73fb      	strb	r3, [r7, #15]
  memcpy(rx_buffer, Buf, len);  // copy the data to the buffer
 800e242:	7bfb      	ldrb	r3, [r7, #15]
 800e244:	461a      	mov	r2, r3
 800e246:	6879      	ldr	r1, [r7, #4]
 800e248:	4809      	ldr	r0, [pc, #36]	; (800e270 <CDC_Receive_FS+0x58>)
 800e24a:	f001 fb72 	bl	800f932 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800e24e:	7bfb      	ldrb	r3, [r7, #15]
 800e250:	461a      	mov	r2, r3
 800e252:	2100      	movs	r1, #0
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f001 fa7e 	bl	800f756 <memset>

  prog_state = CFG_RECEIVED;
 800e25a:	4b06      	ldr	r3, [pc, #24]	; (800e274 <CDC_Receive_FS+0x5c>)
 800e25c:	2201      	movs	r2, #1
 800e25e:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800e260:	2300      	movs	r3, #0

  /* USER CODE END 6 */
}
 800e262:	4618      	mov	r0, r3
 800e264:	3710      	adds	r7, #16
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	200037a8 	.word	0x200037a8
 800e270:	200026b4 	.word	0x200026b4
 800e274:	200027b4 	.word	0x200027b4

0800e278 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	460b      	mov	r3, r1
 800e282:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e284:	2300      	movs	r3, #0
 800e286:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e288:	4b0d      	ldr	r3, [pc, #52]	; (800e2c0 <CDC_Transmit_FS+0x48>)
 800e28a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e28e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e296:	2b00      	cmp	r3, #0
 800e298:	d001      	beq.n	800e29e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e29a:	2301      	movs	r3, #1
 800e29c:	e00b      	b.n	800e2b6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e29e:	887b      	ldrh	r3, [r7, #2]
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	6879      	ldr	r1, [r7, #4]
 800e2a4:	4806      	ldr	r0, [pc, #24]	; (800e2c0 <CDC_Transmit_FS+0x48>)
 800e2a6:	f7fe fd5c 	bl	800cd62 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e2aa:	4805      	ldr	r0, [pc, #20]	; (800e2c0 <CDC_Transmit_FS+0x48>)
 800e2ac:	f7fe fd90 	bl	800cdd0 <USBD_CDC_TransmitPacket>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3710      	adds	r7, #16
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	200037a8 	.word	0x200037a8

0800e2c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b087      	sub	sp, #28
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	60f8      	str	r0, [r7, #12]
 800e2cc:	60b9      	str	r1, [r7, #8]
 800e2ce:	4613      	mov	r3, r2
 800e2d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e2d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	371c      	adds	r7, #28
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr
	...

0800e2e8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	6039      	str	r1, [r7, #0]
 800e2f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	2212      	movs	r2, #18
 800e2f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800e2fa:	4b03      	ldr	r3, [pc, #12]	; (800e308 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	370c      	adds	r7, #12
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr
 800e308:	2000015c 	.word	0x2000015c

0800e30c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b083      	sub	sp, #12
 800e310:	af00      	add	r7, sp, #0
 800e312:	4603      	mov	r3, r0
 800e314:	6039      	str	r1, [r7, #0]
 800e316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	2204      	movs	r2, #4
 800e31c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e31e:	4b03      	ldr	r3, [pc, #12]	; (800e32c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800e320:	4618      	mov	r0, r3
 800e322:	370c      	adds	r7, #12
 800e324:	46bd      	mov	sp, r7
 800e326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32a:	4770      	bx	lr
 800e32c:	20000170 	.word	0x20000170

0800e330 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af00      	add	r7, sp, #0
 800e336:	4603      	mov	r3, r0
 800e338:	6039      	str	r1, [r7, #0]
 800e33a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e33c:	79fb      	ldrb	r3, [r7, #7]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d105      	bne.n	800e34e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e342:	683a      	ldr	r2, [r7, #0]
 800e344:	4907      	ldr	r1, [pc, #28]	; (800e364 <USBD_CDC_ProductStrDescriptor+0x34>)
 800e346:	4808      	ldr	r0, [pc, #32]	; (800e368 <USBD_CDC_ProductStrDescriptor+0x38>)
 800e348:	f7ff fddb 	bl	800df02 <USBD_GetString>
 800e34c:	e004      	b.n	800e358 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e34e:	683a      	ldr	r2, [r7, #0]
 800e350:	4904      	ldr	r1, [pc, #16]	; (800e364 <USBD_CDC_ProductStrDescriptor+0x34>)
 800e352:	4805      	ldr	r0, [pc, #20]	; (800e368 <USBD_CDC_ProductStrDescriptor+0x38>)
 800e354:	f7ff fdd5 	bl	800df02 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e358:	4b02      	ldr	r3, [pc, #8]	; (800e364 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3708      	adds	r7, #8
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}
 800e362:	bf00      	nop
 800e364:	20004a78 	.word	0x20004a78
 800e368:	08012928 	.word	0x08012928

0800e36c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b082      	sub	sp, #8
 800e370:	af00      	add	r7, sp, #0
 800e372:	4603      	mov	r3, r0
 800e374:	6039      	str	r1, [r7, #0]
 800e376:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e378:	683a      	ldr	r2, [r7, #0]
 800e37a:	4904      	ldr	r1, [pc, #16]	; (800e38c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800e37c:	4804      	ldr	r0, [pc, #16]	; (800e390 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800e37e:	f7ff fdc0 	bl	800df02 <USBD_GetString>
  return USBD_StrDesc;
 800e382:	4b02      	ldr	r3, [pc, #8]	; (800e38c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800e384:	4618      	mov	r0, r3
 800e386:	3708      	adds	r7, #8
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}
 800e38c:	20004a78 	.word	0x20004a78
 800e390:	08012938 	.word	0x08012938

0800e394 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	4603      	mov	r3, r0
 800e39c:	6039      	str	r1, [r7, #0]
 800e39e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	221a      	movs	r2, #26
 800e3a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e3a6:	f000 f843 	bl	800e430 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e3aa:	4b02      	ldr	r3, [pc, #8]	; (800e3b4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3708      	adds	r7, #8
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}
 800e3b4:	20000174 	.word	0x20000174

0800e3b8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b082      	sub	sp, #8
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	4603      	mov	r3, r0
 800e3c0:	6039      	str	r1, [r7, #0]
 800e3c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e3c4:	79fb      	ldrb	r3, [r7, #7]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d105      	bne.n	800e3d6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e3ca:	683a      	ldr	r2, [r7, #0]
 800e3cc:	4907      	ldr	r1, [pc, #28]	; (800e3ec <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e3ce:	4808      	ldr	r0, [pc, #32]	; (800e3f0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e3d0:	f7ff fd97 	bl	800df02 <USBD_GetString>
 800e3d4:	e004      	b.n	800e3e0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e3d6:	683a      	ldr	r2, [r7, #0]
 800e3d8:	4904      	ldr	r1, [pc, #16]	; (800e3ec <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e3da:	4805      	ldr	r0, [pc, #20]	; (800e3f0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e3dc:	f7ff fd91 	bl	800df02 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e3e0:	4b02      	ldr	r3, [pc, #8]	; (800e3ec <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3708      	adds	r7, #8
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}
 800e3ea:	bf00      	nop
 800e3ec:	20004a78 	.word	0x20004a78
 800e3f0:	0801293c 	.word	0x0801293c

0800e3f4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b082      	sub	sp, #8
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	6039      	str	r1, [r7, #0]
 800e3fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e400:	79fb      	ldrb	r3, [r7, #7]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d105      	bne.n	800e412 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e406:	683a      	ldr	r2, [r7, #0]
 800e408:	4907      	ldr	r1, [pc, #28]	; (800e428 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e40a:	4808      	ldr	r0, [pc, #32]	; (800e42c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e40c:	f7ff fd79 	bl	800df02 <USBD_GetString>
 800e410:	e004      	b.n	800e41c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e412:	683a      	ldr	r2, [r7, #0]
 800e414:	4904      	ldr	r1, [pc, #16]	; (800e428 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e416:	4805      	ldr	r0, [pc, #20]	; (800e42c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e418:	f7ff fd73 	bl	800df02 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e41c:	4b02      	ldr	r3, [pc, #8]	; (800e428 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800e41e:	4618      	mov	r0, r3
 800e420:	3708      	adds	r7, #8
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}
 800e426:	bf00      	nop
 800e428:	20004a78 	.word	0x20004a78
 800e42c:	08012948 	.word	0x08012948

0800e430 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e436:	4b0f      	ldr	r3, [pc, #60]	; (800e474 <Get_SerialNum+0x44>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e43c:	4b0e      	ldr	r3, [pc, #56]	; (800e478 <Get_SerialNum+0x48>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e442:	4b0e      	ldr	r3, [pc, #56]	; (800e47c <Get_SerialNum+0x4c>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e448:	68fa      	ldr	r2, [r7, #12]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	4413      	add	r3, r2
 800e44e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d009      	beq.n	800e46a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e456:	2208      	movs	r2, #8
 800e458:	4909      	ldr	r1, [pc, #36]	; (800e480 <Get_SerialNum+0x50>)
 800e45a:	68f8      	ldr	r0, [r7, #12]
 800e45c:	f000 f814 	bl	800e488 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e460:	2204      	movs	r2, #4
 800e462:	4908      	ldr	r1, [pc, #32]	; (800e484 <Get_SerialNum+0x54>)
 800e464:	68b8      	ldr	r0, [r7, #8]
 800e466:	f000 f80f 	bl	800e488 <IntToUnicode>
  }
}
 800e46a:	bf00      	nop
 800e46c:	3710      	adds	r7, #16
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}
 800e472:	bf00      	nop
 800e474:	1fff7590 	.word	0x1fff7590
 800e478:	1fff7594 	.word	0x1fff7594
 800e47c:	1fff7598 	.word	0x1fff7598
 800e480:	20000176 	.word	0x20000176
 800e484:	20000186 	.word	0x20000186

0800e488 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e488:	b480      	push	{r7}
 800e48a:	b087      	sub	sp, #28
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	60f8      	str	r0, [r7, #12]
 800e490:	60b9      	str	r1, [r7, #8]
 800e492:	4613      	mov	r3, r2
 800e494:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e496:	2300      	movs	r3, #0
 800e498:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e49a:	2300      	movs	r3, #0
 800e49c:	75fb      	strb	r3, [r7, #23]
 800e49e:	e027      	b.n	800e4f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	0f1b      	lsrs	r3, r3, #28
 800e4a4:	2b09      	cmp	r3, #9
 800e4a6:	d80b      	bhi.n	800e4c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	0f1b      	lsrs	r3, r3, #28
 800e4ac:	b2da      	uxtb	r2, r3
 800e4ae:	7dfb      	ldrb	r3, [r7, #23]
 800e4b0:	005b      	lsls	r3, r3, #1
 800e4b2:	4619      	mov	r1, r3
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	440b      	add	r3, r1
 800e4b8:	3230      	adds	r2, #48	; 0x30
 800e4ba:	b2d2      	uxtb	r2, r2
 800e4bc:	701a      	strb	r2, [r3, #0]
 800e4be:	e00a      	b.n	800e4d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	0f1b      	lsrs	r3, r3, #28
 800e4c4:	b2da      	uxtb	r2, r3
 800e4c6:	7dfb      	ldrb	r3, [r7, #23]
 800e4c8:	005b      	lsls	r3, r3, #1
 800e4ca:	4619      	mov	r1, r3
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	440b      	add	r3, r1
 800e4d0:	3237      	adds	r2, #55	; 0x37
 800e4d2:	b2d2      	uxtb	r2, r2
 800e4d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	011b      	lsls	r3, r3, #4
 800e4da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e4dc:	7dfb      	ldrb	r3, [r7, #23]
 800e4de:	005b      	lsls	r3, r3, #1
 800e4e0:	3301      	adds	r3, #1
 800e4e2:	68ba      	ldr	r2, [r7, #8]
 800e4e4:	4413      	add	r3, r2
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e4ea:	7dfb      	ldrb	r3, [r7, #23]
 800e4ec:	3301      	adds	r3, #1
 800e4ee:	75fb      	strb	r3, [r7, #23]
 800e4f0:	7dfa      	ldrb	r2, [r7, #23]
 800e4f2:	79fb      	ldrb	r3, [r7, #7]
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d3d3      	bcc.n	800e4a0 <IntToUnicode+0x18>
  }
}
 800e4f8:	bf00      	nop
 800e4fa:	bf00      	nop
 800e4fc:	371c      	adds	r7, #28
 800e4fe:	46bd      	mov	sp, r7
 800e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e504:	4770      	bx	lr
	...

0800e508 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b098      	sub	sp, #96	; 0x60
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e510:	f107 030c 	add.w	r3, r7, #12
 800e514:	2254      	movs	r2, #84	; 0x54
 800e516:	2100      	movs	r1, #0
 800e518:	4618      	mov	r0, r3
 800e51a:	f001 f91c 	bl	800f756 <memset>
  if(pcdHandle->Instance==USB)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	4a19      	ldr	r2, [pc, #100]	; (800e588 <HAL_PCD_MspInit+0x80>)
 800e524:	4293      	cmp	r3, r2
 800e526:	d12a      	bne.n	800e57e <HAL_PCD_MspInit+0x76>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e52c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e52e:	2300      	movs	r3, #0
 800e530:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e532:	f107 030c 	add.w	r3, r7, #12
 800e536:	4618      	mov	r0, r3
 800e538:	f7fa ffba 	bl	80094b0 <HAL_RCCEx_PeriphCLKConfig>
 800e53c:	4603      	mov	r3, r0
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d001      	beq.n	800e546 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800e542:	f7f3 ff03 	bl	800234c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e546:	4b11      	ldr	r3, [pc, #68]	; (800e58c <HAL_PCD_MspInit+0x84>)
 800e548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e54a:	4a10      	ldr	r2, [pc, #64]	; (800e58c <HAL_PCD_MspInit+0x84>)
 800e54c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e550:	6593      	str	r3, [r2, #88]	; 0x58
 800e552:	4b0e      	ldr	r3, [pc, #56]	; (800e58c <HAL_PCD_MspInit+0x84>)
 800e554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e55a:	60bb      	str	r3, [r7, #8]
 800e55c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800e55e:	2200      	movs	r2, #0
 800e560:	2100      	movs	r1, #0
 800e562:	2013      	movs	r0, #19
 800e564:	f7f6 fcc1 	bl	8004eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800e568:	2013      	movs	r0, #19
 800e56a:	f7f6 fcd8 	bl	8004f1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800e56e:	2200      	movs	r2, #0
 800e570:	2100      	movs	r1, #0
 800e572:	2014      	movs	r0, #20
 800e574:	f7f6 fcb9 	bl	8004eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800e578:	2014      	movs	r0, #20
 800e57a:	f7f6 fcd0 	bl	8004f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e57e:	bf00      	nop
 800e580:	3760      	adds	r7, #96	; 0x60
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
 800e586:	bf00      	nop
 800e588:	40005c00 	.word	0x40005c00
 800e58c:	40021000 	.word	0x40021000

0800e590 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	4610      	mov	r0, r2
 800e5a8:	f7fe fd0e 	bl	800cfc8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800e5ac:	bf00      	nop
 800e5ae:	3708      	adds	r7, #8
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	460b      	mov	r3, r1
 800e5be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800e5c6:	78fa      	ldrb	r2, [r7, #3]
 800e5c8:	6879      	ldr	r1, [r7, #4]
 800e5ca:	4613      	mov	r3, r2
 800e5cc:	009b      	lsls	r3, r3, #2
 800e5ce:	4413      	add	r3, r2
 800e5d0:	00db      	lsls	r3, r3, #3
 800e5d2:	440b      	add	r3, r1
 800e5d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	78fb      	ldrb	r3, [r7, #3]
 800e5dc:	4619      	mov	r1, r3
 800e5de:	f7fe fd48 	bl	800d072 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800e5e2:	bf00      	nop
 800e5e4:	3708      	adds	r7, #8
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}

0800e5ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5ea:	b580      	push	{r7, lr}
 800e5ec:	b082      	sub	sp, #8
 800e5ee:	af00      	add	r7, sp, #0
 800e5f0:	6078      	str	r0, [r7, #4]
 800e5f2:	460b      	mov	r3, r1
 800e5f4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800e5fc:	78fa      	ldrb	r2, [r7, #3]
 800e5fe:	6879      	ldr	r1, [r7, #4]
 800e600:	4613      	mov	r3, r2
 800e602:	009b      	lsls	r3, r3, #2
 800e604:	4413      	add	r3, r2
 800e606:	00db      	lsls	r3, r3, #3
 800e608:	440b      	add	r3, r1
 800e60a:	3324      	adds	r3, #36	; 0x24
 800e60c:	681a      	ldr	r2, [r3, #0]
 800e60e:	78fb      	ldrb	r3, [r7, #3]
 800e610:	4619      	mov	r1, r3
 800e612:	f7fe fd91 	bl	800d138 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800e616:	bf00      	nop
 800e618:	3708      	adds	r7, #8
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}

0800e61e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e61e:	b580      	push	{r7, lr}
 800e620:	b082      	sub	sp, #8
 800e622:	af00      	add	r7, sp, #0
 800e624:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7fe fea5 	bl	800d37c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e632:	bf00      	nop
 800e634:	3708      	adds	r7, #8
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}

0800e63a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e63a:	b580      	push	{r7, lr}
 800e63c:	b084      	sub	sp, #16
 800e63e:	af00      	add	r7, sp, #0
 800e640:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e642:	2301      	movs	r3, #1
 800e644:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	795b      	ldrb	r3, [r3, #5]
 800e64a:	2b02      	cmp	r3, #2
 800e64c:	d001      	beq.n	800e652 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e64e:	f7f3 fe7d 	bl	800234c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e658:	7bfa      	ldrb	r2, [r7, #15]
 800e65a:	4611      	mov	r1, r2
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7fe fe4f 	bl	800d300 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e668:	4618      	mov	r0, r3
 800e66a:	f7fe fdfb 	bl	800d264 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e66e:	bf00      	nop
 800e670:	3710      	adds	r7, #16
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
	...

0800e678 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e686:	4618      	mov	r0, r3
 800e688:	f7fe fe4a 	bl	800d320 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	7a5b      	ldrb	r3, [r3, #9]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d005      	beq.n	800e6a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e694:	4b04      	ldr	r3, [pc, #16]	; (800e6a8 <HAL_PCD_SuspendCallback+0x30>)
 800e696:	691b      	ldr	r3, [r3, #16]
 800e698:	4a03      	ldr	r2, [pc, #12]	; (800e6a8 <HAL_PCD_SuspendCallback+0x30>)
 800e69a:	f043 0306 	orr.w	r3, r3, #6
 800e69e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e6a0:	bf00      	nop
 800e6a2:	3708      	adds	r7, #8
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}
 800e6a8:	e000ed00 	.word	0xe000ed00

0800e6ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b082      	sub	sp, #8
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	7a5b      	ldrb	r3, [r3, #9]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d007      	beq.n	800e6cc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e6bc:	4b08      	ldr	r3, [pc, #32]	; (800e6e0 <HAL_PCD_ResumeCallback+0x34>)
 800e6be:	691b      	ldr	r3, [r3, #16]
 800e6c0:	4a07      	ldr	r2, [pc, #28]	; (800e6e0 <HAL_PCD_ResumeCallback+0x34>)
 800e6c2:	f023 0306 	bic.w	r3, r3, #6
 800e6c6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e6c8:	f000 f9f8 	bl	800eabc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7fe fe3a 	bl	800d34c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e6d8:	bf00      	nop
 800e6da:	3708      	adds	r7, #8
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}
 800e6e0:	e000ed00 	.word	0xe000ed00

0800e6e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b082      	sub	sp, #8
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800e6ec:	4a2b      	ldr	r2, [pc, #172]	; (800e79c <USBD_LL_Init+0xb8>)
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	4a29      	ldr	r2, [pc, #164]	; (800e79c <USBD_LL_Init+0xb8>)
 800e6f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800e6fc:	4b27      	ldr	r3, [pc, #156]	; (800e79c <USBD_LL_Init+0xb8>)
 800e6fe:	4a28      	ldr	r2, [pc, #160]	; (800e7a0 <USBD_LL_Init+0xbc>)
 800e700:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e702:	4b26      	ldr	r3, [pc, #152]	; (800e79c <USBD_LL_Init+0xb8>)
 800e704:	2208      	movs	r2, #8
 800e706:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e708:	4b24      	ldr	r3, [pc, #144]	; (800e79c <USBD_LL_Init+0xb8>)
 800e70a:	2202      	movs	r2, #2
 800e70c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e70e:	4b23      	ldr	r3, [pc, #140]	; (800e79c <USBD_LL_Init+0xb8>)
 800e710:	2202      	movs	r2, #2
 800e712:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e714:	4b21      	ldr	r3, [pc, #132]	; (800e79c <USBD_LL_Init+0xb8>)
 800e716:	2200      	movs	r2, #0
 800e718:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e71a:	4b20      	ldr	r3, [pc, #128]	; (800e79c <USBD_LL_Init+0xb8>)
 800e71c:	2200      	movs	r2, #0
 800e71e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e720:	4b1e      	ldr	r3, [pc, #120]	; (800e79c <USBD_LL_Init+0xb8>)
 800e722:	2200      	movs	r2, #0
 800e724:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e726:	4b1d      	ldr	r3, [pc, #116]	; (800e79c <USBD_LL_Init+0xb8>)
 800e728:	2200      	movs	r2, #0
 800e72a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e72c:	481b      	ldr	r0, [pc, #108]	; (800e79c <USBD_LL_Init+0xb8>)
 800e72e:	f7f8 fbd4 	bl	8006eda <HAL_PCD_Init>
 800e732:	4603      	mov	r3, r0
 800e734:	2b00      	cmp	r3, #0
 800e736:	d001      	beq.n	800e73c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800e738:	f7f3 fe08 	bl	800234c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e742:	2318      	movs	r3, #24
 800e744:	2200      	movs	r2, #0
 800e746:	2100      	movs	r1, #0
 800e748:	f7fa f88e 	bl	8008868 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e752:	2358      	movs	r3, #88	; 0x58
 800e754:	2200      	movs	r2, #0
 800e756:	2180      	movs	r1, #128	; 0x80
 800e758:	f7fa f886 	bl	8008868 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e762:	23c0      	movs	r3, #192	; 0xc0
 800e764:	2200      	movs	r2, #0
 800e766:	2181      	movs	r1, #129	; 0x81
 800e768:	f7fa f87e 	bl	8008868 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e772:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e776:	2200      	movs	r2, #0
 800e778:	2101      	movs	r1, #1
 800e77a:	f7fa f875 	bl	8008868 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e784:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e788:	2200      	movs	r2, #0
 800e78a:	2182      	movs	r1, #130	; 0x82
 800e78c:	f7fa f86c 	bl	8008868 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e790:	2300      	movs	r3, #0
}
 800e792:	4618      	mov	r0, r3
 800e794:	3708      	adds	r7, #8
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
 800e79a:	bf00      	nop
 800e79c:	20004c78 	.word	0x20004c78
 800e7a0:	40005c00 	.word	0x40005c00

0800e7a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b084      	sub	sp, #16
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7f8 fc5b 	bl	8007076 <HAL_PCD_Start>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7c4:	7bfb      	ldrb	r3, [r7, #15]
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f000 f97e 	bl	800eac8 <USBD_Get_USB_Status>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3710      	adds	r7, #16
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}

0800e7da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e7da:	b580      	push	{r7, lr}
 800e7dc:	b084      	sub	sp, #16
 800e7de:	af00      	add	r7, sp, #0
 800e7e0:	6078      	str	r0, [r7, #4]
 800e7e2:	4608      	mov	r0, r1
 800e7e4:	4611      	mov	r1, r2
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	70fb      	strb	r3, [r7, #3]
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	70bb      	strb	r3, [r7, #2]
 800e7f0:	4613      	mov	r3, r2
 800e7f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e802:	78bb      	ldrb	r3, [r7, #2]
 800e804:	883a      	ldrh	r2, [r7, #0]
 800e806:	78f9      	ldrb	r1, [r7, #3]
 800e808:	f7f8 fda2 	bl	8007350 <HAL_PCD_EP_Open>
 800e80c:	4603      	mov	r3, r0
 800e80e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e810:	7bfb      	ldrb	r3, [r7, #15]
 800e812:	4618      	mov	r0, r3
 800e814:	f000 f958 	bl	800eac8 <USBD_Get_USB_Status>
 800e818:	4603      	mov	r3, r0
 800e81a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e81c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3710      	adds	r7, #16
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}

0800e826 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e826:	b580      	push	{r7, lr}
 800e828:	b084      	sub	sp, #16
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	6078      	str	r0, [r7, #4]
 800e82e:	460b      	mov	r3, r1
 800e830:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e832:	2300      	movs	r3, #0
 800e834:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e836:	2300      	movs	r3, #0
 800e838:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e840:	78fa      	ldrb	r2, [r7, #3]
 800e842:	4611      	mov	r1, r2
 800e844:	4618      	mov	r0, r3
 800e846:	f7f8 fde0 	bl	800740a <HAL_PCD_EP_Close>
 800e84a:	4603      	mov	r3, r0
 800e84c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e84e:	7bfb      	ldrb	r3, [r7, #15]
 800e850:	4618      	mov	r0, r3
 800e852:	f000 f939 	bl	800eac8 <USBD_Get_USB_Status>
 800e856:	4603      	mov	r3, r0
 800e858:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e85a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	3710      	adds	r7, #16
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}

0800e864 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b084      	sub	sp, #16
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	460b      	mov	r3, r1
 800e86e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e870:	2300      	movs	r3, #0
 800e872:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e874:	2300      	movs	r3, #0
 800e876:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e87e:	78fa      	ldrb	r2, [r7, #3]
 800e880:	4611      	mov	r1, r2
 800e882:	4618      	mov	r0, r3
 800e884:	f7f8 fe89 	bl	800759a <HAL_PCD_EP_SetStall>
 800e888:	4603      	mov	r3, r0
 800e88a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e88c:	7bfb      	ldrb	r3, [r7, #15]
 800e88e:	4618      	mov	r0, r3
 800e890:	f000 f91a 	bl	800eac8 <USBD_Get_USB_Status>
 800e894:	4603      	mov	r3, r0
 800e896:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e898:	7bbb      	ldrb	r3, [r7, #14]
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3710      	adds	r7, #16
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}

0800e8a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e8a2:	b580      	push	{r7, lr}
 800e8a4:	b084      	sub	sp, #16
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	6078      	str	r0, [r7, #4]
 800e8aa:	460b      	mov	r3, r1
 800e8ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e8bc:	78fa      	ldrb	r2, [r7, #3]
 800e8be:	4611      	mov	r1, r2
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7f8 febc 	bl	800763e <HAL_PCD_EP_ClrStall>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8ca:	7bfb      	ldrb	r3, [r7, #15]
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f000 f8fb 	bl	800eac8 <USBD_Get_USB_Status>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e8d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3710      	adds	r7, #16
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b085      	sub	sp, #20
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
 800e8e8:	460b      	mov	r3, r1
 800e8ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e8f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e8f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	da0b      	bge.n	800e914 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e8fc:	78fb      	ldrb	r3, [r7, #3]
 800e8fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e902:	68f9      	ldr	r1, [r7, #12]
 800e904:	4613      	mov	r3, r2
 800e906:	009b      	lsls	r3, r3, #2
 800e908:	4413      	add	r3, r2
 800e90a:	00db      	lsls	r3, r3, #3
 800e90c:	440b      	add	r3, r1
 800e90e:	3312      	adds	r3, #18
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	e00b      	b.n	800e92c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e914:	78fb      	ldrb	r3, [r7, #3]
 800e916:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e91a:	68f9      	ldr	r1, [r7, #12]
 800e91c:	4613      	mov	r3, r2
 800e91e:	009b      	lsls	r3, r3, #2
 800e920:	4413      	add	r3, r2
 800e922:	00db      	lsls	r3, r3, #3
 800e924:	440b      	add	r3, r1
 800e926:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800e92a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3714      	adds	r7, #20
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr

0800e938 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b084      	sub	sp, #16
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
 800e940:	460b      	mov	r3, r1
 800e942:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e944:	2300      	movs	r3, #0
 800e946:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e948:	2300      	movs	r3, #0
 800e94a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e952:	78fa      	ldrb	r2, [r7, #3]
 800e954:	4611      	mov	r1, r2
 800e956:	4618      	mov	r0, r3
 800e958:	f7f8 fcd6 	bl	8007308 <HAL_PCD_SetAddress>
 800e95c:	4603      	mov	r3, r0
 800e95e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e960:	7bfb      	ldrb	r3, [r7, #15]
 800e962:	4618      	mov	r0, r3
 800e964:	f000 f8b0 	bl	800eac8 <USBD_Get_USB_Status>
 800e968:	4603      	mov	r3, r0
 800e96a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e96c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3710      	adds	r7, #16
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}

0800e976 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e976:	b580      	push	{r7, lr}
 800e978:	b086      	sub	sp, #24
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	60f8      	str	r0, [r7, #12]
 800e97e:	607a      	str	r2, [r7, #4]
 800e980:	603b      	str	r3, [r7, #0]
 800e982:	460b      	mov	r3, r1
 800e984:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e986:	2300      	movs	r3, #0
 800e988:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e98a:	2300      	movs	r3, #0
 800e98c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e994:	7af9      	ldrb	r1, [r7, #11]
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	687a      	ldr	r2, [r7, #4]
 800e99a:	f7f8 fdc7 	bl	800752c <HAL_PCD_EP_Transmit>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9a2:	7dfb      	ldrb	r3, [r7, #23]
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f000 f88f 	bl	800eac8 <USBD_Get_USB_Status>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e9ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3718      	adds	r7, #24
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b086      	sub	sp, #24
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	60f8      	str	r0, [r7, #12]
 800e9c0:	607a      	str	r2, [r7, #4]
 800e9c2:	603b      	str	r3, [r7, #0]
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e9d6:	7af9      	ldrb	r1, [r7, #11]
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	687a      	ldr	r2, [r7, #4]
 800e9dc:	f7f8 fd5d 	bl	800749a <HAL_PCD_EP_Receive>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9e4:	7dfb      	ldrb	r3, [r7, #23]
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f000 f86e 	bl	800eac8 <USBD_Get_USB_Status>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e9f0:	7dbb      	ldrb	r3, [r7, #22]
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3718      	adds	r7, #24
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}

0800e9fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e9fa:	b580      	push	{r7, lr}
 800e9fc:	b082      	sub	sp, #8
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	6078      	str	r0, [r7, #4]
 800ea02:	460b      	mov	r3, r1
 800ea04:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ea0c:	78fa      	ldrb	r2, [r7, #3]
 800ea0e:	4611      	mov	r1, r2
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7f8 fd73 	bl	80074fc <HAL_PCD_EP_GetRxCount>
 800ea16:	4603      	mov	r3, r0
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3708      	adds	r7, #8
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	460b      	mov	r3, r1
 800ea2a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ea2c:	78fb      	ldrb	r3, [r7, #3]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d002      	beq.n	800ea38 <HAL_PCDEx_LPM_Callback+0x18>
 800ea32:	2b01      	cmp	r3, #1
 800ea34:	d013      	beq.n	800ea5e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800ea36:	e023      	b.n	800ea80 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	7a5b      	ldrb	r3, [r3, #9]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d007      	beq.n	800ea50 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ea40:	f000 f83c 	bl	800eabc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ea44:	4b10      	ldr	r3, [pc, #64]	; (800ea88 <HAL_PCDEx_LPM_Callback+0x68>)
 800ea46:	691b      	ldr	r3, [r3, #16]
 800ea48:	4a0f      	ldr	r2, [pc, #60]	; (800ea88 <HAL_PCDEx_LPM_Callback+0x68>)
 800ea4a:	f023 0306 	bic.w	r3, r3, #6
 800ea4e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ea56:	4618      	mov	r0, r3
 800ea58:	f7fe fc78 	bl	800d34c <USBD_LL_Resume>
    break;
 800ea5c:	e010      	b.n	800ea80 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7fe fc5b 	bl	800d320 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	7a5b      	ldrb	r3, [r3, #9]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d005      	beq.n	800ea7e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ea72:	4b05      	ldr	r3, [pc, #20]	; (800ea88 <HAL_PCDEx_LPM_Callback+0x68>)
 800ea74:	691b      	ldr	r3, [r3, #16]
 800ea76:	4a04      	ldr	r2, [pc, #16]	; (800ea88 <HAL_PCDEx_LPM_Callback+0x68>)
 800ea78:	f043 0306 	orr.w	r3, r3, #6
 800ea7c:	6113      	str	r3, [r2, #16]
    break;
 800ea7e:	bf00      	nop
}
 800ea80:	bf00      	nop
 800ea82:	3708      	adds	r7, #8
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}
 800ea88:	e000ed00 	.word	0xe000ed00

0800ea8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b083      	sub	sp, #12
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ea94:	4b03      	ldr	r3, [pc, #12]	; (800eaa4 <USBD_static_malloc+0x18>)
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	370c      	adds	r7, #12
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr
 800eaa2:	bf00      	nop
 800eaa4:	20004f54 	.word	0x20004f54

0800eaa8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b083      	sub	sp, #12
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]

}
 800eab0:	bf00      	nop
 800eab2:	370c      	adds	r7, #12
 800eab4:	46bd      	mov	sp, r7
 800eab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaba:	4770      	bx	lr

0800eabc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800eac0:	f7f2 f9d0 	bl	8000e64 <SystemClock_Config>
}
 800eac4:	bf00      	nop
 800eac6:	bd80      	pop	{r7, pc}

0800eac8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b085      	sub	sp, #20
 800eacc:	af00      	add	r7, sp, #0
 800eace:	4603      	mov	r3, r0
 800ead0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ead2:	2300      	movs	r3, #0
 800ead4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ead6:	79fb      	ldrb	r3, [r7, #7]
 800ead8:	2b03      	cmp	r3, #3
 800eada:	d817      	bhi.n	800eb0c <USBD_Get_USB_Status+0x44>
 800eadc:	a201      	add	r2, pc, #4	; (adr r2, 800eae4 <USBD_Get_USB_Status+0x1c>)
 800eade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae2:	bf00      	nop
 800eae4:	0800eaf5 	.word	0x0800eaf5
 800eae8:	0800eafb 	.word	0x0800eafb
 800eaec:	0800eb01 	.word	0x0800eb01
 800eaf0:	0800eb07 	.word	0x0800eb07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	73fb      	strb	r3, [r7, #15]
    break;
 800eaf8:	e00b      	b.n	800eb12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eafa:	2303      	movs	r3, #3
 800eafc:	73fb      	strb	r3, [r7, #15]
    break;
 800eafe:	e008      	b.n	800eb12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eb00:	2301      	movs	r3, #1
 800eb02:	73fb      	strb	r3, [r7, #15]
    break;
 800eb04:	e005      	b.n	800eb12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eb06:	2303      	movs	r3, #3
 800eb08:	73fb      	strb	r3, [r7, #15]
    break;
 800eb0a:	e002      	b.n	800eb12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800eb0c:	2303      	movs	r3, #3
 800eb0e:	73fb      	strb	r3, [r7, #15]
    break;
 800eb10:	bf00      	nop
  }
  return usb_status;
 800eb12:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3714      	adds	r7, #20
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr

0800eb20 <atoi>:
 800eb20:	220a      	movs	r2, #10
 800eb22:	2100      	movs	r1, #0
 800eb24:	f000 b882 	b.w	800ec2c <strtol>

0800eb28 <_strtol_l.constprop.0>:
 800eb28:	2b01      	cmp	r3, #1
 800eb2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb2e:	d001      	beq.n	800eb34 <_strtol_l.constprop.0+0xc>
 800eb30:	2b24      	cmp	r3, #36	; 0x24
 800eb32:	d906      	bls.n	800eb42 <_strtol_l.constprop.0+0x1a>
 800eb34:	f000 fed0 	bl	800f8d8 <__errno>
 800eb38:	2316      	movs	r3, #22
 800eb3a:	6003      	str	r3, [r0, #0]
 800eb3c:	2000      	movs	r0, #0
 800eb3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb42:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ec28 <_strtol_l.constprop.0+0x100>
 800eb46:	460d      	mov	r5, r1
 800eb48:	462e      	mov	r6, r5
 800eb4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eb4e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800eb52:	f017 0708 	ands.w	r7, r7, #8
 800eb56:	d1f7      	bne.n	800eb48 <_strtol_l.constprop.0+0x20>
 800eb58:	2c2d      	cmp	r4, #45	; 0x2d
 800eb5a:	d132      	bne.n	800ebc2 <_strtol_l.constprop.0+0x9a>
 800eb5c:	782c      	ldrb	r4, [r5, #0]
 800eb5e:	2701      	movs	r7, #1
 800eb60:	1cb5      	adds	r5, r6, #2
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d05b      	beq.n	800ec1e <_strtol_l.constprop.0+0xf6>
 800eb66:	2b10      	cmp	r3, #16
 800eb68:	d109      	bne.n	800eb7e <_strtol_l.constprop.0+0x56>
 800eb6a:	2c30      	cmp	r4, #48	; 0x30
 800eb6c:	d107      	bne.n	800eb7e <_strtol_l.constprop.0+0x56>
 800eb6e:	782c      	ldrb	r4, [r5, #0]
 800eb70:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800eb74:	2c58      	cmp	r4, #88	; 0x58
 800eb76:	d14d      	bne.n	800ec14 <_strtol_l.constprop.0+0xec>
 800eb78:	786c      	ldrb	r4, [r5, #1]
 800eb7a:	2310      	movs	r3, #16
 800eb7c:	3502      	adds	r5, #2
 800eb7e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800eb82:	f108 38ff 	add.w	r8, r8, #4294967295
 800eb86:	f04f 0e00 	mov.w	lr, #0
 800eb8a:	fbb8 f9f3 	udiv	r9, r8, r3
 800eb8e:	4676      	mov	r6, lr
 800eb90:	fb03 8a19 	mls	sl, r3, r9, r8
 800eb94:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800eb98:	f1bc 0f09 	cmp.w	ip, #9
 800eb9c:	d816      	bhi.n	800ebcc <_strtol_l.constprop.0+0xa4>
 800eb9e:	4664      	mov	r4, ip
 800eba0:	42a3      	cmp	r3, r4
 800eba2:	dd24      	ble.n	800ebee <_strtol_l.constprop.0+0xc6>
 800eba4:	f1be 3fff 	cmp.w	lr, #4294967295
 800eba8:	d008      	beq.n	800ebbc <_strtol_l.constprop.0+0x94>
 800ebaa:	45b1      	cmp	r9, r6
 800ebac:	d31c      	bcc.n	800ebe8 <_strtol_l.constprop.0+0xc0>
 800ebae:	d101      	bne.n	800ebb4 <_strtol_l.constprop.0+0x8c>
 800ebb0:	45a2      	cmp	sl, r4
 800ebb2:	db19      	blt.n	800ebe8 <_strtol_l.constprop.0+0xc0>
 800ebb4:	fb06 4603 	mla	r6, r6, r3, r4
 800ebb8:	f04f 0e01 	mov.w	lr, #1
 800ebbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ebc0:	e7e8      	b.n	800eb94 <_strtol_l.constprop.0+0x6c>
 800ebc2:	2c2b      	cmp	r4, #43	; 0x2b
 800ebc4:	bf04      	itt	eq
 800ebc6:	782c      	ldrbeq	r4, [r5, #0]
 800ebc8:	1cb5      	addeq	r5, r6, #2
 800ebca:	e7ca      	b.n	800eb62 <_strtol_l.constprop.0+0x3a>
 800ebcc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ebd0:	f1bc 0f19 	cmp.w	ip, #25
 800ebd4:	d801      	bhi.n	800ebda <_strtol_l.constprop.0+0xb2>
 800ebd6:	3c37      	subs	r4, #55	; 0x37
 800ebd8:	e7e2      	b.n	800eba0 <_strtol_l.constprop.0+0x78>
 800ebda:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ebde:	f1bc 0f19 	cmp.w	ip, #25
 800ebe2:	d804      	bhi.n	800ebee <_strtol_l.constprop.0+0xc6>
 800ebe4:	3c57      	subs	r4, #87	; 0x57
 800ebe6:	e7db      	b.n	800eba0 <_strtol_l.constprop.0+0x78>
 800ebe8:	f04f 3eff 	mov.w	lr, #4294967295
 800ebec:	e7e6      	b.n	800ebbc <_strtol_l.constprop.0+0x94>
 800ebee:	f1be 3fff 	cmp.w	lr, #4294967295
 800ebf2:	d105      	bne.n	800ec00 <_strtol_l.constprop.0+0xd8>
 800ebf4:	2322      	movs	r3, #34	; 0x22
 800ebf6:	6003      	str	r3, [r0, #0]
 800ebf8:	4646      	mov	r6, r8
 800ebfa:	b942      	cbnz	r2, 800ec0e <_strtol_l.constprop.0+0xe6>
 800ebfc:	4630      	mov	r0, r6
 800ebfe:	e79e      	b.n	800eb3e <_strtol_l.constprop.0+0x16>
 800ec00:	b107      	cbz	r7, 800ec04 <_strtol_l.constprop.0+0xdc>
 800ec02:	4276      	negs	r6, r6
 800ec04:	2a00      	cmp	r2, #0
 800ec06:	d0f9      	beq.n	800ebfc <_strtol_l.constprop.0+0xd4>
 800ec08:	f1be 0f00 	cmp.w	lr, #0
 800ec0c:	d000      	beq.n	800ec10 <_strtol_l.constprop.0+0xe8>
 800ec0e:	1e69      	subs	r1, r5, #1
 800ec10:	6011      	str	r1, [r2, #0]
 800ec12:	e7f3      	b.n	800ebfc <_strtol_l.constprop.0+0xd4>
 800ec14:	2430      	movs	r4, #48	; 0x30
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d1b1      	bne.n	800eb7e <_strtol_l.constprop.0+0x56>
 800ec1a:	2308      	movs	r3, #8
 800ec1c:	e7af      	b.n	800eb7e <_strtol_l.constprop.0+0x56>
 800ec1e:	2c30      	cmp	r4, #48	; 0x30
 800ec20:	d0a5      	beq.n	800eb6e <_strtol_l.constprop.0+0x46>
 800ec22:	230a      	movs	r3, #10
 800ec24:	e7ab      	b.n	800eb7e <_strtol_l.constprop.0+0x56>
 800ec26:	bf00      	nop
 800ec28:	08012af1 	.word	0x08012af1

0800ec2c <strtol>:
 800ec2c:	4613      	mov	r3, r2
 800ec2e:	460a      	mov	r2, r1
 800ec30:	4601      	mov	r1, r0
 800ec32:	4802      	ldr	r0, [pc, #8]	; (800ec3c <strtol+0x10>)
 800ec34:	6800      	ldr	r0, [r0, #0]
 800ec36:	f7ff bf77 	b.w	800eb28 <_strtol_l.constprop.0>
 800ec3a:	bf00      	nop
 800ec3c:	200001e8 	.word	0x200001e8

0800ec40 <__cvt>:
 800ec40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec44:	ec55 4b10 	vmov	r4, r5, d0
 800ec48:	2d00      	cmp	r5, #0
 800ec4a:	460e      	mov	r6, r1
 800ec4c:	4619      	mov	r1, r3
 800ec4e:	462b      	mov	r3, r5
 800ec50:	bfbb      	ittet	lt
 800ec52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ec56:	461d      	movlt	r5, r3
 800ec58:	2300      	movge	r3, #0
 800ec5a:	232d      	movlt	r3, #45	; 0x2d
 800ec5c:	700b      	strb	r3, [r1, #0]
 800ec5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ec64:	4691      	mov	r9, r2
 800ec66:	f023 0820 	bic.w	r8, r3, #32
 800ec6a:	bfbc      	itt	lt
 800ec6c:	4622      	movlt	r2, r4
 800ec6e:	4614      	movlt	r4, r2
 800ec70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ec74:	d005      	beq.n	800ec82 <__cvt+0x42>
 800ec76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ec7a:	d100      	bne.n	800ec7e <__cvt+0x3e>
 800ec7c:	3601      	adds	r6, #1
 800ec7e:	2102      	movs	r1, #2
 800ec80:	e000      	b.n	800ec84 <__cvt+0x44>
 800ec82:	2103      	movs	r1, #3
 800ec84:	ab03      	add	r3, sp, #12
 800ec86:	9301      	str	r3, [sp, #4]
 800ec88:	ab02      	add	r3, sp, #8
 800ec8a:	9300      	str	r3, [sp, #0]
 800ec8c:	ec45 4b10 	vmov	d0, r4, r5
 800ec90:	4653      	mov	r3, sl
 800ec92:	4632      	mov	r2, r6
 800ec94:	f000 ff04 	bl	800faa0 <_dtoa_r>
 800ec98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ec9c:	4607      	mov	r7, r0
 800ec9e:	d102      	bne.n	800eca6 <__cvt+0x66>
 800eca0:	f019 0f01 	tst.w	r9, #1
 800eca4:	d022      	beq.n	800ecec <__cvt+0xac>
 800eca6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ecaa:	eb07 0906 	add.w	r9, r7, r6
 800ecae:	d110      	bne.n	800ecd2 <__cvt+0x92>
 800ecb0:	783b      	ldrb	r3, [r7, #0]
 800ecb2:	2b30      	cmp	r3, #48	; 0x30
 800ecb4:	d10a      	bne.n	800eccc <__cvt+0x8c>
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	2300      	movs	r3, #0
 800ecba:	4620      	mov	r0, r4
 800ecbc:	4629      	mov	r1, r5
 800ecbe:	f7f1 ff3b 	bl	8000b38 <__aeabi_dcmpeq>
 800ecc2:	b918      	cbnz	r0, 800eccc <__cvt+0x8c>
 800ecc4:	f1c6 0601 	rsb	r6, r6, #1
 800ecc8:	f8ca 6000 	str.w	r6, [sl]
 800eccc:	f8da 3000 	ldr.w	r3, [sl]
 800ecd0:	4499      	add	r9, r3
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	4620      	mov	r0, r4
 800ecd8:	4629      	mov	r1, r5
 800ecda:	f7f1 ff2d 	bl	8000b38 <__aeabi_dcmpeq>
 800ecde:	b108      	cbz	r0, 800ece4 <__cvt+0xa4>
 800ece0:	f8cd 900c 	str.w	r9, [sp, #12]
 800ece4:	2230      	movs	r2, #48	; 0x30
 800ece6:	9b03      	ldr	r3, [sp, #12]
 800ece8:	454b      	cmp	r3, r9
 800ecea:	d307      	bcc.n	800ecfc <__cvt+0xbc>
 800ecec:	9b03      	ldr	r3, [sp, #12]
 800ecee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ecf0:	1bdb      	subs	r3, r3, r7
 800ecf2:	4638      	mov	r0, r7
 800ecf4:	6013      	str	r3, [r2, #0]
 800ecf6:	b004      	add	sp, #16
 800ecf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecfc:	1c59      	adds	r1, r3, #1
 800ecfe:	9103      	str	r1, [sp, #12]
 800ed00:	701a      	strb	r2, [r3, #0]
 800ed02:	e7f0      	b.n	800ece6 <__cvt+0xa6>

0800ed04 <__exponent>:
 800ed04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed06:	4603      	mov	r3, r0
 800ed08:	2900      	cmp	r1, #0
 800ed0a:	bfb8      	it	lt
 800ed0c:	4249      	neglt	r1, r1
 800ed0e:	f803 2b02 	strb.w	r2, [r3], #2
 800ed12:	bfb4      	ite	lt
 800ed14:	222d      	movlt	r2, #45	; 0x2d
 800ed16:	222b      	movge	r2, #43	; 0x2b
 800ed18:	2909      	cmp	r1, #9
 800ed1a:	7042      	strb	r2, [r0, #1]
 800ed1c:	dd2a      	ble.n	800ed74 <__exponent+0x70>
 800ed1e:	f10d 0207 	add.w	r2, sp, #7
 800ed22:	4617      	mov	r7, r2
 800ed24:	260a      	movs	r6, #10
 800ed26:	4694      	mov	ip, r2
 800ed28:	fb91 f5f6 	sdiv	r5, r1, r6
 800ed2c:	fb06 1415 	mls	r4, r6, r5, r1
 800ed30:	3430      	adds	r4, #48	; 0x30
 800ed32:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ed36:	460c      	mov	r4, r1
 800ed38:	2c63      	cmp	r4, #99	; 0x63
 800ed3a:	f102 32ff 	add.w	r2, r2, #4294967295
 800ed3e:	4629      	mov	r1, r5
 800ed40:	dcf1      	bgt.n	800ed26 <__exponent+0x22>
 800ed42:	3130      	adds	r1, #48	; 0x30
 800ed44:	f1ac 0402 	sub.w	r4, ip, #2
 800ed48:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ed4c:	1c41      	adds	r1, r0, #1
 800ed4e:	4622      	mov	r2, r4
 800ed50:	42ba      	cmp	r2, r7
 800ed52:	d30a      	bcc.n	800ed6a <__exponent+0x66>
 800ed54:	f10d 0209 	add.w	r2, sp, #9
 800ed58:	eba2 020c 	sub.w	r2, r2, ip
 800ed5c:	42bc      	cmp	r4, r7
 800ed5e:	bf88      	it	hi
 800ed60:	2200      	movhi	r2, #0
 800ed62:	4413      	add	r3, r2
 800ed64:	1a18      	subs	r0, r3, r0
 800ed66:	b003      	add	sp, #12
 800ed68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed6a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ed6e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ed72:	e7ed      	b.n	800ed50 <__exponent+0x4c>
 800ed74:	2330      	movs	r3, #48	; 0x30
 800ed76:	3130      	adds	r1, #48	; 0x30
 800ed78:	7083      	strb	r3, [r0, #2]
 800ed7a:	70c1      	strb	r1, [r0, #3]
 800ed7c:	1d03      	adds	r3, r0, #4
 800ed7e:	e7f1      	b.n	800ed64 <__exponent+0x60>

0800ed80 <_printf_float>:
 800ed80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed84:	ed2d 8b02 	vpush	{d8}
 800ed88:	b08d      	sub	sp, #52	; 0x34
 800ed8a:	460c      	mov	r4, r1
 800ed8c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ed90:	4616      	mov	r6, r2
 800ed92:	461f      	mov	r7, r3
 800ed94:	4605      	mov	r5, r0
 800ed96:	f000 fd55 	bl	800f844 <_localeconv_r>
 800ed9a:	f8d0 a000 	ldr.w	sl, [r0]
 800ed9e:	4650      	mov	r0, sl
 800eda0:	f7f1 fa9e 	bl	80002e0 <strlen>
 800eda4:	2300      	movs	r3, #0
 800eda6:	930a      	str	r3, [sp, #40]	; 0x28
 800eda8:	6823      	ldr	r3, [r4, #0]
 800edaa:	9305      	str	r3, [sp, #20]
 800edac:	f8d8 3000 	ldr.w	r3, [r8]
 800edb0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800edb4:	3307      	adds	r3, #7
 800edb6:	f023 0307 	bic.w	r3, r3, #7
 800edba:	f103 0208 	add.w	r2, r3, #8
 800edbe:	f8c8 2000 	str.w	r2, [r8]
 800edc2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800edc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800edca:	9307      	str	r3, [sp, #28]
 800edcc:	f8cd 8018 	str.w	r8, [sp, #24]
 800edd0:	ee08 0a10 	vmov	s16, r0
 800edd4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800edd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eddc:	4b9e      	ldr	r3, [pc, #632]	; (800f058 <_printf_float+0x2d8>)
 800edde:	f04f 32ff 	mov.w	r2, #4294967295
 800ede2:	f7f1 fedb 	bl	8000b9c <__aeabi_dcmpun>
 800ede6:	bb88      	cbnz	r0, 800ee4c <_printf_float+0xcc>
 800ede8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800edec:	4b9a      	ldr	r3, [pc, #616]	; (800f058 <_printf_float+0x2d8>)
 800edee:	f04f 32ff 	mov.w	r2, #4294967295
 800edf2:	f7f1 feb5 	bl	8000b60 <__aeabi_dcmple>
 800edf6:	bb48      	cbnz	r0, 800ee4c <_printf_float+0xcc>
 800edf8:	2200      	movs	r2, #0
 800edfa:	2300      	movs	r3, #0
 800edfc:	4640      	mov	r0, r8
 800edfe:	4649      	mov	r1, r9
 800ee00:	f7f1 fea4 	bl	8000b4c <__aeabi_dcmplt>
 800ee04:	b110      	cbz	r0, 800ee0c <_printf_float+0x8c>
 800ee06:	232d      	movs	r3, #45	; 0x2d
 800ee08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee0c:	4a93      	ldr	r2, [pc, #588]	; (800f05c <_printf_float+0x2dc>)
 800ee0e:	4b94      	ldr	r3, [pc, #592]	; (800f060 <_printf_float+0x2e0>)
 800ee10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ee14:	bf94      	ite	ls
 800ee16:	4690      	movls	r8, r2
 800ee18:	4698      	movhi	r8, r3
 800ee1a:	2303      	movs	r3, #3
 800ee1c:	6123      	str	r3, [r4, #16]
 800ee1e:	9b05      	ldr	r3, [sp, #20]
 800ee20:	f023 0304 	bic.w	r3, r3, #4
 800ee24:	6023      	str	r3, [r4, #0]
 800ee26:	f04f 0900 	mov.w	r9, #0
 800ee2a:	9700      	str	r7, [sp, #0]
 800ee2c:	4633      	mov	r3, r6
 800ee2e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ee30:	4621      	mov	r1, r4
 800ee32:	4628      	mov	r0, r5
 800ee34:	f000 f9da 	bl	800f1ec <_printf_common>
 800ee38:	3001      	adds	r0, #1
 800ee3a:	f040 8090 	bne.w	800ef5e <_printf_float+0x1de>
 800ee3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ee42:	b00d      	add	sp, #52	; 0x34
 800ee44:	ecbd 8b02 	vpop	{d8}
 800ee48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee4c:	4642      	mov	r2, r8
 800ee4e:	464b      	mov	r3, r9
 800ee50:	4640      	mov	r0, r8
 800ee52:	4649      	mov	r1, r9
 800ee54:	f7f1 fea2 	bl	8000b9c <__aeabi_dcmpun>
 800ee58:	b140      	cbz	r0, 800ee6c <_printf_float+0xec>
 800ee5a:	464b      	mov	r3, r9
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	bfbc      	itt	lt
 800ee60:	232d      	movlt	r3, #45	; 0x2d
 800ee62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ee66:	4a7f      	ldr	r2, [pc, #508]	; (800f064 <_printf_float+0x2e4>)
 800ee68:	4b7f      	ldr	r3, [pc, #508]	; (800f068 <_printf_float+0x2e8>)
 800ee6a:	e7d1      	b.n	800ee10 <_printf_float+0x90>
 800ee6c:	6863      	ldr	r3, [r4, #4]
 800ee6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ee72:	9206      	str	r2, [sp, #24]
 800ee74:	1c5a      	adds	r2, r3, #1
 800ee76:	d13f      	bne.n	800eef8 <_printf_float+0x178>
 800ee78:	2306      	movs	r3, #6
 800ee7a:	6063      	str	r3, [r4, #4]
 800ee7c:	9b05      	ldr	r3, [sp, #20]
 800ee7e:	6861      	ldr	r1, [r4, #4]
 800ee80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ee84:	2300      	movs	r3, #0
 800ee86:	9303      	str	r3, [sp, #12]
 800ee88:	ab0a      	add	r3, sp, #40	; 0x28
 800ee8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ee8e:	ab09      	add	r3, sp, #36	; 0x24
 800ee90:	ec49 8b10 	vmov	d0, r8, r9
 800ee94:	9300      	str	r3, [sp, #0]
 800ee96:	6022      	str	r2, [r4, #0]
 800ee98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ee9c:	4628      	mov	r0, r5
 800ee9e:	f7ff fecf 	bl	800ec40 <__cvt>
 800eea2:	9b06      	ldr	r3, [sp, #24]
 800eea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eea6:	2b47      	cmp	r3, #71	; 0x47
 800eea8:	4680      	mov	r8, r0
 800eeaa:	d108      	bne.n	800eebe <_printf_float+0x13e>
 800eeac:	1cc8      	adds	r0, r1, #3
 800eeae:	db02      	blt.n	800eeb6 <_printf_float+0x136>
 800eeb0:	6863      	ldr	r3, [r4, #4]
 800eeb2:	4299      	cmp	r1, r3
 800eeb4:	dd41      	ble.n	800ef3a <_printf_float+0x1ba>
 800eeb6:	f1ab 0302 	sub.w	r3, fp, #2
 800eeba:	fa5f fb83 	uxtb.w	fp, r3
 800eebe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eec2:	d820      	bhi.n	800ef06 <_printf_float+0x186>
 800eec4:	3901      	subs	r1, #1
 800eec6:	465a      	mov	r2, fp
 800eec8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eecc:	9109      	str	r1, [sp, #36]	; 0x24
 800eece:	f7ff ff19 	bl	800ed04 <__exponent>
 800eed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eed4:	1813      	adds	r3, r2, r0
 800eed6:	2a01      	cmp	r2, #1
 800eed8:	4681      	mov	r9, r0
 800eeda:	6123      	str	r3, [r4, #16]
 800eedc:	dc02      	bgt.n	800eee4 <_printf_float+0x164>
 800eede:	6822      	ldr	r2, [r4, #0]
 800eee0:	07d2      	lsls	r2, r2, #31
 800eee2:	d501      	bpl.n	800eee8 <_printf_float+0x168>
 800eee4:	3301      	adds	r3, #1
 800eee6:	6123      	str	r3, [r4, #16]
 800eee8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d09c      	beq.n	800ee2a <_printf_float+0xaa>
 800eef0:	232d      	movs	r3, #45	; 0x2d
 800eef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eef6:	e798      	b.n	800ee2a <_printf_float+0xaa>
 800eef8:	9a06      	ldr	r2, [sp, #24]
 800eefa:	2a47      	cmp	r2, #71	; 0x47
 800eefc:	d1be      	bne.n	800ee7c <_printf_float+0xfc>
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d1bc      	bne.n	800ee7c <_printf_float+0xfc>
 800ef02:	2301      	movs	r3, #1
 800ef04:	e7b9      	b.n	800ee7a <_printf_float+0xfa>
 800ef06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ef0a:	d118      	bne.n	800ef3e <_printf_float+0x1be>
 800ef0c:	2900      	cmp	r1, #0
 800ef0e:	6863      	ldr	r3, [r4, #4]
 800ef10:	dd0b      	ble.n	800ef2a <_printf_float+0x1aa>
 800ef12:	6121      	str	r1, [r4, #16]
 800ef14:	b913      	cbnz	r3, 800ef1c <_printf_float+0x19c>
 800ef16:	6822      	ldr	r2, [r4, #0]
 800ef18:	07d0      	lsls	r0, r2, #31
 800ef1a:	d502      	bpl.n	800ef22 <_printf_float+0x1a2>
 800ef1c:	3301      	adds	r3, #1
 800ef1e:	440b      	add	r3, r1
 800ef20:	6123      	str	r3, [r4, #16]
 800ef22:	65a1      	str	r1, [r4, #88]	; 0x58
 800ef24:	f04f 0900 	mov.w	r9, #0
 800ef28:	e7de      	b.n	800eee8 <_printf_float+0x168>
 800ef2a:	b913      	cbnz	r3, 800ef32 <_printf_float+0x1b2>
 800ef2c:	6822      	ldr	r2, [r4, #0]
 800ef2e:	07d2      	lsls	r2, r2, #31
 800ef30:	d501      	bpl.n	800ef36 <_printf_float+0x1b6>
 800ef32:	3302      	adds	r3, #2
 800ef34:	e7f4      	b.n	800ef20 <_printf_float+0x1a0>
 800ef36:	2301      	movs	r3, #1
 800ef38:	e7f2      	b.n	800ef20 <_printf_float+0x1a0>
 800ef3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ef3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef40:	4299      	cmp	r1, r3
 800ef42:	db05      	blt.n	800ef50 <_printf_float+0x1d0>
 800ef44:	6823      	ldr	r3, [r4, #0]
 800ef46:	6121      	str	r1, [r4, #16]
 800ef48:	07d8      	lsls	r0, r3, #31
 800ef4a:	d5ea      	bpl.n	800ef22 <_printf_float+0x1a2>
 800ef4c:	1c4b      	adds	r3, r1, #1
 800ef4e:	e7e7      	b.n	800ef20 <_printf_float+0x1a0>
 800ef50:	2900      	cmp	r1, #0
 800ef52:	bfd4      	ite	le
 800ef54:	f1c1 0202 	rsble	r2, r1, #2
 800ef58:	2201      	movgt	r2, #1
 800ef5a:	4413      	add	r3, r2
 800ef5c:	e7e0      	b.n	800ef20 <_printf_float+0x1a0>
 800ef5e:	6823      	ldr	r3, [r4, #0]
 800ef60:	055a      	lsls	r2, r3, #21
 800ef62:	d407      	bmi.n	800ef74 <_printf_float+0x1f4>
 800ef64:	6923      	ldr	r3, [r4, #16]
 800ef66:	4642      	mov	r2, r8
 800ef68:	4631      	mov	r1, r6
 800ef6a:	4628      	mov	r0, r5
 800ef6c:	47b8      	blx	r7
 800ef6e:	3001      	adds	r0, #1
 800ef70:	d12c      	bne.n	800efcc <_printf_float+0x24c>
 800ef72:	e764      	b.n	800ee3e <_printf_float+0xbe>
 800ef74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ef78:	f240 80e0 	bls.w	800f13c <_printf_float+0x3bc>
 800ef7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ef80:	2200      	movs	r2, #0
 800ef82:	2300      	movs	r3, #0
 800ef84:	f7f1 fdd8 	bl	8000b38 <__aeabi_dcmpeq>
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	d034      	beq.n	800eff6 <_printf_float+0x276>
 800ef8c:	4a37      	ldr	r2, [pc, #220]	; (800f06c <_printf_float+0x2ec>)
 800ef8e:	2301      	movs	r3, #1
 800ef90:	4631      	mov	r1, r6
 800ef92:	4628      	mov	r0, r5
 800ef94:	47b8      	blx	r7
 800ef96:	3001      	adds	r0, #1
 800ef98:	f43f af51 	beq.w	800ee3e <_printf_float+0xbe>
 800ef9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800efa0:	429a      	cmp	r2, r3
 800efa2:	db02      	blt.n	800efaa <_printf_float+0x22a>
 800efa4:	6823      	ldr	r3, [r4, #0]
 800efa6:	07d8      	lsls	r0, r3, #31
 800efa8:	d510      	bpl.n	800efcc <_printf_float+0x24c>
 800efaa:	ee18 3a10 	vmov	r3, s16
 800efae:	4652      	mov	r2, sl
 800efb0:	4631      	mov	r1, r6
 800efb2:	4628      	mov	r0, r5
 800efb4:	47b8      	blx	r7
 800efb6:	3001      	adds	r0, #1
 800efb8:	f43f af41 	beq.w	800ee3e <_printf_float+0xbe>
 800efbc:	f04f 0800 	mov.w	r8, #0
 800efc0:	f104 091a 	add.w	r9, r4, #26
 800efc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efc6:	3b01      	subs	r3, #1
 800efc8:	4543      	cmp	r3, r8
 800efca:	dc09      	bgt.n	800efe0 <_printf_float+0x260>
 800efcc:	6823      	ldr	r3, [r4, #0]
 800efce:	079b      	lsls	r3, r3, #30
 800efd0:	f100 8107 	bmi.w	800f1e2 <_printf_float+0x462>
 800efd4:	68e0      	ldr	r0, [r4, #12]
 800efd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800efd8:	4298      	cmp	r0, r3
 800efda:	bfb8      	it	lt
 800efdc:	4618      	movlt	r0, r3
 800efde:	e730      	b.n	800ee42 <_printf_float+0xc2>
 800efe0:	2301      	movs	r3, #1
 800efe2:	464a      	mov	r2, r9
 800efe4:	4631      	mov	r1, r6
 800efe6:	4628      	mov	r0, r5
 800efe8:	47b8      	blx	r7
 800efea:	3001      	adds	r0, #1
 800efec:	f43f af27 	beq.w	800ee3e <_printf_float+0xbe>
 800eff0:	f108 0801 	add.w	r8, r8, #1
 800eff4:	e7e6      	b.n	800efc4 <_printf_float+0x244>
 800eff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eff8:	2b00      	cmp	r3, #0
 800effa:	dc39      	bgt.n	800f070 <_printf_float+0x2f0>
 800effc:	4a1b      	ldr	r2, [pc, #108]	; (800f06c <_printf_float+0x2ec>)
 800effe:	2301      	movs	r3, #1
 800f000:	4631      	mov	r1, r6
 800f002:	4628      	mov	r0, r5
 800f004:	47b8      	blx	r7
 800f006:	3001      	adds	r0, #1
 800f008:	f43f af19 	beq.w	800ee3e <_printf_float+0xbe>
 800f00c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f010:	4313      	orrs	r3, r2
 800f012:	d102      	bne.n	800f01a <_printf_float+0x29a>
 800f014:	6823      	ldr	r3, [r4, #0]
 800f016:	07d9      	lsls	r1, r3, #31
 800f018:	d5d8      	bpl.n	800efcc <_printf_float+0x24c>
 800f01a:	ee18 3a10 	vmov	r3, s16
 800f01e:	4652      	mov	r2, sl
 800f020:	4631      	mov	r1, r6
 800f022:	4628      	mov	r0, r5
 800f024:	47b8      	blx	r7
 800f026:	3001      	adds	r0, #1
 800f028:	f43f af09 	beq.w	800ee3e <_printf_float+0xbe>
 800f02c:	f04f 0900 	mov.w	r9, #0
 800f030:	f104 0a1a 	add.w	sl, r4, #26
 800f034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f036:	425b      	negs	r3, r3
 800f038:	454b      	cmp	r3, r9
 800f03a:	dc01      	bgt.n	800f040 <_printf_float+0x2c0>
 800f03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f03e:	e792      	b.n	800ef66 <_printf_float+0x1e6>
 800f040:	2301      	movs	r3, #1
 800f042:	4652      	mov	r2, sl
 800f044:	4631      	mov	r1, r6
 800f046:	4628      	mov	r0, r5
 800f048:	47b8      	blx	r7
 800f04a:	3001      	adds	r0, #1
 800f04c:	f43f aef7 	beq.w	800ee3e <_printf_float+0xbe>
 800f050:	f109 0901 	add.w	r9, r9, #1
 800f054:	e7ee      	b.n	800f034 <_printf_float+0x2b4>
 800f056:	bf00      	nop
 800f058:	7fefffff 	.word	0x7fefffff
 800f05c:	08012bf1 	.word	0x08012bf1
 800f060:	08012bf5 	.word	0x08012bf5
 800f064:	08012bf9 	.word	0x08012bf9
 800f068:	08012bfd 	.word	0x08012bfd
 800f06c:	08012c01 	.word	0x08012c01
 800f070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f072:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f074:	429a      	cmp	r2, r3
 800f076:	bfa8      	it	ge
 800f078:	461a      	movge	r2, r3
 800f07a:	2a00      	cmp	r2, #0
 800f07c:	4691      	mov	r9, r2
 800f07e:	dc37      	bgt.n	800f0f0 <_printf_float+0x370>
 800f080:	f04f 0b00 	mov.w	fp, #0
 800f084:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f088:	f104 021a 	add.w	r2, r4, #26
 800f08c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f08e:	9305      	str	r3, [sp, #20]
 800f090:	eba3 0309 	sub.w	r3, r3, r9
 800f094:	455b      	cmp	r3, fp
 800f096:	dc33      	bgt.n	800f100 <_printf_float+0x380>
 800f098:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f09c:	429a      	cmp	r2, r3
 800f09e:	db3b      	blt.n	800f118 <_printf_float+0x398>
 800f0a0:	6823      	ldr	r3, [r4, #0]
 800f0a2:	07da      	lsls	r2, r3, #31
 800f0a4:	d438      	bmi.n	800f118 <_printf_float+0x398>
 800f0a6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f0aa:	eba2 0903 	sub.w	r9, r2, r3
 800f0ae:	9b05      	ldr	r3, [sp, #20]
 800f0b0:	1ad2      	subs	r2, r2, r3
 800f0b2:	4591      	cmp	r9, r2
 800f0b4:	bfa8      	it	ge
 800f0b6:	4691      	movge	r9, r2
 800f0b8:	f1b9 0f00 	cmp.w	r9, #0
 800f0bc:	dc35      	bgt.n	800f12a <_printf_float+0x3aa>
 800f0be:	f04f 0800 	mov.w	r8, #0
 800f0c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f0c6:	f104 0a1a 	add.w	sl, r4, #26
 800f0ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f0ce:	1a9b      	subs	r3, r3, r2
 800f0d0:	eba3 0309 	sub.w	r3, r3, r9
 800f0d4:	4543      	cmp	r3, r8
 800f0d6:	f77f af79 	ble.w	800efcc <_printf_float+0x24c>
 800f0da:	2301      	movs	r3, #1
 800f0dc:	4652      	mov	r2, sl
 800f0de:	4631      	mov	r1, r6
 800f0e0:	4628      	mov	r0, r5
 800f0e2:	47b8      	blx	r7
 800f0e4:	3001      	adds	r0, #1
 800f0e6:	f43f aeaa 	beq.w	800ee3e <_printf_float+0xbe>
 800f0ea:	f108 0801 	add.w	r8, r8, #1
 800f0ee:	e7ec      	b.n	800f0ca <_printf_float+0x34a>
 800f0f0:	4613      	mov	r3, r2
 800f0f2:	4631      	mov	r1, r6
 800f0f4:	4642      	mov	r2, r8
 800f0f6:	4628      	mov	r0, r5
 800f0f8:	47b8      	blx	r7
 800f0fa:	3001      	adds	r0, #1
 800f0fc:	d1c0      	bne.n	800f080 <_printf_float+0x300>
 800f0fe:	e69e      	b.n	800ee3e <_printf_float+0xbe>
 800f100:	2301      	movs	r3, #1
 800f102:	4631      	mov	r1, r6
 800f104:	4628      	mov	r0, r5
 800f106:	9205      	str	r2, [sp, #20]
 800f108:	47b8      	blx	r7
 800f10a:	3001      	adds	r0, #1
 800f10c:	f43f ae97 	beq.w	800ee3e <_printf_float+0xbe>
 800f110:	9a05      	ldr	r2, [sp, #20]
 800f112:	f10b 0b01 	add.w	fp, fp, #1
 800f116:	e7b9      	b.n	800f08c <_printf_float+0x30c>
 800f118:	ee18 3a10 	vmov	r3, s16
 800f11c:	4652      	mov	r2, sl
 800f11e:	4631      	mov	r1, r6
 800f120:	4628      	mov	r0, r5
 800f122:	47b8      	blx	r7
 800f124:	3001      	adds	r0, #1
 800f126:	d1be      	bne.n	800f0a6 <_printf_float+0x326>
 800f128:	e689      	b.n	800ee3e <_printf_float+0xbe>
 800f12a:	9a05      	ldr	r2, [sp, #20]
 800f12c:	464b      	mov	r3, r9
 800f12e:	4442      	add	r2, r8
 800f130:	4631      	mov	r1, r6
 800f132:	4628      	mov	r0, r5
 800f134:	47b8      	blx	r7
 800f136:	3001      	adds	r0, #1
 800f138:	d1c1      	bne.n	800f0be <_printf_float+0x33e>
 800f13a:	e680      	b.n	800ee3e <_printf_float+0xbe>
 800f13c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f13e:	2a01      	cmp	r2, #1
 800f140:	dc01      	bgt.n	800f146 <_printf_float+0x3c6>
 800f142:	07db      	lsls	r3, r3, #31
 800f144:	d53a      	bpl.n	800f1bc <_printf_float+0x43c>
 800f146:	2301      	movs	r3, #1
 800f148:	4642      	mov	r2, r8
 800f14a:	4631      	mov	r1, r6
 800f14c:	4628      	mov	r0, r5
 800f14e:	47b8      	blx	r7
 800f150:	3001      	adds	r0, #1
 800f152:	f43f ae74 	beq.w	800ee3e <_printf_float+0xbe>
 800f156:	ee18 3a10 	vmov	r3, s16
 800f15a:	4652      	mov	r2, sl
 800f15c:	4631      	mov	r1, r6
 800f15e:	4628      	mov	r0, r5
 800f160:	47b8      	blx	r7
 800f162:	3001      	adds	r0, #1
 800f164:	f43f ae6b 	beq.w	800ee3e <_printf_float+0xbe>
 800f168:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f16c:	2200      	movs	r2, #0
 800f16e:	2300      	movs	r3, #0
 800f170:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f174:	f7f1 fce0 	bl	8000b38 <__aeabi_dcmpeq>
 800f178:	b9d8      	cbnz	r0, 800f1b2 <_printf_float+0x432>
 800f17a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f17e:	f108 0201 	add.w	r2, r8, #1
 800f182:	4631      	mov	r1, r6
 800f184:	4628      	mov	r0, r5
 800f186:	47b8      	blx	r7
 800f188:	3001      	adds	r0, #1
 800f18a:	d10e      	bne.n	800f1aa <_printf_float+0x42a>
 800f18c:	e657      	b.n	800ee3e <_printf_float+0xbe>
 800f18e:	2301      	movs	r3, #1
 800f190:	4652      	mov	r2, sl
 800f192:	4631      	mov	r1, r6
 800f194:	4628      	mov	r0, r5
 800f196:	47b8      	blx	r7
 800f198:	3001      	adds	r0, #1
 800f19a:	f43f ae50 	beq.w	800ee3e <_printf_float+0xbe>
 800f19e:	f108 0801 	add.w	r8, r8, #1
 800f1a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1a4:	3b01      	subs	r3, #1
 800f1a6:	4543      	cmp	r3, r8
 800f1a8:	dcf1      	bgt.n	800f18e <_printf_float+0x40e>
 800f1aa:	464b      	mov	r3, r9
 800f1ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f1b0:	e6da      	b.n	800ef68 <_printf_float+0x1e8>
 800f1b2:	f04f 0800 	mov.w	r8, #0
 800f1b6:	f104 0a1a 	add.w	sl, r4, #26
 800f1ba:	e7f2      	b.n	800f1a2 <_printf_float+0x422>
 800f1bc:	2301      	movs	r3, #1
 800f1be:	4642      	mov	r2, r8
 800f1c0:	e7df      	b.n	800f182 <_printf_float+0x402>
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	464a      	mov	r2, r9
 800f1c6:	4631      	mov	r1, r6
 800f1c8:	4628      	mov	r0, r5
 800f1ca:	47b8      	blx	r7
 800f1cc:	3001      	adds	r0, #1
 800f1ce:	f43f ae36 	beq.w	800ee3e <_printf_float+0xbe>
 800f1d2:	f108 0801 	add.w	r8, r8, #1
 800f1d6:	68e3      	ldr	r3, [r4, #12]
 800f1d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f1da:	1a5b      	subs	r3, r3, r1
 800f1dc:	4543      	cmp	r3, r8
 800f1de:	dcf0      	bgt.n	800f1c2 <_printf_float+0x442>
 800f1e0:	e6f8      	b.n	800efd4 <_printf_float+0x254>
 800f1e2:	f04f 0800 	mov.w	r8, #0
 800f1e6:	f104 0919 	add.w	r9, r4, #25
 800f1ea:	e7f4      	b.n	800f1d6 <_printf_float+0x456>

0800f1ec <_printf_common>:
 800f1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1f0:	4616      	mov	r6, r2
 800f1f2:	4699      	mov	r9, r3
 800f1f4:	688a      	ldr	r2, [r1, #8]
 800f1f6:	690b      	ldr	r3, [r1, #16]
 800f1f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	bfb8      	it	lt
 800f200:	4613      	movlt	r3, r2
 800f202:	6033      	str	r3, [r6, #0]
 800f204:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f208:	4607      	mov	r7, r0
 800f20a:	460c      	mov	r4, r1
 800f20c:	b10a      	cbz	r2, 800f212 <_printf_common+0x26>
 800f20e:	3301      	adds	r3, #1
 800f210:	6033      	str	r3, [r6, #0]
 800f212:	6823      	ldr	r3, [r4, #0]
 800f214:	0699      	lsls	r1, r3, #26
 800f216:	bf42      	ittt	mi
 800f218:	6833      	ldrmi	r3, [r6, #0]
 800f21a:	3302      	addmi	r3, #2
 800f21c:	6033      	strmi	r3, [r6, #0]
 800f21e:	6825      	ldr	r5, [r4, #0]
 800f220:	f015 0506 	ands.w	r5, r5, #6
 800f224:	d106      	bne.n	800f234 <_printf_common+0x48>
 800f226:	f104 0a19 	add.w	sl, r4, #25
 800f22a:	68e3      	ldr	r3, [r4, #12]
 800f22c:	6832      	ldr	r2, [r6, #0]
 800f22e:	1a9b      	subs	r3, r3, r2
 800f230:	42ab      	cmp	r3, r5
 800f232:	dc26      	bgt.n	800f282 <_printf_common+0x96>
 800f234:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f238:	1e13      	subs	r3, r2, #0
 800f23a:	6822      	ldr	r2, [r4, #0]
 800f23c:	bf18      	it	ne
 800f23e:	2301      	movne	r3, #1
 800f240:	0692      	lsls	r2, r2, #26
 800f242:	d42b      	bmi.n	800f29c <_printf_common+0xb0>
 800f244:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f248:	4649      	mov	r1, r9
 800f24a:	4638      	mov	r0, r7
 800f24c:	47c0      	blx	r8
 800f24e:	3001      	adds	r0, #1
 800f250:	d01e      	beq.n	800f290 <_printf_common+0xa4>
 800f252:	6823      	ldr	r3, [r4, #0]
 800f254:	6922      	ldr	r2, [r4, #16]
 800f256:	f003 0306 	and.w	r3, r3, #6
 800f25a:	2b04      	cmp	r3, #4
 800f25c:	bf02      	ittt	eq
 800f25e:	68e5      	ldreq	r5, [r4, #12]
 800f260:	6833      	ldreq	r3, [r6, #0]
 800f262:	1aed      	subeq	r5, r5, r3
 800f264:	68a3      	ldr	r3, [r4, #8]
 800f266:	bf0c      	ite	eq
 800f268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f26c:	2500      	movne	r5, #0
 800f26e:	4293      	cmp	r3, r2
 800f270:	bfc4      	itt	gt
 800f272:	1a9b      	subgt	r3, r3, r2
 800f274:	18ed      	addgt	r5, r5, r3
 800f276:	2600      	movs	r6, #0
 800f278:	341a      	adds	r4, #26
 800f27a:	42b5      	cmp	r5, r6
 800f27c:	d11a      	bne.n	800f2b4 <_printf_common+0xc8>
 800f27e:	2000      	movs	r0, #0
 800f280:	e008      	b.n	800f294 <_printf_common+0xa8>
 800f282:	2301      	movs	r3, #1
 800f284:	4652      	mov	r2, sl
 800f286:	4649      	mov	r1, r9
 800f288:	4638      	mov	r0, r7
 800f28a:	47c0      	blx	r8
 800f28c:	3001      	adds	r0, #1
 800f28e:	d103      	bne.n	800f298 <_printf_common+0xac>
 800f290:	f04f 30ff 	mov.w	r0, #4294967295
 800f294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f298:	3501      	adds	r5, #1
 800f29a:	e7c6      	b.n	800f22a <_printf_common+0x3e>
 800f29c:	18e1      	adds	r1, r4, r3
 800f29e:	1c5a      	adds	r2, r3, #1
 800f2a0:	2030      	movs	r0, #48	; 0x30
 800f2a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f2a6:	4422      	add	r2, r4
 800f2a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f2ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f2b0:	3302      	adds	r3, #2
 800f2b2:	e7c7      	b.n	800f244 <_printf_common+0x58>
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	4622      	mov	r2, r4
 800f2b8:	4649      	mov	r1, r9
 800f2ba:	4638      	mov	r0, r7
 800f2bc:	47c0      	blx	r8
 800f2be:	3001      	adds	r0, #1
 800f2c0:	d0e6      	beq.n	800f290 <_printf_common+0xa4>
 800f2c2:	3601      	adds	r6, #1
 800f2c4:	e7d9      	b.n	800f27a <_printf_common+0x8e>
	...

0800f2c8 <_printf_i>:
 800f2c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f2cc:	7e0f      	ldrb	r7, [r1, #24]
 800f2ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f2d0:	2f78      	cmp	r7, #120	; 0x78
 800f2d2:	4691      	mov	r9, r2
 800f2d4:	4680      	mov	r8, r0
 800f2d6:	460c      	mov	r4, r1
 800f2d8:	469a      	mov	sl, r3
 800f2da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f2de:	d807      	bhi.n	800f2f0 <_printf_i+0x28>
 800f2e0:	2f62      	cmp	r7, #98	; 0x62
 800f2e2:	d80a      	bhi.n	800f2fa <_printf_i+0x32>
 800f2e4:	2f00      	cmp	r7, #0
 800f2e6:	f000 80d4 	beq.w	800f492 <_printf_i+0x1ca>
 800f2ea:	2f58      	cmp	r7, #88	; 0x58
 800f2ec:	f000 80c0 	beq.w	800f470 <_printf_i+0x1a8>
 800f2f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f2f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f2f8:	e03a      	b.n	800f370 <_printf_i+0xa8>
 800f2fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f2fe:	2b15      	cmp	r3, #21
 800f300:	d8f6      	bhi.n	800f2f0 <_printf_i+0x28>
 800f302:	a101      	add	r1, pc, #4	; (adr r1, 800f308 <_printf_i+0x40>)
 800f304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f308:	0800f361 	.word	0x0800f361
 800f30c:	0800f375 	.word	0x0800f375
 800f310:	0800f2f1 	.word	0x0800f2f1
 800f314:	0800f2f1 	.word	0x0800f2f1
 800f318:	0800f2f1 	.word	0x0800f2f1
 800f31c:	0800f2f1 	.word	0x0800f2f1
 800f320:	0800f375 	.word	0x0800f375
 800f324:	0800f2f1 	.word	0x0800f2f1
 800f328:	0800f2f1 	.word	0x0800f2f1
 800f32c:	0800f2f1 	.word	0x0800f2f1
 800f330:	0800f2f1 	.word	0x0800f2f1
 800f334:	0800f479 	.word	0x0800f479
 800f338:	0800f3a1 	.word	0x0800f3a1
 800f33c:	0800f433 	.word	0x0800f433
 800f340:	0800f2f1 	.word	0x0800f2f1
 800f344:	0800f2f1 	.word	0x0800f2f1
 800f348:	0800f49b 	.word	0x0800f49b
 800f34c:	0800f2f1 	.word	0x0800f2f1
 800f350:	0800f3a1 	.word	0x0800f3a1
 800f354:	0800f2f1 	.word	0x0800f2f1
 800f358:	0800f2f1 	.word	0x0800f2f1
 800f35c:	0800f43b 	.word	0x0800f43b
 800f360:	682b      	ldr	r3, [r5, #0]
 800f362:	1d1a      	adds	r2, r3, #4
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	602a      	str	r2, [r5, #0]
 800f368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f36c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f370:	2301      	movs	r3, #1
 800f372:	e09f      	b.n	800f4b4 <_printf_i+0x1ec>
 800f374:	6820      	ldr	r0, [r4, #0]
 800f376:	682b      	ldr	r3, [r5, #0]
 800f378:	0607      	lsls	r7, r0, #24
 800f37a:	f103 0104 	add.w	r1, r3, #4
 800f37e:	6029      	str	r1, [r5, #0]
 800f380:	d501      	bpl.n	800f386 <_printf_i+0xbe>
 800f382:	681e      	ldr	r6, [r3, #0]
 800f384:	e003      	b.n	800f38e <_printf_i+0xc6>
 800f386:	0646      	lsls	r6, r0, #25
 800f388:	d5fb      	bpl.n	800f382 <_printf_i+0xba>
 800f38a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f38e:	2e00      	cmp	r6, #0
 800f390:	da03      	bge.n	800f39a <_printf_i+0xd2>
 800f392:	232d      	movs	r3, #45	; 0x2d
 800f394:	4276      	negs	r6, r6
 800f396:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f39a:	485a      	ldr	r0, [pc, #360]	; (800f504 <_printf_i+0x23c>)
 800f39c:	230a      	movs	r3, #10
 800f39e:	e012      	b.n	800f3c6 <_printf_i+0xfe>
 800f3a0:	682b      	ldr	r3, [r5, #0]
 800f3a2:	6820      	ldr	r0, [r4, #0]
 800f3a4:	1d19      	adds	r1, r3, #4
 800f3a6:	6029      	str	r1, [r5, #0]
 800f3a8:	0605      	lsls	r5, r0, #24
 800f3aa:	d501      	bpl.n	800f3b0 <_printf_i+0xe8>
 800f3ac:	681e      	ldr	r6, [r3, #0]
 800f3ae:	e002      	b.n	800f3b6 <_printf_i+0xee>
 800f3b0:	0641      	lsls	r1, r0, #25
 800f3b2:	d5fb      	bpl.n	800f3ac <_printf_i+0xe4>
 800f3b4:	881e      	ldrh	r6, [r3, #0]
 800f3b6:	4853      	ldr	r0, [pc, #332]	; (800f504 <_printf_i+0x23c>)
 800f3b8:	2f6f      	cmp	r7, #111	; 0x6f
 800f3ba:	bf0c      	ite	eq
 800f3bc:	2308      	moveq	r3, #8
 800f3be:	230a      	movne	r3, #10
 800f3c0:	2100      	movs	r1, #0
 800f3c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f3c6:	6865      	ldr	r5, [r4, #4]
 800f3c8:	60a5      	str	r5, [r4, #8]
 800f3ca:	2d00      	cmp	r5, #0
 800f3cc:	bfa2      	ittt	ge
 800f3ce:	6821      	ldrge	r1, [r4, #0]
 800f3d0:	f021 0104 	bicge.w	r1, r1, #4
 800f3d4:	6021      	strge	r1, [r4, #0]
 800f3d6:	b90e      	cbnz	r6, 800f3dc <_printf_i+0x114>
 800f3d8:	2d00      	cmp	r5, #0
 800f3da:	d04b      	beq.n	800f474 <_printf_i+0x1ac>
 800f3dc:	4615      	mov	r5, r2
 800f3de:	fbb6 f1f3 	udiv	r1, r6, r3
 800f3e2:	fb03 6711 	mls	r7, r3, r1, r6
 800f3e6:	5dc7      	ldrb	r7, [r0, r7]
 800f3e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f3ec:	4637      	mov	r7, r6
 800f3ee:	42bb      	cmp	r3, r7
 800f3f0:	460e      	mov	r6, r1
 800f3f2:	d9f4      	bls.n	800f3de <_printf_i+0x116>
 800f3f4:	2b08      	cmp	r3, #8
 800f3f6:	d10b      	bne.n	800f410 <_printf_i+0x148>
 800f3f8:	6823      	ldr	r3, [r4, #0]
 800f3fa:	07de      	lsls	r6, r3, #31
 800f3fc:	d508      	bpl.n	800f410 <_printf_i+0x148>
 800f3fe:	6923      	ldr	r3, [r4, #16]
 800f400:	6861      	ldr	r1, [r4, #4]
 800f402:	4299      	cmp	r1, r3
 800f404:	bfde      	ittt	le
 800f406:	2330      	movle	r3, #48	; 0x30
 800f408:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f40c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f410:	1b52      	subs	r2, r2, r5
 800f412:	6122      	str	r2, [r4, #16]
 800f414:	f8cd a000 	str.w	sl, [sp]
 800f418:	464b      	mov	r3, r9
 800f41a:	aa03      	add	r2, sp, #12
 800f41c:	4621      	mov	r1, r4
 800f41e:	4640      	mov	r0, r8
 800f420:	f7ff fee4 	bl	800f1ec <_printf_common>
 800f424:	3001      	adds	r0, #1
 800f426:	d14a      	bne.n	800f4be <_printf_i+0x1f6>
 800f428:	f04f 30ff 	mov.w	r0, #4294967295
 800f42c:	b004      	add	sp, #16
 800f42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f432:	6823      	ldr	r3, [r4, #0]
 800f434:	f043 0320 	orr.w	r3, r3, #32
 800f438:	6023      	str	r3, [r4, #0]
 800f43a:	4833      	ldr	r0, [pc, #204]	; (800f508 <_printf_i+0x240>)
 800f43c:	2778      	movs	r7, #120	; 0x78
 800f43e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f442:	6823      	ldr	r3, [r4, #0]
 800f444:	6829      	ldr	r1, [r5, #0]
 800f446:	061f      	lsls	r7, r3, #24
 800f448:	f851 6b04 	ldr.w	r6, [r1], #4
 800f44c:	d402      	bmi.n	800f454 <_printf_i+0x18c>
 800f44e:	065f      	lsls	r7, r3, #25
 800f450:	bf48      	it	mi
 800f452:	b2b6      	uxthmi	r6, r6
 800f454:	07df      	lsls	r7, r3, #31
 800f456:	bf48      	it	mi
 800f458:	f043 0320 	orrmi.w	r3, r3, #32
 800f45c:	6029      	str	r1, [r5, #0]
 800f45e:	bf48      	it	mi
 800f460:	6023      	strmi	r3, [r4, #0]
 800f462:	b91e      	cbnz	r6, 800f46c <_printf_i+0x1a4>
 800f464:	6823      	ldr	r3, [r4, #0]
 800f466:	f023 0320 	bic.w	r3, r3, #32
 800f46a:	6023      	str	r3, [r4, #0]
 800f46c:	2310      	movs	r3, #16
 800f46e:	e7a7      	b.n	800f3c0 <_printf_i+0xf8>
 800f470:	4824      	ldr	r0, [pc, #144]	; (800f504 <_printf_i+0x23c>)
 800f472:	e7e4      	b.n	800f43e <_printf_i+0x176>
 800f474:	4615      	mov	r5, r2
 800f476:	e7bd      	b.n	800f3f4 <_printf_i+0x12c>
 800f478:	682b      	ldr	r3, [r5, #0]
 800f47a:	6826      	ldr	r6, [r4, #0]
 800f47c:	6961      	ldr	r1, [r4, #20]
 800f47e:	1d18      	adds	r0, r3, #4
 800f480:	6028      	str	r0, [r5, #0]
 800f482:	0635      	lsls	r5, r6, #24
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	d501      	bpl.n	800f48c <_printf_i+0x1c4>
 800f488:	6019      	str	r1, [r3, #0]
 800f48a:	e002      	b.n	800f492 <_printf_i+0x1ca>
 800f48c:	0670      	lsls	r0, r6, #25
 800f48e:	d5fb      	bpl.n	800f488 <_printf_i+0x1c0>
 800f490:	8019      	strh	r1, [r3, #0]
 800f492:	2300      	movs	r3, #0
 800f494:	6123      	str	r3, [r4, #16]
 800f496:	4615      	mov	r5, r2
 800f498:	e7bc      	b.n	800f414 <_printf_i+0x14c>
 800f49a:	682b      	ldr	r3, [r5, #0]
 800f49c:	1d1a      	adds	r2, r3, #4
 800f49e:	602a      	str	r2, [r5, #0]
 800f4a0:	681d      	ldr	r5, [r3, #0]
 800f4a2:	6862      	ldr	r2, [r4, #4]
 800f4a4:	2100      	movs	r1, #0
 800f4a6:	4628      	mov	r0, r5
 800f4a8:	f7f0 feca 	bl	8000240 <memchr>
 800f4ac:	b108      	cbz	r0, 800f4b2 <_printf_i+0x1ea>
 800f4ae:	1b40      	subs	r0, r0, r5
 800f4b0:	6060      	str	r0, [r4, #4]
 800f4b2:	6863      	ldr	r3, [r4, #4]
 800f4b4:	6123      	str	r3, [r4, #16]
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4bc:	e7aa      	b.n	800f414 <_printf_i+0x14c>
 800f4be:	6923      	ldr	r3, [r4, #16]
 800f4c0:	462a      	mov	r2, r5
 800f4c2:	4649      	mov	r1, r9
 800f4c4:	4640      	mov	r0, r8
 800f4c6:	47d0      	blx	sl
 800f4c8:	3001      	adds	r0, #1
 800f4ca:	d0ad      	beq.n	800f428 <_printf_i+0x160>
 800f4cc:	6823      	ldr	r3, [r4, #0]
 800f4ce:	079b      	lsls	r3, r3, #30
 800f4d0:	d413      	bmi.n	800f4fa <_printf_i+0x232>
 800f4d2:	68e0      	ldr	r0, [r4, #12]
 800f4d4:	9b03      	ldr	r3, [sp, #12]
 800f4d6:	4298      	cmp	r0, r3
 800f4d8:	bfb8      	it	lt
 800f4da:	4618      	movlt	r0, r3
 800f4dc:	e7a6      	b.n	800f42c <_printf_i+0x164>
 800f4de:	2301      	movs	r3, #1
 800f4e0:	4632      	mov	r2, r6
 800f4e2:	4649      	mov	r1, r9
 800f4e4:	4640      	mov	r0, r8
 800f4e6:	47d0      	blx	sl
 800f4e8:	3001      	adds	r0, #1
 800f4ea:	d09d      	beq.n	800f428 <_printf_i+0x160>
 800f4ec:	3501      	adds	r5, #1
 800f4ee:	68e3      	ldr	r3, [r4, #12]
 800f4f0:	9903      	ldr	r1, [sp, #12]
 800f4f2:	1a5b      	subs	r3, r3, r1
 800f4f4:	42ab      	cmp	r3, r5
 800f4f6:	dcf2      	bgt.n	800f4de <_printf_i+0x216>
 800f4f8:	e7eb      	b.n	800f4d2 <_printf_i+0x20a>
 800f4fa:	2500      	movs	r5, #0
 800f4fc:	f104 0619 	add.w	r6, r4, #25
 800f500:	e7f5      	b.n	800f4ee <_printf_i+0x226>
 800f502:	bf00      	nop
 800f504:	08012c03 	.word	0x08012c03
 800f508:	08012c14 	.word	0x08012c14

0800f50c <std>:
 800f50c:	2300      	movs	r3, #0
 800f50e:	b510      	push	{r4, lr}
 800f510:	4604      	mov	r4, r0
 800f512:	e9c0 3300 	strd	r3, r3, [r0]
 800f516:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f51a:	6083      	str	r3, [r0, #8]
 800f51c:	8181      	strh	r1, [r0, #12]
 800f51e:	6643      	str	r3, [r0, #100]	; 0x64
 800f520:	81c2      	strh	r2, [r0, #14]
 800f522:	6183      	str	r3, [r0, #24]
 800f524:	4619      	mov	r1, r3
 800f526:	2208      	movs	r2, #8
 800f528:	305c      	adds	r0, #92	; 0x5c
 800f52a:	f000 f914 	bl	800f756 <memset>
 800f52e:	4b0d      	ldr	r3, [pc, #52]	; (800f564 <std+0x58>)
 800f530:	6263      	str	r3, [r4, #36]	; 0x24
 800f532:	4b0d      	ldr	r3, [pc, #52]	; (800f568 <std+0x5c>)
 800f534:	62a3      	str	r3, [r4, #40]	; 0x28
 800f536:	4b0d      	ldr	r3, [pc, #52]	; (800f56c <std+0x60>)
 800f538:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f53a:	4b0d      	ldr	r3, [pc, #52]	; (800f570 <std+0x64>)
 800f53c:	6323      	str	r3, [r4, #48]	; 0x30
 800f53e:	4b0d      	ldr	r3, [pc, #52]	; (800f574 <std+0x68>)
 800f540:	6224      	str	r4, [r4, #32]
 800f542:	429c      	cmp	r4, r3
 800f544:	d006      	beq.n	800f554 <std+0x48>
 800f546:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f54a:	4294      	cmp	r4, r2
 800f54c:	d002      	beq.n	800f554 <std+0x48>
 800f54e:	33d0      	adds	r3, #208	; 0xd0
 800f550:	429c      	cmp	r4, r3
 800f552:	d105      	bne.n	800f560 <std+0x54>
 800f554:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f55c:	f000 b9e6 	b.w	800f92c <__retarget_lock_init_recursive>
 800f560:	bd10      	pop	{r4, pc}
 800f562:	bf00      	nop
 800f564:	0800f6d1 	.word	0x0800f6d1
 800f568:	0800f6f3 	.word	0x0800f6f3
 800f56c:	0800f72b 	.word	0x0800f72b
 800f570:	0800f74f 	.word	0x0800f74f
 800f574:	20005174 	.word	0x20005174

0800f578 <stdio_exit_handler>:
 800f578:	4a02      	ldr	r2, [pc, #8]	; (800f584 <stdio_exit_handler+0xc>)
 800f57a:	4903      	ldr	r1, [pc, #12]	; (800f588 <stdio_exit_handler+0x10>)
 800f57c:	4803      	ldr	r0, [pc, #12]	; (800f58c <stdio_exit_handler+0x14>)
 800f57e:	f000 b869 	b.w	800f654 <_fwalk_sglue>
 800f582:	bf00      	nop
 800f584:	20000190 	.word	0x20000190
 800f588:	08011339 	.word	0x08011339
 800f58c:	2000019c 	.word	0x2000019c

0800f590 <cleanup_stdio>:
 800f590:	6841      	ldr	r1, [r0, #4]
 800f592:	4b0c      	ldr	r3, [pc, #48]	; (800f5c4 <cleanup_stdio+0x34>)
 800f594:	4299      	cmp	r1, r3
 800f596:	b510      	push	{r4, lr}
 800f598:	4604      	mov	r4, r0
 800f59a:	d001      	beq.n	800f5a0 <cleanup_stdio+0x10>
 800f59c:	f001 fecc 	bl	8011338 <_fflush_r>
 800f5a0:	68a1      	ldr	r1, [r4, #8]
 800f5a2:	4b09      	ldr	r3, [pc, #36]	; (800f5c8 <cleanup_stdio+0x38>)
 800f5a4:	4299      	cmp	r1, r3
 800f5a6:	d002      	beq.n	800f5ae <cleanup_stdio+0x1e>
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	f001 fec5 	bl	8011338 <_fflush_r>
 800f5ae:	68e1      	ldr	r1, [r4, #12]
 800f5b0:	4b06      	ldr	r3, [pc, #24]	; (800f5cc <cleanup_stdio+0x3c>)
 800f5b2:	4299      	cmp	r1, r3
 800f5b4:	d004      	beq.n	800f5c0 <cleanup_stdio+0x30>
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5bc:	f001 bebc 	b.w	8011338 <_fflush_r>
 800f5c0:	bd10      	pop	{r4, pc}
 800f5c2:	bf00      	nop
 800f5c4:	20005174 	.word	0x20005174
 800f5c8:	200051dc 	.word	0x200051dc
 800f5cc:	20005244 	.word	0x20005244

0800f5d0 <global_stdio_init.part.0>:
 800f5d0:	b510      	push	{r4, lr}
 800f5d2:	4b0b      	ldr	r3, [pc, #44]	; (800f600 <global_stdio_init.part.0+0x30>)
 800f5d4:	4c0b      	ldr	r4, [pc, #44]	; (800f604 <global_stdio_init.part.0+0x34>)
 800f5d6:	4a0c      	ldr	r2, [pc, #48]	; (800f608 <global_stdio_init.part.0+0x38>)
 800f5d8:	601a      	str	r2, [r3, #0]
 800f5da:	4620      	mov	r0, r4
 800f5dc:	2200      	movs	r2, #0
 800f5de:	2104      	movs	r1, #4
 800f5e0:	f7ff ff94 	bl	800f50c <std>
 800f5e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f5e8:	2201      	movs	r2, #1
 800f5ea:	2109      	movs	r1, #9
 800f5ec:	f7ff ff8e 	bl	800f50c <std>
 800f5f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f5f4:	2202      	movs	r2, #2
 800f5f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5fa:	2112      	movs	r1, #18
 800f5fc:	f7ff bf86 	b.w	800f50c <std>
 800f600:	200052ac 	.word	0x200052ac
 800f604:	20005174 	.word	0x20005174
 800f608:	0800f579 	.word	0x0800f579

0800f60c <__sfp_lock_acquire>:
 800f60c:	4801      	ldr	r0, [pc, #4]	; (800f614 <__sfp_lock_acquire+0x8>)
 800f60e:	f000 b98e 	b.w	800f92e <__retarget_lock_acquire_recursive>
 800f612:	bf00      	nop
 800f614:	200052b5 	.word	0x200052b5

0800f618 <__sfp_lock_release>:
 800f618:	4801      	ldr	r0, [pc, #4]	; (800f620 <__sfp_lock_release+0x8>)
 800f61a:	f000 b989 	b.w	800f930 <__retarget_lock_release_recursive>
 800f61e:	bf00      	nop
 800f620:	200052b5 	.word	0x200052b5

0800f624 <__sinit>:
 800f624:	b510      	push	{r4, lr}
 800f626:	4604      	mov	r4, r0
 800f628:	f7ff fff0 	bl	800f60c <__sfp_lock_acquire>
 800f62c:	6a23      	ldr	r3, [r4, #32]
 800f62e:	b11b      	cbz	r3, 800f638 <__sinit+0x14>
 800f630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f634:	f7ff bff0 	b.w	800f618 <__sfp_lock_release>
 800f638:	4b04      	ldr	r3, [pc, #16]	; (800f64c <__sinit+0x28>)
 800f63a:	6223      	str	r3, [r4, #32]
 800f63c:	4b04      	ldr	r3, [pc, #16]	; (800f650 <__sinit+0x2c>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d1f5      	bne.n	800f630 <__sinit+0xc>
 800f644:	f7ff ffc4 	bl	800f5d0 <global_stdio_init.part.0>
 800f648:	e7f2      	b.n	800f630 <__sinit+0xc>
 800f64a:	bf00      	nop
 800f64c:	0800f591 	.word	0x0800f591
 800f650:	200052ac 	.word	0x200052ac

0800f654 <_fwalk_sglue>:
 800f654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f658:	4607      	mov	r7, r0
 800f65a:	4688      	mov	r8, r1
 800f65c:	4614      	mov	r4, r2
 800f65e:	2600      	movs	r6, #0
 800f660:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f664:	f1b9 0901 	subs.w	r9, r9, #1
 800f668:	d505      	bpl.n	800f676 <_fwalk_sglue+0x22>
 800f66a:	6824      	ldr	r4, [r4, #0]
 800f66c:	2c00      	cmp	r4, #0
 800f66e:	d1f7      	bne.n	800f660 <_fwalk_sglue+0xc>
 800f670:	4630      	mov	r0, r6
 800f672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f676:	89ab      	ldrh	r3, [r5, #12]
 800f678:	2b01      	cmp	r3, #1
 800f67a:	d907      	bls.n	800f68c <_fwalk_sglue+0x38>
 800f67c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f680:	3301      	adds	r3, #1
 800f682:	d003      	beq.n	800f68c <_fwalk_sglue+0x38>
 800f684:	4629      	mov	r1, r5
 800f686:	4638      	mov	r0, r7
 800f688:	47c0      	blx	r8
 800f68a:	4306      	orrs	r6, r0
 800f68c:	3568      	adds	r5, #104	; 0x68
 800f68e:	e7e9      	b.n	800f664 <_fwalk_sglue+0x10>

0800f690 <siprintf>:
 800f690:	b40e      	push	{r1, r2, r3}
 800f692:	b500      	push	{lr}
 800f694:	b09c      	sub	sp, #112	; 0x70
 800f696:	ab1d      	add	r3, sp, #116	; 0x74
 800f698:	9002      	str	r0, [sp, #8]
 800f69a:	9006      	str	r0, [sp, #24]
 800f69c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f6a0:	4809      	ldr	r0, [pc, #36]	; (800f6c8 <siprintf+0x38>)
 800f6a2:	9107      	str	r1, [sp, #28]
 800f6a4:	9104      	str	r1, [sp, #16]
 800f6a6:	4909      	ldr	r1, [pc, #36]	; (800f6cc <siprintf+0x3c>)
 800f6a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6ac:	9105      	str	r1, [sp, #20]
 800f6ae:	6800      	ldr	r0, [r0, #0]
 800f6b0:	9301      	str	r3, [sp, #4]
 800f6b2:	a902      	add	r1, sp, #8
 800f6b4:	f001 fcbc 	bl	8011030 <_svfiprintf_r>
 800f6b8:	9b02      	ldr	r3, [sp, #8]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	701a      	strb	r2, [r3, #0]
 800f6be:	b01c      	add	sp, #112	; 0x70
 800f6c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6c4:	b003      	add	sp, #12
 800f6c6:	4770      	bx	lr
 800f6c8:	200001e8 	.word	0x200001e8
 800f6cc:	ffff0208 	.word	0xffff0208

0800f6d0 <__sread>:
 800f6d0:	b510      	push	{r4, lr}
 800f6d2:	460c      	mov	r4, r1
 800f6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6d8:	f000 f8da 	bl	800f890 <_read_r>
 800f6dc:	2800      	cmp	r0, #0
 800f6de:	bfab      	itete	ge
 800f6e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f6e2:	89a3      	ldrhlt	r3, [r4, #12]
 800f6e4:	181b      	addge	r3, r3, r0
 800f6e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f6ea:	bfac      	ite	ge
 800f6ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800f6ee:	81a3      	strhlt	r3, [r4, #12]
 800f6f0:	bd10      	pop	{r4, pc}

0800f6f2 <__swrite>:
 800f6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6f6:	461f      	mov	r7, r3
 800f6f8:	898b      	ldrh	r3, [r1, #12]
 800f6fa:	05db      	lsls	r3, r3, #23
 800f6fc:	4605      	mov	r5, r0
 800f6fe:	460c      	mov	r4, r1
 800f700:	4616      	mov	r6, r2
 800f702:	d505      	bpl.n	800f710 <__swrite+0x1e>
 800f704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f708:	2302      	movs	r3, #2
 800f70a:	2200      	movs	r2, #0
 800f70c:	f000 f8ae 	bl	800f86c <_lseek_r>
 800f710:	89a3      	ldrh	r3, [r4, #12]
 800f712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f71a:	81a3      	strh	r3, [r4, #12]
 800f71c:	4632      	mov	r2, r6
 800f71e:	463b      	mov	r3, r7
 800f720:	4628      	mov	r0, r5
 800f722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f726:	f000 b8c5 	b.w	800f8b4 <_write_r>

0800f72a <__sseek>:
 800f72a:	b510      	push	{r4, lr}
 800f72c:	460c      	mov	r4, r1
 800f72e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f732:	f000 f89b 	bl	800f86c <_lseek_r>
 800f736:	1c43      	adds	r3, r0, #1
 800f738:	89a3      	ldrh	r3, [r4, #12]
 800f73a:	bf15      	itete	ne
 800f73c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f73e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f746:	81a3      	strheq	r3, [r4, #12]
 800f748:	bf18      	it	ne
 800f74a:	81a3      	strhne	r3, [r4, #12]
 800f74c:	bd10      	pop	{r4, pc}

0800f74e <__sclose>:
 800f74e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f752:	f000 b87b 	b.w	800f84c <_close_r>

0800f756 <memset>:
 800f756:	4402      	add	r2, r0
 800f758:	4603      	mov	r3, r0
 800f75a:	4293      	cmp	r3, r2
 800f75c:	d100      	bne.n	800f760 <memset+0xa>
 800f75e:	4770      	bx	lr
 800f760:	f803 1b01 	strb.w	r1, [r3], #1
 800f764:	e7f9      	b.n	800f75a <memset+0x4>

0800f766 <strncpy>:
 800f766:	b510      	push	{r4, lr}
 800f768:	3901      	subs	r1, #1
 800f76a:	4603      	mov	r3, r0
 800f76c:	b132      	cbz	r2, 800f77c <strncpy+0x16>
 800f76e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f772:	f803 4b01 	strb.w	r4, [r3], #1
 800f776:	3a01      	subs	r2, #1
 800f778:	2c00      	cmp	r4, #0
 800f77a:	d1f7      	bne.n	800f76c <strncpy+0x6>
 800f77c:	441a      	add	r2, r3
 800f77e:	2100      	movs	r1, #0
 800f780:	4293      	cmp	r3, r2
 800f782:	d100      	bne.n	800f786 <strncpy+0x20>
 800f784:	bd10      	pop	{r4, pc}
 800f786:	f803 1b01 	strb.w	r1, [r3], #1
 800f78a:	e7f9      	b.n	800f780 <strncpy+0x1a>

0800f78c <strtok>:
 800f78c:	4b16      	ldr	r3, [pc, #88]	; (800f7e8 <strtok+0x5c>)
 800f78e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f790:	681e      	ldr	r6, [r3, #0]
 800f792:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800f794:	4605      	mov	r5, r0
 800f796:	b9fc      	cbnz	r4, 800f7d8 <strtok+0x4c>
 800f798:	2050      	movs	r0, #80	; 0x50
 800f79a:	9101      	str	r1, [sp, #4]
 800f79c:	f000 ffbe 	bl	801071c <malloc>
 800f7a0:	9901      	ldr	r1, [sp, #4]
 800f7a2:	6470      	str	r0, [r6, #68]	; 0x44
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	b920      	cbnz	r0, 800f7b2 <strtok+0x26>
 800f7a8:	4b10      	ldr	r3, [pc, #64]	; (800f7ec <strtok+0x60>)
 800f7aa:	4811      	ldr	r0, [pc, #68]	; (800f7f0 <strtok+0x64>)
 800f7ac:	215b      	movs	r1, #91	; 0x5b
 800f7ae:	f000 f8cf 	bl	800f950 <__assert_func>
 800f7b2:	e9c0 4400 	strd	r4, r4, [r0]
 800f7b6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f7ba:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f7be:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f7c2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f7c6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f7ca:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f7ce:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f7d2:	6184      	str	r4, [r0, #24]
 800f7d4:	7704      	strb	r4, [r0, #28]
 800f7d6:	6244      	str	r4, [r0, #36]	; 0x24
 800f7d8:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800f7da:	2301      	movs	r3, #1
 800f7dc:	4628      	mov	r0, r5
 800f7de:	b002      	add	sp, #8
 800f7e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7e4:	f000 b806 	b.w	800f7f4 <__strtok_r>
 800f7e8:	200001e8 	.word	0x200001e8
 800f7ec:	08012c25 	.word	0x08012c25
 800f7f0:	08012c3c 	.word	0x08012c3c

0800f7f4 <__strtok_r>:
 800f7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7f6:	b908      	cbnz	r0, 800f7fc <__strtok_r+0x8>
 800f7f8:	6810      	ldr	r0, [r2, #0]
 800f7fa:	b188      	cbz	r0, 800f820 <__strtok_r+0x2c>
 800f7fc:	4604      	mov	r4, r0
 800f7fe:	4620      	mov	r0, r4
 800f800:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f804:	460f      	mov	r7, r1
 800f806:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f80a:	b91e      	cbnz	r6, 800f814 <__strtok_r+0x20>
 800f80c:	b965      	cbnz	r5, 800f828 <__strtok_r+0x34>
 800f80e:	6015      	str	r5, [r2, #0]
 800f810:	4628      	mov	r0, r5
 800f812:	e005      	b.n	800f820 <__strtok_r+0x2c>
 800f814:	42b5      	cmp	r5, r6
 800f816:	d1f6      	bne.n	800f806 <__strtok_r+0x12>
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d1f0      	bne.n	800f7fe <__strtok_r+0xa>
 800f81c:	6014      	str	r4, [r2, #0]
 800f81e:	7003      	strb	r3, [r0, #0]
 800f820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f822:	461c      	mov	r4, r3
 800f824:	e00c      	b.n	800f840 <__strtok_r+0x4c>
 800f826:	b915      	cbnz	r5, 800f82e <__strtok_r+0x3a>
 800f828:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f82c:	460e      	mov	r6, r1
 800f82e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f832:	42ab      	cmp	r3, r5
 800f834:	d1f7      	bne.n	800f826 <__strtok_r+0x32>
 800f836:	2b00      	cmp	r3, #0
 800f838:	d0f3      	beq.n	800f822 <__strtok_r+0x2e>
 800f83a:	2300      	movs	r3, #0
 800f83c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f840:	6014      	str	r4, [r2, #0]
 800f842:	e7ed      	b.n	800f820 <__strtok_r+0x2c>

0800f844 <_localeconv_r>:
 800f844:	4800      	ldr	r0, [pc, #0]	; (800f848 <_localeconv_r+0x4>)
 800f846:	4770      	bx	lr
 800f848:	200002dc 	.word	0x200002dc

0800f84c <_close_r>:
 800f84c:	b538      	push	{r3, r4, r5, lr}
 800f84e:	4d06      	ldr	r5, [pc, #24]	; (800f868 <_close_r+0x1c>)
 800f850:	2300      	movs	r3, #0
 800f852:	4604      	mov	r4, r0
 800f854:	4608      	mov	r0, r1
 800f856:	602b      	str	r3, [r5, #0]
 800f858:	f7f3 f9cb 	bl	8002bf2 <_close>
 800f85c:	1c43      	adds	r3, r0, #1
 800f85e:	d102      	bne.n	800f866 <_close_r+0x1a>
 800f860:	682b      	ldr	r3, [r5, #0]
 800f862:	b103      	cbz	r3, 800f866 <_close_r+0x1a>
 800f864:	6023      	str	r3, [r4, #0]
 800f866:	bd38      	pop	{r3, r4, r5, pc}
 800f868:	200052b0 	.word	0x200052b0

0800f86c <_lseek_r>:
 800f86c:	b538      	push	{r3, r4, r5, lr}
 800f86e:	4d07      	ldr	r5, [pc, #28]	; (800f88c <_lseek_r+0x20>)
 800f870:	4604      	mov	r4, r0
 800f872:	4608      	mov	r0, r1
 800f874:	4611      	mov	r1, r2
 800f876:	2200      	movs	r2, #0
 800f878:	602a      	str	r2, [r5, #0]
 800f87a:	461a      	mov	r2, r3
 800f87c:	f7f3 f9e0 	bl	8002c40 <_lseek>
 800f880:	1c43      	adds	r3, r0, #1
 800f882:	d102      	bne.n	800f88a <_lseek_r+0x1e>
 800f884:	682b      	ldr	r3, [r5, #0]
 800f886:	b103      	cbz	r3, 800f88a <_lseek_r+0x1e>
 800f888:	6023      	str	r3, [r4, #0]
 800f88a:	bd38      	pop	{r3, r4, r5, pc}
 800f88c:	200052b0 	.word	0x200052b0

0800f890 <_read_r>:
 800f890:	b538      	push	{r3, r4, r5, lr}
 800f892:	4d07      	ldr	r5, [pc, #28]	; (800f8b0 <_read_r+0x20>)
 800f894:	4604      	mov	r4, r0
 800f896:	4608      	mov	r0, r1
 800f898:	4611      	mov	r1, r2
 800f89a:	2200      	movs	r2, #0
 800f89c:	602a      	str	r2, [r5, #0]
 800f89e:	461a      	mov	r2, r3
 800f8a0:	f7f3 f96e 	bl	8002b80 <_read>
 800f8a4:	1c43      	adds	r3, r0, #1
 800f8a6:	d102      	bne.n	800f8ae <_read_r+0x1e>
 800f8a8:	682b      	ldr	r3, [r5, #0]
 800f8aa:	b103      	cbz	r3, 800f8ae <_read_r+0x1e>
 800f8ac:	6023      	str	r3, [r4, #0]
 800f8ae:	bd38      	pop	{r3, r4, r5, pc}
 800f8b0:	200052b0 	.word	0x200052b0

0800f8b4 <_write_r>:
 800f8b4:	b538      	push	{r3, r4, r5, lr}
 800f8b6:	4d07      	ldr	r5, [pc, #28]	; (800f8d4 <_write_r+0x20>)
 800f8b8:	4604      	mov	r4, r0
 800f8ba:	4608      	mov	r0, r1
 800f8bc:	4611      	mov	r1, r2
 800f8be:	2200      	movs	r2, #0
 800f8c0:	602a      	str	r2, [r5, #0]
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	f7f3 f979 	bl	8002bba <_write>
 800f8c8:	1c43      	adds	r3, r0, #1
 800f8ca:	d102      	bne.n	800f8d2 <_write_r+0x1e>
 800f8cc:	682b      	ldr	r3, [r5, #0]
 800f8ce:	b103      	cbz	r3, 800f8d2 <_write_r+0x1e>
 800f8d0:	6023      	str	r3, [r4, #0]
 800f8d2:	bd38      	pop	{r3, r4, r5, pc}
 800f8d4:	200052b0 	.word	0x200052b0

0800f8d8 <__errno>:
 800f8d8:	4b01      	ldr	r3, [pc, #4]	; (800f8e0 <__errno+0x8>)
 800f8da:	6818      	ldr	r0, [r3, #0]
 800f8dc:	4770      	bx	lr
 800f8de:	bf00      	nop
 800f8e0:	200001e8 	.word	0x200001e8

0800f8e4 <__libc_init_array>:
 800f8e4:	b570      	push	{r4, r5, r6, lr}
 800f8e6:	4d0d      	ldr	r5, [pc, #52]	; (800f91c <__libc_init_array+0x38>)
 800f8e8:	4c0d      	ldr	r4, [pc, #52]	; (800f920 <__libc_init_array+0x3c>)
 800f8ea:	1b64      	subs	r4, r4, r5
 800f8ec:	10a4      	asrs	r4, r4, #2
 800f8ee:	2600      	movs	r6, #0
 800f8f0:	42a6      	cmp	r6, r4
 800f8f2:	d109      	bne.n	800f908 <__libc_init_array+0x24>
 800f8f4:	4d0b      	ldr	r5, [pc, #44]	; (800f924 <__libc_init_array+0x40>)
 800f8f6:	4c0c      	ldr	r4, [pc, #48]	; (800f928 <__libc_init_array+0x44>)
 800f8f8:	f002 ffce 	bl	8012898 <_init>
 800f8fc:	1b64      	subs	r4, r4, r5
 800f8fe:	10a4      	asrs	r4, r4, #2
 800f900:	2600      	movs	r6, #0
 800f902:	42a6      	cmp	r6, r4
 800f904:	d105      	bne.n	800f912 <__libc_init_array+0x2e>
 800f906:	bd70      	pop	{r4, r5, r6, pc}
 800f908:	f855 3b04 	ldr.w	r3, [r5], #4
 800f90c:	4798      	blx	r3
 800f90e:	3601      	adds	r6, #1
 800f910:	e7ee      	b.n	800f8f0 <__libc_init_array+0xc>
 800f912:	f855 3b04 	ldr.w	r3, [r5], #4
 800f916:	4798      	blx	r3
 800f918:	3601      	adds	r6, #1
 800f91a:	e7f2      	b.n	800f902 <__libc_init_array+0x1e>
 800f91c:	08012ef0 	.word	0x08012ef0
 800f920:	08012ef0 	.word	0x08012ef0
 800f924:	08012ef0 	.word	0x08012ef0
 800f928:	08012ef4 	.word	0x08012ef4

0800f92c <__retarget_lock_init_recursive>:
 800f92c:	4770      	bx	lr

0800f92e <__retarget_lock_acquire_recursive>:
 800f92e:	4770      	bx	lr

0800f930 <__retarget_lock_release_recursive>:
 800f930:	4770      	bx	lr

0800f932 <memcpy>:
 800f932:	440a      	add	r2, r1
 800f934:	4291      	cmp	r1, r2
 800f936:	f100 33ff 	add.w	r3, r0, #4294967295
 800f93a:	d100      	bne.n	800f93e <memcpy+0xc>
 800f93c:	4770      	bx	lr
 800f93e:	b510      	push	{r4, lr}
 800f940:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f944:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f948:	4291      	cmp	r1, r2
 800f94a:	d1f9      	bne.n	800f940 <memcpy+0xe>
 800f94c:	bd10      	pop	{r4, pc}
	...

0800f950 <__assert_func>:
 800f950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f952:	4614      	mov	r4, r2
 800f954:	461a      	mov	r2, r3
 800f956:	4b09      	ldr	r3, [pc, #36]	; (800f97c <__assert_func+0x2c>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	4605      	mov	r5, r0
 800f95c:	68d8      	ldr	r0, [r3, #12]
 800f95e:	b14c      	cbz	r4, 800f974 <__assert_func+0x24>
 800f960:	4b07      	ldr	r3, [pc, #28]	; (800f980 <__assert_func+0x30>)
 800f962:	9100      	str	r1, [sp, #0]
 800f964:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f968:	4906      	ldr	r1, [pc, #24]	; (800f984 <__assert_func+0x34>)
 800f96a:	462b      	mov	r3, r5
 800f96c:	f001 fd0c 	bl	8011388 <fiprintf>
 800f970:	f001 fd46 	bl	8011400 <abort>
 800f974:	4b04      	ldr	r3, [pc, #16]	; (800f988 <__assert_func+0x38>)
 800f976:	461c      	mov	r4, r3
 800f978:	e7f3      	b.n	800f962 <__assert_func+0x12>
 800f97a:	bf00      	nop
 800f97c:	200001e8 	.word	0x200001e8
 800f980:	08012c96 	.word	0x08012c96
 800f984:	08012ca3 	.word	0x08012ca3
 800f988:	08012cd1 	.word	0x08012cd1

0800f98c <quorem>:
 800f98c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f990:	6903      	ldr	r3, [r0, #16]
 800f992:	690c      	ldr	r4, [r1, #16]
 800f994:	42a3      	cmp	r3, r4
 800f996:	4607      	mov	r7, r0
 800f998:	db7e      	blt.n	800fa98 <quorem+0x10c>
 800f99a:	3c01      	subs	r4, #1
 800f99c:	f101 0814 	add.w	r8, r1, #20
 800f9a0:	f100 0514 	add.w	r5, r0, #20
 800f9a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f9a8:	9301      	str	r3, [sp, #4]
 800f9aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f9ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f9b2:	3301      	adds	r3, #1
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f9ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f9be:	fbb2 f6f3 	udiv	r6, r2, r3
 800f9c2:	d331      	bcc.n	800fa28 <quorem+0x9c>
 800f9c4:	f04f 0e00 	mov.w	lr, #0
 800f9c8:	4640      	mov	r0, r8
 800f9ca:	46ac      	mov	ip, r5
 800f9cc:	46f2      	mov	sl, lr
 800f9ce:	f850 2b04 	ldr.w	r2, [r0], #4
 800f9d2:	b293      	uxth	r3, r2
 800f9d4:	fb06 e303 	mla	r3, r6, r3, lr
 800f9d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f9dc:	0c1a      	lsrs	r2, r3, #16
 800f9de:	b29b      	uxth	r3, r3
 800f9e0:	ebaa 0303 	sub.w	r3, sl, r3
 800f9e4:	f8dc a000 	ldr.w	sl, [ip]
 800f9e8:	fa13 f38a 	uxtah	r3, r3, sl
 800f9ec:	fb06 220e 	mla	r2, r6, lr, r2
 800f9f0:	9300      	str	r3, [sp, #0]
 800f9f2:	9b00      	ldr	r3, [sp, #0]
 800f9f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f9f8:	b292      	uxth	r2, r2
 800f9fa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f9fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fa02:	f8bd 3000 	ldrh.w	r3, [sp]
 800fa06:	4581      	cmp	r9, r0
 800fa08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa0c:	f84c 3b04 	str.w	r3, [ip], #4
 800fa10:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fa14:	d2db      	bcs.n	800f9ce <quorem+0x42>
 800fa16:	f855 300b 	ldr.w	r3, [r5, fp]
 800fa1a:	b92b      	cbnz	r3, 800fa28 <quorem+0x9c>
 800fa1c:	9b01      	ldr	r3, [sp, #4]
 800fa1e:	3b04      	subs	r3, #4
 800fa20:	429d      	cmp	r5, r3
 800fa22:	461a      	mov	r2, r3
 800fa24:	d32c      	bcc.n	800fa80 <quorem+0xf4>
 800fa26:	613c      	str	r4, [r7, #16]
 800fa28:	4638      	mov	r0, r7
 800fa2a:	f001 f9a7 	bl	8010d7c <__mcmp>
 800fa2e:	2800      	cmp	r0, #0
 800fa30:	db22      	blt.n	800fa78 <quorem+0xec>
 800fa32:	3601      	adds	r6, #1
 800fa34:	4629      	mov	r1, r5
 800fa36:	2000      	movs	r0, #0
 800fa38:	f858 2b04 	ldr.w	r2, [r8], #4
 800fa3c:	f8d1 c000 	ldr.w	ip, [r1]
 800fa40:	b293      	uxth	r3, r2
 800fa42:	1ac3      	subs	r3, r0, r3
 800fa44:	0c12      	lsrs	r2, r2, #16
 800fa46:	fa13 f38c 	uxtah	r3, r3, ip
 800fa4a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800fa4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa58:	45c1      	cmp	r9, r8
 800fa5a:	f841 3b04 	str.w	r3, [r1], #4
 800fa5e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fa62:	d2e9      	bcs.n	800fa38 <quorem+0xac>
 800fa64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa6c:	b922      	cbnz	r2, 800fa78 <quorem+0xec>
 800fa6e:	3b04      	subs	r3, #4
 800fa70:	429d      	cmp	r5, r3
 800fa72:	461a      	mov	r2, r3
 800fa74:	d30a      	bcc.n	800fa8c <quorem+0x100>
 800fa76:	613c      	str	r4, [r7, #16]
 800fa78:	4630      	mov	r0, r6
 800fa7a:	b003      	add	sp, #12
 800fa7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa80:	6812      	ldr	r2, [r2, #0]
 800fa82:	3b04      	subs	r3, #4
 800fa84:	2a00      	cmp	r2, #0
 800fa86:	d1ce      	bne.n	800fa26 <quorem+0x9a>
 800fa88:	3c01      	subs	r4, #1
 800fa8a:	e7c9      	b.n	800fa20 <quorem+0x94>
 800fa8c:	6812      	ldr	r2, [r2, #0]
 800fa8e:	3b04      	subs	r3, #4
 800fa90:	2a00      	cmp	r2, #0
 800fa92:	d1f0      	bne.n	800fa76 <quorem+0xea>
 800fa94:	3c01      	subs	r4, #1
 800fa96:	e7eb      	b.n	800fa70 <quorem+0xe4>
 800fa98:	2000      	movs	r0, #0
 800fa9a:	e7ee      	b.n	800fa7a <quorem+0xee>
 800fa9c:	0000      	movs	r0, r0
	...

0800faa0 <_dtoa_r>:
 800faa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faa4:	ed2d 8b04 	vpush	{d8-d9}
 800faa8:	69c5      	ldr	r5, [r0, #28]
 800faaa:	b093      	sub	sp, #76	; 0x4c
 800faac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fab0:	ec57 6b10 	vmov	r6, r7, d0
 800fab4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fab8:	9107      	str	r1, [sp, #28]
 800faba:	4604      	mov	r4, r0
 800fabc:	920a      	str	r2, [sp, #40]	; 0x28
 800fabe:	930d      	str	r3, [sp, #52]	; 0x34
 800fac0:	b975      	cbnz	r5, 800fae0 <_dtoa_r+0x40>
 800fac2:	2010      	movs	r0, #16
 800fac4:	f000 fe2a 	bl	801071c <malloc>
 800fac8:	4602      	mov	r2, r0
 800faca:	61e0      	str	r0, [r4, #28]
 800facc:	b920      	cbnz	r0, 800fad8 <_dtoa_r+0x38>
 800face:	4bae      	ldr	r3, [pc, #696]	; (800fd88 <_dtoa_r+0x2e8>)
 800fad0:	21ef      	movs	r1, #239	; 0xef
 800fad2:	48ae      	ldr	r0, [pc, #696]	; (800fd8c <_dtoa_r+0x2ec>)
 800fad4:	f7ff ff3c 	bl	800f950 <__assert_func>
 800fad8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fadc:	6005      	str	r5, [r0, #0]
 800fade:	60c5      	str	r5, [r0, #12]
 800fae0:	69e3      	ldr	r3, [r4, #28]
 800fae2:	6819      	ldr	r1, [r3, #0]
 800fae4:	b151      	cbz	r1, 800fafc <_dtoa_r+0x5c>
 800fae6:	685a      	ldr	r2, [r3, #4]
 800fae8:	604a      	str	r2, [r1, #4]
 800faea:	2301      	movs	r3, #1
 800faec:	4093      	lsls	r3, r2
 800faee:	608b      	str	r3, [r1, #8]
 800faf0:	4620      	mov	r0, r4
 800faf2:	f000 ff07 	bl	8010904 <_Bfree>
 800faf6:	69e3      	ldr	r3, [r4, #28]
 800faf8:	2200      	movs	r2, #0
 800fafa:	601a      	str	r2, [r3, #0]
 800fafc:	1e3b      	subs	r3, r7, #0
 800fafe:	bfbb      	ittet	lt
 800fb00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fb04:	9303      	strlt	r3, [sp, #12]
 800fb06:	2300      	movge	r3, #0
 800fb08:	2201      	movlt	r2, #1
 800fb0a:	bfac      	ite	ge
 800fb0c:	f8c8 3000 	strge.w	r3, [r8]
 800fb10:	f8c8 2000 	strlt.w	r2, [r8]
 800fb14:	4b9e      	ldr	r3, [pc, #632]	; (800fd90 <_dtoa_r+0x2f0>)
 800fb16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800fb1a:	ea33 0308 	bics.w	r3, r3, r8
 800fb1e:	d11b      	bne.n	800fb58 <_dtoa_r+0xb8>
 800fb20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fb22:	f242 730f 	movw	r3, #9999	; 0x270f
 800fb26:	6013      	str	r3, [r2, #0]
 800fb28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800fb2c:	4333      	orrs	r3, r6
 800fb2e:	f000 8593 	beq.w	8010658 <_dtoa_r+0xbb8>
 800fb32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb34:	b963      	cbnz	r3, 800fb50 <_dtoa_r+0xb0>
 800fb36:	4b97      	ldr	r3, [pc, #604]	; (800fd94 <_dtoa_r+0x2f4>)
 800fb38:	e027      	b.n	800fb8a <_dtoa_r+0xea>
 800fb3a:	4b97      	ldr	r3, [pc, #604]	; (800fd98 <_dtoa_r+0x2f8>)
 800fb3c:	9300      	str	r3, [sp, #0]
 800fb3e:	3308      	adds	r3, #8
 800fb40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fb42:	6013      	str	r3, [r2, #0]
 800fb44:	9800      	ldr	r0, [sp, #0]
 800fb46:	b013      	add	sp, #76	; 0x4c
 800fb48:	ecbd 8b04 	vpop	{d8-d9}
 800fb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb50:	4b90      	ldr	r3, [pc, #576]	; (800fd94 <_dtoa_r+0x2f4>)
 800fb52:	9300      	str	r3, [sp, #0]
 800fb54:	3303      	adds	r3, #3
 800fb56:	e7f3      	b.n	800fb40 <_dtoa_r+0xa0>
 800fb58:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	ec51 0b17 	vmov	r0, r1, d7
 800fb62:	eeb0 8a47 	vmov.f32	s16, s14
 800fb66:	eef0 8a67 	vmov.f32	s17, s15
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	f7f0 ffe4 	bl	8000b38 <__aeabi_dcmpeq>
 800fb70:	4681      	mov	r9, r0
 800fb72:	b160      	cbz	r0, 800fb8e <_dtoa_r+0xee>
 800fb74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fb76:	2301      	movs	r3, #1
 800fb78:	6013      	str	r3, [r2, #0]
 800fb7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	f000 8568 	beq.w	8010652 <_dtoa_r+0xbb2>
 800fb82:	4b86      	ldr	r3, [pc, #536]	; (800fd9c <_dtoa_r+0x2fc>)
 800fb84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fb86:	6013      	str	r3, [r2, #0]
 800fb88:	3b01      	subs	r3, #1
 800fb8a:	9300      	str	r3, [sp, #0]
 800fb8c:	e7da      	b.n	800fb44 <_dtoa_r+0xa4>
 800fb8e:	aa10      	add	r2, sp, #64	; 0x40
 800fb90:	a911      	add	r1, sp, #68	; 0x44
 800fb92:	4620      	mov	r0, r4
 800fb94:	eeb0 0a48 	vmov.f32	s0, s16
 800fb98:	eef0 0a68 	vmov.f32	s1, s17
 800fb9c:	f001 f994 	bl	8010ec8 <__d2b>
 800fba0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fba4:	4682      	mov	sl, r0
 800fba6:	2d00      	cmp	r5, #0
 800fba8:	d07f      	beq.n	800fcaa <_dtoa_r+0x20a>
 800fbaa:	ee18 3a90 	vmov	r3, s17
 800fbae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fbb2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fbb6:	ec51 0b18 	vmov	r0, r1, d8
 800fbba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fbbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fbc2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800fbc6:	4619      	mov	r1, r3
 800fbc8:	2200      	movs	r2, #0
 800fbca:	4b75      	ldr	r3, [pc, #468]	; (800fda0 <_dtoa_r+0x300>)
 800fbcc:	f7f0 fb94 	bl	80002f8 <__aeabi_dsub>
 800fbd0:	a367      	add	r3, pc, #412	; (adr r3, 800fd70 <_dtoa_r+0x2d0>)
 800fbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd6:	f7f0 fd47 	bl	8000668 <__aeabi_dmul>
 800fbda:	a367      	add	r3, pc, #412	; (adr r3, 800fd78 <_dtoa_r+0x2d8>)
 800fbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe0:	f7f0 fb8c 	bl	80002fc <__adddf3>
 800fbe4:	4606      	mov	r6, r0
 800fbe6:	4628      	mov	r0, r5
 800fbe8:	460f      	mov	r7, r1
 800fbea:	f7f0 fcd3 	bl	8000594 <__aeabi_i2d>
 800fbee:	a364      	add	r3, pc, #400	; (adr r3, 800fd80 <_dtoa_r+0x2e0>)
 800fbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbf4:	f7f0 fd38 	bl	8000668 <__aeabi_dmul>
 800fbf8:	4602      	mov	r2, r0
 800fbfa:	460b      	mov	r3, r1
 800fbfc:	4630      	mov	r0, r6
 800fbfe:	4639      	mov	r1, r7
 800fc00:	f7f0 fb7c 	bl	80002fc <__adddf3>
 800fc04:	4606      	mov	r6, r0
 800fc06:	460f      	mov	r7, r1
 800fc08:	f7f0 ffde 	bl	8000bc8 <__aeabi_d2iz>
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	4683      	mov	fp, r0
 800fc10:	2300      	movs	r3, #0
 800fc12:	4630      	mov	r0, r6
 800fc14:	4639      	mov	r1, r7
 800fc16:	f7f0 ff99 	bl	8000b4c <__aeabi_dcmplt>
 800fc1a:	b148      	cbz	r0, 800fc30 <_dtoa_r+0x190>
 800fc1c:	4658      	mov	r0, fp
 800fc1e:	f7f0 fcb9 	bl	8000594 <__aeabi_i2d>
 800fc22:	4632      	mov	r2, r6
 800fc24:	463b      	mov	r3, r7
 800fc26:	f7f0 ff87 	bl	8000b38 <__aeabi_dcmpeq>
 800fc2a:	b908      	cbnz	r0, 800fc30 <_dtoa_r+0x190>
 800fc2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fc30:	f1bb 0f16 	cmp.w	fp, #22
 800fc34:	d857      	bhi.n	800fce6 <_dtoa_r+0x246>
 800fc36:	4b5b      	ldr	r3, [pc, #364]	; (800fda4 <_dtoa_r+0x304>)
 800fc38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc40:	ec51 0b18 	vmov	r0, r1, d8
 800fc44:	f7f0 ff82 	bl	8000b4c <__aeabi_dcmplt>
 800fc48:	2800      	cmp	r0, #0
 800fc4a:	d04e      	beq.n	800fcea <_dtoa_r+0x24a>
 800fc4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fc50:	2300      	movs	r3, #0
 800fc52:	930c      	str	r3, [sp, #48]	; 0x30
 800fc54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fc56:	1b5b      	subs	r3, r3, r5
 800fc58:	1e5a      	subs	r2, r3, #1
 800fc5a:	bf45      	ittet	mi
 800fc5c:	f1c3 0301 	rsbmi	r3, r3, #1
 800fc60:	9305      	strmi	r3, [sp, #20]
 800fc62:	2300      	movpl	r3, #0
 800fc64:	2300      	movmi	r3, #0
 800fc66:	9206      	str	r2, [sp, #24]
 800fc68:	bf54      	ite	pl
 800fc6a:	9305      	strpl	r3, [sp, #20]
 800fc6c:	9306      	strmi	r3, [sp, #24]
 800fc6e:	f1bb 0f00 	cmp.w	fp, #0
 800fc72:	db3c      	blt.n	800fcee <_dtoa_r+0x24e>
 800fc74:	9b06      	ldr	r3, [sp, #24]
 800fc76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800fc7a:	445b      	add	r3, fp
 800fc7c:	9306      	str	r3, [sp, #24]
 800fc7e:	2300      	movs	r3, #0
 800fc80:	9308      	str	r3, [sp, #32]
 800fc82:	9b07      	ldr	r3, [sp, #28]
 800fc84:	2b09      	cmp	r3, #9
 800fc86:	d868      	bhi.n	800fd5a <_dtoa_r+0x2ba>
 800fc88:	2b05      	cmp	r3, #5
 800fc8a:	bfc4      	itt	gt
 800fc8c:	3b04      	subgt	r3, #4
 800fc8e:	9307      	strgt	r3, [sp, #28]
 800fc90:	9b07      	ldr	r3, [sp, #28]
 800fc92:	f1a3 0302 	sub.w	r3, r3, #2
 800fc96:	bfcc      	ite	gt
 800fc98:	2500      	movgt	r5, #0
 800fc9a:	2501      	movle	r5, #1
 800fc9c:	2b03      	cmp	r3, #3
 800fc9e:	f200 8085 	bhi.w	800fdac <_dtoa_r+0x30c>
 800fca2:	e8df f003 	tbb	[pc, r3]
 800fca6:	3b2e      	.short	0x3b2e
 800fca8:	5839      	.short	0x5839
 800fcaa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fcae:	441d      	add	r5, r3
 800fcb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fcb4:	2b20      	cmp	r3, #32
 800fcb6:	bfc1      	itttt	gt
 800fcb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fcbc:	fa08 f803 	lslgt.w	r8, r8, r3
 800fcc0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800fcc4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800fcc8:	bfd6      	itet	le
 800fcca:	f1c3 0320 	rsble	r3, r3, #32
 800fcce:	ea48 0003 	orrgt.w	r0, r8, r3
 800fcd2:	fa06 f003 	lslle.w	r0, r6, r3
 800fcd6:	f7f0 fc4d 	bl	8000574 <__aeabi_ui2d>
 800fcda:	2201      	movs	r2, #1
 800fcdc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800fce0:	3d01      	subs	r5, #1
 800fce2:	920e      	str	r2, [sp, #56]	; 0x38
 800fce4:	e76f      	b.n	800fbc6 <_dtoa_r+0x126>
 800fce6:	2301      	movs	r3, #1
 800fce8:	e7b3      	b.n	800fc52 <_dtoa_r+0x1b2>
 800fcea:	900c      	str	r0, [sp, #48]	; 0x30
 800fcec:	e7b2      	b.n	800fc54 <_dtoa_r+0x1b4>
 800fcee:	9b05      	ldr	r3, [sp, #20]
 800fcf0:	eba3 030b 	sub.w	r3, r3, fp
 800fcf4:	9305      	str	r3, [sp, #20]
 800fcf6:	f1cb 0300 	rsb	r3, fp, #0
 800fcfa:	9308      	str	r3, [sp, #32]
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd00:	e7bf      	b.n	800fc82 <_dtoa_r+0x1e2>
 800fd02:	2300      	movs	r3, #0
 800fd04:	9309      	str	r3, [sp, #36]	; 0x24
 800fd06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	dc52      	bgt.n	800fdb2 <_dtoa_r+0x312>
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	9301      	str	r3, [sp, #4]
 800fd10:	9304      	str	r3, [sp, #16]
 800fd12:	461a      	mov	r2, r3
 800fd14:	920a      	str	r2, [sp, #40]	; 0x28
 800fd16:	e00b      	b.n	800fd30 <_dtoa_r+0x290>
 800fd18:	2301      	movs	r3, #1
 800fd1a:	e7f3      	b.n	800fd04 <_dtoa_r+0x264>
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	9309      	str	r3, [sp, #36]	; 0x24
 800fd20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd22:	445b      	add	r3, fp
 800fd24:	9301      	str	r3, [sp, #4]
 800fd26:	3301      	adds	r3, #1
 800fd28:	2b01      	cmp	r3, #1
 800fd2a:	9304      	str	r3, [sp, #16]
 800fd2c:	bfb8      	it	lt
 800fd2e:	2301      	movlt	r3, #1
 800fd30:	69e0      	ldr	r0, [r4, #28]
 800fd32:	2100      	movs	r1, #0
 800fd34:	2204      	movs	r2, #4
 800fd36:	f102 0614 	add.w	r6, r2, #20
 800fd3a:	429e      	cmp	r6, r3
 800fd3c:	d93d      	bls.n	800fdba <_dtoa_r+0x31a>
 800fd3e:	6041      	str	r1, [r0, #4]
 800fd40:	4620      	mov	r0, r4
 800fd42:	f000 fd9f 	bl	8010884 <_Balloc>
 800fd46:	9000      	str	r0, [sp, #0]
 800fd48:	2800      	cmp	r0, #0
 800fd4a:	d139      	bne.n	800fdc0 <_dtoa_r+0x320>
 800fd4c:	4b16      	ldr	r3, [pc, #88]	; (800fda8 <_dtoa_r+0x308>)
 800fd4e:	4602      	mov	r2, r0
 800fd50:	f240 11af 	movw	r1, #431	; 0x1af
 800fd54:	e6bd      	b.n	800fad2 <_dtoa_r+0x32>
 800fd56:	2301      	movs	r3, #1
 800fd58:	e7e1      	b.n	800fd1e <_dtoa_r+0x27e>
 800fd5a:	2501      	movs	r5, #1
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	9307      	str	r3, [sp, #28]
 800fd60:	9509      	str	r5, [sp, #36]	; 0x24
 800fd62:	f04f 33ff 	mov.w	r3, #4294967295
 800fd66:	9301      	str	r3, [sp, #4]
 800fd68:	9304      	str	r3, [sp, #16]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	2312      	movs	r3, #18
 800fd6e:	e7d1      	b.n	800fd14 <_dtoa_r+0x274>
 800fd70:	636f4361 	.word	0x636f4361
 800fd74:	3fd287a7 	.word	0x3fd287a7
 800fd78:	8b60c8b3 	.word	0x8b60c8b3
 800fd7c:	3fc68a28 	.word	0x3fc68a28
 800fd80:	509f79fb 	.word	0x509f79fb
 800fd84:	3fd34413 	.word	0x3fd34413
 800fd88:	08012c25 	.word	0x08012c25
 800fd8c:	08012cdf 	.word	0x08012cdf
 800fd90:	7ff00000 	.word	0x7ff00000
 800fd94:	08012cdb 	.word	0x08012cdb
 800fd98:	08012cd2 	.word	0x08012cd2
 800fd9c:	08012c02 	.word	0x08012c02
 800fda0:	3ff80000 	.word	0x3ff80000
 800fda4:	08012dd0 	.word	0x08012dd0
 800fda8:	08012d37 	.word	0x08012d37
 800fdac:	2301      	movs	r3, #1
 800fdae:	9309      	str	r3, [sp, #36]	; 0x24
 800fdb0:	e7d7      	b.n	800fd62 <_dtoa_r+0x2c2>
 800fdb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdb4:	9301      	str	r3, [sp, #4]
 800fdb6:	9304      	str	r3, [sp, #16]
 800fdb8:	e7ba      	b.n	800fd30 <_dtoa_r+0x290>
 800fdba:	3101      	adds	r1, #1
 800fdbc:	0052      	lsls	r2, r2, #1
 800fdbe:	e7ba      	b.n	800fd36 <_dtoa_r+0x296>
 800fdc0:	69e3      	ldr	r3, [r4, #28]
 800fdc2:	9a00      	ldr	r2, [sp, #0]
 800fdc4:	601a      	str	r2, [r3, #0]
 800fdc6:	9b04      	ldr	r3, [sp, #16]
 800fdc8:	2b0e      	cmp	r3, #14
 800fdca:	f200 80a8 	bhi.w	800ff1e <_dtoa_r+0x47e>
 800fdce:	2d00      	cmp	r5, #0
 800fdd0:	f000 80a5 	beq.w	800ff1e <_dtoa_r+0x47e>
 800fdd4:	f1bb 0f00 	cmp.w	fp, #0
 800fdd8:	dd38      	ble.n	800fe4c <_dtoa_r+0x3ac>
 800fdda:	4bc0      	ldr	r3, [pc, #768]	; (80100dc <_dtoa_r+0x63c>)
 800fddc:	f00b 020f 	and.w	r2, fp, #15
 800fde0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fde4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800fde8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800fdec:	ea4f 182b 	mov.w	r8, fp, asr #4
 800fdf0:	d019      	beq.n	800fe26 <_dtoa_r+0x386>
 800fdf2:	4bbb      	ldr	r3, [pc, #748]	; (80100e0 <_dtoa_r+0x640>)
 800fdf4:	ec51 0b18 	vmov	r0, r1, d8
 800fdf8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fdfc:	f7f0 fd5e 	bl	80008bc <__aeabi_ddiv>
 800fe00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe04:	f008 080f 	and.w	r8, r8, #15
 800fe08:	2503      	movs	r5, #3
 800fe0a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80100e0 <_dtoa_r+0x640>
 800fe0e:	f1b8 0f00 	cmp.w	r8, #0
 800fe12:	d10a      	bne.n	800fe2a <_dtoa_r+0x38a>
 800fe14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe18:	4632      	mov	r2, r6
 800fe1a:	463b      	mov	r3, r7
 800fe1c:	f7f0 fd4e 	bl	80008bc <__aeabi_ddiv>
 800fe20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe24:	e02b      	b.n	800fe7e <_dtoa_r+0x3de>
 800fe26:	2502      	movs	r5, #2
 800fe28:	e7ef      	b.n	800fe0a <_dtoa_r+0x36a>
 800fe2a:	f018 0f01 	tst.w	r8, #1
 800fe2e:	d008      	beq.n	800fe42 <_dtoa_r+0x3a2>
 800fe30:	4630      	mov	r0, r6
 800fe32:	4639      	mov	r1, r7
 800fe34:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fe38:	f7f0 fc16 	bl	8000668 <__aeabi_dmul>
 800fe3c:	3501      	adds	r5, #1
 800fe3e:	4606      	mov	r6, r0
 800fe40:	460f      	mov	r7, r1
 800fe42:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fe46:	f109 0908 	add.w	r9, r9, #8
 800fe4a:	e7e0      	b.n	800fe0e <_dtoa_r+0x36e>
 800fe4c:	f000 809f 	beq.w	800ff8e <_dtoa_r+0x4ee>
 800fe50:	f1cb 0600 	rsb	r6, fp, #0
 800fe54:	4ba1      	ldr	r3, [pc, #644]	; (80100dc <_dtoa_r+0x63c>)
 800fe56:	4fa2      	ldr	r7, [pc, #648]	; (80100e0 <_dtoa_r+0x640>)
 800fe58:	f006 020f 	and.w	r2, r6, #15
 800fe5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe64:	ec51 0b18 	vmov	r0, r1, d8
 800fe68:	f7f0 fbfe 	bl	8000668 <__aeabi_dmul>
 800fe6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe70:	1136      	asrs	r6, r6, #4
 800fe72:	2300      	movs	r3, #0
 800fe74:	2502      	movs	r5, #2
 800fe76:	2e00      	cmp	r6, #0
 800fe78:	d17e      	bne.n	800ff78 <_dtoa_r+0x4d8>
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d1d0      	bne.n	800fe20 <_dtoa_r+0x380>
 800fe7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe80:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	f000 8084 	beq.w	800ff92 <_dtoa_r+0x4f2>
 800fe8a:	4b96      	ldr	r3, [pc, #600]	; (80100e4 <_dtoa_r+0x644>)
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	4640      	mov	r0, r8
 800fe90:	4649      	mov	r1, r9
 800fe92:	f7f0 fe5b 	bl	8000b4c <__aeabi_dcmplt>
 800fe96:	2800      	cmp	r0, #0
 800fe98:	d07b      	beq.n	800ff92 <_dtoa_r+0x4f2>
 800fe9a:	9b04      	ldr	r3, [sp, #16]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d078      	beq.n	800ff92 <_dtoa_r+0x4f2>
 800fea0:	9b01      	ldr	r3, [sp, #4]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	dd39      	ble.n	800ff1a <_dtoa_r+0x47a>
 800fea6:	4b90      	ldr	r3, [pc, #576]	; (80100e8 <_dtoa_r+0x648>)
 800fea8:	2200      	movs	r2, #0
 800feaa:	4640      	mov	r0, r8
 800feac:	4649      	mov	r1, r9
 800feae:	f7f0 fbdb 	bl	8000668 <__aeabi_dmul>
 800feb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800feb6:	9e01      	ldr	r6, [sp, #4]
 800feb8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800febc:	3501      	adds	r5, #1
 800febe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fec2:	4628      	mov	r0, r5
 800fec4:	f7f0 fb66 	bl	8000594 <__aeabi_i2d>
 800fec8:	4642      	mov	r2, r8
 800feca:	464b      	mov	r3, r9
 800fecc:	f7f0 fbcc 	bl	8000668 <__aeabi_dmul>
 800fed0:	4b86      	ldr	r3, [pc, #536]	; (80100ec <_dtoa_r+0x64c>)
 800fed2:	2200      	movs	r2, #0
 800fed4:	f7f0 fa12 	bl	80002fc <__adddf3>
 800fed8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800fedc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fee0:	9303      	str	r3, [sp, #12]
 800fee2:	2e00      	cmp	r6, #0
 800fee4:	d158      	bne.n	800ff98 <_dtoa_r+0x4f8>
 800fee6:	4b82      	ldr	r3, [pc, #520]	; (80100f0 <_dtoa_r+0x650>)
 800fee8:	2200      	movs	r2, #0
 800feea:	4640      	mov	r0, r8
 800feec:	4649      	mov	r1, r9
 800feee:	f7f0 fa03 	bl	80002f8 <__aeabi_dsub>
 800fef2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fef6:	4680      	mov	r8, r0
 800fef8:	4689      	mov	r9, r1
 800fefa:	f7f0 fe45 	bl	8000b88 <__aeabi_dcmpgt>
 800fefe:	2800      	cmp	r0, #0
 800ff00:	f040 8296 	bne.w	8010430 <_dtoa_r+0x990>
 800ff04:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ff08:	4640      	mov	r0, r8
 800ff0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ff0e:	4649      	mov	r1, r9
 800ff10:	f7f0 fe1c 	bl	8000b4c <__aeabi_dcmplt>
 800ff14:	2800      	cmp	r0, #0
 800ff16:	f040 8289 	bne.w	801042c <_dtoa_r+0x98c>
 800ff1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ff1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	f2c0 814e 	blt.w	80101c2 <_dtoa_r+0x722>
 800ff26:	f1bb 0f0e 	cmp.w	fp, #14
 800ff2a:	f300 814a 	bgt.w	80101c2 <_dtoa_r+0x722>
 800ff2e:	4b6b      	ldr	r3, [pc, #428]	; (80100dc <_dtoa_r+0x63c>)
 800ff30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ff34:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ff38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	f280 80dc 	bge.w	80100f8 <_dtoa_r+0x658>
 800ff40:	9b04      	ldr	r3, [sp, #16]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	f300 80d8 	bgt.w	80100f8 <_dtoa_r+0x658>
 800ff48:	f040 826f 	bne.w	801042a <_dtoa_r+0x98a>
 800ff4c:	4b68      	ldr	r3, [pc, #416]	; (80100f0 <_dtoa_r+0x650>)
 800ff4e:	2200      	movs	r2, #0
 800ff50:	4640      	mov	r0, r8
 800ff52:	4649      	mov	r1, r9
 800ff54:	f7f0 fb88 	bl	8000668 <__aeabi_dmul>
 800ff58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ff5c:	f7f0 fe0a 	bl	8000b74 <__aeabi_dcmpge>
 800ff60:	9e04      	ldr	r6, [sp, #16]
 800ff62:	4637      	mov	r7, r6
 800ff64:	2800      	cmp	r0, #0
 800ff66:	f040 8245 	bne.w	80103f4 <_dtoa_r+0x954>
 800ff6a:	9d00      	ldr	r5, [sp, #0]
 800ff6c:	2331      	movs	r3, #49	; 0x31
 800ff6e:	f805 3b01 	strb.w	r3, [r5], #1
 800ff72:	f10b 0b01 	add.w	fp, fp, #1
 800ff76:	e241      	b.n	80103fc <_dtoa_r+0x95c>
 800ff78:	07f2      	lsls	r2, r6, #31
 800ff7a:	d505      	bpl.n	800ff88 <_dtoa_r+0x4e8>
 800ff7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff80:	f7f0 fb72 	bl	8000668 <__aeabi_dmul>
 800ff84:	3501      	adds	r5, #1
 800ff86:	2301      	movs	r3, #1
 800ff88:	1076      	asrs	r6, r6, #1
 800ff8a:	3708      	adds	r7, #8
 800ff8c:	e773      	b.n	800fe76 <_dtoa_r+0x3d6>
 800ff8e:	2502      	movs	r5, #2
 800ff90:	e775      	b.n	800fe7e <_dtoa_r+0x3de>
 800ff92:	9e04      	ldr	r6, [sp, #16]
 800ff94:	465f      	mov	r7, fp
 800ff96:	e792      	b.n	800febe <_dtoa_r+0x41e>
 800ff98:	9900      	ldr	r1, [sp, #0]
 800ff9a:	4b50      	ldr	r3, [pc, #320]	; (80100dc <_dtoa_r+0x63c>)
 800ff9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ffa0:	4431      	add	r1, r6
 800ffa2:	9102      	str	r1, [sp, #8]
 800ffa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ffa6:	eeb0 9a47 	vmov.f32	s18, s14
 800ffaa:	eef0 9a67 	vmov.f32	s19, s15
 800ffae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ffb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ffb6:	2900      	cmp	r1, #0
 800ffb8:	d044      	beq.n	8010044 <_dtoa_r+0x5a4>
 800ffba:	494e      	ldr	r1, [pc, #312]	; (80100f4 <_dtoa_r+0x654>)
 800ffbc:	2000      	movs	r0, #0
 800ffbe:	f7f0 fc7d 	bl	80008bc <__aeabi_ddiv>
 800ffc2:	ec53 2b19 	vmov	r2, r3, d9
 800ffc6:	f7f0 f997 	bl	80002f8 <__aeabi_dsub>
 800ffca:	9d00      	ldr	r5, [sp, #0]
 800ffcc:	ec41 0b19 	vmov	d9, r0, r1
 800ffd0:	4649      	mov	r1, r9
 800ffd2:	4640      	mov	r0, r8
 800ffd4:	f7f0 fdf8 	bl	8000bc8 <__aeabi_d2iz>
 800ffd8:	4606      	mov	r6, r0
 800ffda:	f7f0 fadb 	bl	8000594 <__aeabi_i2d>
 800ffde:	4602      	mov	r2, r0
 800ffe0:	460b      	mov	r3, r1
 800ffe2:	4640      	mov	r0, r8
 800ffe4:	4649      	mov	r1, r9
 800ffe6:	f7f0 f987 	bl	80002f8 <__aeabi_dsub>
 800ffea:	3630      	adds	r6, #48	; 0x30
 800ffec:	f805 6b01 	strb.w	r6, [r5], #1
 800fff0:	ec53 2b19 	vmov	r2, r3, d9
 800fff4:	4680      	mov	r8, r0
 800fff6:	4689      	mov	r9, r1
 800fff8:	f7f0 fda8 	bl	8000b4c <__aeabi_dcmplt>
 800fffc:	2800      	cmp	r0, #0
 800fffe:	d164      	bne.n	80100ca <_dtoa_r+0x62a>
 8010000:	4642      	mov	r2, r8
 8010002:	464b      	mov	r3, r9
 8010004:	4937      	ldr	r1, [pc, #220]	; (80100e4 <_dtoa_r+0x644>)
 8010006:	2000      	movs	r0, #0
 8010008:	f7f0 f976 	bl	80002f8 <__aeabi_dsub>
 801000c:	ec53 2b19 	vmov	r2, r3, d9
 8010010:	f7f0 fd9c 	bl	8000b4c <__aeabi_dcmplt>
 8010014:	2800      	cmp	r0, #0
 8010016:	f040 80b6 	bne.w	8010186 <_dtoa_r+0x6e6>
 801001a:	9b02      	ldr	r3, [sp, #8]
 801001c:	429d      	cmp	r5, r3
 801001e:	f43f af7c 	beq.w	800ff1a <_dtoa_r+0x47a>
 8010022:	4b31      	ldr	r3, [pc, #196]	; (80100e8 <_dtoa_r+0x648>)
 8010024:	ec51 0b19 	vmov	r0, r1, d9
 8010028:	2200      	movs	r2, #0
 801002a:	f7f0 fb1d 	bl	8000668 <__aeabi_dmul>
 801002e:	4b2e      	ldr	r3, [pc, #184]	; (80100e8 <_dtoa_r+0x648>)
 8010030:	ec41 0b19 	vmov	d9, r0, r1
 8010034:	2200      	movs	r2, #0
 8010036:	4640      	mov	r0, r8
 8010038:	4649      	mov	r1, r9
 801003a:	f7f0 fb15 	bl	8000668 <__aeabi_dmul>
 801003e:	4680      	mov	r8, r0
 8010040:	4689      	mov	r9, r1
 8010042:	e7c5      	b.n	800ffd0 <_dtoa_r+0x530>
 8010044:	ec51 0b17 	vmov	r0, r1, d7
 8010048:	f7f0 fb0e 	bl	8000668 <__aeabi_dmul>
 801004c:	9b02      	ldr	r3, [sp, #8]
 801004e:	9d00      	ldr	r5, [sp, #0]
 8010050:	930f      	str	r3, [sp, #60]	; 0x3c
 8010052:	ec41 0b19 	vmov	d9, r0, r1
 8010056:	4649      	mov	r1, r9
 8010058:	4640      	mov	r0, r8
 801005a:	f7f0 fdb5 	bl	8000bc8 <__aeabi_d2iz>
 801005e:	4606      	mov	r6, r0
 8010060:	f7f0 fa98 	bl	8000594 <__aeabi_i2d>
 8010064:	3630      	adds	r6, #48	; 0x30
 8010066:	4602      	mov	r2, r0
 8010068:	460b      	mov	r3, r1
 801006a:	4640      	mov	r0, r8
 801006c:	4649      	mov	r1, r9
 801006e:	f7f0 f943 	bl	80002f8 <__aeabi_dsub>
 8010072:	f805 6b01 	strb.w	r6, [r5], #1
 8010076:	9b02      	ldr	r3, [sp, #8]
 8010078:	429d      	cmp	r5, r3
 801007a:	4680      	mov	r8, r0
 801007c:	4689      	mov	r9, r1
 801007e:	f04f 0200 	mov.w	r2, #0
 8010082:	d124      	bne.n	80100ce <_dtoa_r+0x62e>
 8010084:	4b1b      	ldr	r3, [pc, #108]	; (80100f4 <_dtoa_r+0x654>)
 8010086:	ec51 0b19 	vmov	r0, r1, d9
 801008a:	f7f0 f937 	bl	80002fc <__adddf3>
 801008e:	4602      	mov	r2, r0
 8010090:	460b      	mov	r3, r1
 8010092:	4640      	mov	r0, r8
 8010094:	4649      	mov	r1, r9
 8010096:	f7f0 fd77 	bl	8000b88 <__aeabi_dcmpgt>
 801009a:	2800      	cmp	r0, #0
 801009c:	d173      	bne.n	8010186 <_dtoa_r+0x6e6>
 801009e:	ec53 2b19 	vmov	r2, r3, d9
 80100a2:	4914      	ldr	r1, [pc, #80]	; (80100f4 <_dtoa_r+0x654>)
 80100a4:	2000      	movs	r0, #0
 80100a6:	f7f0 f927 	bl	80002f8 <__aeabi_dsub>
 80100aa:	4602      	mov	r2, r0
 80100ac:	460b      	mov	r3, r1
 80100ae:	4640      	mov	r0, r8
 80100b0:	4649      	mov	r1, r9
 80100b2:	f7f0 fd4b 	bl	8000b4c <__aeabi_dcmplt>
 80100b6:	2800      	cmp	r0, #0
 80100b8:	f43f af2f 	beq.w	800ff1a <_dtoa_r+0x47a>
 80100bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80100be:	1e6b      	subs	r3, r5, #1
 80100c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80100c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80100c6:	2b30      	cmp	r3, #48	; 0x30
 80100c8:	d0f8      	beq.n	80100bc <_dtoa_r+0x61c>
 80100ca:	46bb      	mov	fp, r7
 80100cc:	e04a      	b.n	8010164 <_dtoa_r+0x6c4>
 80100ce:	4b06      	ldr	r3, [pc, #24]	; (80100e8 <_dtoa_r+0x648>)
 80100d0:	f7f0 faca 	bl	8000668 <__aeabi_dmul>
 80100d4:	4680      	mov	r8, r0
 80100d6:	4689      	mov	r9, r1
 80100d8:	e7bd      	b.n	8010056 <_dtoa_r+0x5b6>
 80100da:	bf00      	nop
 80100dc:	08012dd0 	.word	0x08012dd0
 80100e0:	08012da8 	.word	0x08012da8
 80100e4:	3ff00000 	.word	0x3ff00000
 80100e8:	40240000 	.word	0x40240000
 80100ec:	401c0000 	.word	0x401c0000
 80100f0:	40140000 	.word	0x40140000
 80100f4:	3fe00000 	.word	0x3fe00000
 80100f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80100fc:	9d00      	ldr	r5, [sp, #0]
 80100fe:	4642      	mov	r2, r8
 8010100:	464b      	mov	r3, r9
 8010102:	4630      	mov	r0, r6
 8010104:	4639      	mov	r1, r7
 8010106:	f7f0 fbd9 	bl	80008bc <__aeabi_ddiv>
 801010a:	f7f0 fd5d 	bl	8000bc8 <__aeabi_d2iz>
 801010e:	9001      	str	r0, [sp, #4]
 8010110:	f7f0 fa40 	bl	8000594 <__aeabi_i2d>
 8010114:	4642      	mov	r2, r8
 8010116:	464b      	mov	r3, r9
 8010118:	f7f0 faa6 	bl	8000668 <__aeabi_dmul>
 801011c:	4602      	mov	r2, r0
 801011e:	460b      	mov	r3, r1
 8010120:	4630      	mov	r0, r6
 8010122:	4639      	mov	r1, r7
 8010124:	f7f0 f8e8 	bl	80002f8 <__aeabi_dsub>
 8010128:	9e01      	ldr	r6, [sp, #4]
 801012a:	9f04      	ldr	r7, [sp, #16]
 801012c:	3630      	adds	r6, #48	; 0x30
 801012e:	f805 6b01 	strb.w	r6, [r5], #1
 8010132:	9e00      	ldr	r6, [sp, #0]
 8010134:	1bae      	subs	r6, r5, r6
 8010136:	42b7      	cmp	r7, r6
 8010138:	4602      	mov	r2, r0
 801013a:	460b      	mov	r3, r1
 801013c:	d134      	bne.n	80101a8 <_dtoa_r+0x708>
 801013e:	f7f0 f8dd 	bl	80002fc <__adddf3>
 8010142:	4642      	mov	r2, r8
 8010144:	464b      	mov	r3, r9
 8010146:	4606      	mov	r6, r0
 8010148:	460f      	mov	r7, r1
 801014a:	f7f0 fd1d 	bl	8000b88 <__aeabi_dcmpgt>
 801014e:	b9c8      	cbnz	r0, 8010184 <_dtoa_r+0x6e4>
 8010150:	4642      	mov	r2, r8
 8010152:	464b      	mov	r3, r9
 8010154:	4630      	mov	r0, r6
 8010156:	4639      	mov	r1, r7
 8010158:	f7f0 fcee 	bl	8000b38 <__aeabi_dcmpeq>
 801015c:	b110      	cbz	r0, 8010164 <_dtoa_r+0x6c4>
 801015e:	9b01      	ldr	r3, [sp, #4]
 8010160:	07db      	lsls	r3, r3, #31
 8010162:	d40f      	bmi.n	8010184 <_dtoa_r+0x6e4>
 8010164:	4651      	mov	r1, sl
 8010166:	4620      	mov	r0, r4
 8010168:	f000 fbcc 	bl	8010904 <_Bfree>
 801016c:	2300      	movs	r3, #0
 801016e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010170:	702b      	strb	r3, [r5, #0]
 8010172:	f10b 0301 	add.w	r3, fp, #1
 8010176:	6013      	str	r3, [r2, #0]
 8010178:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801017a:	2b00      	cmp	r3, #0
 801017c:	f43f ace2 	beq.w	800fb44 <_dtoa_r+0xa4>
 8010180:	601d      	str	r5, [r3, #0]
 8010182:	e4df      	b.n	800fb44 <_dtoa_r+0xa4>
 8010184:	465f      	mov	r7, fp
 8010186:	462b      	mov	r3, r5
 8010188:	461d      	mov	r5, r3
 801018a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801018e:	2a39      	cmp	r2, #57	; 0x39
 8010190:	d106      	bne.n	80101a0 <_dtoa_r+0x700>
 8010192:	9a00      	ldr	r2, [sp, #0]
 8010194:	429a      	cmp	r2, r3
 8010196:	d1f7      	bne.n	8010188 <_dtoa_r+0x6e8>
 8010198:	9900      	ldr	r1, [sp, #0]
 801019a:	2230      	movs	r2, #48	; 0x30
 801019c:	3701      	adds	r7, #1
 801019e:	700a      	strb	r2, [r1, #0]
 80101a0:	781a      	ldrb	r2, [r3, #0]
 80101a2:	3201      	adds	r2, #1
 80101a4:	701a      	strb	r2, [r3, #0]
 80101a6:	e790      	b.n	80100ca <_dtoa_r+0x62a>
 80101a8:	4ba3      	ldr	r3, [pc, #652]	; (8010438 <_dtoa_r+0x998>)
 80101aa:	2200      	movs	r2, #0
 80101ac:	f7f0 fa5c 	bl	8000668 <__aeabi_dmul>
 80101b0:	2200      	movs	r2, #0
 80101b2:	2300      	movs	r3, #0
 80101b4:	4606      	mov	r6, r0
 80101b6:	460f      	mov	r7, r1
 80101b8:	f7f0 fcbe 	bl	8000b38 <__aeabi_dcmpeq>
 80101bc:	2800      	cmp	r0, #0
 80101be:	d09e      	beq.n	80100fe <_dtoa_r+0x65e>
 80101c0:	e7d0      	b.n	8010164 <_dtoa_r+0x6c4>
 80101c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101c4:	2a00      	cmp	r2, #0
 80101c6:	f000 80ca 	beq.w	801035e <_dtoa_r+0x8be>
 80101ca:	9a07      	ldr	r2, [sp, #28]
 80101cc:	2a01      	cmp	r2, #1
 80101ce:	f300 80ad 	bgt.w	801032c <_dtoa_r+0x88c>
 80101d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80101d4:	2a00      	cmp	r2, #0
 80101d6:	f000 80a5 	beq.w	8010324 <_dtoa_r+0x884>
 80101da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80101de:	9e08      	ldr	r6, [sp, #32]
 80101e0:	9d05      	ldr	r5, [sp, #20]
 80101e2:	9a05      	ldr	r2, [sp, #20]
 80101e4:	441a      	add	r2, r3
 80101e6:	9205      	str	r2, [sp, #20]
 80101e8:	9a06      	ldr	r2, [sp, #24]
 80101ea:	2101      	movs	r1, #1
 80101ec:	441a      	add	r2, r3
 80101ee:	4620      	mov	r0, r4
 80101f0:	9206      	str	r2, [sp, #24]
 80101f2:	f000 fc3d 	bl	8010a70 <__i2b>
 80101f6:	4607      	mov	r7, r0
 80101f8:	b165      	cbz	r5, 8010214 <_dtoa_r+0x774>
 80101fa:	9b06      	ldr	r3, [sp, #24]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	dd09      	ble.n	8010214 <_dtoa_r+0x774>
 8010200:	42ab      	cmp	r3, r5
 8010202:	9a05      	ldr	r2, [sp, #20]
 8010204:	bfa8      	it	ge
 8010206:	462b      	movge	r3, r5
 8010208:	1ad2      	subs	r2, r2, r3
 801020a:	9205      	str	r2, [sp, #20]
 801020c:	9a06      	ldr	r2, [sp, #24]
 801020e:	1aed      	subs	r5, r5, r3
 8010210:	1ad3      	subs	r3, r2, r3
 8010212:	9306      	str	r3, [sp, #24]
 8010214:	9b08      	ldr	r3, [sp, #32]
 8010216:	b1f3      	cbz	r3, 8010256 <_dtoa_r+0x7b6>
 8010218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801021a:	2b00      	cmp	r3, #0
 801021c:	f000 80a3 	beq.w	8010366 <_dtoa_r+0x8c6>
 8010220:	2e00      	cmp	r6, #0
 8010222:	dd10      	ble.n	8010246 <_dtoa_r+0x7a6>
 8010224:	4639      	mov	r1, r7
 8010226:	4632      	mov	r2, r6
 8010228:	4620      	mov	r0, r4
 801022a:	f000 fce1 	bl	8010bf0 <__pow5mult>
 801022e:	4652      	mov	r2, sl
 8010230:	4601      	mov	r1, r0
 8010232:	4607      	mov	r7, r0
 8010234:	4620      	mov	r0, r4
 8010236:	f000 fc31 	bl	8010a9c <__multiply>
 801023a:	4651      	mov	r1, sl
 801023c:	4680      	mov	r8, r0
 801023e:	4620      	mov	r0, r4
 8010240:	f000 fb60 	bl	8010904 <_Bfree>
 8010244:	46c2      	mov	sl, r8
 8010246:	9b08      	ldr	r3, [sp, #32]
 8010248:	1b9a      	subs	r2, r3, r6
 801024a:	d004      	beq.n	8010256 <_dtoa_r+0x7b6>
 801024c:	4651      	mov	r1, sl
 801024e:	4620      	mov	r0, r4
 8010250:	f000 fcce 	bl	8010bf0 <__pow5mult>
 8010254:	4682      	mov	sl, r0
 8010256:	2101      	movs	r1, #1
 8010258:	4620      	mov	r0, r4
 801025a:	f000 fc09 	bl	8010a70 <__i2b>
 801025e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010260:	2b00      	cmp	r3, #0
 8010262:	4606      	mov	r6, r0
 8010264:	f340 8081 	ble.w	801036a <_dtoa_r+0x8ca>
 8010268:	461a      	mov	r2, r3
 801026a:	4601      	mov	r1, r0
 801026c:	4620      	mov	r0, r4
 801026e:	f000 fcbf 	bl	8010bf0 <__pow5mult>
 8010272:	9b07      	ldr	r3, [sp, #28]
 8010274:	2b01      	cmp	r3, #1
 8010276:	4606      	mov	r6, r0
 8010278:	dd7a      	ble.n	8010370 <_dtoa_r+0x8d0>
 801027a:	f04f 0800 	mov.w	r8, #0
 801027e:	6933      	ldr	r3, [r6, #16]
 8010280:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010284:	6918      	ldr	r0, [r3, #16]
 8010286:	f000 fba5 	bl	80109d4 <__hi0bits>
 801028a:	f1c0 0020 	rsb	r0, r0, #32
 801028e:	9b06      	ldr	r3, [sp, #24]
 8010290:	4418      	add	r0, r3
 8010292:	f010 001f 	ands.w	r0, r0, #31
 8010296:	f000 8094 	beq.w	80103c2 <_dtoa_r+0x922>
 801029a:	f1c0 0320 	rsb	r3, r0, #32
 801029e:	2b04      	cmp	r3, #4
 80102a0:	f340 8085 	ble.w	80103ae <_dtoa_r+0x90e>
 80102a4:	9b05      	ldr	r3, [sp, #20]
 80102a6:	f1c0 001c 	rsb	r0, r0, #28
 80102aa:	4403      	add	r3, r0
 80102ac:	9305      	str	r3, [sp, #20]
 80102ae:	9b06      	ldr	r3, [sp, #24]
 80102b0:	4403      	add	r3, r0
 80102b2:	4405      	add	r5, r0
 80102b4:	9306      	str	r3, [sp, #24]
 80102b6:	9b05      	ldr	r3, [sp, #20]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	dd05      	ble.n	80102c8 <_dtoa_r+0x828>
 80102bc:	4651      	mov	r1, sl
 80102be:	461a      	mov	r2, r3
 80102c0:	4620      	mov	r0, r4
 80102c2:	f000 fcef 	bl	8010ca4 <__lshift>
 80102c6:	4682      	mov	sl, r0
 80102c8:	9b06      	ldr	r3, [sp, #24]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	dd05      	ble.n	80102da <_dtoa_r+0x83a>
 80102ce:	4631      	mov	r1, r6
 80102d0:	461a      	mov	r2, r3
 80102d2:	4620      	mov	r0, r4
 80102d4:	f000 fce6 	bl	8010ca4 <__lshift>
 80102d8:	4606      	mov	r6, r0
 80102da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d072      	beq.n	80103c6 <_dtoa_r+0x926>
 80102e0:	4631      	mov	r1, r6
 80102e2:	4650      	mov	r0, sl
 80102e4:	f000 fd4a 	bl	8010d7c <__mcmp>
 80102e8:	2800      	cmp	r0, #0
 80102ea:	da6c      	bge.n	80103c6 <_dtoa_r+0x926>
 80102ec:	2300      	movs	r3, #0
 80102ee:	4651      	mov	r1, sl
 80102f0:	220a      	movs	r2, #10
 80102f2:	4620      	mov	r0, r4
 80102f4:	f000 fb28 	bl	8010948 <__multadd>
 80102f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80102fe:	4682      	mov	sl, r0
 8010300:	2b00      	cmp	r3, #0
 8010302:	f000 81b0 	beq.w	8010666 <_dtoa_r+0xbc6>
 8010306:	2300      	movs	r3, #0
 8010308:	4639      	mov	r1, r7
 801030a:	220a      	movs	r2, #10
 801030c:	4620      	mov	r0, r4
 801030e:	f000 fb1b 	bl	8010948 <__multadd>
 8010312:	9b01      	ldr	r3, [sp, #4]
 8010314:	2b00      	cmp	r3, #0
 8010316:	4607      	mov	r7, r0
 8010318:	f300 8096 	bgt.w	8010448 <_dtoa_r+0x9a8>
 801031c:	9b07      	ldr	r3, [sp, #28]
 801031e:	2b02      	cmp	r3, #2
 8010320:	dc59      	bgt.n	80103d6 <_dtoa_r+0x936>
 8010322:	e091      	b.n	8010448 <_dtoa_r+0x9a8>
 8010324:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010326:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801032a:	e758      	b.n	80101de <_dtoa_r+0x73e>
 801032c:	9b04      	ldr	r3, [sp, #16]
 801032e:	1e5e      	subs	r6, r3, #1
 8010330:	9b08      	ldr	r3, [sp, #32]
 8010332:	42b3      	cmp	r3, r6
 8010334:	bfbf      	itttt	lt
 8010336:	9b08      	ldrlt	r3, [sp, #32]
 8010338:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801033a:	9608      	strlt	r6, [sp, #32]
 801033c:	1af3      	sublt	r3, r6, r3
 801033e:	bfb4      	ite	lt
 8010340:	18d2      	addlt	r2, r2, r3
 8010342:	1b9e      	subge	r6, r3, r6
 8010344:	9b04      	ldr	r3, [sp, #16]
 8010346:	bfbc      	itt	lt
 8010348:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801034a:	2600      	movlt	r6, #0
 801034c:	2b00      	cmp	r3, #0
 801034e:	bfb7      	itett	lt
 8010350:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010354:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010358:	1a9d      	sublt	r5, r3, r2
 801035a:	2300      	movlt	r3, #0
 801035c:	e741      	b.n	80101e2 <_dtoa_r+0x742>
 801035e:	9e08      	ldr	r6, [sp, #32]
 8010360:	9d05      	ldr	r5, [sp, #20]
 8010362:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010364:	e748      	b.n	80101f8 <_dtoa_r+0x758>
 8010366:	9a08      	ldr	r2, [sp, #32]
 8010368:	e770      	b.n	801024c <_dtoa_r+0x7ac>
 801036a:	9b07      	ldr	r3, [sp, #28]
 801036c:	2b01      	cmp	r3, #1
 801036e:	dc19      	bgt.n	80103a4 <_dtoa_r+0x904>
 8010370:	9b02      	ldr	r3, [sp, #8]
 8010372:	b9bb      	cbnz	r3, 80103a4 <_dtoa_r+0x904>
 8010374:	9b03      	ldr	r3, [sp, #12]
 8010376:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801037a:	b99b      	cbnz	r3, 80103a4 <_dtoa_r+0x904>
 801037c:	9b03      	ldr	r3, [sp, #12]
 801037e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010382:	0d1b      	lsrs	r3, r3, #20
 8010384:	051b      	lsls	r3, r3, #20
 8010386:	b183      	cbz	r3, 80103aa <_dtoa_r+0x90a>
 8010388:	9b05      	ldr	r3, [sp, #20]
 801038a:	3301      	adds	r3, #1
 801038c:	9305      	str	r3, [sp, #20]
 801038e:	9b06      	ldr	r3, [sp, #24]
 8010390:	3301      	adds	r3, #1
 8010392:	9306      	str	r3, [sp, #24]
 8010394:	f04f 0801 	mov.w	r8, #1
 8010398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801039a:	2b00      	cmp	r3, #0
 801039c:	f47f af6f 	bne.w	801027e <_dtoa_r+0x7de>
 80103a0:	2001      	movs	r0, #1
 80103a2:	e774      	b.n	801028e <_dtoa_r+0x7ee>
 80103a4:	f04f 0800 	mov.w	r8, #0
 80103a8:	e7f6      	b.n	8010398 <_dtoa_r+0x8f8>
 80103aa:	4698      	mov	r8, r3
 80103ac:	e7f4      	b.n	8010398 <_dtoa_r+0x8f8>
 80103ae:	d082      	beq.n	80102b6 <_dtoa_r+0x816>
 80103b0:	9a05      	ldr	r2, [sp, #20]
 80103b2:	331c      	adds	r3, #28
 80103b4:	441a      	add	r2, r3
 80103b6:	9205      	str	r2, [sp, #20]
 80103b8:	9a06      	ldr	r2, [sp, #24]
 80103ba:	441a      	add	r2, r3
 80103bc:	441d      	add	r5, r3
 80103be:	9206      	str	r2, [sp, #24]
 80103c0:	e779      	b.n	80102b6 <_dtoa_r+0x816>
 80103c2:	4603      	mov	r3, r0
 80103c4:	e7f4      	b.n	80103b0 <_dtoa_r+0x910>
 80103c6:	9b04      	ldr	r3, [sp, #16]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	dc37      	bgt.n	801043c <_dtoa_r+0x99c>
 80103cc:	9b07      	ldr	r3, [sp, #28]
 80103ce:	2b02      	cmp	r3, #2
 80103d0:	dd34      	ble.n	801043c <_dtoa_r+0x99c>
 80103d2:	9b04      	ldr	r3, [sp, #16]
 80103d4:	9301      	str	r3, [sp, #4]
 80103d6:	9b01      	ldr	r3, [sp, #4]
 80103d8:	b963      	cbnz	r3, 80103f4 <_dtoa_r+0x954>
 80103da:	4631      	mov	r1, r6
 80103dc:	2205      	movs	r2, #5
 80103de:	4620      	mov	r0, r4
 80103e0:	f000 fab2 	bl	8010948 <__multadd>
 80103e4:	4601      	mov	r1, r0
 80103e6:	4606      	mov	r6, r0
 80103e8:	4650      	mov	r0, sl
 80103ea:	f000 fcc7 	bl	8010d7c <__mcmp>
 80103ee:	2800      	cmp	r0, #0
 80103f0:	f73f adbb 	bgt.w	800ff6a <_dtoa_r+0x4ca>
 80103f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103f6:	9d00      	ldr	r5, [sp, #0]
 80103f8:	ea6f 0b03 	mvn.w	fp, r3
 80103fc:	f04f 0800 	mov.w	r8, #0
 8010400:	4631      	mov	r1, r6
 8010402:	4620      	mov	r0, r4
 8010404:	f000 fa7e 	bl	8010904 <_Bfree>
 8010408:	2f00      	cmp	r7, #0
 801040a:	f43f aeab 	beq.w	8010164 <_dtoa_r+0x6c4>
 801040e:	f1b8 0f00 	cmp.w	r8, #0
 8010412:	d005      	beq.n	8010420 <_dtoa_r+0x980>
 8010414:	45b8      	cmp	r8, r7
 8010416:	d003      	beq.n	8010420 <_dtoa_r+0x980>
 8010418:	4641      	mov	r1, r8
 801041a:	4620      	mov	r0, r4
 801041c:	f000 fa72 	bl	8010904 <_Bfree>
 8010420:	4639      	mov	r1, r7
 8010422:	4620      	mov	r0, r4
 8010424:	f000 fa6e 	bl	8010904 <_Bfree>
 8010428:	e69c      	b.n	8010164 <_dtoa_r+0x6c4>
 801042a:	2600      	movs	r6, #0
 801042c:	4637      	mov	r7, r6
 801042e:	e7e1      	b.n	80103f4 <_dtoa_r+0x954>
 8010430:	46bb      	mov	fp, r7
 8010432:	4637      	mov	r7, r6
 8010434:	e599      	b.n	800ff6a <_dtoa_r+0x4ca>
 8010436:	bf00      	nop
 8010438:	40240000 	.word	0x40240000
 801043c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801043e:	2b00      	cmp	r3, #0
 8010440:	f000 80c8 	beq.w	80105d4 <_dtoa_r+0xb34>
 8010444:	9b04      	ldr	r3, [sp, #16]
 8010446:	9301      	str	r3, [sp, #4]
 8010448:	2d00      	cmp	r5, #0
 801044a:	dd05      	ble.n	8010458 <_dtoa_r+0x9b8>
 801044c:	4639      	mov	r1, r7
 801044e:	462a      	mov	r2, r5
 8010450:	4620      	mov	r0, r4
 8010452:	f000 fc27 	bl	8010ca4 <__lshift>
 8010456:	4607      	mov	r7, r0
 8010458:	f1b8 0f00 	cmp.w	r8, #0
 801045c:	d05b      	beq.n	8010516 <_dtoa_r+0xa76>
 801045e:	6879      	ldr	r1, [r7, #4]
 8010460:	4620      	mov	r0, r4
 8010462:	f000 fa0f 	bl	8010884 <_Balloc>
 8010466:	4605      	mov	r5, r0
 8010468:	b928      	cbnz	r0, 8010476 <_dtoa_r+0x9d6>
 801046a:	4b83      	ldr	r3, [pc, #524]	; (8010678 <_dtoa_r+0xbd8>)
 801046c:	4602      	mov	r2, r0
 801046e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010472:	f7ff bb2e 	b.w	800fad2 <_dtoa_r+0x32>
 8010476:	693a      	ldr	r2, [r7, #16]
 8010478:	3202      	adds	r2, #2
 801047a:	0092      	lsls	r2, r2, #2
 801047c:	f107 010c 	add.w	r1, r7, #12
 8010480:	300c      	adds	r0, #12
 8010482:	f7ff fa56 	bl	800f932 <memcpy>
 8010486:	2201      	movs	r2, #1
 8010488:	4629      	mov	r1, r5
 801048a:	4620      	mov	r0, r4
 801048c:	f000 fc0a 	bl	8010ca4 <__lshift>
 8010490:	9b00      	ldr	r3, [sp, #0]
 8010492:	3301      	adds	r3, #1
 8010494:	9304      	str	r3, [sp, #16]
 8010496:	e9dd 2300 	ldrd	r2, r3, [sp]
 801049a:	4413      	add	r3, r2
 801049c:	9308      	str	r3, [sp, #32]
 801049e:	9b02      	ldr	r3, [sp, #8]
 80104a0:	f003 0301 	and.w	r3, r3, #1
 80104a4:	46b8      	mov	r8, r7
 80104a6:	9306      	str	r3, [sp, #24]
 80104a8:	4607      	mov	r7, r0
 80104aa:	9b04      	ldr	r3, [sp, #16]
 80104ac:	4631      	mov	r1, r6
 80104ae:	3b01      	subs	r3, #1
 80104b0:	4650      	mov	r0, sl
 80104b2:	9301      	str	r3, [sp, #4]
 80104b4:	f7ff fa6a 	bl	800f98c <quorem>
 80104b8:	4641      	mov	r1, r8
 80104ba:	9002      	str	r0, [sp, #8]
 80104bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80104c0:	4650      	mov	r0, sl
 80104c2:	f000 fc5b 	bl	8010d7c <__mcmp>
 80104c6:	463a      	mov	r2, r7
 80104c8:	9005      	str	r0, [sp, #20]
 80104ca:	4631      	mov	r1, r6
 80104cc:	4620      	mov	r0, r4
 80104ce:	f000 fc71 	bl	8010db4 <__mdiff>
 80104d2:	68c2      	ldr	r2, [r0, #12]
 80104d4:	4605      	mov	r5, r0
 80104d6:	bb02      	cbnz	r2, 801051a <_dtoa_r+0xa7a>
 80104d8:	4601      	mov	r1, r0
 80104da:	4650      	mov	r0, sl
 80104dc:	f000 fc4e 	bl	8010d7c <__mcmp>
 80104e0:	4602      	mov	r2, r0
 80104e2:	4629      	mov	r1, r5
 80104e4:	4620      	mov	r0, r4
 80104e6:	9209      	str	r2, [sp, #36]	; 0x24
 80104e8:	f000 fa0c 	bl	8010904 <_Bfree>
 80104ec:	9b07      	ldr	r3, [sp, #28]
 80104ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104f0:	9d04      	ldr	r5, [sp, #16]
 80104f2:	ea43 0102 	orr.w	r1, r3, r2
 80104f6:	9b06      	ldr	r3, [sp, #24]
 80104f8:	4319      	orrs	r1, r3
 80104fa:	d110      	bne.n	801051e <_dtoa_r+0xa7e>
 80104fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010500:	d029      	beq.n	8010556 <_dtoa_r+0xab6>
 8010502:	9b05      	ldr	r3, [sp, #20]
 8010504:	2b00      	cmp	r3, #0
 8010506:	dd02      	ble.n	801050e <_dtoa_r+0xa6e>
 8010508:	9b02      	ldr	r3, [sp, #8]
 801050a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801050e:	9b01      	ldr	r3, [sp, #4]
 8010510:	f883 9000 	strb.w	r9, [r3]
 8010514:	e774      	b.n	8010400 <_dtoa_r+0x960>
 8010516:	4638      	mov	r0, r7
 8010518:	e7ba      	b.n	8010490 <_dtoa_r+0x9f0>
 801051a:	2201      	movs	r2, #1
 801051c:	e7e1      	b.n	80104e2 <_dtoa_r+0xa42>
 801051e:	9b05      	ldr	r3, [sp, #20]
 8010520:	2b00      	cmp	r3, #0
 8010522:	db04      	blt.n	801052e <_dtoa_r+0xa8e>
 8010524:	9907      	ldr	r1, [sp, #28]
 8010526:	430b      	orrs	r3, r1
 8010528:	9906      	ldr	r1, [sp, #24]
 801052a:	430b      	orrs	r3, r1
 801052c:	d120      	bne.n	8010570 <_dtoa_r+0xad0>
 801052e:	2a00      	cmp	r2, #0
 8010530:	dded      	ble.n	801050e <_dtoa_r+0xa6e>
 8010532:	4651      	mov	r1, sl
 8010534:	2201      	movs	r2, #1
 8010536:	4620      	mov	r0, r4
 8010538:	f000 fbb4 	bl	8010ca4 <__lshift>
 801053c:	4631      	mov	r1, r6
 801053e:	4682      	mov	sl, r0
 8010540:	f000 fc1c 	bl	8010d7c <__mcmp>
 8010544:	2800      	cmp	r0, #0
 8010546:	dc03      	bgt.n	8010550 <_dtoa_r+0xab0>
 8010548:	d1e1      	bne.n	801050e <_dtoa_r+0xa6e>
 801054a:	f019 0f01 	tst.w	r9, #1
 801054e:	d0de      	beq.n	801050e <_dtoa_r+0xa6e>
 8010550:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010554:	d1d8      	bne.n	8010508 <_dtoa_r+0xa68>
 8010556:	9a01      	ldr	r2, [sp, #4]
 8010558:	2339      	movs	r3, #57	; 0x39
 801055a:	7013      	strb	r3, [r2, #0]
 801055c:	462b      	mov	r3, r5
 801055e:	461d      	mov	r5, r3
 8010560:	3b01      	subs	r3, #1
 8010562:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010566:	2a39      	cmp	r2, #57	; 0x39
 8010568:	d06c      	beq.n	8010644 <_dtoa_r+0xba4>
 801056a:	3201      	adds	r2, #1
 801056c:	701a      	strb	r2, [r3, #0]
 801056e:	e747      	b.n	8010400 <_dtoa_r+0x960>
 8010570:	2a00      	cmp	r2, #0
 8010572:	dd07      	ble.n	8010584 <_dtoa_r+0xae4>
 8010574:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010578:	d0ed      	beq.n	8010556 <_dtoa_r+0xab6>
 801057a:	9a01      	ldr	r2, [sp, #4]
 801057c:	f109 0301 	add.w	r3, r9, #1
 8010580:	7013      	strb	r3, [r2, #0]
 8010582:	e73d      	b.n	8010400 <_dtoa_r+0x960>
 8010584:	9b04      	ldr	r3, [sp, #16]
 8010586:	9a08      	ldr	r2, [sp, #32]
 8010588:	f803 9c01 	strb.w	r9, [r3, #-1]
 801058c:	4293      	cmp	r3, r2
 801058e:	d043      	beq.n	8010618 <_dtoa_r+0xb78>
 8010590:	4651      	mov	r1, sl
 8010592:	2300      	movs	r3, #0
 8010594:	220a      	movs	r2, #10
 8010596:	4620      	mov	r0, r4
 8010598:	f000 f9d6 	bl	8010948 <__multadd>
 801059c:	45b8      	cmp	r8, r7
 801059e:	4682      	mov	sl, r0
 80105a0:	f04f 0300 	mov.w	r3, #0
 80105a4:	f04f 020a 	mov.w	r2, #10
 80105a8:	4641      	mov	r1, r8
 80105aa:	4620      	mov	r0, r4
 80105ac:	d107      	bne.n	80105be <_dtoa_r+0xb1e>
 80105ae:	f000 f9cb 	bl	8010948 <__multadd>
 80105b2:	4680      	mov	r8, r0
 80105b4:	4607      	mov	r7, r0
 80105b6:	9b04      	ldr	r3, [sp, #16]
 80105b8:	3301      	adds	r3, #1
 80105ba:	9304      	str	r3, [sp, #16]
 80105bc:	e775      	b.n	80104aa <_dtoa_r+0xa0a>
 80105be:	f000 f9c3 	bl	8010948 <__multadd>
 80105c2:	4639      	mov	r1, r7
 80105c4:	4680      	mov	r8, r0
 80105c6:	2300      	movs	r3, #0
 80105c8:	220a      	movs	r2, #10
 80105ca:	4620      	mov	r0, r4
 80105cc:	f000 f9bc 	bl	8010948 <__multadd>
 80105d0:	4607      	mov	r7, r0
 80105d2:	e7f0      	b.n	80105b6 <_dtoa_r+0xb16>
 80105d4:	9b04      	ldr	r3, [sp, #16]
 80105d6:	9301      	str	r3, [sp, #4]
 80105d8:	9d00      	ldr	r5, [sp, #0]
 80105da:	4631      	mov	r1, r6
 80105dc:	4650      	mov	r0, sl
 80105de:	f7ff f9d5 	bl	800f98c <quorem>
 80105e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80105e6:	9b00      	ldr	r3, [sp, #0]
 80105e8:	f805 9b01 	strb.w	r9, [r5], #1
 80105ec:	1aea      	subs	r2, r5, r3
 80105ee:	9b01      	ldr	r3, [sp, #4]
 80105f0:	4293      	cmp	r3, r2
 80105f2:	dd07      	ble.n	8010604 <_dtoa_r+0xb64>
 80105f4:	4651      	mov	r1, sl
 80105f6:	2300      	movs	r3, #0
 80105f8:	220a      	movs	r2, #10
 80105fa:	4620      	mov	r0, r4
 80105fc:	f000 f9a4 	bl	8010948 <__multadd>
 8010600:	4682      	mov	sl, r0
 8010602:	e7ea      	b.n	80105da <_dtoa_r+0xb3a>
 8010604:	9b01      	ldr	r3, [sp, #4]
 8010606:	2b00      	cmp	r3, #0
 8010608:	bfc8      	it	gt
 801060a:	461d      	movgt	r5, r3
 801060c:	9b00      	ldr	r3, [sp, #0]
 801060e:	bfd8      	it	le
 8010610:	2501      	movle	r5, #1
 8010612:	441d      	add	r5, r3
 8010614:	f04f 0800 	mov.w	r8, #0
 8010618:	4651      	mov	r1, sl
 801061a:	2201      	movs	r2, #1
 801061c:	4620      	mov	r0, r4
 801061e:	f000 fb41 	bl	8010ca4 <__lshift>
 8010622:	4631      	mov	r1, r6
 8010624:	4682      	mov	sl, r0
 8010626:	f000 fba9 	bl	8010d7c <__mcmp>
 801062a:	2800      	cmp	r0, #0
 801062c:	dc96      	bgt.n	801055c <_dtoa_r+0xabc>
 801062e:	d102      	bne.n	8010636 <_dtoa_r+0xb96>
 8010630:	f019 0f01 	tst.w	r9, #1
 8010634:	d192      	bne.n	801055c <_dtoa_r+0xabc>
 8010636:	462b      	mov	r3, r5
 8010638:	461d      	mov	r5, r3
 801063a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801063e:	2a30      	cmp	r2, #48	; 0x30
 8010640:	d0fa      	beq.n	8010638 <_dtoa_r+0xb98>
 8010642:	e6dd      	b.n	8010400 <_dtoa_r+0x960>
 8010644:	9a00      	ldr	r2, [sp, #0]
 8010646:	429a      	cmp	r2, r3
 8010648:	d189      	bne.n	801055e <_dtoa_r+0xabe>
 801064a:	f10b 0b01 	add.w	fp, fp, #1
 801064e:	2331      	movs	r3, #49	; 0x31
 8010650:	e796      	b.n	8010580 <_dtoa_r+0xae0>
 8010652:	4b0a      	ldr	r3, [pc, #40]	; (801067c <_dtoa_r+0xbdc>)
 8010654:	f7ff ba99 	b.w	800fb8a <_dtoa_r+0xea>
 8010658:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801065a:	2b00      	cmp	r3, #0
 801065c:	f47f aa6d 	bne.w	800fb3a <_dtoa_r+0x9a>
 8010660:	4b07      	ldr	r3, [pc, #28]	; (8010680 <_dtoa_r+0xbe0>)
 8010662:	f7ff ba92 	b.w	800fb8a <_dtoa_r+0xea>
 8010666:	9b01      	ldr	r3, [sp, #4]
 8010668:	2b00      	cmp	r3, #0
 801066a:	dcb5      	bgt.n	80105d8 <_dtoa_r+0xb38>
 801066c:	9b07      	ldr	r3, [sp, #28]
 801066e:	2b02      	cmp	r3, #2
 8010670:	f73f aeb1 	bgt.w	80103d6 <_dtoa_r+0x936>
 8010674:	e7b0      	b.n	80105d8 <_dtoa_r+0xb38>
 8010676:	bf00      	nop
 8010678:	08012d37 	.word	0x08012d37
 801067c:	08012c01 	.word	0x08012c01
 8010680:	08012cd2 	.word	0x08012cd2

08010684 <_free_r>:
 8010684:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010686:	2900      	cmp	r1, #0
 8010688:	d044      	beq.n	8010714 <_free_r+0x90>
 801068a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801068e:	9001      	str	r0, [sp, #4]
 8010690:	2b00      	cmp	r3, #0
 8010692:	f1a1 0404 	sub.w	r4, r1, #4
 8010696:	bfb8      	it	lt
 8010698:	18e4      	addlt	r4, r4, r3
 801069a:	f000 f8e7 	bl	801086c <__malloc_lock>
 801069e:	4a1e      	ldr	r2, [pc, #120]	; (8010718 <_free_r+0x94>)
 80106a0:	9801      	ldr	r0, [sp, #4]
 80106a2:	6813      	ldr	r3, [r2, #0]
 80106a4:	b933      	cbnz	r3, 80106b4 <_free_r+0x30>
 80106a6:	6063      	str	r3, [r4, #4]
 80106a8:	6014      	str	r4, [r2, #0]
 80106aa:	b003      	add	sp, #12
 80106ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80106b0:	f000 b8e2 	b.w	8010878 <__malloc_unlock>
 80106b4:	42a3      	cmp	r3, r4
 80106b6:	d908      	bls.n	80106ca <_free_r+0x46>
 80106b8:	6825      	ldr	r5, [r4, #0]
 80106ba:	1961      	adds	r1, r4, r5
 80106bc:	428b      	cmp	r3, r1
 80106be:	bf01      	itttt	eq
 80106c0:	6819      	ldreq	r1, [r3, #0]
 80106c2:	685b      	ldreq	r3, [r3, #4]
 80106c4:	1949      	addeq	r1, r1, r5
 80106c6:	6021      	streq	r1, [r4, #0]
 80106c8:	e7ed      	b.n	80106a6 <_free_r+0x22>
 80106ca:	461a      	mov	r2, r3
 80106cc:	685b      	ldr	r3, [r3, #4]
 80106ce:	b10b      	cbz	r3, 80106d4 <_free_r+0x50>
 80106d0:	42a3      	cmp	r3, r4
 80106d2:	d9fa      	bls.n	80106ca <_free_r+0x46>
 80106d4:	6811      	ldr	r1, [r2, #0]
 80106d6:	1855      	adds	r5, r2, r1
 80106d8:	42a5      	cmp	r5, r4
 80106da:	d10b      	bne.n	80106f4 <_free_r+0x70>
 80106dc:	6824      	ldr	r4, [r4, #0]
 80106de:	4421      	add	r1, r4
 80106e0:	1854      	adds	r4, r2, r1
 80106e2:	42a3      	cmp	r3, r4
 80106e4:	6011      	str	r1, [r2, #0]
 80106e6:	d1e0      	bne.n	80106aa <_free_r+0x26>
 80106e8:	681c      	ldr	r4, [r3, #0]
 80106ea:	685b      	ldr	r3, [r3, #4]
 80106ec:	6053      	str	r3, [r2, #4]
 80106ee:	440c      	add	r4, r1
 80106f0:	6014      	str	r4, [r2, #0]
 80106f2:	e7da      	b.n	80106aa <_free_r+0x26>
 80106f4:	d902      	bls.n	80106fc <_free_r+0x78>
 80106f6:	230c      	movs	r3, #12
 80106f8:	6003      	str	r3, [r0, #0]
 80106fa:	e7d6      	b.n	80106aa <_free_r+0x26>
 80106fc:	6825      	ldr	r5, [r4, #0]
 80106fe:	1961      	adds	r1, r4, r5
 8010700:	428b      	cmp	r3, r1
 8010702:	bf04      	itt	eq
 8010704:	6819      	ldreq	r1, [r3, #0]
 8010706:	685b      	ldreq	r3, [r3, #4]
 8010708:	6063      	str	r3, [r4, #4]
 801070a:	bf04      	itt	eq
 801070c:	1949      	addeq	r1, r1, r5
 801070e:	6021      	streq	r1, [r4, #0]
 8010710:	6054      	str	r4, [r2, #4]
 8010712:	e7ca      	b.n	80106aa <_free_r+0x26>
 8010714:	b003      	add	sp, #12
 8010716:	bd30      	pop	{r4, r5, pc}
 8010718:	200052b8 	.word	0x200052b8

0801071c <malloc>:
 801071c:	4b02      	ldr	r3, [pc, #8]	; (8010728 <malloc+0xc>)
 801071e:	4601      	mov	r1, r0
 8010720:	6818      	ldr	r0, [r3, #0]
 8010722:	f000 b823 	b.w	801076c <_malloc_r>
 8010726:	bf00      	nop
 8010728:	200001e8 	.word	0x200001e8

0801072c <sbrk_aligned>:
 801072c:	b570      	push	{r4, r5, r6, lr}
 801072e:	4e0e      	ldr	r6, [pc, #56]	; (8010768 <sbrk_aligned+0x3c>)
 8010730:	460c      	mov	r4, r1
 8010732:	6831      	ldr	r1, [r6, #0]
 8010734:	4605      	mov	r5, r0
 8010736:	b911      	cbnz	r1, 801073e <sbrk_aligned+0x12>
 8010738:	f000 fe52 	bl	80113e0 <_sbrk_r>
 801073c:	6030      	str	r0, [r6, #0]
 801073e:	4621      	mov	r1, r4
 8010740:	4628      	mov	r0, r5
 8010742:	f000 fe4d 	bl	80113e0 <_sbrk_r>
 8010746:	1c43      	adds	r3, r0, #1
 8010748:	d00a      	beq.n	8010760 <sbrk_aligned+0x34>
 801074a:	1cc4      	adds	r4, r0, #3
 801074c:	f024 0403 	bic.w	r4, r4, #3
 8010750:	42a0      	cmp	r0, r4
 8010752:	d007      	beq.n	8010764 <sbrk_aligned+0x38>
 8010754:	1a21      	subs	r1, r4, r0
 8010756:	4628      	mov	r0, r5
 8010758:	f000 fe42 	bl	80113e0 <_sbrk_r>
 801075c:	3001      	adds	r0, #1
 801075e:	d101      	bne.n	8010764 <sbrk_aligned+0x38>
 8010760:	f04f 34ff 	mov.w	r4, #4294967295
 8010764:	4620      	mov	r0, r4
 8010766:	bd70      	pop	{r4, r5, r6, pc}
 8010768:	200052bc 	.word	0x200052bc

0801076c <_malloc_r>:
 801076c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010770:	1ccd      	adds	r5, r1, #3
 8010772:	f025 0503 	bic.w	r5, r5, #3
 8010776:	3508      	adds	r5, #8
 8010778:	2d0c      	cmp	r5, #12
 801077a:	bf38      	it	cc
 801077c:	250c      	movcc	r5, #12
 801077e:	2d00      	cmp	r5, #0
 8010780:	4607      	mov	r7, r0
 8010782:	db01      	blt.n	8010788 <_malloc_r+0x1c>
 8010784:	42a9      	cmp	r1, r5
 8010786:	d905      	bls.n	8010794 <_malloc_r+0x28>
 8010788:	230c      	movs	r3, #12
 801078a:	603b      	str	r3, [r7, #0]
 801078c:	2600      	movs	r6, #0
 801078e:	4630      	mov	r0, r6
 8010790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010794:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010868 <_malloc_r+0xfc>
 8010798:	f000 f868 	bl	801086c <__malloc_lock>
 801079c:	f8d8 3000 	ldr.w	r3, [r8]
 80107a0:	461c      	mov	r4, r3
 80107a2:	bb5c      	cbnz	r4, 80107fc <_malloc_r+0x90>
 80107a4:	4629      	mov	r1, r5
 80107a6:	4638      	mov	r0, r7
 80107a8:	f7ff ffc0 	bl	801072c <sbrk_aligned>
 80107ac:	1c43      	adds	r3, r0, #1
 80107ae:	4604      	mov	r4, r0
 80107b0:	d155      	bne.n	801085e <_malloc_r+0xf2>
 80107b2:	f8d8 4000 	ldr.w	r4, [r8]
 80107b6:	4626      	mov	r6, r4
 80107b8:	2e00      	cmp	r6, #0
 80107ba:	d145      	bne.n	8010848 <_malloc_r+0xdc>
 80107bc:	2c00      	cmp	r4, #0
 80107be:	d048      	beq.n	8010852 <_malloc_r+0xe6>
 80107c0:	6823      	ldr	r3, [r4, #0]
 80107c2:	4631      	mov	r1, r6
 80107c4:	4638      	mov	r0, r7
 80107c6:	eb04 0903 	add.w	r9, r4, r3
 80107ca:	f000 fe09 	bl	80113e0 <_sbrk_r>
 80107ce:	4581      	cmp	r9, r0
 80107d0:	d13f      	bne.n	8010852 <_malloc_r+0xe6>
 80107d2:	6821      	ldr	r1, [r4, #0]
 80107d4:	1a6d      	subs	r5, r5, r1
 80107d6:	4629      	mov	r1, r5
 80107d8:	4638      	mov	r0, r7
 80107da:	f7ff ffa7 	bl	801072c <sbrk_aligned>
 80107de:	3001      	adds	r0, #1
 80107e0:	d037      	beq.n	8010852 <_malloc_r+0xe6>
 80107e2:	6823      	ldr	r3, [r4, #0]
 80107e4:	442b      	add	r3, r5
 80107e6:	6023      	str	r3, [r4, #0]
 80107e8:	f8d8 3000 	ldr.w	r3, [r8]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d038      	beq.n	8010862 <_malloc_r+0xf6>
 80107f0:	685a      	ldr	r2, [r3, #4]
 80107f2:	42a2      	cmp	r2, r4
 80107f4:	d12b      	bne.n	801084e <_malloc_r+0xe2>
 80107f6:	2200      	movs	r2, #0
 80107f8:	605a      	str	r2, [r3, #4]
 80107fa:	e00f      	b.n	801081c <_malloc_r+0xb0>
 80107fc:	6822      	ldr	r2, [r4, #0]
 80107fe:	1b52      	subs	r2, r2, r5
 8010800:	d41f      	bmi.n	8010842 <_malloc_r+0xd6>
 8010802:	2a0b      	cmp	r2, #11
 8010804:	d917      	bls.n	8010836 <_malloc_r+0xca>
 8010806:	1961      	adds	r1, r4, r5
 8010808:	42a3      	cmp	r3, r4
 801080a:	6025      	str	r5, [r4, #0]
 801080c:	bf18      	it	ne
 801080e:	6059      	strne	r1, [r3, #4]
 8010810:	6863      	ldr	r3, [r4, #4]
 8010812:	bf08      	it	eq
 8010814:	f8c8 1000 	streq.w	r1, [r8]
 8010818:	5162      	str	r2, [r4, r5]
 801081a:	604b      	str	r3, [r1, #4]
 801081c:	4638      	mov	r0, r7
 801081e:	f104 060b 	add.w	r6, r4, #11
 8010822:	f000 f829 	bl	8010878 <__malloc_unlock>
 8010826:	f026 0607 	bic.w	r6, r6, #7
 801082a:	1d23      	adds	r3, r4, #4
 801082c:	1af2      	subs	r2, r6, r3
 801082e:	d0ae      	beq.n	801078e <_malloc_r+0x22>
 8010830:	1b9b      	subs	r3, r3, r6
 8010832:	50a3      	str	r3, [r4, r2]
 8010834:	e7ab      	b.n	801078e <_malloc_r+0x22>
 8010836:	42a3      	cmp	r3, r4
 8010838:	6862      	ldr	r2, [r4, #4]
 801083a:	d1dd      	bne.n	80107f8 <_malloc_r+0x8c>
 801083c:	f8c8 2000 	str.w	r2, [r8]
 8010840:	e7ec      	b.n	801081c <_malloc_r+0xb0>
 8010842:	4623      	mov	r3, r4
 8010844:	6864      	ldr	r4, [r4, #4]
 8010846:	e7ac      	b.n	80107a2 <_malloc_r+0x36>
 8010848:	4634      	mov	r4, r6
 801084a:	6876      	ldr	r6, [r6, #4]
 801084c:	e7b4      	b.n	80107b8 <_malloc_r+0x4c>
 801084e:	4613      	mov	r3, r2
 8010850:	e7cc      	b.n	80107ec <_malloc_r+0x80>
 8010852:	230c      	movs	r3, #12
 8010854:	603b      	str	r3, [r7, #0]
 8010856:	4638      	mov	r0, r7
 8010858:	f000 f80e 	bl	8010878 <__malloc_unlock>
 801085c:	e797      	b.n	801078e <_malloc_r+0x22>
 801085e:	6025      	str	r5, [r4, #0]
 8010860:	e7dc      	b.n	801081c <_malloc_r+0xb0>
 8010862:	605b      	str	r3, [r3, #4]
 8010864:	deff      	udf	#255	; 0xff
 8010866:	bf00      	nop
 8010868:	200052b8 	.word	0x200052b8

0801086c <__malloc_lock>:
 801086c:	4801      	ldr	r0, [pc, #4]	; (8010874 <__malloc_lock+0x8>)
 801086e:	f7ff b85e 	b.w	800f92e <__retarget_lock_acquire_recursive>
 8010872:	bf00      	nop
 8010874:	200052b4 	.word	0x200052b4

08010878 <__malloc_unlock>:
 8010878:	4801      	ldr	r0, [pc, #4]	; (8010880 <__malloc_unlock+0x8>)
 801087a:	f7ff b859 	b.w	800f930 <__retarget_lock_release_recursive>
 801087e:	bf00      	nop
 8010880:	200052b4 	.word	0x200052b4

08010884 <_Balloc>:
 8010884:	b570      	push	{r4, r5, r6, lr}
 8010886:	69c6      	ldr	r6, [r0, #28]
 8010888:	4604      	mov	r4, r0
 801088a:	460d      	mov	r5, r1
 801088c:	b976      	cbnz	r6, 80108ac <_Balloc+0x28>
 801088e:	2010      	movs	r0, #16
 8010890:	f7ff ff44 	bl	801071c <malloc>
 8010894:	4602      	mov	r2, r0
 8010896:	61e0      	str	r0, [r4, #28]
 8010898:	b920      	cbnz	r0, 80108a4 <_Balloc+0x20>
 801089a:	4b18      	ldr	r3, [pc, #96]	; (80108fc <_Balloc+0x78>)
 801089c:	4818      	ldr	r0, [pc, #96]	; (8010900 <_Balloc+0x7c>)
 801089e:	216b      	movs	r1, #107	; 0x6b
 80108a0:	f7ff f856 	bl	800f950 <__assert_func>
 80108a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80108a8:	6006      	str	r6, [r0, #0]
 80108aa:	60c6      	str	r6, [r0, #12]
 80108ac:	69e6      	ldr	r6, [r4, #28]
 80108ae:	68f3      	ldr	r3, [r6, #12]
 80108b0:	b183      	cbz	r3, 80108d4 <_Balloc+0x50>
 80108b2:	69e3      	ldr	r3, [r4, #28]
 80108b4:	68db      	ldr	r3, [r3, #12]
 80108b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80108ba:	b9b8      	cbnz	r0, 80108ec <_Balloc+0x68>
 80108bc:	2101      	movs	r1, #1
 80108be:	fa01 f605 	lsl.w	r6, r1, r5
 80108c2:	1d72      	adds	r2, r6, #5
 80108c4:	0092      	lsls	r2, r2, #2
 80108c6:	4620      	mov	r0, r4
 80108c8:	f000 fda1 	bl	801140e <_calloc_r>
 80108cc:	b160      	cbz	r0, 80108e8 <_Balloc+0x64>
 80108ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80108d2:	e00e      	b.n	80108f2 <_Balloc+0x6e>
 80108d4:	2221      	movs	r2, #33	; 0x21
 80108d6:	2104      	movs	r1, #4
 80108d8:	4620      	mov	r0, r4
 80108da:	f000 fd98 	bl	801140e <_calloc_r>
 80108de:	69e3      	ldr	r3, [r4, #28]
 80108e0:	60f0      	str	r0, [r6, #12]
 80108e2:	68db      	ldr	r3, [r3, #12]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d1e4      	bne.n	80108b2 <_Balloc+0x2e>
 80108e8:	2000      	movs	r0, #0
 80108ea:	bd70      	pop	{r4, r5, r6, pc}
 80108ec:	6802      	ldr	r2, [r0, #0]
 80108ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80108f2:	2300      	movs	r3, #0
 80108f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80108f8:	e7f7      	b.n	80108ea <_Balloc+0x66>
 80108fa:	bf00      	nop
 80108fc:	08012c25 	.word	0x08012c25
 8010900:	08012d48 	.word	0x08012d48

08010904 <_Bfree>:
 8010904:	b570      	push	{r4, r5, r6, lr}
 8010906:	69c6      	ldr	r6, [r0, #28]
 8010908:	4605      	mov	r5, r0
 801090a:	460c      	mov	r4, r1
 801090c:	b976      	cbnz	r6, 801092c <_Bfree+0x28>
 801090e:	2010      	movs	r0, #16
 8010910:	f7ff ff04 	bl	801071c <malloc>
 8010914:	4602      	mov	r2, r0
 8010916:	61e8      	str	r0, [r5, #28]
 8010918:	b920      	cbnz	r0, 8010924 <_Bfree+0x20>
 801091a:	4b09      	ldr	r3, [pc, #36]	; (8010940 <_Bfree+0x3c>)
 801091c:	4809      	ldr	r0, [pc, #36]	; (8010944 <_Bfree+0x40>)
 801091e:	218f      	movs	r1, #143	; 0x8f
 8010920:	f7ff f816 	bl	800f950 <__assert_func>
 8010924:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010928:	6006      	str	r6, [r0, #0]
 801092a:	60c6      	str	r6, [r0, #12]
 801092c:	b13c      	cbz	r4, 801093e <_Bfree+0x3a>
 801092e:	69eb      	ldr	r3, [r5, #28]
 8010930:	6862      	ldr	r2, [r4, #4]
 8010932:	68db      	ldr	r3, [r3, #12]
 8010934:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010938:	6021      	str	r1, [r4, #0]
 801093a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801093e:	bd70      	pop	{r4, r5, r6, pc}
 8010940:	08012c25 	.word	0x08012c25
 8010944:	08012d48 	.word	0x08012d48

08010948 <__multadd>:
 8010948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801094c:	690d      	ldr	r5, [r1, #16]
 801094e:	4607      	mov	r7, r0
 8010950:	460c      	mov	r4, r1
 8010952:	461e      	mov	r6, r3
 8010954:	f101 0c14 	add.w	ip, r1, #20
 8010958:	2000      	movs	r0, #0
 801095a:	f8dc 3000 	ldr.w	r3, [ip]
 801095e:	b299      	uxth	r1, r3
 8010960:	fb02 6101 	mla	r1, r2, r1, r6
 8010964:	0c1e      	lsrs	r6, r3, #16
 8010966:	0c0b      	lsrs	r3, r1, #16
 8010968:	fb02 3306 	mla	r3, r2, r6, r3
 801096c:	b289      	uxth	r1, r1
 801096e:	3001      	adds	r0, #1
 8010970:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010974:	4285      	cmp	r5, r0
 8010976:	f84c 1b04 	str.w	r1, [ip], #4
 801097a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801097e:	dcec      	bgt.n	801095a <__multadd+0x12>
 8010980:	b30e      	cbz	r6, 80109c6 <__multadd+0x7e>
 8010982:	68a3      	ldr	r3, [r4, #8]
 8010984:	42ab      	cmp	r3, r5
 8010986:	dc19      	bgt.n	80109bc <__multadd+0x74>
 8010988:	6861      	ldr	r1, [r4, #4]
 801098a:	4638      	mov	r0, r7
 801098c:	3101      	adds	r1, #1
 801098e:	f7ff ff79 	bl	8010884 <_Balloc>
 8010992:	4680      	mov	r8, r0
 8010994:	b928      	cbnz	r0, 80109a2 <__multadd+0x5a>
 8010996:	4602      	mov	r2, r0
 8010998:	4b0c      	ldr	r3, [pc, #48]	; (80109cc <__multadd+0x84>)
 801099a:	480d      	ldr	r0, [pc, #52]	; (80109d0 <__multadd+0x88>)
 801099c:	21ba      	movs	r1, #186	; 0xba
 801099e:	f7fe ffd7 	bl	800f950 <__assert_func>
 80109a2:	6922      	ldr	r2, [r4, #16]
 80109a4:	3202      	adds	r2, #2
 80109a6:	f104 010c 	add.w	r1, r4, #12
 80109aa:	0092      	lsls	r2, r2, #2
 80109ac:	300c      	adds	r0, #12
 80109ae:	f7fe ffc0 	bl	800f932 <memcpy>
 80109b2:	4621      	mov	r1, r4
 80109b4:	4638      	mov	r0, r7
 80109b6:	f7ff ffa5 	bl	8010904 <_Bfree>
 80109ba:	4644      	mov	r4, r8
 80109bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80109c0:	3501      	adds	r5, #1
 80109c2:	615e      	str	r6, [r3, #20]
 80109c4:	6125      	str	r5, [r4, #16]
 80109c6:	4620      	mov	r0, r4
 80109c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109cc:	08012d37 	.word	0x08012d37
 80109d0:	08012d48 	.word	0x08012d48

080109d4 <__hi0bits>:
 80109d4:	0c03      	lsrs	r3, r0, #16
 80109d6:	041b      	lsls	r3, r3, #16
 80109d8:	b9d3      	cbnz	r3, 8010a10 <__hi0bits+0x3c>
 80109da:	0400      	lsls	r0, r0, #16
 80109dc:	2310      	movs	r3, #16
 80109de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80109e2:	bf04      	itt	eq
 80109e4:	0200      	lsleq	r0, r0, #8
 80109e6:	3308      	addeq	r3, #8
 80109e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80109ec:	bf04      	itt	eq
 80109ee:	0100      	lsleq	r0, r0, #4
 80109f0:	3304      	addeq	r3, #4
 80109f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80109f6:	bf04      	itt	eq
 80109f8:	0080      	lsleq	r0, r0, #2
 80109fa:	3302      	addeq	r3, #2
 80109fc:	2800      	cmp	r0, #0
 80109fe:	db05      	blt.n	8010a0c <__hi0bits+0x38>
 8010a00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010a04:	f103 0301 	add.w	r3, r3, #1
 8010a08:	bf08      	it	eq
 8010a0a:	2320      	moveq	r3, #32
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	4770      	bx	lr
 8010a10:	2300      	movs	r3, #0
 8010a12:	e7e4      	b.n	80109de <__hi0bits+0xa>

08010a14 <__lo0bits>:
 8010a14:	6803      	ldr	r3, [r0, #0]
 8010a16:	f013 0207 	ands.w	r2, r3, #7
 8010a1a:	d00c      	beq.n	8010a36 <__lo0bits+0x22>
 8010a1c:	07d9      	lsls	r1, r3, #31
 8010a1e:	d422      	bmi.n	8010a66 <__lo0bits+0x52>
 8010a20:	079a      	lsls	r2, r3, #30
 8010a22:	bf49      	itett	mi
 8010a24:	085b      	lsrmi	r3, r3, #1
 8010a26:	089b      	lsrpl	r3, r3, #2
 8010a28:	6003      	strmi	r3, [r0, #0]
 8010a2a:	2201      	movmi	r2, #1
 8010a2c:	bf5c      	itt	pl
 8010a2e:	6003      	strpl	r3, [r0, #0]
 8010a30:	2202      	movpl	r2, #2
 8010a32:	4610      	mov	r0, r2
 8010a34:	4770      	bx	lr
 8010a36:	b299      	uxth	r1, r3
 8010a38:	b909      	cbnz	r1, 8010a3e <__lo0bits+0x2a>
 8010a3a:	0c1b      	lsrs	r3, r3, #16
 8010a3c:	2210      	movs	r2, #16
 8010a3e:	b2d9      	uxtb	r1, r3
 8010a40:	b909      	cbnz	r1, 8010a46 <__lo0bits+0x32>
 8010a42:	3208      	adds	r2, #8
 8010a44:	0a1b      	lsrs	r3, r3, #8
 8010a46:	0719      	lsls	r1, r3, #28
 8010a48:	bf04      	itt	eq
 8010a4a:	091b      	lsreq	r3, r3, #4
 8010a4c:	3204      	addeq	r2, #4
 8010a4e:	0799      	lsls	r1, r3, #30
 8010a50:	bf04      	itt	eq
 8010a52:	089b      	lsreq	r3, r3, #2
 8010a54:	3202      	addeq	r2, #2
 8010a56:	07d9      	lsls	r1, r3, #31
 8010a58:	d403      	bmi.n	8010a62 <__lo0bits+0x4e>
 8010a5a:	085b      	lsrs	r3, r3, #1
 8010a5c:	f102 0201 	add.w	r2, r2, #1
 8010a60:	d003      	beq.n	8010a6a <__lo0bits+0x56>
 8010a62:	6003      	str	r3, [r0, #0]
 8010a64:	e7e5      	b.n	8010a32 <__lo0bits+0x1e>
 8010a66:	2200      	movs	r2, #0
 8010a68:	e7e3      	b.n	8010a32 <__lo0bits+0x1e>
 8010a6a:	2220      	movs	r2, #32
 8010a6c:	e7e1      	b.n	8010a32 <__lo0bits+0x1e>
	...

08010a70 <__i2b>:
 8010a70:	b510      	push	{r4, lr}
 8010a72:	460c      	mov	r4, r1
 8010a74:	2101      	movs	r1, #1
 8010a76:	f7ff ff05 	bl	8010884 <_Balloc>
 8010a7a:	4602      	mov	r2, r0
 8010a7c:	b928      	cbnz	r0, 8010a8a <__i2b+0x1a>
 8010a7e:	4b05      	ldr	r3, [pc, #20]	; (8010a94 <__i2b+0x24>)
 8010a80:	4805      	ldr	r0, [pc, #20]	; (8010a98 <__i2b+0x28>)
 8010a82:	f240 1145 	movw	r1, #325	; 0x145
 8010a86:	f7fe ff63 	bl	800f950 <__assert_func>
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	6144      	str	r4, [r0, #20]
 8010a8e:	6103      	str	r3, [r0, #16]
 8010a90:	bd10      	pop	{r4, pc}
 8010a92:	bf00      	nop
 8010a94:	08012d37 	.word	0x08012d37
 8010a98:	08012d48 	.word	0x08012d48

08010a9c <__multiply>:
 8010a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aa0:	4691      	mov	r9, r2
 8010aa2:	690a      	ldr	r2, [r1, #16]
 8010aa4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	bfb8      	it	lt
 8010aac:	460b      	movlt	r3, r1
 8010aae:	460c      	mov	r4, r1
 8010ab0:	bfbc      	itt	lt
 8010ab2:	464c      	movlt	r4, r9
 8010ab4:	4699      	movlt	r9, r3
 8010ab6:	6927      	ldr	r7, [r4, #16]
 8010ab8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010abc:	68a3      	ldr	r3, [r4, #8]
 8010abe:	6861      	ldr	r1, [r4, #4]
 8010ac0:	eb07 060a 	add.w	r6, r7, sl
 8010ac4:	42b3      	cmp	r3, r6
 8010ac6:	b085      	sub	sp, #20
 8010ac8:	bfb8      	it	lt
 8010aca:	3101      	addlt	r1, #1
 8010acc:	f7ff feda 	bl	8010884 <_Balloc>
 8010ad0:	b930      	cbnz	r0, 8010ae0 <__multiply+0x44>
 8010ad2:	4602      	mov	r2, r0
 8010ad4:	4b44      	ldr	r3, [pc, #272]	; (8010be8 <__multiply+0x14c>)
 8010ad6:	4845      	ldr	r0, [pc, #276]	; (8010bec <__multiply+0x150>)
 8010ad8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010adc:	f7fe ff38 	bl	800f950 <__assert_func>
 8010ae0:	f100 0514 	add.w	r5, r0, #20
 8010ae4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010ae8:	462b      	mov	r3, r5
 8010aea:	2200      	movs	r2, #0
 8010aec:	4543      	cmp	r3, r8
 8010aee:	d321      	bcc.n	8010b34 <__multiply+0x98>
 8010af0:	f104 0314 	add.w	r3, r4, #20
 8010af4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010af8:	f109 0314 	add.w	r3, r9, #20
 8010afc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010b00:	9202      	str	r2, [sp, #8]
 8010b02:	1b3a      	subs	r2, r7, r4
 8010b04:	3a15      	subs	r2, #21
 8010b06:	f022 0203 	bic.w	r2, r2, #3
 8010b0a:	3204      	adds	r2, #4
 8010b0c:	f104 0115 	add.w	r1, r4, #21
 8010b10:	428f      	cmp	r7, r1
 8010b12:	bf38      	it	cc
 8010b14:	2204      	movcc	r2, #4
 8010b16:	9201      	str	r2, [sp, #4]
 8010b18:	9a02      	ldr	r2, [sp, #8]
 8010b1a:	9303      	str	r3, [sp, #12]
 8010b1c:	429a      	cmp	r2, r3
 8010b1e:	d80c      	bhi.n	8010b3a <__multiply+0x9e>
 8010b20:	2e00      	cmp	r6, #0
 8010b22:	dd03      	ble.n	8010b2c <__multiply+0x90>
 8010b24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d05b      	beq.n	8010be4 <__multiply+0x148>
 8010b2c:	6106      	str	r6, [r0, #16]
 8010b2e:	b005      	add	sp, #20
 8010b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b34:	f843 2b04 	str.w	r2, [r3], #4
 8010b38:	e7d8      	b.n	8010aec <__multiply+0x50>
 8010b3a:	f8b3 a000 	ldrh.w	sl, [r3]
 8010b3e:	f1ba 0f00 	cmp.w	sl, #0
 8010b42:	d024      	beq.n	8010b8e <__multiply+0xf2>
 8010b44:	f104 0e14 	add.w	lr, r4, #20
 8010b48:	46a9      	mov	r9, r5
 8010b4a:	f04f 0c00 	mov.w	ip, #0
 8010b4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010b52:	f8d9 1000 	ldr.w	r1, [r9]
 8010b56:	fa1f fb82 	uxth.w	fp, r2
 8010b5a:	b289      	uxth	r1, r1
 8010b5c:	fb0a 110b 	mla	r1, sl, fp, r1
 8010b60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010b64:	f8d9 2000 	ldr.w	r2, [r9]
 8010b68:	4461      	add	r1, ip
 8010b6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010b6e:	fb0a c20b 	mla	r2, sl, fp, ip
 8010b72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010b76:	b289      	uxth	r1, r1
 8010b78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010b7c:	4577      	cmp	r7, lr
 8010b7e:	f849 1b04 	str.w	r1, [r9], #4
 8010b82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010b86:	d8e2      	bhi.n	8010b4e <__multiply+0xb2>
 8010b88:	9a01      	ldr	r2, [sp, #4]
 8010b8a:	f845 c002 	str.w	ip, [r5, r2]
 8010b8e:	9a03      	ldr	r2, [sp, #12]
 8010b90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010b94:	3304      	adds	r3, #4
 8010b96:	f1b9 0f00 	cmp.w	r9, #0
 8010b9a:	d021      	beq.n	8010be0 <__multiply+0x144>
 8010b9c:	6829      	ldr	r1, [r5, #0]
 8010b9e:	f104 0c14 	add.w	ip, r4, #20
 8010ba2:	46ae      	mov	lr, r5
 8010ba4:	f04f 0a00 	mov.w	sl, #0
 8010ba8:	f8bc b000 	ldrh.w	fp, [ip]
 8010bac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010bb0:	fb09 220b 	mla	r2, r9, fp, r2
 8010bb4:	4452      	add	r2, sl
 8010bb6:	b289      	uxth	r1, r1
 8010bb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010bbc:	f84e 1b04 	str.w	r1, [lr], #4
 8010bc0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010bc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010bc8:	f8be 1000 	ldrh.w	r1, [lr]
 8010bcc:	fb09 110a 	mla	r1, r9, sl, r1
 8010bd0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010bd4:	4567      	cmp	r7, ip
 8010bd6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010bda:	d8e5      	bhi.n	8010ba8 <__multiply+0x10c>
 8010bdc:	9a01      	ldr	r2, [sp, #4]
 8010bde:	50a9      	str	r1, [r5, r2]
 8010be0:	3504      	adds	r5, #4
 8010be2:	e799      	b.n	8010b18 <__multiply+0x7c>
 8010be4:	3e01      	subs	r6, #1
 8010be6:	e79b      	b.n	8010b20 <__multiply+0x84>
 8010be8:	08012d37 	.word	0x08012d37
 8010bec:	08012d48 	.word	0x08012d48

08010bf0 <__pow5mult>:
 8010bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bf4:	4615      	mov	r5, r2
 8010bf6:	f012 0203 	ands.w	r2, r2, #3
 8010bfa:	4606      	mov	r6, r0
 8010bfc:	460f      	mov	r7, r1
 8010bfe:	d007      	beq.n	8010c10 <__pow5mult+0x20>
 8010c00:	4c25      	ldr	r4, [pc, #148]	; (8010c98 <__pow5mult+0xa8>)
 8010c02:	3a01      	subs	r2, #1
 8010c04:	2300      	movs	r3, #0
 8010c06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010c0a:	f7ff fe9d 	bl	8010948 <__multadd>
 8010c0e:	4607      	mov	r7, r0
 8010c10:	10ad      	asrs	r5, r5, #2
 8010c12:	d03d      	beq.n	8010c90 <__pow5mult+0xa0>
 8010c14:	69f4      	ldr	r4, [r6, #28]
 8010c16:	b97c      	cbnz	r4, 8010c38 <__pow5mult+0x48>
 8010c18:	2010      	movs	r0, #16
 8010c1a:	f7ff fd7f 	bl	801071c <malloc>
 8010c1e:	4602      	mov	r2, r0
 8010c20:	61f0      	str	r0, [r6, #28]
 8010c22:	b928      	cbnz	r0, 8010c30 <__pow5mult+0x40>
 8010c24:	4b1d      	ldr	r3, [pc, #116]	; (8010c9c <__pow5mult+0xac>)
 8010c26:	481e      	ldr	r0, [pc, #120]	; (8010ca0 <__pow5mult+0xb0>)
 8010c28:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010c2c:	f7fe fe90 	bl	800f950 <__assert_func>
 8010c30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010c34:	6004      	str	r4, [r0, #0]
 8010c36:	60c4      	str	r4, [r0, #12]
 8010c38:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010c3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010c40:	b94c      	cbnz	r4, 8010c56 <__pow5mult+0x66>
 8010c42:	f240 2171 	movw	r1, #625	; 0x271
 8010c46:	4630      	mov	r0, r6
 8010c48:	f7ff ff12 	bl	8010a70 <__i2b>
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010c52:	4604      	mov	r4, r0
 8010c54:	6003      	str	r3, [r0, #0]
 8010c56:	f04f 0900 	mov.w	r9, #0
 8010c5a:	07eb      	lsls	r3, r5, #31
 8010c5c:	d50a      	bpl.n	8010c74 <__pow5mult+0x84>
 8010c5e:	4639      	mov	r1, r7
 8010c60:	4622      	mov	r2, r4
 8010c62:	4630      	mov	r0, r6
 8010c64:	f7ff ff1a 	bl	8010a9c <__multiply>
 8010c68:	4639      	mov	r1, r7
 8010c6a:	4680      	mov	r8, r0
 8010c6c:	4630      	mov	r0, r6
 8010c6e:	f7ff fe49 	bl	8010904 <_Bfree>
 8010c72:	4647      	mov	r7, r8
 8010c74:	106d      	asrs	r5, r5, #1
 8010c76:	d00b      	beq.n	8010c90 <__pow5mult+0xa0>
 8010c78:	6820      	ldr	r0, [r4, #0]
 8010c7a:	b938      	cbnz	r0, 8010c8c <__pow5mult+0x9c>
 8010c7c:	4622      	mov	r2, r4
 8010c7e:	4621      	mov	r1, r4
 8010c80:	4630      	mov	r0, r6
 8010c82:	f7ff ff0b 	bl	8010a9c <__multiply>
 8010c86:	6020      	str	r0, [r4, #0]
 8010c88:	f8c0 9000 	str.w	r9, [r0]
 8010c8c:	4604      	mov	r4, r0
 8010c8e:	e7e4      	b.n	8010c5a <__pow5mult+0x6a>
 8010c90:	4638      	mov	r0, r7
 8010c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c96:	bf00      	nop
 8010c98:	08012e98 	.word	0x08012e98
 8010c9c:	08012c25 	.word	0x08012c25
 8010ca0:	08012d48 	.word	0x08012d48

08010ca4 <__lshift>:
 8010ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ca8:	460c      	mov	r4, r1
 8010caa:	6849      	ldr	r1, [r1, #4]
 8010cac:	6923      	ldr	r3, [r4, #16]
 8010cae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010cb2:	68a3      	ldr	r3, [r4, #8]
 8010cb4:	4607      	mov	r7, r0
 8010cb6:	4691      	mov	r9, r2
 8010cb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010cbc:	f108 0601 	add.w	r6, r8, #1
 8010cc0:	42b3      	cmp	r3, r6
 8010cc2:	db0b      	blt.n	8010cdc <__lshift+0x38>
 8010cc4:	4638      	mov	r0, r7
 8010cc6:	f7ff fddd 	bl	8010884 <_Balloc>
 8010cca:	4605      	mov	r5, r0
 8010ccc:	b948      	cbnz	r0, 8010ce2 <__lshift+0x3e>
 8010cce:	4602      	mov	r2, r0
 8010cd0:	4b28      	ldr	r3, [pc, #160]	; (8010d74 <__lshift+0xd0>)
 8010cd2:	4829      	ldr	r0, [pc, #164]	; (8010d78 <__lshift+0xd4>)
 8010cd4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010cd8:	f7fe fe3a 	bl	800f950 <__assert_func>
 8010cdc:	3101      	adds	r1, #1
 8010cde:	005b      	lsls	r3, r3, #1
 8010ce0:	e7ee      	b.n	8010cc0 <__lshift+0x1c>
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	f100 0114 	add.w	r1, r0, #20
 8010ce8:	f100 0210 	add.w	r2, r0, #16
 8010cec:	4618      	mov	r0, r3
 8010cee:	4553      	cmp	r3, sl
 8010cf0:	db33      	blt.n	8010d5a <__lshift+0xb6>
 8010cf2:	6920      	ldr	r0, [r4, #16]
 8010cf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010cf8:	f104 0314 	add.w	r3, r4, #20
 8010cfc:	f019 091f 	ands.w	r9, r9, #31
 8010d00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010d04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010d08:	d02b      	beq.n	8010d62 <__lshift+0xbe>
 8010d0a:	f1c9 0e20 	rsb	lr, r9, #32
 8010d0e:	468a      	mov	sl, r1
 8010d10:	2200      	movs	r2, #0
 8010d12:	6818      	ldr	r0, [r3, #0]
 8010d14:	fa00 f009 	lsl.w	r0, r0, r9
 8010d18:	4310      	orrs	r0, r2
 8010d1a:	f84a 0b04 	str.w	r0, [sl], #4
 8010d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d22:	459c      	cmp	ip, r3
 8010d24:	fa22 f20e 	lsr.w	r2, r2, lr
 8010d28:	d8f3      	bhi.n	8010d12 <__lshift+0x6e>
 8010d2a:	ebac 0304 	sub.w	r3, ip, r4
 8010d2e:	3b15      	subs	r3, #21
 8010d30:	f023 0303 	bic.w	r3, r3, #3
 8010d34:	3304      	adds	r3, #4
 8010d36:	f104 0015 	add.w	r0, r4, #21
 8010d3a:	4584      	cmp	ip, r0
 8010d3c:	bf38      	it	cc
 8010d3e:	2304      	movcc	r3, #4
 8010d40:	50ca      	str	r2, [r1, r3]
 8010d42:	b10a      	cbz	r2, 8010d48 <__lshift+0xa4>
 8010d44:	f108 0602 	add.w	r6, r8, #2
 8010d48:	3e01      	subs	r6, #1
 8010d4a:	4638      	mov	r0, r7
 8010d4c:	612e      	str	r6, [r5, #16]
 8010d4e:	4621      	mov	r1, r4
 8010d50:	f7ff fdd8 	bl	8010904 <_Bfree>
 8010d54:	4628      	mov	r0, r5
 8010d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8010d5e:	3301      	adds	r3, #1
 8010d60:	e7c5      	b.n	8010cee <__lshift+0x4a>
 8010d62:	3904      	subs	r1, #4
 8010d64:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d68:	f841 2f04 	str.w	r2, [r1, #4]!
 8010d6c:	459c      	cmp	ip, r3
 8010d6e:	d8f9      	bhi.n	8010d64 <__lshift+0xc0>
 8010d70:	e7ea      	b.n	8010d48 <__lshift+0xa4>
 8010d72:	bf00      	nop
 8010d74:	08012d37 	.word	0x08012d37
 8010d78:	08012d48 	.word	0x08012d48

08010d7c <__mcmp>:
 8010d7c:	b530      	push	{r4, r5, lr}
 8010d7e:	6902      	ldr	r2, [r0, #16]
 8010d80:	690c      	ldr	r4, [r1, #16]
 8010d82:	1b12      	subs	r2, r2, r4
 8010d84:	d10e      	bne.n	8010da4 <__mcmp+0x28>
 8010d86:	f100 0314 	add.w	r3, r0, #20
 8010d8a:	3114      	adds	r1, #20
 8010d8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010d90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010d94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010d98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010d9c:	42a5      	cmp	r5, r4
 8010d9e:	d003      	beq.n	8010da8 <__mcmp+0x2c>
 8010da0:	d305      	bcc.n	8010dae <__mcmp+0x32>
 8010da2:	2201      	movs	r2, #1
 8010da4:	4610      	mov	r0, r2
 8010da6:	bd30      	pop	{r4, r5, pc}
 8010da8:	4283      	cmp	r3, r0
 8010daa:	d3f3      	bcc.n	8010d94 <__mcmp+0x18>
 8010dac:	e7fa      	b.n	8010da4 <__mcmp+0x28>
 8010dae:	f04f 32ff 	mov.w	r2, #4294967295
 8010db2:	e7f7      	b.n	8010da4 <__mcmp+0x28>

08010db4 <__mdiff>:
 8010db4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010db8:	460c      	mov	r4, r1
 8010dba:	4606      	mov	r6, r0
 8010dbc:	4611      	mov	r1, r2
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	4690      	mov	r8, r2
 8010dc2:	f7ff ffdb 	bl	8010d7c <__mcmp>
 8010dc6:	1e05      	subs	r5, r0, #0
 8010dc8:	d110      	bne.n	8010dec <__mdiff+0x38>
 8010dca:	4629      	mov	r1, r5
 8010dcc:	4630      	mov	r0, r6
 8010dce:	f7ff fd59 	bl	8010884 <_Balloc>
 8010dd2:	b930      	cbnz	r0, 8010de2 <__mdiff+0x2e>
 8010dd4:	4b3a      	ldr	r3, [pc, #232]	; (8010ec0 <__mdiff+0x10c>)
 8010dd6:	4602      	mov	r2, r0
 8010dd8:	f240 2137 	movw	r1, #567	; 0x237
 8010ddc:	4839      	ldr	r0, [pc, #228]	; (8010ec4 <__mdiff+0x110>)
 8010dde:	f7fe fdb7 	bl	800f950 <__assert_func>
 8010de2:	2301      	movs	r3, #1
 8010de4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010de8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dec:	bfa4      	itt	ge
 8010dee:	4643      	movge	r3, r8
 8010df0:	46a0      	movge	r8, r4
 8010df2:	4630      	mov	r0, r6
 8010df4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010df8:	bfa6      	itte	ge
 8010dfa:	461c      	movge	r4, r3
 8010dfc:	2500      	movge	r5, #0
 8010dfe:	2501      	movlt	r5, #1
 8010e00:	f7ff fd40 	bl	8010884 <_Balloc>
 8010e04:	b920      	cbnz	r0, 8010e10 <__mdiff+0x5c>
 8010e06:	4b2e      	ldr	r3, [pc, #184]	; (8010ec0 <__mdiff+0x10c>)
 8010e08:	4602      	mov	r2, r0
 8010e0a:	f240 2145 	movw	r1, #581	; 0x245
 8010e0e:	e7e5      	b.n	8010ddc <__mdiff+0x28>
 8010e10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010e14:	6926      	ldr	r6, [r4, #16]
 8010e16:	60c5      	str	r5, [r0, #12]
 8010e18:	f104 0914 	add.w	r9, r4, #20
 8010e1c:	f108 0514 	add.w	r5, r8, #20
 8010e20:	f100 0e14 	add.w	lr, r0, #20
 8010e24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010e28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010e2c:	f108 0210 	add.w	r2, r8, #16
 8010e30:	46f2      	mov	sl, lr
 8010e32:	2100      	movs	r1, #0
 8010e34:	f859 3b04 	ldr.w	r3, [r9], #4
 8010e38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010e3c:	fa11 f88b 	uxtah	r8, r1, fp
 8010e40:	b299      	uxth	r1, r3
 8010e42:	0c1b      	lsrs	r3, r3, #16
 8010e44:	eba8 0801 	sub.w	r8, r8, r1
 8010e48:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010e4c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010e50:	fa1f f888 	uxth.w	r8, r8
 8010e54:	1419      	asrs	r1, r3, #16
 8010e56:	454e      	cmp	r6, r9
 8010e58:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010e5c:	f84a 3b04 	str.w	r3, [sl], #4
 8010e60:	d8e8      	bhi.n	8010e34 <__mdiff+0x80>
 8010e62:	1b33      	subs	r3, r6, r4
 8010e64:	3b15      	subs	r3, #21
 8010e66:	f023 0303 	bic.w	r3, r3, #3
 8010e6a:	3304      	adds	r3, #4
 8010e6c:	3415      	adds	r4, #21
 8010e6e:	42a6      	cmp	r6, r4
 8010e70:	bf38      	it	cc
 8010e72:	2304      	movcc	r3, #4
 8010e74:	441d      	add	r5, r3
 8010e76:	4473      	add	r3, lr
 8010e78:	469e      	mov	lr, r3
 8010e7a:	462e      	mov	r6, r5
 8010e7c:	4566      	cmp	r6, ip
 8010e7e:	d30e      	bcc.n	8010e9e <__mdiff+0xea>
 8010e80:	f10c 0203 	add.w	r2, ip, #3
 8010e84:	1b52      	subs	r2, r2, r5
 8010e86:	f022 0203 	bic.w	r2, r2, #3
 8010e8a:	3d03      	subs	r5, #3
 8010e8c:	45ac      	cmp	ip, r5
 8010e8e:	bf38      	it	cc
 8010e90:	2200      	movcc	r2, #0
 8010e92:	4413      	add	r3, r2
 8010e94:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010e98:	b17a      	cbz	r2, 8010eba <__mdiff+0x106>
 8010e9a:	6107      	str	r7, [r0, #16]
 8010e9c:	e7a4      	b.n	8010de8 <__mdiff+0x34>
 8010e9e:	f856 8b04 	ldr.w	r8, [r6], #4
 8010ea2:	fa11 f288 	uxtah	r2, r1, r8
 8010ea6:	1414      	asrs	r4, r2, #16
 8010ea8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010eac:	b292      	uxth	r2, r2
 8010eae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010eb2:	f84e 2b04 	str.w	r2, [lr], #4
 8010eb6:	1421      	asrs	r1, r4, #16
 8010eb8:	e7e0      	b.n	8010e7c <__mdiff+0xc8>
 8010eba:	3f01      	subs	r7, #1
 8010ebc:	e7ea      	b.n	8010e94 <__mdiff+0xe0>
 8010ebe:	bf00      	nop
 8010ec0:	08012d37 	.word	0x08012d37
 8010ec4:	08012d48 	.word	0x08012d48

08010ec8 <__d2b>:
 8010ec8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ecc:	460f      	mov	r7, r1
 8010ece:	2101      	movs	r1, #1
 8010ed0:	ec59 8b10 	vmov	r8, r9, d0
 8010ed4:	4616      	mov	r6, r2
 8010ed6:	f7ff fcd5 	bl	8010884 <_Balloc>
 8010eda:	4604      	mov	r4, r0
 8010edc:	b930      	cbnz	r0, 8010eec <__d2b+0x24>
 8010ede:	4602      	mov	r2, r0
 8010ee0:	4b24      	ldr	r3, [pc, #144]	; (8010f74 <__d2b+0xac>)
 8010ee2:	4825      	ldr	r0, [pc, #148]	; (8010f78 <__d2b+0xb0>)
 8010ee4:	f240 310f 	movw	r1, #783	; 0x30f
 8010ee8:	f7fe fd32 	bl	800f950 <__assert_func>
 8010eec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010ef0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010ef4:	bb2d      	cbnz	r5, 8010f42 <__d2b+0x7a>
 8010ef6:	9301      	str	r3, [sp, #4]
 8010ef8:	f1b8 0300 	subs.w	r3, r8, #0
 8010efc:	d026      	beq.n	8010f4c <__d2b+0x84>
 8010efe:	4668      	mov	r0, sp
 8010f00:	9300      	str	r3, [sp, #0]
 8010f02:	f7ff fd87 	bl	8010a14 <__lo0bits>
 8010f06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010f0a:	b1e8      	cbz	r0, 8010f48 <__d2b+0x80>
 8010f0c:	f1c0 0320 	rsb	r3, r0, #32
 8010f10:	fa02 f303 	lsl.w	r3, r2, r3
 8010f14:	430b      	orrs	r3, r1
 8010f16:	40c2      	lsrs	r2, r0
 8010f18:	6163      	str	r3, [r4, #20]
 8010f1a:	9201      	str	r2, [sp, #4]
 8010f1c:	9b01      	ldr	r3, [sp, #4]
 8010f1e:	61a3      	str	r3, [r4, #24]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	bf14      	ite	ne
 8010f24:	2202      	movne	r2, #2
 8010f26:	2201      	moveq	r2, #1
 8010f28:	6122      	str	r2, [r4, #16]
 8010f2a:	b1bd      	cbz	r5, 8010f5c <__d2b+0x94>
 8010f2c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010f30:	4405      	add	r5, r0
 8010f32:	603d      	str	r5, [r7, #0]
 8010f34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010f38:	6030      	str	r0, [r6, #0]
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	b003      	add	sp, #12
 8010f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010f46:	e7d6      	b.n	8010ef6 <__d2b+0x2e>
 8010f48:	6161      	str	r1, [r4, #20]
 8010f4a:	e7e7      	b.n	8010f1c <__d2b+0x54>
 8010f4c:	a801      	add	r0, sp, #4
 8010f4e:	f7ff fd61 	bl	8010a14 <__lo0bits>
 8010f52:	9b01      	ldr	r3, [sp, #4]
 8010f54:	6163      	str	r3, [r4, #20]
 8010f56:	3020      	adds	r0, #32
 8010f58:	2201      	movs	r2, #1
 8010f5a:	e7e5      	b.n	8010f28 <__d2b+0x60>
 8010f5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010f60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010f64:	6038      	str	r0, [r7, #0]
 8010f66:	6918      	ldr	r0, [r3, #16]
 8010f68:	f7ff fd34 	bl	80109d4 <__hi0bits>
 8010f6c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010f70:	e7e2      	b.n	8010f38 <__d2b+0x70>
 8010f72:	bf00      	nop
 8010f74:	08012d37 	.word	0x08012d37
 8010f78:	08012d48 	.word	0x08012d48

08010f7c <__ssputs_r>:
 8010f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f80:	688e      	ldr	r6, [r1, #8]
 8010f82:	461f      	mov	r7, r3
 8010f84:	42be      	cmp	r6, r7
 8010f86:	680b      	ldr	r3, [r1, #0]
 8010f88:	4682      	mov	sl, r0
 8010f8a:	460c      	mov	r4, r1
 8010f8c:	4690      	mov	r8, r2
 8010f8e:	d82c      	bhi.n	8010fea <__ssputs_r+0x6e>
 8010f90:	898a      	ldrh	r2, [r1, #12]
 8010f92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010f96:	d026      	beq.n	8010fe6 <__ssputs_r+0x6a>
 8010f98:	6965      	ldr	r5, [r4, #20]
 8010f9a:	6909      	ldr	r1, [r1, #16]
 8010f9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010fa0:	eba3 0901 	sub.w	r9, r3, r1
 8010fa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010fa8:	1c7b      	adds	r3, r7, #1
 8010faa:	444b      	add	r3, r9
 8010fac:	106d      	asrs	r5, r5, #1
 8010fae:	429d      	cmp	r5, r3
 8010fb0:	bf38      	it	cc
 8010fb2:	461d      	movcc	r5, r3
 8010fb4:	0553      	lsls	r3, r2, #21
 8010fb6:	d527      	bpl.n	8011008 <__ssputs_r+0x8c>
 8010fb8:	4629      	mov	r1, r5
 8010fba:	f7ff fbd7 	bl	801076c <_malloc_r>
 8010fbe:	4606      	mov	r6, r0
 8010fc0:	b360      	cbz	r0, 801101c <__ssputs_r+0xa0>
 8010fc2:	6921      	ldr	r1, [r4, #16]
 8010fc4:	464a      	mov	r2, r9
 8010fc6:	f7fe fcb4 	bl	800f932 <memcpy>
 8010fca:	89a3      	ldrh	r3, [r4, #12]
 8010fcc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fd4:	81a3      	strh	r3, [r4, #12]
 8010fd6:	6126      	str	r6, [r4, #16]
 8010fd8:	6165      	str	r5, [r4, #20]
 8010fda:	444e      	add	r6, r9
 8010fdc:	eba5 0509 	sub.w	r5, r5, r9
 8010fe0:	6026      	str	r6, [r4, #0]
 8010fe2:	60a5      	str	r5, [r4, #8]
 8010fe4:	463e      	mov	r6, r7
 8010fe6:	42be      	cmp	r6, r7
 8010fe8:	d900      	bls.n	8010fec <__ssputs_r+0x70>
 8010fea:	463e      	mov	r6, r7
 8010fec:	6820      	ldr	r0, [r4, #0]
 8010fee:	4632      	mov	r2, r6
 8010ff0:	4641      	mov	r1, r8
 8010ff2:	f000 f9db 	bl	80113ac <memmove>
 8010ff6:	68a3      	ldr	r3, [r4, #8]
 8010ff8:	1b9b      	subs	r3, r3, r6
 8010ffa:	60a3      	str	r3, [r4, #8]
 8010ffc:	6823      	ldr	r3, [r4, #0]
 8010ffe:	4433      	add	r3, r6
 8011000:	6023      	str	r3, [r4, #0]
 8011002:	2000      	movs	r0, #0
 8011004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011008:	462a      	mov	r2, r5
 801100a:	f000 fa28 	bl	801145e <_realloc_r>
 801100e:	4606      	mov	r6, r0
 8011010:	2800      	cmp	r0, #0
 8011012:	d1e0      	bne.n	8010fd6 <__ssputs_r+0x5a>
 8011014:	6921      	ldr	r1, [r4, #16]
 8011016:	4650      	mov	r0, sl
 8011018:	f7ff fb34 	bl	8010684 <_free_r>
 801101c:	230c      	movs	r3, #12
 801101e:	f8ca 3000 	str.w	r3, [sl]
 8011022:	89a3      	ldrh	r3, [r4, #12]
 8011024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011028:	81a3      	strh	r3, [r4, #12]
 801102a:	f04f 30ff 	mov.w	r0, #4294967295
 801102e:	e7e9      	b.n	8011004 <__ssputs_r+0x88>

08011030 <_svfiprintf_r>:
 8011030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011034:	4698      	mov	r8, r3
 8011036:	898b      	ldrh	r3, [r1, #12]
 8011038:	061b      	lsls	r3, r3, #24
 801103a:	b09d      	sub	sp, #116	; 0x74
 801103c:	4607      	mov	r7, r0
 801103e:	460d      	mov	r5, r1
 8011040:	4614      	mov	r4, r2
 8011042:	d50e      	bpl.n	8011062 <_svfiprintf_r+0x32>
 8011044:	690b      	ldr	r3, [r1, #16]
 8011046:	b963      	cbnz	r3, 8011062 <_svfiprintf_r+0x32>
 8011048:	2140      	movs	r1, #64	; 0x40
 801104a:	f7ff fb8f 	bl	801076c <_malloc_r>
 801104e:	6028      	str	r0, [r5, #0]
 8011050:	6128      	str	r0, [r5, #16]
 8011052:	b920      	cbnz	r0, 801105e <_svfiprintf_r+0x2e>
 8011054:	230c      	movs	r3, #12
 8011056:	603b      	str	r3, [r7, #0]
 8011058:	f04f 30ff 	mov.w	r0, #4294967295
 801105c:	e0d0      	b.n	8011200 <_svfiprintf_r+0x1d0>
 801105e:	2340      	movs	r3, #64	; 0x40
 8011060:	616b      	str	r3, [r5, #20]
 8011062:	2300      	movs	r3, #0
 8011064:	9309      	str	r3, [sp, #36]	; 0x24
 8011066:	2320      	movs	r3, #32
 8011068:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801106c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011070:	2330      	movs	r3, #48	; 0x30
 8011072:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011218 <_svfiprintf_r+0x1e8>
 8011076:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801107a:	f04f 0901 	mov.w	r9, #1
 801107e:	4623      	mov	r3, r4
 8011080:	469a      	mov	sl, r3
 8011082:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011086:	b10a      	cbz	r2, 801108c <_svfiprintf_r+0x5c>
 8011088:	2a25      	cmp	r2, #37	; 0x25
 801108a:	d1f9      	bne.n	8011080 <_svfiprintf_r+0x50>
 801108c:	ebba 0b04 	subs.w	fp, sl, r4
 8011090:	d00b      	beq.n	80110aa <_svfiprintf_r+0x7a>
 8011092:	465b      	mov	r3, fp
 8011094:	4622      	mov	r2, r4
 8011096:	4629      	mov	r1, r5
 8011098:	4638      	mov	r0, r7
 801109a:	f7ff ff6f 	bl	8010f7c <__ssputs_r>
 801109e:	3001      	adds	r0, #1
 80110a0:	f000 80a9 	beq.w	80111f6 <_svfiprintf_r+0x1c6>
 80110a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80110a6:	445a      	add	r2, fp
 80110a8:	9209      	str	r2, [sp, #36]	; 0x24
 80110aa:	f89a 3000 	ldrb.w	r3, [sl]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	f000 80a1 	beq.w	80111f6 <_svfiprintf_r+0x1c6>
 80110b4:	2300      	movs	r3, #0
 80110b6:	f04f 32ff 	mov.w	r2, #4294967295
 80110ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110be:	f10a 0a01 	add.w	sl, sl, #1
 80110c2:	9304      	str	r3, [sp, #16]
 80110c4:	9307      	str	r3, [sp, #28]
 80110c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80110ca:	931a      	str	r3, [sp, #104]	; 0x68
 80110cc:	4654      	mov	r4, sl
 80110ce:	2205      	movs	r2, #5
 80110d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110d4:	4850      	ldr	r0, [pc, #320]	; (8011218 <_svfiprintf_r+0x1e8>)
 80110d6:	f7ef f8b3 	bl	8000240 <memchr>
 80110da:	9a04      	ldr	r2, [sp, #16]
 80110dc:	b9d8      	cbnz	r0, 8011116 <_svfiprintf_r+0xe6>
 80110de:	06d0      	lsls	r0, r2, #27
 80110e0:	bf44      	itt	mi
 80110e2:	2320      	movmi	r3, #32
 80110e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110e8:	0711      	lsls	r1, r2, #28
 80110ea:	bf44      	itt	mi
 80110ec:	232b      	movmi	r3, #43	; 0x2b
 80110ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110f2:	f89a 3000 	ldrb.w	r3, [sl]
 80110f6:	2b2a      	cmp	r3, #42	; 0x2a
 80110f8:	d015      	beq.n	8011126 <_svfiprintf_r+0xf6>
 80110fa:	9a07      	ldr	r2, [sp, #28]
 80110fc:	4654      	mov	r4, sl
 80110fe:	2000      	movs	r0, #0
 8011100:	f04f 0c0a 	mov.w	ip, #10
 8011104:	4621      	mov	r1, r4
 8011106:	f811 3b01 	ldrb.w	r3, [r1], #1
 801110a:	3b30      	subs	r3, #48	; 0x30
 801110c:	2b09      	cmp	r3, #9
 801110e:	d94d      	bls.n	80111ac <_svfiprintf_r+0x17c>
 8011110:	b1b0      	cbz	r0, 8011140 <_svfiprintf_r+0x110>
 8011112:	9207      	str	r2, [sp, #28]
 8011114:	e014      	b.n	8011140 <_svfiprintf_r+0x110>
 8011116:	eba0 0308 	sub.w	r3, r0, r8
 801111a:	fa09 f303 	lsl.w	r3, r9, r3
 801111e:	4313      	orrs	r3, r2
 8011120:	9304      	str	r3, [sp, #16]
 8011122:	46a2      	mov	sl, r4
 8011124:	e7d2      	b.n	80110cc <_svfiprintf_r+0x9c>
 8011126:	9b03      	ldr	r3, [sp, #12]
 8011128:	1d19      	adds	r1, r3, #4
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	9103      	str	r1, [sp, #12]
 801112e:	2b00      	cmp	r3, #0
 8011130:	bfbb      	ittet	lt
 8011132:	425b      	neglt	r3, r3
 8011134:	f042 0202 	orrlt.w	r2, r2, #2
 8011138:	9307      	strge	r3, [sp, #28]
 801113a:	9307      	strlt	r3, [sp, #28]
 801113c:	bfb8      	it	lt
 801113e:	9204      	strlt	r2, [sp, #16]
 8011140:	7823      	ldrb	r3, [r4, #0]
 8011142:	2b2e      	cmp	r3, #46	; 0x2e
 8011144:	d10c      	bne.n	8011160 <_svfiprintf_r+0x130>
 8011146:	7863      	ldrb	r3, [r4, #1]
 8011148:	2b2a      	cmp	r3, #42	; 0x2a
 801114a:	d134      	bne.n	80111b6 <_svfiprintf_r+0x186>
 801114c:	9b03      	ldr	r3, [sp, #12]
 801114e:	1d1a      	adds	r2, r3, #4
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	9203      	str	r2, [sp, #12]
 8011154:	2b00      	cmp	r3, #0
 8011156:	bfb8      	it	lt
 8011158:	f04f 33ff 	movlt.w	r3, #4294967295
 801115c:	3402      	adds	r4, #2
 801115e:	9305      	str	r3, [sp, #20]
 8011160:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011228 <_svfiprintf_r+0x1f8>
 8011164:	7821      	ldrb	r1, [r4, #0]
 8011166:	2203      	movs	r2, #3
 8011168:	4650      	mov	r0, sl
 801116a:	f7ef f869 	bl	8000240 <memchr>
 801116e:	b138      	cbz	r0, 8011180 <_svfiprintf_r+0x150>
 8011170:	9b04      	ldr	r3, [sp, #16]
 8011172:	eba0 000a 	sub.w	r0, r0, sl
 8011176:	2240      	movs	r2, #64	; 0x40
 8011178:	4082      	lsls	r2, r0
 801117a:	4313      	orrs	r3, r2
 801117c:	3401      	adds	r4, #1
 801117e:	9304      	str	r3, [sp, #16]
 8011180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011184:	4825      	ldr	r0, [pc, #148]	; (801121c <_svfiprintf_r+0x1ec>)
 8011186:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801118a:	2206      	movs	r2, #6
 801118c:	f7ef f858 	bl	8000240 <memchr>
 8011190:	2800      	cmp	r0, #0
 8011192:	d038      	beq.n	8011206 <_svfiprintf_r+0x1d6>
 8011194:	4b22      	ldr	r3, [pc, #136]	; (8011220 <_svfiprintf_r+0x1f0>)
 8011196:	bb1b      	cbnz	r3, 80111e0 <_svfiprintf_r+0x1b0>
 8011198:	9b03      	ldr	r3, [sp, #12]
 801119a:	3307      	adds	r3, #7
 801119c:	f023 0307 	bic.w	r3, r3, #7
 80111a0:	3308      	adds	r3, #8
 80111a2:	9303      	str	r3, [sp, #12]
 80111a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111a6:	4433      	add	r3, r6
 80111a8:	9309      	str	r3, [sp, #36]	; 0x24
 80111aa:	e768      	b.n	801107e <_svfiprintf_r+0x4e>
 80111ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80111b0:	460c      	mov	r4, r1
 80111b2:	2001      	movs	r0, #1
 80111b4:	e7a6      	b.n	8011104 <_svfiprintf_r+0xd4>
 80111b6:	2300      	movs	r3, #0
 80111b8:	3401      	adds	r4, #1
 80111ba:	9305      	str	r3, [sp, #20]
 80111bc:	4619      	mov	r1, r3
 80111be:	f04f 0c0a 	mov.w	ip, #10
 80111c2:	4620      	mov	r0, r4
 80111c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111c8:	3a30      	subs	r2, #48	; 0x30
 80111ca:	2a09      	cmp	r2, #9
 80111cc:	d903      	bls.n	80111d6 <_svfiprintf_r+0x1a6>
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d0c6      	beq.n	8011160 <_svfiprintf_r+0x130>
 80111d2:	9105      	str	r1, [sp, #20]
 80111d4:	e7c4      	b.n	8011160 <_svfiprintf_r+0x130>
 80111d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80111da:	4604      	mov	r4, r0
 80111dc:	2301      	movs	r3, #1
 80111de:	e7f0      	b.n	80111c2 <_svfiprintf_r+0x192>
 80111e0:	ab03      	add	r3, sp, #12
 80111e2:	9300      	str	r3, [sp, #0]
 80111e4:	462a      	mov	r2, r5
 80111e6:	4b0f      	ldr	r3, [pc, #60]	; (8011224 <_svfiprintf_r+0x1f4>)
 80111e8:	a904      	add	r1, sp, #16
 80111ea:	4638      	mov	r0, r7
 80111ec:	f7fd fdc8 	bl	800ed80 <_printf_float>
 80111f0:	1c42      	adds	r2, r0, #1
 80111f2:	4606      	mov	r6, r0
 80111f4:	d1d6      	bne.n	80111a4 <_svfiprintf_r+0x174>
 80111f6:	89ab      	ldrh	r3, [r5, #12]
 80111f8:	065b      	lsls	r3, r3, #25
 80111fa:	f53f af2d 	bmi.w	8011058 <_svfiprintf_r+0x28>
 80111fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011200:	b01d      	add	sp, #116	; 0x74
 8011202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011206:	ab03      	add	r3, sp, #12
 8011208:	9300      	str	r3, [sp, #0]
 801120a:	462a      	mov	r2, r5
 801120c:	4b05      	ldr	r3, [pc, #20]	; (8011224 <_svfiprintf_r+0x1f4>)
 801120e:	a904      	add	r1, sp, #16
 8011210:	4638      	mov	r0, r7
 8011212:	f7fe f859 	bl	800f2c8 <_printf_i>
 8011216:	e7eb      	b.n	80111f0 <_svfiprintf_r+0x1c0>
 8011218:	08012ea4 	.word	0x08012ea4
 801121c:	08012eae 	.word	0x08012eae
 8011220:	0800ed81 	.word	0x0800ed81
 8011224:	08010f7d 	.word	0x08010f7d
 8011228:	08012eaa 	.word	0x08012eaa

0801122c <__sflush_r>:
 801122c:	898a      	ldrh	r2, [r1, #12]
 801122e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011232:	4605      	mov	r5, r0
 8011234:	0710      	lsls	r0, r2, #28
 8011236:	460c      	mov	r4, r1
 8011238:	d458      	bmi.n	80112ec <__sflush_r+0xc0>
 801123a:	684b      	ldr	r3, [r1, #4]
 801123c:	2b00      	cmp	r3, #0
 801123e:	dc05      	bgt.n	801124c <__sflush_r+0x20>
 8011240:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011242:	2b00      	cmp	r3, #0
 8011244:	dc02      	bgt.n	801124c <__sflush_r+0x20>
 8011246:	2000      	movs	r0, #0
 8011248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801124c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801124e:	2e00      	cmp	r6, #0
 8011250:	d0f9      	beq.n	8011246 <__sflush_r+0x1a>
 8011252:	2300      	movs	r3, #0
 8011254:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011258:	682f      	ldr	r7, [r5, #0]
 801125a:	6a21      	ldr	r1, [r4, #32]
 801125c:	602b      	str	r3, [r5, #0]
 801125e:	d032      	beq.n	80112c6 <__sflush_r+0x9a>
 8011260:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011262:	89a3      	ldrh	r3, [r4, #12]
 8011264:	075a      	lsls	r2, r3, #29
 8011266:	d505      	bpl.n	8011274 <__sflush_r+0x48>
 8011268:	6863      	ldr	r3, [r4, #4]
 801126a:	1ac0      	subs	r0, r0, r3
 801126c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801126e:	b10b      	cbz	r3, 8011274 <__sflush_r+0x48>
 8011270:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011272:	1ac0      	subs	r0, r0, r3
 8011274:	2300      	movs	r3, #0
 8011276:	4602      	mov	r2, r0
 8011278:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801127a:	6a21      	ldr	r1, [r4, #32]
 801127c:	4628      	mov	r0, r5
 801127e:	47b0      	blx	r6
 8011280:	1c43      	adds	r3, r0, #1
 8011282:	89a3      	ldrh	r3, [r4, #12]
 8011284:	d106      	bne.n	8011294 <__sflush_r+0x68>
 8011286:	6829      	ldr	r1, [r5, #0]
 8011288:	291d      	cmp	r1, #29
 801128a:	d82b      	bhi.n	80112e4 <__sflush_r+0xb8>
 801128c:	4a29      	ldr	r2, [pc, #164]	; (8011334 <__sflush_r+0x108>)
 801128e:	410a      	asrs	r2, r1
 8011290:	07d6      	lsls	r6, r2, #31
 8011292:	d427      	bmi.n	80112e4 <__sflush_r+0xb8>
 8011294:	2200      	movs	r2, #0
 8011296:	6062      	str	r2, [r4, #4]
 8011298:	04d9      	lsls	r1, r3, #19
 801129a:	6922      	ldr	r2, [r4, #16]
 801129c:	6022      	str	r2, [r4, #0]
 801129e:	d504      	bpl.n	80112aa <__sflush_r+0x7e>
 80112a0:	1c42      	adds	r2, r0, #1
 80112a2:	d101      	bne.n	80112a8 <__sflush_r+0x7c>
 80112a4:	682b      	ldr	r3, [r5, #0]
 80112a6:	b903      	cbnz	r3, 80112aa <__sflush_r+0x7e>
 80112a8:	6560      	str	r0, [r4, #84]	; 0x54
 80112aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80112ac:	602f      	str	r7, [r5, #0]
 80112ae:	2900      	cmp	r1, #0
 80112b0:	d0c9      	beq.n	8011246 <__sflush_r+0x1a>
 80112b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80112b6:	4299      	cmp	r1, r3
 80112b8:	d002      	beq.n	80112c0 <__sflush_r+0x94>
 80112ba:	4628      	mov	r0, r5
 80112bc:	f7ff f9e2 	bl	8010684 <_free_r>
 80112c0:	2000      	movs	r0, #0
 80112c2:	6360      	str	r0, [r4, #52]	; 0x34
 80112c4:	e7c0      	b.n	8011248 <__sflush_r+0x1c>
 80112c6:	2301      	movs	r3, #1
 80112c8:	4628      	mov	r0, r5
 80112ca:	47b0      	blx	r6
 80112cc:	1c41      	adds	r1, r0, #1
 80112ce:	d1c8      	bne.n	8011262 <__sflush_r+0x36>
 80112d0:	682b      	ldr	r3, [r5, #0]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d0c5      	beq.n	8011262 <__sflush_r+0x36>
 80112d6:	2b1d      	cmp	r3, #29
 80112d8:	d001      	beq.n	80112de <__sflush_r+0xb2>
 80112da:	2b16      	cmp	r3, #22
 80112dc:	d101      	bne.n	80112e2 <__sflush_r+0xb6>
 80112de:	602f      	str	r7, [r5, #0]
 80112e0:	e7b1      	b.n	8011246 <__sflush_r+0x1a>
 80112e2:	89a3      	ldrh	r3, [r4, #12]
 80112e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112e8:	81a3      	strh	r3, [r4, #12]
 80112ea:	e7ad      	b.n	8011248 <__sflush_r+0x1c>
 80112ec:	690f      	ldr	r7, [r1, #16]
 80112ee:	2f00      	cmp	r7, #0
 80112f0:	d0a9      	beq.n	8011246 <__sflush_r+0x1a>
 80112f2:	0793      	lsls	r3, r2, #30
 80112f4:	680e      	ldr	r6, [r1, #0]
 80112f6:	bf08      	it	eq
 80112f8:	694b      	ldreq	r3, [r1, #20]
 80112fa:	600f      	str	r7, [r1, #0]
 80112fc:	bf18      	it	ne
 80112fe:	2300      	movne	r3, #0
 8011300:	eba6 0807 	sub.w	r8, r6, r7
 8011304:	608b      	str	r3, [r1, #8]
 8011306:	f1b8 0f00 	cmp.w	r8, #0
 801130a:	dd9c      	ble.n	8011246 <__sflush_r+0x1a>
 801130c:	6a21      	ldr	r1, [r4, #32]
 801130e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011310:	4643      	mov	r3, r8
 8011312:	463a      	mov	r2, r7
 8011314:	4628      	mov	r0, r5
 8011316:	47b0      	blx	r6
 8011318:	2800      	cmp	r0, #0
 801131a:	dc06      	bgt.n	801132a <__sflush_r+0xfe>
 801131c:	89a3      	ldrh	r3, [r4, #12]
 801131e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011322:	81a3      	strh	r3, [r4, #12]
 8011324:	f04f 30ff 	mov.w	r0, #4294967295
 8011328:	e78e      	b.n	8011248 <__sflush_r+0x1c>
 801132a:	4407      	add	r7, r0
 801132c:	eba8 0800 	sub.w	r8, r8, r0
 8011330:	e7e9      	b.n	8011306 <__sflush_r+0xda>
 8011332:	bf00      	nop
 8011334:	dfbffffe 	.word	0xdfbffffe

08011338 <_fflush_r>:
 8011338:	b538      	push	{r3, r4, r5, lr}
 801133a:	690b      	ldr	r3, [r1, #16]
 801133c:	4605      	mov	r5, r0
 801133e:	460c      	mov	r4, r1
 8011340:	b913      	cbnz	r3, 8011348 <_fflush_r+0x10>
 8011342:	2500      	movs	r5, #0
 8011344:	4628      	mov	r0, r5
 8011346:	bd38      	pop	{r3, r4, r5, pc}
 8011348:	b118      	cbz	r0, 8011352 <_fflush_r+0x1a>
 801134a:	6a03      	ldr	r3, [r0, #32]
 801134c:	b90b      	cbnz	r3, 8011352 <_fflush_r+0x1a>
 801134e:	f7fe f969 	bl	800f624 <__sinit>
 8011352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d0f3      	beq.n	8011342 <_fflush_r+0xa>
 801135a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801135c:	07d0      	lsls	r0, r2, #31
 801135e:	d404      	bmi.n	801136a <_fflush_r+0x32>
 8011360:	0599      	lsls	r1, r3, #22
 8011362:	d402      	bmi.n	801136a <_fflush_r+0x32>
 8011364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011366:	f7fe fae2 	bl	800f92e <__retarget_lock_acquire_recursive>
 801136a:	4628      	mov	r0, r5
 801136c:	4621      	mov	r1, r4
 801136e:	f7ff ff5d 	bl	801122c <__sflush_r>
 8011372:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011374:	07da      	lsls	r2, r3, #31
 8011376:	4605      	mov	r5, r0
 8011378:	d4e4      	bmi.n	8011344 <_fflush_r+0xc>
 801137a:	89a3      	ldrh	r3, [r4, #12]
 801137c:	059b      	lsls	r3, r3, #22
 801137e:	d4e1      	bmi.n	8011344 <_fflush_r+0xc>
 8011380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011382:	f7fe fad5 	bl	800f930 <__retarget_lock_release_recursive>
 8011386:	e7dd      	b.n	8011344 <_fflush_r+0xc>

08011388 <fiprintf>:
 8011388:	b40e      	push	{r1, r2, r3}
 801138a:	b503      	push	{r0, r1, lr}
 801138c:	4601      	mov	r1, r0
 801138e:	ab03      	add	r3, sp, #12
 8011390:	4805      	ldr	r0, [pc, #20]	; (80113a8 <fiprintf+0x20>)
 8011392:	f853 2b04 	ldr.w	r2, [r3], #4
 8011396:	6800      	ldr	r0, [r0, #0]
 8011398:	9301      	str	r3, [sp, #4]
 801139a:	f000 f8c5 	bl	8011528 <_vfiprintf_r>
 801139e:	b002      	add	sp, #8
 80113a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80113a4:	b003      	add	sp, #12
 80113a6:	4770      	bx	lr
 80113a8:	200001e8 	.word	0x200001e8

080113ac <memmove>:
 80113ac:	4288      	cmp	r0, r1
 80113ae:	b510      	push	{r4, lr}
 80113b0:	eb01 0402 	add.w	r4, r1, r2
 80113b4:	d902      	bls.n	80113bc <memmove+0x10>
 80113b6:	4284      	cmp	r4, r0
 80113b8:	4623      	mov	r3, r4
 80113ba:	d807      	bhi.n	80113cc <memmove+0x20>
 80113bc:	1e43      	subs	r3, r0, #1
 80113be:	42a1      	cmp	r1, r4
 80113c0:	d008      	beq.n	80113d4 <memmove+0x28>
 80113c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80113c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80113ca:	e7f8      	b.n	80113be <memmove+0x12>
 80113cc:	4402      	add	r2, r0
 80113ce:	4601      	mov	r1, r0
 80113d0:	428a      	cmp	r2, r1
 80113d2:	d100      	bne.n	80113d6 <memmove+0x2a>
 80113d4:	bd10      	pop	{r4, pc}
 80113d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80113da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80113de:	e7f7      	b.n	80113d0 <memmove+0x24>

080113e0 <_sbrk_r>:
 80113e0:	b538      	push	{r3, r4, r5, lr}
 80113e2:	4d06      	ldr	r5, [pc, #24]	; (80113fc <_sbrk_r+0x1c>)
 80113e4:	2300      	movs	r3, #0
 80113e6:	4604      	mov	r4, r0
 80113e8:	4608      	mov	r0, r1
 80113ea:	602b      	str	r3, [r5, #0]
 80113ec:	f7f1 fc36 	bl	8002c5c <_sbrk>
 80113f0:	1c43      	adds	r3, r0, #1
 80113f2:	d102      	bne.n	80113fa <_sbrk_r+0x1a>
 80113f4:	682b      	ldr	r3, [r5, #0]
 80113f6:	b103      	cbz	r3, 80113fa <_sbrk_r+0x1a>
 80113f8:	6023      	str	r3, [r4, #0]
 80113fa:	bd38      	pop	{r3, r4, r5, pc}
 80113fc:	200052b0 	.word	0x200052b0

08011400 <abort>:
 8011400:	b508      	push	{r3, lr}
 8011402:	2006      	movs	r0, #6
 8011404:	f000 fa68 	bl	80118d8 <raise>
 8011408:	2001      	movs	r0, #1
 801140a:	f7f1 fbaf 	bl	8002b6c <_exit>

0801140e <_calloc_r>:
 801140e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011410:	fba1 2402 	umull	r2, r4, r1, r2
 8011414:	b94c      	cbnz	r4, 801142a <_calloc_r+0x1c>
 8011416:	4611      	mov	r1, r2
 8011418:	9201      	str	r2, [sp, #4]
 801141a:	f7ff f9a7 	bl	801076c <_malloc_r>
 801141e:	9a01      	ldr	r2, [sp, #4]
 8011420:	4605      	mov	r5, r0
 8011422:	b930      	cbnz	r0, 8011432 <_calloc_r+0x24>
 8011424:	4628      	mov	r0, r5
 8011426:	b003      	add	sp, #12
 8011428:	bd30      	pop	{r4, r5, pc}
 801142a:	220c      	movs	r2, #12
 801142c:	6002      	str	r2, [r0, #0]
 801142e:	2500      	movs	r5, #0
 8011430:	e7f8      	b.n	8011424 <_calloc_r+0x16>
 8011432:	4621      	mov	r1, r4
 8011434:	f7fe f98f 	bl	800f756 <memset>
 8011438:	e7f4      	b.n	8011424 <_calloc_r+0x16>

0801143a <__ascii_mbtowc>:
 801143a:	b082      	sub	sp, #8
 801143c:	b901      	cbnz	r1, 8011440 <__ascii_mbtowc+0x6>
 801143e:	a901      	add	r1, sp, #4
 8011440:	b142      	cbz	r2, 8011454 <__ascii_mbtowc+0x1a>
 8011442:	b14b      	cbz	r3, 8011458 <__ascii_mbtowc+0x1e>
 8011444:	7813      	ldrb	r3, [r2, #0]
 8011446:	600b      	str	r3, [r1, #0]
 8011448:	7812      	ldrb	r2, [r2, #0]
 801144a:	1e10      	subs	r0, r2, #0
 801144c:	bf18      	it	ne
 801144e:	2001      	movne	r0, #1
 8011450:	b002      	add	sp, #8
 8011452:	4770      	bx	lr
 8011454:	4610      	mov	r0, r2
 8011456:	e7fb      	b.n	8011450 <__ascii_mbtowc+0x16>
 8011458:	f06f 0001 	mvn.w	r0, #1
 801145c:	e7f8      	b.n	8011450 <__ascii_mbtowc+0x16>

0801145e <_realloc_r>:
 801145e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011462:	4680      	mov	r8, r0
 8011464:	4614      	mov	r4, r2
 8011466:	460e      	mov	r6, r1
 8011468:	b921      	cbnz	r1, 8011474 <_realloc_r+0x16>
 801146a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801146e:	4611      	mov	r1, r2
 8011470:	f7ff b97c 	b.w	801076c <_malloc_r>
 8011474:	b92a      	cbnz	r2, 8011482 <_realloc_r+0x24>
 8011476:	f7ff f905 	bl	8010684 <_free_r>
 801147a:	4625      	mov	r5, r4
 801147c:	4628      	mov	r0, r5
 801147e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011482:	f000 fa45 	bl	8011910 <_malloc_usable_size_r>
 8011486:	4284      	cmp	r4, r0
 8011488:	4607      	mov	r7, r0
 801148a:	d802      	bhi.n	8011492 <_realloc_r+0x34>
 801148c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011490:	d812      	bhi.n	80114b8 <_realloc_r+0x5a>
 8011492:	4621      	mov	r1, r4
 8011494:	4640      	mov	r0, r8
 8011496:	f7ff f969 	bl	801076c <_malloc_r>
 801149a:	4605      	mov	r5, r0
 801149c:	2800      	cmp	r0, #0
 801149e:	d0ed      	beq.n	801147c <_realloc_r+0x1e>
 80114a0:	42bc      	cmp	r4, r7
 80114a2:	4622      	mov	r2, r4
 80114a4:	4631      	mov	r1, r6
 80114a6:	bf28      	it	cs
 80114a8:	463a      	movcs	r2, r7
 80114aa:	f7fe fa42 	bl	800f932 <memcpy>
 80114ae:	4631      	mov	r1, r6
 80114b0:	4640      	mov	r0, r8
 80114b2:	f7ff f8e7 	bl	8010684 <_free_r>
 80114b6:	e7e1      	b.n	801147c <_realloc_r+0x1e>
 80114b8:	4635      	mov	r5, r6
 80114ba:	e7df      	b.n	801147c <_realloc_r+0x1e>

080114bc <__ascii_wctomb>:
 80114bc:	b149      	cbz	r1, 80114d2 <__ascii_wctomb+0x16>
 80114be:	2aff      	cmp	r2, #255	; 0xff
 80114c0:	bf85      	ittet	hi
 80114c2:	238a      	movhi	r3, #138	; 0x8a
 80114c4:	6003      	strhi	r3, [r0, #0]
 80114c6:	700a      	strbls	r2, [r1, #0]
 80114c8:	f04f 30ff 	movhi.w	r0, #4294967295
 80114cc:	bf98      	it	ls
 80114ce:	2001      	movls	r0, #1
 80114d0:	4770      	bx	lr
 80114d2:	4608      	mov	r0, r1
 80114d4:	4770      	bx	lr

080114d6 <__sfputc_r>:
 80114d6:	6893      	ldr	r3, [r2, #8]
 80114d8:	3b01      	subs	r3, #1
 80114da:	2b00      	cmp	r3, #0
 80114dc:	b410      	push	{r4}
 80114de:	6093      	str	r3, [r2, #8]
 80114e0:	da08      	bge.n	80114f4 <__sfputc_r+0x1e>
 80114e2:	6994      	ldr	r4, [r2, #24]
 80114e4:	42a3      	cmp	r3, r4
 80114e6:	db01      	blt.n	80114ec <__sfputc_r+0x16>
 80114e8:	290a      	cmp	r1, #10
 80114ea:	d103      	bne.n	80114f4 <__sfputc_r+0x1e>
 80114ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114f0:	f000 b934 	b.w	801175c <__swbuf_r>
 80114f4:	6813      	ldr	r3, [r2, #0]
 80114f6:	1c58      	adds	r0, r3, #1
 80114f8:	6010      	str	r0, [r2, #0]
 80114fa:	7019      	strb	r1, [r3, #0]
 80114fc:	4608      	mov	r0, r1
 80114fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011502:	4770      	bx	lr

08011504 <__sfputs_r>:
 8011504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011506:	4606      	mov	r6, r0
 8011508:	460f      	mov	r7, r1
 801150a:	4614      	mov	r4, r2
 801150c:	18d5      	adds	r5, r2, r3
 801150e:	42ac      	cmp	r4, r5
 8011510:	d101      	bne.n	8011516 <__sfputs_r+0x12>
 8011512:	2000      	movs	r0, #0
 8011514:	e007      	b.n	8011526 <__sfputs_r+0x22>
 8011516:	f814 1b01 	ldrb.w	r1, [r4], #1
 801151a:	463a      	mov	r2, r7
 801151c:	4630      	mov	r0, r6
 801151e:	f7ff ffda 	bl	80114d6 <__sfputc_r>
 8011522:	1c43      	adds	r3, r0, #1
 8011524:	d1f3      	bne.n	801150e <__sfputs_r+0xa>
 8011526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011528 <_vfiprintf_r>:
 8011528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801152c:	460d      	mov	r5, r1
 801152e:	b09d      	sub	sp, #116	; 0x74
 8011530:	4614      	mov	r4, r2
 8011532:	4698      	mov	r8, r3
 8011534:	4606      	mov	r6, r0
 8011536:	b118      	cbz	r0, 8011540 <_vfiprintf_r+0x18>
 8011538:	6a03      	ldr	r3, [r0, #32]
 801153a:	b90b      	cbnz	r3, 8011540 <_vfiprintf_r+0x18>
 801153c:	f7fe f872 	bl	800f624 <__sinit>
 8011540:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011542:	07d9      	lsls	r1, r3, #31
 8011544:	d405      	bmi.n	8011552 <_vfiprintf_r+0x2a>
 8011546:	89ab      	ldrh	r3, [r5, #12]
 8011548:	059a      	lsls	r2, r3, #22
 801154a:	d402      	bmi.n	8011552 <_vfiprintf_r+0x2a>
 801154c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801154e:	f7fe f9ee 	bl	800f92e <__retarget_lock_acquire_recursive>
 8011552:	89ab      	ldrh	r3, [r5, #12]
 8011554:	071b      	lsls	r3, r3, #28
 8011556:	d501      	bpl.n	801155c <_vfiprintf_r+0x34>
 8011558:	692b      	ldr	r3, [r5, #16]
 801155a:	b99b      	cbnz	r3, 8011584 <_vfiprintf_r+0x5c>
 801155c:	4629      	mov	r1, r5
 801155e:	4630      	mov	r0, r6
 8011560:	f000 f93a 	bl	80117d8 <__swsetup_r>
 8011564:	b170      	cbz	r0, 8011584 <_vfiprintf_r+0x5c>
 8011566:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011568:	07dc      	lsls	r4, r3, #31
 801156a:	d504      	bpl.n	8011576 <_vfiprintf_r+0x4e>
 801156c:	f04f 30ff 	mov.w	r0, #4294967295
 8011570:	b01d      	add	sp, #116	; 0x74
 8011572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011576:	89ab      	ldrh	r3, [r5, #12]
 8011578:	0598      	lsls	r0, r3, #22
 801157a:	d4f7      	bmi.n	801156c <_vfiprintf_r+0x44>
 801157c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801157e:	f7fe f9d7 	bl	800f930 <__retarget_lock_release_recursive>
 8011582:	e7f3      	b.n	801156c <_vfiprintf_r+0x44>
 8011584:	2300      	movs	r3, #0
 8011586:	9309      	str	r3, [sp, #36]	; 0x24
 8011588:	2320      	movs	r3, #32
 801158a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801158e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011592:	2330      	movs	r3, #48	; 0x30
 8011594:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011748 <_vfiprintf_r+0x220>
 8011598:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801159c:	f04f 0901 	mov.w	r9, #1
 80115a0:	4623      	mov	r3, r4
 80115a2:	469a      	mov	sl, r3
 80115a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80115a8:	b10a      	cbz	r2, 80115ae <_vfiprintf_r+0x86>
 80115aa:	2a25      	cmp	r2, #37	; 0x25
 80115ac:	d1f9      	bne.n	80115a2 <_vfiprintf_r+0x7a>
 80115ae:	ebba 0b04 	subs.w	fp, sl, r4
 80115b2:	d00b      	beq.n	80115cc <_vfiprintf_r+0xa4>
 80115b4:	465b      	mov	r3, fp
 80115b6:	4622      	mov	r2, r4
 80115b8:	4629      	mov	r1, r5
 80115ba:	4630      	mov	r0, r6
 80115bc:	f7ff ffa2 	bl	8011504 <__sfputs_r>
 80115c0:	3001      	adds	r0, #1
 80115c2:	f000 80a9 	beq.w	8011718 <_vfiprintf_r+0x1f0>
 80115c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115c8:	445a      	add	r2, fp
 80115ca:	9209      	str	r2, [sp, #36]	; 0x24
 80115cc:	f89a 3000 	ldrb.w	r3, [sl]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	f000 80a1 	beq.w	8011718 <_vfiprintf_r+0x1f0>
 80115d6:	2300      	movs	r3, #0
 80115d8:	f04f 32ff 	mov.w	r2, #4294967295
 80115dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80115e0:	f10a 0a01 	add.w	sl, sl, #1
 80115e4:	9304      	str	r3, [sp, #16]
 80115e6:	9307      	str	r3, [sp, #28]
 80115e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80115ec:	931a      	str	r3, [sp, #104]	; 0x68
 80115ee:	4654      	mov	r4, sl
 80115f0:	2205      	movs	r2, #5
 80115f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115f6:	4854      	ldr	r0, [pc, #336]	; (8011748 <_vfiprintf_r+0x220>)
 80115f8:	f7ee fe22 	bl	8000240 <memchr>
 80115fc:	9a04      	ldr	r2, [sp, #16]
 80115fe:	b9d8      	cbnz	r0, 8011638 <_vfiprintf_r+0x110>
 8011600:	06d1      	lsls	r1, r2, #27
 8011602:	bf44      	itt	mi
 8011604:	2320      	movmi	r3, #32
 8011606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801160a:	0713      	lsls	r3, r2, #28
 801160c:	bf44      	itt	mi
 801160e:	232b      	movmi	r3, #43	; 0x2b
 8011610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011614:	f89a 3000 	ldrb.w	r3, [sl]
 8011618:	2b2a      	cmp	r3, #42	; 0x2a
 801161a:	d015      	beq.n	8011648 <_vfiprintf_r+0x120>
 801161c:	9a07      	ldr	r2, [sp, #28]
 801161e:	4654      	mov	r4, sl
 8011620:	2000      	movs	r0, #0
 8011622:	f04f 0c0a 	mov.w	ip, #10
 8011626:	4621      	mov	r1, r4
 8011628:	f811 3b01 	ldrb.w	r3, [r1], #1
 801162c:	3b30      	subs	r3, #48	; 0x30
 801162e:	2b09      	cmp	r3, #9
 8011630:	d94d      	bls.n	80116ce <_vfiprintf_r+0x1a6>
 8011632:	b1b0      	cbz	r0, 8011662 <_vfiprintf_r+0x13a>
 8011634:	9207      	str	r2, [sp, #28]
 8011636:	e014      	b.n	8011662 <_vfiprintf_r+0x13a>
 8011638:	eba0 0308 	sub.w	r3, r0, r8
 801163c:	fa09 f303 	lsl.w	r3, r9, r3
 8011640:	4313      	orrs	r3, r2
 8011642:	9304      	str	r3, [sp, #16]
 8011644:	46a2      	mov	sl, r4
 8011646:	e7d2      	b.n	80115ee <_vfiprintf_r+0xc6>
 8011648:	9b03      	ldr	r3, [sp, #12]
 801164a:	1d19      	adds	r1, r3, #4
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	9103      	str	r1, [sp, #12]
 8011650:	2b00      	cmp	r3, #0
 8011652:	bfbb      	ittet	lt
 8011654:	425b      	neglt	r3, r3
 8011656:	f042 0202 	orrlt.w	r2, r2, #2
 801165a:	9307      	strge	r3, [sp, #28]
 801165c:	9307      	strlt	r3, [sp, #28]
 801165e:	bfb8      	it	lt
 8011660:	9204      	strlt	r2, [sp, #16]
 8011662:	7823      	ldrb	r3, [r4, #0]
 8011664:	2b2e      	cmp	r3, #46	; 0x2e
 8011666:	d10c      	bne.n	8011682 <_vfiprintf_r+0x15a>
 8011668:	7863      	ldrb	r3, [r4, #1]
 801166a:	2b2a      	cmp	r3, #42	; 0x2a
 801166c:	d134      	bne.n	80116d8 <_vfiprintf_r+0x1b0>
 801166e:	9b03      	ldr	r3, [sp, #12]
 8011670:	1d1a      	adds	r2, r3, #4
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	9203      	str	r2, [sp, #12]
 8011676:	2b00      	cmp	r3, #0
 8011678:	bfb8      	it	lt
 801167a:	f04f 33ff 	movlt.w	r3, #4294967295
 801167e:	3402      	adds	r4, #2
 8011680:	9305      	str	r3, [sp, #20]
 8011682:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011758 <_vfiprintf_r+0x230>
 8011686:	7821      	ldrb	r1, [r4, #0]
 8011688:	2203      	movs	r2, #3
 801168a:	4650      	mov	r0, sl
 801168c:	f7ee fdd8 	bl	8000240 <memchr>
 8011690:	b138      	cbz	r0, 80116a2 <_vfiprintf_r+0x17a>
 8011692:	9b04      	ldr	r3, [sp, #16]
 8011694:	eba0 000a 	sub.w	r0, r0, sl
 8011698:	2240      	movs	r2, #64	; 0x40
 801169a:	4082      	lsls	r2, r0
 801169c:	4313      	orrs	r3, r2
 801169e:	3401      	adds	r4, #1
 80116a0:	9304      	str	r3, [sp, #16]
 80116a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116a6:	4829      	ldr	r0, [pc, #164]	; (801174c <_vfiprintf_r+0x224>)
 80116a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80116ac:	2206      	movs	r2, #6
 80116ae:	f7ee fdc7 	bl	8000240 <memchr>
 80116b2:	2800      	cmp	r0, #0
 80116b4:	d03f      	beq.n	8011736 <_vfiprintf_r+0x20e>
 80116b6:	4b26      	ldr	r3, [pc, #152]	; (8011750 <_vfiprintf_r+0x228>)
 80116b8:	bb1b      	cbnz	r3, 8011702 <_vfiprintf_r+0x1da>
 80116ba:	9b03      	ldr	r3, [sp, #12]
 80116bc:	3307      	adds	r3, #7
 80116be:	f023 0307 	bic.w	r3, r3, #7
 80116c2:	3308      	adds	r3, #8
 80116c4:	9303      	str	r3, [sp, #12]
 80116c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116c8:	443b      	add	r3, r7
 80116ca:	9309      	str	r3, [sp, #36]	; 0x24
 80116cc:	e768      	b.n	80115a0 <_vfiprintf_r+0x78>
 80116ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80116d2:	460c      	mov	r4, r1
 80116d4:	2001      	movs	r0, #1
 80116d6:	e7a6      	b.n	8011626 <_vfiprintf_r+0xfe>
 80116d8:	2300      	movs	r3, #0
 80116da:	3401      	adds	r4, #1
 80116dc:	9305      	str	r3, [sp, #20]
 80116de:	4619      	mov	r1, r3
 80116e0:	f04f 0c0a 	mov.w	ip, #10
 80116e4:	4620      	mov	r0, r4
 80116e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116ea:	3a30      	subs	r2, #48	; 0x30
 80116ec:	2a09      	cmp	r2, #9
 80116ee:	d903      	bls.n	80116f8 <_vfiprintf_r+0x1d0>
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d0c6      	beq.n	8011682 <_vfiprintf_r+0x15a>
 80116f4:	9105      	str	r1, [sp, #20]
 80116f6:	e7c4      	b.n	8011682 <_vfiprintf_r+0x15a>
 80116f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80116fc:	4604      	mov	r4, r0
 80116fe:	2301      	movs	r3, #1
 8011700:	e7f0      	b.n	80116e4 <_vfiprintf_r+0x1bc>
 8011702:	ab03      	add	r3, sp, #12
 8011704:	9300      	str	r3, [sp, #0]
 8011706:	462a      	mov	r2, r5
 8011708:	4b12      	ldr	r3, [pc, #72]	; (8011754 <_vfiprintf_r+0x22c>)
 801170a:	a904      	add	r1, sp, #16
 801170c:	4630      	mov	r0, r6
 801170e:	f7fd fb37 	bl	800ed80 <_printf_float>
 8011712:	4607      	mov	r7, r0
 8011714:	1c78      	adds	r0, r7, #1
 8011716:	d1d6      	bne.n	80116c6 <_vfiprintf_r+0x19e>
 8011718:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801171a:	07d9      	lsls	r1, r3, #31
 801171c:	d405      	bmi.n	801172a <_vfiprintf_r+0x202>
 801171e:	89ab      	ldrh	r3, [r5, #12]
 8011720:	059a      	lsls	r2, r3, #22
 8011722:	d402      	bmi.n	801172a <_vfiprintf_r+0x202>
 8011724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011726:	f7fe f903 	bl	800f930 <__retarget_lock_release_recursive>
 801172a:	89ab      	ldrh	r3, [r5, #12]
 801172c:	065b      	lsls	r3, r3, #25
 801172e:	f53f af1d 	bmi.w	801156c <_vfiprintf_r+0x44>
 8011732:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011734:	e71c      	b.n	8011570 <_vfiprintf_r+0x48>
 8011736:	ab03      	add	r3, sp, #12
 8011738:	9300      	str	r3, [sp, #0]
 801173a:	462a      	mov	r2, r5
 801173c:	4b05      	ldr	r3, [pc, #20]	; (8011754 <_vfiprintf_r+0x22c>)
 801173e:	a904      	add	r1, sp, #16
 8011740:	4630      	mov	r0, r6
 8011742:	f7fd fdc1 	bl	800f2c8 <_printf_i>
 8011746:	e7e4      	b.n	8011712 <_vfiprintf_r+0x1ea>
 8011748:	08012ea4 	.word	0x08012ea4
 801174c:	08012eae 	.word	0x08012eae
 8011750:	0800ed81 	.word	0x0800ed81
 8011754:	08011505 	.word	0x08011505
 8011758:	08012eaa 	.word	0x08012eaa

0801175c <__swbuf_r>:
 801175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801175e:	460e      	mov	r6, r1
 8011760:	4614      	mov	r4, r2
 8011762:	4605      	mov	r5, r0
 8011764:	b118      	cbz	r0, 801176e <__swbuf_r+0x12>
 8011766:	6a03      	ldr	r3, [r0, #32]
 8011768:	b90b      	cbnz	r3, 801176e <__swbuf_r+0x12>
 801176a:	f7fd ff5b 	bl	800f624 <__sinit>
 801176e:	69a3      	ldr	r3, [r4, #24]
 8011770:	60a3      	str	r3, [r4, #8]
 8011772:	89a3      	ldrh	r3, [r4, #12]
 8011774:	071a      	lsls	r2, r3, #28
 8011776:	d525      	bpl.n	80117c4 <__swbuf_r+0x68>
 8011778:	6923      	ldr	r3, [r4, #16]
 801177a:	b31b      	cbz	r3, 80117c4 <__swbuf_r+0x68>
 801177c:	6823      	ldr	r3, [r4, #0]
 801177e:	6922      	ldr	r2, [r4, #16]
 8011780:	1a98      	subs	r0, r3, r2
 8011782:	6963      	ldr	r3, [r4, #20]
 8011784:	b2f6      	uxtb	r6, r6
 8011786:	4283      	cmp	r3, r0
 8011788:	4637      	mov	r7, r6
 801178a:	dc04      	bgt.n	8011796 <__swbuf_r+0x3a>
 801178c:	4621      	mov	r1, r4
 801178e:	4628      	mov	r0, r5
 8011790:	f7ff fdd2 	bl	8011338 <_fflush_r>
 8011794:	b9e0      	cbnz	r0, 80117d0 <__swbuf_r+0x74>
 8011796:	68a3      	ldr	r3, [r4, #8]
 8011798:	3b01      	subs	r3, #1
 801179a:	60a3      	str	r3, [r4, #8]
 801179c:	6823      	ldr	r3, [r4, #0]
 801179e:	1c5a      	adds	r2, r3, #1
 80117a0:	6022      	str	r2, [r4, #0]
 80117a2:	701e      	strb	r6, [r3, #0]
 80117a4:	6962      	ldr	r2, [r4, #20]
 80117a6:	1c43      	adds	r3, r0, #1
 80117a8:	429a      	cmp	r2, r3
 80117aa:	d004      	beq.n	80117b6 <__swbuf_r+0x5a>
 80117ac:	89a3      	ldrh	r3, [r4, #12]
 80117ae:	07db      	lsls	r3, r3, #31
 80117b0:	d506      	bpl.n	80117c0 <__swbuf_r+0x64>
 80117b2:	2e0a      	cmp	r6, #10
 80117b4:	d104      	bne.n	80117c0 <__swbuf_r+0x64>
 80117b6:	4621      	mov	r1, r4
 80117b8:	4628      	mov	r0, r5
 80117ba:	f7ff fdbd 	bl	8011338 <_fflush_r>
 80117be:	b938      	cbnz	r0, 80117d0 <__swbuf_r+0x74>
 80117c0:	4638      	mov	r0, r7
 80117c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117c4:	4621      	mov	r1, r4
 80117c6:	4628      	mov	r0, r5
 80117c8:	f000 f806 	bl	80117d8 <__swsetup_r>
 80117cc:	2800      	cmp	r0, #0
 80117ce:	d0d5      	beq.n	801177c <__swbuf_r+0x20>
 80117d0:	f04f 37ff 	mov.w	r7, #4294967295
 80117d4:	e7f4      	b.n	80117c0 <__swbuf_r+0x64>
	...

080117d8 <__swsetup_r>:
 80117d8:	b538      	push	{r3, r4, r5, lr}
 80117da:	4b2a      	ldr	r3, [pc, #168]	; (8011884 <__swsetup_r+0xac>)
 80117dc:	4605      	mov	r5, r0
 80117de:	6818      	ldr	r0, [r3, #0]
 80117e0:	460c      	mov	r4, r1
 80117e2:	b118      	cbz	r0, 80117ec <__swsetup_r+0x14>
 80117e4:	6a03      	ldr	r3, [r0, #32]
 80117e6:	b90b      	cbnz	r3, 80117ec <__swsetup_r+0x14>
 80117e8:	f7fd ff1c 	bl	800f624 <__sinit>
 80117ec:	89a3      	ldrh	r3, [r4, #12]
 80117ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80117f2:	0718      	lsls	r0, r3, #28
 80117f4:	d422      	bmi.n	801183c <__swsetup_r+0x64>
 80117f6:	06d9      	lsls	r1, r3, #27
 80117f8:	d407      	bmi.n	801180a <__swsetup_r+0x32>
 80117fa:	2309      	movs	r3, #9
 80117fc:	602b      	str	r3, [r5, #0]
 80117fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011802:	81a3      	strh	r3, [r4, #12]
 8011804:	f04f 30ff 	mov.w	r0, #4294967295
 8011808:	e034      	b.n	8011874 <__swsetup_r+0x9c>
 801180a:	0758      	lsls	r0, r3, #29
 801180c:	d512      	bpl.n	8011834 <__swsetup_r+0x5c>
 801180e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011810:	b141      	cbz	r1, 8011824 <__swsetup_r+0x4c>
 8011812:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011816:	4299      	cmp	r1, r3
 8011818:	d002      	beq.n	8011820 <__swsetup_r+0x48>
 801181a:	4628      	mov	r0, r5
 801181c:	f7fe ff32 	bl	8010684 <_free_r>
 8011820:	2300      	movs	r3, #0
 8011822:	6363      	str	r3, [r4, #52]	; 0x34
 8011824:	89a3      	ldrh	r3, [r4, #12]
 8011826:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801182a:	81a3      	strh	r3, [r4, #12]
 801182c:	2300      	movs	r3, #0
 801182e:	6063      	str	r3, [r4, #4]
 8011830:	6923      	ldr	r3, [r4, #16]
 8011832:	6023      	str	r3, [r4, #0]
 8011834:	89a3      	ldrh	r3, [r4, #12]
 8011836:	f043 0308 	orr.w	r3, r3, #8
 801183a:	81a3      	strh	r3, [r4, #12]
 801183c:	6923      	ldr	r3, [r4, #16]
 801183e:	b94b      	cbnz	r3, 8011854 <__swsetup_r+0x7c>
 8011840:	89a3      	ldrh	r3, [r4, #12]
 8011842:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801184a:	d003      	beq.n	8011854 <__swsetup_r+0x7c>
 801184c:	4621      	mov	r1, r4
 801184e:	4628      	mov	r0, r5
 8011850:	f000 f88c 	bl	801196c <__smakebuf_r>
 8011854:	89a0      	ldrh	r0, [r4, #12]
 8011856:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801185a:	f010 0301 	ands.w	r3, r0, #1
 801185e:	d00a      	beq.n	8011876 <__swsetup_r+0x9e>
 8011860:	2300      	movs	r3, #0
 8011862:	60a3      	str	r3, [r4, #8]
 8011864:	6963      	ldr	r3, [r4, #20]
 8011866:	425b      	negs	r3, r3
 8011868:	61a3      	str	r3, [r4, #24]
 801186a:	6923      	ldr	r3, [r4, #16]
 801186c:	b943      	cbnz	r3, 8011880 <__swsetup_r+0xa8>
 801186e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011872:	d1c4      	bne.n	80117fe <__swsetup_r+0x26>
 8011874:	bd38      	pop	{r3, r4, r5, pc}
 8011876:	0781      	lsls	r1, r0, #30
 8011878:	bf58      	it	pl
 801187a:	6963      	ldrpl	r3, [r4, #20]
 801187c:	60a3      	str	r3, [r4, #8]
 801187e:	e7f4      	b.n	801186a <__swsetup_r+0x92>
 8011880:	2000      	movs	r0, #0
 8011882:	e7f7      	b.n	8011874 <__swsetup_r+0x9c>
 8011884:	200001e8 	.word	0x200001e8

08011888 <_raise_r>:
 8011888:	291f      	cmp	r1, #31
 801188a:	b538      	push	{r3, r4, r5, lr}
 801188c:	4604      	mov	r4, r0
 801188e:	460d      	mov	r5, r1
 8011890:	d904      	bls.n	801189c <_raise_r+0x14>
 8011892:	2316      	movs	r3, #22
 8011894:	6003      	str	r3, [r0, #0]
 8011896:	f04f 30ff 	mov.w	r0, #4294967295
 801189a:	bd38      	pop	{r3, r4, r5, pc}
 801189c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801189e:	b112      	cbz	r2, 80118a6 <_raise_r+0x1e>
 80118a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80118a4:	b94b      	cbnz	r3, 80118ba <_raise_r+0x32>
 80118a6:	4620      	mov	r0, r4
 80118a8:	f000 f830 	bl	801190c <_getpid_r>
 80118ac:	462a      	mov	r2, r5
 80118ae:	4601      	mov	r1, r0
 80118b0:	4620      	mov	r0, r4
 80118b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118b6:	f000 b817 	b.w	80118e8 <_kill_r>
 80118ba:	2b01      	cmp	r3, #1
 80118bc:	d00a      	beq.n	80118d4 <_raise_r+0x4c>
 80118be:	1c59      	adds	r1, r3, #1
 80118c0:	d103      	bne.n	80118ca <_raise_r+0x42>
 80118c2:	2316      	movs	r3, #22
 80118c4:	6003      	str	r3, [r0, #0]
 80118c6:	2001      	movs	r0, #1
 80118c8:	e7e7      	b.n	801189a <_raise_r+0x12>
 80118ca:	2400      	movs	r4, #0
 80118cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80118d0:	4628      	mov	r0, r5
 80118d2:	4798      	blx	r3
 80118d4:	2000      	movs	r0, #0
 80118d6:	e7e0      	b.n	801189a <_raise_r+0x12>

080118d8 <raise>:
 80118d8:	4b02      	ldr	r3, [pc, #8]	; (80118e4 <raise+0xc>)
 80118da:	4601      	mov	r1, r0
 80118dc:	6818      	ldr	r0, [r3, #0]
 80118de:	f7ff bfd3 	b.w	8011888 <_raise_r>
 80118e2:	bf00      	nop
 80118e4:	200001e8 	.word	0x200001e8

080118e8 <_kill_r>:
 80118e8:	b538      	push	{r3, r4, r5, lr}
 80118ea:	4d07      	ldr	r5, [pc, #28]	; (8011908 <_kill_r+0x20>)
 80118ec:	2300      	movs	r3, #0
 80118ee:	4604      	mov	r4, r0
 80118f0:	4608      	mov	r0, r1
 80118f2:	4611      	mov	r1, r2
 80118f4:	602b      	str	r3, [r5, #0]
 80118f6:	f7f1 f929 	bl	8002b4c <_kill>
 80118fa:	1c43      	adds	r3, r0, #1
 80118fc:	d102      	bne.n	8011904 <_kill_r+0x1c>
 80118fe:	682b      	ldr	r3, [r5, #0]
 8011900:	b103      	cbz	r3, 8011904 <_kill_r+0x1c>
 8011902:	6023      	str	r3, [r4, #0]
 8011904:	bd38      	pop	{r3, r4, r5, pc}
 8011906:	bf00      	nop
 8011908:	200052b0 	.word	0x200052b0

0801190c <_getpid_r>:
 801190c:	f7f1 b916 	b.w	8002b3c <_getpid>

08011910 <_malloc_usable_size_r>:
 8011910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011914:	1f18      	subs	r0, r3, #4
 8011916:	2b00      	cmp	r3, #0
 8011918:	bfbc      	itt	lt
 801191a:	580b      	ldrlt	r3, [r1, r0]
 801191c:	18c0      	addlt	r0, r0, r3
 801191e:	4770      	bx	lr

08011920 <__swhatbuf_r>:
 8011920:	b570      	push	{r4, r5, r6, lr}
 8011922:	460c      	mov	r4, r1
 8011924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011928:	2900      	cmp	r1, #0
 801192a:	b096      	sub	sp, #88	; 0x58
 801192c:	4615      	mov	r5, r2
 801192e:	461e      	mov	r6, r3
 8011930:	da0d      	bge.n	801194e <__swhatbuf_r+0x2e>
 8011932:	89a3      	ldrh	r3, [r4, #12]
 8011934:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011938:	f04f 0100 	mov.w	r1, #0
 801193c:	bf0c      	ite	eq
 801193e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011942:	2340      	movne	r3, #64	; 0x40
 8011944:	2000      	movs	r0, #0
 8011946:	6031      	str	r1, [r6, #0]
 8011948:	602b      	str	r3, [r5, #0]
 801194a:	b016      	add	sp, #88	; 0x58
 801194c:	bd70      	pop	{r4, r5, r6, pc}
 801194e:	466a      	mov	r2, sp
 8011950:	f000 f848 	bl	80119e4 <_fstat_r>
 8011954:	2800      	cmp	r0, #0
 8011956:	dbec      	blt.n	8011932 <__swhatbuf_r+0x12>
 8011958:	9901      	ldr	r1, [sp, #4]
 801195a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801195e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011962:	4259      	negs	r1, r3
 8011964:	4159      	adcs	r1, r3
 8011966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801196a:	e7eb      	b.n	8011944 <__swhatbuf_r+0x24>

0801196c <__smakebuf_r>:
 801196c:	898b      	ldrh	r3, [r1, #12]
 801196e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011970:	079d      	lsls	r5, r3, #30
 8011972:	4606      	mov	r6, r0
 8011974:	460c      	mov	r4, r1
 8011976:	d507      	bpl.n	8011988 <__smakebuf_r+0x1c>
 8011978:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801197c:	6023      	str	r3, [r4, #0]
 801197e:	6123      	str	r3, [r4, #16]
 8011980:	2301      	movs	r3, #1
 8011982:	6163      	str	r3, [r4, #20]
 8011984:	b002      	add	sp, #8
 8011986:	bd70      	pop	{r4, r5, r6, pc}
 8011988:	ab01      	add	r3, sp, #4
 801198a:	466a      	mov	r2, sp
 801198c:	f7ff ffc8 	bl	8011920 <__swhatbuf_r>
 8011990:	9900      	ldr	r1, [sp, #0]
 8011992:	4605      	mov	r5, r0
 8011994:	4630      	mov	r0, r6
 8011996:	f7fe fee9 	bl	801076c <_malloc_r>
 801199a:	b948      	cbnz	r0, 80119b0 <__smakebuf_r+0x44>
 801199c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119a0:	059a      	lsls	r2, r3, #22
 80119a2:	d4ef      	bmi.n	8011984 <__smakebuf_r+0x18>
 80119a4:	f023 0303 	bic.w	r3, r3, #3
 80119a8:	f043 0302 	orr.w	r3, r3, #2
 80119ac:	81a3      	strh	r3, [r4, #12]
 80119ae:	e7e3      	b.n	8011978 <__smakebuf_r+0xc>
 80119b0:	89a3      	ldrh	r3, [r4, #12]
 80119b2:	6020      	str	r0, [r4, #0]
 80119b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119b8:	81a3      	strh	r3, [r4, #12]
 80119ba:	9b00      	ldr	r3, [sp, #0]
 80119bc:	6163      	str	r3, [r4, #20]
 80119be:	9b01      	ldr	r3, [sp, #4]
 80119c0:	6120      	str	r0, [r4, #16]
 80119c2:	b15b      	cbz	r3, 80119dc <__smakebuf_r+0x70>
 80119c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119c8:	4630      	mov	r0, r6
 80119ca:	f000 f81d 	bl	8011a08 <_isatty_r>
 80119ce:	b128      	cbz	r0, 80119dc <__smakebuf_r+0x70>
 80119d0:	89a3      	ldrh	r3, [r4, #12]
 80119d2:	f023 0303 	bic.w	r3, r3, #3
 80119d6:	f043 0301 	orr.w	r3, r3, #1
 80119da:	81a3      	strh	r3, [r4, #12]
 80119dc:	89a3      	ldrh	r3, [r4, #12]
 80119de:	431d      	orrs	r5, r3
 80119e0:	81a5      	strh	r5, [r4, #12]
 80119e2:	e7cf      	b.n	8011984 <__smakebuf_r+0x18>

080119e4 <_fstat_r>:
 80119e4:	b538      	push	{r3, r4, r5, lr}
 80119e6:	4d07      	ldr	r5, [pc, #28]	; (8011a04 <_fstat_r+0x20>)
 80119e8:	2300      	movs	r3, #0
 80119ea:	4604      	mov	r4, r0
 80119ec:	4608      	mov	r0, r1
 80119ee:	4611      	mov	r1, r2
 80119f0:	602b      	str	r3, [r5, #0]
 80119f2:	f7f1 f90a 	bl	8002c0a <_fstat>
 80119f6:	1c43      	adds	r3, r0, #1
 80119f8:	d102      	bne.n	8011a00 <_fstat_r+0x1c>
 80119fa:	682b      	ldr	r3, [r5, #0]
 80119fc:	b103      	cbz	r3, 8011a00 <_fstat_r+0x1c>
 80119fe:	6023      	str	r3, [r4, #0]
 8011a00:	bd38      	pop	{r3, r4, r5, pc}
 8011a02:	bf00      	nop
 8011a04:	200052b0 	.word	0x200052b0

08011a08 <_isatty_r>:
 8011a08:	b538      	push	{r3, r4, r5, lr}
 8011a0a:	4d06      	ldr	r5, [pc, #24]	; (8011a24 <_isatty_r+0x1c>)
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	4604      	mov	r4, r0
 8011a10:	4608      	mov	r0, r1
 8011a12:	602b      	str	r3, [r5, #0]
 8011a14:	f7f1 f909 	bl	8002c2a <_isatty>
 8011a18:	1c43      	adds	r3, r0, #1
 8011a1a:	d102      	bne.n	8011a22 <_isatty_r+0x1a>
 8011a1c:	682b      	ldr	r3, [r5, #0]
 8011a1e:	b103      	cbz	r3, 8011a22 <_isatty_r+0x1a>
 8011a20:	6023      	str	r3, [r4, #0]
 8011a22:	bd38      	pop	{r3, r4, r5, pc}
 8011a24:	200052b0 	.word	0x200052b0

08011a28 <pow>:
 8011a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a2a:	ed2d 8b02 	vpush	{d8}
 8011a2e:	eeb0 8a40 	vmov.f32	s16, s0
 8011a32:	eef0 8a60 	vmov.f32	s17, s1
 8011a36:	ec55 4b11 	vmov	r4, r5, d1
 8011a3a:	f000 f871 	bl	8011b20 <__ieee754_pow>
 8011a3e:	4622      	mov	r2, r4
 8011a40:	462b      	mov	r3, r5
 8011a42:	4620      	mov	r0, r4
 8011a44:	4629      	mov	r1, r5
 8011a46:	ec57 6b10 	vmov	r6, r7, d0
 8011a4a:	f7ef f8a7 	bl	8000b9c <__aeabi_dcmpun>
 8011a4e:	2800      	cmp	r0, #0
 8011a50:	d13b      	bne.n	8011aca <pow+0xa2>
 8011a52:	ec51 0b18 	vmov	r0, r1, d8
 8011a56:	2200      	movs	r2, #0
 8011a58:	2300      	movs	r3, #0
 8011a5a:	f7ef f86d 	bl	8000b38 <__aeabi_dcmpeq>
 8011a5e:	b1b8      	cbz	r0, 8011a90 <pow+0x68>
 8011a60:	2200      	movs	r2, #0
 8011a62:	2300      	movs	r3, #0
 8011a64:	4620      	mov	r0, r4
 8011a66:	4629      	mov	r1, r5
 8011a68:	f7ef f866 	bl	8000b38 <__aeabi_dcmpeq>
 8011a6c:	2800      	cmp	r0, #0
 8011a6e:	d146      	bne.n	8011afe <pow+0xd6>
 8011a70:	ec45 4b10 	vmov	d0, r4, r5
 8011a74:	f000 f848 	bl	8011b08 <finite>
 8011a78:	b338      	cbz	r0, 8011aca <pow+0xa2>
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	4620      	mov	r0, r4
 8011a80:	4629      	mov	r1, r5
 8011a82:	f7ef f863 	bl	8000b4c <__aeabi_dcmplt>
 8011a86:	b300      	cbz	r0, 8011aca <pow+0xa2>
 8011a88:	f7fd ff26 	bl	800f8d8 <__errno>
 8011a8c:	2322      	movs	r3, #34	; 0x22
 8011a8e:	e01b      	b.n	8011ac8 <pow+0xa0>
 8011a90:	ec47 6b10 	vmov	d0, r6, r7
 8011a94:	f000 f838 	bl	8011b08 <finite>
 8011a98:	b9e0      	cbnz	r0, 8011ad4 <pow+0xac>
 8011a9a:	eeb0 0a48 	vmov.f32	s0, s16
 8011a9e:	eef0 0a68 	vmov.f32	s1, s17
 8011aa2:	f000 f831 	bl	8011b08 <finite>
 8011aa6:	b1a8      	cbz	r0, 8011ad4 <pow+0xac>
 8011aa8:	ec45 4b10 	vmov	d0, r4, r5
 8011aac:	f000 f82c 	bl	8011b08 <finite>
 8011ab0:	b180      	cbz	r0, 8011ad4 <pow+0xac>
 8011ab2:	4632      	mov	r2, r6
 8011ab4:	463b      	mov	r3, r7
 8011ab6:	4630      	mov	r0, r6
 8011ab8:	4639      	mov	r1, r7
 8011aba:	f7ef f86f 	bl	8000b9c <__aeabi_dcmpun>
 8011abe:	2800      	cmp	r0, #0
 8011ac0:	d0e2      	beq.n	8011a88 <pow+0x60>
 8011ac2:	f7fd ff09 	bl	800f8d8 <__errno>
 8011ac6:	2321      	movs	r3, #33	; 0x21
 8011ac8:	6003      	str	r3, [r0, #0]
 8011aca:	ecbd 8b02 	vpop	{d8}
 8011ace:	ec47 6b10 	vmov	d0, r6, r7
 8011ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ad4:	2200      	movs	r2, #0
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	4630      	mov	r0, r6
 8011ada:	4639      	mov	r1, r7
 8011adc:	f7ef f82c 	bl	8000b38 <__aeabi_dcmpeq>
 8011ae0:	2800      	cmp	r0, #0
 8011ae2:	d0f2      	beq.n	8011aca <pow+0xa2>
 8011ae4:	eeb0 0a48 	vmov.f32	s0, s16
 8011ae8:	eef0 0a68 	vmov.f32	s1, s17
 8011aec:	f000 f80c 	bl	8011b08 <finite>
 8011af0:	2800      	cmp	r0, #0
 8011af2:	d0ea      	beq.n	8011aca <pow+0xa2>
 8011af4:	ec45 4b10 	vmov	d0, r4, r5
 8011af8:	f000 f806 	bl	8011b08 <finite>
 8011afc:	e7c3      	b.n	8011a86 <pow+0x5e>
 8011afe:	4f01      	ldr	r7, [pc, #4]	; (8011b04 <pow+0xdc>)
 8011b00:	2600      	movs	r6, #0
 8011b02:	e7e2      	b.n	8011aca <pow+0xa2>
 8011b04:	3ff00000 	.word	0x3ff00000

08011b08 <finite>:
 8011b08:	b082      	sub	sp, #8
 8011b0a:	ed8d 0b00 	vstr	d0, [sp]
 8011b0e:	9801      	ldr	r0, [sp, #4]
 8011b10:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011b14:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011b18:	0fc0      	lsrs	r0, r0, #31
 8011b1a:	b002      	add	sp, #8
 8011b1c:	4770      	bx	lr
	...

08011b20 <__ieee754_pow>:
 8011b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b24:	ed2d 8b06 	vpush	{d8-d10}
 8011b28:	b089      	sub	sp, #36	; 0x24
 8011b2a:	ed8d 1b00 	vstr	d1, [sp]
 8011b2e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011b32:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011b36:	ea58 0102 	orrs.w	r1, r8, r2
 8011b3a:	ec57 6b10 	vmov	r6, r7, d0
 8011b3e:	d115      	bne.n	8011b6c <__ieee754_pow+0x4c>
 8011b40:	19b3      	adds	r3, r6, r6
 8011b42:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8011b46:	4152      	adcs	r2, r2
 8011b48:	4299      	cmp	r1, r3
 8011b4a:	4b89      	ldr	r3, [pc, #548]	; (8011d70 <__ieee754_pow+0x250>)
 8011b4c:	4193      	sbcs	r3, r2
 8011b4e:	f080 84d1 	bcs.w	80124f4 <__ieee754_pow+0x9d4>
 8011b52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011b56:	4630      	mov	r0, r6
 8011b58:	4639      	mov	r1, r7
 8011b5a:	f7ee fbcf 	bl	80002fc <__adddf3>
 8011b5e:	ec41 0b10 	vmov	d0, r0, r1
 8011b62:	b009      	add	sp, #36	; 0x24
 8011b64:	ecbd 8b06 	vpop	{d8-d10}
 8011b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b6c:	4b81      	ldr	r3, [pc, #516]	; (8011d74 <__ieee754_pow+0x254>)
 8011b6e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011b72:	429c      	cmp	r4, r3
 8011b74:	ee10 aa10 	vmov	sl, s0
 8011b78:	463d      	mov	r5, r7
 8011b7a:	dc06      	bgt.n	8011b8a <__ieee754_pow+0x6a>
 8011b7c:	d101      	bne.n	8011b82 <__ieee754_pow+0x62>
 8011b7e:	2e00      	cmp	r6, #0
 8011b80:	d1e7      	bne.n	8011b52 <__ieee754_pow+0x32>
 8011b82:	4598      	cmp	r8, r3
 8011b84:	dc01      	bgt.n	8011b8a <__ieee754_pow+0x6a>
 8011b86:	d10f      	bne.n	8011ba8 <__ieee754_pow+0x88>
 8011b88:	b172      	cbz	r2, 8011ba8 <__ieee754_pow+0x88>
 8011b8a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8011b8e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8011b92:	ea55 050a 	orrs.w	r5, r5, sl
 8011b96:	d1dc      	bne.n	8011b52 <__ieee754_pow+0x32>
 8011b98:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011b9c:	18db      	adds	r3, r3, r3
 8011b9e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8011ba2:	4152      	adcs	r2, r2
 8011ba4:	429d      	cmp	r5, r3
 8011ba6:	e7d0      	b.n	8011b4a <__ieee754_pow+0x2a>
 8011ba8:	2d00      	cmp	r5, #0
 8011baa:	da3b      	bge.n	8011c24 <__ieee754_pow+0x104>
 8011bac:	4b72      	ldr	r3, [pc, #456]	; (8011d78 <__ieee754_pow+0x258>)
 8011bae:	4598      	cmp	r8, r3
 8011bb0:	dc51      	bgt.n	8011c56 <__ieee754_pow+0x136>
 8011bb2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011bb6:	4598      	cmp	r8, r3
 8011bb8:	f340 84ab 	ble.w	8012512 <__ieee754_pow+0x9f2>
 8011bbc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011bc0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011bc4:	2b14      	cmp	r3, #20
 8011bc6:	dd0f      	ble.n	8011be8 <__ieee754_pow+0xc8>
 8011bc8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011bcc:	fa22 f103 	lsr.w	r1, r2, r3
 8011bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8011bd4:	4293      	cmp	r3, r2
 8011bd6:	f040 849c 	bne.w	8012512 <__ieee754_pow+0x9f2>
 8011bda:	f001 0101 	and.w	r1, r1, #1
 8011bde:	f1c1 0302 	rsb	r3, r1, #2
 8011be2:	9304      	str	r3, [sp, #16]
 8011be4:	b182      	cbz	r2, 8011c08 <__ieee754_pow+0xe8>
 8011be6:	e05f      	b.n	8011ca8 <__ieee754_pow+0x188>
 8011be8:	2a00      	cmp	r2, #0
 8011bea:	d15b      	bne.n	8011ca4 <__ieee754_pow+0x184>
 8011bec:	f1c3 0314 	rsb	r3, r3, #20
 8011bf0:	fa48 f103 	asr.w	r1, r8, r3
 8011bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8011bf8:	4543      	cmp	r3, r8
 8011bfa:	f040 8487 	bne.w	801250c <__ieee754_pow+0x9ec>
 8011bfe:	f001 0101 	and.w	r1, r1, #1
 8011c02:	f1c1 0302 	rsb	r3, r1, #2
 8011c06:	9304      	str	r3, [sp, #16]
 8011c08:	4b5c      	ldr	r3, [pc, #368]	; (8011d7c <__ieee754_pow+0x25c>)
 8011c0a:	4598      	cmp	r8, r3
 8011c0c:	d132      	bne.n	8011c74 <__ieee754_pow+0x154>
 8011c0e:	f1b9 0f00 	cmp.w	r9, #0
 8011c12:	f280 8477 	bge.w	8012504 <__ieee754_pow+0x9e4>
 8011c16:	4959      	ldr	r1, [pc, #356]	; (8011d7c <__ieee754_pow+0x25c>)
 8011c18:	4632      	mov	r2, r6
 8011c1a:	463b      	mov	r3, r7
 8011c1c:	2000      	movs	r0, #0
 8011c1e:	f7ee fe4d 	bl	80008bc <__aeabi_ddiv>
 8011c22:	e79c      	b.n	8011b5e <__ieee754_pow+0x3e>
 8011c24:	2300      	movs	r3, #0
 8011c26:	9304      	str	r3, [sp, #16]
 8011c28:	2a00      	cmp	r2, #0
 8011c2a:	d13d      	bne.n	8011ca8 <__ieee754_pow+0x188>
 8011c2c:	4b51      	ldr	r3, [pc, #324]	; (8011d74 <__ieee754_pow+0x254>)
 8011c2e:	4598      	cmp	r8, r3
 8011c30:	d1ea      	bne.n	8011c08 <__ieee754_pow+0xe8>
 8011c32:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011c36:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011c3a:	ea53 030a 	orrs.w	r3, r3, sl
 8011c3e:	f000 8459 	beq.w	80124f4 <__ieee754_pow+0x9d4>
 8011c42:	4b4f      	ldr	r3, [pc, #316]	; (8011d80 <__ieee754_pow+0x260>)
 8011c44:	429c      	cmp	r4, r3
 8011c46:	dd08      	ble.n	8011c5a <__ieee754_pow+0x13a>
 8011c48:	f1b9 0f00 	cmp.w	r9, #0
 8011c4c:	f2c0 8456 	blt.w	80124fc <__ieee754_pow+0x9dc>
 8011c50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c54:	e783      	b.n	8011b5e <__ieee754_pow+0x3e>
 8011c56:	2302      	movs	r3, #2
 8011c58:	e7e5      	b.n	8011c26 <__ieee754_pow+0x106>
 8011c5a:	f1b9 0f00 	cmp.w	r9, #0
 8011c5e:	f04f 0000 	mov.w	r0, #0
 8011c62:	f04f 0100 	mov.w	r1, #0
 8011c66:	f6bf af7a 	bge.w	8011b5e <__ieee754_pow+0x3e>
 8011c6a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011c6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011c72:	e774      	b.n	8011b5e <__ieee754_pow+0x3e>
 8011c74:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011c78:	d106      	bne.n	8011c88 <__ieee754_pow+0x168>
 8011c7a:	4632      	mov	r2, r6
 8011c7c:	463b      	mov	r3, r7
 8011c7e:	4630      	mov	r0, r6
 8011c80:	4639      	mov	r1, r7
 8011c82:	f7ee fcf1 	bl	8000668 <__aeabi_dmul>
 8011c86:	e76a      	b.n	8011b5e <__ieee754_pow+0x3e>
 8011c88:	4b3e      	ldr	r3, [pc, #248]	; (8011d84 <__ieee754_pow+0x264>)
 8011c8a:	4599      	cmp	r9, r3
 8011c8c:	d10c      	bne.n	8011ca8 <__ieee754_pow+0x188>
 8011c8e:	2d00      	cmp	r5, #0
 8011c90:	db0a      	blt.n	8011ca8 <__ieee754_pow+0x188>
 8011c92:	ec47 6b10 	vmov	d0, r6, r7
 8011c96:	b009      	add	sp, #36	; 0x24
 8011c98:	ecbd 8b06 	vpop	{d8-d10}
 8011c9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ca0:	f000 bd20 	b.w	80126e4 <__ieee754_sqrt>
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	9304      	str	r3, [sp, #16]
 8011ca8:	ec47 6b10 	vmov	d0, r6, r7
 8011cac:	f000 fc62 	bl	8012574 <fabs>
 8011cb0:	ec51 0b10 	vmov	r0, r1, d0
 8011cb4:	f1ba 0f00 	cmp.w	sl, #0
 8011cb8:	d129      	bne.n	8011d0e <__ieee754_pow+0x1ee>
 8011cba:	b124      	cbz	r4, 8011cc6 <__ieee754_pow+0x1a6>
 8011cbc:	4b2f      	ldr	r3, [pc, #188]	; (8011d7c <__ieee754_pow+0x25c>)
 8011cbe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	d123      	bne.n	8011d0e <__ieee754_pow+0x1ee>
 8011cc6:	f1b9 0f00 	cmp.w	r9, #0
 8011cca:	da05      	bge.n	8011cd8 <__ieee754_pow+0x1b8>
 8011ccc:	4602      	mov	r2, r0
 8011cce:	460b      	mov	r3, r1
 8011cd0:	2000      	movs	r0, #0
 8011cd2:	492a      	ldr	r1, [pc, #168]	; (8011d7c <__ieee754_pow+0x25c>)
 8011cd4:	f7ee fdf2 	bl	80008bc <__aeabi_ddiv>
 8011cd8:	2d00      	cmp	r5, #0
 8011cda:	f6bf af40 	bge.w	8011b5e <__ieee754_pow+0x3e>
 8011cde:	9b04      	ldr	r3, [sp, #16]
 8011ce0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011ce4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011ce8:	431c      	orrs	r4, r3
 8011cea:	d108      	bne.n	8011cfe <__ieee754_pow+0x1de>
 8011cec:	4602      	mov	r2, r0
 8011cee:	460b      	mov	r3, r1
 8011cf0:	4610      	mov	r0, r2
 8011cf2:	4619      	mov	r1, r3
 8011cf4:	f7ee fb00 	bl	80002f8 <__aeabi_dsub>
 8011cf8:	4602      	mov	r2, r0
 8011cfa:	460b      	mov	r3, r1
 8011cfc:	e78f      	b.n	8011c1e <__ieee754_pow+0xfe>
 8011cfe:	9b04      	ldr	r3, [sp, #16]
 8011d00:	2b01      	cmp	r3, #1
 8011d02:	f47f af2c 	bne.w	8011b5e <__ieee754_pow+0x3e>
 8011d06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d0a:	4619      	mov	r1, r3
 8011d0c:	e727      	b.n	8011b5e <__ieee754_pow+0x3e>
 8011d0e:	0feb      	lsrs	r3, r5, #31
 8011d10:	3b01      	subs	r3, #1
 8011d12:	9306      	str	r3, [sp, #24]
 8011d14:	9a06      	ldr	r2, [sp, #24]
 8011d16:	9b04      	ldr	r3, [sp, #16]
 8011d18:	4313      	orrs	r3, r2
 8011d1a:	d102      	bne.n	8011d22 <__ieee754_pow+0x202>
 8011d1c:	4632      	mov	r2, r6
 8011d1e:	463b      	mov	r3, r7
 8011d20:	e7e6      	b.n	8011cf0 <__ieee754_pow+0x1d0>
 8011d22:	4b19      	ldr	r3, [pc, #100]	; (8011d88 <__ieee754_pow+0x268>)
 8011d24:	4598      	cmp	r8, r3
 8011d26:	f340 80fb 	ble.w	8011f20 <__ieee754_pow+0x400>
 8011d2a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011d2e:	4598      	cmp	r8, r3
 8011d30:	4b13      	ldr	r3, [pc, #76]	; (8011d80 <__ieee754_pow+0x260>)
 8011d32:	dd0c      	ble.n	8011d4e <__ieee754_pow+0x22e>
 8011d34:	429c      	cmp	r4, r3
 8011d36:	dc0f      	bgt.n	8011d58 <__ieee754_pow+0x238>
 8011d38:	f1b9 0f00 	cmp.w	r9, #0
 8011d3c:	da0f      	bge.n	8011d5e <__ieee754_pow+0x23e>
 8011d3e:	2000      	movs	r0, #0
 8011d40:	b009      	add	sp, #36	; 0x24
 8011d42:	ecbd 8b06 	vpop	{d8-d10}
 8011d46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d4a:	f000 bcc2 	b.w	80126d2 <__math_oflow>
 8011d4e:	429c      	cmp	r4, r3
 8011d50:	dbf2      	blt.n	8011d38 <__ieee754_pow+0x218>
 8011d52:	4b0a      	ldr	r3, [pc, #40]	; (8011d7c <__ieee754_pow+0x25c>)
 8011d54:	429c      	cmp	r4, r3
 8011d56:	dd19      	ble.n	8011d8c <__ieee754_pow+0x26c>
 8011d58:	f1b9 0f00 	cmp.w	r9, #0
 8011d5c:	dcef      	bgt.n	8011d3e <__ieee754_pow+0x21e>
 8011d5e:	2000      	movs	r0, #0
 8011d60:	b009      	add	sp, #36	; 0x24
 8011d62:	ecbd 8b06 	vpop	{d8-d10}
 8011d66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d6a:	f000 bca9 	b.w	80126c0 <__math_uflow>
 8011d6e:	bf00      	nop
 8011d70:	fff00000 	.word	0xfff00000
 8011d74:	7ff00000 	.word	0x7ff00000
 8011d78:	433fffff 	.word	0x433fffff
 8011d7c:	3ff00000 	.word	0x3ff00000
 8011d80:	3fefffff 	.word	0x3fefffff
 8011d84:	3fe00000 	.word	0x3fe00000
 8011d88:	41e00000 	.word	0x41e00000
 8011d8c:	4b60      	ldr	r3, [pc, #384]	; (8011f10 <__ieee754_pow+0x3f0>)
 8011d8e:	2200      	movs	r2, #0
 8011d90:	f7ee fab2 	bl	80002f8 <__aeabi_dsub>
 8011d94:	a354      	add	r3, pc, #336	; (adr r3, 8011ee8 <__ieee754_pow+0x3c8>)
 8011d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d9a:	4604      	mov	r4, r0
 8011d9c:	460d      	mov	r5, r1
 8011d9e:	f7ee fc63 	bl	8000668 <__aeabi_dmul>
 8011da2:	a353      	add	r3, pc, #332	; (adr r3, 8011ef0 <__ieee754_pow+0x3d0>)
 8011da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011da8:	4606      	mov	r6, r0
 8011daa:	460f      	mov	r7, r1
 8011dac:	4620      	mov	r0, r4
 8011dae:	4629      	mov	r1, r5
 8011db0:	f7ee fc5a 	bl	8000668 <__aeabi_dmul>
 8011db4:	4b57      	ldr	r3, [pc, #348]	; (8011f14 <__ieee754_pow+0x3f4>)
 8011db6:	4682      	mov	sl, r0
 8011db8:	468b      	mov	fp, r1
 8011dba:	2200      	movs	r2, #0
 8011dbc:	4620      	mov	r0, r4
 8011dbe:	4629      	mov	r1, r5
 8011dc0:	f7ee fc52 	bl	8000668 <__aeabi_dmul>
 8011dc4:	4602      	mov	r2, r0
 8011dc6:	460b      	mov	r3, r1
 8011dc8:	a14b      	add	r1, pc, #300	; (adr r1, 8011ef8 <__ieee754_pow+0x3d8>)
 8011dca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dce:	f7ee fa93 	bl	80002f8 <__aeabi_dsub>
 8011dd2:	4622      	mov	r2, r4
 8011dd4:	462b      	mov	r3, r5
 8011dd6:	f7ee fc47 	bl	8000668 <__aeabi_dmul>
 8011dda:	4602      	mov	r2, r0
 8011ddc:	460b      	mov	r3, r1
 8011dde:	2000      	movs	r0, #0
 8011de0:	494d      	ldr	r1, [pc, #308]	; (8011f18 <__ieee754_pow+0x3f8>)
 8011de2:	f7ee fa89 	bl	80002f8 <__aeabi_dsub>
 8011de6:	4622      	mov	r2, r4
 8011de8:	4680      	mov	r8, r0
 8011dea:	4689      	mov	r9, r1
 8011dec:	462b      	mov	r3, r5
 8011dee:	4620      	mov	r0, r4
 8011df0:	4629      	mov	r1, r5
 8011df2:	f7ee fc39 	bl	8000668 <__aeabi_dmul>
 8011df6:	4602      	mov	r2, r0
 8011df8:	460b      	mov	r3, r1
 8011dfa:	4640      	mov	r0, r8
 8011dfc:	4649      	mov	r1, r9
 8011dfe:	f7ee fc33 	bl	8000668 <__aeabi_dmul>
 8011e02:	a33f      	add	r3, pc, #252	; (adr r3, 8011f00 <__ieee754_pow+0x3e0>)
 8011e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e08:	f7ee fc2e 	bl	8000668 <__aeabi_dmul>
 8011e0c:	4602      	mov	r2, r0
 8011e0e:	460b      	mov	r3, r1
 8011e10:	4650      	mov	r0, sl
 8011e12:	4659      	mov	r1, fp
 8011e14:	f7ee fa70 	bl	80002f8 <__aeabi_dsub>
 8011e18:	4602      	mov	r2, r0
 8011e1a:	460b      	mov	r3, r1
 8011e1c:	4680      	mov	r8, r0
 8011e1e:	4689      	mov	r9, r1
 8011e20:	4630      	mov	r0, r6
 8011e22:	4639      	mov	r1, r7
 8011e24:	f7ee fa6a 	bl	80002fc <__adddf3>
 8011e28:	2000      	movs	r0, #0
 8011e2a:	4632      	mov	r2, r6
 8011e2c:	463b      	mov	r3, r7
 8011e2e:	4604      	mov	r4, r0
 8011e30:	460d      	mov	r5, r1
 8011e32:	f7ee fa61 	bl	80002f8 <__aeabi_dsub>
 8011e36:	4602      	mov	r2, r0
 8011e38:	460b      	mov	r3, r1
 8011e3a:	4640      	mov	r0, r8
 8011e3c:	4649      	mov	r1, r9
 8011e3e:	f7ee fa5b 	bl	80002f8 <__aeabi_dsub>
 8011e42:	9b04      	ldr	r3, [sp, #16]
 8011e44:	9a06      	ldr	r2, [sp, #24]
 8011e46:	3b01      	subs	r3, #1
 8011e48:	4313      	orrs	r3, r2
 8011e4a:	4682      	mov	sl, r0
 8011e4c:	468b      	mov	fp, r1
 8011e4e:	f040 81e7 	bne.w	8012220 <__ieee754_pow+0x700>
 8011e52:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011f08 <__ieee754_pow+0x3e8>
 8011e56:	eeb0 8a47 	vmov.f32	s16, s14
 8011e5a:	eef0 8a67 	vmov.f32	s17, s15
 8011e5e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011e62:	2600      	movs	r6, #0
 8011e64:	4632      	mov	r2, r6
 8011e66:	463b      	mov	r3, r7
 8011e68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011e6c:	f7ee fa44 	bl	80002f8 <__aeabi_dsub>
 8011e70:	4622      	mov	r2, r4
 8011e72:	462b      	mov	r3, r5
 8011e74:	f7ee fbf8 	bl	8000668 <__aeabi_dmul>
 8011e78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011e7c:	4680      	mov	r8, r0
 8011e7e:	4689      	mov	r9, r1
 8011e80:	4650      	mov	r0, sl
 8011e82:	4659      	mov	r1, fp
 8011e84:	f7ee fbf0 	bl	8000668 <__aeabi_dmul>
 8011e88:	4602      	mov	r2, r0
 8011e8a:	460b      	mov	r3, r1
 8011e8c:	4640      	mov	r0, r8
 8011e8e:	4649      	mov	r1, r9
 8011e90:	f7ee fa34 	bl	80002fc <__adddf3>
 8011e94:	4632      	mov	r2, r6
 8011e96:	463b      	mov	r3, r7
 8011e98:	4680      	mov	r8, r0
 8011e9a:	4689      	mov	r9, r1
 8011e9c:	4620      	mov	r0, r4
 8011e9e:	4629      	mov	r1, r5
 8011ea0:	f7ee fbe2 	bl	8000668 <__aeabi_dmul>
 8011ea4:	460b      	mov	r3, r1
 8011ea6:	4604      	mov	r4, r0
 8011ea8:	460d      	mov	r5, r1
 8011eaa:	4602      	mov	r2, r0
 8011eac:	4649      	mov	r1, r9
 8011eae:	4640      	mov	r0, r8
 8011eb0:	f7ee fa24 	bl	80002fc <__adddf3>
 8011eb4:	4b19      	ldr	r3, [pc, #100]	; (8011f1c <__ieee754_pow+0x3fc>)
 8011eb6:	4299      	cmp	r1, r3
 8011eb8:	ec45 4b19 	vmov	d9, r4, r5
 8011ebc:	4606      	mov	r6, r0
 8011ebe:	460f      	mov	r7, r1
 8011ec0:	468b      	mov	fp, r1
 8011ec2:	f340 82f0 	ble.w	80124a6 <__ieee754_pow+0x986>
 8011ec6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011eca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011ece:	4303      	orrs	r3, r0
 8011ed0:	f000 81e4 	beq.w	801229c <__ieee754_pow+0x77c>
 8011ed4:	ec51 0b18 	vmov	r0, r1, d8
 8011ed8:	2200      	movs	r2, #0
 8011eda:	2300      	movs	r3, #0
 8011edc:	f7ee fe36 	bl	8000b4c <__aeabi_dcmplt>
 8011ee0:	3800      	subs	r0, #0
 8011ee2:	bf18      	it	ne
 8011ee4:	2001      	movne	r0, #1
 8011ee6:	e72b      	b.n	8011d40 <__ieee754_pow+0x220>
 8011ee8:	60000000 	.word	0x60000000
 8011eec:	3ff71547 	.word	0x3ff71547
 8011ef0:	f85ddf44 	.word	0xf85ddf44
 8011ef4:	3e54ae0b 	.word	0x3e54ae0b
 8011ef8:	55555555 	.word	0x55555555
 8011efc:	3fd55555 	.word	0x3fd55555
 8011f00:	652b82fe 	.word	0x652b82fe
 8011f04:	3ff71547 	.word	0x3ff71547
 8011f08:	00000000 	.word	0x00000000
 8011f0c:	bff00000 	.word	0xbff00000
 8011f10:	3ff00000 	.word	0x3ff00000
 8011f14:	3fd00000 	.word	0x3fd00000
 8011f18:	3fe00000 	.word	0x3fe00000
 8011f1c:	408fffff 	.word	0x408fffff
 8011f20:	4bd5      	ldr	r3, [pc, #852]	; (8012278 <__ieee754_pow+0x758>)
 8011f22:	402b      	ands	r3, r5
 8011f24:	2200      	movs	r2, #0
 8011f26:	b92b      	cbnz	r3, 8011f34 <__ieee754_pow+0x414>
 8011f28:	4bd4      	ldr	r3, [pc, #848]	; (801227c <__ieee754_pow+0x75c>)
 8011f2a:	f7ee fb9d 	bl	8000668 <__aeabi_dmul>
 8011f2e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011f32:	460c      	mov	r4, r1
 8011f34:	1523      	asrs	r3, r4, #20
 8011f36:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011f3a:	4413      	add	r3, r2
 8011f3c:	9305      	str	r3, [sp, #20]
 8011f3e:	4bd0      	ldr	r3, [pc, #832]	; (8012280 <__ieee754_pow+0x760>)
 8011f40:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011f44:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011f48:	429c      	cmp	r4, r3
 8011f4a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011f4e:	dd08      	ble.n	8011f62 <__ieee754_pow+0x442>
 8011f50:	4bcc      	ldr	r3, [pc, #816]	; (8012284 <__ieee754_pow+0x764>)
 8011f52:	429c      	cmp	r4, r3
 8011f54:	f340 8162 	ble.w	801221c <__ieee754_pow+0x6fc>
 8011f58:	9b05      	ldr	r3, [sp, #20]
 8011f5a:	3301      	adds	r3, #1
 8011f5c:	9305      	str	r3, [sp, #20]
 8011f5e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011f62:	2400      	movs	r4, #0
 8011f64:	00e3      	lsls	r3, r4, #3
 8011f66:	9307      	str	r3, [sp, #28]
 8011f68:	4bc7      	ldr	r3, [pc, #796]	; (8012288 <__ieee754_pow+0x768>)
 8011f6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011f6e:	ed93 7b00 	vldr	d7, [r3]
 8011f72:	4629      	mov	r1, r5
 8011f74:	ec53 2b17 	vmov	r2, r3, d7
 8011f78:	eeb0 9a47 	vmov.f32	s18, s14
 8011f7c:	eef0 9a67 	vmov.f32	s19, s15
 8011f80:	4682      	mov	sl, r0
 8011f82:	f7ee f9b9 	bl	80002f8 <__aeabi_dsub>
 8011f86:	4652      	mov	r2, sl
 8011f88:	4606      	mov	r6, r0
 8011f8a:	460f      	mov	r7, r1
 8011f8c:	462b      	mov	r3, r5
 8011f8e:	ec51 0b19 	vmov	r0, r1, d9
 8011f92:	f7ee f9b3 	bl	80002fc <__adddf3>
 8011f96:	4602      	mov	r2, r0
 8011f98:	460b      	mov	r3, r1
 8011f9a:	2000      	movs	r0, #0
 8011f9c:	49bb      	ldr	r1, [pc, #748]	; (801228c <__ieee754_pow+0x76c>)
 8011f9e:	f7ee fc8d 	bl	80008bc <__aeabi_ddiv>
 8011fa2:	ec41 0b1a 	vmov	d10, r0, r1
 8011fa6:	4602      	mov	r2, r0
 8011fa8:	460b      	mov	r3, r1
 8011faa:	4630      	mov	r0, r6
 8011fac:	4639      	mov	r1, r7
 8011fae:	f7ee fb5b 	bl	8000668 <__aeabi_dmul>
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011fb8:	9302      	str	r3, [sp, #8]
 8011fba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011fbe:	46ab      	mov	fp, r5
 8011fc0:	106d      	asrs	r5, r5, #1
 8011fc2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011fc6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011fca:	ec41 0b18 	vmov	d8, r0, r1
 8011fce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	4640      	mov	r0, r8
 8011fd6:	4649      	mov	r1, r9
 8011fd8:	4614      	mov	r4, r2
 8011fda:	461d      	mov	r5, r3
 8011fdc:	f7ee fb44 	bl	8000668 <__aeabi_dmul>
 8011fe0:	4602      	mov	r2, r0
 8011fe2:	460b      	mov	r3, r1
 8011fe4:	4630      	mov	r0, r6
 8011fe6:	4639      	mov	r1, r7
 8011fe8:	f7ee f986 	bl	80002f8 <__aeabi_dsub>
 8011fec:	ec53 2b19 	vmov	r2, r3, d9
 8011ff0:	4606      	mov	r6, r0
 8011ff2:	460f      	mov	r7, r1
 8011ff4:	4620      	mov	r0, r4
 8011ff6:	4629      	mov	r1, r5
 8011ff8:	f7ee f97e 	bl	80002f8 <__aeabi_dsub>
 8011ffc:	4602      	mov	r2, r0
 8011ffe:	460b      	mov	r3, r1
 8012000:	4650      	mov	r0, sl
 8012002:	4659      	mov	r1, fp
 8012004:	f7ee f978 	bl	80002f8 <__aeabi_dsub>
 8012008:	4642      	mov	r2, r8
 801200a:	464b      	mov	r3, r9
 801200c:	f7ee fb2c 	bl	8000668 <__aeabi_dmul>
 8012010:	4602      	mov	r2, r0
 8012012:	460b      	mov	r3, r1
 8012014:	4630      	mov	r0, r6
 8012016:	4639      	mov	r1, r7
 8012018:	f7ee f96e 	bl	80002f8 <__aeabi_dsub>
 801201c:	ec53 2b1a 	vmov	r2, r3, d10
 8012020:	f7ee fb22 	bl	8000668 <__aeabi_dmul>
 8012024:	ec53 2b18 	vmov	r2, r3, d8
 8012028:	ec41 0b19 	vmov	d9, r0, r1
 801202c:	ec51 0b18 	vmov	r0, r1, d8
 8012030:	f7ee fb1a 	bl	8000668 <__aeabi_dmul>
 8012034:	a37c      	add	r3, pc, #496	; (adr r3, 8012228 <__ieee754_pow+0x708>)
 8012036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801203a:	4604      	mov	r4, r0
 801203c:	460d      	mov	r5, r1
 801203e:	f7ee fb13 	bl	8000668 <__aeabi_dmul>
 8012042:	a37b      	add	r3, pc, #492	; (adr r3, 8012230 <__ieee754_pow+0x710>)
 8012044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012048:	f7ee f958 	bl	80002fc <__adddf3>
 801204c:	4622      	mov	r2, r4
 801204e:	462b      	mov	r3, r5
 8012050:	f7ee fb0a 	bl	8000668 <__aeabi_dmul>
 8012054:	a378      	add	r3, pc, #480	; (adr r3, 8012238 <__ieee754_pow+0x718>)
 8012056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801205a:	f7ee f94f 	bl	80002fc <__adddf3>
 801205e:	4622      	mov	r2, r4
 8012060:	462b      	mov	r3, r5
 8012062:	f7ee fb01 	bl	8000668 <__aeabi_dmul>
 8012066:	a376      	add	r3, pc, #472	; (adr r3, 8012240 <__ieee754_pow+0x720>)
 8012068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801206c:	f7ee f946 	bl	80002fc <__adddf3>
 8012070:	4622      	mov	r2, r4
 8012072:	462b      	mov	r3, r5
 8012074:	f7ee faf8 	bl	8000668 <__aeabi_dmul>
 8012078:	a373      	add	r3, pc, #460	; (adr r3, 8012248 <__ieee754_pow+0x728>)
 801207a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801207e:	f7ee f93d 	bl	80002fc <__adddf3>
 8012082:	4622      	mov	r2, r4
 8012084:	462b      	mov	r3, r5
 8012086:	f7ee faef 	bl	8000668 <__aeabi_dmul>
 801208a:	a371      	add	r3, pc, #452	; (adr r3, 8012250 <__ieee754_pow+0x730>)
 801208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012090:	f7ee f934 	bl	80002fc <__adddf3>
 8012094:	4622      	mov	r2, r4
 8012096:	4606      	mov	r6, r0
 8012098:	460f      	mov	r7, r1
 801209a:	462b      	mov	r3, r5
 801209c:	4620      	mov	r0, r4
 801209e:	4629      	mov	r1, r5
 80120a0:	f7ee fae2 	bl	8000668 <__aeabi_dmul>
 80120a4:	4602      	mov	r2, r0
 80120a6:	460b      	mov	r3, r1
 80120a8:	4630      	mov	r0, r6
 80120aa:	4639      	mov	r1, r7
 80120ac:	f7ee fadc 	bl	8000668 <__aeabi_dmul>
 80120b0:	4642      	mov	r2, r8
 80120b2:	4604      	mov	r4, r0
 80120b4:	460d      	mov	r5, r1
 80120b6:	464b      	mov	r3, r9
 80120b8:	ec51 0b18 	vmov	r0, r1, d8
 80120bc:	f7ee f91e 	bl	80002fc <__adddf3>
 80120c0:	ec53 2b19 	vmov	r2, r3, d9
 80120c4:	f7ee fad0 	bl	8000668 <__aeabi_dmul>
 80120c8:	4622      	mov	r2, r4
 80120ca:	462b      	mov	r3, r5
 80120cc:	f7ee f916 	bl	80002fc <__adddf3>
 80120d0:	4642      	mov	r2, r8
 80120d2:	4682      	mov	sl, r0
 80120d4:	468b      	mov	fp, r1
 80120d6:	464b      	mov	r3, r9
 80120d8:	4640      	mov	r0, r8
 80120da:	4649      	mov	r1, r9
 80120dc:	f7ee fac4 	bl	8000668 <__aeabi_dmul>
 80120e0:	4b6b      	ldr	r3, [pc, #428]	; (8012290 <__ieee754_pow+0x770>)
 80120e2:	2200      	movs	r2, #0
 80120e4:	4606      	mov	r6, r0
 80120e6:	460f      	mov	r7, r1
 80120e8:	f7ee f908 	bl	80002fc <__adddf3>
 80120ec:	4652      	mov	r2, sl
 80120ee:	465b      	mov	r3, fp
 80120f0:	f7ee f904 	bl	80002fc <__adddf3>
 80120f4:	2000      	movs	r0, #0
 80120f6:	4604      	mov	r4, r0
 80120f8:	460d      	mov	r5, r1
 80120fa:	4602      	mov	r2, r0
 80120fc:	460b      	mov	r3, r1
 80120fe:	4640      	mov	r0, r8
 8012100:	4649      	mov	r1, r9
 8012102:	f7ee fab1 	bl	8000668 <__aeabi_dmul>
 8012106:	4b62      	ldr	r3, [pc, #392]	; (8012290 <__ieee754_pow+0x770>)
 8012108:	4680      	mov	r8, r0
 801210a:	4689      	mov	r9, r1
 801210c:	2200      	movs	r2, #0
 801210e:	4620      	mov	r0, r4
 8012110:	4629      	mov	r1, r5
 8012112:	f7ee f8f1 	bl	80002f8 <__aeabi_dsub>
 8012116:	4632      	mov	r2, r6
 8012118:	463b      	mov	r3, r7
 801211a:	f7ee f8ed 	bl	80002f8 <__aeabi_dsub>
 801211e:	4602      	mov	r2, r0
 8012120:	460b      	mov	r3, r1
 8012122:	4650      	mov	r0, sl
 8012124:	4659      	mov	r1, fp
 8012126:	f7ee f8e7 	bl	80002f8 <__aeabi_dsub>
 801212a:	ec53 2b18 	vmov	r2, r3, d8
 801212e:	f7ee fa9b 	bl	8000668 <__aeabi_dmul>
 8012132:	4622      	mov	r2, r4
 8012134:	4606      	mov	r6, r0
 8012136:	460f      	mov	r7, r1
 8012138:	462b      	mov	r3, r5
 801213a:	ec51 0b19 	vmov	r0, r1, d9
 801213e:	f7ee fa93 	bl	8000668 <__aeabi_dmul>
 8012142:	4602      	mov	r2, r0
 8012144:	460b      	mov	r3, r1
 8012146:	4630      	mov	r0, r6
 8012148:	4639      	mov	r1, r7
 801214a:	f7ee f8d7 	bl	80002fc <__adddf3>
 801214e:	4606      	mov	r6, r0
 8012150:	460f      	mov	r7, r1
 8012152:	4602      	mov	r2, r0
 8012154:	460b      	mov	r3, r1
 8012156:	4640      	mov	r0, r8
 8012158:	4649      	mov	r1, r9
 801215a:	f7ee f8cf 	bl	80002fc <__adddf3>
 801215e:	a33e      	add	r3, pc, #248	; (adr r3, 8012258 <__ieee754_pow+0x738>)
 8012160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012164:	2000      	movs	r0, #0
 8012166:	4604      	mov	r4, r0
 8012168:	460d      	mov	r5, r1
 801216a:	f7ee fa7d 	bl	8000668 <__aeabi_dmul>
 801216e:	4642      	mov	r2, r8
 8012170:	ec41 0b18 	vmov	d8, r0, r1
 8012174:	464b      	mov	r3, r9
 8012176:	4620      	mov	r0, r4
 8012178:	4629      	mov	r1, r5
 801217a:	f7ee f8bd 	bl	80002f8 <__aeabi_dsub>
 801217e:	4602      	mov	r2, r0
 8012180:	460b      	mov	r3, r1
 8012182:	4630      	mov	r0, r6
 8012184:	4639      	mov	r1, r7
 8012186:	f7ee f8b7 	bl	80002f8 <__aeabi_dsub>
 801218a:	a335      	add	r3, pc, #212	; (adr r3, 8012260 <__ieee754_pow+0x740>)
 801218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012190:	f7ee fa6a 	bl	8000668 <__aeabi_dmul>
 8012194:	a334      	add	r3, pc, #208	; (adr r3, 8012268 <__ieee754_pow+0x748>)
 8012196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801219a:	4606      	mov	r6, r0
 801219c:	460f      	mov	r7, r1
 801219e:	4620      	mov	r0, r4
 80121a0:	4629      	mov	r1, r5
 80121a2:	f7ee fa61 	bl	8000668 <__aeabi_dmul>
 80121a6:	4602      	mov	r2, r0
 80121a8:	460b      	mov	r3, r1
 80121aa:	4630      	mov	r0, r6
 80121ac:	4639      	mov	r1, r7
 80121ae:	f7ee f8a5 	bl	80002fc <__adddf3>
 80121b2:	9a07      	ldr	r2, [sp, #28]
 80121b4:	4b37      	ldr	r3, [pc, #220]	; (8012294 <__ieee754_pow+0x774>)
 80121b6:	4413      	add	r3, r2
 80121b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121bc:	f7ee f89e 	bl	80002fc <__adddf3>
 80121c0:	4682      	mov	sl, r0
 80121c2:	9805      	ldr	r0, [sp, #20]
 80121c4:	468b      	mov	fp, r1
 80121c6:	f7ee f9e5 	bl	8000594 <__aeabi_i2d>
 80121ca:	9a07      	ldr	r2, [sp, #28]
 80121cc:	4b32      	ldr	r3, [pc, #200]	; (8012298 <__ieee754_pow+0x778>)
 80121ce:	4413      	add	r3, r2
 80121d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80121d4:	4606      	mov	r6, r0
 80121d6:	460f      	mov	r7, r1
 80121d8:	4652      	mov	r2, sl
 80121da:	465b      	mov	r3, fp
 80121dc:	ec51 0b18 	vmov	r0, r1, d8
 80121e0:	f7ee f88c 	bl	80002fc <__adddf3>
 80121e4:	4642      	mov	r2, r8
 80121e6:	464b      	mov	r3, r9
 80121e8:	f7ee f888 	bl	80002fc <__adddf3>
 80121ec:	4632      	mov	r2, r6
 80121ee:	463b      	mov	r3, r7
 80121f0:	f7ee f884 	bl	80002fc <__adddf3>
 80121f4:	2000      	movs	r0, #0
 80121f6:	4632      	mov	r2, r6
 80121f8:	463b      	mov	r3, r7
 80121fa:	4604      	mov	r4, r0
 80121fc:	460d      	mov	r5, r1
 80121fe:	f7ee f87b 	bl	80002f8 <__aeabi_dsub>
 8012202:	4642      	mov	r2, r8
 8012204:	464b      	mov	r3, r9
 8012206:	f7ee f877 	bl	80002f8 <__aeabi_dsub>
 801220a:	ec53 2b18 	vmov	r2, r3, d8
 801220e:	f7ee f873 	bl	80002f8 <__aeabi_dsub>
 8012212:	4602      	mov	r2, r0
 8012214:	460b      	mov	r3, r1
 8012216:	4650      	mov	r0, sl
 8012218:	4659      	mov	r1, fp
 801221a:	e610      	b.n	8011e3e <__ieee754_pow+0x31e>
 801221c:	2401      	movs	r4, #1
 801221e:	e6a1      	b.n	8011f64 <__ieee754_pow+0x444>
 8012220:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012270 <__ieee754_pow+0x750>
 8012224:	e617      	b.n	8011e56 <__ieee754_pow+0x336>
 8012226:	bf00      	nop
 8012228:	4a454eef 	.word	0x4a454eef
 801222c:	3fca7e28 	.word	0x3fca7e28
 8012230:	93c9db65 	.word	0x93c9db65
 8012234:	3fcd864a 	.word	0x3fcd864a
 8012238:	a91d4101 	.word	0xa91d4101
 801223c:	3fd17460 	.word	0x3fd17460
 8012240:	518f264d 	.word	0x518f264d
 8012244:	3fd55555 	.word	0x3fd55555
 8012248:	db6fabff 	.word	0xdb6fabff
 801224c:	3fdb6db6 	.word	0x3fdb6db6
 8012250:	33333303 	.word	0x33333303
 8012254:	3fe33333 	.word	0x3fe33333
 8012258:	e0000000 	.word	0xe0000000
 801225c:	3feec709 	.word	0x3feec709
 8012260:	dc3a03fd 	.word	0xdc3a03fd
 8012264:	3feec709 	.word	0x3feec709
 8012268:	145b01f5 	.word	0x145b01f5
 801226c:	be3e2fe0 	.word	0xbe3e2fe0
 8012270:	00000000 	.word	0x00000000
 8012274:	3ff00000 	.word	0x3ff00000
 8012278:	7ff00000 	.word	0x7ff00000
 801227c:	43400000 	.word	0x43400000
 8012280:	0003988e 	.word	0x0003988e
 8012284:	000bb679 	.word	0x000bb679
 8012288:	08012ec0 	.word	0x08012ec0
 801228c:	3ff00000 	.word	0x3ff00000
 8012290:	40080000 	.word	0x40080000
 8012294:	08012ee0 	.word	0x08012ee0
 8012298:	08012ed0 	.word	0x08012ed0
 801229c:	a3b3      	add	r3, pc, #716	; (adr r3, 801256c <__ieee754_pow+0xa4c>)
 801229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a2:	4640      	mov	r0, r8
 80122a4:	4649      	mov	r1, r9
 80122a6:	f7ee f829 	bl	80002fc <__adddf3>
 80122aa:	4622      	mov	r2, r4
 80122ac:	ec41 0b1a 	vmov	d10, r0, r1
 80122b0:	462b      	mov	r3, r5
 80122b2:	4630      	mov	r0, r6
 80122b4:	4639      	mov	r1, r7
 80122b6:	f7ee f81f 	bl	80002f8 <__aeabi_dsub>
 80122ba:	4602      	mov	r2, r0
 80122bc:	460b      	mov	r3, r1
 80122be:	ec51 0b1a 	vmov	r0, r1, d10
 80122c2:	f7ee fc61 	bl	8000b88 <__aeabi_dcmpgt>
 80122c6:	2800      	cmp	r0, #0
 80122c8:	f47f ae04 	bne.w	8011ed4 <__ieee754_pow+0x3b4>
 80122cc:	4aa2      	ldr	r2, [pc, #648]	; (8012558 <__ieee754_pow+0xa38>)
 80122ce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80122d2:	4293      	cmp	r3, r2
 80122d4:	f340 8107 	ble.w	80124e6 <__ieee754_pow+0x9c6>
 80122d8:	151b      	asrs	r3, r3, #20
 80122da:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80122de:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80122e2:	fa4a fa03 	asr.w	sl, sl, r3
 80122e6:	44da      	add	sl, fp
 80122e8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80122ec:	489b      	ldr	r0, [pc, #620]	; (801255c <__ieee754_pow+0xa3c>)
 80122ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80122f2:	4108      	asrs	r0, r1
 80122f4:	ea00 030a 	and.w	r3, r0, sl
 80122f8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80122fc:	f1c1 0114 	rsb	r1, r1, #20
 8012300:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012304:	fa4a fa01 	asr.w	sl, sl, r1
 8012308:	f1bb 0f00 	cmp.w	fp, #0
 801230c:	f04f 0200 	mov.w	r2, #0
 8012310:	4620      	mov	r0, r4
 8012312:	4629      	mov	r1, r5
 8012314:	bfb8      	it	lt
 8012316:	f1ca 0a00 	rsblt	sl, sl, #0
 801231a:	f7ed ffed 	bl	80002f8 <__aeabi_dsub>
 801231e:	ec41 0b19 	vmov	d9, r0, r1
 8012322:	4642      	mov	r2, r8
 8012324:	464b      	mov	r3, r9
 8012326:	ec51 0b19 	vmov	r0, r1, d9
 801232a:	f7ed ffe7 	bl	80002fc <__adddf3>
 801232e:	a37a      	add	r3, pc, #488	; (adr r3, 8012518 <__ieee754_pow+0x9f8>)
 8012330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012334:	2000      	movs	r0, #0
 8012336:	4604      	mov	r4, r0
 8012338:	460d      	mov	r5, r1
 801233a:	f7ee f995 	bl	8000668 <__aeabi_dmul>
 801233e:	ec53 2b19 	vmov	r2, r3, d9
 8012342:	4606      	mov	r6, r0
 8012344:	460f      	mov	r7, r1
 8012346:	4620      	mov	r0, r4
 8012348:	4629      	mov	r1, r5
 801234a:	f7ed ffd5 	bl	80002f8 <__aeabi_dsub>
 801234e:	4602      	mov	r2, r0
 8012350:	460b      	mov	r3, r1
 8012352:	4640      	mov	r0, r8
 8012354:	4649      	mov	r1, r9
 8012356:	f7ed ffcf 	bl	80002f8 <__aeabi_dsub>
 801235a:	a371      	add	r3, pc, #452	; (adr r3, 8012520 <__ieee754_pow+0xa00>)
 801235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012360:	f7ee f982 	bl	8000668 <__aeabi_dmul>
 8012364:	a370      	add	r3, pc, #448	; (adr r3, 8012528 <__ieee754_pow+0xa08>)
 8012366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801236a:	4680      	mov	r8, r0
 801236c:	4689      	mov	r9, r1
 801236e:	4620      	mov	r0, r4
 8012370:	4629      	mov	r1, r5
 8012372:	f7ee f979 	bl	8000668 <__aeabi_dmul>
 8012376:	4602      	mov	r2, r0
 8012378:	460b      	mov	r3, r1
 801237a:	4640      	mov	r0, r8
 801237c:	4649      	mov	r1, r9
 801237e:	f7ed ffbd 	bl	80002fc <__adddf3>
 8012382:	4604      	mov	r4, r0
 8012384:	460d      	mov	r5, r1
 8012386:	4602      	mov	r2, r0
 8012388:	460b      	mov	r3, r1
 801238a:	4630      	mov	r0, r6
 801238c:	4639      	mov	r1, r7
 801238e:	f7ed ffb5 	bl	80002fc <__adddf3>
 8012392:	4632      	mov	r2, r6
 8012394:	463b      	mov	r3, r7
 8012396:	4680      	mov	r8, r0
 8012398:	4689      	mov	r9, r1
 801239a:	f7ed ffad 	bl	80002f8 <__aeabi_dsub>
 801239e:	4602      	mov	r2, r0
 80123a0:	460b      	mov	r3, r1
 80123a2:	4620      	mov	r0, r4
 80123a4:	4629      	mov	r1, r5
 80123a6:	f7ed ffa7 	bl	80002f8 <__aeabi_dsub>
 80123aa:	4642      	mov	r2, r8
 80123ac:	4606      	mov	r6, r0
 80123ae:	460f      	mov	r7, r1
 80123b0:	464b      	mov	r3, r9
 80123b2:	4640      	mov	r0, r8
 80123b4:	4649      	mov	r1, r9
 80123b6:	f7ee f957 	bl	8000668 <__aeabi_dmul>
 80123ba:	a35d      	add	r3, pc, #372	; (adr r3, 8012530 <__ieee754_pow+0xa10>)
 80123bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c0:	4604      	mov	r4, r0
 80123c2:	460d      	mov	r5, r1
 80123c4:	f7ee f950 	bl	8000668 <__aeabi_dmul>
 80123c8:	a35b      	add	r3, pc, #364	; (adr r3, 8012538 <__ieee754_pow+0xa18>)
 80123ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ce:	f7ed ff93 	bl	80002f8 <__aeabi_dsub>
 80123d2:	4622      	mov	r2, r4
 80123d4:	462b      	mov	r3, r5
 80123d6:	f7ee f947 	bl	8000668 <__aeabi_dmul>
 80123da:	a359      	add	r3, pc, #356	; (adr r3, 8012540 <__ieee754_pow+0xa20>)
 80123dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e0:	f7ed ff8c 	bl	80002fc <__adddf3>
 80123e4:	4622      	mov	r2, r4
 80123e6:	462b      	mov	r3, r5
 80123e8:	f7ee f93e 	bl	8000668 <__aeabi_dmul>
 80123ec:	a356      	add	r3, pc, #344	; (adr r3, 8012548 <__ieee754_pow+0xa28>)
 80123ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123f2:	f7ed ff81 	bl	80002f8 <__aeabi_dsub>
 80123f6:	4622      	mov	r2, r4
 80123f8:	462b      	mov	r3, r5
 80123fa:	f7ee f935 	bl	8000668 <__aeabi_dmul>
 80123fe:	a354      	add	r3, pc, #336	; (adr r3, 8012550 <__ieee754_pow+0xa30>)
 8012400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012404:	f7ed ff7a 	bl	80002fc <__adddf3>
 8012408:	4622      	mov	r2, r4
 801240a:	462b      	mov	r3, r5
 801240c:	f7ee f92c 	bl	8000668 <__aeabi_dmul>
 8012410:	4602      	mov	r2, r0
 8012412:	460b      	mov	r3, r1
 8012414:	4640      	mov	r0, r8
 8012416:	4649      	mov	r1, r9
 8012418:	f7ed ff6e 	bl	80002f8 <__aeabi_dsub>
 801241c:	4604      	mov	r4, r0
 801241e:	460d      	mov	r5, r1
 8012420:	4602      	mov	r2, r0
 8012422:	460b      	mov	r3, r1
 8012424:	4640      	mov	r0, r8
 8012426:	4649      	mov	r1, r9
 8012428:	f7ee f91e 	bl	8000668 <__aeabi_dmul>
 801242c:	2200      	movs	r2, #0
 801242e:	ec41 0b19 	vmov	d9, r0, r1
 8012432:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012436:	4620      	mov	r0, r4
 8012438:	4629      	mov	r1, r5
 801243a:	f7ed ff5d 	bl	80002f8 <__aeabi_dsub>
 801243e:	4602      	mov	r2, r0
 8012440:	460b      	mov	r3, r1
 8012442:	ec51 0b19 	vmov	r0, r1, d9
 8012446:	f7ee fa39 	bl	80008bc <__aeabi_ddiv>
 801244a:	4632      	mov	r2, r6
 801244c:	4604      	mov	r4, r0
 801244e:	460d      	mov	r5, r1
 8012450:	463b      	mov	r3, r7
 8012452:	4640      	mov	r0, r8
 8012454:	4649      	mov	r1, r9
 8012456:	f7ee f907 	bl	8000668 <__aeabi_dmul>
 801245a:	4632      	mov	r2, r6
 801245c:	463b      	mov	r3, r7
 801245e:	f7ed ff4d 	bl	80002fc <__adddf3>
 8012462:	4602      	mov	r2, r0
 8012464:	460b      	mov	r3, r1
 8012466:	4620      	mov	r0, r4
 8012468:	4629      	mov	r1, r5
 801246a:	f7ed ff45 	bl	80002f8 <__aeabi_dsub>
 801246e:	4642      	mov	r2, r8
 8012470:	464b      	mov	r3, r9
 8012472:	f7ed ff41 	bl	80002f8 <__aeabi_dsub>
 8012476:	460b      	mov	r3, r1
 8012478:	4602      	mov	r2, r0
 801247a:	4939      	ldr	r1, [pc, #228]	; (8012560 <__ieee754_pow+0xa40>)
 801247c:	2000      	movs	r0, #0
 801247e:	f7ed ff3b 	bl	80002f8 <__aeabi_dsub>
 8012482:	ec41 0b10 	vmov	d0, r0, r1
 8012486:	ee10 3a90 	vmov	r3, s1
 801248a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801248e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012492:	da2b      	bge.n	80124ec <__ieee754_pow+0x9cc>
 8012494:	4650      	mov	r0, sl
 8012496:	f000 f877 	bl	8012588 <scalbn>
 801249a:	ec51 0b10 	vmov	r0, r1, d0
 801249e:	ec53 2b18 	vmov	r2, r3, d8
 80124a2:	f7ff bbee 	b.w	8011c82 <__ieee754_pow+0x162>
 80124a6:	4b2f      	ldr	r3, [pc, #188]	; (8012564 <__ieee754_pow+0xa44>)
 80124a8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80124ac:	429e      	cmp	r6, r3
 80124ae:	f77f af0d 	ble.w	80122cc <__ieee754_pow+0x7ac>
 80124b2:	4b2d      	ldr	r3, [pc, #180]	; (8012568 <__ieee754_pow+0xa48>)
 80124b4:	440b      	add	r3, r1
 80124b6:	4303      	orrs	r3, r0
 80124b8:	d009      	beq.n	80124ce <__ieee754_pow+0x9ae>
 80124ba:	ec51 0b18 	vmov	r0, r1, d8
 80124be:	2200      	movs	r2, #0
 80124c0:	2300      	movs	r3, #0
 80124c2:	f7ee fb43 	bl	8000b4c <__aeabi_dcmplt>
 80124c6:	3800      	subs	r0, #0
 80124c8:	bf18      	it	ne
 80124ca:	2001      	movne	r0, #1
 80124cc:	e448      	b.n	8011d60 <__ieee754_pow+0x240>
 80124ce:	4622      	mov	r2, r4
 80124d0:	462b      	mov	r3, r5
 80124d2:	f7ed ff11 	bl	80002f8 <__aeabi_dsub>
 80124d6:	4642      	mov	r2, r8
 80124d8:	464b      	mov	r3, r9
 80124da:	f7ee fb4b 	bl	8000b74 <__aeabi_dcmpge>
 80124de:	2800      	cmp	r0, #0
 80124e0:	f43f aef4 	beq.w	80122cc <__ieee754_pow+0x7ac>
 80124e4:	e7e9      	b.n	80124ba <__ieee754_pow+0x99a>
 80124e6:	f04f 0a00 	mov.w	sl, #0
 80124ea:	e71a      	b.n	8012322 <__ieee754_pow+0x802>
 80124ec:	ec51 0b10 	vmov	r0, r1, d0
 80124f0:	4619      	mov	r1, r3
 80124f2:	e7d4      	b.n	801249e <__ieee754_pow+0x97e>
 80124f4:	491a      	ldr	r1, [pc, #104]	; (8012560 <__ieee754_pow+0xa40>)
 80124f6:	2000      	movs	r0, #0
 80124f8:	f7ff bb31 	b.w	8011b5e <__ieee754_pow+0x3e>
 80124fc:	2000      	movs	r0, #0
 80124fe:	2100      	movs	r1, #0
 8012500:	f7ff bb2d 	b.w	8011b5e <__ieee754_pow+0x3e>
 8012504:	4630      	mov	r0, r6
 8012506:	4639      	mov	r1, r7
 8012508:	f7ff bb29 	b.w	8011b5e <__ieee754_pow+0x3e>
 801250c:	9204      	str	r2, [sp, #16]
 801250e:	f7ff bb7b 	b.w	8011c08 <__ieee754_pow+0xe8>
 8012512:	2300      	movs	r3, #0
 8012514:	f7ff bb65 	b.w	8011be2 <__ieee754_pow+0xc2>
 8012518:	00000000 	.word	0x00000000
 801251c:	3fe62e43 	.word	0x3fe62e43
 8012520:	fefa39ef 	.word	0xfefa39ef
 8012524:	3fe62e42 	.word	0x3fe62e42
 8012528:	0ca86c39 	.word	0x0ca86c39
 801252c:	be205c61 	.word	0xbe205c61
 8012530:	72bea4d0 	.word	0x72bea4d0
 8012534:	3e663769 	.word	0x3e663769
 8012538:	c5d26bf1 	.word	0xc5d26bf1
 801253c:	3ebbbd41 	.word	0x3ebbbd41
 8012540:	af25de2c 	.word	0xaf25de2c
 8012544:	3f11566a 	.word	0x3f11566a
 8012548:	16bebd93 	.word	0x16bebd93
 801254c:	3f66c16c 	.word	0x3f66c16c
 8012550:	5555553e 	.word	0x5555553e
 8012554:	3fc55555 	.word	0x3fc55555
 8012558:	3fe00000 	.word	0x3fe00000
 801255c:	fff00000 	.word	0xfff00000
 8012560:	3ff00000 	.word	0x3ff00000
 8012564:	4090cbff 	.word	0x4090cbff
 8012568:	3f6f3400 	.word	0x3f6f3400
 801256c:	652b82fe 	.word	0x652b82fe
 8012570:	3c971547 	.word	0x3c971547

08012574 <fabs>:
 8012574:	ec51 0b10 	vmov	r0, r1, d0
 8012578:	ee10 2a10 	vmov	r2, s0
 801257c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012580:	ec43 2b10 	vmov	d0, r2, r3
 8012584:	4770      	bx	lr
	...

08012588 <scalbn>:
 8012588:	b570      	push	{r4, r5, r6, lr}
 801258a:	ec55 4b10 	vmov	r4, r5, d0
 801258e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8012592:	4606      	mov	r6, r0
 8012594:	462b      	mov	r3, r5
 8012596:	b999      	cbnz	r1, 80125c0 <scalbn+0x38>
 8012598:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801259c:	4323      	orrs	r3, r4
 801259e:	d03f      	beq.n	8012620 <scalbn+0x98>
 80125a0:	4b35      	ldr	r3, [pc, #212]	; (8012678 <scalbn+0xf0>)
 80125a2:	4629      	mov	r1, r5
 80125a4:	ee10 0a10 	vmov	r0, s0
 80125a8:	2200      	movs	r2, #0
 80125aa:	f7ee f85d 	bl	8000668 <__aeabi_dmul>
 80125ae:	4b33      	ldr	r3, [pc, #204]	; (801267c <scalbn+0xf4>)
 80125b0:	429e      	cmp	r6, r3
 80125b2:	4604      	mov	r4, r0
 80125b4:	460d      	mov	r5, r1
 80125b6:	da10      	bge.n	80125da <scalbn+0x52>
 80125b8:	a327      	add	r3, pc, #156	; (adr r3, 8012658 <scalbn+0xd0>)
 80125ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125be:	e01f      	b.n	8012600 <scalbn+0x78>
 80125c0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80125c4:	4291      	cmp	r1, r2
 80125c6:	d10c      	bne.n	80125e2 <scalbn+0x5a>
 80125c8:	ee10 2a10 	vmov	r2, s0
 80125cc:	4620      	mov	r0, r4
 80125ce:	4629      	mov	r1, r5
 80125d0:	f7ed fe94 	bl	80002fc <__adddf3>
 80125d4:	4604      	mov	r4, r0
 80125d6:	460d      	mov	r5, r1
 80125d8:	e022      	b.n	8012620 <scalbn+0x98>
 80125da:	460b      	mov	r3, r1
 80125dc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80125e0:	3936      	subs	r1, #54	; 0x36
 80125e2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80125e6:	4296      	cmp	r6, r2
 80125e8:	dd0d      	ble.n	8012606 <scalbn+0x7e>
 80125ea:	2d00      	cmp	r5, #0
 80125ec:	a11c      	add	r1, pc, #112	; (adr r1, 8012660 <scalbn+0xd8>)
 80125ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125f2:	da02      	bge.n	80125fa <scalbn+0x72>
 80125f4:	a11c      	add	r1, pc, #112	; (adr r1, 8012668 <scalbn+0xe0>)
 80125f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125fa:	a319      	add	r3, pc, #100	; (adr r3, 8012660 <scalbn+0xd8>)
 80125fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012600:	f7ee f832 	bl	8000668 <__aeabi_dmul>
 8012604:	e7e6      	b.n	80125d4 <scalbn+0x4c>
 8012606:	1872      	adds	r2, r6, r1
 8012608:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801260c:	428a      	cmp	r2, r1
 801260e:	dcec      	bgt.n	80125ea <scalbn+0x62>
 8012610:	2a00      	cmp	r2, #0
 8012612:	dd08      	ble.n	8012626 <scalbn+0x9e>
 8012614:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012618:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801261c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012620:	ec45 4b10 	vmov	d0, r4, r5
 8012624:	bd70      	pop	{r4, r5, r6, pc}
 8012626:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801262a:	da08      	bge.n	801263e <scalbn+0xb6>
 801262c:	2d00      	cmp	r5, #0
 801262e:	a10a      	add	r1, pc, #40	; (adr r1, 8012658 <scalbn+0xd0>)
 8012630:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012634:	dac0      	bge.n	80125b8 <scalbn+0x30>
 8012636:	a10e      	add	r1, pc, #56	; (adr r1, 8012670 <scalbn+0xe8>)
 8012638:	e9d1 0100 	ldrd	r0, r1, [r1]
 801263c:	e7bc      	b.n	80125b8 <scalbn+0x30>
 801263e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012642:	3236      	adds	r2, #54	; 0x36
 8012644:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012648:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801264c:	4620      	mov	r0, r4
 801264e:	4b0c      	ldr	r3, [pc, #48]	; (8012680 <scalbn+0xf8>)
 8012650:	2200      	movs	r2, #0
 8012652:	e7d5      	b.n	8012600 <scalbn+0x78>
 8012654:	f3af 8000 	nop.w
 8012658:	c2f8f359 	.word	0xc2f8f359
 801265c:	01a56e1f 	.word	0x01a56e1f
 8012660:	8800759c 	.word	0x8800759c
 8012664:	7e37e43c 	.word	0x7e37e43c
 8012668:	8800759c 	.word	0x8800759c
 801266c:	fe37e43c 	.word	0xfe37e43c
 8012670:	c2f8f359 	.word	0xc2f8f359
 8012674:	81a56e1f 	.word	0x81a56e1f
 8012678:	43500000 	.word	0x43500000
 801267c:	ffff3cb0 	.word	0xffff3cb0
 8012680:	3c900000 	.word	0x3c900000

08012684 <with_errno>:
 8012684:	b570      	push	{r4, r5, r6, lr}
 8012686:	4604      	mov	r4, r0
 8012688:	460d      	mov	r5, r1
 801268a:	4616      	mov	r6, r2
 801268c:	f7fd f924 	bl	800f8d8 <__errno>
 8012690:	4629      	mov	r1, r5
 8012692:	6006      	str	r6, [r0, #0]
 8012694:	4620      	mov	r0, r4
 8012696:	bd70      	pop	{r4, r5, r6, pc}

08012698 <xflow>:
 8012698:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801269a:	4614      	mov	r4, r2
 801269c:	461d      	mov	r5, r3
 801269e:	b108      	cbz	r0, 80126a4 <xflow+0xc>
 80126a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80126a4:	e9cd 2300 	strd	r2, r3, [sp]
 80126a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80126ac:	4620      	mov	r0, r4
 80126ae:	4629      	mov	r1, r5
 80126b0:	f7ed ffda 	bl	8000668 <__aeabi_dmul>
 80126b4:	2222      	movs	r2, #34	; 0x22
 80126b6:	b003      	add	sp, #12
 80126b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80126bc:	f7ff bfe2 	b.w	8012684 <with_errno>

080126c0 <__math_uflow>:
 80126c0:	b508      	push	{r3, lr}
 80126c2:	2200      	movs	r2, #0
 80126c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80126c8:	f7ff ffe6 	bl	8012698 <xflow>
 80126cc:	ec41 0b10 	vmov	d0, r0, r1
 80126d0:	bd08      	pop	{r3, pc}

080126d2 <__math_oflow>:
 80126d2:	b508      	push	{r3, lr}
 80126d4:	2200      	movs	r2, #0
 80126d6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80126da:	f7ff ffdd 	bl	8012698 <xflow>
 80126de:	ec41 0b10 	vmov	d0, r0, r1
 80126e2:	bd08      	pop	{r3, pc}

080126e4 <__ieee754_sqrt>:
 80126e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126e8:	ec55 4b10 	vmov	r4, r5, d0
 80126ec:	4e67      	ldr	r6, [pc, #412]	; (801288c <__ieee754_sqrt+0x1a8>)
 80126ee:	43ae      	bics	r6, r5
 80126f0:	ee10 0a10 	vmov	r0, s0
 80126f4:	ee10 2a10 	vmov	r2, s0
 80126f8:	4629      	mov	r1, r5
 80126fa:	462b      	mov	r3, r5
 80126fc:	d10d      	bne.n	801271a <__ieee754_sqrt+0x36>
 80126fe:	f7ed ffb3 	bl	8000668 <__aeabi_dmul>
 8012702:	4602      	mov	r2, r0
 8012704:	460b      	mov	r3, r1
 8012706:	4620      	mov	r0, r4
 8012708:	4629      	mov	r1, r5
 801270a:	f7ed fdf7 	bl	80002fc <__adddf3>
 801270e:	4604      	mov	r4, r0
 8012710:	460d      	mov	r5, r1
 8012712:	ec45 4b10 	vmov	d0, r4, r5
 8012716:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801271a:	2d00      	cmp	r5, #0
 801271c:	dc0b      	bgt.n	8012736 <__ieee754_sqrt+0x52>
 801271e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012722:	4326      	orrs	r6, r4
 8012724:	d0f5      	beq.n	8012712 <__ieee754_sqrt+0x2e>
 8012726:	b135      	cbz	r5, 8012736 <__ieee754_sqrt+0x52>
 8012728:	f7ed fde6 	bl	80002f8 <__aeabi_dsub>
 801272c:	4602      	mov	r2, r0
 801272e:	460b      	mov	r3, r1
 8012730:	f7ee f8c4 	bl	80008bc <__aeabi_ddiv>
 8012734:	e7eb      	b.n	801270e <__ieee754_sqrt+0x2a>
 8012736:	1509      	asrs	r1, r1, #20
 8012738:	f000 808d 	beq.w	8012856 <__ieee754_sqrt+0x172>
 801273c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012740:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8012744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012748:	07c9      	lsls	r1, r1, #31
 801274a:	bf5c      	itt	pl
 801274c:	005b      	lslpl	r3, r3, #1
 801274e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8012752:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012756:	bf58      	it	pl
 8012758:	0052      	lslpl	r2, r2, #1
 801275a:	2500      	movs	r5, #0
 801275c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012760:	1076      	asrs	r6, r6, #1
 8012762:	0052      	lsls	r2, r2, #1
 8012764:	f04f 0e16 	mov.w	lr, #22
 8012768:	46ac      	mov	ip, r5
 801276a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801276e:	eb0c 0001 	add.w	r0, ip, r1
 8012772:	4298      	cmp	r0, r3
 8012774:	bfde      	ittt	le
 8012776:	1a1b      	suble	r3, r3, r0
 8012778:	eb00 0c01 	addle.w	ip, r0, r1
 801277c:	186d      	addle	r5, r5, r1
 801277e:	005b      	lsls	r3, r3, #1
 8012780:	f1be 0e01 	subs.w	lr, lr, #1
 8012784:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012788:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801278c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012790:	d1ed      	bne.n	801276e <__ieee754_sqrt+0x8a>
 8012792:	4674      	mov	r4, lr
 8012794:	2720      	movs	r7, #32
 8012796:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801279a:	4563      	cmp	r3, ip
 801279c:	eb01 000e 	add.w	r0, r1, lr
 80127a0:	dc02      	bgt.n	80127a8 <__ieee754_sqrt+0xc4>
 80127a2:	d113      	bne.n	80127cc <__ieee754_sqrt+0xe8>
 80127a4:	4290      	cmp	r0, r2
 80127a6:	d811      	bhi.n	80127cc <__ieee754_sqrt+0xe8>
 80127a8:	2800      	cmp	r0, #0
 80127aa:	eb00 0e01 	add.w	lr, r0, r1
 80127ae:	da57      	bge.n	8012860 <__ieee754_sqrt+0x17c>
 80127b0:	f1be 0f00 	cmp.w	lr, #0
 80127b4:	db54      	blt.n	8012860 <__ieee754_sqrt+0x17c>
 80127b6:	f10c 0801 	add.w	r8, ip, #1
 80127ba:	eba3 030c 	sub.w	r3, r3, ip
 80127be:	4290      	cmp	r0, r2
 80127c0:	bf88      	it	hi
 80127c2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80127c6:	1a12      	subs	r2, r2, r0
 80127c8:	440c      	add	r4, r1
 80127ca:	46c4      	mov	ip, r8
 80127cc:	005b      	lsls	r3, r3, #1
 80127ce:	3f01      	subs	r7, #1
 80127d0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80127d4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80127d8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80127dc:	d1dd      	bne.n	801279a <__ieee754_sqrt+0xb6>
 80127de:	4313      	orrs	r3, r2
 80127e0:	d01b      	beq.n	801281a <__ieee754_sqrt+0x136>
 80127e2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8012890 <__ieee754_sqrt+0x1ac>
 80127e6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8012894 <__ieee754_sqrt+0x1b0>
 80127ea:	e9da 0100 	ldrd	r0, r1, [sl]
 80127ee:	e9db 2300 	ldrd	r2, r3, [fp]
 80127f2:	f7ed fd81 	bl	80002f8 <__aeabi_dsub>
 80127f6:	e9da 8900 	ldrd	r8, r9, [sl]
 80127fa:	4602      	mov	r2, r0
 80127fc:	460b      	mov	r3, r1
 80127fe:	4640      	mov	r0, r8
 8012800:	4649      	mov	r1, r9
 8012802:	f7ee f9ad 	bl	8000b60 <__aeabi_dcmple>
 8012806:	b140      	cbz	r0, 801281a <__ieee754_sqrt+0x136>
 8012808:	f1b4 3fff 	cmp.w	r4, #4294967295
 801280c:	e9da 0100 	ldrd	r0, r1, [sl]
 8012810:	e9db 2300 	ldrd	r2, r3, [fp]
 8012814:	d126      	bne.n	8012864 <__ieee754_sqrt+0x180>
 8012816:	3501      	adds	r5, #1
 8012818:	463c      	mov	r4, r7
 801281a:	106a      	asrs	r2, r5, #1
 801281c:	0863      	lsrs	r3, r4, #1
 801281e:	07e9      	lsls	r1, r5, #31
 8012820:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012824:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8012828:	bf48      	it	mi
 801282a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801282e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8012832:	461c      	mov	r4, r3
 8012834:	e76d      	b.n	8012712 <__ieee754_sqrt+0x2e>
 8012836:	0ad3      	lsrs	r3, r2, #11
 8012838:	3815      	subs	r0, #21
 801283a:	0552      	lsls	r2, r2, #21
 801283c:	2b00      	cmp	r3, #0
 801283e:	d0fa      	beq.n	8012836 <__ieee754_sqrt+0x152>
 8012840:	02dc      	lsls	r4, r3, #11
 8012842:	d50a      	bpl.n	801285a <__ieee754_sqrt+0x176>
 8012844:	f1c1 0420 	rsb	r4, r1, #32
 8012848:	fa22 f404 	lsr.w	r4, r2, r4
 801284c:	1e4d      	subs	r5, r1, #1
 801284e:	408a      	lsls	r2, r1
 8012850:	4323      	orrs	r3, r4
 8012852:	1b41      	subs	r1, r0, r5
 8012854:	e772      	b.n	801273c <__ieee754_sqrt+0x58>
 8012856:	4608      	mov	r0, r1
 8012858:	e7f0      	b.n	801283c <__ieee754_sqrt+0x158>
 801285a:	005b      	lsls	r3, r3, #1
 801285c:	3101      	adds	r1, #1
 801285e:	e7ef      	b.n	8012840 <__ieee754_sqrt+0x15c>
 8012860:	46e0      	mov	r8, ip
 8012862:	e7aa      	b.n	80127ba <__ieee754_sqrt+0xd6>
 8012864:	f7ed fd4a 	bl	80002fc <__adddf3>
 8012868:	e9da 8900 	ldrd	r8, r9, [sl]
 801286c:	4602      	mov	r2, r0
 801286e:	460b      	mov	r3, r1
 8012870:	4640      	mov	r0, r8
 8012872:	4649      	mov	r1, r9
 8012874:	f7ee f96a 	bl	8000b4c <__aeabi_dcmplt>
 8012878:	b120      	cbz	r0, 8012884 <__ieee754_sqrt+0x1a0>
 801287a:	1ca0      	adds	r0, r4, #2
 801287c:	bf08      	it	eq
 801287e:	3501      	addeq	r5, #1
 8012880:	3402      	adds	r4, #2
 8012882:	e7ca      	b.n	801281a <__ieee754_sqrt+0x136>
 8012884:	3401      	adds	r4, #1
 8012886:	f024 0401 	bic.w	r4, r4, #1
 801288a:	e7c6      	b.n	801281a <__ieee754_sqrt+0x136>
 801288c:	7ff00000 	.word	0x7ff00000
 8012890:	20000358 	.word	0x20000358
 8012894:	20000360 	.word	0x20000360

08012898 <_init>:
 8012898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801289a:	bf00      	nop
 801289c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801289e:	bc08      	pop	{r3}
 80128a0:	469e      	mov	lr, r3
 80128a2:	4770      	bx	lr

080128a4 <_fini>:
 80128a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128a6:	bf00      	nop
 80128a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128aa:	bc08      	pop	{r3}
 80128ac:	469e      	mov	lr, r3
 80128ae:	4770      	bx	lr
