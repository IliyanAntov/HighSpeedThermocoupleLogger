
HS_thermocouple_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a80  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  08011c60  08011c60  00021c60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012240  08012240  00030368  2**0
                  CONTENTS
  4 .ARM          00000000  08012240  08012240  00030368  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012240  08012240  00030368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012240  08012240  00022240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012244  08012244  00022244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  08012248  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005e08  20000368  080125b0  00030368  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  20006170  080125b0  00036170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030368  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030398  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020280  00000000  00000000  000303db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047ee  00000000  00000000  0005065b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cd0  00000000  00000000  00054e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001618  00000000  00000000  00056b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cd9d  00000000  00000000  00058138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023909  00000000  00000000  00084ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00119845  00000000  00000000  000a87de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000905c  00000000  00000000  001c2024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001cb080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000368 	.word	0x20000368
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011c48 	.word	0x08011c48

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000036c 	.word	0x2000036c
 800021c:	08011c48 	.word	0x08011c48

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfe:	f001 fcbc 	bl	800267a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d02:	f000 f8b1 	bl	8000e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d06:	f000 fbf1 	bl	80014ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000d0a:	f000 fbad 	bl	8001468 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d0e:	f000 f8f7 	bl	8000f00 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d12:	f000 f979 	bl	8001008 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000d16:	f000 f9e9 	bl	80010ec <MX_ADC3_Init>
  MX_ADC4_Init();
 8000d1a:	f000 fa6d 	bl	80011f8 <MX_ADC4_Init>
  MX_TIM2_Init();
 8000d1e:	f000 fb57 	bl	80013d0 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8000d22:	f00c fbf3 	bl	800d50c <MX_USB_Device_Init>
  MX_I2C3_Init();
 8000d26:	f000 fb13 	bl	8001350 <MX_I2C3_Init>
  MX_DAC1_Init();
 8000d2a:	f000 fad7 	bl	80012dc <MX_DAC1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Wait for instructions
	  if(conv_state == CFG_RECEIVED){
 8000d2e:	4b43      	ldr	r3, [pc, #268]	; (8000e3c <main+0x144>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d101      	bne.n	8000d3c <main+0x44>
		  InterpretConfig();
 8000d38:	f000 fc76 	bl	8001628 <InterpretConfig>
	  }
	  if(conv_state == CFG_INTERPRETED){
 8000d3c:	4b3f      	ldr	r3, [pc, #252]	; (8000e3c <main+0x144>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d101      	bne.n	8000d4a <main+0x52>
		  SetupMeasurement();
 8000d46:	f000 fd8b 	bl	8001860 <SetupMeasurement>
	  }
	  if(conv_state == PARAMETERS_SET){
 8000d4a:	4b3c      	ldr	r3, [pc, #240]	; (8000e3c <main+0x144>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	d101      	bne.n	8000d58 <main+0x60>
		  SendParameters();
 8000d54:	f000 ff16 	bl	8001b84 <SendParameters>
	  }

	  if(conv_state == ARMED){
 8000d58:	4b38      	ldr	r3, [pc, #224]	; (8000e3c <main+0x144>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	d101      	bne.n	8000d66 <main+0x6e>
		  StartMeasurement();
 8000d62:	f000 ff67 	bl	8001c34 <StartMeasurement>
	  }
	  if(conv_state == MEASURING){
 8000d66:	4b35      	ldr	r3, [pc, #212]	; (8000e3c <main+0x144>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b05      	cmp	r3, #5
 8000d6e:	d13c      	bne.n	8000dea <main+0xf2>
		 if(adc_state[0] == START_FULL &&
 8000d70:	4b33      	ldr	r3, [pc, #204]	; (8000e40 <main+0x148>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d11a      	bne.n	8000dae <main+0xb6>
			adc_state[1] == START_FULL &&
 8000d78:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <main+0x148>)
 8000d7a:	785b      	ldrb	r3, [r3, #1]
		 if(adc_state[0] == START_FULL &&
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d116      	bne.n	8000dae <main+0xb6>
			adc_state[2] == START_FULL &&
 8000d80:	4b2f      	ldr	r3, [pc, #188]	; (8000e40 <main+0x148>)
 8000d82:	789b      	ldrb	r3, [r3, #2]
			adc_state[1] == START_FULL &&
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d112      	bne.n	8000dae <main+0xb6>
			adc_state[3] == START_FULL) {
 8000d88:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <main+0x148>)
 8000d8a:	78db      	ldrb	r3, [r3, #3]
			adc_state[2] == START_FULL &&
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d10e      	bne.n	8000dae <main+0xb6>
			 for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 8000d90:	2300      	movs	r3, #0
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	e007      	b.n	8000da6 <main+0xae>
				 adc_state[i] = EMPTY;
 8000d96:	4a2a      	ldr	r2, [pc, #168]	; (8000e40 <main+0x148>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
			 for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3301      	adds	r3, #1
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	ddf4      	ble.n	8000d96 <main+0x9e>
 8000dac:	e01d      	b.n	8000dea <main+0xf2>
			 }
		 }
		 else if(adc_state[0] == END_FULL &&
 8000dae:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <main+0x148>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d119      	bne.n	8000dea <main+0xf2>
				 adc_state[1] == END_FULL &&
 8000db6:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <main+0x148>)
 8000db8:	785b      	ldrb	r3, [r3, #1]
		 else if(adc_state[0] == END_FULL &&
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d115      	bne.n	8000dea <main+0xf2>
				 adc_state[2] == END_FULL &&
 8000dbe:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <main+0x148>)
 8000dc0:	789b      	ldrb	r3, [r3, #2]
				 adc_state[1] == END_FULL &&
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d111      	bne.n	8000dea <main+0xf2>
				 adc_state[3] == END_FULL) {
 8000dc6:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <main+0x148>)
 8000dc8:	78db      	ldrb	r3, [r3, #3]
				 adc_state[2] == END_FULL &&
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d10d      	bne.n	8000dea <main+0xf2>
			 for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 8000dce:	2300      	movs	r3, #0
 8000dd0:	603b      	str	r3, [r7, #0]
 8000dd2:	e007      	b.n	8000de4 <main+0xec>
				 adc_state[i] = EMPTY;
 8000dd4:	4a1a      	ldr	r2, [pc, #104]	; (8000e40 <main+0x148>)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	4413      	add	r3, r2
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
			 for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	ddf4      	ble.n	8000dd4 <main+0xdc>
			 }
		 }
	  }
	  if(conv_state == DONE){
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <main+0x144>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b06      	cmp	r3, #6
 8000df2:	d11f      	bne.n	8000e34 <main+0x13c>
		  HAL_TIM_Base_Stop_IT(&htim2);
 8000df4:	4813      	ldr	r0, [pc, #76]	; (8000e44 <main+0x14c>)
 8000df6:	f007 fed7 	bl	8008ba8 <HAL_TIM_Base_Stop_IT>
		  HAL_ADC_Stop_DMA(&hadc1);
 8000dfa:	4813      	ldr	r0, [pc, #76]	; (8000e48 <main+0x150>)
 8000dfc:	f002 f9f6 	bl	80031ec <HAL_ADC_Stop_DMA>
		  HAL_ADC_Stop_DMA(&hadc2);
 8000e00:	4812      	ldr	r0, [pc, #72]	; (8000e4c <main+0x154>)
 8000e02:	f002 f9f3 	bl	80031ec <HAL_ADC_Stop_DMA>
		  HAL_ADC_Stop_DMA(&hadc3);
 8000e06:	4812      	ldr	r0, [pc, #72]	; (8000e50 <main+0x158>)
 8000e08:	f002 f9f0 	bl	80031ec <HAL_ADC_Stop_DMA>
		  HAL_ADC_Stop_DMA(&hadc4);
 8000e0c:	4811      	ldr	r0, [pc, #68]	; (8000e54 <main+0x15c>)
 8000e0e:	f002 f9ed 	bl	80031ec <HAL_ADC_Stop_DMA>
		  memset(adc_buffers, 0, sizeof(adc_buffers));
 8000e12:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000e16:	2100      	movs	r1, #0
 8000e18:	480f      	ldr	r0, [pc, #60]	; (8000e58 <main+0x160>)
 8000e1a:	f00d fed0 	bl	800ebbe <memset>
		  conv_state = IDLE;
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <main+0x144>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
		  conv_count = 0;
 8000e24:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <main+0x164>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(IND_LED_G_GPIO_Port, IND_LED_G_Pin);
 8000e2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e2e:	480c      	ldr	r0, [pc, #48]	; (8000e60 <main+0x168>)
 8000e30:	f004 fa74 	bl	800531c <HAL_GPIO_TogglePin>
	  }



	  printf("asdf");
 8000e34:	480b      	ldr	r0, [pc, #44]	; (8000e64 <main+0x16c>)
 8000e36:	f00d fe4d 	bl	800ead4 <iprintf>
	  if(conv_state == CFG_RECEIVED){
 8000e3a:	e778      	b.n	8000d2e <main+0x36>
 8000e3c:	20004628 	.word	0x20004628
 8000e40:	20004640 	.word	0x20004640
 8000e44:	2000071c 	.word	0x2000071c
 8000e48:	20000384 	.word	0x20000384
 8000e4c:	200003f0 	.word	0x200003f0
 8000e50:	2000045c 	.word	0x2000045c
 8000e54:	200004c8 	.word	0x200004c8
 8000e58:	20000768 	.word	0x20000768
 8000e5c:	20004630 	.word	0x20004630
 8000e60:	48000800 	.word	0x48000800
 8000e64:	08011c60 	.word	0x08011c60

08000e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b094      	sub	sp, #80	; 0x50
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6e:	f107 0318 	add.w	r3, r7, #24
 8000e72:	2238      	movs	r2, #56	; 0x38
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f00d fea1 	bl	800ebbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f006 fdb8 	bl	8007a00 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000e90:	2321      	movs	r3, #33	; 0x21
 8000e92:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e98:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 78;
 8000eaa:	234e      	movs	r3, #78	; 0x4e
 8000eac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000eae:	2306      	movs	r3, #6
 8000eb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eba:	f107 0318 	add.w	r3, r7, #24
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f006 fe52 	bl	8007b68 <HAL_RCC_OscConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000eca:	f000 ff65 	bl	8001d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ece:	230f      	movs	r3, #15
 8000ed0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2104      	movs	r1, #4
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f007 f950 	bl	800818c <HAL_RCC_ClockConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000ef2:	f000 ff51 	bl	8001d98 <Error_Handler>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3750      	adds	r7, #80	; 0x50
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08c      	sub	sp, #48	; 0x30
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2220      	movs	r2, #32
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f00d fe50 	bl	800ebbe <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f1e:	4b38      	ldr	r3, [pc, #224]	; (8001000 <MX_ADC1_Init+0x100>)
 8000f20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f26:	4b36      	ldr	r3, [pc, #216]	; (8001000 <MX_ADC1_Init+0x100>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f2c:	4b34      	ldr	r3, [pc, #208]	; (8001000 <MX_ADC1_Init+0x100>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f32:	4b33      	ldr	r3, [pc, #204]	; (8001000 <MX_ADC1_Init+0x100>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f38:	4b31      	ldr	r3, [pc, #196]	; (8001000 <MX_ADC1_Init+0x100>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f3e:	4b30      	ldr	r3, [pc, #192]	; (8001000 <MX_ADC1_Init+0x100>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f44:	4b2e      	ldr	r3, [pc, #184]	; (8001000 <MX_ADC1_Init+0x100>)
 8000f46:	2204      	movs	r2, #4
 8000f48:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <MX_ADC1_Init+0x100>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f50:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <MX_ADC1_Init+0x100>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f56:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <MX_ADC1_Init+0x100>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f5c:	4b28      	ldr	r3, [pc, #160]	; (8001000 <MX_ADC1_Init+0x100>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000f64:	4b26      	ldr	r3, [pc, #152]	; (8001000 <MX_ADC1_Init+0x100>)
 8000f66:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f6c:	4b24      	ldr	r3, [pc, #144]	; (8001000 <MX_ADC1_Init+0x100>)
 8000f6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f72:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f74:	4b22      	ldr	r3, [pc, #136]	; (8001000 <MX_ADC1_Init+0x100>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f7c:	4b20      	ldr	r3, [pc, #128]	; (8001000 <MX_ADC1_Init+0x100>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000f82:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <MX_ADC1_Init+0x100>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <MX_ADC1_Init+0x100>)
 8000f8c:	2210      	movs	r2, #16
 8000f8e:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <MX_ADC1_Init+0x100>)
 8000f92:	2220      	movs	r2, #32
 8000f94:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000f96:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <MX_ADC1_Init+0x100>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000f9c:	4b18      	ldr	r3, [pc, #96]	; (8001000 <MX_ADC1_Init+0x100>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa2:	4817      	ldr	r0, [pc, #92]	; (8001000 <MX_ADC1_Init+0x100>)
 8000fa4:	f001 fe92 	bl	8002ccc <HAL_ADC_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000fae:	f000 fef3 	bl	8001d98 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4810      	ldr	r0, [pc, #64]	; (8001000 <MX_ADC1_Init+0x100>)
 8000fbe:	f003 f8bb 	bl	8004138 <HAL_ADCEx_MultiModeConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000fc8:	f000 fee6 	bl	8001d98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <MX_ADC1_Init+0x104>)
 8000fce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd0:	2306      	movs	r3, #6
 8000fd2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fd8:	237f      	movs	r3, #127	; 0x7f
 8000fda:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_ADC1_Init+0x100>)
 8000fea:	f002 f96b 	bl	80032c4 <HAL_ADC_ConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000ff4:	f000 fed0 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	3730      	adds	r7, #48	; 0x30
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000384 	.word	0x20000384
 8001004:	04300002 	.word	0x04300002

08001008 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800100e:	463b      	mov	r3, r7
 8001010:	2220      	movs	r2, #32
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f00d fdd2 	bl	800ebbe <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800101a:	4b31      	ldr	r3, [pc, #196]	; (80010e0 <MX_ADC2_Init+0xd8>)
 800101c:	4a31      	ldr	r2, [pc, #196]	; (80010e4 <MX_ADC2_Init+0xdc>)
 800101e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001020:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <MX_ADC2_Init+0xd8>)
 8001022:	2200      	movs	r2, #0
 8001024:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001026:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <MX_ADC2_Init+0xd8>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800102c:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <MX_ADC2_Init+0xd8>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001032:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <MX_ADC2_Init+0xd8>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001038:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <MX_ADC2_Init+0xd8>)
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800103e:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <MX_ADC2_Init+0xd8>)
 8001040:	2204      	movs	r2, #4
 8001042:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001044:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <MX_ADC2_Init+0xd8>)
 8001046:	2200      	movs	r2, #0
 8001048:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800104a:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <MX_ADC2_Init+0xd8>)
 800104c:	2200      	movs	r2, #0
 800104e:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001050:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <MX_ADC2_Init+0xd8>)
 8001052:	2201      	movs	r2, #1
 8001054:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <MX_ADC2_Init+0xd8>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800105e:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <MX_ADC2_Init+0xd8>)
 8001060:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8001064:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001066:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <MX_ADC2_Init+0xd8>)
 8001068:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800106c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <MX_ADC2_Init+0xd8>)
 8001070:	2201      	movs	r2, #1
 8001072:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_ADC2_Init+0xd8>)
 8001078:	2200      	movs	r2, #0
 800107a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <MX_ADC2_Init+0xd8>)
 800107e:	2201      	movs	r2, #1
 8001080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_ADC2_Init+0xd8>)
 8001086:	2210      	movs	r2, #16
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <MX_ADC2_Init+0xd8>)
 800108c:	2220      	movs	r2, #32
 800108e:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <MX_ADC2_Init+0xd8>)
 8001092:	2200      	movs	r2, #0
 8001094:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <MX_ADC2_Init+0xd8>)
 8001098:	2201      	movs	r2, #1
 800109a:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800109c:	4810      	ldr	r0, [pc, #64]	; (80010e0 <MX_ADC2_Init+0xd8>)
 800109e:	f001 fe15 	bl	8002ccc <HAL_ADC_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 80010a8:	f000 fe76 	bl	8001d98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_ADC2_Init+0xe0>)
 80010ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b0:	2306      	movs	r3, #6
 80010b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010b8:	237f      	movs	r3, #127	; 0x7f
 80010ba:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010bc:	2304      	movs	r3, #4
 80010be:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_ADC2_Init+0xd8>)
 80010ca:	f002 f8fb 	bl	80032c4 <HAL_ADC_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 80010d4:	f000 fe60 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200003f0 	.word	0x200003f0
 80010e4:	50000100 	.word	0x50000100
 80010e8:	0c900008 	.word	0x0c900008

080010ec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08c      	sub	sp, #48	; 0x30
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	2220      	movs	r2, #32
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f00d fd5a 	bl	800ebbe <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800110a:	4b38      	ldr	r3, [pc, #224]	; (80011ec <MX_ADC3_Init+0x100>)
 800110c:	4a38      	ldr	r2, [pc, #224]	; (80011f0 <MX_ADC3_Init+0x104>)
 800110e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001110:	4b36      	ldr	r3, [pc, #216]	; (80011ec <MX_ADC3_Init+0x100>)
 8001112:	2200      	movs	r2, #0
 8001114:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001116:	4b35      	ldr	r3, [pc, #212]	; (80011ec <MX_ADC3_Init+0x100>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800111c:	4b33      	ldr	r3, [pc, #204]	; (80011ec <MX_ADC3_Init+0x100>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001122:	4b32      	ldr	r3, [pc, #200]	; (80011ec <MX_ADC3_Init+0x100>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001128:	4b30      	ldr	r3, [pc, #192]	; (80011ec <MX_ADC3_Init+0x100>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112e:	4b2f      	ldr	r3, [pc, #188]	; (80011ec <MX_ADC3_Init+0x100>)
 8001130:	2204      	movs	r2, #4
 8001132:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001134:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <MX_ADC3_Init+0x100>)
 8001136:	2200      	movs	r2, #0
 8001138:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800113a:	4b2c      	ldr	r3, [pc, #176]	; (80011ec <MX_ADC3_Init+0x100>)
 800113c:	2200      	movs	r2, #0
 800113e:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001140:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <MX_ADC3_Init+0x100>)
 8001142:	2201      	movs	r2, #1
 8001144:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001146:	4b29      	ldr	r3, [pc, #164]	; (80011ec <MX_ADC3_Init+0x100>)
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800114e:	4b27      	ldr	r3, [pc, #156]	; (80011ec <MX_ADC3_Init+0x100>)
 8001150:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8001154:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001156:	4b25      	ldr	r3, [pc, #148]	; (80011ec <MX_ADC3_Init+0x100>)
 8001158:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800115c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <MX_ADC3_Init+0x100>)
 8001160:	2201      	movs	r2, #1
 8001162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001166:	4b21      	ldr	r3, [pc, #132]	; (80011ec <MX_ADC3_Init+0x100>)
 8001168:	2200      	movs	r2, #0
 800116a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <MX_ADC3_Init+0x100>)
 800116e:	2201      	movs	r2, #1
 8001170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8001174:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <MX_ADC3_Init+0x100>)
 8001176:	2210      	movs	r2, #16
 8001178:	645a      	str	r2, [r3, #68]	; 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <MX_ADC3_Init+0x100>)
 800117c:	2220      	movs	r2, #32
 800117e:	649a      	str	r2, [r3, #72]	; 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_ADC3_Init+0x100>)
 8001182:	2200      	movs	r2, #0
 8001184:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <MX_ADC3_Init+0x100>)
 8001188:	2201      	movs	r2, #1
 800118a:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800118c:	4817      	ldr	r0, [pc, #92]	; (80011ec <MX_ADC3_Init+0x100>)
 800118e:	f001 fd9d 	bl	8002ccc <HAL_ADC_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001198:	f000 fdfe 	bl	8001d98 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a4:	4619      	mov	r1, r3
 80011a6:	4811      	ldr	r0, [pc, #68]	; (80011ec <MX_ADC3_Init+0x100>)
 80011a8:	f002 ffc6 	bl	8004138 <HAL_ADCEx_MultiModeConfigChannel>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_ADC3_Init+0xca>
  {
    Error_Handler();
 80011b2:	f000 fdf1 	bl	8001d98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_ADC3_Init+0x108>)
 80011b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ba:	2306      	movs	r3, #6
 80011bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011c2:	237f      	movs	r3, #127	; 0x7f
 80011c4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011c6:	2304      	movs	r3, #4
 80011c8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	4619      	mov	r1, r3
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <MX_ADC3_Init+0x100>)
 80011d4:	f002 f876 	bl	80032c4 <HAL_ADC_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_ADC3_Init+0xf6>
  {
    Error_Handler();
 80011de:	f000 fddb 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	3730      	adds	r7, #48	; 0x30
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000045c 	.word	0x2000045c
 80011f0:	50000400 	.word	0x50000400
 80011f4:	04300002 	.word	0x04300002

080011f8 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011fe:	463b      	mov	r3, r7
 8001200:	2220      	movs	r2, #32
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f00d fcda 	bl	800ebbe <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800120a:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <MX_ADC4_Init+0xd8>)
 800120c:	4a31      	ldr	r2, [pc, #196]	; (80012d4 <MX_ADC4_Init+0xdc>)
 800120e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001210:	4b2f      	ldr	r3, [pc, #188]	; (80012d0 <MX_ADC4_Init+0xd8>)
 8001212:	2200      	movs	r2, #0
 8001214:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001216:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <MX_ADC4_Init+0xd8>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800121c:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <MX_ADC4_Init+0xd8>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001222:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <MX_ADC4_Init+0xd8>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001228:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <MX_ADC4_Init+0xd8>)
 800122a:	2200      	movs	r2, #0
 800122c:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800122e:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <MX_ADC4_Init+0xd8>)
 8001230:	2204      	movs	r2, #4
 8001232:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001234:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <MX_ADC4_Init+0xd8>)
 8001236:	2200      	movs	r2, #0
 8001238:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800123a:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <MX_ADC4_Init+0xd8>)
 800123c:	2200      	movs	r2, #0
 800123e:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8001240:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <MX_ADC4_Init+0xd8>)
 8001242:	2201      	movs	r2, #1
 8001244:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001246:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <MX_ADC4_Init+0xd8>)
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <MX_ADC4_Init+0xd8>)
 8001250:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8001254:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <MX_ADC4_Init+0xd8>)
 8001258:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800125c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <MX_ADC4_Init+0xd8>)
 8001260:	2201      	movs	r2, #1
 8001262:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <MX_ADC4_Init+0xd8>)
 8001268:	2200      	movs	r2, #0
 800126a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = ENABLE;
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <MX_ADC4_Init+0xd8>)
 800126e:	2201      	movs	r2, #1
 8001270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc4.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <MX_ADC4_Init+0xd8>)
 8001276:	2210      	movs	r2, #16
 8001278:	645a      	str	r2, [r3, #68]	; 0x44
  hadc4.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <MX_ADC4_Init+0xd8>)
 800127c:	2220      	movs	r2, #32
 800127e:	649a      	str	r2, [r3, #72]	; 0x48
  hadc4.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <MX_ADC4_Init+0xd8>)
 8001282:	2200      	movs	r2, #0
 8001284:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc4.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <MX_ADC4_Init+0xd8>)
 8001288:	2201      	movs	r2, #1
 800128a:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800128c:	4810      	ldr	r0, [pc, #64]	; (80012d0 <MX_ADC4_Init+0xd8>)
 800128e:	f001 fd1d 	bl	8002ccc <HAL_ADC_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_ADC4_Init+0xa4>
  {
    Error_Handler();
 8001298:	f000 fd7e 	bl	8001d98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <MX_ADC4_Init+0xe0>)
 800129e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012a0:	2306      	movs	r3, #6
 80012a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012a8:	237f      	movs	r3, #127	; 0x7f
 80012aa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012ac:	2304      	movs	r3, #4
 80012ae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80012b4:	463b      	mov	r3, r7
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_ADC4_Init+0xd8>)
 80012ba:	f002 f803 	bl	80032c4 <HAL_ADC_ConfigChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_ADC4_Init+0xd0>
  {
    Error_Handler();
 80012c4:	f000 fd68 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200004c8 	.word	0x200004c8
 80012d4:	50000500 	.word	0x50000500
 80012d8:	14f00020 	.word	0x14f00020

080012dc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	; 0x30
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012e2:	463b      	mov	r3, r7
 80012e4:	2230      	movs	r2, #48	; 0x30
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f00d fc68 	bl	800ebbe <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <MX_DAC1_Init+0x6c>)
 80012f0:	4a16      	ldr	r2, [pc, #88]	; (800134c <MX_DAC1_Init+0x70>)
 80012f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80012f4:	4814      	ldr	r0, [pc, #80]	; (8001348 <MX_DAC1_Init+0x6c>)
 80012f6:	f003 f936 	bl	8004566 <HAL_DAC_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001300:	f000 fd4a 	bl	8001d98 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800131c:	2302      	movs	r3, #2
 800131e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001320:	2301      	movs	r3, #1
 8001322:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001328:	463b      	mov	r3, r7
 800132a:	2200      	movs	r2, #0
 800132c:	4619      	mov	r1, r3
 800132e:	4806      	ldr	r0, [pc, #24]	; (8001348 <MX_DAC1_Init+0x6c>)
 8001330:	f003 f9d6 	bl	80046e0 <HAL_DAC_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800133a:	f000 fd2d 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	3730      	adds	r7, #48	; 0x30
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200006b4 	.word	0x200006b4
 800134c:	50000800 	.word	0x50000800

08001350 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_I2C3_Init+0x74>)
 8001356:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <MX_I2C3_Init+0x78>)
 8001358:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x40707EB4;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <MX_I2C3_Init+0x74>)
 800135c:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <MX_I2C3_Init+0x7c>)
 800135e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 144;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_I2C3_Init+0x74>)
 8001362:	2290      	movs	r2, #144	; 0x90
 8001364:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_I2C3_Init+0x74>)
 8001368:	2201      	movs	r2, #1
 800136a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_I2C3_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_I2C3_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_I2C3_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_I2C3_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_I2C3_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800138a:	480e      	ldr	r0, [pc, #56]	; (80013c4 <MX_I2C3_Init+0x74>)
 800138c:	f003 ffe0 	bl	8005350 <HAL_I2C_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001396:	f000 fcff 	bl	8001d98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800139a:	2100      	movs	r1, #0
 800139c:	4809      	ldr	r0, [pc, #36]	; (80013c4 <MX_I2C3_Init+0x74>)
 800139e:	f004 fd63 	bl	8005e68 <HAL_I2CEx_ConfigAnalogFilter>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80013a8:	f000 fcf6 	bl	8001d98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80013ac:	2100      	movs	r1, #0
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_I2C3_Init+0x74>)
 80013b0:	f004 fda5 	bl	8005efe <HAL_I2CEx_ConfigDigitalFilter>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80013ba:	f000 fced 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200006c8 	.word	0x200006c8
 80013c8:	40007800 	.word	0x40007800
 80013cc:	40707eb4 	.word	0x40707eb4

080013d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ee:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <MX_TIM2_Init+0x94>)
 80013f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 156 - 1;
 80013f6:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <MX_TIM2_Init+0x94>)
 80013f8:	229b      	movs	r2, #155	; 0x9b
 80013fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <MX_TIM2_Init+0x94>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <MX_TIM2_Init+0x94>)
 8001404:	2209      	movs	r2, #9
 8001406:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <MX_TIM2_Init+0x94>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <MX_TIM2_Init+0x94>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001414:	4813      	ldr	r0, [pc, #76]	; (8001464 <MX_TIM2_Init+0x94>)
 8001416:	f007 faf7 	bl	8008a08 <HAL_TIM_Base_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001420:	f000 fcba 	bl	8001d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001428:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	4619      	mov	r1, r3
 8001430:	480c      	ldr	r0, [pc, #48]	; (8001464 <MX_TIM2_Init+0x94>)
 8001432:	f007 fd37 	bl	8008ea4 <HAL_TIM_ConfigClockSource>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800143c:	f000 fcac 	bl	8001d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001440:	2320      	movs	r3, #32
 8001442:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	4619      	mov	r1, r3
 800144c:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_TIM2_Init+0x94>)
 800144e:	f007 ffc1 	bl	80093d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001458:	f000 fc9e 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800145c:	bf00      	nop
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	2000071c 	.word	0x2000071c

08001468 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800146e:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <MX_DMA_Init+0x80>)
 8001470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001472:	4a1d      	ldr	r2, [pc, #116]	; (80014e8 <MX_DMA_Init+0x80>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6493      	str	r3, [r2, #72]	; 0x48
 800147a:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <MX_DMA_Init+0x80>)
 800147c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <MX_DMA_Init+0x80>)
 8001488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800148a:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <MX_DMA_Init+0x80>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6493      	str	r3, [r2, #72]	; 0x48
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <MX_DMA_Init+0x80>)
 8001494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	200b      	movs	r0, #11
 80014a4:	f003 f82b 	bl	80044fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014a8:	200b      	movs	r0, #11
 80014aa:	f003 f842 	bl	8004532 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	200c      	movs	r0, #12
 80014b4:	f003 f823 	bl	80044fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014b8:	200c      	movs	r0, #12
 80014ba:	f003 f83a 	bl	8004532 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	200d      	movs	r0, #13
 80014c4:	f003 f81b 	bl	80044fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80014c8:	200d      	movs	r0, #13
 80014ca:	f003 f832 	bl	8004532 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	200e      	movs	r0, #14
 80014d4:	f003 f813 	bl	80044fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80014d8:	200e      	movs	r0, #14
 80014da:	f003 f82a 	bl	8004532 <HAL_NVIC_EnableIRQ>

}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000

080014ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001502:	4b46      	ldr	r3, [pc, #280]	; (800161c <MX_GPIO_Init+0x130>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	4a45      	ldr	r2, [pc, #276]	; (800161c <MX_GPIO_Init+0x130>)
 8001508:	f043 0320 	orr.w	r3, r3, #32
 800150c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150e:	4b43      	ldr	r3, [pc, #268]	; (800161c <MX_GPIO_Init+0x130>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	f003 0320 	and.w	r3, r3, #32
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	4b40      	ldr	r3, [pc, #256]	; (800161c <MX_GPIO_Init+0x130>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	4a3f      	ldr	r2, [pc, #252]	; (800161c <MX_GPIO_Init+0x130>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001526:	4b3d      	ldr	r3, [pc, #244]	; (800161c <MX_GPIO_Init+0x130>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	4b3a      	ldr	r3, [pc, #232]	; (800161c <MX_GPIO_Init+0x130>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	4a39      	ldr	r2, [pc, #228]	; (800161c <MX_GPIO_Init+0x130>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153e:	4b37      	ldr	r3, [pc, #220]	; (800161c <MX_GPIO_Init+0x130>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	4b34      	ldr	r3, [pc, #208]	; (800161c <MX_GPIO_Init+0x130>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	4a33      	ldr	r2, [pc, #204]	; (800161c <MX_GPIO_Init+0x130>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001556:	4b31      	ldr	r3, [pc, #196]	; (800161c <MX_GPIO_Init+0x130>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ERRATA_FIX1_Pin|ERRATA_FIX2_Pin|ERRATA_FIX3_Pin|ERRATA_FIX4_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 41d8 	mov.w	r1, #27648	; 0x6c00
 8001568:	482d      	ldr	r0, [pc, #180]	; (8001620 <MX_GPIO_Init+0x134>)
 800156a:	f003 febf 	bl	80052ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IND_LED_R_Pin|IND_LED_B_Pin, GPIO_PIN_SET);
 800156e:	2201      	movs	r2, #1
 8001570:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8001574:	482b      	ldr	r0, [pc, #172]	; (8001624 <MX_GPIO_Init+0x138>)
 8001576:	f003 feb9 	bl	80052ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IND_LED_G_GPIO_Port, IND_LED_G_Pin, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001580:	4828      	ldr	r0, [pc, #160]	; (8001624 <MX_GPIO_Init+0x138>)
 8001582:	f003 feb3 	bl	80052ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ERRATA_FIX1_Pin ERRATA_FIX2_Pin ERRATA_FIX3_Pin ERRATA_FIX4_Pin */
  GPIO_InitStruct.Pin = ERRATA_FIX1_Pin|ERRATA_FIX2_Pin|ERRATA_FIX3_Pin|ERRATA_FIX4_Pin;
 8001586:	f44f 43d8 	mov.w	r3, #27648	; 0x6c00
 800158a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158c:	2301      	movs	r3, #1
 800158e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	4820      	ldr	r0, [pc, #128]	; (8001620 <MX_GPIO_Init+0x134>)
 80015a0:	f003 fd22 	bl	8004fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_ALERT_Pin */
  GPIO_InitStruct.Pin = TEMP_ALERT_Pin;
 80015a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_ALERT_GPIO_Port, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015bc:	f003 fd14 	bl	8004fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IND_LED_R_Pin IND_LED_G_Pin IND_LED_B_Pin */
  GPIO_InitStruct.Pin = IND_LED_R_Pin|IND_LED_G_Pin|IND_LED_B_Pin;
 80015c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4812      	ldr	r0, [pc, #72]	; (8001624 <MX_GPIO_Init+0x138>)
 80015da:	f003 fd05 	bl	8004fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_SHORT_Pin TRIG_EXT_2_Pin */
  GPIO_InitStruct.Pin = TRIG_SHORT_Pin|TRIG_EXT_2_Pin;
 80015de:	2360      	movs	r3, #96	; 0x60
 80015e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015e2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	480b      	ldr	r0, [pc, #44]	; (8001620 <MX_GPIO_Init+0x134>)
 80015f4:	f003 fcf8 	bl	8004fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_EXT_1_Pin */
  GPIO_InitStruct.Pin = TRIG_EXT_1_Pin;
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_EXT_1_GPIO_Port, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4804      	ldr	r0, [pc, #16]	; (8001620 <MX_GPIO_Init+0x134>)
 800160e:	f003 fceb 	bl	8004fe8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001612:	bf00      	nop
 8001614:	3728      	adds	r7, #40	; 0x28
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	48000400 	.word	0x48000400
 8001624:	48000800 	.word	0x48000800

08001628 <InterpretConfig>:

/* USER CODE BEGIN 4 */

int InterpretConfig(void) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b0a6      	sub	sp, #152	; 0x98
 800162c:	af00      	add	r7, sp, #0
	char variable_name[CFG_VAR_SIZE];
	char variable_value[CFG_VAR_SIZE];
	memset(variable_name, 0, sizeof(variable_name));
 800162e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001632:	2240      	movs	r2, #64	; 0x40
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f00d fac1 	bl	800ebbe <memset>
	memset(variable_value, 0, sizeof(variable_value));
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	2240      	movs	r2, #64	; 0x40
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f00d faba 	bl	800ebbe <memset>
	int variable_name_indexes[2] = {0, 0};
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
	int variable_value_indexes[2] = {0, 0};
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
	char reading_status = 'n';
 800165a:	236e      	movs	r3, #110	; 0x6e
 800165c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	for(int i = 0; i < USB_RX_BUFFER_SIZE; i++){
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001666:	e077      	b.n	8001758 <InterpretConfig+0x130>
		if(rx_buffer[i] == '\0'){
 8001668:	4a42      	ldr	r2, [pc, #264]	; (8001774 <InterpretConfig+0x14c>)
 800166a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800166e:	4413      	add	r3, r2
 8001670:	f993 3000 	ldrsb.w	r3, [r3]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d074      	beq.n	8001762 <InterpretConfig+0x13a>
			break;
		}
		// Reading the variable name
		if(reading_status == 'n'){
 8001678:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800167c:	2b6e      	cmp	r3, #110	; 0x6e
 800167e:	d112      	bne.n	80016a6 <InterpretConfig+0x7e>
			if(rx_buffer[i] == ':') {
 8001680:	4a3c      	ldr	r2, [pc, #240]	; (8001774 <InterpretConfig+0x14c>)
 8001682:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001686:	4413      	add	r3, r2
 8001688:	f993 3000 	ldrsb.w	r3, [r3]
 800168c:	2b3a      	cmp	r3, #58	; 0x3a
 800168e:	d15e      	bne.n	800174e <InterpretConfig+0x126>
				variable_name_indexes[1] = i;
 8001690:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001694:	60fb      	str	r3, [r7, #12]
				variable_value_indexes[0] = i+1;
 8001696:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800169a:	3301      	adds	r3, #1
 800169c:	603b      	str	r3, [r7, #0]
				reading_status = 'v';
 800169e:	2376      	movs	r3, #118	; 0x76
 80016a0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80016a4:	e053      	b.n	800174e <InterpretConfig+0x126>
			}
		}
		// Reading the variable value
		else if(reading_status == 'v'){
 80016a6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80016aa:	2b76      	cmp	r3, #118	; 0x76
 80016ac:	d14f      	bne.n	800174e <InterpretConfig+0x126>
			if(rx_buffer[i] == ';') {
 80016ae:	4a31      	ldr	r2, [pc, #196]	; (8001774 <InterpretConfig+0x14c>)
 80016b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016b4:	4413      	add	r3, r2
 80016b6:	f993 3000 	ldrsb.w	r3, [r3]
 80016ba:	2b3b      	cmp	r3, #59	; 0x3b
 80016bc:	d147      	bne.n	800174e <InterpretConfig+0x126>
				variable_value_indexes[1] = i;
 80016be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016c2:	607b      	str	r3, [r7, #4]

				strncpy(variable_name, ((char*)rx_buffer + variable_name_indexes[0]), (variable_name_indexes[1] - variable_name_indexes[0]));
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <InterpretConfig+0x14c>)
 80016ca:	18d1      	adds	r1, r2, r3
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	461a      	mov	r2, r3
 80016d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016d8:	4618      	mov	r0, r3
 80016da:	f00d fa78 	bl	800ebce <strncpy>
				variable_name[variable_name_indexes[1] + 1] = '\0';
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	3301      	adds	r3, #1
 80016e2:	3398      	adds	r3, #152	; 0x98
 80016e4:	443b      	add	r3, r7
 80016e6:	2200      	movs	r2, #0
 80016e8:	f803 2c48 	strb.w	r2, [r3, #-72]
				strncpy(variable_value, ((char*)rx_buffer + variable_value_indexes[0]), (variable_value_indexes[1] - variable_value_indexes[0]));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b20      	ldr	r3, [pc, #128]	; (8001774 <InterpretConfig+0x14c>)
 80016f2:	18d1      	adds	r1, r2, r3
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	461a      	mov	r2, r3
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	4618      	mov	r0, r3
 8001702:	f00d fa64 	bl	800ebce <strncpy>
				variable_value[variable_value_indexes[1] + 1] = '\0';
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3301      	adds	r3, #1
 800170a:	3398      	adds	r3, #152	; 0x98
 800170c:	443b      	add	r3, r7
 800170e:	2200      	movs	r2, #0
 8001710:	f803 2c88 	strb.w	r2, [r3, #-136]

				InterpretVariable(variable_name, variable_value);
 8001714:	f107 0210 	add.w	r2, r7, #16
 8001718:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800171c:	4611      	mov	r1, r2
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f82c 	bl	800177c <InterpretVariable>
				memset(variable_name, 0, sizeof(variable_name));
 8001724:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001728:	2240      	movs	r2, #64	; 0x40
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f00d fa46 	bl	800ebbe <memset>
				memset(variable_value, 0, sizeof(variable_value));
 8001732:	f107 0310 	add.w	r3, r7, #16
 8001736:	2240      	movs	r2, #64	; 0x40
 8001738:	2100      	movs	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f00d fa3f 	bl	800ebbe <memset>
				variable_name_indexes[0] = i + 1;
 8001740:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001744:	3301      	adds	r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
				reading_status = 'n';
 8001748:	236e      	movs	r3, #110	; 0x6e
 800174a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	for(int i = 0; i < USB_RX_BUFFER_SIZE; i++){
 800174e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001752:	3301      	adds	r3, #1
 8001754:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001758:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800175c:	2b3f      	cmp	r3, #63	; 0x3f
 800175e:	dd83      	ble.n	8001668 <InterpretConfig+0x40>
 8001760:	e000      	b.n	8001764 <InterpretConfig+0x13c>
			break;
 8001762:	bf00      	nop
			}
		}
	}

	conv_state = CFG_INTERPRETED;
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <InterpretConfig+0x150>)
 8001766:	2202      	movs	r2, #2
 8001768:	701a      	strb	r2, [r3, #0]
	return 1;
 800176a:	2301      	movs	r3, #1
}
 800176c:	4618      	mov	r0, r3
 800176e:	3798      	adds	r7, #152	; 0x98
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200045e8 	.word	0x200045e8
 8001778:	20004628 	.word	0x20004628

0800177c <InterpretVariable>:

int InterpretVariable(char name[CFG_VAR_SIZE], char value[CFG_VAR_SIZE]) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
	if(strcmp(name, "RecLen") == 0) {
 8001786:	492b      	ldr	r1, [pc, #172]	; (8001834 <InterpretVariable+0xb8>)
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7fe fd49 	bl	8000220 <strcmp>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d107      	bne.n	80017a4 <InterpretVariable+0x28>
		record_length_ms = (uint16_t)atoi(value);
 8001794:	6838      	ldr	r0, [r7, #0]
 8001796:	f00c fbe5 	bl	800df64 <atoi>
 800179a:	4603      	mov	r3, r0
 800179c:	b29a      	uxth	r2, r3
 800179e:	4b26      	ldr	r3, [pc, #152]	; (8001838 <InterpretVariable+0xbc>)
 80017a0:	801a      	strh	r2, [r3, #0]
 80017a2:	e041      	b.n	8001828 <InterpretVariable+0xac>
	}
	else if(strcmp(name, "RecInt") == 0) {
 80017a4:	4925      	ldr	r1, [pc, #148]	; (800183c <InterpretVariable+0xc0>)
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7fe fd3a 	bl	8000220 <strcmp>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d107      	bne.n	80017c2 <InterpretVariable+0x46>
		record_interval_us = (uint16_t)atoi(value);
 80017b2:	6838      	ldr	r0, [r7, #0]
 80017b4:	f00c fbd6 	bl	800df64 <atoi>
 80017b8:	4603      	mov	r3, r0
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	4b20      	ldr	r3, [pc, #128]	; (8001840 <InterpretVariable+0xc4>)
 80017be:	801a      	strh	r2, [r3, #0]
 80017c0:	e032      	b.n	8001828 <InterpretVariable+0xac>
	}
	else if(strcmp(name, "TcType") == 0) {
 80017c2:	4920      	ldr	r1, [pc, #128]	; (8001844 <InterpretVariable+0xc8>)
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7fe fd2b 	bl	8000220 <strcmp>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d104      	bne.n	80017da <InterpretVariable+0x5e>
		tc_type = value[0];
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	781a      	ldrb	r2, [r3, #0]
 80017d4:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <InterpretVariable+0xcc>)
 80017d6:	701a      	strb	r2, [r3, #0]
 80017d8:	e026      	b.n	8001828 <InterpretVariable+0xac>
	}
	else if(strcmp(name, "TrgSrc") == 0) {
 80017da:	491c      	ldr	r1, [pc, #112]	; (800184c <InterpretVariable+0xd0>)
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7fe fd1f 	bl	8000220 <strcmp>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d11f      	bne.n	8001828 <InterpretVariable+0xac>
		if(strcmp(value, "btn") == 0) {
 80017e8:	4919      	ldr	r1, [pc, #100]	; (8001850 <InterpretVariable+0xd4>)
 80017ea:	6838      	ldr	r0, [r7, #0]
 80017ec:	f7fe fd18 	bl	8000220 <strcmp>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d103      	bne.n	80017fe <InterpretVariable+0x82>
			trig_source = TRIG_SHORT;
 80017f6:	4b17      	ldr	r3, [pc, #92]	; (8001854 <InterpretVariable+0xd8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	e014      	b.n	8001828 <InterpretVariable+0xac>
		}
		else if(strcmp(value, "ex1") == 0) {
 80017fe:	4916      	ldr	r1, [pc, #88]	; (8001858 <InterpretVariable+0xdc>)
 8001800:	6838      	ldr	r0, [r7, #0]
 8001802:	f7fe fd0d 	bl	8000220 <strcmp>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d103      	bne.n	8001814 <InterpretVariable+0x98>
			trig_source = TRIG_EXT_1;
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <InterpretVariable+0xd8>)
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	e009      	b.n	8001828 <InterpretVariable+0xac>
		}
		else if(strcmp(value, "ex2") == 0) {
 8001814:	4911      	ldr	r1, [pc, #68]	; (800185c <InterpretVariable+0xe0>)
 8001816:	6838      	ldr	r0, [r7, #0]
 8001818:	f7fe fd02 	bl	8000220 <strcmp>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d102      	bne.n	8001828 <InterpretVariable+0xac>
			trig_source = TRIG_EXT_2;
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <InterpretVariable+0xd8>)
 8001824:	2202      	movs	r2, #2
 8001826:	701a      	strb	r2, [r3, #0]
		}
	}
	return 1;
 8001828:	2301      	movs	r3, #1
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	08011c68 	.word	0x08011c68
 8001838:	20000004 	.word	0x20000004
 800183c:	08011c70 	.word	0x08011c70
 8001840:	20000006 	.word	0x20000006
 8001844:	08011c78 	.word	0x08011c78
 8001848:	20000008 	.word	0x20000008
 800184c:	08011c80 	.word	0x08011c80
 8001850:	08011c88 	.word	0x08011c88
 8001854:	2000463c 	.word	0x2000463c
 8001858:	08011c8c 	.word	0x08011c8c
 800185c:	08011c90 	.word	0x08011c90

08001860 <SetupMeasurement>:

int SetupMeasurement(void){
 8001860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001864:	b090      	sub	sp, #64	; 0x40
 8001866:	af04      	add	r7, sp, #16
	// > Set the correct analog reference voltage and get the relevant coefficients

	const double *used_coefficients;
	uint8_t coefficients_count;
	if(tc_type == 'E') {
 8001868:	4bb1      	ldr	r3, [pc, #708]	; (8001b30 <SetupMeasurement+0x2d0>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b45      	cmp	r3, #69	; 0x45
 800186e:	d10b      	bne.n	8001888 <SetupMeasurement+0x28>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2); // 2.9V
 8001870:	2020      	movs	r0, #32
 8001872:	f000 ff73 	bl	800275c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		analog_reference_voltage = 2.9;
 8001876:	4baf      	ldr	r3, [pc, #700]	; (8001b34 <SetupMeasurement+0x2d4>)
 8001878:	4aaf      	ldr	r2, [pc, #700]	; (8001b38 <SetupMeasurement+0x2d8>)
 800187a:	601a      	str	r2, [r3, #0]
		used_coefficients = type_e_coefficients;
 800187c:	4baf      	ldr	r3, [pc, #700]	; (8001b3c <SetupMeasurement+0x2dc>)
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
		coefficients_count = type_e_coefficients_count;
 8001880:	230e      	movs	r3, #14
 8001882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001886:	e02e      	b.n	80018e6 <SetupMeasurement+0x86>
	}
	else if(tc_type == 'J') {
 8001888:	4ba9      	ldr	r3, [pc, #676]	; (8001b30 <SetupMeasurement+0x2d0>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b4a      	cmp	r3, #74	; 0x4a
 800188e:	d10b      	bne.n	80018a8 <SetupMeasurement+0x48>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1); // 2.5V
 8001890:	2010      	movs	r0, #16
 8001892:	f000 ff63 	bl	800275c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		analog_reference_voltage = 2.5;
 8001896:	4ba7      	ldr	r3, [pc, #668]	; (8001b34 <SetupMeasurement+0x2d4>)
 8001898:	4aa9      	ldr	r2, [pc, #676]	; (8001b40 <SetupMeasurement+0x2e0>)
 800189a:	601a      	str	r2, [r3, #0]
		used_coefficients = type_j_coefficients;
 800189c:	4ba9      	ldr	r3, [pc, #676]	; (8001b44 <SetupMeasurement+0x2e4>)
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
		coefficients_count = type_j_coefficients_count;
 80018a0:	2309      	movs	r3, #9
 80018a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80018a6:	e01e      	b.n	80018e6 <SetupMeasurement+0x86>
	}
	else if(tc_type == 'K') {
 80018a8:	4ba1      	ldr	r3, [pc, #644]	; (8001b30 <SetupMeasurement+0x2d0>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b4b      	cmp	r3, #75	; 0x4b
 80018ae:	d10b      	bne.n	80018c8 <SetupMeasurement+0x68>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0); // 2.048V
 80018b0:	2000      	movs	r0, #0
 80018b2:	f000 ff53 	bl	800275c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		analog_reference_voltage = 2.048;
 80018b6:	4b9f      	ldr	r3, [pc, #636]	; (8001b34 <SetupMeasurement+0x2d4>)
 80018b8:	4aa3      	ldr	r2, [pc, #652]	; (8001b48 <SetupMeasurement+0x2e8>)
 80018ba:	601a      	str	r2, [r3, #0]
		used_coefficients = type_k_coefficients;
 80018bc:	4ba3      	ldr	r3, [pc, #652]	; (8001b4c <SetupMeasurement+0x2ec>)
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
		coefficients_count = type_k_coefficients_count;
 80018c0:	230b      	movs	r3, #11
 80018c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80018c6:	e00e      	b.n	80018e6 <SetupMeasurement+0x86>
	}
	else if(tc_type == 'T') {
 80018c8:	4b99      	ldr	r3, [pc, #612]	; (8001b30 <SetupMeasurement+0x2d0>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b54      	cmp	r3, #84	; 0x54
 80018ce:	d10a      	bne.n	80018e6 <SetupMeasurement+0x86>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0); // 2.048V
 80018d0:	2000      	movs	r0, #0
 80018d2:	f000 ff43 	bl	800275c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		analog_reference_voltage = 2.048;
 80018d6:	4b97      	ldr	r3, [pc, #604]	; (8001b34 <SetupMeasurement+0x2d4>)
 80018d8:	4a9b      	ldr	r2, [pc, #620]	; (8001b48 <SetupMeasurement+0x2e8>)
 80018da:	601a      	str	r2, [r3, #0]
		used_coefficients = type_t_coefficients;
 80018dc:	4b9c      	ldr	r3, [pc, #624]	; (8001b50 <SetupMeasurement+0x2f0>)
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
		coefficients_count = type_t_coefficients_count;
 80018e0:	230f      	movs	r3, #15
 80018e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	}

	// > Calculate and set ADC sync timer
	target_conv_count = (record_length_ms * 1000) / record_interval_us;
 80018e6:	4b9b      	ldr	r3, [pc, #620]	; (8001b54 <SetupMeasurement+0x2f4>)
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f0:	fb02 f303 	mul.w	r3, r2, r3
 80018f4:	4a98      	ldr	r2, [pc, #608]	; (8001b58 <SetupMeasurement+0x2f8>)
 80018f6:	8812      	ldrh	r2, [r2, #0]
 80018f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80018fc:	4a97      	ldr	r2, [pc, #604]	; (8001b5c <SetupMeasurement+0x2fc>)
 80018fe:	6013      	str	r3, [r2, #0]

	__HAL_TIM_SET_AUTORELOAD(&htim2, record_interval_us - 1);
 8001900:	4b95      	ldr	r3, [pc, #596]	; (8001b58 <SetupMeasurement+0x2f8>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	1e5a      	subs	r2, r3, #1
 8001906:	4b96      	ldr	r3, [pc, #600]	; (8001b60 <SetupMeasurement+0x300>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	62da      	str	r2, [r3, #44]	; 0x2c
 800190c:	4b92      	ldr	r3, [pc, #584]	; (8001b58 <SetupMeasurement+0x2f8>)
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	3b01      	subs	r3, #1
 8001912:	461a      	mov	r2, r3
 8001914:	4b92      	ldr	r3, [pc, #584]	; (8001b60 <SetupMeasurement+0x300>)
 8001916:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(&htim2, record_interval_us - 1);
 8001918:	4b8f      	ldr	r3, [pc, #572]	; (8001b58 <SetupMeasurement+0x2f8>)
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	1e5a      	subs	r2, r3, #1
 800191e:	4b90      	ldr	r3, [pc, #576]	; (8001b60 <SetupMeasurement+0x300>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	625a      	str	r2, [r3, #36]	; 0x24

	// > Calculate and set DAC value

	// Initiate a one shot temperature conversion
	uint8_t one_shot_conversion_command = 0b01000100;
 8001924:	2344      	movs	r3, #68	; 0x44
 8001926:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(&hi2c3, (TEMP_SENSOR_ADDR << 1), 0x1, I2C_MEMADD_SIZE_8BIT, &one_shot_conversion_command, 1, HAL_MAX_DELAY);
 8001928:	f04f 33ff 	mov.w	r3, #4294967295
 800192c:	9302      	str	r3, [sp, #8]
 800192e:	2301      	movs	r3, #1
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	1cfb      	adds	r3, r7, #3
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2301      	movs	r3, #1
 8001938:	2201      	movs	r2, #1
 800193a:	2190      	movs	r1, #144	; 0x90
 800193c:	4889      	ldr	r0, [pc, #548]	; (8001b64 <SetupMeasurement+0x304>)
 800193e:	f003 fda3 	bl	8005488 <HAL_I2C_Mem_Write>
	// Read the temperature
	uint8_t temp_buffer[2];
	HAL_I2C_Mem_Read(&hi2c3, (TEMP_SENSOR_ADDR << 1), 0x0, I2C_MEMADD_SIZE_8BIT, temp_buffer, 2, HAL_MAX_DELAY);
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	9302      	str	r3, [sp, #8]
 8001948:	2302      	movs	r3, #2
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	463b      	mov	r3, r7
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2301      	movs	r3, #1
 8001952:	2200      	movs	r2, #0
 8001954:	2190      	movs	r1, #144	; 0x90
 8001956:	4883      	ldr	r0, [pc, #524]	; (8001b64 <SetupMeasurement+0x304>)
 8001958:	f003 feaa 	bl	80056b0 <HAL_I2C_Mem_Read>

	// Calculate the temperature in C
	uint8_t negative_temperature_flag = temp_buffer[0] >> 7;
 800195c:	783b      	ldrb	r3, [r7, #0]
 800195e:	09db      	lsrs	r3, r3, #7
 8001960:	76fb      	strb	r3, [r7, #27]
	temp_buffer[0] &= 0b01111111;
 8001962:	783b      	ldrb	r3, [r7, #0]
 8001964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001968:	b2db      	uxtb	r3, r3
 800196a:	703b      	strb	r3, [r7, #0]
	uint16_t sensor_output = (temp_buffer[0] << 2) | (temp_buffer[1] >> 6);
 800196c:	783b      	ldrb	r3, [r7, #0]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	b21a      	sxth	r2, r3
 8001972:	787b      	ldrb	r3, [r7, #1]
 8001974:	099b      	lsrs	r3, r3, #6
 8001976:	b2db      	uxtb	r3, r3
 8001978:	b21b      	sxth	r3, r3
 800197a:	4313      	orrs	r3, r2
 800197c:	b21b      	sxth	r3, r3
 800197e:	833b      	strh	r3, [r7, #24]

	if(negative_temperature_flag) {
 8001980:	7efb      	ldrb	r3, [r7, #27]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d014      	beq.n	80019b0 <SetupMeasurement+0x150>
		cold_junction_temp = (sensor_output - 512)/4.0;
 8001986:	8b3b      	ldrh	r3, [r7, #24]
 8001988:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fe01 	bl	8000594 <__aeabi_i2d>
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	4b74      	ldr	r3, [pc, #464]	; (8001b68 <SetupMeasurement+0x308>)
 8001998:	f7fe ff90 	bl	80008bc <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	f7ff f958 	bl	8000c58 <__aeabi_d2f>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4a70      	ldr	r2, [pc, #448]	; (8001b6c <SetupMeasurement+0x30c>)
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	e011      	b.n	80019d4 <SetupMeasurement+0x174>
	}
	else{
		cold_junction_temp = (sensor_output)/4.0;
 80019b0:	8b3b      	ldrh	r3, [r7, #24]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fdee 	bl	8000594 <__aeabi_i2d>
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	4b6a      	ldr	r3, [pc, #424]	; (8001b68 <SetupMeasurement+0x308>)
 80019be:	f7fe ff7d 	bl	80008bc <__aeabi_ddiv>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	f7ff f945 	bl	8000c58 <__aeabi_d2f>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4a66      	ldr	r2, [pc, #408]	; (8001b6c <SetupMeasurement+0x30c>)
 80019d2:	6013      	str	r3, [r2, #0]
	}

	// Calculate the required DAC offset
	float cjc_offset_temperature = MINIMUM_TEMPERATURE - cold_junction_temp;
 80019d4:	4b65      	ldr	r3, [pc, #404]	; (8001b6c <SetupMeasurement+0x30c>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80019de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e2:	edc7 7a05 	vstr	s15, [r7, #20]
	double cjc_offset_voltage = 0;
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for(int i = 0; i < coefficients_count; i++) {
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	e028      	b.n	8001a4a <SetupMeasurement+0x1ea>
		cjc_offset_voltage += used_coefficients[i] * pow(cjc_offset_temperature, i);
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019fe:	4413      	add	r3, r2
 8001a00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001a04:	6978      	ldr	r0, [r7, #20]
 8001a06:	f7fe fdd7 	bl	80005b8 <__aeabi_f2d>
 8001a0a:	4682      	mov	sl, r0
 8001a0c:	468b      	mov	fp, r1
 8001a0e:	69f8      	ldr	r0, [r7, #28]
 8001a10:	f7fe fdc0 	bl	8000594 <__aeabi_i2d>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	ec43 2b11 	vmov	d1, r2, r3
 8001a1c:	ec4b ab10 	vmov	d0, sl, fp
 8001a20:	f00f f9da 	bl	8010dd8 <pow>
 8001a24:	ec53 2b10 	vmov	r2, r3, d0
 8001a28:	4640      	mov	r0, r8
 8001a2a:	4649      	mov	r1, r9
 8001a2c:	f7fe fe1c 	bl	8000668 <__aeabi_dmul>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a38:	f7fe fc60 	bl	80002fc <__adddf3>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for(int i = 0; i < coefficients_count; i++) {
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	3301      	adds	r3, #1
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	dbd1      	blt.n	80019f8 <SetupMeasurement+0x198>
	}

	double total_offset_calc = INAMP_OUTPUT_BUFFER_OFFSET + ((-1) * (cjc_offset_voltage * pow(10, -6)) * INAMP_GAIN);
 8001a54:	a330      	add	r3, pc, #192	; (adr r3, 8001b18 <SetupMeasurement+0x2b8>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a5e:	f7fe fe03 	bl	8000668 <__aeabi_dmul>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4614      	mov	r4, r2
 8001a68:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001a6c:	a32c      	add	r3, pc, #176	; (adr r3, 8001b20 <SetupMeasurement+0x2c0>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	4620      	mov	r0, r4
 8001a74:	4629      	mov	r1, r5
 8001a76:	f7fe fdf7 	bl	8000668 <__aeabi_dmul>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	a329      	add	r3, pc, #164	; (adr r3, 8001b28 <SetupMeasurement+0x2c8>)
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	f7fe fc38 	bl	80002fc <__adddf3>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t offset = (uint32_t)(total_offset_calc * 4096) / analog_reference_voltage;
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	4b35      	ldr	r3, [pc, #212]	; (8001b70 <SetupMeasurement+0x310>)
 8001a9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a9e:	f7fe fde3 	bl	8000668 <__aeabi_dmul>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f7ff f8b5 	bl	8000c18 <__aeabi_d2uiz>
 8001aae:	ee07 0a90 	vmov	s15, r0
 8001ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <SetupMeasurement+0x2d4>)
 8001ab8:	ed93 7a00 	vldr	s14, [r3]
 8001abc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ac4:	ee17 3a90 	vmov	r3, s15
 8001ac8:	607b      	str	r3, [r7, #4]
	applied_voltage_offset = (float)(offset * analog_reference_voltage) / 4096;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <SetupMeasurement+0x2d4>)
 8001ad6:	edd3 7a00 	vldr	s15, [r3]
 8001ada:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ade:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001b74 <SetupMeasurement+0x314>
 8001ae2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ae6:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <SetupMeasurement+0x318>)
 8001ae8:	edc3 7a00 	vstr	s15, [r3]

	// Set the DAC voltage
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, offset);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	4822      	ldr	r0, [pc, #136]	; (8001b7c <SetupMeasurement+0x31c>)
 8001af4:	f002 fdc6 	bl	8004684 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001af8:	2100      	movs	r1, #0
 8001afa:	4820      	ldr	r0, [pc, #128]	; (8001b7c <SetupMeasurement+0x31c>)
 8001afc:	f002 fd56 	bl	80045ac <HAL_DAC_Start>

	conv_state = PARAMETERS_SET;
 8001b00:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <SetupMeasurement+0x320>)
 8001b02:	2203      	movs	r2, #3
 8001b04:	701a      	strb	r2, [r3, #0]
	return 1;
 8001b06:	2301      	movs	r3, #1
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3730      	adds	r7, #48	; 0x30
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b12:	bf00      	nop
 8001b14:	f3af 8000 	nop.w
 8001b18:	a0b5ed8d 	.word	0xa0b5ed8d
 8001b1c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001b20:	e6d1d609 	.word	0xe6d1d609
 8001b24:	4066aa7d 	.word	0x4066aa7d
 8001b28:	9999999a 	.word	0x9999999a
 8001b2c:	3fc99999 	.word	0x3fc99999
 8001b30:	20000008 	.word	0x20000008
 8001b34:	20000000 	.word	0x20000000
 8001b38:	4039999a 	.word	0x4039999a
 8001b3c:	08011e18 	.word	0x08011e18
 8001b40:	40200000 	.word	0x40200000
 8001b44:	08011d00 	.word	0x08011d00
 8001b48:	4003126f 	.word	0x4003126f
 8001b4c:	08011d48 	.word	0x08011d48
 8001b50:	08011da0 	.word	0x08011da0
 8001b54:	20000004 	.word	0x20000004
 8001b58:	20000006 	.word	0x20000006
 8001b5c:	2000462c 	.word	0x2000462c
 8001b60:	2000071c 	.word	0x2000071c
 8001b64:	200006c8 	.word	0x200006c8
 8001b68:	40100000 	.word	0x40100000
 8001b6c:	20004634 	.word	0x20004634
 8001b70:	40b00000 	.word	0x40b00000
 8001b74:	45800000 	.word	0x45800000
 8001b78:	20004638 	.word	0x20004638
 8001b7c:	200006b4 	.word	0x200006b4
 8001b80:	20004628 	.word	0x20004628

08001b84 <SendParameters>:

int SendParameters(void) {
 8001b84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b88:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af04      	add	r7, sp, #16
	unsigned char parameters_msg[USB_TX_BUFFER_SIZE];

	sprintf((char *)parameters_msg, "CjcTmp:%.2f;AlgRfr:%.3f;AplOfs:%.4f\n", cold_junction_temp, analog_reference_voltage, applied_voltage_offset);
 8001b90:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <SendParameters+0x9c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fd0f 	bl	80005b8 <__aeabi_f2d>
 8001b9a:	4680      	mov	r8, r0
 8001b9c:	4689      	mov	r9, r1
 8001b9e:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <SendParameters+0xa0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fd08 	bl	80005b8 <__aeabi_f2d>
 8001ba8:	4604      	mov	r4, r0
 8001baa:	460d      	mov	r5, r1
 8001bac:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <SendParameters+0xa4>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fd01 	bl	80005b8 <__aeabi_f2d>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	f107 0018 	add.w	r0, r7, #24
 8001bbe:	3818      	subs	r0, #24
 8001bc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001bc4:	e9cd 4500 	strd	r4, r5, [sp]
 8001bc8:	4642      	mov	r2, r8
 8001bca:	464b      	mov	r3, r9
 8001bcc:	4917      	ldr	r1, [pc, #92]	; (8001c2c <SendParameters+0xa8>)
 8001bce:	f00c ff93 	bl	800eaf8 <siprintf>
	uint16_t line_len = strlen((char *)parameters_msg);
 8001bd2:	f107 0318 	add.w	r3, r7, #24
 8001bd6:	3b18      	subs	r3, #24
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fb81 	bl	80002e0 <strlen>
 8001bde:	4603      	mov	r3, r0
 8001be0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8001be4:	f102 0216 	add.w	r2, r2, #22
 8001be8:	8013      	strh	r3, [r2, #0]

	while(CDC_Transmit_FS(parameters_msg, line_len) != USBD_OK);
 8001bea:	bf00      	nop
 8001bec:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8001bf0:	f103 0316 	add.w	r3, r3, #22
 8001bf4:	881a      	ldrh	r2, [r3, #0]
 8001bf6:	f107 0318 	add.w	r3, r7, #24
 8001bfa:	3b18      	subs	r3, #24
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f00b fd5c 	bl	800d6bc <CDC_Transmit_FS>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <SendParameters+0x68>

	conv_state = ARMED;
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <SendParameters+0xac>)
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	701a      	strb	r2, [r3, #0]

}
 8001c10:	bf00      	nop
 8001c12:	4618      	mov	r0, r3
 8001c14:	f507 57fa 	add.w	r7, r7, #8000	; 0x1f40
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c20:	20004634 	.word	0x20004634
 8001c24:	20000000 	.word	0x20000000
 8001c28:	20004638 	.word	0x20004638
 8001c2c:	08011c94 	.word	0x08011c94
 8001c30:	20004628 	.word	0x20004628

08001c34 <StartMeasurement>:

int StartMeasurement(void) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001c38:	217f      	movs	r1, #127	; 0x7f
 8001c3a:	4818      	ldr	r0, [pc, #96]	; (8001c9c <StartMeasurement+0x68>)
 8001c3c:	f002 fa1a 	bl	8004074 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffers[0], ADC_BUFFER_SIZE);
 8001c40:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c44:	4916      	ldr	r1, [pc, #88]	; (8001ca0 <StartMeasurement+0x6c>)
 8001c46:	4815      	ldr	r0, [pc, #84]	; (8001c9c <StartMeasurement+0x68>)
 8001c48:	f001 f9fc 	bl	8003044 <HAL_ADC_Start_DMA>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001c4c:	217f      	movs	r1, #127	; 0x7f
 8001c4e:	4815      	ldr	r0, [pc, #84]	; (8001ca4 <StartMeasurement+0x70>)
 8001c50:	f002 fa10 	bl	8004074 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_buffers[1], ADC_BUFFER_SIZE);
 8001c54:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c58:	4913      	ldr	r1, [pc, #76]	; (8001ca8 <StartMeasurement+0x74>)
 8001c5a:	4812      	ldr	r0, [pc, #72]	; (8001ca4 <StartMeasurement+0x70>)
 8001c5c:	f001 f9f2 	bl	8003044 <HAL_ADC_Start_DMA>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8001c60:	217f      	movs	r1, #127	; 0x7f
 8001c62:	4812      	ldr	r0, [pc, #72]	; (8001cac <StartMeasurement+0x78>)
 8001c64:	f002 fa06 	bl	8004074 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc_buffers[2], ADC_BUFFER_SIZE);
 8001c68:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c6c:	4910      	ldr	r1, [pc, #64]	; (8001cb0 <StartMeasurement+0x7c>)
 8001c6e:	480f      	ldr	r0, [pc, #60]	; (8001cac <StartMeasurement+0x78>)
 8001c70:	f001 f9e8 	bl	8003044 <HAL_ADC_Start_DMA>
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8001c74:	217f      	movs	r1, #127	; 0x7f
 8001c76:	480f      	ldr	r0, [pc, #60]	; (8001cb4 <StartMeasurement+0x80>)
 8001c78:	f002 f9fc 	bl	8004074 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc_buffers[3], ADC_BUFFER_SIZE);
 8001c7c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c80:	490d      	ldr	r1, [pc, #52]	; (8001cb8 <StartMeasurement+0x84>)
 8001c82:	480c      	ldr	r0, [pc, #48]	; (8001cb4 <StartMeasurement+0x80>)
 8001c84:	f001 f9de 	bl	8003044 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8001c88:	480c      	ldr	r0, [pc, #48]	; (8001cbc <StartMeasurement+0x88>)
 8001c8a:	f006 ff15 	bl	8008ab8 <HAL_TIM_Base_Start_IT>
	conv_state = MEASURING;
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <StartMeasurement+0x8c>)
 8001c90:	2205      	movs	r2, #5
 8001c92:	701a      	strb	r2, [r3, #0]

	return 1;
 8001c94:	2301      	movs	r3, #1
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000384 	.word	0x20000384
 8001ca0:	20000768 	.word	0x20000768
 8001ca4:	200003f0 	.word	0x200003f0
 8001ca8:	20001708 	.word	0x20001708
 8001cac:	2000045c 	.word	0x2000045c
 8001cb0:	200026a8 	.word	0x200026a8
 8001cb4:	200004c8 	.word	0x200004c8
 8001cb8:	20003648 	.word	0x20003648
 8001cbc:	2000071c 	.word	0x2000071c
 8001cc0:	20004628 	.word	0x20004628

08001cc4 <HAL_ADC_ConvHalfCpltCallback>:

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d103      	bne.n	8001cdc <HAL_ADC_ConvHalfCpltCallback+0x18>
		adc_state[0] = START_FULL;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	701a      	strb	r2, [r3, #0]
		adc_state[2] = START_FULL;
	}
	else if(hadc == &hadc4){
		adc_state[3] = START_FULL;
	}
}
 8001cda:	e016      	b.n	8001d0a <HAL_ADC_ConvHalfCpltCallback+0x46>
	else if(hadc == &hadc2){
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a10      	ldr	r2, [pc, #64]	; (8001d20 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d103      	bne.n	8001cec <HAL_ADC_ConvHalfCpltCallback+0x28>
		adc_state[1] = START_FULL;
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	705a      	strb	r2, [r3, #1]
}
 8001cea:	e00e      	b.n	8001d0a <HAL_ADC_ConvHalfCpltCallback+0x46>
	else if(hadc == &hadc3){
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a0d      	ldr	r2, [pc, #52]	; (8001d24 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d103      	bne.n	8001cfc <HAL_ADC_ConvHalfCpltCallback+0x38>
		adc_state[2] = START_FULL;
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	709a      	strb	r2, [r3, #2]
}
 8001cfa:	e006      	b.n	8001d0a <HAL_ADC_ConvHalfCpltCallback+0x46>
	else if(hadc == &hadc4){
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d102      	bne.n	8001d0a <HAL_ADC_ConvHalfCpltCallback+0x46>
		adc_state[3] = START_FULL;
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	70da      	strb	r2, [r3, #3]
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20000384 	.word	0x20000384
 8001d1c:	20004640 	.word	0x20004640
 8001d20:	200003f0 	.word	0x200003f0
 8001d24:	2000045c 	.word	0x2000045c
 8001d28:	200004c8 	.word	0x200004c8

08001d2c <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	printf("Asdf");
 8001d34:	4812      	ldr	r0, [pc, #72]	; (8001d80 <HAL_ADC_ConvCpltCallback+0x54>)
 8001d36:	f00c fecd 	bl	800ead4 <iprintf>
	if (hadc == &hadc1){
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a11      	ldr	r2, [pc, #68]	; (8001d84 <HAL_ADC_ConvCpltCallback+0x58>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d103      	bne.n	8001d4a <HAL_ADC_ConvCpltCallback+0x1e>
		adc_state[0] = END_FULL;
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001d44:	2202      	movs	r2, #2
 8001d46:	701a      	strb	r2, [r3, #0]
		adc_state[2] = END_FULL;
	}
	else if(hadc == &hadc4){
		adc_state[3] = END_FULL;
	}
}
 8001d48:	e016      	b.n	8001d78 <HAL_ADC_ConvCpltCallback+0x4c>
	else if(hadc == &hadc2){
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a0f      	ldr	r2, [pc, #60]	; (8001d8c <HAL_ADC_ConvCpltCallback+0x60>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d103      	bne.n	8001d5a <HAL_ADC_ConvCpltCallback+0x2e>
		adc_state[1] = END_FULL;
 8001d52:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001d54:	2202      	movs	r2, #2
 8001d56:	705a      	strb	r2, [r3, #1]
}
 8001d58:	e00e      	b.n	8001d78 <HAL_ADC_ConvCpltCallback+0x4c>
	else if(hadc == &hadc3){
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a0c      	ldr	r2, [pc, #48]	; (8001d90 <HAL_ADC_ConvCpltCallback+0x64>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d103      	bne.n	8001d6a <HAL_ADC_ConvCpltCallback+0x3e>
		adc_state[2] = END_FULL;
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001d64:	2202      	movs	r2, #2
 8001d66:	709a      	strb	r2, [r3, #2]
}
 8001d68:	e006      	b.n	8001d78 <HAL_ADC_ConvCpltCallback+0x4c>
	else if(hadc == &hadc4){
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a09      	ldr	r2, [pc, #36]	; (8001d94 <HAL_ADC_ConvCpltCallback+0x68>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d102      	bne.n	8001d78 <HAL_ADC_ConvCpltCallback+0x4c>
		adc_state[3] = END_FULL;
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001d74:	2202      	movs	r2, #2
 8001d76:	70da      	strb	r2, [r3, #3]
}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	08011cbc 	.word	0x08011cbc
 8001d84:	20000384 	.word	0x20000384
 8001d88:	20004640 	.word	0x20004640
 8001d8c:	200003f0 	.word	0x200003f0
 8001d90:	2000045c 	.word	0x2000045c
 8001d94:	200004c8 	.word	0x200004c8

08001d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d9c:	b672      	cpsid	i
}
 8001d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <Error_Handler+0x8>
	...

08001da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <HAL_MspInit+0x54>)
 8001dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dae:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <HAL_MspInit+0x54>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6613      	str	r3, [r2, #96]	; 0x60
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <HAL_MspInit+0x54>)
 8001db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_MspInit+0x54>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	4a0c      	ldr	r2, [pc, #48]	; (8001df8 <HAL_MspInit+0x54>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dce:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <HAL_MspInit+0x54>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8001dda:	2020      	movs	r0, #32
 8001ddc:	f000 fcbe 	bl	800275c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8001de0:	f000 fce4 	bl	80027ac <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f000 fccd 	bl	8002784 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001dea:	f005 fead 	bl	8007b48 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000

08001dfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b0a4      	sub	sp, #144	; 0x90
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e18:	2254      	movs	r2, #84	; 0x54
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f00c fece 	bl	800ebbe <memset>
  if(hadc->Instance==ADC1)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e2a:	d16b      	bne.n	8001f04 <HAL_ADC_MspInit+0x108>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001e2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8001e32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001e36:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f006 fb95 	bl	800856c <HAL_RCCEx_PeriphCLKConfig>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001e48:	f7ff ffa6 	bl	8001d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e4c:	4b9e      	ldr	r3, [pc, #632]	; (80020c8 <HAL_ADC_MspInit+0x2cc>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	3301      	adds	r3, #1
 8001e52:	4a9d      	ldr	r2, [pc, #628]	; (80020c8 <HAL_ADC_MspInit+0x2cc>)
 8001e54:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e56:	4b9c      	ldr	r3, [pc, #624]	; (80020c8 <HAL_ADC_MspInit+0x2cc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d10b      	bne.n	8001e76 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e5e:	4b9b      	ldr	r3, [pc, #620]	; (80020cc <HAL_ADC_MspInit+0x2d0>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	4a9a      	ldr	r2, [pc, #616]	; (80020cc <HAL_ADC_MspInit+0x2d0>)
 8001e64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6a:	4b98      	ldr	r3, [pc, #608]	; (80020cc <HAL_ADC_MspInit+0x2d0>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	4b95      	ldr	r3, [pc, #596]	; (80020cc <HAL_ADC_MspInit+0x2d0>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	4a94      	ldr	r2, [pc, #592]	; (80020cc <HAL_ADC_MspInit+0x2d0>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e82:	4b92      	ldr	r3, [pc, #584]	; (80020cc <HAL_ADC_MspInit+0x2d0>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	623b      	str	r3, [r7, #32]
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e92:	2303      	movs	r3, #3
 8001e94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea8:	f003 f89e 	bl	8004fe8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001eac:	4b88      	ldr	r3, [pc, #544]	; (80020d0 <HAL_ADC_MspInit+0x2d4>)
 8001eae:	4a89      	ldr	r2, [pc, #548]	; (80020d4 <HAL_ADC_MspInit+0x2d8>)
 8001eb0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001eb2:	4b87      	ldr	r3, [pc, #540]	; (80020d0 <HAL_ADC_MspInit+0x2d4>)
 8001eb4:	2205      	movs	r2, #5
 8001eb6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eb8:	4b85      	ldr	r3, [pc, #532]	; (80020d0 <HAL_ADC_MspInit+0x2d4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ebe:	4b84      	ldr	r3, [pc, #528]	; (80020d0 <HAL_ADC_MspInit+0x2d4>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ec4:	4b82      	ldr	r3, [pc, #520]	; (80020d0 <HAL_ADC_MspInit+0x2d4>)
 8001ec6:	2280      	movs	r2, #128	; 0x80
 8001ec8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001eca:	4b81      	ldr	r3, [pc, #516]	; (80020d0 <HAL_ADC_MspInit+0x2d4>)
 8001ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ed0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ed2:	4b7f      	ldr	r3, [pc, #508]	; (80020d0 <HAL_ADC_MspInit+0x2d4>)
 8001ed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ed8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001eda:	4b7d      	ldr	r3, [pc, #500]	; (80020d0 <HAL_ADC_MspInit+0x2d4>)
 8001edc:	2220      	movs	r2, #32
 8001ede:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ee0:	4b7b      	ldr	r3, [pc, #492]	; (80020d0 <HAL_ADC_MspInit+0x2d4>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ee6:	487a      	ldr	r0, [pc, #488]	; (80020d0 <HAL_ADC_MspInit+0x2d4>)
 8001ee8:	f002 fdb2 	bl	8004a50 <HAL_DMA_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001ef2:	f7ff ff51 	bl	8001d98 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a75      	ldr	r2, [pc, #468]	; (80020d0 <HAL_ADC_MspInit+0x2d4>)
 8001efa:	655a      	str	r2, [r3, #84]	; 0x54
 8001efc:	4a74      	ldr	r2, [pc, #464]	; (80020d0 <HAL_ADC_MspInit+0x2d4>)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001f02:	e169      	b.n	80021d8 <HAL_ADC_MspInit+0x3dc>
  else if(hadc->Instance==ADC2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a73      	ldr	r2, [pc, #460]	; (80020d8 <HAL_ADC_MspInit+0x2dc>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d16b      	bne.n	8001fe6 <HAL_ADC_MspInit+0x1ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8001f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f18:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f006 fb24 	bl	800856c <HAL_RCCEx_PeriphCLKConfig>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_ADC_MspInit+0x132>
      Error_Handler();
 8001f2a:	f7ff ff35 	bl	8001d98 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f2e:	4b66      	ldr	r3, [pc, #408]	; (80020c8 <HAL_ADC_MspInit+0x2cc>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	3301      	adds	r3, #1
 8001f34:	4a64      	ldr	r2, [pc, #400]	; (80020c8 <HAL_ADC_MspInit+0x2cc>)
 8001f36:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001f38:	4b63      	ldr	r3, [pc, #396]	; (80020c8 <HAL_ADC_MspInit+0x2cc>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d10b      	bne.n	8001f58 <HAL_ADC_MspInit+0x15c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001f40:	4b62      	ldr	r3, [pc, #392]	; (80020cc <HAL_ADC_MspInit+0x2d0>)
 8001f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f44:	4a61      	ldr	r2, [pc, #388]	; (80020cc <HAL_ADC_MspInit+0x2d0>)
 8001f46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4c:	4b5f      	ldr	r3, [pc, #380]	; (80020cc <HAL_ADC_MspInit+0x2d0>)
 8001f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f58:	4b5c      	ldr	r3, [pc, #368]	; (80020cc <HAL_ADC_MspInit+0x2d0>)
 8001f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5c:	4a5b      	ldr	r2, [pc, #364]	; (80020cc <HAL_ADC_MspInit+0x2d0>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f64:	4b59      	ldr	r3, [pc, #356]	; (80020cc <HAL_ADC_MspInit+0x2d0>)
 8001f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	61bb      	str	r3, [r7, #24]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f70:	2340      	movs	r3, #64	; 0x40
 8001f72:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f74:	2303      	movs	r3, #3
 8001f76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f80:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f84:	4619      	mov	r1, r3
 8001f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8a:	f003 f82d 	bl	8004fe8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001f8e:	4b53      	ldr	r3, [pc, #332]	; (80020dc <HAL_ADC_MspInit+0x2e0>)
 8001f90:	4a53      	ldr	r2, [pc, #332]	; (80020e0 <HAL_ADC_MspInit+0x2e4>)
 8001f92:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001f94:	4b51      	ldr	r3, [pc, #324]	; (80020dc <HAL_ADC_MspInit+0x2e0>)
 8001f96:	2224      	movs	r2, #36	; 0x24
 8001f98:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f9a:	4b50      	ldr	r3, [pc, #320]	; (80020dc <HAL_ADC_MspInit+0x2e0>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa0:	4b4e      	ldr	r3, [pc, #312]	; (80020dc <HAL_ADC_MspInit+0x2e0>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001fa6:	4b4d      	ldr	r3, [pc, #308]	; (80020dc <HAL_ADC_MspInit+0x2e0>)
 8001fa8:	2280      	movs	r2, #128	; 0x80
 8001faa:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fac:	4b4b      	ldr	r3, [pc, #300]	; (80020dc <HAL_ADC_MspInit+0x2e0>)
 8001fae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fb2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fb4:	4b49      	ldr	r3, [pc, #292]	; (80020dc <HAL_ADC_MspInit+0x2e0>)
 8001fb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fba:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001fbc:	4b47      	ldr	r3, [pc, #284]	; (80020dc <HAL_ADC_MspInit+0x2e0>)
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001fc2:	4b46      	ldr	r3, [pc, #280]	; (80020dc <HAL_ADC_MspInit+0x2e0>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001fc8:	4844      	ldr	r0, [pc, #272]	; (80020dc <HAL_ADC_MspInit+0x2e0>)
 8001fca:	f002 fd41 	bl	8004a50 <HAL_DMA_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <HAL_ADC_MspInit+0x1dc>
      Error_Handler();
 8001fd4:	f7ff fee0 	bl	8001d98 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a40      	ldr	r2, [pc, #256]	; (80020dc <HAL_ADC_MspInit+0x2e0>)
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54
 8001fde:	4a3f      	ldr	r2, [pc, #252]	; (80020dc <HAL_ADC_MspInit+0x2e0>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001fe4:	e0f8      	b.n	80021d8 <HAL_ADC_MspInit+0x3dc>
  else if(hadc->Instance==ADC3)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a3e      	ldr	r2, [pc, #248]	; (80020e4 <HAL_ADC_MspInit+0x2e8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	f040 8083 	bne.w	80020f8 <HAL_ADC_MspInit+0x2fc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001ff2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8001ff8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ffc:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ffe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002002:	4618      	mov	r0, r3
 8002004:	f006 fab2 	bl	800856c <HAL_RCCEx_PeriphCLKConfig>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_ADC_MspInit+0x216>
      Error_Handler();
 800200e:	f7ff fec3 	bl	8001d98 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8002012:	4b35      	ldr	r3, [pc, #212]	; (80020e8 <HAL_ADC_MspInit+0x2ec>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	3301      	adds	r3, #1
 8002018:	4a33      	ldr	r2, [pc, #204]	; (80020e8 <HAL_ADC_MspInit+0x2ec>)
 800201a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800201c:	4b32      	ldr	r3, [pc, #200]	; (80020e8 <HAL_ADC_MspInit+0x2ec>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d10b      	bne.n	800203c <HAL_ADC_MspInit+0x240>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8002024:	4b29      	ldr	r3, [pc, #164]	; (80020cc <HAL_ADC_MspInit+0x2d0>)
 8002026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002028:	4a28      	ldr	r2, [pc, #160]	; (80020cc <HAL_ADC_MspInit+0x2d0>)
 800202a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800202e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002030:	4b26      	ldr	r3, [pc, #152]	; (80020cc <HAL_ADC_MspInit+0x2d0>)
 8002032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203c:	4b23      	ldr	r3, [pc, #140]	; (80020cc <HAL_ADC_MspInit+0x2d0>)
 800203e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002040:	4a22      	ldr	r2, [pc, #136]	; (80020cc <HAL_ADC_MspInit+0x2d0>)
 8002042:	f043 0302 	orr.w	r3, r3, #2
 8002046:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002048:	4b20      	ldr	r3, [pc, #128]	; (80020cc <HAL_ADC_MspInit+0x2d0>)
 800204a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002054:	2302      	movs	r3, #2
 8002056:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002058:	2303      	movs	r3, #3
 800205a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002068:	4619      	mov	r1, r3
 800206a:	4820      	ldr	r0, [pc, #128]	; (80020ec <HAL_ADC_MspInit+0x2f0>)
 800206c:	f002 ffbc 	bl	8004fe8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8002070:	4b1f      	ldr	r3, [pc, #124]	; (80020f0 <HAL_ADC_MspInit+0x2f4>)
 8002072:	4a20      	ldr	r2, [pc, #128]	; (80020f4 <HAL_ADC_MspInit+0x2f8>)
 8002074:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002076:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <HAL_ADC_MspInit+0x2f4>)
 8002078:	2225      	movs	r2, #37	; 0x25
 800207a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800207c:	4b1c      	ldr	r3, [pc, #112]	; (80020f0 <HAL_ADC_MspInit+0x2f4>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002082:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <HAL_ADC_MspInit+0x2f4>)
 8002084:	2200      	movs	r2, #0
 8002086:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <HAL_ADC_MspInit+0x2f4>)
 800208a:	2280      	movs	r2, #128	; 0x80
 800208c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800208e:	4b18      	ldr	r3, [pc, #96]	; (80020f0 <HAL_ADC_MspInit+0x2f4>)
 8002090:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002094:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002096:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <HAL_ADC_MspInit+0x2f4>)
 8002098:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800209c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800209e:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <HAL_ADC_MspInit+0x2f4>)
 80020a0:	2220      	movs	r2, #32
 80020a2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80020a4:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <HAL_ADC_MspInit+0x2f4>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80020aa:	4811      	ldr	r0, [pc, #68]	; (80020f0 <HAL_ADC_MspInit+0x2f4>)
 80020ac:	f002 fcd0 	bl	8004a50 <HAL_DMA_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_ADC_MspInit+0x2be>
      Error_Handler();
 80020b6:	f7ff fe6f 	bl	8001d98 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a0c      	ldr	r2, [pc, #48]	; (80020f0 <HAL_ADC_MspInit+0x2f4>)
 80020be:	655a      	str	r2, [r3, #84]	; 0x54
 80020c0:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <HAL_ADC_MspInit+0x2f4>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80020c6:	e087      	b.n	80021d8 <HAL_ADC_MspInit+0x3dc>
 80020c8:	20004644 	.word	0x20004644
 80020cc:	40021000 	.word	0x40021000
 80020d0:	20000534 	.word	0x20000534
 80020d4:	40020008 	.word	0x40020008
 80020d8:	50000100 	.word	0x50000100
 80020dc:	20000594 	.word	0x20000594
 80020e0:	4002001c 	.word	0x4002001c
 80020e4:	50000400 	.word	0x50000400
 80020e8:	20004648 	.word	0x20004648
 80020ec:	48000400 	.word	0x48000400
 80020f0:	200005f4 	.word	0x200005f4
 80020f4:	40020030 	.word	0x40020030
  else if(hadc->Instance==ADC4)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a38      	ldr	r2, [pc, #224]	; (80021e0 <HAL_ADC_MspInit+0x3e4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d16a      	bne.n	80021d8 <HAL_ADC_MspInit+0x3dc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8002102:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8002108:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800210c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800210e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002112:	4618      	mov	r0, r3
 8002114:	f006 fa2a 	bl	800856c <HAL_RCCEx_PeriphCLKConfig>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_ADC_MspInit+0x326>
      Error_Handler();
 800211e:	f7ff fe3b 	bl	8001d98 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8002122:	4b30      	ldr	r3, [pc, #192]	; (80021e4 <HAL_ADC_MspInit+0x3e8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	3301      	adds	r3, #1
 8002128:	4a2e      	ldr	r2, [pc, #184]	; (80021e4 <HAL_ADC_MspInit+0x3e8>)
 800212a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800212c:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <HAL_ADC_MspInit+0x3e8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d10b      	bne.n	800214c <HAL_ADC_MspInit+0x350>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8002134:	4b2c      	ldr	r3, [pc, #176]	; (80021e8 <HAL_ADC_MspInit+0x3ec>)
 8002136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002138:	4a2b      	ldr	r2, [pc, #172]	; (80021e8 <HAL_ADC_MspInit+0x3ec>)
 800213a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800213e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002140:	4b29      	ldr	r3, [pc, #164]	; (80021e8 <HAL_ADC_MspInit+0x3ec>)
 8002142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800214c:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <HAL_ADC_MspInit+0x3ec>)
 800214e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002150:	4a25      	ldr	r2, [pc, #148]	; (80021e8 <HAL_ADC_MspInit+0x3ec>)
 8002152:	f043 0302 	orr.w	r3, r3, #2
 8002156:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002158:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <HAL_ADC_MspInit+0x3ec>)
 800215a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002164:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002168:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800216a:	2303      	movs	r3, #3
 800216c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002176:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800217a:	4619      	mov	r1, r3
 800217c:	481b      	ldr	r0, [pc, #108]	; (80021ec <HAL_ADC_MspInit+0x3f0>)
 800217e:	f002 ff33 	bl	8004fe8 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8002182:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <HAL_ADC_MspInit+0x3f4>)
 8002184:	4a1b      	ldr	r2, [pc, #108]	; (80021f4 <HAL_ADC_MspInit+0x3f8>)
 8002186:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8002188:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <HAL_ADC_MspInit+0x3f4>)
 800218a:	2226      	movs	r2, #38	; 0x26
 800218c:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800218e:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <HAL_ADC_MspInit+0x3f4>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002194:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <HAL_ADC_MspInit+0x3f4>)
 8002196:	2200      	movs	r2, #0
 8002198:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <HAL_ADC_MspInit+0x3f4>)
 800219c:	2280      	movs	r2, #128	; 0x80
 800219e:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <HAL_ADC_MspInit+0x3f4>)
 80021a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021a6:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_ADC_MspInit+0x3f4>)
 80021aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ae:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80021b0:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <HAL_ADC_MspInit+0x3f4>)
 80021b2:	2220      	movs	r2, #32
 80021b4:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80021b6:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <HAL_ADC_MspInit+0x3f4>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <HAL_ADC_MspInit+0x3f4>)
 80021be:	f002 fc47 	bl	8004a50 <HAL_DMA_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_ADC_MspInit+0x3d0>
      Error_Handler();
 80021c8:	f7ff fde6 	bl	8001d98 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a08      	ldr	r2, [pc, #32]	; (80021f0 <HAL_ADC_MspInit+0x3f4>)
 80021d0:	655a      	str	r2, [r3, #84]	; 0x54
 80021d2:	4a07      	ldr	r2, [pc, #28]	; (80021f0 <HAL_ADC_MspInit+0x3f4>)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6293      	str	r3, [r2, #40]	; 0x28
}
 80021d8:	bf00      	nop
 80021da:	3790      	adds	r7, #144	; 0x90
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	50000500 	.word	0x50000500
 80021e4:	20004648 	.word	0x20004648
 80021e8:	40021000 	.word	0x40021000
 80021ec:	48000400 	.word	0x48000400
 80021f0:	20000654 	.word	0x20000654
 80021f4:	40020044 	.word	0x40020044

080021f8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	; 0x28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a15      	ldr	r2, [pc, #84]	; (800226c <HAL_DAC_MspInit+0x74>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d124      	bne.n	8002264 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800221a:	4b15      	ldr	r3, [pc, #84]	; (8002270 <HAL_DAC_MspInit+0x78>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	4a14      	ldr	r2, [pc, #80]	; (8002270 <HAL_DAC_MspInit+0x78>)
 8002220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_DAC_MspInit+0x78>)
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <HAL_DAC_MspInit+0x78>)
 8002234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002236:	4a0e      	ldr	r2, [pc, #56]	; (8002270 <HAL_DAC_MspInit+0x78>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800223e:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <HAL_DAC_MspInit+0x78>)
 8002240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800224a:	2310      	movs	r3, #16
 800224c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800224e:	2303      	movs	r3, #3
 8002250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002256:	f107 0314 	add.w	r3, r7, #20
 800225a:	4619      	mov	r1, r3
 800225c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002260:	f002 fec2 	bl	8004fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002264:	bf00      	nop
 8002266:	3728      	adds	r7, #40	; 0x28
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	50000800 	.word	0x50000800
 8002270:	40021000 	.word	0x40021000

08002274 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b09e      	sub	sp, #120	; 0x78
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800228c:	f107 0310 	add.w	r3, r7, #16
 8002290:	2254      	movs	r2, #84	; 0x54
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f00c fc92 	bl	800ebbe <memset>
  if(hi2c->Instance==I2C3)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1f      	ldr	r2, [pc, #124]	; (800231c <HAL_I2C_MspInit+0xa8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d137      	bne.n	8002314 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80022a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80022aa:	2300      	movs	r3, #0
 80022ac:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ae:	f107 0310 	add.w	r3, r7, #16
 80022b2:	4618      	mov	r0, r3
 80022b4:	f006 f95a 	bl	800856c <HAL_RCCEx_PeriphCLKConfig>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80022be:	f7ff fd6b 	bl	8001d98 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c2:	4b17      	ldr	r3, [pc, #92]	; (8002320 <HAL_I2C_MspInit+0xac>)
 80022c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c6:	4a16      	ldr	r2, [pc, #88]	; (8002320 <HAL_I2C_MspInit+0xac>)
 80022c8:	f043 0304 	orr.w	r3, r3, #4
 80022cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ce:	4b14      	ldr	r3, [pc, #80]	; (8002320 <HAL_I2C_MspInit+0xac>)
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = TEMP_SCL_Pin|TEMP_SDA_Pin;
 80022da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022de:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022e0:	2312      	movs	r3, #18
 80022e2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2300      	movs	r3, #0
 80022ea:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80022ec:	2308      	movs	r3, #8
 80022ee:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022f4:	4619      	mov	r1, r3
 80022f6:	480b      	ldr	r0, [pc, #44]	; (8002324 <HAL_I2C_MspInit+0xb0>)
 80022f8:	f002 fe76 	bl	8004fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <HAL_I2C_MspInit+0xac>)
 80022fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002300:	4a07      	ldr	r2, [pc, #28]	; (8002320 <HAL_I2C_MspInit+0xac>)
 8002302:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002306:	6593      	str	r3, [r2, #88]	; 0x58
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_I2C_MspInit+0xac>)
 800230a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002314:	bf00      	nop
 8002316:	3778      	adds	r7, #120	; 0x78
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40007800 	.word	0x40007800
 8002320:	40021000 	.word	0x40021000
 8002324:	48000800 	.word	0x48000800

08002328 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002338:	d113      	bne.n	8002362 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800233a:	4b0c      	ldr	r3, [pc, #48]	; (800236c <HAL_TIM_Base_MspInit+0x44>)
 800233c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233e:	4a0b      	ldr	r2, [pc, #44]	; (800236c <HAL_TIM_Base_MspInit+0x44>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6593      	str	r3, [r2, #88]	; 0x58
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_TIM_Base_MspInit+0x44>)
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	201c      	movs	r0, #28
 8002358:	f002 f8d1 	bl	80044fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800235c:	201c      	movs	r0, #28
 800235e:	f002 f8e8 	bl	8004532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000

08002370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002374:	e7fe      	b.n	8002374 <NMI_Handler+0x4>

08002376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800237a:	e7fe      	b.n	800237a <HardFault_Handler+0x4>

0800237c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002380:	e7fe      	b.n	8002380 <MemManage_Handler+0x4>

08002382 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002386:	e7fe      	b.n	8002386 <BusFault_Handler+0x4>

08002388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800238c:	e7fe      	b.n	800238c <UsageFault_Handler+0x4>

0800238e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023bc:	f000 f9b0 	bl	8002720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023c8:	4802      	ldr	r0, [pc, #8]	; (80023d4 <DMA1_Channel1_IRQHandler+0x10>)
 80023ca:	f002 fcbd 	bl	8004d48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000534 	.word	0x20000534

080023d8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80023dc:	4802      	ldr	r0, [pc, #8]	; (80023e8 <DMA1_Channel2_IRQHandler+0x10>)
 80023de:	f002 fcb3 	bl	8004d48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000594 	.word	0x20000594

080023ec <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80023f0:	4802      	ldr	r0, [pc, #8]	; (80023fc <DMA1_Channel3_IRQHandler+0x10>)
 80023f2:	f002 fca9 	bl	8004d48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	200005f4 	.word	0x200005f4

08002400 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8002404:	4802      	ldr	r0, [pc, #8]	; (8002410 <DMA1_Channel4_IRQHandler+0x10>)
 8002406:	f002 fc9f 	bl	8004d48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000654 	.word	0x20000654

08002414 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002418:	4802      	ldr	r0, [pc, #8]	; (8002424 <USB_HP_IRQHandler+0x10>)
 800241a:	f003 feac 	bl	8006176 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20005b28 	.word	0x20005b28

08002428 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800242c:	4802      	ldr	r0, [pc, #8]	; (8002438 <USB_LP_IRQHandler+0x10>)
 800242e:	f003 fea2 	bl	8006176 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20005b28 	.word	0x20005b28

0800243c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002440:	4809      	ldr	r0, [pc, #36]	; (8002468 <TIM2_IRQHandler+0x2c>)
 8002442:	f006 fbe0 	bl	8008c06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  conv_count++;
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <TIM2_IRQHandler+0x30>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3301      	adds	r3, #1
 800244c:	4a07      	ldr	r2, [pc, #28]	; (800246c <TIM2_IRQHandler+0x30>)
 800244e:	6013      	str	r3, [r2, #0]
  if(conv_count > target_conv_count){
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <TIM2_IRQHandler+0x30>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <TIM2_IRQHandler+0x34>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	dd02      	ble.n	8002462 <TIM2_IRQHandler+0x26>
	  conv_state = DONE;
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <TIM2_IRQHandler+0x38>)
 800245e:	2206      	movs	r2, #6
 8002460:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	2000071c 	.word	0x2000071c
 800246c:	20004630 	.word	0x20004630
 8002470:	2000462c 	.word	0x2000462c
 8002474:	20004628 	.word	0x20004628

08002478 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return 1;
 800247c:	2301      	movs	r3, #1
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <_kill>:

int _kill(int pid, int sig)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002492:	f00c fbf9 	bl	800ec88 <__errno>
 8002496:	4603      	mov	r3, r0
 8002498:	2216      	movs	r2, #22
 800249a:	601a      	str	r2, [r3, #0]
  return -1;
 800249c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <_exit>:

void _exit (int status)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024b0:	f04f 31ff 	mov.w	r1, #4294967295
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ffe7 	bl	8002488 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024ba:	e7fe      	b.n	80024ba <_exit+0x12>

080024bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	e00a      	b.n	80024e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024ce:	f3af 8000 	nop.w
 80024d2:	4601      	mov	r1, r0
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	60ba      	str	r2, [r7, #8]
 80024da:	b2ca      	uxtb	r2, r1
 80024dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	3301      	adds	r3, #1
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	dbf0      	blt.n	80024ce <_read+0x12>
  }

  return len;
 80024ec:	687b      	ldr	r3, [r7, #4]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	e009      	b.n	800251c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	60ba      	str	r2, [r7, #8]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	3301      	adds	r3, #1
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	429a      	cmp	r2, r3
 8002522:	dbf1      	blt.n	8002508 <_write+0x12>
  }
  return len;
 8002524:	687b      	ldr	r3, [r7, #4]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <_close>:

int _close(int file)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002536:	f04f 33ff 	mov.w	r3, #4294967295
}
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002556:	605a      	str	r2, [r3, #4]
  return 0;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <_isatty>:

int _isatty(int file)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800256e:	2301      	movs	r3, #1
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
	...

08002598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025a0:	4a14      	ldr	r2, [pc, #80]	; (80025f4 <_sbrk+0x5c>)
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <_sbrk+0x60>)
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <_sbrk+0x64>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d102      	bne.n	80025ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <_sbrk+0x64>)
 80025b6:	4a12      	ldr	r2, [pc, #72]	; (8002600 <_sbrk+0x68>)
 80025b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <_sbrk+0x64>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d207      	bcs.n	80025d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c8:	f00c fb5e 	bl	800ec88 <__errno>
 80025cc:	4603      	mov	r3, r0
 80025ce:	220c      	movs	r2, #12
 80025d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	e009      	b.n	80025ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <_sbrk+0x64>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025de:	4b07      	ldr	r3, [pc, #28]	; (80025fc <_sbrk+0x64>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	4a05      	ldr	r2, [pc, #20]	; (80025fc <_sbrk+0x64>)
 80025e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ea:	68fb      	ldr	r3, [r7, #12]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20020000 	.word	0x20020000
 80025f8:	00001000 	.word	0x00001000
 80025fc:	2000464c 	.word	0x2000464c
 8002600:	20006170 	.word	0x20006170

08002604 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <SystemInit+0x20>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	4a05      	ldr	r2, [pc, #20]	; (8002624 <SystemInit+0x20>)
 8002610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002628:	480d      	ldr	r0, [pc, #52]	; (8002660 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800262a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800262c:	f7ff ffea 	bl	8002604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002630:	480c      	ldr	r0, [pc, #48]	; (8002664 <LoopForever+0x6>)
  ldr r1, =_edata
 8002632:	490d      	ldr	r1, [pc, #52]	; (8002668 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002634:	4a0d      	ldr	r2, [pc, #52]	; (800266c <LoopForever+0xe>)
  movs r3, #0
 8002636:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002638:	e002      	b.n	8002640 <LoopCopyDataInit>

0800263a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800263a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800263c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800263e:	3304      	adds	r3, #4

08002640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002644:	d3f9      	bcc.n	800263a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002646:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002648:	4c0a      	ldr	r4, [pc, #40]	; (8002674 <LoopForever+0x16>)
  movs r3, #0
 800264a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800264c:	e001      	b.n	8002652 <LoopFillZerobss>

0800264e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800264e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002650:	3204      	adds	r2, #4

08002652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002654:	d3fb      	bcc.n	800264e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002656:	f00c fb1d 	bl	800ec94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800265a:	f7fe fb4d 	bl	8000cf8 <main>

0800265e <LoopForever>:

LoopForever:
    b LoopForever
 800265e:	e7fe      	b.n	800265e <LoopForever>
  ldr   r0, =_estack
 8002660:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002668:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 800266c:	08012248 	.word	0x08012248
  ldr r2, =_sbss
 8002670:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 8002674:	20006170 	.word	0x20006170

08002678 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002678:	e7fe      	b.n	8002678 <ADC1_2_IRQHandler>

0800267a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002684:	2003      	movs	r0, #3
 8002686:	f001 ff2f 	bl	80044e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800268a:	2000      	movs	r0, #0
 800268c:	f000 f80e 	bl	80026ac <HAL_InitTick>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	71fb      	strb	r3, [r7, #7]
 800269a:	e001      	b.n	80026a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800269c:	f7ff fb82 	bl	8001da4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026a0:	79fb      	ldrb	r3, [r7, #7]

}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80026b8:	4b16      	ldr	r3, [pc, #88]	; (8002714 <HAL_InitTick+0x68>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d022      	beq.n	8002706 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80026c0:	4b15      	ldr	r3, [pc, #84]	; (8002718 <HAL_InitTick+0x6c>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b13      	ldr	r3, [pc, #76]	; (8002714 <HAL_InitTick+0x68>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80026d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d4:	4618      	mov	r0, r3
 80026d6:	f001 ff3a 	bl	800454e <HAL_SYSTICK_Config>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10f      	bne.n	8002700 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b0f      	cmp	r3, #15
 80026e4:	d809      	bhi.n	80026fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e6:	2200      	movs	r2, #0
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	f04f 30ff 	mov.w	r0, #4294967295
 80026ee:	f001 ff06 	bl	80044fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026f2:	4a0a      	ldr	r2, [pc, #40]	; (800271c <HAL_InitTick+0x70>)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	e007      	b.n	800270a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	e004      	b.n	800270a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	73fb      	strb	r3, [r7, #15]
 8002704:	e001      	b.n	800270a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800270a:	7bfb      	ldrb	r3, [r7, #15]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000014 	.word	0x20000014
 8002718:	2000000c 	.word	0x2000000c
 800271c:	20000010 	.word	0x20000010

08002720 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_IncTick+0x1c>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_IncTick+0x20>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4413      	add	r3, r2
 800272e:	4a03      	ldr	r2, [pc, #12]	; (800273c <HAL_IncTick+0x1c>)
 8002730:	6013      	str	r3, [r2, #0]
}
 8002732:	bf00      	nop
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	20004650 	.word	0x20004650
 8002740:	20000014 	.word	0x20000014

08002744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return uwTick;
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <HAL_GetTick+0x14>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	20004650 	.word	0x20004650

0800275c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800276c:	4904      	ldr	r1, [pc, #16]	; (8002780 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	40010030 	.word	0x40010030

08002784 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f023 0202 	bic.w	r2, r3, #2
 8002794:	4904      	ldr	r1, [pc, #16]	; (80027a8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4313      	orrs	r3, r2
 800279a:	600b      	str	r3, [r1, #0]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	40010030 	.word	0x40010030

080027ac <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80027b2:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a0e      	ldr	r2, [pc, #56]	; (80027f0 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027be:	f7ff ffc1 	bl	8002744 <HAL_GetTick>
 80027c2:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80027c4:	e008      	b.n	80027d8 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80027c6:	f7ff ffbd 	bl	8002744 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b0a      	cmp	r3, #10
 80027d2:	d901      	bls.n	80027d8 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e006      	b.n	80027e6 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40010030 	.word	0x40010030

080027f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	609a      	str	r2, [r3, #8]
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	609a      	str	r2, [r3, #8]
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	3360      	adds	r3, #96	; 0x60
 800286e:	461a      	mov	r2, r3
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <LL_ADC_SetOffset+0x44>)
 800287e:	4013      	ands	r3, r2
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	4313      	orrs	r3, r2
 800288c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002894:	bf00      	nop
 8002896:	371c      	adds	r7, #28
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	03fff000 	.word	0x03fff000

080028a4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3360      	adds	r3, #96	; 0x60
 80028b2:	461a      	mov	r2, r3
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	3360      	adds	r3, #96	; 0x60
 80028e0:	461a      	mov	r2, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	431a      	orrs	r2, r3
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028fa:	bf00      	nop
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002906:	b480      	push	{r7}
 8002908:	b087      	sub	sp, #28
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	3360      	adds	r3, #96	; 0x60
 8002916:	461a      	mov	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	431a      	orrs	r2, r3
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002930:	bf00      	nop
 8002932:	371c      	adds	r7, #28
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	3360      	adds	r3, #96	; 0x60
 800294c:	461a      	mov	r2, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	431a      	orrs	r2, r3
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002966:	bf00      	nop
 8002968:	371c      	adds	r7, #28
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	615a      	str	r2, [r3, #20]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029be:	b480      	push	{r7}
 80029c0:	b087      	sub	sp, #28
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3330      	adds	r3, #48	; 0x30
 80029ce:	461a      	mov	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	0a1b      	lsrs	r3, r3, #8
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	4413      	add	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	211f      	movs	r1, #31
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	401a      	ands	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	0e9b      	lsrs	r3, r3, #26
 80029f6:	f003 011f 	and.w	r1, r3, #31
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	431a      	orrs	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a0a:	bf00      	nop
 8002a0c:	371c      	adds	r7, #28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b087      	sub	sp, #28
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	3314      	adds	r3, #20
 8002a26:	461a      	mov	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	0e5b      	lsrs	r3, r3, #25
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	4413      	add	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	0d1b      	lsrs	r3, r3, #20
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	2107      	movs	r1, #7
 8002a44:	fa01 f303 	lsl.w	r3, r1, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	0d1b      	lsrs	r3, r3, #20
 8002a50:	f003 031f 	and.w	r3, r3, #31
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a60:	bf00      	nop
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a84:	43db      	mvns	r3, r3
 8002a86:	401a      	ands	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f003 0318 	and.w	r3, r3, #24
 8002a8e:	4908      	ldr	r1, [pc, #32]	; (8002ab0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a90:	40d9      	lsrs	r1, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	400b      	ands	r3, r1
 8002a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	0007ffff 	.word	0x0007ffff

08002ab4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 031f 	and.w	r3, r3, #31
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002ae0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6093      	str	r3, [r2, #8]
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b08:	d101      	bne.n	8002b0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b58:	d101      	bne.n	8002b5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b80:	f043 0201 	orr.w	r2, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ba4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ba8:	f043 0202 	orr.w	r2, r3, #2
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <LL_ADC_IsEnabled+0x18>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <LL_ADC_IsEnabled+0x1a>
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d101      	bne.n	8002bfa <LL_ADC_IsDisableOngoing+0x18>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <LL_ADC_IsDisableOngoing+0x1a>
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c1c:	f043 0204 	orr.w	r2, r3, #4
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c44:	f043 0210 	orr.w	r2, r3, #16
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d101      	bne.n	8002c70 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e000      	b.n	8002c72 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c8e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c92:	f043 0220 	orr.w	r2, r3, #32
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d101      	bne.n	8002cbe <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ccc:	b590      	push	{r4, r7, lr}
 8002cce:	b089      	sub	sp, #36	; 0x24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e1a9      	b.n	800303a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d109      	bne.n	8002d08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff f881 	bl	8001dfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fef1 	bl	8002af4 <LL_ADC_IsDeepPowerDownEnabled>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d004      	beq.n	8002d22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff fed7 	bl	8002ad0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff ff0c 	bl	8002b44 <LL_ADC_IsInternalRegulatorEnabled>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d115      	bne.n	8002d5e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fef0 	bl	8002b1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d3c:	4b9c      	ldr	r3, [pc, #624]	; (8002fb0 <HAL_ADC_Init+0x2e4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	099b      	lsrs	r3, r3, #6
 8002d42:	4a9c      	ldr	r2, [pc, #624]	; (8002fb4 <HAL_ADC_Init+0x2e8>)
 8002d44:	fba2 2303 	umull	r2, r3, r2, r3
 8002d48:	099b      	lsrs	r3, r3, #6
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d50:	e002      	b.n	8002d58 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	3b01      	subs	r3, #1
 8002d56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f9      	bne.n	8002d52 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff feee 	bl	8002b44 <LL_ADC_IsInternalRegulatorEnabled>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10d      	bne.n	8002d8a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d72:	f043 0210 	orr.w	r2, r3, #16
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7e:	f043 0201 	orr.w	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff ff62 	bl	8002c58 <LL_ADC_REG_IsConversionOngoing>
 8002d94:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f040 8142 	bne.w	8003028 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f040 813e 	bne.w	8003028 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002db4:	f043 0202 	orr.w	r2, r3, #2
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fefb 	bl	8002bbc <LL_ADC_IsEnabled>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d141      	bne.n	8002e50 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dd4:	d004      	beq.n	8002de0 <HAL_ADC_Init+0x114>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a77      	ldr	r2, [pc, #476]	; (8002fb8 <HAL_ADC_Init+0x2ec>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d10f      	bne.n	8002e00 <HAL_ADC_Init+0x134>
 8002de0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002de4:	f7ff feea 	bl	8002bbc <LL_ADC_IsEnabled>
 8002de8:	4604      	mov	r4, r0
 8002dea:	4873      	ldr	r0, [pc, #460]	; (8002fb8 <HAL_ADC_Init+0x2ec>)
 8002dec:	f7ff fee6 	bl	8002bbc <LL_ADC_IsEnabled>
 8002df0:	4603      	mov	r3, r0
 8002df2:	4323      	orrs	r3, r4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf0c      	ite	eq
 8002df8:	2301      	moveq	r3, #1
 8002dfa:	2300      	movne	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	e012      	b.n	8002e26 <HAL_ADC_Init+0x15a>
 8002e00:	486e      	ldr	r0, [pc, #440]	; (8002fbc <HAL_ADC_Init+0x2f0>)
 8002e02:	f7ff fedb 	bl	8002bbc <LL_ADC_IsEnabled>
 8002e06:	4604      	mov	r4, r0
 8002e08:	486d      	ldr	r0, [pc, #436]	; (8002fc0 <HAL_ADC_Init+0x2f4>)
 8002e0a:	f7ff fed7 	bl	8002bbc <LL_ADC_IsEnabled>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	431c      	orrs	r4, r3
 8002e12:	486c      	ldr	r0, [pc, #432]	; (8002fc4 <HAL_ADC_Init+0x2f8>)
 8002e14:	f7ff fed2 	bl	8002bbc <LL_ADC_IsEnabled>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	4323      	orrs	r3, r4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d012      	beq.n	8002e50 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e32:	d004      	beq.n	8002e3e <HAL_ADC_Init+0x172>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a5f      	ldr	r2, [pc, #380]	; (8002fb8 <HAL_ADC_Init+0x2ec>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_Init+0x176>
 8002e3e:	4a62      	ldr	r2, [pc, #392]	; (8002fc8 <HAL_ADC_Init+0x2fc>)
 8002e40:	e000      	b.n	8002e44 <HAL_ADC_Init+0x178>
 8002e42:	4a62      	ldr	r2, [pc, #392]	; (8002fcc <HAL_ADC_Init+0x300>)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	f7ff fcd2 	bl	80027f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	7f5b      	ldrb	r3, [r3, #29]
 8002e54:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e5a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002e60:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002e66:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e6e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d106      	bne.n	8002e8c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e82:	3b01      	subs	r3, #1
 8002e84:	045b      	lsls	r3, r3, #17
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d009      	beq.n	8002ea8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	4b48      	ldr	r3, [pc, #288]	; (8002fd0 <HAL_ADC_Init+0x304>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	69b9      	ldr	r1, [r7, #24]
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fee5 	bl	8002ca6 <LL_ADC_INJ_IsConversionOngoing>
 8002edc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d17f      	bne.n	8002fe4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d17c      	bne.n	8002fe4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002eee:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ef6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f06:	f023 0302 	bic.w	r3, r3, #2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	69b9      	ldr	r1, [r7, #24]
 8002f10:	430b      	orrs	r3, r1
 8002f12:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d017      	beq.n	8002f4c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f2a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002f34:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6911      	ldr	r1, [r2, #16]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	430b      	orrs	r3, r1
 8002f46:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002f4a:	e013      	b.n	8002f74 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f5a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f70:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d12a      	bne.n	8002fd4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002f88:	f023 0304 	bic.w	r3, r3, #4
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f94:	4311      	orrs	r1, r2
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002f9a:	4311      	orrs	r1, r2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0201 	orr.w	r2, r2, #1
 8002fac:	611a      	str	r2, [r3, #16]
 8002fae:	e019      	b.n	8002fe4 <HAL_ADC_Init+0x318>
 8002fb0:	2000000c 	.word	0x2000000c
 8002fb4:	053e2d63 	.word	0x053e2d63
 8002fb8:	50000100 	.word	0x50000100
 8002fbc:	50000400 	.word	0x50000400
 8002fc0:	50000500 	.word	0x50000500
 8002fc4:	50000600 	.word	0x50000600
 8002fc8:	50000300 	.word	0x50000300
 8002fcc:	50000700 	.word	0x50000700
 8002fd0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0201 	bic.w	r2, r2, #1
 8002fe2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d10c      	bne.n	8003006 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	f023 010f 	bic.w	r1, r3, #15
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	1e5a      	subs	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
 8003004:	e007      	b.n	8003016 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 020f 	bic.w	r2, r2, #15
 8003014:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301a:	f023 0303 	bic.w	r3, r3, #3
 800301e:	f043 0201 	orr.w	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	65da      	str	r2, [r3, #92]	; 0x5c
 8003026:	e007      	b.n	8003038 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302c:	f043 0210 	orr.w	r2, r3, #16
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003038:	7ffb      	ldrb	r3, [r7, #31]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3724      	adds	r7, #36	; 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd90      	pop	{r4, r7, pc}
 8003042:	bf00      	nop

08003044 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003058:	d004      	beq.n	8003064 <HAL_ADC_Start_DMA+0x20>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a5a      	ldr	r2, [pc, #360]	; (80031c8 <HAL_ADC_Start_DMA+0x184>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d101      	bne.n	8003068 <HAL_ADC_Start_DMA+0x24>
 8003064:	4b59      	ldr	r3, [pc, #356]	; (80031cc <HAL_ADC_Start_DMA+0x188>)
 8003066:	e000      	b.n	800306a <HAL_ADC_Start_DMA+0x26>
 8003068:	4b59      	ldr	r3, [pc, #356]	; (80031d0 <HAL_ADC_Start_DMA+0x18c>)
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fd22 	bl	8002ab4 <LL_ADC_GetMultimode>
 8003070:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff fdee 	bl	8002c58 <LL_ADC_REG_IsConversionOngoing>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	f040 809b 	bne.w	80031ba <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_ADC_Start_DMA+0x4e>
 800308e:	2302      	movs	r3, #2
 8003090:	e096      	b.n	80031c0 <HAL_ADC_Start_DMA+0x17c>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a4d      	ldr	r2, [pc, #308]	; (80031d4 <HAL_ADC_Start_DMA+0x190>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d008      	beq.n	80030b6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b05      	cmp	r3, #5
 80030ae:	d002      	beq.n	80030b6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	2b09      	cmp	r3, #9
 80030b4:	d17a      	bne.n	80031ac <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 fe00 	bl	8003cbc <ADC_Enable>
 80030bc:	4603      	mov	r3, r0
 80030be:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80030c0:	7dfb      	ldrb	r3, [r7, #23]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d16d      	bne.n	80031a2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030ce:	f023 0301 	bic.w	r3, r3, #1
 80030d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a3a      	ldr	r2, [pc, #232]	; (80031c8 <HAL_ADC_Start_DMA+0x184>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d009      	beq.n	80030f8 <HAL_ADC_Start_DMA+0xb4>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a3b      	ldr	r2, [pc, #236]	; (80031d8 <HAL_ADC_Start_DMA+0x194>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d002      	beq.n	80030f4 <HAL_ADC_Start_DMA+0xb0>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	e003      	b.n	80030fc <HAL_ADC_Start_DMA+0xb8>
 80030f4:	4b39      	ldr	r3, [pc, #228]	; (80031dc <HAL_ADC_Start_DMA+0x198>)
 80030f6:	e001      	b.n	80030fc <HAL_ADC_Start_DMA+0xb8>
 80030f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	4293      	cmp	r3, r2
 8003102:	d002      	beq.n	800310a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d105      	bne.n	8003116 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d006      	beq.n	8003130 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003126:	f023 0206 	bic.w	r2, r3, #6
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	661a      	str	r2, [r3, #96]	; 0x60
 800312e:	e002      	b.n	8003136 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313a:	4a29      	ldr	r2, [pc, #164]	; (80031e0 <HAL_ADC_Start_DMA+0x19c>)
 800313c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003142:	4a28      	ldr	r2, [pc, #160]	; (80031e4 <HAL_ADC_Start_DMA+0x1a0>)
 8003144:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314a:	4a27      	ldr	r2, [pc, #156]	; (80031e8 <HAL_ADC_Start_DMA+0x1a4>)
 800314c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	221c      	movs	r2, #28
 8003154:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0210 	orr.w	r2, r2, #16
 800316c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 0201 	orr.w	r2, r2, #1
 800317c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3340      	adds	r3, #64	; 0x40
 8003188:	4619      	mov	r1, r3
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f001 fd07 	bl	8004ba0 <HAL_DMA_Start_IT>
 8003192:	4603      	mov	r3, r0
 8003194:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fd34 	bl	8002c08 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80031a0:	e00d      	b.n	80031be <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80031aa:	e008      	b.n	80031be <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80031b8:	e001      	b.n	80031be <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031ba:	2302      	movs	r3, #2
 80031bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80031be:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	50000100 	.word	0x50000100
 80031cc:	50000300 	.word	0x50000300
 80031d0:	50000700 	.word	0x50000700
 80031d4:	50000600 	.word	0x50000600
 80031d8:	50000500 	.word	0x50000500
 80031dc:	50000400 	.word	0x50000400
 80031e0:	08003ea7 	.word	0x08003ea7
 80031e4:	08003f7f 	.word	0x08003f7f
 80031e8:	08003f9b 	.word	0x08003f9b

080031ec <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_Stop_DMA+0x16>
 80031fe:	2302      	movs	r3, #2
 8003200:	e051      	b.n	80032a6 <HAL_ADC_Stop_DMA+0xba>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800320a:	2103      	movs	r1, #3
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 fc99 	bl	8003b44 <ADC_ConversionStop>
 8003212:	4603      	mov	r3, r0
 8003214:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d13f      	bne.n	800329c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0201 	bic.w	r2, r2, #1
 800322a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003230:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d10f      	bne.n	800325a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323e:	4618      	mov	r0, r3
 8003240:	f001 fd29 	bl	8004c96 <HAL_DMA_Abort>
 8003244:	4603      	mov	r3, r0
 8003246:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003252:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0210 	bic.w	r2, r2, #16
 8003268:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800326a:	7bfb      	ldrb	r3, [r7, #15]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d105      	bne.n	800327c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fdb9 	bl	8003de8 <ADC_Disable>
 8003276:	4603      	mov	r3, r0
 8003278:	73fb      	strb	r3, [r7, #15]
 800327a:	e002      	b.n	8003282 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 fdb3 	bl	8003de8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d109      	bne.n	800329c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003290:	f023 0301 	bic.w	r3, r3, #1
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
	...

080032c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b0b6      	sub	sp, #216	; 0xd8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d102      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x24>
 80032e2:	2302      	movs	r3, #2
 80032e4:	f000 bc13 	b.w	8003b0e <HAL_ADC_ConfigChannel+0x84a>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fcaf 	bl	8002c58 <LL_ADC_REG_IsConversionOngoing>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f040 83f3 	bne.w	8003ae8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6818      	ldr	r0, [r3, #0]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	6859      	ldr	r1, [r3, #4]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	f7ff fb55 	bl	80029be <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff fc9d 	bl	8002c58 <LL_ADC_REG_IsConversionOngoing>
 800331e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff fcbd 	bl	8002ca6 <LL_ADC_INJ_IsConversionOngoing>
 800332c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003330:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003334:	2b00      	cmp	r3, #0
 8003336:	f040 81d9 	bne.w	80036ec <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800333a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800333e:	2b00      	cmp	r3, #0
 8003340:	f040 81d4 	bne.w	80036ec <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800334c:	d10f      	bne.n	800336e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2200      	movs	r2, #0
 8003358:	4619      	mov	r1, r3
 800335a:	f7ff fb5c 	bl	8002a16 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff fb03 	bl	8002972 <LL_ADC_SetSamplingTimeCommonConfig>
 800336c:	e00e      	b.n	800338c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6818      	ldr	r0, [r3, #0]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	6819      	ldr	r1, [r3, #0]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	461a      	mov	r2, r3
 800337c:	f7ff fb4b 	bl	8002a16 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2100      	movs	r1, #0
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff faf3 	bl	8002972 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	08db      	lsrs	r3, r3, #3
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d022      	beq.n	80033f4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6919      	ldr	r1, [r3, #16]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033be:	f7ff fa4d 	bl	800285c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	6919      	ldr	r1, [r3, #16]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	461a      	mov	r2, r3
 80033d0:	f7ff fa99 	bl	8002906 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d102      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x126>
 80033e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033e8:	e000      	b.n	80033ec <HAL_ADC_ConfigChannel+0x128>
 80033ea:	2300      	movs	r3, #0
 80033ec:	461a      	mov	r2, r3
 80033ee:	f7ff faa5 	bl	800293c <LL_ADC_SetOffsetSaturation>
 80033f2:	e17b      	b.n	80036ec <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2100      	movs	r1, #0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff fa52 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 8003400:	4603      	mov	r3, r0
 8003402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x15c>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2100      	movs	r1, #0
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff fa47 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 8003416:	4603      	mov	r3, r0
 8003418:	0e9b      	lsrs	r3, r3, #26
 800341a:	f003 021f 	and.w	r2, r3, #31
 800341e:	e01e      	b.n	800345e <HAL_ADC_ConfigChannel+0x19a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2100      	movs	r1, #0
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff fa3c 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 800342c:	4603      	mov	r3, r0
 800342e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003436:	fa93 f3a3 	rbit	r3, r3
 800343a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800343e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003442:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003446:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800344e:	2320      	movs	r3, #32
 8003450:	e004      	b.n	800345c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003452:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003466:	2b00      	cmp	r3, #0
 8003468:	d105      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x1b2>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	0e9b      	lsrs	r3, r3, #26
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	e018      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x1e4>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003482:	fa93 f3a3 	rbit	r3, r3
 8003486:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800348a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800348e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003492:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800349a:	2320      	movs	r3, #32
 800349c:	e004      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800349e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034a2:	fab3 f383 	clz	r3, r3
 80034a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d106      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2200      	movs	r2, #0
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fa0b 	bl	80028d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2101      	movs	r1, #1
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff f9ef 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10a      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x222>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2101      	movs	r1, #1
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff f9e4 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 80034dc:	4603      	mov	r3, r0
 80034de:	0e9b      	lsrs	r3, r3, #26
 80034e0:	f003 021f 	and.w	r2, r3, #31
 80034e4:	e01e      	b.n	8003524 <HAL_ADC_ConfigChannel+0x260>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2101      	movs	r1, #1
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff f9d9 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 80034f2:	4603      	mov	r3, r0
 80034f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80034fc:	fa93 f3a3 	rbit	r3, r3
 8003500:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003504:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003508:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800350c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003514:	2320      	movs	r3, #32
 8003516:	e004      	b.n	8003522 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003518:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800351c:	fab3 f383 	clz	r3, r3
 8003520:	b2db      	uxtb	r3, r3
 8003522:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800352c:	2b00      	cmp	r3, #0
 800352e:	d105      	bne.n	800353c <HAL_ADC_ConfigChannel+0x278>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	0e9b      	lsrs	r3, r3, #26
 8003536:	f003 031f 	and.w	r3, r3, #31
 800353a:	e018      	b.n	800356e <HAL_ADC_ConfigChannel+0x2aa>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003544:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003548:	fa93 f3a3 	rbit	r3, r3
 800354c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003550:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003554:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003558:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003560:	2320      	movs	r3, #32
 8003562:	e004      	b.n	800356e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003564:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003568:	fab3 f383 	clz	r3, r3
 800356c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800356e:	429a      	cmp	r2, r3
 8003570:	d106      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2200      	movs	r2, #0
 8003578:	2101      	movs	r1, #1
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff f9a8 	bl	80028d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2102      	movs	r1, #2
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff f98c 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 800358c:	4603      	mov	r3, r0
 800358e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10a      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x2e8>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2102      	movs	r1, #2
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff f981 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 80035a2:	4603      	mov	r3, r0
 80035a4:	0e9b      	lsrs	r3, r3, #26
 80035a6:	f003 021f 	and.w	r2, r3, #31
 80035aa:	e01e      	b.n	80035ea <HAL_ADC_ConfigChannel+0x326>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2102      	movs	r1, #2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff f976 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035c2:	fa93 f3a3 	rbit	r3, r3
 80035c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80035ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80035d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80035da:	2320      	movs	r3, #32
 80035dc:	e004      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80035de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035e2:	fab3 f383 	clz	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d105      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x33e>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	0e9b      	lsrs	r3, r3, #26
 80035fc:	f003 031f 	and.w	r3, r3, #31
 8003600:	e016      	b.n	8003630 <HAL_ADC_ConfigChannel+0x36c>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800360e:	fa93 f3a3 	rbit	r3, r3
 8003612:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003614:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003616:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800361a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003622:	2320      	movs	r3, #32
 8003624:	e004      	b.n	8003630 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003626:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800362a:	fab3 f383 	clz	r3, r3
 800362e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003630:	429a      	cmp	r2, r3
 8003632:	d106      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2200      	movs	r2, #0
 800363a:	2102      	movs	r1, #2
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff f947 	bl	80028d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2103      	movs	r1, #3
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff f92b 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 800364e:	4603      	mov	r3, r0
 8003650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <HAL_ADC_ConfigChannel+0x3aa>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2103      	movs	r1, #3
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff f920 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 8003664:	4603      	mov	r3, r0
 8003666:	0e9b      	lsrs	r3, r3, #26
 8003668:	f003 021f 	and.w	r2, r3, #31
 800366c:	e017      	b.n	800369e <HAL_ADC_ConfigChannel+0x3da>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2103      	movs	r1, #3
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff f915 	bl	80028a4 <LL_ADC_GetOffsetChannel>
 800367a:	4603      	mov	r3, r0
 800367c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003680:	fa93 f3a3 	rbit	r3, r3
 8003684:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003688:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800368a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003690:	2320      	movs	r3, #32
 8003692:	e003      	b.n	800369c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003696:	fab3 f383 	clz	r3, r3
 800369a:	b2db      	uxtb	r3, r3
 800369c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d105      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x3f2>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	0e9b      	lsrs	r3, r3, #26
 80036b0:	f003 031f 	and.w	r3, r3, #31
 80036b4:	e011      	b.n	80036da <HAL_ADC_ConfigChannel+0x416>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80036c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80036c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80036ce:	2320      	movs	r3, #32
 80036d0:	e003      	b.n	80036da <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80036d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d4:	fab3 f383 	clz	r3, r3
 80036d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036da:	429a      	cmp	r2, r3
 80036dc:	d106      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2200      	movs	r2, #0
 80036e4:	2103      	movs	r1, #3
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff f8f2 	bl	80028d0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff fa63 	bl	8002bbc <LL_ADC_IsEnabled>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f040 813d 	bne.w	8003978 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6818      	ldr	r0, [r3, #0]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	6819      	ldr	r1, [r3, #0]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	461a      	mov	r2, r3
 800370c:	f7ff f9ae 	bl	8002a6c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4aa2      	ldr	r2, [pc, #648]	; (80039a0 <HAL_ADC_ConfigChannel+0x6dc>)
 8003716:	4293      	cmp	r3, r2
 8003718:	f040 812e 	bne.w	8003978 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10b      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x480>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	0e9b      	lsrs	r3, r3, #26
 8003732:	3301      	adds	r3, #1
 8003734:	f003 031f 	and.w	r3, r3, #31
 8003738:	2b09      	cmp	r3, #9
 800373a:	bf94      	ite	ls
 800373c:	2301      	movls	r3, #1
 800373e:	2300      	movhi	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	e019      	b.n	8003778 <HAL_ADC_ConfigChannel+0x4b4>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800374c:	fa93 f3a3 	rbit	r3, r3
 8003750:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003752:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003754:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003756:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800375c:	2320      	movs	r3, #32
 800375e:	e003      	b.n	8003768 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003760:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003762:	fab3 f383 	clz	r3, r3
 8003766:	b2db      	uxtb	r3, r3
 8003768:	3301      	adds	r3, #1
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	2b09      	cmp	r3, #9
 8003770:	bf94      	ite	ls
 8003772:	2301      	movls	r3, #1
 8003774:	2300      	movhi	r3, #0
 8003776:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003778:	2b00      	cmp	r3, #0
 800377a:	d079      	beq.n	8003870 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003784:	2b00      	cmp	r3, #0
 8003786:	d107      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x4d4>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	0e9b      	lsrs	r3, r3, #26
 800378e:	3301      	adds	r3, #1
 8003790:	069b      	lsls	r3, r3, #26
 8003792:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003796:	e015      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x500>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a0:	fa93 f3a3 	rbit	r3, r3
 80037a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80037aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80037b0:	2320      	movs	r3, #32
 80037b2:	e003      	b.n	80037bc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80037b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b6:	fab3 f383 	clz	r3, r3
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	3301      	adds	r3, #1
 80037be:	069b      	lsls	r3, r3, #26
 80037c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d109      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x520>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	0e9b      	lsrs	r3, r3, #26
 80037d6:	3301      	adds	r3, #1
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	2101      	movs	r1, #1
 80037de:	fa01 f303 	lsl.w	r3, r1, r3
 80037e2:	e017      	b.n	8003814 <HAL_ADC_ConfigChannel+0x550>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ec:	fa93 f3a3 	rbit	r3, r3
 80037f0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80037f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80037f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80037fc:	2320      	movs	r3, #32
 80037fe:	e003      	b.n	8003808 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	3301      	adds	r3, #1
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	2101      	movs	r1, #1
 8003810:	fa01 f303 	lsl.w	r3, r1, r3
 8003814:	ea42 0103 	orr.w	r1, r2, r3
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10a      	bne.n	800383a <HAL_ADC_ConfigChannel+0x576>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	0e9b      	lsrs	r3, r3, #26
 800382a:	3301      	adds	r3, #1
 800382c:	f003 021f 	and.w	r2, r3, #31
 8003830:	4613      	mov	r3, r2
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	4413      	add	r3, r2
 8003836:	051b      	lsls	r3, r3, #20
 8003838:	e018      	b.n	800386c <HAL_ADC_ConfigChannel+0x5a8>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003842:	fa93 f3a3 	rbit	r3, r3
 8003846:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800384c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003852:	2320      	movs	r3, #32
 8003854:	e003      	b.n	800385e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003858:	fab3 f383 	clz	r3, r3
 800385c:	b2db      	uxtb	r3, r3
 800385e:	3301      	adds	r3, #1
 8003860:	f003 021f 	and.w	r2, r3, #31
 8003864:	4613      	mov	r3, r2
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	4413      	add	r3, r2
 800386a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800386c:	430b      	orrs	r3, r1
 800386e:	e07e      	b.n	800396e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003878:	2b00      	cmp	r3, #0
 800387a:	d107      	bne.n	800388c <HAL_ADC_ConfigChannel+0x5c8>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	0e9b      	lsrs	r3, r3, #26
 8003882:	3301      	adds	r3, #1
 8003884:	069b      	lsls	r3, r3, #26
 8003886:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800388a:	e015      	b.n	80038b8 <HAL_ADC_ConfigChannel+0x5f4>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003894:	fa93 f3a3 	rbit	r3, r3
 8003898:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800389a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80038a4:	2320      	movs	r3, #32
 80038a6:	e003      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80038a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	3301      	adds	r3, #1
 80038b2:	069b      	lsls	r3, r3, #26
 80038b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d109      	bne.n	80038d8 <HAL_ADC_ConfigChannel+0x614>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	0e9b      	lsrs	r3, r3, #26
 80038ca:	3301      	adds	r3, #1
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	2101      	movs	r1, #1
 80038d2:	fa01 f303 	lsl.w	r3, r1, r3
 80038d6:	e017      	b.n	8003908 <HAL_ADC_ConfigChannel+0x644>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	fa93 f3a3 	rbit	r3, r3
 80038e4:	61fb      	str	r3, [r7, #28]
  return result;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80038f0:	2320      	movs	r3, #32
 80038f2:	e003      	b.n	80038fc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	fab3 f383 	clz	r3, r3
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	3301      	adds	r3, #1
 80038fe:	f003 031f 	and.w	r3, r3, #31
 8003902:	2101      	movs	r1, #1
 8003904:	fa01 f303 	lsl.w	r3, r1, r3
 8003908:	ea42 0103 	orr.w	r1, r2, r3
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10d      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x670>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	0e9b      	lsrs	r3, r3, #26
 800391e:	3301      	adds	r3, #1
 8003920:	f003 021f 	and.w	r2, r3, #31
 8003924:	4613      	mov	r3, r2
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	4413      	add	r3, r2
 800392a:	3b1e      	subs	r3, #30
 800392c:	051b      	lsls	r3, r3, #20
 800392e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003932:	e01b      	b.n	800396c <HAL_ADC_ConfigChannel+0x6a8>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	fa93 f3a3 	rbit	r3, r3
 8003940:	613b      	str	r3, [r7, #16]
  return result;
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800394c:	2320      	movs	r3, #32
 800394e:	e003      	b.n	8003958 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	fab3 f383 	clz	r3, r3
 8003956:	b2db      	uxtb	r3, r3
 8003958:	3301      	adds	r3, #1
 800395a:	f003 021f 	and.w	r2, r3, #31
 800395e:	4613      	mov	r3, r2
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	4413      	add	r3, r2
 8003964:	3b1e      	subs	r3, #30
 8003966:	051b      	lsls	r3, r3, #20
 8003968:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800396c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003972:	4619      	mov	r1, r3
 8003974:	f7ff f84f 	bl	8002a16 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <HAL_ADC_ConfigChannel+0x6e0>)
 800397e:	4013      	ands	r3, r2
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80be 	beq.w	8003b02 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800398e:	d004      	beq.n	800399a <HAL_ADC_ConfigChannel+0x6d6>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <HAL_ADC_ConfigChannel+0x6e4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d10a      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x6ec>
 800399a:	4b04      	ldr	r3, [pc, #16]	; (80039ac <HAL_ADC_ConfigChannel+0x6e8>)
 800399c:	e009      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x6ee>
 800399e:	bf00      	nop
 80039a0:	407f0000 	.word	0x407f0000
 80039a4:	80080000 	.word	0x80080000
 80039a8:	50000100 	.word	0x50000100
 80039ac:	50000300 	.word	0x50000300
 80039b0:	4b59      	ldr	r3, [pc, #356]	; (8003b18 <HAL_ADC_ConfigChannel+0x854>)
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe ff44 	bl	8002840 <LL_ADC_GetCommonPathInternalCh>
 80039b8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a56      	ldr	r2, [pc, #344]	; (8003b1c <HAL_ADC_ConfigChannel+0x858>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d004      	beq.n	80039d0 <HAL_ADC_ConfigChannel+0x70c>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a55      	ldr	r2, [pc, #340]	; (8003b20 <HAL_ADC_ConfigChannel+0x85c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d13a      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d134      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039e4:	d005      	beq.n	80039f2 <HAL_ADC_ConfigChannel+0x72e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a4e      	ldr	r2, [pc, #312]	; (8003b24 <HAL_ADC_ConfigChannel+0x860>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	f040 8085 	bne.w	8003afc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039fa:	d004      	beq.n	8003a06 <HAL_ADC_ConfigChannel+0x742>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a49      	ldr	r2, [pc, #292]	; (8003b28 <HAL_ADC_ConfigChannel+0x864>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d101      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x746>
 8003a06:	4a49      	ldr	r2, [pc, #292]	; (8003b2c <HAL_ADC_ConfigChannel+0x868>)
 8003a08:	e000      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x748>
 8003a0a:	4a43      	ldr	r2, [pc, #268]	; (8003b18 <HAL_ADC_ConfigChannel+0x854>)
 8003a0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a14:	4619      	mov	r1, r3
 8003a16:	4610      	mov	r0, r2
 8003a18:	f7fe feff 	bl	800281a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a1c:	4b44      	ldr	r3, [pc, #272]	; (8003b30 <HAL_ADC_ConfigChannel+0x86c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	099b      	lsrs	r3, r3, #6
 8003a22:	4a44      	ldr	r2, [pc, #272]	; (8003b34 <HAL_ADC_ConfigChannel+0x870>)
 8003a24:	fba2 2303 	umull	r2, r3, r2, r3
 8003a28:	099b      	lsrs	r3, r3, #6
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a36:	e002      	b.n	8003a3e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1f9      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a44:	e05a      	b.n	8003afc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a3b      	ldr	r2, [pc, #236]	; (8003b38 <HAL_ADC_ConfigChannel+0x874>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d125      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d11f      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a31      	ldr	r2, [pc, #196]	; (8003b28 <HAL_ADC_ConfigChannel+0x864>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d104      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x7ac>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a34      	ldr	r2, [pc, #208]	; (8003b3c <HAL_ADC_ConfigChannel+0x878>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d047      	beq.n	8003b00 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a78:	d004      	beq.n	8003a84 <HAL_ADC_ConfigChannel+0x7c0>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a2a      	ldr	r2, [pc, #168]	; (8003b28 <HAL_ADC_ConfigChannel+0x864>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d101      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x7c4>
 8003a84:	4a29      	ldr	r2, [pc, #164]	; (8003b2c <HAL_ADC_ConfigChannel+0x868>)
 8003a86:	e000      	b.n	8003a8a <HAL_ADC_ConfigChannel+0x7c6>
 8003a88:	4a23      	ldr	r2, [pc, #140]	; (8003b18 <HAL_ADC_ConfigChannel+0x854>)
 8003a8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a92:	4619      	mov	r1, r3
 8003a94:	4610      	mov	r0, r2
 8003a96:	f7fe fec0 	bl	800281a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a9a:	e031      	b.n	8003b00 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a27      	ldr	r2, [pc, #156]	; (8003b40 <HAL_ADC_ConfigChannel+0x87c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d12d      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003aa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d127      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a1c      	ldr	r2, [pc, #112]	; (8003b28 <HAL_ADC_ConfigChannel+0x864>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d022      	beq.n	8003b02 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ac4:	d004      	beq.n	8003ad0 <HAL_ADC_ConfigChannel+0x80c>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a17      	ldr	r2, [pc, #92]	; (8003b28 <HAL_ADC_ConfigChannel+0x864>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d101      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x810>
 8003ad0:	4a16      	ldr	r2, [pc, #88]	; (8003b2c <HAL_ADC_ConfigChannel+0x868>)
 8003ad2:	e000      	b.n	8003ad6 <HAL_ADC_ConfigChannel+0x812>
 8003ad4:	4a10      	ldr	r2, [pc, #64]	; (8003b18 <HAL_ADC_ConfigChannel+0x854>)
 8003ad6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ada:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	f7fe fe9a 	bl	800281a <LL_ADC_SetCommonPathInternalCh>
 8003ae6:	e00c      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aec:	f043 0220 	orr.w	r2, r3, #32
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003afa:	e002      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003afc:	bf00      	nop
 8003afe:	e000      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b00:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b0a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	37d8      	adds	r7, #216	; 0xd8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	50000700 	.word	0x50000700
 8003b1c:	c3210000 	.word	0xc3210000
 8003b20:	90c00010 	.word	0x90c00010
 8003b24:	50000600 	.word	0x50000600
 8003b28:	50000100 	.word	0x50000100
 8003b2c:	50000300 	.word	0x50000300
 8003b30:	2000000c 	.word	0x2000000c
 8003b34:	053e2d63 	.word	0x053e2d63
 8003b38:	c7520000 	.word	0xc7520000
 8003b3c:	50000500 	.word	0x50000500
 8003b40:	cb840000 	.word	0xcb840000

08003b44 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff f87c 	bl	8002c58 <LL_ADC_REG_IsConversionOngoing>
 8003b60:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff f89d 	bl	8002ca6 <LL_ADC_INJ_IsConversionOngoing>
 8003b6c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d103      	bne.n	8003b7c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 8098 	beq.w	8003cac <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d02a      	beq.n	8003be0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	7f5b      	ldrb	r3, [r3, #29]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d126      	bne.n	8003be0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	7f1b      	ldrb	r3, [r3, #28]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d122      	bne.n	8003be0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003b9e:	e014      	b.n	8003bca <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	4a45      	ldr	r2, [pc, #276]	; (8003cb8 <ADC_ConversionStop+0x174>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d90d      	bls.n	8003bc4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bac:	f043 0210 	orr.w	r2, r3, #16
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb8:	f043 0201 	orr.w	r2, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e074      	b.n	8003cae <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd4:	2b40      	cmp	r3, #64	; 0x40
 8003bd6:	d1e3      	bne.n	8003ba0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2240      	movs	r2, #64	; 0x40
 8003bde:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d014      	beq.n	8003c10 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff f834 	bl	8002c58 <LL_ADC_REG_IsConversionOngoing>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00c      	beq.n	8003c10 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe fff1 	bl	8002be2 <LL_ADC_IsDisableOngoing>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d104      	bne.n	8003c10 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff f810 	bl	8002c30 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d014      	beq.n	8003c40 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff f843 	bl	8002ca6 <LL_ADC_INJ_IsConversionOngoing>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00c      	beq.n	8003c40 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fe ffd9 	bl	8002be2 <LL_ADC_IsDisableOngoing>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d104      	bne.n	8003c40 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff f81f 	bl	8002c7e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d005      	beq.n	8003c52 <ADC_ConversionStop+0x10e>
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d105      	bne.n	8003c58 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003c4c:	230c      	movs	r3, #12
 8003c4e:	617b      	str	r3, [r7, #20]
        break;
 8003c50:	e005      	b.n	8003c5e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003c52:	2308      	movs	r3, #8
 8003c54:	617b      	str	r3, [r7, #20]
        break;
 8003c56:	e002      	b.n	8003c5e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003c58:	2304      	movs	r3, #4
 8003c5a:	617b      	str	r3, [r7, #20]
        break;
 8003c5c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003c5e:	f7fe fd71 	bl	8002744 <HAL_GetTick>
 8003c62:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c64:	e01b      	b.n	8003c9e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c66:	f7fe fd6d 	bl	8002744 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b05      	cmp	r3, #5
 8003c72:	d914      	bls.n	8003c9e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00d      	beq.n	8003c9e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c86:	f043 0210 	orr.w	r2, r3, #16
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c92:	f043 0201 	orr.w	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e007      	b.n	8003cae <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1dc      	bne.n	8003c66 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3720      	adds	r7, #32
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	a33fffff 	.word	0xa33fffff

08003cbc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fe ff75 	bl	8002bbc <LL_ADC_IsEnabled>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d176      	bne.n	8003dc6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	4b3c      	ldr	r3, [pc, #240]	; (8003dd0 <ADC_Enable+0x114>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00d      	beq.n	8003d02 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cea:	f043 0210 	orr.w	r2, r3, #16
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf6:	f043 0201 	orr.w	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e062      	b.n	8003dc8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fe ff30 	bl	8002b6c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d14:	d004      	beq.n	8003d20 <ADC_Enable+0x64>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a2e      	ldr	r2, [pc, #184]	; (8003dd4 <ADC_Enable+0x118>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d101      	bne.n	8003d24 <ADC_Enable+0x68>
 8003d20:	4b2d      	ldr	r3, [pc, #180]	; (8003dd8 <ADC_Enable+0x11c>)
 8003d22:	e000      	b.n	8003d26 <ADC_Enable+0x6a>
 8003d24:	4b2d      	ldr	r3, [pc, #180]	; (8003ddc <ADC_Enable+0x120>)
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fe fd8a 	bl	8002840 <LL_ADC_GetCommonPathInternalCh>
 8003d2c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003d2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d013      	beq.n	8003d5e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d36:	4b2a      	ldr	r3, [pc, #168]	; (8003de0 <ADC_Enable+0x124>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	099b      	lsrs	r3, r3, #6
 8003d3c:	4a29      	ldr	r2, [pc, #164]	; (8003de4 <ADC_Enable+0x128>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	099b      	lsrs	r3, r3, #6
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	4613      	mov	r3, r2
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	4413      	add	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d50:	e002      	b.n	8003d58 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f9      	bne.n	8003d52 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d5e:	f7fe fcf1 	bl	8002744 <HAL_GetTick>
 8003d62:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d64:	e028      	b.n	8003db8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe ff26 	bl	8002bbc <LL_ADC_IsEnabled>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d104      	bne.n	8003d80 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe fef6 	bl	8002b6c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d80:	f7fe fce0 	bl	8002744 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d914      	bls.n	8003db8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d00d      	beq.n	8003db8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da0:	f043 0210 	orr.w	r2, r3, #16
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dac:	f043 0201 	orr.w	r2, r3, #1
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e007      	b.n	8003dc8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d1cf      	bne.n	8003d66 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	8000003f 	.word	0x8000003f
 8003dd4:	50000100 	.word	0x50000100
 8003dd8:	50000300 	.word	0x50000300
 8003ddc:	50000700 	.word	0x50000700
 8003de0:	2000000c 	.word	0x2000000c
 8003de4:	053e2d63 	.word	0x053e2d63

08003de8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fe fef4 	bl	8002be2 <LL_ADC_IsDisableOngoing>
 8003dfa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fe fedb 	bl	8002bbc <LL_ADC_IsEnabled>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d047      	beq.n	8003e9c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d144      	bne.n	8003e9c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 030d 	and.w	r3, r3, #13
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d10c      	bne.n	8003e3a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fe feb5 	bl	8002b94 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2203      	movs	r2, #3
 8003e30:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e32:	f7fe fc87 	bl	8002744 <HAL_GetTick>
 8003e36:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e38:	e029      	b.n	8003e8e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3e:	f043 0210 	orr.w	r2, r3, #16
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e4a:	f043 0201 	orr.w	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e023      	b.n	8003e9e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e56:	f7fe fc75 	bl	8002744 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d914      	bls.n	8003e8e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00d      	beq.n	8003e8e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e76:	f043 0210 	orr.w	r2, r3, #16
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e82:	f043 0201 	orr.w	r2, r3, #1
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e007      	b.n	8003e9e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1dc      	bne.n	8003e56 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d14b      	bne.n	8003f58 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d021      	beq.n	8003f1e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fe fd5a 	bl	8002998 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d032      	beq.n	8003f50 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d12b      	bne.n	8003f50 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d11f      	bne.n	8003f50 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f14:	f043 0201 	orr.w	r2, r3, #1
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f1c:	e018      	b.n	8003f50 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d111      	bne.n	8003f50 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d105      	bne.n	8003f50 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f48:	f043 0201 	orr.w	r2, r3, #1
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f7fd feeb 	bl	8001d2c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f56:	e00e      	b.n	8003f76 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5c:	f003 0310 	and.w	r3, r3, #16
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f7ff f9a2 	bl	80032ae <HAL_ADC_ErrorCallback>
}
 8003f6a:	e004      	b.n	8003f76 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	4798      	blx	r3
}
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f7fd fe99 	bl	8001cc4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f92:	bf00      	nop
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb8:	f043 0204 	orr.w	r2, r3, #4
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f7ff f974 	bl	80032ae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fc6:	bf00      	nop
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <LL_ADC_IsEnabled>:
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <LL_ADC_IsEnabled+0x18>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <LL_ADC_IsEnabled+0x1a>
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <LL_ADC_StartCalibration>:
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004006:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004010:	4313      	orrs	r3, r2
 8004012:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	609a      	str	r2, [r3, #8]
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <LL_ADC_IsCalibrationOnGoing>:
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004036:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800403a:	d101      	bne.n	8004040 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <LL_ADC_REG_IsConversionOngoing>:
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b04      	cmp	r3, #4
 8004060:	d101      	bne.n	8004066 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800407e:	2300      	movs	r3, #0
 8004080:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_ADCEx_Calibration_Start+0x1c>
 800408c:	2302      	movs	r3, #2
 800408e:	e04d      	b.n	800412c <HAL_ADCEx_Calibration_Start+0xb8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff fea5 	bl	8003de8 <ADC_Disable>
 800409e:	4603      	mov	r3, r0
 80040a0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d136      	bne.n	8004116 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040b0:	f023 0302 	bic.w	r3, r3, #2
 80040b4:	f043 0202 	orr.w	r2, r3, #2
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6839      	ldr	r1, [r7, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff ff96 	bl	8003ff4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80040c8:	e014      	b.n	80040f4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	3301      	adds	r3, #1
 80040ce:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4a18      	ldr	r2, [pc, #96]	; (8004134 <HAL_ADCEx_Calibration_Start+0xc0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d90d      	bls.n	80040f4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040dc:	f023 0312 	bic.w	r3, r3, #18
 80040e0:	f043 0210 	orr.w	r2, r3, #16
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e01b      	b.n	800412c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff ff94 	bl	8004026 <LL_ADC_IsCalibrationOnGoing>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e2      	bne.n	80040ca <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004108:	f023 0303 	bic.w	r3, r3, #3
 800410c:	f043 0201 	orr.w	r2, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	65da      	str	r2, [r3, #92]	; 0x5c
 8004114:	e005      	b.n	8004122 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411a:	f043 0210 	orr.w	r2, r3, #16
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800412a:	7bfb      	ldrb	r3, [r7, #15]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	0004de01 	.word	0x0004de01

08004138 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004138:	b590      	push	{r4, r7, lr}
 800413a:	b0a1      	sub	sp, #132	; 0x84
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800414e:	2b01      	cmp	r3, #1
 8004150:	d101      	bne.n	8004156 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004152:	2302      	movs	r3, #2
 8004154:	e0e7      	b.n	8004326 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800415e:	2300      	movs	r3, #0
 8004160:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004162:	2300      	movs	r3, #0
 8004164:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800416e:	d102      	bne.n	8004176 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004170:	4b6f      	ldr	r3, [pc, #444]	; (8004330 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004172:	60bb      	str	r3, [r7, #8]
 8004174:	e009      	b.n	800418a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a6e      	ldr	r2, [pc, #440]	; (8004334 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d102      	bne.n	8004186 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004180:	4b6d      	ldr	r3, [pc, #436]	; (8004338 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004182:	60bb      	str	r3, [r7, #8]
 8004184:	e001      	b.n	800418a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004186:	2300      	movs	r3, #0
 8004188:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10b      	bne.n	80041a8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004194:	f043 0220 	orr.w	r2, r3, #32
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0be      	b.n	8004326 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff ff4f 	bl	800404e <LL_ADC_REG_IsConversionOngoing>
 80041b0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff ff49 	bl	800404e <LL_ADC_REG_IsConversionOngoing>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f040 80a0 	bne.w	8004304 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80041c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f040 809c 	bne.w	8004304 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041d4:	d004      	beq.n	80041e0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a55      	ldr	r2, [pc, #340]	; (8004330 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d101      	bne.n	80041e4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80041e0:	4b56      	ldr	r3, [pc, #344]	; (800433c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80041e2:	e000      	b.n	80041e6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80041e4:	4b56      	ldr	r3, [pc, #344]	; (8004340 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80041e6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d04b      	beq.n	8004288 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80041f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	6859      	ldr	r1, [r3, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004202:	035b      	lsls	r3, r3, #13
 8004204:	430b      	orrs	r3, r1
 8004206:	431a      	orrs	r2, r3
 8004208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800420a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004214:	d004      	beq.n	8004220 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a45      	ldr	r2, [pc, #276]	; (8004330 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d10f      	bne.n	8004240 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004220:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004224:	f7ff fed3 	bl	8003fce <LL_ADC_IsEnabled>
 8004228:	4604      	mov	r4, r0
 800422a:	4841      	ldr	r0, [pc, #260]	; (8004330 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800422c:	f7ff fecf 	bl	8003fce <LL_ADC_IsEnabled>
 8004230:	4603      	mov	r3, r0
 8004232:	4323      	orrs	r3, r4
 8004234:	2b00      	cmp	r3, #0
 8004236:	bf0c      	ite	eq
 8004238:	2301      	moveq	r3, #1
 800423a:	2300      	movne	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	e012      	b.n	8004266 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004240:	483c      	ldr	r0, [pc, #240]	; (8004334 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004242:	f7ff fec4 	bl	8003fce <LL_ADC_IsEnabled>
 8004246:	4604      	mov	r4, r0
 8004248:	483b      	ldr	r0, [pc, #236]	; (8004338 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800424a:	f7ff fec0 	bl	8003fce <LL_ADC_IsEnabled>
 800424e:	4603      	mov	r3, r0
 8004250:	431c      	orrs	r4, r3
 8004252:	483c      	ldr	r0, [pc, #240]	; (8004344 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004254:	f7ff febb 	bl	8003fce <LL_ADC_IsEnabled>
 8004258:	4603      	mov	r3, r0
 800425a:	4323      	orrs	r3, r4
 800425c:	2b00      	cmp	r3, #0
 800425e:	bf0c      	ite	eq
 8004260:	2301      	moveq	r3, #1
 8004262:	2300      	movne	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d056      	beq.n	8004318 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800426a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004272:	f023 030f 	bic.w	r3, r3, #15
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	6811      	ldr	r1, [r2, #0]
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	6892      	ldr	r2, [r2, #8]
 800427e:	430a      	orrs	r2, r1
 8004280:	431a      	orrs	r2, r3
 8004282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004284:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004286:	e047      	b.n	8004318 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004288:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004292:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800429c:	d004      	beq.n	80042a8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a23      	ldr	r2, [pc, #140]	; (8004330 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d10f      	bne.n	80042c8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80042a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80042ac:	f7ff fe8f 	bl	8003fce <LL_ADC_IsEnabled>
 80042b0:	4604      	mov	r4, r0
 80042b2:	481f      	ldr	r0, [pc, #124]	; (8004330 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042b4:	f7ff fe8b 	bl	8003fce <LL_ADC_IsEnabled>
 80042b8:	4603      	mov	r3, r0
 80042ba:	4323      	orrs	r3, r4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	bf0c      	ite	eq
 80042c0:	2301      	moveq	r3, #1
 80042c2:	2300      	movne	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	e012      	b.n	80042ee <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80042c8:	481a      	ldr	r0, [pc, #104]	; (8004334 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80042ca:	f7ff fe80 	bl	8003fce <LL_ADC_IsEnabled>
 80042ce:	4604      	mov	r4, r0
 80042d0:	4819      	ldr	r0, [pc, #100]	; (8004338 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80042d2:	f7ff fe7c 	bl	8003fce <LL_ADC_IsEnabled>
 80042d6:	4603      	mov	r3, r0
 80042d8:	431c      	orrs	r4, r3
 80042da:	481a      	ldr	r0, [pc, #104]	; (8004344 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80042dc:	f7ff fe77 	bl	8003fce <LL_ADC_IsEnabled>
 80042e0:	4603      	mov	r3, r0
 80042e2:	4323      	orrs	r3, r4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bf0c      	ite	eq
 80042e8:	2301      	moveq	r3, #1
 80042ea:	2300      	movne	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d012      	beq.n	8004318 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80042f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80042fa:	f023 030f 	bic.w	r3, r3, #15
 80042fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004300:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004302:	e009      	b.n	8004318 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004308:	f043 0220 	orr.w	r2, r3, #32
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004316:	e000      	b.n	800431a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004318:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004322:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004326:	4618      	mov	r0, r3
 8004328:	3784      	adds	r7, #132	; 0x84
 800432a:	46bd      	mov	sp, r7
 800432c:	bd90      	pop	{r4, r7, pc}
 800432e:	bf00      	nop
 8004330:	50000100 	.word	0x50000100
 8004334:	50000400 	.word	0x50000400
 8004338:	50000500 	.word	0x50000500
 800433c:	50000300 	.word	0x50000300
 8004340:	50000700 	.word	0x50000700
 8004344:	50000600 	.word	0x50000600

08004348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004358:	4b0c      	ldr	r3, [pc, #48]	; (800438c <__NVIC_SetPriorityGrouping+0x44>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004364:	4013      	ands	r3, r2
 8004366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800437a:	4a04      	ldr	r2, [pc, #16]	; (800438c <__NVIC_SetPriorityGrouping+0x44>)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	60d3      	str	r3, [r2, #12]
}
 8004380:	bf00      	nop
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	e000ed00 	.word	0xe000ed00

08004390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004394:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	0a1b      	lsrs	r3, r3, #8
 800439a:	f003 0307 	and.w	r3, r3, #7
}
 800439e:	4618      	mov	r0, r3
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	e000ed00 	.word	0xe000ed00

080043ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	db0b      	blt.n	80043d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043be:	79fb      	ldrb	r3, [r7, #7]
 80043c0:	f003 021f 	and.w	r2, r3, #31
 80043c4:	4907      	ldr	r1, [pc, #28]	; (80043e4 <__NVIC_EnableIRQ+0x38>)
 80043c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	2001      	movs	r0, #1
 80043ce:	fa00 f202 	lsl.w	r2, r0, r2
 80043d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	e000e100 	.word	0xe000e100

080043e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	6039      	str	r1, [r7, #0]
 80043f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	db0a      	blt.n	8004412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	490c      	ldr	r1, [pc, #48]	; (8004434 <__NVIC_SetPriority+0x4c>)
 8004402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004406:	0112      	lsls	r2, r2, #4
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	440b      	add	r3, r1
 800440c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004410:	e00a      	b.n	8004428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	b2da      	uxtb	r2, r3
 8004416:	4908      	ldr	r1, [pc, #32]	; (8004438 <__NVIC_SetPriority+0x50>)
 8004418:	79fb      	ldrb	r3, [r7, #7]
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	3b04      	subs	r3, #4
 8004420:	0112      	lsls	r2, r2, #4
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	440b      	add	r3, r1
 8004426:	761a      	strb	r2, [r3, #24]
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	e000e100 	.word	0xe000e100
 8004438:	e000ed00 	.word	0xe000ed00

0800443c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800443c:	b480      	push	{r7}
 800443e:	b089      	sub	sp, #36	; 0x24
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f1c3 0307 	rsb	r3, r3, #7
 8004456:	2b04      	cmp	r3, #4
 8004458:	bf28      	it	cs
 800445a:	2304      	movcs	r3, #4
 800445c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	3304      	adds	r3, #4
 8004462:	2b06      	cmp	r3, #6
 8004464:	d902      	bls.n	800446c <NVIC_EncodePriority+0x30>
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	3b03      	subs	r3, #3
 800446a:	e000      	b.n	800446e <NVIC_EncodePriority+0x32>
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004470:	f04f 32ff 	mov.w	r2, #4294967295
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	43da      	mvns	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	401a      	ands	r2, r3
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004484:	f04f 31ff 	mov.w	r1, #4294967295
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	fa01 f303 	lsl.w	r3, r1, r3
 800448e:	43d9      	mvns	r1, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004494:	4313      	orrs	r3, r2
         );
}
 8004496:	4618      	mov	r0, r3
 8004498:	3724      	adds	r7, #36	; 0x24
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
	...

080044a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044b4:	d301      	bcc.n	80044ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044b6:	2301      	movs	r3, #1
 80044b8:	e00f      	b.n	80044da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044ba:	4a0a      	ldr	r2, [pc, #40]	; (80044e4 <SysTick_Config+0x40>)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3b01      	subs	r3, #1
 80044c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044c2:	210f      	movs	r1, #15
 80044c4:	f04f 30ff 	mov.w	r0, #4294967295
 80044c8:	f7ff ff8e 	bl	80043e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044cc:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <SysTick_Config+0x40>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044d2:	4b04      	ldr	r3, [pc, #16]	; (80044e4 <SysTick_Config+0x40>)
 80044d4:	2207      	movs	r2, #7
 80044d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	e000e010 	.word	0xe000e010

080044e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff ff29 	bl	8004348 <__NVIC_SetPriorityGrouping>
}
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b086      	sub	sp, #24
 8004502:	af00      	add	r7, sp, #0
 8004504:	4603      	mov	r3, r0
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	607a      	str	r2, [r7, #4]
 800450a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800450c:	f7ff ff40 	bl	8004390 <__NVIC_GetPriorityGrouping>
 8004510:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	68b9      	ldr	r1, [r7, #8]
 8004516:	6978      	ldr	r0, [r7, #20]
 8004518:	f7ff ff90 	bl	800443c <NVIC_EncodePriority>
 800451c:	4602      	mov	r2, r0
 800451e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004522:	4611      	mov	r1, r2
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff ff5f 	bl	80043e8 <__NVIC_SetPriority>
}
 800452a:	bf00      	nop
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b082      	sub	sp, #8
 8004536:	af00      	add	r7, sp, #0
 8004538:	4603      	mov	r3, r0
 800453a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800453c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff ff33 	bl	80043ac <__NVIC_EnableIRQ>
}
 8004546:	bf00      	nop
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b082      	sub	sp, #8
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7ff ffa4 	bl	80044a4 <SysTick_Config>
 800455c:	4603      	mov	r3, r0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b082      	sub	sp, #8
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e014      	b.n	80045a2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	791b      	ldrb	r3, [r3, #4]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d105      	bne.n	800458e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7fd fe35 	bl	80021f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2202      	movs	r2, #2
 8004592:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e056      	b.n	800466e <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	795b      	ldrb	r3, [r3, #5]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <HAL_DAC_Start+0x20>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e050      	b.n	800466e <HAL_DAC_Start+0xc2>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2202      	movs	r2, #2
 80045d6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6819      	ldr	r1, [r3, #0]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2201      	movs	r2, #1
 80045e6:	409a      	lsls	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045f0:	4b22      	ldr	r3, [pc, #136]	; (800467c <HAL_DAC_Start+0xd0>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	099b      	lsrs	r3, r3, #6
 80045f6:	4a22      	ldr	r2, [pc, #136]	; (8004680 <HAL_DAC_Start+0xd4>)
 80045f8:	fba2 2303 	umull	r2, r3, r2, r3
 80045fc:	099b      	lsrs	r3, r3, #6
 80045fe:	3301      	adds	r3, #1
 8004600:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8004602:	e002      	b.n	800460a <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3b01      	subs	r3, #1
 8004608:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1f9      	bne.n	8004604 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10f      	bne.n	8004636 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004620:	2b02      	cmp	r3, #2
 8004622:	d11d      	bne.n	8004660 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0201 	orr.w	r2, r2, #1
 8004632:	605a      	str	r2, [r3, #4]
 8004634:	e014      	b.n	8004660 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	f003 0310 	and.w	r3, r3, #16
 8004646:	2102      	movs	r1, #2
 8004648:	fa01 f303 	lsl.w	r3, r1, r3
 800464c:	429a      	cmp	r2, r3
 800464e:	d107      	bne.n	8004660 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0202 	orr.w	r2, r2, #2
 800465e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	2000000c 	.word	0x2000000c
 8004680:	053e2d63 	.word	0x053e2d63

08004684 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e018      	b.n	80046d2 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d105      	bne.n	80046be <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4413      	add	r3, r2
 80046b8:	3308      	adds	r3, #8
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	e004      	b.n	80046c8 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4413      	add	r3, r2
 80046c4:	3314      	adds	r3, #20
 80046c6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	461a      	mov	r2, r3
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	371c      	adds	r7, #28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
	...

080046e0 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	; 0x28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_DAC_ConfigChannel+0x1c>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e19e      	b.n	8004a3e <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	795b      	ldrb	r3, [r3, #5]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_DAC_ConfigChannel+0x2c>
 8004708:	2302      	movs	r3, #2
 800470a:	e198      	b.n	8004a3e <HAL_DAC_ConfigChannel+0x35e>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2201      	movs	r2, #1
 8004710:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2202      	movs	r2, #2
 8004716:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	2b04      	cmp	r3, #4
 800471e:	d17a      	bne.n	8004816 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004720:	f7fe f810 	bl	8002744 <HAL_GetTick>
 8004724:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d13d      	bne.n	80047a8 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800472c:	e018      	b.n	8004760 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800472e:	f7fe f809 	bl	8002744 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b01      	cmp	r3, #1
 800473a:	d911      	bls.n	8004760 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f043 0208 	orr.w	r2, r3, #8
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2203      	movs	r2, #3
 800475a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e16e      	b.n	8004a3e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004766:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1df      	bne.n	800472e <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004776:	641a      	str	r2, [r3, #64]	; 0x40
 8004778:	e020      	b.n	80047bc <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800477a:	f7fd ffe3 	bl	8002744 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b01      	cmp	r3, #1
 8004786:	d90f      	bls.n	80047a8 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478e:	2b00      	cmp	r3, #0
 8004790:	da0a      	bge.n	80047a8 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	f043 0208 	orr.w	r2, r3, #8
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2203      	movs	r2, #3
 80047a2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e14a      	b.n	8004a3e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	dbe3      	blt.n	800477a <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047ba:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f003 0310 	and.w	r3, r3, #16
 80047c8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80047cc:	fa01 f303 	lsl.w	r3, r1, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	ea02 0103 	and.w	r1, r2, r3
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f003 0310 	and.w	r3, r3, #16
 80047e0:	409a      	lsls	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f003 0310 	and.w	r3, r3, #16
 80047f6:	21ff      	movs	r1, #255	; 0xff
 80047f8:	fa01 f303 	lsl.w	r3, r1, r3
 80047fc:	43db      	mvns	r3, r3
 80047fe:	ea02 0103 	and.w	r1, r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f003 0310 	and.w	r3, r3, #16
 800480c:	409a      	lsls	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d11d      	bne.n	800485a <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f003 0310 	and.w	r3, r3, #16
 800482c:	221f      	movs	r2, #31
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	43db      	mvns	r3, r3
 8004834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004836:	4013      	ands	r3, r2
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484e:	4313      	orrs	r3, r2
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004858:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f003 0310 	and.w	r3, r3, #16
 8004868:	2207      	movs	r2, #7
 800486a:	fa02 f303 	lsl.w	r3, r2, r3
 800486e:	43db      	mvns	r3, r3
 8004870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004872:	4013      	ands	r3, r2
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d102      	bne.n	8004884 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800487e:	2300      	movs	r3, #0
 8004880:	623b      	str	r3, [r7, #32]
 8004882:	e00f      	b.n	80048a4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	2b02      	cmp	r3, #2
 800488a:	d102      	bne.n	8004892 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800488c:	2301      	movs	r3, #1
 800488e:	623b      	str	r3, [r7, #32]
 8004890:	e008      	b.n	80048a4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d102      	bne.n	80048a0 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800489a:	2301      	movs	r3, #1
 800489c:	623b      	str	r3, [r7, #32]
 800489e:	e001      	b.n	80048a4 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80048a0:	2300      	movs	r3, #0
 80048a2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	6a3a      	ldr	r2, [r7, #32]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f003 0310 	and.w	r3, r3, #16
 80048ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	43db      	mvns	r3, r3
 80048c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c6:	4013      	ands	r3, r2
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	791b      	ldrb	r3, [r3, #4]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d102      	bne.n	80048d8 <HAL_DAC_ConfigChannel+0x1f8>
 80048d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048d6:	e000      	b.n	80048da <HAL_DAC_ConfigChannel+0x1fa>
 80048d8:	2300      	movs	r3, #0
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4313      	orrs	r3, r2
 80048de:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f003 0310 	and.w	r3, r3, #16
 80048e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	43db      	mvns	r3, r3
 80048f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f2:	4013      	ands	r3, r2
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	795b      	ldrb	r3, [r3, #5]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d102      	bne.n	8004904 <HAL_DAC_ConfigChannel+0x224>
 80048fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004902:	e000      	b.n	8004906 <HAL_DAC_ConfigChannel+0x226>
 8004904:	2300      	movs	r3, #0
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	4313      	orrs	r3, r2
 800490a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b02      	cmp	r3, #2
 800491a:	d114      	bne.n	8004946 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800491c:	f003 fdd4 	bl	80084c8 <HAL_RCC_GetHCLKFreq>
 8004920:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	4a48      	ldr	r2, [pc, #288]	; (8004a48 <HAL_DAC_ConfigChannel+0x368>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d904      	bls.n	8004934 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004930:	627b      	str	r3, [r7, #36]	; 0x24
 8004932:	e00f      	b.n	8004954 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	4a45      	ldr	r2, [pc, #276]	; (8004a4c <HAL_DAC_ConfigChannel+0x36c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d90a      	bls.n	8004952 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
 8004944:	e006      	b.n	8004954 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800494c:	4313      	orrs	r3, r2
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
 8004950:	e000      	b.n	8004954 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004952:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f003 0310 	and.w	r3, r3, #16
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004962:	4313      	orrs	r3, r2
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6819      	ldr	r1, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f003 0310 	and.w	r3, r3, #16
 800497a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	43da      	mvns	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	400a      	ands	r2, r1
 800498a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f003 0310 	and.w	r3, r3, #16
 800499a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	43db      	mvns	r3, r3
 80049a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a6:	4013      	ands	r3, r2
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	fa02 f303 	lsl.w	r3, r2, r3
 80049bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049be:	4313      	orrs	r3, r2
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6819      	ldr	r1, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f003 0310 	and.w	r3, r3, #16
 80049d6:	22c0      	movs	r2, #192	; 0xc0
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	43da      	mvns	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	400a      	ands	r2, r1
 80049e4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	089b      	lsrs	r3, r3, #2
 80049ec:	f003 030f 	and.w	r3, r3, #15
 80049f0:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	089b      	lsrs	r3, r3, #2
 80049f8:	021b      	lsls	r3, r3, #8
 80049fa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004a14:	fa01 f303 	lsl.w	r3, r1, r3
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	ea02 0103 	and.w	r1, r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f003 0310 	and.w	r3, r3, #16
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	409a      	lsls	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2201      	movs	r2, #1
 8004a34:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004a3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3728      	adds	r7, #40	; 0x28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	09896800 	.word	0x09896800
 8004a4c:	04c4b400 	.word	0x04c4b400

08004a50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e08d      	b.n	8004b7e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	4b47      	ldr	r3, [pc, #284]	; (8004b88 <HAL_DMA_Init+0x138>)
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d80f      	bhi.n	8004a8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	461a      	mov	r2, r3
 8004a74:	4b45      	ldr	r3, [pc, #276]	; (8004b8c <HAL_DMA_Init+0x13c>)
 8004a76:	4413      	add	r3, r2
 8004a78:	4a45      	ldr	r2, [pc, #276]	; (8004b90 <HAL_DMA_Init+0x140>)
 8004a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7e:	091b      	lsrs	r3, r3, #4
 8004a80:	009a      	lsls	r2, r3, #2
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a42      	ldr	r2, [pc, #264]	; (8004b94 <HAL_DMA_Init+0x144>)
 8004a8a:	641a      	str	r2, [r3, #64]	; 0x40
 8004a8c:	e00e      	b.n	8004aac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	4b40      	ldr	r3, [pc, #256]	; (8004b98 <HAL_DMA_Init+0x148>)
 8004a96:	4413      	add	r3, r2
 8004a98:	4a3d      	ldr	r2, [pc, #244]	; (8004b90 <HAL_DMA_Init+0x140>)
 8004a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9e:	091b      	lsrs	r3, r3, #4
 8004aa0:	009a      	lsls	r2, r3, #2
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a3c      	ldr	r2, [pc, #240]	; (8004b9c <HAL_DMA_Init+0x14c>)
 8004aaa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ae8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fa10 	bl	8004f24 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b0c:	d102      	bne.n	8004b14 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b28:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d010      	beq.n	8004b54 <HAL_DMA_Init+0x104>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d80c      	bhi.n	8004b54 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fa30 	bl	8004fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b50:	605a      	str	r2, [r3, #4]
 8004b52:	e008      	b.n	8004b66 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	40020407 	.word	0x40020407
 8004b8c:	bffdfff8 	.word	0xbffdfff8
 8004b90:	cccccccd 	.word	0xcccccccd
 8004b94:	40020000 	.word	0x40020000
 8004b98:	bffdfbf8 	.word	0xbffdfbf8
 8004b9c:	40020400 	.word	0x40020400

08004ba0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d101      	bne.n	8004bc0 <HAL_DMA_Start_IT+0x20>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e066      	b.n	8004c8e <HAL_DMA_Start_IT+0xee>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d155      	bne.n	8004c80 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0201 	bic.w	r2, r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 f954 	bl	8004ea6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d008      	beq.n	8004c18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f042 020e 	orr.w	r2, r2, #14
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	e00f      	b.n	8004c38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0204 	bic.w	r2, r2, #4
 8004c26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 020a 	orr.w	r2, r2, #10
 8004c36:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d007      	beq.n	8004c56 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c54:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d007      	beq.n	8004c6e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c6c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f042 0201 	orr.w	r2, r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	e005      	b.n	8004c8c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004c88:	2302      	movs	r3, #2
 8004c8a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b085      	sub	sp, #20
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d005      	beq.n	8004cba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2204      	movs	r2, #4
 8004cb2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	73fb      	strb	r3, [r7, #15]
 8004cb8:	e037      	b.n	8004d2a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 020e 	bic.w	r2, r2, #14
 8004cc8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cd8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0201 	bic.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cee:	f003 021f 	and.w	r2, r3, #31
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8004cfc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d06:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00c      	beq.n	8004d2a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d1e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004d28:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d64:	f003 031f 	and.w	r3, r3, #31
 8004d68:	2204      	movs	r2, #4
 8004d6a:	409a      	lsls	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d026      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x7a>
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d021      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d107      	bne.n	8004d9c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0204 	bic.w	r2, r2, #4
 8004d9a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da0:	f003 021f 	and.w	r2, r3, #31
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	2104      	movs	r1, #4
 8004daa:	fa01 f202 	lsl.w	r2, r1, r2
 8004dae:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d071      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004dc0:	e06c      	b.n	8004e9c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc6:	f003 031f 	and.w	r3, r3, #31
 8004dca:	2202      	movs	r2, #2
 8004dcc:	409a      	lsls	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d02e      	beq.n	8004e34 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d029      	beq.n	8004e34 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10b      	bne.n	8004e06 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 020a 	bic.w	r2, r2, #10
 8004dfc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0a:	f003 021f 	and.w	r2, r3, #31
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	2102      	movs	r1, #2
 8004e14:	fa01 f202 	lsl.w	r2, r1, r2
 8004e18:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d038      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004e32:	e033      	b.n	8004e9c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e38:	f003 031f 	and.w	r3, r3, #31
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	409a      	lsls	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4013      	ands	r3, r2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d02a      	beq.n	8004e9e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d025      	beq.n	8004e9e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 020e 	bic.w	r2, r2, #14
 8004e60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e66:	f003 021f 	and.w	r2, r3, #31
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	2101      	movs	r1, #1
 8004e70:	fa01 f202 	lsl.w	r2, r1, r2
 8004e74:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d004      	beq.n	8004e9e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004e9c:	bf00      	nop
 8004e9e:	bf00      	nop
}
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b085      	sub	sp, #20
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	607a      	str	r2, [r7, #4]
 8004eb2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ebc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d004      	beq.n	8004ed0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ece:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed4:	f003 021f 	and.w	r2, r3, #31
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004edc:	2101      	movs	r1, #1
 8004ede:	fa01 f202 	lsl.w	r2, r1, r2
 8004ee2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d108      	bne.n	8004f06 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004f04:	e007      	b.n	8004f16 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	60da      	str	r2, [r3, #12]
}
 8004f16:	bf00      	nop
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
	...

08004f24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	461a      	mov	r2, r3
 8004f32:	4b16      	ldr	r3, [pc, #88]	; (8004f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d802      	bhi.n	8004f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004f38:	4b15      	ldr	r3, [pc, #84]	; (8004f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	e001      	b.n	8004f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004f3e:	4b15      	ldr	r3, [pc, #84]	; (8004f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004f40:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	3b08      	subs	r3, #8
 8004f4e:	4a12      	ldr	r2, [pc, #72]	; (8004f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004f50:	fba2 2303 	umull	r2, r3, r2, r3
 8004f54:	091b      	lsrs	r3, r3, #4
 8004f56:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5c:	089b      	lsrs	r3, r3, #2
 8004f5e:	009a      	lsls	r2, r3, #2
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	4413      	add	r3, r2
 8004f64:	461a      	mov	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a0b      	ldr	r2, [pc, #44]	; (8004f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004f6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f003 031f 	and.w	r3, r3, #31
 8004f76:	2201      	movs	r2, #1
 8004f78:	409a      	lsls	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40020407 	.word	0x40020407
 8004f90:	40020800 	.word	0x40020800
 8004f94:	40020820 	.word	0x40020820
 8004f98:	cccccccd 	.word	0xcccccccd
 8004f9c:	40020880 	.word	0x40020880

08004fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	461a      	mov	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a08      	ldr	r2, [pc, #32]	; (8004fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004fc2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	f003 031f 	and.w	r3, r3, #31
 8004fcc:	2201      	movs	r2, #1
 8004fce:	409a      	lsls	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004fd4:	bf00      	nop
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	1000823f 	.word	0x1000823f
 8004fe4:	40020940 	.word	0x40020940

08004fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ff6:	e15a      	b.n	80052ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	fa01 f303 	lsl.w	r3, r1, r3
 8005004:	4013      	ands	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 814c 	beq.w	80052a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f003 0303 	and.w	r3, r3, #3
 8005018:	2b01      	cmp	r3, #1
 800501a:	d005      	beq.n	8005028 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005024:	2b02      	cmp	r3, #2
 8005026:	d130      	bne.n	800508a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	2203      	movs	r2, #3
 8005034:	fa02 f303 	lsl.w	r3, r2, r3
 8005038:	43db      	mvns	r3, r3
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4013      	ands	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800505e:	2201      	movs	r2, #1
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	43db      	mvns	r3, r3
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	4013      	ands	r3, r2
 800506c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	091b      	lsrs	r3, r3, #4
 8005074:	f003 0201 	and.w	r2, r3, #1
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	2b03      	cmp	r3, #3
 8005094:	d017      	beq.n	80050c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	2203      	movs	r2, #3
 80050a2:	fa02 f303 	lsl.w	r3, r2, r3
 80050a6:	43db      	mvns	r3, r3
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4013      	ands	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4313      	orrs	r3, r2
 80050be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d123      	bne.n	800511a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	08da      	lsrs	r2, r3, #3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3208      	adds	r2, #8
 80050da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	220f      	movs	r2, #15
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	43db      	mvns	r3, r3
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4013      	ands	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	691a      	ldr	r2, [r3, #16]
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	08da      	lsrs	r2, r3, #3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3208      	adds	r2, #8
 8005114:	6939      	ldr	r1, [r7, #16]
 8005116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	2203      	movs	r2, #3
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	43db      	mvns	r3, r3
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4013      	ands	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f003 0203 	and.w	r2, r3, #3
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 80a6 	beq.w	80052a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800515c:	4b5b      	ldr	r3, [pc, #364]	; (80052cc <HAL_GPIO_Init+0x2e4>)
 800515e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005160:	4a5a      	ldr	r2, [pc, #360]	; (80052cc <HAL_GPIO_Init+0x2e4>)
 8005162:	f043 0301 	orr.w	r3, r3, #1
 8005166:	6613      	str	r3, [r2, #96]	; 0x60
 8005168:	4b58      	ldr	r3, [pc, #352]	; (80052cc <HAL_GPIO_Init+0x2e4>)
 800516a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	60bb      	str	r3, [r7, #8]
 8005172:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005174:	4a56      	ldr	r2, [pc, #344]	; (80052d0 <HAL_GPIO_Init+0x2e8>)
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	089b      	lsrs	r3, r3, #2
 800517a:	3302      	adds	r3, #2
 800517c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005180:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f003 0303 	and.w	r3, r3, #3
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	220f      	movs	r2, #15
 800518c:	fa02 f303 	lsl.w	r3, r2, r3
 8005190:	43db      	mvns	r3, r3
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	4013      	ands	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800519e:	d01f      	beq.n	80051e0 <HAL_GPIO_Init+0x1f8>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a4c      	ldr	r2, [pc, #304]	; (80052d4 <HAL_GPIO_Init+0x2ec>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d019      	beq.n	80051dc <HAL_GPIO_Init+0x1f4>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a4b      	ldr	r2, [pc, #300]	; (80052d8 <HAL_GPIO_Init+0x2f0>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d013      	beq.n	80051d8 <HAL_GPIO_Init+0x1f0>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a4a      	ldr	r2, [pc, #296]	; (80052dc <HAL_GPIO_Init+0x2f4>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00d      	beq.n	80051d4 <HAL_GPIO_Init+0x1ec>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a49      	ldr	r2, [pc, #292]	; (80052e0 <HAL_GPIO_Init+0x2f8>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d007      	beq.n	80051d0 <HAL_GPIO_Init+0x1e8>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a48      	ldr	r2, [pc, #288]	; (80052e4 <HAL_GPIO_Init+0x2fc>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d101      	bne.n	80051cc <HAL_GPIO_Init+0x1e4>
 80051c8:	2305      	movs	r3, #5
 80051ca:	e00a      	b.n	80051e2 <HAL_GPIO_Init+0x1fa>
 80051cc:	2306      	movs	r3, #6
 80051ce:	e008      	b.n	80051e2 <HAL_GPIO_Init+0x1fa>
 80051d0:	2304      	movs	r3, #4
 80051d2:	e006      	b.n	80051e2 <HAL_GPIO_Init+0x1fa>
 80051d4:	2303      	movs	r3, #3
 80051d6:	e004      	b.n	80051e2 <HAL_GPIO_Init+0x1fa>
 80051d8:	2302      	movs	r3, #2
 80051da:	e002      	b.n	80051e2 <HAL_GPIO_Init+0x1fa>
 80051dc:	2301      	movs	r3, #1
 80051de:	e000      	b.n	80051e2 <HAL_GPIO_Init+0x1fa>
 80051e0:	2300      	movs	r3, #0
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	f002 0203 	and.w	r2, r2, #3
 80051e8:	0092      	lsls	r2, r2, #2
 80051ea:	4093      	lsls	r3, r2
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051f2:	4937      	ldr	r1, [pc, #220]	; (80052d0 <HAL_GPIO_Init+0x2e8>)
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	089b      	lsrs	r3, r3, #2
 80051f8:	3302      	adds	r3, #2
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005200:	4b39      	ldr	r3, [pc, #228]	; (80052e8 <HAL_GPIO_Init+0x300>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	43db      	mvns	r3, r3
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4013      	ands	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005224:	4a30      	ldr	r2, [pc, #192]	; (80052e8 <HAL_GPIO_Init+0x300>)
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800522a:	4b2f      	ldr	r3, [pc, #188]	; (80052e8 <HAL_GPIO_Init+0x300>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	43db      	mvns	r3, r3
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4013      	ands	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800524e:	4a26      	ldr	r2, [pc, #152]	; (80052e8 <HAL_GPIO_Init+0x300>)
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005254:	4b24      	ldr	r3, [pc, #144]	; (80052e8 <HAL_GPIO_Init+0x300>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	43db      	mvns	r3, r3
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4013      	ands	r3, r2
 8005262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4313      	orrs	r3, r2
 8005276:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005278:	4a1b      	ldr	r2, [pc, #108]	; (80052e8 <HAL_GPIO_Init+0x300>)
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800527e:	4b1a      	ldr	r3, [pc, #104]	; (80052e8 <HAL_GPIO_Init+0x300>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	43db      	mvns	r3, r3
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	4013      	ands	r3, r2
 800528c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80052a2:	4a11      	ldr	r2, [pc, #68]	; (80052e8 <HAL_GPIO_Init+0x300>)
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	3301      	adds	r3, #1
 80052ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	fa22 f303 	lsr.w	r3, r2, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f47f ae9d 	bne.w	8004ff8 <HAL_GPIO_Init+0x10>
  }
}
 80052be:	bf00      	nop
 80052c0:	bf00      	nop
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	40021000 	.word	0x40021000
 80052d0:	40010000 	.word	0x40010000
 80052d4:	48000400 	.word	0x48000400
 80052d8:	48000800 	.word	0x48000800
 80052dc:	48000c00 	.word	0x48000c00
 80052e0:	48001000 	.word	0x48001000
 80052e4:	48001400 	.word	0x48001400
 80052e8:	40010400 	.word	0x40010400

080052ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	460b      	mov	r3, r1
 80052f6:	807b      	strh	r3, [r7, #2]
 80052f8:	4613      	mov	r3, r2
 80052fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052fc:	787b      	ldrb	r3, [r7, #1]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005302:	887a      	ldrh	r2, [r7, #2]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005308:	e002      	b.n	8005310 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800530a:	887a      	ldrh	r2, [r7, #2]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	460b      	mov	r3, r1
 8005326:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800532e:	887a      	ldrh	r2, [r7, #2]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4013      	ands	r3, r2
 8005334:	041a      	lsls	r2, r3, #16
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	43d9      	mvns	r1, r3
 800533a:	887b      	ldrh	r3, [r7, #2]
 800533c:	400b      	ands	r3, r1
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	619a      	str	r2, [r3, #24]
}
 8005344:	bf00      	nop
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e08d      	b.n	800547e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fc ff7c 	bl	8002274 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2224      	movs	r2, #36	; 0x24
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0201 	bic.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d107      	bne.n	80053ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053c6:	609a      	str	r2, [r3, #8]
 80053c8:	e006      	b.n	80053d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80053d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d108      	bne.n	80053f2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ee:	605a      	str	r2, [r3, #4]
 80053f0:	e007      	b.n	8005402 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005400:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6812      	ldr	r2, [r2, #0]
 800540c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005414:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68da      	ldr	r2, [r3, #12]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005424:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691a      	ldr	r2, [r3, #16]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	69d9      	ldr	r1, [r3, #28]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a1a      	ldr	r2, [r3, #32]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0201 	orr.w	r2, r2, #1
 800545e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2220      	movs	r2, #32
 800546a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b088      	sub	sp, #32
 800548c:	af02      	add	r7, sp, #8
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	4608      	mov	r0, r1
 8005492:	4611      	mov	r1, r2
 8005494:	461a      	mov	r2, r3
 8005496:	4603      	mov	r3, r0
 8005498:	817b      	strh	r3, [r7, #10]
 800549a:	460b      	mov	r3, r1
 800549c:	813b      	strh	r3, [r7, #8]
 800549e:	4613      	mov	r3, r2
 80054a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b20      	cmp	r3, #32
 80054ac:	f040 80f9 	bne.w	80056a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <HAL_I2C_Mem_Write+0x34>
 80054b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d105      	bne.n	80054c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e0ed      	b.n	80056a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d101      	bne.n	80054d6 <HAL_I2C_Mem_Write+0x4e>
 80054d2:	2302      	movs	r3, #2
 80054d4:	e0e6      	b.n	80056a4 <HAL_I2C_Mem_Write+0x21c>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80054de:	f7fd f931 	bl	8002744 <HAL_GetTick>
 80054e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	2319      	movs	r3, #25
 80054ea:	2201      	movs	r2, #1
 80054ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 fac3 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e0d1      	b.n	80056a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2221      	movs	r2, #33	; 0x21
 8005504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2240      	movs	r2, #64	; 0x40
 800550c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a3a      	ldr	r2, [r7, #32]
 800551a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005520:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005528:	88f8      	ldrh	r0, [r7, #6]
 800552a:	893a      	ldrh	r2, [r7, #8]
 800552c:	8979      	ldrh	r1, [r7, #10]
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	9301      	str	r3, [sp, #4]
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	4603      	mov	r3, r0
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 f9d3 	bl	80058e4 <I2C_RequestMemoryWrite>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e0a9      	b.n	80056a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005554:	b29b      	uxth	r3, r3
 8005556:	2bff      	cmp	r3, #255	; 0xff
 8005558:	d90e      	bls.n	8005578 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	22ff      	movs	r2, #255	; 0xff
 800555e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005564:	b2da      	uxtb	r2, r3
 8005566:	8979      	ldrh	r1, [r7, #10]
 8005568:	2300      	movs	r3, #0
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 fc47 	bl	8005e04 <I2C_TransferConfig>
 8005576:	e00f      	b.n	8005598 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557c:	b29a      	uxth	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005586:	b2da      	uxtb	r2, r3
 8005588:	8979      	ldrh	r1, [r7, #10]
 800558a:	2300      	movs	r3, #0
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 fc36 	bl	8005e04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 fac6 	bl	8005b2e <I2C_WaitOnTXISFlagUntilTimeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e07b      	b.n	80056a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	781a      	ldrb	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d034      	beq.n	8005650 <HAL_I2C_Mem_Write+0x1c8>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d130      	bne.n	8005650 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	2200      	movs	r2, #0
 80055f6:	2180      	movs	r1, #128	; 0x80
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 fa3f 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e04d      	b.n	80056a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560c:	b29b      	uxth	r3, r3
 800560e:	2bff      	cmp	r3, #255	; 0xff
 8005610:	d90e      	bls.n	8005630 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	22ff      	movs	r2, #255	; 0xff
 8005616:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800561c:	b2da      	uxtb	r2, r3
 800561e:	8979      	ldrh	r1, [r7, #10]
 8005620:	2300      	movs	r3, #0
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 fbeb 	bl	8005e04 <I2C_TransferConfig>
 800562e:	e00f      	b.n	8005650 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005634:	b29a      	uxth	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800563e:	b2da      	uxtb	r2, r3
 8005640:	8979      	ldrh	r1, [r7, #10]
 8005642:	2300      	movs	r3, #0
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 fbda 	bl	8005e04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d19e      	bne.n	8005598 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 faac 	bl	8005bbc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e01a      	b.n	80056a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2220      	movs	r2, #32
 8005674:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6859      	ldr	r1, [r3, #4]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <HAL_I2C_Mem_Write+0x224>)
 8005682:	400b      	ands	r3, r1
 8005684:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	e000      	b.n	80056a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80056a2:	2302      	movs	r3, #2
  }
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	fe00e800 	.word	0xfe00e800

080056b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af02      	add	r7, sp, #8
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	4608      	mov	r0, r1
 80056ba:	4611      	mov	r1, r2
 80056bc:	461a      	mov	r2, r3
 80056be:	4603      	mov	r3, r0
 80056c0:	817b      	strh	r3, [r7, #10]
 80056c2:	460b      	mov	r3, r1
 80056c4:	813b      	strh	r3, [r7, #8]
 80056c6:	4613      	mov	r3, r2
 80056c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b20      	cmp	r3, #32
 80056d4:	f040 80fd 	bne.w	80058d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <HAL_I2C_Mem_Read+0x34>
 80056de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d105      	bne.n	80056f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e0f1      	b.n	80058d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d101      	bne.n	80056fe <HAL_I2C_Mem_Read+0x4e>
 80056fa:	2302      	movs	r3, #2
 80056fc:	e0ea      	b.n	80058d4 <HAL_I2C_Mem_Read+0x224>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005706:	f7fd f81d 	bl	8002744 <HAL_GetTick>
 800570a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	2319      	movs	r3, #25
 8005712:	2201      	movs	r2, #1
 8005714:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 f9af 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e0d5      	b.n	80058d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2222      	movs	r2, #34	; 0x22
 800572c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2240      	movs	r2, #64	; 0x40
 8005734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6a3a      	ldr	r2, [r7, #32]
 8005742:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005748:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005750:	88f8      	ldrh	r0, [r7, #6]
 8005752:	893a      	ldrh	r2, [r7, #8]
 8005754:	8979      	ldrh	r1, [r7, #10]
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	9301      	str	r3, [sp, #4]
 800575a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	4603      	mov	r3, r0
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 f913 	bl	800598c <I2C_RequestMemoryRead>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e0ad      	b.n	80058d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577c:	b29b      	uxth	r3, r3
 800577e:	2bff      	cmp	r3, #255	; 0xff
 8005780:	d90e      	bls.n	80057a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	22ff      	movs	r2, #255	; 0xff
 8005786:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800578c:	b2da      	uxtb	r2, r3
 800578e:	8979      	ldrh	r1, [r7, #10]
 8005790:	4b52      	ldr	r3, [pc, #328]	; (80058dc <HAL_I2C_Mem_Read+0x22c>)
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 fb33 	bl	8005e04 <I2C_TransferConfig>
 800579e:	e00f      	b.n	80057c0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	8979      	ldrh	r1, [r7, #10]
 80057b2:	4b4a      	ldr	r3, [pc, #296]	; (80058dc <HAL_I2C_Mem_Read+0x22c>)
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 fb22 	bl	8005e04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	2200      	movs	r2, #0
 80057c8:	2104      	movs	r1, #4
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f000 f956 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e07c      	b.n	80058d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	b2d2      	uxtb	r2, r2
 80057e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005802:	b29b      	uxth	r3, r3
 8005804:	3b01      	subs	r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005810:	b29b      	uxth	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d034      	beq.n	8005880 <HAL_I2C_Mem_Read+0x1d0>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581a:	2b00      	cmp	r3, #0
 800581c:	d130      	bne.n	8005880 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	2200      	movs	r2, #0
 8005826:	2180      	movs	r1, #128	; 0x80
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 f927 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e04d      	b.n	80058d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583c:	b29b      	uxth	r3, r3
 800583e:	2bff      	cmp	r3, #255	; 0xff
 8005840:	d90e      	bls.n	8005860 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	22ff      	movs	r2, #255	; 0xff
 8005846:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584c:	b2da      	uxtb	r2, r3
 800584e:	8979      	ldrh	r1, [r7, #10]
 8005850:	2300      	movs	r3, #0
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 fad3 	bl	8005e04 <I2C_TransferConfig>
 800585e:	e00f      	b.n	8005880 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005864:	b29a      	uxth	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800586e:	b2da      	uxtb	r2, r3
 8005870:	8979      	ldrh	r1, [r7, #10]
 8005872:	2300      	movs	r3, #0
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 fac2 	bl	8005e04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005884:	b29b      	uxth	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d19a      	bne.n	80057c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 f994 	bl	8005bbc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e01a      	b.n	80058d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2220      	movs	r2, #32
 80058a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6859      	ldr	r1, [r3, #4]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	4b0b      	ldr	r3, [pc, #44]	; (80058e0 <HAL_I2C_Mem_Read+0x230>)
 80058b2:	400b      	ands	r3, r1
 80058b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2220      	movs	r2, #32
 80058ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058ce:	2300      	movs	r3, #0
 80058d0:	e000      	b.n	80058d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80058d2:	2302      	movs	r3, #2
  }
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	80002400 	.word	0x80002400
 80058e0:	fe00e800 	.word	0xfe00e800

080058e4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af02      	add	r7, sp, #8
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	4608      	mov	r0, r1
 80058ee:	4611      	mov	r1, r2
 80058f0:	461a      	mov	r2, r3
 80058f2:	4603      	mov	r3, r0
 80058f4:	817b      	strh	r3, [r7, #10]
 80058f6:	460b      	mov	r3, r1
 80058f8:	813b      	strh	r3, [r7, #8]
 80058fa:	4613      	mov	r3, r2
 80058fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80058fe:	88fb      	ldrh	r3, [r7, #6]
 8005900:	b2da      	uxtb	r2, r3
 8005902:	8979      	ldrh	r1, [r7, #10]
 8005904:	4b20      	ldr	r3, [pc, #128]	; (8005988 <I2C_RequestMemoryWrite+0xa4>)
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 fa79 	bl	8005e04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005912:	69fa      	ldr	r2, [r7, #28]
 8005914:	69b9      	ldr	r1, [r7, #24]
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 f909 	bl	8005b2e <I2C_WaitOnTXISFlagUntilTimeout>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e02c      	b.n	8005980 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005926:	88fb      	ldrh	r3, [r7, #6]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d105      	bne.n	8005938 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800592c:	893b      	ldrh	r3, [r7, #8]
 800592e:	b2da      	uxtb	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	629a      	str	r2, [r3, #40]	; 0x28
 8005936:	e015      	b.n	8005964 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005938:	893b      	ldrh	r3, [r7, #8]
 800593a:	0a1b      	lsrs	r3, r3, #8
 800593c:	b29b      	uxth	r3, r3
 800593e:	b2da      	uxtb	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005946:	69fa      	ldr	r2, [r7, #28]
 8005948:	69b9      	ldr	r1, [r7, #24]
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 f8ef 	bl	8005b2e <I2C_WaitOnTXISFlagUntilTimeout>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e012      	b.n	8005980 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800595a:	893b      	ldrh	r3, [r7, #8]
 800595c:	b2da      	uxtb	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	2200      	movs	r2, #0
 800596c:	2180      	movs	r1, #128	; 0x80
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 f884 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e000      	b.n	8005980 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	80002000 	.word	0x80002000

0800598c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af02      	add	r7, sp, #8
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	4608      	mov	r0, r1
 8005996:	4611      	mov	r1, r2
 8005998:	461a      	mov	r2, r3
 800599a:	4603      	mov	r3, r0
 800599c:	817b      	strh	r3, [r7, #10]
 800599e:	460b      	mov	r3, r1
 80059a0:	813b      	strh	r3, [r7, #8]
 80059a2:	4613      	mov	r3, r2
 80059a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80059a6:	88fb      	ldrh	r3, [r7, #6]
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	8979      	ldrh	r1, [r7, #10]
 80059ac:	4b20      	ldr	r3, [pc, #128]	; (8005a30 <I2C_RequestMemoryRead+0xa4>)
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	2300      	movs	r3, #0
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 fa26 	bl	8005e04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059b8:	69fa      	ldr	r2, [r7, #28]
 80059ba:	69b9      	ldr	r1, [r7, #24]
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 f8b6 	bl	8005b2e <I2C_WaitOnTXISFlagUntilTimeout>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e02c      	b.n	8005a26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059cc:	88fb      	ldrh	r3, [r7, #6]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d105      	bne.n	80059de <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059d2:	893b      	ldrh	r3, [r7, #8]
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	629a      	str	r2, [r3, #40]	; 0x28
 80059dc:	e015      	b.n	8005a0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80059de:	893b      	ldrh	r3, [r7, #8]
 80059e0:	0a1b      	lsrs	r3, r3, #8
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ec:	69fa      	ldr	r2, [r7, #28]
 80059ee:	69b9      	ldr	r1, [r7, #24]
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 f89c 	bl	8005b2e <I2C_WaitOnTXISFlagUntilTimeout>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e012      	b.n	8005a26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a00:	893b      	ldrh	r3, [r7, #8]
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	2200      	movs	r2, #0
 8005a12:	2140      	movs	r1, #64	; 0x40
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f831 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e000      	b.n	8005a26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	80002000 	.word	0x80002000

08005a34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d103      	bne.n	8005a52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d007      	beq.n	8005a70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699a      	ldr	r2, [r3, #24]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0201 	orr.w	r2, r2, #1
 8005a6e:	619a      	str	r2, [r3, #24]
  }
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	603b      	str	r3, [r7, #0]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a8c:	e03b      	b.n	8005b06 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	6839      	ldr	r1, [r7, #0]
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 f8d6 	bl	8005c44 <I2C_IsErrorOccurred>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e041      	b.n	8005b26 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa8:	d02d      	beq.n	8005b06 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aaa:	f7fc fe4b 	bl	8002744 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d302      	bcc.n	8005ac0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d122      	bne.n	8005b06 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699a      	ldr	r2, [r3, #24]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	bf0c      	ite	eq
 8005ad0:	2301      	moveq	r3, #1
 8005ad2:	2300      	movne	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d113      	bne.n	8005b06 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae2:	f043 0220 	orr.w	r2, r3, #32
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e00f      	b.n	8005b26 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	699a      	ldr	r2, [r3, #24]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	bf0c      	ite	eq
 8005b16:	2301      	moveq	r3, #1
 8005b18:	2300      	movne	r3, #0
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	79fb      	ldrb	r3, [r7, #7]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d0b4      	beq.n	8005a8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b084      	sub	sp, #16
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	60f8      	str	r0, [r7, #12]
 8005b36:	60b9      	str	r1, [r7, #8]
 8005b38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b3a:	e033      	b.n	8005ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	68b9      	ldr	r1, [r7, #8]
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 f87f 	bl	8005c44 <I2C_IsErrorOccurred>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e031      	b.n	8005bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b56:	d025      	beq.n	8005ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b58:	f7fc fdf4 	bl	8002744 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d302      	bcc.n	8005b6e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d11a      	bne.n	8005ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d013      	beq.n	8005ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b80:	f043 0220 	orr.w	r2, r3, #32
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e007      	b.n	8005bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d1c4      	bne.n	8005b3c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bc8:	e02f      	b.n	8005c2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 f838 	bl	8005c44 <I2C_IsErrorOccurred>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e02d      	b.n	8005c3a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bde:	f7fc fdb1 	bl	8002744 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d302      	bcc.n	8005bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d11a      	bne.n	8005c2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	f003 0320 	and.w	r3, r3, #32
 8005bfe:	2b20      	cmp	r3, #32
 8005c00:	d013      	beq.n	8005c2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c06:	f043 0220 	orr.w	r2, r3, #32
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2220      	movs	r2, #32
 8005c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e007      	b.n	8005c3a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	f003 0320 	and.w	r3, r3, #32
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	d1c8      	bne.n	8005bca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08a      	sub	sp, #40	; 0x28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	f003 0310 	and.w	r3, r3, #16
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d068      	beq.n	8005d42 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2210      	movs	r2, #16
 8005c76:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c78:	e049      	b.n	8005d0e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c80:	d045      	beq.n	8005d0e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c82:	f7fc fd5f 	bl	8002744 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d302      	bcc.n	8005c98 <I2C_IsErrorOccurred+0x54>
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d13a      	bne.n	8005d0e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ca2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005caa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cba:	d121      	bne.n	8005d00 <I2C_IsErrorOccurred+0xbc>
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cc2:	d01d      	beq.n	8005d00 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005cc4:	7cfb      	ldrb	r3, [r7, #19]
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	d01a      	beq.n	8005d00 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cd8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005cda:	f7fc fd33 	bl	8002744 <HAL_GetTick>
 8005cde:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ce0:	e00e      	b.n	8005d00 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005ce2:	f7fc fd2f 	bl	8002744 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b19      	cmp	r3, #25
 8005cee:	d907      	bls.n	8005d00 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	f043 0320 	orr.w	r3, r3, #32
 8005cf6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005cfe:	e006      	b.n	8005d0e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	f003 0320 	and.w	r3, r3, #32
 8005d0a:	2b20      	cmp	r3, #32
 8005d0c:	d1e9      	bne.n	8005ce2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	f003 0320 	and.w	r3, r3, #32
 8005d18:	2b20      	cmp	r3, #32
 8005d1a:	d003      	beq.n	8005d24 <I2C_IsErrorOccurred+0xe0>
 8005d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0aa      	beq.n	8005c7a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d103      	bne.n	8005d34 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2220      	movs	r2, #32
 8005d32:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	f043 0304 	orr.w	r3, r3, #4
 8005d3a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00b      	beq.n	8005d6c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	f043 0301 	orr.w	r3, r3, #1
 8005d5a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00b      	beq.n	8005d8e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	f043 0308 	orr.w	r3, r3, #8
 8005d7c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00b      	beq.n	8005db0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	f043 0302 	orr.w	r3, r3, #2
 8005d9e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005da8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01c      	beq.n	8005df2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f7ff fe3b 	bl	8005a34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6859      	ldr	r1, [r3, #4]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	4b0d      	ldr	r3, [pc, #52]	; (8005e00 <I2C_IsErrorOccurred+0x1bc>)
 8005dca:	400b      	ands	r3, r1
 8005dcc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005df2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3728      	adds	r7, #40	; 0x28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	fe00e800 	.word	0xfe00e800

08005e04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	607b      	str	r3, [r7, #4]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	817b      	strh	r3, [r7, #10]
 8005e12:	4613      	mov	r3, r2
 8005e14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e16:	897b      	ldrh	r3, [r7, #10]
 8005e18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e1c:	7a7b      	ldrb	r3, [r7, #9]
 8005e1e:	041b      	lsls	r3, r3, #16
 8005e20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e24:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e32:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	0d5b      	lsrs	r3, r3, #21
 8005e3e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005e42:	4b08      	ldr	r3, [pc, #32]	; (8005e64 <I2C_TransferConfig+0x60>)
 8005e44:	430b      	orrs	r3, r1
 8005e46:	43db      	mvns	r3, r3
 8005e48:	ea02 0103 	and.w	r1, r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005e56:	bf00      	nop
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	03ff63ff 	.word	0x03ff63ff

08005e68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d138      	bne.n	8005ef0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d101      	bne.n	8005e8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e032      	b.n	8005ef2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2224      	movs	r2, #36	; 0x24
 8005e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f022 0201 	bic.w	r2, r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005eba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6819      	ldr	r1, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 0201 	orr.w	r2, r2, #1
 8005eda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	e000      	b.n	8005ef2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ef0:	2302      	movs	r3, #2
  }
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b085      	sub	sp, #20
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b20      	cmp	r3, #32
 8005f12:	d139      	bne.n	8005f88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d101      	bne.n	8005f22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005f1e:	2302      	movs	r3, #2
 8005f20:	e033      	b.n	8005f8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2224      	movs	r2, #36	; 0x24
 8005f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0201 	bic.w	r2, r2, #1
 8005f40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005f50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	021b      	lsls	r3, r3, #8
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f042 0201 	orr.w	r2, r2, #1
 8005f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	e000      	b.n	8005f8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f88:	2302      	movs	r3, #2
  }
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b084      	sub	sp, #16
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e0c0      	b.n	800612a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d106      	bne.n	8005fc2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f007 fcc5 	bl	800d94c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2203      	movs	r2, #3
 8005fc6:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f003 faf3 	bl	80095ba <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	73fb      	strb	r3, [r7, #15]
 8005fd8:	e03e      	b.n	8006058 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005fda:	7bfa      	ldrb	r2, [r7, #15]
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	440b      	add	r3, r1
 8005fe8:	3311      	adds	r3, #17
 8005fea:	2201      	movs	r2, #1
 8005fec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005fee:	7bfa      	ldrb	r2, [r7, #15]
 8005ff0:	6879      	ldr	r1, [r7, #4]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	00db      	lsls	r3, r3, #3
 8005ffa:	440b      	add	r3, r1
 8005ffc:	3310      	adds	r3, #16
 8005ffe:	7bfa      	ldrb	r2, [r7, #15]
 8006000:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006002:	7bfa      	ldrb	r2, [r7, #15]
 8006004:	6879      	ldr	r1, [r7, #4]
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	440b      	add	r3, r1
 8006010:	3313      	adds	r3, #19
 8006012:	2200      	movs	r2, #0
 8006014:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006016:	7bfa      	ldrb	r2, [r7, #15]
 8006018:	6879      	ldr	r1, [r7, #4]
 800601a:	4613      	mov	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	00db      	lsls	r3, r3, #3
 8006022:	440b      	add	r3, r1
 8006024:	3320      	adds	r3, #32
 8006026:	2200      	movs	r2, #0
 8006028:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800602a:	7bfa      	ldrb	r2, [r7, #15]
 800602c:	6879      	ldr	r1, [r7, #4]
 800602e:	4613      	mov	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	440b      	add	r3, r1
 8006038:	3324      	adds	r3, #36	; 0x24
 800603a:	2200      	movs	r2, #0
 800603c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800603e:	7bfb      	ldrb	r3, [r7, #15]
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	1c5a      	adds	r2, r3, #1
 8006044:	4613      	mov	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	440b      	add	r3, r1
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006052:	7bfb      	ldrb	r3, [r7, #15]
 8006054:	3301      	adds	r3, #1
 8006056:	73fb      	strb	r3, [r7, #15]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	791b      	ldrb	r3, [r3, #4]
 800605c:	7bfa      	ldrb	r2, [r7, #15]
 800605e:	429a      	cmp	r2, r3
 8006060:	d3bb      	bcc.n	8005fda <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006062:	2300      	movs	r3, #0
 8006064:	73fb      	strb	r3, [r7, #15]
 8006066:	e044      	b.n	80060f2 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006068:	7bfa      	ldrb	r2, [r7, #15]
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	4613      	mov	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	440b      	add	r3, r1
 8006076:	f203 1351 	addw	r3, r3, #337	; 0x151
 800607a:	2200      	movs	r2, #0
 800607c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800607e:	7bfa      	ldrb	r2, [r7, #15]
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	4613      	mov	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	440b      	add	r3, r1
 800608c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006090:	7bfa      	ldrb	r2, [r7, #15]
 8006092:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006094:	7bfa      	ldrb	r2, [r7, #15]
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	4613      	mov	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	440b      	add	r3, r1
 80060a2:	f203 1353 	addw	r3, r3, #339	; 0x153
 80060a6:	2200      	movs	r2, #0
 80060a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80060aa:	7bfa      	ldrb	r2, [r7, #15]
 80060ac:	6879      	ldr	r1, [r7, #4]
 80060ae:	4613      	mov	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	440b      	add	r3, r1
 80060b8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80060c0:	7bfa      	ldrb	r2, [r7, #15]
 80060c2:	6879      	ldr	r1, [r7, #4]
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	440b      	add	r3, r1
 80060ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80060d6:	7bfa      	ldrb	r2, [r7, #15]
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	4613      	mov	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	00db      	lsls	r3, r3, #3
 80060e2:	440b      	add	r3, r1
 80060e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80060e8:	2200      	movs	r2, #0
 80060ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	3301      	adds	r3, #1
 80060f0:	73fb      	strb	r3, [r7, #15]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	791b      	ldrb	r3, [r3, #4]
 80060f6:	7bfa      	ldrb	r2, [r7, #15]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d3b5      	bcc.n	8006068 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6818      	ldr	r0, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3304      	adds	r3, #4
 8006104:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006108:	f003 fa72 	bl	80095f0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	7a9b      	ldrb	r3, [r3, #10]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d102      	bne.n	8006128 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f001 fc41 	bl	80079aa <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_PCD_Start+0x16>
 8006144:	2302      	movs	r3, #2
 8006146:	e012      	b.n	800616e <HAL_PCD_Start+0x3c>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4618      	mov	r0, r3
 8006156:	f003 fa19 	bl	800958c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4618      	mov	r0, r3
 8006160:	f005 fcd9 	bl	800bb16 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b084      	sub	sp, #16
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4618      	mov	r0, r3
 8006184:	f005 fcde 	bl	800bb44 <USB_ReadInterrupts>
 8006188:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fb04 	bl	80067a2 <PCD_EP_ISR_Handler>

    return;
 800619a:	e110      	b.n	80063be <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d013      	beq.n	80061ce <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061b8:	b292      	uxth	r2, r2
 80061ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f007 fc5d 	bl	800da7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80061c4:	2100      	movs	r1, #0
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f8fc 	bl	80063c4 <HAL_PCD_SetAddress>

    return;
 80061cc:	e0f7      	b.n	80063be <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00c      	beq.n	80061f2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061ea:	b292      	uxth	r2, r2
 80061ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80061f0:	e0e5      	b.n	80063be <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00c      	beq.n	8006216 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006204:	b29a      	uxth	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800620e:	b292      	uxth	r2, r2
 8006210:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006214:	e0d3      	b.n	80063be <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d034      	beq.n	800628a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006228:	b29a      	uxth	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 0204 	bic.w	r2, r2, #4
 8006232:	b292      	uxth	r2, r2
 8006234:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006240:	b29a      	uxth	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0208 	bic.w	r2, r2, #8
 800624a:	b292      	uxth	r2, r2
 800624c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8006256:	2b01      	cmp	r3, #1
 8006258:	d107      	bne.n	800626a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006262:	2100      	movs	r1, #0
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f007 fdfd 	bl	800de64 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f007 fc40 	bl	800daf0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006278:	b29a      	uxth	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006282:	b292      	uxth	r2, r2
 8006284:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006288:	e099      	b.n	80063be <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006290:	2b00      	cmp	r3, #0
 8006292:	d027      	beq.n	80062e4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800629c:	b29a      	uxth	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f042 0208 	orr.w	r2, r2, #8
 80062a6:	b292      	uxth	r2, r2
 80062a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062be:	b292      	uxth	r2, r2
 80062c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0204 	orr.w	r2, r2, #4
 80062d6:	b292      	uxth	r2, r2
 80062d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f007 fbed 	bl	800dabc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80062e2:	e06c      	b.n	80063be <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d040      	beq.n	8006370 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006300:	b292      	uxth	r2, r2
 8006302:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800630c:	2b00      	cmp	r3, #0
 800630e:	d12b      	bne.n	8006368 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006318:	b29a      	uxth	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f042 0204 	orr.w	r2, r2, #4
 8006322:	b292      	uxth	r2, r2
 8006324:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006330:	b29a      	uxth	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0208 	orr.w	r2, r2, #8
 800633a:	b292      	uxth	r2, r2
 800633c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006350:	b29b      	uxth	r3, r3
 8006352:	089b      	lsrs	r3, r3, #2
 8006354:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800635e:	2101      	movs	r1, #1
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f007 fd7f 	bl	800de64 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006366:	e02a      	b.n	80063be <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f007 fba7 	bl	800dabc <HAL_PCD_SuspendCallback>
    return;
 800636e:	e026      	b.n	80063be <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00f      	beq.n	800639a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006382:	b29a      	uxth	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800638c:	b292      	uxth	r2, r2
 800638e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f007 fb65 	bl	800da62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006398:	e011      	b.n	80063be <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00c      	beq.n	80063be <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063b6:	b292      	uxth	r2, r2
 80063b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80063bc:	bf00      	nop
  }
}
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d101      	bne.n	80063de <HAL_PCD_SetAddress+0x1a>
 80063da:	2302      	movs	r3, #2
 80063dc:	e012      	b.n	8006404 <HAL_PCD_SetAddress+0x40>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	78fa      	ldrb	r2, [r7, #3]
 80063ea:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	78fa      	ldrb	r2, [r7, #3]
 80063f2:	4611      	mov	r1, r2
 80063f4:	4618      	mov	r0, r3
 80063f6:	f005 fb7a 	bl	800baee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	4608      	mov	r0, r1
 8006416:	4611      	mov	r1, r2
 8006418:	461a      	mov	r2, r3
 800641a:	4603      	mov	r3, r0
 800641c:	70fb      	strb	r3, [r7, #3]
 800641e:	460b      	mov	r3, r1
 8006420:	803b      	strh	r3, [r7, #0]
 8006422:	4613      	mov	r3, r2
 8006424:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800642a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800642e:	2b00      	cmp	r3, #0
 8006430:	da0e      	bge.n	8006450 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006432:	78fb      	ldrb	r3, [r7, #3]
 8006434:	f003 0207 	and.w	r2, r3, #7
 8006438:	4613      	mov	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	3310      	adds	r3, #16
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	4413      	add	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2201      	movs	r2, #1
 800644c:	705a      	strb	r2, [r3, #1]
 800644e:	e00e      	b.n	800646e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006450:	78fb      	ldrb	r3, [r7, #3]
 8006452:	f003 0207 	and.w	r2, r3, #7
 8006456:	4613      	mov	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	00db      	lsls	r3, r3, #3
 800645e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	4413      	add	r3, r2
 8006466:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800646e:	78fb      	ldrb	r3, [r7, #3]
 8006470:	f003 0307 	and.w	r3, r3, #7
 8006474:	b2da      	uxtb	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800647a:	883a      	ldrh	r2, [r7, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	78ba      	ldrb	r2, [r7, #2]
 8006484:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006486:	78bb      	ldrb	r3, [r7, #2]
 8006488:	2b02      	cmp	r3, #2
 800648a:	d102      	bne.n	8006492 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_PCD_EP_Open+0x94>
 800649c:	2302      	movs	r3, #2
 800649e:	e00e      	b.n	80064be <HAL_PCD_EP_Open+0xb2>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68f9      	ldr	r1, [r7, #12]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f003 f8bc 	bl	800962c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 80064bc:	7afb      	ldrb	r3, [r7, #11]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b084      	sub	sp, #16
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
 80064ce:	460b      	mov	r3, r1
 80064d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80064d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	da0e      	bge.n	80064f8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064da:	78fb      	ldrb	r3, [r7, #3]
 80064dc:	f003 0207 	and.w	r2, r3, #7
 80064e0:	4613      	mov	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	00db      	lsls	r3, r3, #3
 80064e8:	3310      	adds	r3, #16
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	4413      	add	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2201      	movs	r2, #1
 80064f4:	705a      	strb	r2, [r3, #1]
 80064f6:	e00e      	b.n	8006516 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	f003 0207 	and.w	r2, r3, #7
 80064fe:	4613      	mov	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	4413      	add	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006516:	78fb      	ldrb	r3, [r7, #3]
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	b2da      	uxtb	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_PCD_EP_Close+0x6a>
 800652c:	2302      	movs	r3, #2
 800652e:	e00e      	b.n	800654e <HAL_PCD_EP_Close+0x88>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68f9      	ldr	r1, [r7, #12]
 800653e:	4618      	mov	r0, r3
 8006540:	f003 fc38 	bl	8009db4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b086      	sub	sp, #24
 800655a:	af00      	add	r7, sp, #0
 800655c:	60f8      	str	r0, [r7, #12]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
 8006562:	460b      	mov	r3, r1
 8006564:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006566:	7afb      	ldrb	r3, [r7, #11]
 8006568:	f003 0207 	and.w	r2, r3, #7
 800656c:	4613      	mov	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	4413      	add	r3, r2
 800657c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2200      	movs	r2, #0
 800658e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	2200      	movs	r2, #0
 8006594:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006596:	7afb      	ldrb	r3, [r7, #11]
 8006598:	f003 0307 	and.w	r3, r3, #7
 800659c:	b2da      	uxtb	r2, r3
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6979      	ldr	r1, [r7, #20]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f003 fdf0 	bl	800a18e <USB_EPStartXfer>

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3718      	adds	r7, #24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	460b      	mov	r3, r1
 80065c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80065c4:	78fb      	ldrb	r3, [r7, #3]
 80065c6:	f003 0207 	and.w	r2, r3, #7
 80065ca:	6879      	ldr	r1, [r7, #4]
 80065cc:	4613      	mov	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	00db      	lsls	r3, r3, #3
 80065d4:	440b      	add	r3, r1
 80065d6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80065da:	681b      	ldr	r3, [r3, #0]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	607a      	str	r2, [r7, #4]
 80065f2:	603b      	str	r3, [r7, #0]
 80065f4:	460b      	mov	r3, r1
 80065f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065f8:	7afb      	ldrb	r3, [r7, #11]
 80065fa:	f003 0207 	and.w	r2, r3, #7
 80065fe:	4613      	mov	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	00db      	lsls	r3, r3, #3
 8006606:	3310      	adds	r3, #16
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	4413      	add	r3, r2
 800660c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2200      	movs	r2, #0
 800662c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2201      	movs	r2, #1
 8006632:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006634:	7afb      	ldrb	r3, [r7, #11]
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	b2da      	uxtb	r2, r3
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6979      	ldr	r1, [r7, #20]
 8006646:	4618      	mov	r0, r3
 8006648:	f003 fda1 	bl	800a18e <USB_EPStartXfer>

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3718      	adds	r7, #24
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b084      	sub	sp, #16
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	460b      	mov	r3, r1
 8006660:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006662:	78fb      	ldrb	r3, [r7, #3]
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	7912      	ldrb	r2, [r2, #4]
 800666c:	4293      	cmp	r3, r2
 800666e:	d901      	bls.n	8006674 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e03e      	b.n	80066f2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006674:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006678:	2b00      	cmp	r3, #0
 800667a:	da0e      	bge.n	800669a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800667c:	78fb      	ldrb	r3, [r7, #3]
 800667e:	f003 0207 	and.w	r2, r3, #7
 8006682:	4613      	mov	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	00db      	lsls	r3, r3, #3
 800668a:	3310      	adds	r3, #16
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	4413      	add	r3, r2
 8006690:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2201      	movs	r2, #1
 8006696:	705a      	strb	r2, [r3, #1]
 8006698:	e00c      	b.n	80066b4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800669a:	78fa      	ldrb	r2, [r7, #3]
 800669c:	4613      	mov	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	4413      	add	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066ba:	78fb      	ldrb	r3, [r7, #3]
 80066bc:	f003 0307 	and.w	r3, r3, #7
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d101      	bne.n	80066d4 <HAL_PCD_EP_SetStall+0x7e>
 80066d0:	2302      	movs	r3, #2
 80066d2:	e00e      	b.n	80066f2 <HAL_PCD_EP_SetStall+0x9c>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68f9      	ldr	r1, [r7, #12]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f005 f904 	bl	800b8f0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b084      	sub	sp, #16
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	460b      	mov	r3, r1
 8006704:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006706:	78fb      	ldrb	r3, [r7, #3]
 8006708:	f003 030f 	and.w	r3, r3, #15
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	7912      	ldrb	r2, [r2, #4]
 8006710:	4293      	cmp	r3, r2
 8006712:	d901      	bls.n	8006718 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e040      	b.n	800679a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006718:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800671c:	2b00      	cmp	r3, #0
 800671e:	da0e      	bge.n	800673e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006720:	78fb      	ldrb	r3, [r7, #3]
 8006722:	f003 0207 	and.w	r2, r3, #7
 8006726:	4613      	mov	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	00db      	lsls	r3, r3, #3
 800672e:	3310      	adds	r3, #16
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	4413      	add	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2201      	movs	r2, #1
 800673a:	705a      	strb	r2, [r3, #1]
 800673c:	e00e      	b.n	800675c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800673e:	78fb      	ldrb	r3, [r7, #3]
 8006740:	f003 0207 	and.w	r2, r3, #7
 8006744:	4613      	mov	r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	00db      	lsls	r3, r3, #3
 800674c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	4413      	add	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006762:	78fb      	ldrb	r3, [r7, #3]
 8006764:	f003 0307 	and.w	r3, r3, #7
 8006768:	b2da      	uxtb	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8006774:	2b01      	cmp	r3, #1
 8006776:	d101      	bne.n	800677c <HAL_PCD_EP_ClrStall+0x82>
 8006778:	2302      	movs	r3, #2
 800677a:	e00e      	b.n	800679a <HAL_PCD_EP_ClrStall+0xa0>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68f9      	ldr	r1, [r7, #12]
 800678a:	4618      	mov	r0, r3
 800678c:	f005 f901 	bl	800b992 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b096      	sub	sp, #88	; 0x58
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80067aa:	e3ae      	b.n	8006f0a <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80067b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80067b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	f003 030f 	and.w	r3, r3, #15
 80067c2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80067c6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f040 8170 	bne.w	8006ab0 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80067d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80067d4:	f003 0310 	and.w	r3, r3, #16
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d14d      	bne.n	8006878 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80067e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ec:	81fb      	strh	r3, [r7, #14]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	89fb      	ldrh	r3, [r7, #14]
 80067f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	3310      	adds	r3, #16
 8006804:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800680e:	b29b      	uxth	r3, r3
 8006810:	461a      	mov	r2, r3
 8006812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	4413      	add	r3, r2
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6812      	ldr	r2, [r2, #0]
 800681e:	4413      	add	r3, r2
 8006820:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800682a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800682c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800682e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006830:	695a      	ldr	r2, [r3, #20]
 8006832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	441a      	add	r2, r3
 8006838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800683a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800683c:	2100      	movs	r1, #0
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f007 f8f5 	bl	800da2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	7b1b      	ldrb	r3, [r3, #12]
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 835d 	beq.w	8006f0a <PCD_EP_ISR_Handler+0x768>
 8006850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	2b00      	cmp	r3, #0
 8006856:	f040 8358 	bne.w	8006f0a <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	7b1b      	ldrb	r3, [r3, #12]
 800685e:	b2db      	uxtb	r3, r3
 8006860:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006864:	b2da      	uxtb	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	b292      	uxth	r2, r2
 800686c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	731a      	strb	r2, [r3, #12]
 8006876:	e348      	b.n	8006f0a <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800687e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800688a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800688e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006892:	2b00      	cmp	r3, #0
 8006894:	d032      	beq.n	80068fc <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800689e:	b29b      	uxth	r3, r3
 80068a0:	461a      	mov	r2, r3
 80068a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	4413      	add	r3, r2
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	6812      	ldr	r2, [r2, #0]
 80068ae:	4413      	add	r3, r2
 80068b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80068ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068bc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6818      	ldr	r0, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80068c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068ca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80068cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068ce:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	f005 f989 	bl	800bbe8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	b29a      	uxth	r2, r3
 80068de:	f640 738f 	movw	r3, #3983	; 0xf8f
 80068e2:	4013      	ands	r3, r2
 80068e4:	823b      	strh	r3, [r7, #16]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	8a3a      	ldrh	r2, [r7, #16]
 80068ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80068f0:	b292      	uxth	r2, r2
 80068f2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f007 f86d 	bl	800d9d4 <HAL_PCD_SetupStageCallback>
 80068fa:	e306      	b.n	8006f0a <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80068fc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006900:	2b00      	cmp	r3, #0
 8006902:	f280 8302 	bge.w	8006f0a <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	b29a      	uxth	r2, r3
 800690e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006912:	4013      	ands	r3, r2
 8006914:	83fb      	strh	r3, [r7, #30]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	8bfa      	ldrh	r2, [r7, #30]
 800691c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006920:	b292      	uxth	r2, r2
 8006922:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800692c:	b29b      	uxth	r3, r3
 800692e:	461a      	mov	r2, r3
 8006930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	00db      	lsls	r3, r3, #3
 8006936:	4413      	add	r3, r2
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6812      	ldr	r2, [r2, #0]
 800693c:	4413      	add	r3, r2
 800693e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800694a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800694c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d019      	beq.n	8006988 <PCD_EP_ISR_Handler+0x1e6>
 8006954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d015      	beq.n	8006988 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6818      	ldr	r0, [r3, #0]
 8006960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006962:	6959      	ldr	r1, [r3, #20]
 8006964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006966:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800696a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800696c:	b29b      	uxth	r3, r3
 800696e:	f005 f93b 	bl	800bbe8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006974:	695a      	ldr	r2, [r3, #20]
 8006976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	441a      	add	r2, r3
 800697c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800697e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006980:	2100      	movs	r1, #0
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f007 f838 	bl	800d9f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006992:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800699a:	2b00      	cmp	r3, #0
 800699c:	f040 82b5 	bne.w	8006f0a <PCD_EP_ISR_Handler+0x768>
 80069a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80069a4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80069a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069ac:	f000 82ad 	beq.w	8006f0a <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	61bb      	str	r3, [r7, #24]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069be:	b29b      	uxth	r3, r3
 80069c0:	461a      	mov	r2, r3
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	4413      	add	r3, r2
 80069c6:	61bb      	str	r3, [r7, #24]
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069da:	b29a      	uxth	r2, r3
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	801a      	strh	r2, [r3, #0]
 80069e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	2b3e      	cmp	r3, #62	; 0x3e
 80069e6:	d91d      	bls.n	8006a24 <PCD_EP_ISR_Handler+0x282>
 80069e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	095b      	lsrs	r3, r3, #5
 80069ee:	647b      	str	r3, [r7, #68]	; 0x44
 80069f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	f003 031f 	and.w	r3, r3, #31
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d102      	bne.n	8006a02 <PCD_EP_ISR_Handler+0x260>
 80069fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069fe:	3b01      	subs	r3, #1
 8006a00:	647b      	str	r3, [r7, #68]	; 0x44
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	029b      	lsls	r3, r3, #10
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	4313      	orrs	r3, r2
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	801a      	strh	r2, [r3, #0]
 8006a22:	e026      	b.n	8006a72 <PCD_EP_ISR_Handler+0x2d0>
 8006a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10a      	bne.n	8006a42 <PCD_EP_ISR_Handler+0x2a0>
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	801a      	strh	r2, [r3, #0]
 8006a40:	e017      	b.n	8006a72 <PCD_EP_ISR_Handler+0x2d0>
 8006a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	085b      	lsrs	r3, r3, #1
 8006a48:	647b      	str	r3, [r7, #68]	; 0x44
 8006a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d002      	beq.n	8006a5c <PCD_EP_ISR_Handler+0x2ba>
 8006a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a58:	3301      	adds	r3, #1
 8006a5a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	029b      	lsls	r3, r3, #10
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a82:	827b      	strh	r3, [r7, #18]
 8006a84:	8a7b      	ldrh	r3, [r7, #18]
 8006a86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a8a:	827b      	strh	r3, [r7, #18]
 8006a8c:	8a7b      	ldrh	r3, [r7, #18]
 8006a8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a92:	827b      	strh	r3, [r7, #18]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	8a7b      	ldrh	r3, [r7, #18]
 8006a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	8013      	strh	r3, [r2, #0]
 8006aae:	e22c      	b.n	8006f0a <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	881b      	ldrh	r3, [r3, #0]
 8006ac0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006ac4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f280 80f6 	bge.w	8006cba <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006afc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b00:	b292      	uxth	r2, r2
 8006b02:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006b04:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	4413      	add	r3, r2
 8006b18:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b1c:	7b1b      	ldrb	r3, [r3, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d123      	bne.n	8006b6a <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	00db      	lsls	r3, r3, #3
 8006b34:	4413      	add	r3, r2
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6812      	ldr	r2, [r2, #0]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b46:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8006b4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 808e 	beq.w	8006c70 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6818      	ldr	r0, [r3, #0]
 8006b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b5a:	6959      	ldr	r1, [r3, #20]
 8006b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b5e:	88da      	ldrh	r2, [r3, #6]
 8006b60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006b64:	f005 f840 	bl	800bbe8 <USB_ReadPMA>
 8006b68:	e082      	b.n	8006c70 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b6c:	78db      	ldrb	r3, [r3, #3]
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d10a      	bne.n	8006b88 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006b72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006b76:	461a      	mov	r2, r3
 8006b78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f9d3 	bl	8006f26 <HAL_PCD_EP_DB_Receive>
 8006b80:	4603      	mov	r3, r0
 8006b82:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006b86:	e073      	b.n	8006c70 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	441a      	add	r2, r3
 8006bb4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006bb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d022      	beq.n	8006c2c <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	4413      	add	r3, r2
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	6812      	ldr	r2, [r2, #0]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c0a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8006c0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d02c      	beq.n	8006c70 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6818      	ldr	r0, [r3, #0]
 8006c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c1c:	6959      	ldr	r1, [r3, #20]
 8006c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c20:	891a      	ldrh	r2, [r3, #8]
 8006c22:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006c26:	f004 ffdf 	bl	800bbe8 <USB_ReadPMA>
 8006c2a:	e021      	b.n	8006c70 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	461a      	mov	r2, r3
 8006c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	00db      	lsls	r3, r3, #3
 8006c3e:	4413      	add	r3, r2
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	6812      	ldr	r2, [r2, #0]
 8006c44:	4413      	add	r3, r2
 8006c46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c50:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8006c54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d009      	beq.n	8006c70 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6818      	ldr	r0, [r3, #0]
 8006c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c62:	6959      	ldr	r1, [r3, #20]
 8006c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c66:	895a      	ldrh	r2, [r3, #10]
 8006c68:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006c6c:	f004 ffbc 	bl	800bbe8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c72:	69da      	ldr	r2, [r3, #28]
 8006c74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006c78:	441a      	add	r2, r3
 8006c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c7c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c80:	695a      	ldr	r2, [r3, #20]
 8006c82:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006c86:	441a      	add	r2, r3
 8006c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c8a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d005      	beq.n	8006ca0 <PCD_EP_ISR_Handler+0x4fe>
 8006c94:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8006c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d206      	bcs.n	8006cae <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f006 fea6 	bl	800d9f8 <HAL_PCD_DataOutStageCallback>
 8006cac:	e005      	b.n	8006cba <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f003 fa6a 	bl	800a18e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006cba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 8121 	beq.w	8006f0a <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8006cc8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8006ccc:	4613      	mov	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	3310      	adds	r3, #16
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	4413      	add	r3, r2
 8006cda:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	881b      	ldrh	r3, [r3, #0]
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	441a      	add	r2, r3
 8006d08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006d0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d1a:	78db      	ldrb	r3, [r3, #3]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	f040 80a2 	bne.w	8006e66 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8006d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d24:	2200      	movs	r2, #0
 8006d26:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d2a:	7b1b      	ldrb	r3, [r3, #12]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 8093 	beq.w	8006e58 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006d32:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d046      	beq.n	8006dcc <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d40:	785b      	ldrb	r3, [r3, #1]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d126      	bne.n	8006d94 <PCD_EP_ISR_Handler+0x5f2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	461a      	mov	r2, r3
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	4413      	add	r3, r2
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	00da      	lsls	r2, r3, #3
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	4413      	add	r3, r2
 8006d68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d6c:	623b      	str	r3, [r7, #32]
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	6a3b      	ldr	r3, [r7, #32]
 8006d7c:	801a      	strh	r2, [r3, #0]
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	881b      	ldrh	r3, [r3, #0]
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	801a      	strh	r2, [r3, #0]
 8006d92:	e061      	b.n	8006e58 <PCD_EP_ISR_Handler+0x6b6>
 8006d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d96:	785b      	ldrb	r3, [r3, #1]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d15d      	bne.n	8006e58 <PCD_EP_ISR_Handler+0x6b6>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	461a      	mov	r2, r3
 8006dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db0:	4413      	add	r3, r2
 8006db2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	00da      	lsls	r2, r3, #3
 8006dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006dc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	801a      	strh	r2, [r3, #0]
 8006dca:	e045      	b.n	8006e58 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dd4:	785b      	ldrb	r3, [r3, #1]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d126      	bne.n	8006e28 <PCD_EP_ISR_Handler+0x686>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	637b      	str	r3, [r7, #52]	; 0x34
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	461a      	mov	r2, r3
 8006dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dee:	4413      	add	r3, r2
 8006df0:	637b      	str	r3, [r7, #52]	; 0x34
 8006df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	00da      	lsls	r2, r3, #3
 8006df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e00:	633b      	str	r3, [r7, #48]	; 0x30
 8006e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	801a      	strh	r2, [r3, #0]
 8006e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	801a      	strh	r2, [r3, #0]
 8006e26:	e017      	b.n	8006e58 <PCD_EP_ISR_Handler+0x6b6>
 8006e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e2a:	785b      	ldrb	r3, [r3, #1]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d113      	bne.n	8006e58 <PCD_EP_ISR_Handler+0x6b6>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3e:	4413      	add	r3, r2
 8006e40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	00da      	lsls	r2, r3, #3
 8006e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e50:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e54:	2200      	movs	r2, #0
 8006e56:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f006 fde5 	bl	800da2e <HAL_PCD_DataInStageCallback>
 8006e64:	e051      	b.n	8006f0a <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006e66:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d144      	bne.n	8006efc <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	4413      	add	r3, r2
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	6812      	ldr	r2, [r2, #0]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e96:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e9c:	699a      	ldr	r2, [r3, #24]
 8006e9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d907      	bls.n	8006eb6 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8006ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ea8:	699a      	ldr	r2, [r3, #24]
 8006eaa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006eae:	1ad2      	subs	r2, r2, r3
 8006eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eb2:	619a      	str	r2, [r3, #24]
 8006eb4:	e002      	b.n	8006ebc <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8006eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eb8:	2200      	movs	r2, #0
 8006eba:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d106      	bne.n	8006ed2 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f006 fdaf 	bl	800da2e <HAL_PCD_DataInStageCallback>
 8006ed0:	e01b      	b.n	8006f0a <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ed4:	695a      	ldr	r2, [r3, #20]
 8006ed6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006eda:	441a      	add	r2, r3
 8006edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ede:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ee2:	69da      	ldr	r2, [r3, #28]
 8006ee4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006ee8:	441a      	add	r2, r3
 8006eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eec:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f003 f94a 	bl	800a18e <USB_EPStartXfer>
 8006efa:	e006      	b.n	8006f0a <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006efc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006f00:	461a      	mov	r2, r3
 8006f02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f917 	bl	8007138 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	b21b      	sxth	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f6ff ac48 	blt.w	80067ac <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3758      	adds	r7, #88	; 0x58
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b088      	sub	sp, #32
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	60f8      	str	r0, [r7, #12]
 8006f2e:	60b9      	str	r1, [r7, #8]
 8006f30:	4613      	mov	r3, r2
 8006f32:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006f34:	88fb      	ldrh	r3, [r7, #6]
 8006f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d07c      	beq.n	8007038 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	461a      	mov	r2, r3
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	4413      	add	r3, r2
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	6812      	ldr	r2, [r2, #0]
 8006f56:	4413      	add	r3, r2
 8006f58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f5c:	881b      	ldrh	r3, [r3, #0]
 8006f5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f62:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	699a      	ldr	r2, [r3, #24]
 8006f68:	8b7b      	ldrh	r3, [r7, #26]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d306      	bcc.n	8006f7c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	699a      	ldr	r2, [r3, #24]
 8006f72:	8b7b      	ldrh	r3, [r7, #26]
 8006f74:	1ad2      	subs	r2, r2, r3
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	619a      	str	r2, [r3, #24]
 8006f7a:	e002      	b.n	8006f82 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d123      	bne.n	8006fd2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa4:	833b      	strh	r3, [r7, #24]
 8006fa6:	8b3b      	ldrh	r3, [r7, #24]
 8006fa8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006fac:	833b      	strh	r3, [r7, #24]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	441a      	add	r2, r3
 8006fbc:	8b3b      	ldrh	r3, [r7, #24]
 8006fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006fd2:	88fb      	ldrh	r3, [r7, #6]
 8006fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d01f      	beq.n	800701c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff6:	82fb      	strh	r3, [r7, #22]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	441a      	add	r2, r3
 8007006:	8afb      	ldrh	r3, [r7, #22]
 8007008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800700c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007014:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007018:	b29b      	uxth	r3, r3
 800701a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800701c:	8b7b      	ldrh	r3, [r7, #26]
 800701e:	2b00      	cmp	r3, #0
 8007020:	f000 8085 	beq.w	800712e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6818      	ldr	r0, [r3, #0]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	6959      	ldr	r1, [r3, #20]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	891a      	ldrh	r2, [r3, #8]
 8007030:	8b7b      	ldrh	r3, [r7, #26]
 8007032:	f004 fdd9 	bl	800bbe8 <USB_ReadPMA>
 8007036:	e07a      	b.n	800712e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007040:	b29b      	uxth	r3, r3
 8007042:	461a      	mov	r2, r3
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	00db      	lsls	r3, r3, #3
 800704a:	4413      	add	r3, r2
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	6812      	ldr	r2, [r2, #0]
 8007050:	4413      	add	r3, r2
 8007052:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800705c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	699a      	ldr	r2, [r3, #24]
 8007062:	8b7b      	ldrh	r3, [r7, #26]
 8007064:	429a      	cmp	r2, r3
 8007066:	d306      	bcc.n	8007076 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	699a      	ldr	r2, [r3, #24]
 800706c:	8b7b      	ldrh	r3, [r7, #26]
 800706e:	1ad2      	subs	r2, r2, r3
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	619a      	str	r2, [r3, #24]
 8007074:	e002      	b.n	800707c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2200      	movs	r2, #0
 800707a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d123      	bne.n	80070cc <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	461a      	mov	r2, r3
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	881b      	ldrh	r3, [r3, #0]
 8007094:	b29b      	uxth	r3, r3
 8007096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800709a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709e:	83fb      	strh	r3, [r7, #30]
 80070a0:	8bfb      	ldrh	r3, [r7, #30]
 80070a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80070a6:	83fb      	strh	r3, [r7, #30]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	461a      	mov	r2, r3
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	441a      	add	r2, r3
 80070b6:	8bfb      	ldrh	r3, [r7, #30]
 80070b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80070cc:	88fb      	ldrh	r3, [r7, #6]
 80070ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d11f      	bne.n	8007116 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f0:	83bb      	strh	r3, [r7, #28]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	441a      	add	r2, r3
 8007100:	8bbb      	ldrh	r3, [r7, #28]
 8007102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800710a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800710e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007112:	b29b      	uxth	r3, r3
 8007114:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007116:	8b7b      	ldrh	r3, [r7, #26]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d008      	beq.n	800712e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6818      	ldr	r0, [r3, #0]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	6959      	ldr	r1, [r3, #20]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	895a      	ldrh	r2, [r3, #10]
 8007128:	8b7b      	ldrh	r3, [r7, #26]
 800712a:	f004 fd5d 	bl	800bbe8 <USB_ReadPMA>
    }
  }

  return count;
 800712e:	8b7b      	ldrh	r3, [r7, #26]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3720      	adds	r7, #32
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b0a4      	sub	sp, #144	; 0x90
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	4613      	mov	r3, r2
 8007144:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007146:	88fb      	ldrh	r3, [r7, #6]
 8007148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 81db 	beq.w	8007508 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800715a:	b29b      	uxth	r3, r3
 800715c:	461a      	mov	r2, r3
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	00db      	lsls	r3, r3, #3
 8007164:	4413      	add	r3, r2
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	6812      	ldr	r2, [r2, #0]
 800716a:	4413      	add	r3, r2
 800716c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007176:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	699a      	ldr	r2, [r3, #24]
 800717e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007182:	429a      	cmp	r2, r3
 8007184:	d907      	bls.n	8007196 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	699a      	ldr	r2, [r3, #24]
 800718a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800718e:	1ad2      	subs	r2, r2, r3
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	619a      	str	r2, [r3, #24]
 8007194:	e002      	b.n	800719c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2200      	movs	r2, #0
 800719a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f040 80b9 	bne.w	8007318 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	785b      	ldrb	r3, [r3, #1]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d126      	bne.n	80071fc <HAL_PCD_EP_DB_Transmit+0xc4>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071bc:	b29b      	uxth	r3, r3
 80071be:	461a      	mov	r2, r3
 80071c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c2:	4413      	add	r3, r2
 80071c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	00da      	lsls	r2, r3, #3
 80071cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ce:	4413      	add	r3, r2
 80071d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80071d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	b29b      	uxth	r3, r3
 80071dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e4:	801a      	strh	r2, [r3, #0]
 80071e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f8:	801a      	strh	r2, [r3, #0]
 80071fa:	e01a      	b.n	8007232 <HAL_PCD_EP_DB_Transmit+0xfa>
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	785b      	ldrb	r3, [r3, #1]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d116      	bne.n	8007232 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	637b      	str	r3, [r7, #52]	; 0x34
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007212:	b29b      	uxth	r3, r3
 8007214:	461a      	mov	r2, r3
 8007216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007218:	4413      	add	r3, r2
 800721a:	637b      	str	r3, [r7, #52]	; 0x34
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	00da      	lsls	r2, r3, #3
 8007222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007224:	4413      	add	r3, r2
 8007226:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800722a:	633b      	str	r3, [r7, #48]	; 0x30
 800722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722e:	2200      	movs	r2, #0
 8007230:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	627b      	str	r3, [r7, #36]	; 0x24
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	785b      	ldrb	r3, [r3, #1]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d126      	bne.n	800728e <HAL_PCD_EP_DB_Transmit+0x156>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	61fb      	str	r3, [r7, #28]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800724e:	b29b      	uxth	r3, r3
 8007250:	461a      	mov	r2, r3
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	4413      	add	r3, r2
 8007256:	61fb      	str	r3, [r7, #28]
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	00da      	lsls	r2, r3, #3
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	4413      	add	r3, r2
 8007262:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007266:	61bb      	str	r3, [r7, #24]
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	881b      	ldrh	r3, [r3, #0]
 800726c:	b29b      	uxth	r3, r3
 800726e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007272:	b29a      	uxth	r2, r3
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	801a      	strh	r2, [r3, #0]
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	881b      	ldrh	r3, [r3, #0]
 800727c:	b29b      	uxth	r3, r3
 800727e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007286:	b29a      	uxth	r2, r3
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	801a      	strh	r2, [r3, #0]
 800728c:	e017      	b.n	80072be <HAL_PCD_EP_DB_Transmit+0x186>
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	785b      	ldrb	r3, [r3, #1]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d113      	bne.n	80072be <HAL_PCD_EP_DB_Transmit+0x186>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800729e:	b29b      	uxth	r3, r3
 80072a0:	461a      	mov	r2, r3
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	4413      	add	r3, r2
 80072a6:	627b      	str	r3, [r7, #36]	; 0x24
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	00da      	lsls	r2, r3, #3
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	4413      	add	r3, r2
 80072b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072b6:	623b      	str	r3, [r7, #32]
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	2200      	movs	r2, #0
 80072bc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	4619      	mov	r1, r3
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f006 fbb2 	bl	800da2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80072ca:	88fb      	ldrh	r3, [r7, #6]
 80072cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 82fa 	beq.w	80078ca <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	461a      	mov	r2, r3
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f0:	82fb      	strh	r3, [r7, #22]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	461a      	mov	r2, r3
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	441a      	add	r2, r3
 8007300:	8afb      	ldrh	r3, [r7, #22]
 8007302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800730a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800730e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007312:	b29b      	uxth	r3, r3
 8007314:	8013      	strh	r3, [r2, #0]
 8007316:	e2d8      	b.n	80078ca <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007318:	88fb      	ldrh	r3, [r7, #6]
 800731a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d021      	beq.n	8007366 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	461a      	mov	r2, r3
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	b29b      	uxth	r3, r3
 8007334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800733c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	461a      	mov	r2, r3
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	441a      	add	r2, r3
 800734e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800735a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800735e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007362:	b29b      	uxth	r3, r3
 8007364:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800736c:	2b01      	cmp	r3, #1
 800736e:	f040 82ac 	bne.w	80078ca <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	695a      	ldr	r2, [r3, #20]
 8007376:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800737a:	441a      	add	r2, r3
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	69da      	ldr	r2, [r3, #28]
 8007384:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007388:	441a      	add	r2, r3
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	6a1a      	ldr	r2, [r3, #32]
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	429a      	cmp	r2, r3
 8007398:	d30b      	bcc.n	80073b2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	6a1a      	ldr	r2, [r3, #32]
 80073a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073aa:	1ad2      	subs	r2, r2, r3
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	621a      	str	r2, [r3, #32]
 80073b0:	e017      	b.n	80073e2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d108      	bne.n	80073cc <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80073ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80073be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80073ca:	e00a      	b.n	80073e2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	6a1b      	ldr	r3, [r3, #32]
 80073d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2200      	movs	r2, #0
 80073e0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	785b      	ldrb	r3, [r3, #1]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d165      	bne.n	80074b6 <HAL_PCD_EP_DB_Transmit+0x37e>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	461a      	mov	r2, r3
 80073fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073fe:	4413      	add	r3, r2
 8007400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	00da      	lsls	r2, r3, #3
 8007408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800740a:	4413      	add	r3, r2
 800740c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007410:	63bb      	str	r3, [r7, #56]	; 0x38
 8007412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	b29b      	uxth	r3, r3
 8007418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800741c:	b29a      	uxth	r2, r3
 800741e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007420:	801a      	strh	r2, [r3, #0]
 8007422:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007426:	2b3e      	cmp	r3, #62	; 0x3e
 8007428:	d91d      	bls.n	8007466 <HAL_PCD_EP_DB_Transmit+0x32e>
 800742a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800742e:	095b      	lsrs	r3, r3, #5
 8007430:	64bb      	str	r3, [r7, #72]	; 0x48
 8007432:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007436:	f003 031f 	and.w	r3, r3, #31
 800743a:	2b00      	cmp	r3, #0
 800743c:	d102      	bne.n	8007444 <HAL_PCD_EP_DB_Transmit+0x30c>
 800743e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007440:	3b01      	subs	r3, #1
 8007442:	64bb      	str	r3, [r7, #72]	; 0x48
 8007444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007446:	881b      	ldrh	r3, [r3, #0]
 8007448:	b29a      	uxth	r2, r3
 800744a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800744c:	b29b      	uxth	r3, r3
 800744e:	029b      	lsls	r3, r3, #10
 8007450:	b29b      	uxth	r3, r3
 8007452:	4313      	orrs	r3, r2
 8007454:	b29b      	uxth	r3, r3
 8007456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800745a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800745e:	b29a      	uxth	r2, r3
 8007460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007462:	801a      	strh	r2, [r3, #0]
 8007464:	e044      	b.n	80074f0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10a      	bne.n	8007484 <HAL_PCD_EP_DB_Transmit+0x34c>
 800746e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007470:	881b      	ldrh	r3, [r3, #0]
 8007472:	b29b      	uxth	r3, r3
 8007474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800747c:	b29a      	uxth	r2, r3
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	801a      	strh	r2, [r3, #0]
 8007482:	e035      	b.n	80074f0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007484:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007488:	085b      	lsrs	r3, r3, #1
 800748a:	64bb      	str	r3, [r7, #72]	; 0x48
 800748c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b00      	cmp	r3, #0
 8007496:	d002      	beq.n	800749e <HAL_PCD_EP_DB_Transmit+0x366>
 8007498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800749a:	3301      	adds	r3, #1
 800749c:	64bb      	str	r3, [r7, #72]	; 0x48
 800749e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	029b      	lsls	r3, r3, #10
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	4313      	orrs	r3, r2
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b2:	801a      	strh	r2, [r3, #0]
 80074b4:	e01c      	b.n	80074f0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	785b      	ldrb	r3, [r3, #1]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d118      	bne.n	80074f0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	647b      	str	r3, [r7, #68]	; 0x44
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	461a      	mov	r2, r3
 80074d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074d2:	4413      	add	r3, r2
 80074d4:	647b      	str	r3, [r7, #68]	; 0x44
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	00da      	lsls	r2, r3, #3
 80074dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074de:	4413      	add	r3, r2
 80074e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074e4:	643b      	str	r3, [r7, #64]	; 0x40
 80074e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ee:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6818      	ldr	r0, [r3, #0]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	6959      	ldr	r1, [r3, #20]
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	891a      	ldrh	r2, [r3, #8]
 80074fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007500:	b29b      	uxth	r3, r3
 8007502:	f004 fb2f 	bl	800bb64 <USB_WritePMA>
 8007506:	e1e0      	b.n	80078ca <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007510:	b29b      	uxth	r3, r3
 8007512:	461a      	mov	r2, r3
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	00db      	lsls	r3, r3, #3
 800751a:	4413      	add	r3, r2
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	6812      	ldr	r2, [r2, #0]
 8007520:	4413      	add	r3, r2
 8007522:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800752c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	699a      	ldr	r2, [r3, #24]
 8007534:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007538:	429a      	cmp	r2, r3
 800753a:	d307      	bcc.n	800754c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	699a      	ldr	r2, [r3, #24]
 8007540:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007544:	1ad2      	subs	r2, r2, r3
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	619a      	str	r2, [r3, #24]
 800754a:	e002      	b.n	8007552 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2200      	movs	r2, #0
 8007550:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	2b00      	cmp	r3, #0
 8007558:	f040 80c0 	bne.w	80076dc <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	785b      	ldrb	r3, [r3, #1]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d126      	bne.n	80075b2 <HAL_PCD_EP_DB_Transmit+0x47a>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	67fb      	str	r3, [r7, #124]	; 0x7c
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007572:	b29b      	uxth	r3, r3
 8007574:	461a      	mov	r2, r3
 8007576:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007578:	4413      	add	r3, r2
 800757a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	00da      	lsls	r2, r3, #3
 8007582:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007584:	4413      	add	r3, r2
 8007586:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800758a:	67bb      	str	r3, [r7, #120]	; 0x78
 800758c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800758e:	881b      	ldrh	r3, [r3, #0]
 8007590:	b29b      	uxth	r3, r3
 8007592:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007596:	b29a      	uxth	r2, r3
 8007598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800759a:	801a      	strh	r2, [r3, #0]
 800759c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075ae:	801a      	strh	r2, [r3, #0]
 80075b0:	e01a      	b.n	80075e8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	785b      	ldrb	r3, [r3, #1]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d116      	bne.n	80075e8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	667b      	str	r3, [r7, #100]	; 0x64
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	461a      	mov	r2, r3
 80075cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075ce:	4413      	add	r3, r2
 80075d0:	667b      	str	r3, [r7, #100]	; 0x64
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	00da      	lsls	r2, r3, #3
 80075d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075da:	4413      	add	r3, r2
 80075dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075e0:	663b      	str	r3, [r7, #96]	; 0x60
 80075e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075e4:	2200      	movs	r2, #0
 80075e6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	677b      	str	r3, [r7, #116]	; 0x74
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	785b      	ldrb	r3, [r3, #1]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d12b      	bne.n	800764e <HAL_PCD_EP_DB_Transmit+0x516>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007604:	b29b      	uxth	r3, r3
 8007606:	461a      	mov	r2, r3
 8007608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800760a:	4413      	add	r3, r2
 800760c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	00da      	lsls	r2, r3, #3
 8007614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007616:	4413      	add	r3, r2
 8007618:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800761c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007620:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007624:	881b      	ldrh	r3, [r3, #0]
 8007626:	b29b      	uxth	r3, r3
 8007628:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800762c:	b29a      	uxth	r2, r3
 800762e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007632:	801a      	strh	r2, [r3, #0]
 8007634:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	b29b      	uxth	r3, r3
 800763c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007640:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007644:	b29a      	uxth	r2, r3
 8007646:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800764a:	801a      	strh	r2, [r3, #0]
 800764c:	e017      	b.n	800767e <HAL_PCD_EP_DB_Transmit+0x546>
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	785b      	ldrb	r3, [r3, #1]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d113      	bne.n	800767e <HAL_PCD_EP_DB_Transmit+0x546>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800765e:	b29b      	uxth	r3, r3
 8007660:	461a      	mov	r2, r3
 8007662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007664:	4413      	add	r3, r2
 8007666:	677b      	str	r3, [r7, #116]	; 0x74
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	00da      	lsls	r2, r3, #3
 800766e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007670:	4413      	add	r3, r2
 8007672:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007676:	673b      	str	r3, [r7, #112]	; 0x70
 8007678:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800767a:	2200      	movs	r2, #0
 800767c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	4619      	mov	r1, r3
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f006 f9d2 	bl	800da2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800768a:	88fb      	ldrh	r3, [r7, #6]
 800768c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007690:	2b00      	cmp	r3, #0
 8007692:	f040 811a 	bne.w	80078ca <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	461a      	mov	r2, r3
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	881b      	ldrh	r3, [r3, #0]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	461a      	mov	r2, r3
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	441a      	add	r2, r3
 80076c2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80076c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	8013      	strh	r3, [r2, #0]
 80076da:	e0f6      	b.n	80078ca <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80076dc:	88fb      	ldrh	r3, [r7, #6]
 80076de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d121      	bne.n	800772a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	461a      	mov	r2, r3
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007700:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	461a      	mov	r2, r3
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	441a      	add	r2, r3
 8007712:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800771a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800771e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007726:	b29b      	uxth	r3, r3
 8007728:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007730:	2b01      	cmp	r3, #1
 8007732:	f040 80ca 	bne.w	80078ca <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	695a      	ldr	r2, [r3, #20]
 800773a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800773e:	441a      	add	r2, r3
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	69da      	ldr	r2, [r3, #28]
 8007748:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800774c:	441a      	add	r2, r3
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	6a1a      	ldr	r2, [r3, #32]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	429a      	cmp	r2, r3
 800775c:	d30b      	bcc.n	8007776 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	6a1a      	ldr	r2, [r3, #32]
 800776a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800776e:	1ad2      	subs	r2, r2, r3
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	621a      	str	r2, [r3, #32]
 8007774:	e017      	b.n	80077a6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d108      	bne.n	8007790 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800777e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007782:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800778e:	e00a      	b.n	80077a6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	6a1b      	ldr	r3, [r3, #32]
 8007794:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2200      	movs	r2, #0
 800779c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	657b      	str	r3, [r7, #84]	; 0x54
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	785b      	ldrb	r3, [r3, #1]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d165      	bne.n	8007880 <HAL_PCD_EP_DB_Transmit+0x748>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	461a      	mov	r2, r3
 80077c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077c8:	4413      	add	r3, r2
 80077ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	00da      	lsls	r2, r3, #3
 80077d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077d4:	4413      	add	r3, r2
 80077d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077da:	65bb      	str	r3, [r7, #88]	; 0x58
 80077dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077ea:	801a      	strh	r2, [r3, #0]
 80077ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077f0:	2b3e      	cmp	r3, #62	; 0x3e
 80077f2:	d91d      	bls.n	8007830 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80077f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077f8:	095b      	lsrs	r3, r3, #5
 80077fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80077fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007800:	f003 031f 	and.w	r3, r3, #31
 8007804:	2b00      	cmp	r3, #0
 8007806:	d102      	bne.n	800780e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8007808:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800780a:	3b01      	subs	r3, #1
 800780c:	66bb      	str	r3, [r7, #104]	; 0x68
 800780e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007810:	881b      	ldrh	r3, [r3, #0]
 8007812:	b29a      	uxth	r2, r3
 8007814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007816:	b29b      	uxth	r3, r3
 8007818:	029b      	lsls	r3, r3, #10
 800781a:	b29b      	uxth	r3, r3
 800781c:	4313      	orrs	r3, r2
 800781e:	b29b      	uxth	r3, r3
 8007820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007828:	b29a      	uxth	r2, r3
 800782a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800782c:	801a      	strh	r2, [r3, #0]
 800782e:	e041      	b.n	80078b4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007830:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10a      	bne.n	800784e <HAL_PCD_EP_DB_Transmit+0x716>
 8007838:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800783a:	881b      	ldrh	r3, [r3, #0]
 800783c:	b29b      	uxth	r3, r3
 800783e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007846:	b29a      	uxth	r2, r3
 8007848:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800784a:	801a      	strh	r2, [r3, #0]
 800784c:	e032      	b.n	80078b4 <HAL_PCD_EP_DB_Transmit+0x77c>
 800784e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007852:	085b      	lsrs	r3, r3, #1
 8007854:	66bb      	str	r3, [r7, #104]	; 0x68
 8007856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <HAL_PCD_EP_DB_Transmit+0x730>
 8007862:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007864:	3301      	adds	r3, #1
 8007866:	66bb      	str	r3, [r7, #104]	; 0x68
 8007868:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800786a:	881b      	ldrh	r3, [r3, #0]
 800786c:	b29a      	uxth	r2, r3
 800786e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007870:	b29b      	uxth	r3, r3
 8007872:	029b      	lsls	r3, r3, #10
 8007874:	b29b      	uxth	r3, r3
 8007876:	4313      	orrs	r3, r2
 8007878:	b29a      	uxth	r2, r3
 800787a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800787c:	801a      	strh	r2, [r3, #0]
 800787e:	e019      	b.n	80078b4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	785b      	ldrb	r3, [r3, #1]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d115      	bne.n	80078b4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007890:	b29b      	uxth	r3, r3
 8007892:	461a      	mov	r2, r3
 8007894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007896:	4413      	add	r3, r2
 8007898:	657b      	str	r3, [r7, #84]	; 0x54
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	00da      	lsls	r2, r3, #3
 80078a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078a2:	4413      	add	r3, r2
 80078a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078a8:	653b      	str	r3, [r7, #80]	; 0x50
 80078aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078b2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6818      	ldr	r0, [r3, #0]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	6959      	ldr	r1, [r3, #20]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	895a      	ldrh	r2, [r3, #10]
 80078c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	f004 f94d 	bl	800bb64 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	461a      	mov	r2, r3
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4413      	add	r3, r2
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	b29b      	uxth	r3, r3
 80078dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078e4:	82bb      	strh	r3, [r7, #20]
 80078e6:	8abb      	ldrh	r3, [r7, #20]
 80078e8:	f083 0310 	eor.w	r3, r3, #16
 80078ec:	82bb      	strh	r3, [r7, #20]
 80078ee:	8abb      	ldrh	r3, [r7, #20]
 80078f0:	f083 0320 	eor.w	r3, r3, #32
 80078f4:	82bb      	strh	r3, [r7, #20]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	461a      	mov	r2, r3
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	441a      	add	r2, r3
 8007904:	8abb      	ldrh	r3, [r7, #20]
 8007906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800790a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800790e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007916:	b29b      	uxth	r3, r3
 8007918:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3790      	adds	r7, #144	; 0x90
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	607b      	str	r3, [r7, #4]
 800792e:	460b      	mov	r3, r1
 8007930:	817b      	strh	r3, [r7, #10]
 8007932:	4613      	mov	r3, r2
 8007934:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007936:	897b      	ldrh	r3, [r7, #10]
 8007938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800793c:	b29b      	uxth	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00b      	beq.n	800795a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007942:	897b      	ldrh	r3, [r7, #10]
 8007944:	f003 0207 	and.w	r2, r3, #7
 8007948:	4613      	mov	r3, r2
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	4413      	add	r3, r2
 800794e:	00db      	lsls	r3, r3, #3
 8007950:	3310      	adds	r3, #16
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	4413      	add	r3, r2
 8007956:	617b      	str	r3, [r7, #20]
 8007958:	e009      	b.n	800796e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800795a:	897a      	ldrh	r2, [r7, #10]
 800795c:	4613      	mov	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	00db      	lsls	r3, r3, #3
 8007964:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	4413      	add	r3, r2
 800796c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800796e:	893b      	ldrh	r3, [r7, #8]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d107      	bne.n	8007984 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	2200      	movs	r2, #0
 8007978:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	b29a      	uxth	r2, r3
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	80da      	strh	r2, [r3, #6]
 8007982:	e00b      	b.n	800799c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	2201      	movs	r2, #1
 8007988:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	b29a      	uxth	r2, r3
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	0c1b      	lsrs	r3, r3, #16
 8007996:	b29a      	uxth	r2, r3
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	371c      	adds	r7, #28
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b085      	sub	sp, #20
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	f043 0301 	orr.w	r3, r3, #1
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	f043 0302 	orr.w	r3, r3, #2
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
	...

08007a00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d141      	bne.n	8007a92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007a0e:	4b4b      	ldr	r3, [pc, #300]	; (8007b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a1a:	d131      	bne.n	8007a80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007a1c:	4b47      	ldr	r3, [pc, #284]	; (8007b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a22:	4a46      	ldr	r2, [pc, #280]	; (8007b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a2c:	4b43      	ldr	r3, [pc, #268]	; (8007b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007a34:	4a41      	ldr	r2, [pc, #260]	; (8007b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007a3c:	4b40      	ldr	r3, [pc, #256]	; (8007b40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2232      	movs	r2, #50	; 0x32
 8007a42:	fb02 f303 	mul.w	r3, r2, r3
 8007a46:	4a3f      	ldr	r2, [pc, #252]	; (8007b44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007a48:	fba2 2303 	umull	r2, r3, r2, r3
 8007a4c:	0c9b      	lsrs	r3, r3, #18
 8007a4e:	3301      	adds	r3, #1
 8007a50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a52:	e002      	b.n	8007a5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	3b01      	subs	r3, #1
 8007a58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a5a:	4b38      	ldr	r3, [pc, #224]	; (8007b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a66:	d102      	bne.n	8007a6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1f2      	bne.n	8007a54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007a6e:	4b33      	ldr	r3, [pc, #204]	; (8007b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a7a:	d158      	bne.n	8007b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e057      	b.n	8007b30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007a80:	4b2e      	ldr	r3, [pc, #184]	; (8007b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a86:	4a2d      	ldr	r2, [pc, #180]	; (8007b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007a90:	e04d      	b.n	8007b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a98:	d141      	bne.n	8007b1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007a9a:	4b28      	ldr	r3, [pc, #160]	; (8007b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aa6:	d131      	bne.n	8007b0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007aa8:	4b24      	ldr	r3, [pc, #144]	; (8007b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007aae:	4a23      	ldr	r2, [pc, #140]	; (8007b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ab4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ab8:	4b20      	ldr	r3, [pc, #128]	; (8007b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007ac0:	4a1e      	ldr	r2, [pc, #120]	; (8007b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ac6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007ac8:	4b1d      	ldr	r3, [pc, #116]	; (8007b40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2232      	movs	r2, #50	; 0x32
 8007ace:	fb02 f303 	mul.w	r3, r2, r3
 8007ad2:	4a1c      	ldr	r2, [pc, #112]	; (8007b44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad8:	0c9b      	lsrs	r3, r3, #18
 8007ada:	3301      	adds	r3, #1
 8007adc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ade:	e002      	b.n	8007ae6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ae6:	4b15      	ldr	r3, [pc, #84]	; (8007b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007af2:	d102      	bne.n	8007afa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1f2      	bne.n	8007ae0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007afa:	4b10      	ldr	r3, [pc, #64]	; (8007b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b06:	d112      	bne.n	8007b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e011      	b.n	8007b30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b0c:	4b0b      	ldr	r3, [pc, #44]	; (8007b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b12:	4a0a      	ldr	r2, [pc, #40]	; (8007b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007b1c:	e007      	b.n	8007b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007b1e:	4b07      	ldr	r3, [pc, #28]	; (8007b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007b26:	4a05      	ldr	r2, [pc, #20]	; (8007b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b2c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	40007000 	.word	0x40007000
 8007b40:	2000000c 	.word	0x2000000c
 8007b44:	431bde83 	.word	0x431bde83

08007b48 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007b4c:	4b05      	ldr	r3, [pc, #20]	; (8007b64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	4a04      	ldr	r2, [pc, #16]	; (8007b64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007b52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b56:	6093      	str	r3, [r2, #8]
}
 8007b58:	bf00      	nop
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	40007000 	.word	0x40007000

08007b68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b088      	sub	sp, #32
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e2fe      	b.n	8008178 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d075      	beq.n	8007c72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b86:	4b97      	ldr	r3, [pc, #604]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f003 030c 	and.w	r3, r3, #12
 8007b8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b90:	4b94      	ldr	r3, [pc, #592]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	f003 0303 	and.w	r3, r3, #3
 8007b98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	2b0c      	cmp	r3, #12
 8007b9e:	d102      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x3e>
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	d002      	beq.n	8007bac <HAL_RCC_OscConfig+0x44>
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	2b08      	cmp	r3, #8
 8007baa:	d10b      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bac:	4b8d      	ldr	r3, [pc, #564]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d05b      	beq.n	8007c70 <HAL_RCC_OscConfig+0x108>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d157      	bne.n	8007c70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e2d9      	b.n	8008178 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bcc:	d106      	bne.n	8007bdc <HAL_RCC_OscConfig+0x74>
 8007bce:	4b85      	ldr	r3, [pc, #532]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a84      	ldr	r2, [pc, #528]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bd8:	6013      	str	r3, [r2, #0]
 8007bda:	e01d      	b.n	8007c18 <HAL_RCC_OscConfig+0xb0>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007be4:	d10c      	bne.n	8007c00 <HAL_RCC_OscConfig+0x98>
 8007be6:	4b7f      	ldr	r3, [pc, #508]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a7e      	ldr	r2, [pc, #504]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bf0:	6013      	str	r3, [r2, #0]
 8007bf2:	4b7c      	ldr	r3, [pc, #496]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a7b      	ldr	r2, [pc, #492]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bfc:	6013      	str	r3, [r2, #0]
 8007bfe:	e00b      	b.n	8007c18 <HAL_RCC_OscConfig+0xb0>
 8007c00:	4b78      	ldr	r3, [pc, #480]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a77      	ldr	r2, [pc, #476]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c0a:	6013      	str	r3, [r2, #0]
 8007c0c:	4b75      	ldr	r3, [pc, #468]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a74      	ldr	r2, [pc, #464]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d013      	beq.n	8007c48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c20:	f7fa fd90 	bl	8002744 <HAL_GetTick>
 8007c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c26:	e008      	b.n	8007c3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c28:	f7fa fd8c 	bl	8002744 <HAL_GetTick>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	2b64      	cmp	r3, #100	; 0x64
 8007c34:	d901      	bls.n	8007c3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007c36:	2303      	movs	r3, #3
 8007c38:	e29e      	b.n	8008178 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c3a:	4b6a      	ldr	r3, [pc, #424]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0f0      	beq.n	8007c28 <HAL_RCC_OscConfig+0xc0>
 8007c46:	e014      	b.n	8007c72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c48:	f7fa fd7c 	bl	8002744 <HAL_GetTick>
 8007c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007c4e:	e008      	b.n	8007c62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c50:	f7fa fd78 	bl	8002744 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	2b64      	cmp	r3, #100	; 0x64
 8007c5c:	d901      	bls.n	8007c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e28a      	b.n	8008178 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007c62:	4b60      	ldr	r3, [pc, #384]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1f0      	bne.n	8007c50 <HAL_RCC_OscConfig+0xe8>
 8007c6e:	e000      	b.n	8007c72 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d075      	beq.n	8007d6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c7e:	4b59      	ldr	r3, [pc, #356]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f003 030c 	and.w	r3, r3, #12
 8007c86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c88:	4b56      	ldr	r3, [pc, #344]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	f003 0303 	and.w	r3, r3, #3
 8007c90:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	2b0c      	cmp	r3, #12
 8007c96:	d102      	bne.n	8007c9e <HAL_RCC_OscConfig+0x136>
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d002      	beq.n	8007ca4 <HAL_RCC_OscConfig+0x13c>
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	2b04      	cmp	r3, #4
 8007ca2:	d11f      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ca4:	4b4f      	ldr	r3, [pc, #316]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d005      	beq.n	8007cbc <HAL_RCC_OscConfig+0x154>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e25d      	b.n	8008178 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cbc:	4b49      	ldr	r3, [pc, #292]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	061b      	lsls	r3, r3, #24
 8007cca:	4946      	ldr	r1, [pc, #280]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007cd0:	4b45      	ldr	r3, [pc, #276]	; (8007de8 <HAL_RCC_OscConfig+0x280>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fa fce9 	bl	80026ac <HAL_InitTick>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d043      	beq.n	8007d68 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e249      	b.n	8008178 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d023      	beq.n	8007d34 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007cec:	4b3d      	ldr	r3, [pc, #244]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a3c      	ldr	r2, [pc, #240]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf8:	f7fa fd24 	bl	8002744 <HAL_GetTick>
 8007cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007cfe:	e008      	b.n	8007d12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d00:	f7fa fd20 	bl	8002744 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d901      	bls.n	8007d12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e232      	b.n	8008178 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d12:	4b34      	ldr	r3, [pc, #208]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0f0      	beq.n	8007d00 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d1e:	4b31      	ldr	r3, [pc, #196]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	061b      	lsls	r3, r3, #24
 8007d2c:	492d      	ldr	r1, [pc, #180]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	604b      	str	r3, [r1, #4]
 8007d32:	e01a      	b.n	8007d6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d34:	4b2b      	ldr	r3, [pc, #172]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a2a      	ldr	r2, [pc, #168]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007d3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d40:	f7fa fd00 	bl	8002744 <HAL_GetTick>
 8007d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007d46:	e008      	b.n	8007d5a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d48:	f7fa fcfc 	bl	8002744 <HAL_GetTick>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d901      	bls.n	8007d5a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e20e      	b.n	8008178 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007d5a:	4b22      	ldr	r3, [pc, #136]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1f0      	bne.n	8007d48 <HAL_RCC_OscConfig+0x1e0>
 8007d66:	e000      	b.n	8007d6a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 0308 	and.w	r3, r3, #8
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d041      	beq.n	8007dfa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d01c      	beq.n	8007db8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d7e:	4b19      	ldr	r3, [pc, #100]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d84:	4a17      	ldr	r2, [pc, #92]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007d86:	f043 0301 	orr.w	r3, r3, #1
 8007d8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d8e:	f7fa fcd9 	bl	8002744 <HAL_GetTick>
 8007d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007d94:	e008      	b.n	8007da8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d96:	f7fa fcd5 	bl	8002744 <HAL_GetTick>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d901      	bls.n	8007da8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e1e7      	b.n	8008178 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007da8:	4b0e      	ldr	r3, [pc, #56]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d0ef      	beq.n	8007d96 <HAL_RCC_OscConfig+0x22e>
 8007db6:	e020      	b.n	8007dfa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007db8:	4b0a      	ldr	r3, [pc, #40]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dbe:	4a09      	ldr	r2, [pc, #36]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007dc0:	f023 0301 	bic.w	r3, r3, #1
 8007dc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dc8:	f7fa fcbc 	bl	8002744 <HAL_GetTick>
 8007dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007dce:	e00d      	b.n	8007dec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dd0:	f7fa fcb8 	bl	8002744 <HAL_GetTick>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d906      	bls.n	8007dec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e1ca      	b.n	8008178 <HAL_RCC_OscConfig+0x610>
 8007de2:	bf00      	nop
 8007de4:	40021000 	.word	0x40021000
 8007de8:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007dec:	4b8c      	ldr	r3, [pc, #560]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1ea      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0304 	and.w	r3, r3, #4
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 80a6 	beq.w	8007f54 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007e0c:	4b84      	ldr	r3, [pc, #528]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d101      	bne.n	8007e1c <HAL_RCC_OscConfig+0x2b4>
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e000      	b.n	8007e1e <HAL_RCC_OscConfig+0x2b6>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00d      	beq.n	8007e3e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e22:	4b7f      	ldr	r3, [pc, #508]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e26:	4a7e      	ldr	r2, [pc, #504]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8007e2e:	4b7c      	ldr	r3, [pc, #496]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e36:	60fb      	str	r3, [r7, #12]
 8007e38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e3e:	4b79      	ldr	r3, [pc, #484]	; (8008024 <HAL_RCC_OscConfig+0x4bc>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d118      	bne.n	8007e7c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e4a:	4b76      	ldr	r3, [pc, #472]	; (8008024 <HAL_RCC_OscConfig+0x4bc>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a75      	ldr	r2, [pc, #468]	; (8008024 <HAL_RCC_OscConfig+0x4bc>)
 8007e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e56:	f7fa fc75 	bl	8002744 <HAL_GetTick>
 8007e5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e5c:	e008      	b.n	8007e70 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e5e:	f7fa fc71 	bl	8002744 <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d901      	bls.n	8007e70 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e183      	b.n	8008178 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e70:	4b6c      	ldr	r3, [pc, #432]	; (8008024 <HAL_RCC_OscConfig+0x4bc>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d0f0      	beq.n	8007e5e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d108      	bne.n	8007e96 <HAL_RCC_OscConfig+0x32e>
 8007e84:	4b66      	ldr	r3, [pc, #408]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e8a:	4a65      	ldr	r2, [pc, #404]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007e8c:	f043 0301 	orr.w	r3, r3, #1
 8007e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007e94:	e024      	b.n	8007ee0 <HAL_RCC_OscConfig+0x378>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	2b05      	cmp	r3, #5
 8007e9c:	d110      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x358>
 8007e9e:	4b60      	ldr	r3, [pc, #384]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ea4:	4a5e      	ldr	r2, [pc, #376]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007ea6:	f043 0304 	orr.w	r3, r3, #4
 8007eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007eae:	4b5c      	ldr	r3, [pc, #368]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eb4:	4a5a      	ldr	r2, [pc, #360]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007eb6:	f043 0301 	orr.w	r3, r3, #1
 8007eba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007ebe:	e00f      	b.n	8007ee0 <HAL_RCC_OscConfig+0x378>
 8007ec0:	4b57      	ldr	r3, [pc, #348]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ec6:	4a56      	ldr	r2, [pc, #344]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007ec8:	f023 0301 	bic.w	r3, r3, #1
 8007ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007ed0:	4b53      	ldr	r3, [pc, #332]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ed6:	4a52      	ldr	r2, [pc, #328]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007ed8:	f023 0304 	bic.w	r3, r3, #4
 8007edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d016      	beq.n	8007f16 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ee8:	f7fa fc2c 	bl	8002744 <HAL_GetTick>
 8007eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007eee:	e00a      	b.n	8007f06 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ef0:	f7fa fc28 	bl	8002744 <HAL_GetTick>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d901      	bls.n	8007f06 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e138      	b.n	8008178 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f06:	4b46      	ldr	r3, [pc, #280]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f0c:	f003 0302 	and.w	r3, r3, #2
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d0ed      	beq.n	8007ef0 <HAL_RCC_OscConfig+0x388>
 8007f14:	e015      	b.n	8007f42 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f16:	f7fa fc15 	bl	8002744 <HAL_GetTick>
 8007f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f1c:	e00a      	b.n	8007f34 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f1e:	f7fa fc11 	bl	8002744 <HAL_GetTick>
 8007f22:	4602      	mov	r2, r0
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d901      	bls.n	8007f34 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007f30:	2303      	movs	r3, #3
 8007f32:	e121      	b.n	8008178 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f34:	4b3a      	ldr	r3, [pc, #232]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1ed      	bne.n	8007f1e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007f42:	7ffb      	ldrb	r3, [r7, #31]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d105      	bne.n	8007f54 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f48:	4b35      	ldr	r3, [pc, #212]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f4c:	4a34      	ldr	r2, [pc, #208]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f52:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0320 	and.w	r3, r3, #32
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d03c      	beq.n	8007fda <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d01c      	beq.n	8007fa2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f68:	4b2d      	ldr	r3, [pc, #180]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f6e:	4a2c      	ldr	r2, [pc, #176]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007f70:	f043 0301 	orr.w	r3, r3, #1
 8007f74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f78:	f7fa fbe4 	bl	8002744 <HAL_GetTick>
 8007f7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007f7e:	e008      	b.n	8007f92 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f80:	f7fa fbe0 	bl	8002744 <HAL_GetTick>
 8007f84:	4602      	mov	r2, r0
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d901      	bls.n	8007f92 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e0f2      	b.n	8008178 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007f92:	4b23      	ldr	r3, [pc, #140]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007f94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f98:	f003 0302 	and.w	r3, r3, #2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d0ef      	beq.n	8007f80 <HAL_RCC_OscConfig+0x418>
 8007fa0:	e01b      	b.n	8007fda <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007fa2:	4b1f      	ldr	r3, [pc, #124]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007fa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007fa8:	4a1d      	ldr	r2, [pc, #116]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007faa:	f023 0301 	bic.w	r3, r3, #1
 8007fae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fb2:	f7fa fbc7 	bl	8002744 <HAL_GetTick>
 8007fb6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007fb8:	e008      	b.n	8007fcc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fba:	f7fa fbc3 	bl	8002744 <HAL_GetTick>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d901      	bls.n	8007fcc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e0d5      	b.n	8008178 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007fcc:	4b14      	ldr	r3, [pc, #80]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007fce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007fd2:	f003 0302 	and.w	r3, r3, #2
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1ef      	bne.n	8007fba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	69db      	ldr	r3, [r3, #28]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f000 80c9 	beq.w	8008176 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007fe4:	4b0e      	ldr	r3, [pc, #56]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	f003 030c 	and.w	r3, r3, #12
 8007fec:	2b0c      	cmp	r3, #12
 8007fee:	f000 8083 	beq.w	80080f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	69db      	ldr	r3, [r3, #28]
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d15e      	bne.n	80080b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ffa:	4b09      	ldr	r3, [pc, #36]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a08      	ldr	r2, [pc, #32]	; (8008020 <HAL_RCC_OscConfig+0x4b8>)
 8008000:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008006:	f7fa fb9d 	bl	8002744 <HAL_GetTick>
 800800a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800800c:	e00c      	b.n	8008028 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800800e:	f7fa fb99 	bl	8002744 <HAL_GetTick>
 8008012:	4602      	mov	r2, r0
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	2b02      	cmp	r3, #2
 800801a:	d905      	bls.n	8008028 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	e0ab      	b.n	8008178 <HAL_RCC_OscConfig+0x610>
 8008020:	40021000 	.word	0x40021000
 8008024:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008028:	4b55      	ldr	r3, [pc, #340]	; (8008180 <HAL_RCC_OscConfig+0x618>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1ec      	bne.n	800800e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008034:	4b52      	ldr	r3, [pc, #328]	; (8008180 <HAL_RCC_OscConfig+0x618>)
 8008036:	68da      	ldr	r2, [r3, #12]
 8008038:	4b52      	ldr	r3, [pc, #328]	; (8008184 <HAL_RCC_OscConfig+0x61c>)
 800803a:	4013      	ands	r3, r2
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	6a11      	ldr	r1, [r2, #32]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008044:	3a01      	subs	r2, #1
 8008046:	0112      	lsls	r2, r2, #4
 8008048:	4311      	orrs	r1, r2
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800804e:	0212      	lsls	r2, r2, #8
 8008050:	4311      	orrs	r1, r2
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008056:	0852      	lsrs	r2, r2, #1
 8008058:	3a01      	subs	r2, #1
 800805a:	0552      	lsls	r2, r2, #21
 800805c:	4311      	orrs	r1, r2
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008062:	0852      	lsrs	r2, r2, #1
 8008064:	3a01      	subs	r2, #1
 8008066:	0652      	lsls	r2, r2, #25
 8008068:	4311      	orrs	r1, r2
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800806e:	06d2      	lsls	r2, r2, #27
 8008070:	430a      	orrs	r2, r1
 8008072:	4943      	ldr	r1, [pc, #268]	; (8008180 <HAL_RCC_OscConfig+0x618>)
 8008074:	4313      	orrs	r3, r2
 8008076:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008078:	4b41      	ldr	r3, [pc, #260]	; (8008180 <HAL_RCC_OscConfig+0x618>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a40      	ldr	r2, [pc, #256]	; (8008180 <HAL_RCC_OscConfig+0x618>)
 800807e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008082:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008084:	4b3e      	ldr	r3, [pc, #248]	; (8008180 <HAL_RCC_OscConfig+0x618>)
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	4a3d      	ldr	r2, [pc, #244]	; (8008180 <HAL_RCC_OscConfig+0x618>)
 800808a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800808e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008090:	f7fa fb58 	bl	8002744 <HAL_GetTick>
 8008094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008096:	e008      	b.n	80080aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008098:	f7fa fb54 	bl	8002744 <HAL_GetTick>
 800809c:	4602      	mov	r2, r0
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d901      	bls.n	80080aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e066      	b.n	8008178 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080aa:	4b35      	ldr	r3, [pc, #212]	; (8008180 <HAL_RCC_OscConfig+0x618>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d0f0      	beq.n	8008098 <HAL_RCC_OscConfig+0x530>
 80080b6:	e05e      	b.n	8008176 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080b8:	4b31      	ldr	r3, [pc, #196]	; (8008180 <HAL_RCC_OscConfig+0x618>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a30      	ldr	r2, [pc, #192]	; (8008180 <HAL_RCC_OscConfig+0x618>)
 80080be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080c4:	f7fa fb3e 	bl	8002744 <HAL_GetTick>
 80080c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080ca:	e008      	b.n	80080de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080cc:	f7fa fb3a 	bl	8002744 <HAL_GetTick>
 80080d0:	4602      	mov	r2, r0
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d901      	bls.n	80080de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80080da:	2303      	movs	r3, #3
 80080dc:	e04c      	b.n	8008178 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080de:	4b28      	ldr	r3, [pc, #160]	; (8008180 <HAL_RCC_OscConfig+0x618>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1f0      	bne.n	80080cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80080ea:	4b25      	ldr	r3, [pc, #148]	; (8008180 <HAL_RCC_OscConfig+0x618>)
 80080ec:	68da      	ldr	r2, [r3, #12]
 80080ee:	4924      	ldr	r1, [pc, #144]	; (8008180 <HAL_RCC_OscConfig+0x618>)
 80080f0:	4b25      	ldr	r3, [pc, #148]	; (8008188 <HAL_RCC_OscConfig+0x620>)
 80080f2:	4013      	ands	r3, r2
 80080f4:	60cb      	str	r3, [r1, #12]
 80080f6:	e03e      	b.n	8008176 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	69db      	ldr	r3, [r3, #28]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d101      	bne.n	8008104 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	e039      	b.n	8008178 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008104:	4b1e      	ldr	r3, [pc, #120]	; (8008180 <HAL_RCC_OscConfig+0x618>)
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	f003 0203 	and.w	r2, r3, #3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	429a      	cmp	r2, r3
 8008116:	d12c      	bne.n	8008172 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008122:	3b01      	subs	r3, #1
 8008124:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008126:	429a      	cmp	r2, r3
 8008128:	d123      	bne.n	8008172 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008134:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008136:	429a      	cmp	r2, r3
 8008138:	d11b      	bne.n	8008172 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008144:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008146:	429a      	cmp	r2, r3
 8008148:	d113      	bne.n	8008172 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008154:	085b      	lsrs	r3, r3, #1
 8008156:	3b01      	subs	r3, #1
 8008158:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800815a:	429a      	cmp	r2, r3
 800815c:	d109      	bne.n	8008172 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008168:	085b      	lsrs	r3, r3, #1
 800816a:	3b01      	subs	r3, #1
 800816c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800816e:	429a      	cmp	r2, r3
 8008170:	d001      	beq.n	8008176 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e000      	b.n	8008178 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3720      	adds	r7, #32
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	40021000 	.word	0x40021000
 8008184:	019f800c 	.word	0x019f800c
 8008188:	feeefffc 	.word	0xfeeefffc

0800818c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008196:	2300      	movs	r3, #0
 8008198:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e11e      	b.n	80083e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081a4:	4b91      	ldr	r3, [pc, #580]	; (80083ec <HAL_RCC_ClockConfig+0x260>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 030f 	and.w	r3, r3, #15
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d910      	bls.n	80081d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081b2:	4b8e      	ldr	r3, [pc, #568]	; (80083ec <HAL_RCC_ClockConfig+0x260>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f023 020f 	bic.w	r2, r3, #15
 80081ba:	498c      	ldr	r1, [pc, #560]	; (80083ec <HAL_RCC_ClockConfig+0x260>)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	4313      	orrs	r3, r2
 80081c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081c2:	4b8a      	ldr	r3, [pc, #552]	; (80083ec <HAL_RCC_ClockConfig+0x260>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 030f 	and.w	r3, r3, #15
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d001      	beq.n	80081d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e106      	b.n	80083e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0301 	and.w	r3, r3, #1
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d073      	beq.n	80082c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	2b03      	cmp	r3, #3
 80081e6:	d129      	bne.n	800823c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081e8:	4b81      	ldr	r3, [pc, #516]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e0f4      	b.n	80083e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80081f8:	f000 f972 	bl	80084e0 <RCC_GetSysClockFreqFromPLLSource>
 80081fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	4a7c      	ldr	r2, [pc, #496]	; (80083f4 <HAL_RCC_ClockConfig+0x268>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d93f      	bls.n	8008286 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008206:	4b7a      	ldr	r3, [pc, #488]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d009      	beq.n	8008226 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800821a:	2b00      	cmp	r3, #0
 800821c:	d033      	beq.n	8008286 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008222:	2b00      	cmp	r3, #0
 8008224:	d12f      	bne.n	8008286 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008226:	4b72      	ldr	r3, [pc, #456]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800822e:	4a70      	ldr	r2, [pc, #448]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 8008230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008234:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008236:	2380      	movs	r3, #128	; 0x80
 8008238:	617b      	str	r3, [r7, #20]
 800823a:	e024      	b.n	8008286 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	2b02      	cmp	r3, #2
 8008242:	d107      	bne.n	8008254 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008244:	4b6a      	ldr	r3, [pc, #424]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d109      	bne.n	8008264 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e0c6      	b.n	80083e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008254:	4b66      	ldr	r3, [pc, #408]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800825c:	2b00      	cmp	r3, #0
 800825e:	d101      	bne.n	8008264 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e0be      	b.n	80083e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008264:	f000 f8ce 	bl	8008404 <HAL_RCC_GetSysClockFreq>
 8008268:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	4a61      	ldr	r2, [pc, #388]	; (80083f4 <HAL_RCC_ClockConfig+0x268>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d909      	bls.n	8008286 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008272:	4b5f      	ldr	r3, [pc, #380]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800827a:	4a5d      	ldr	r2, [pc, #372]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 800827c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008280:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008282:	2380      	movs	r3, #128	; 0x80
 8008284:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008286:	4b5a      	ldr	r3, [pc, #360]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f023 0203 	bic.w	r2, r3, #3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	4957      	ldr	r1, [pc, #348]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 8008294:	4313      	orrs	r3, r2
 8008296:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008298:	f7fa fa54 	bl	8002744 <HAL_GetTick>
 800829c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800829e:	e00a      	b.n	80082b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082a0:	f7fa fa50 	bl	8002744 <HAL_GetTick>
 80082a4:	4602      	mov	r2, r0
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d901      	bls.n	80082b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e095      	b.n	80083e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082b6:	4b4e      	ldr	r3, [pc, #312]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f003 020c 	and.w	r2, r3, #12
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d1eb      	bne.n	80082a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0302 	and.w	r3, r3, #2
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d023      	beq.n	800831c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 0304 	and.w	r3, r3, #4
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d005      	beq.n	80082ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082e0:	4b43      	ldr	r3, [pc, #268]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	4a42      	ldr	r2, [pc, #264]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 80082e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80082ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0308 	and.w	r3, r3, #8
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d007      	beq.n	8008308 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80082f8:	4b3d      	ldr	r3, [pc, #244]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008300:	4a3b      	ldr	r2, [pc, #236]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 8008302:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008306:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008308:	4b39      	ldr	r3, [pc, #228]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	4936      	ldr	r1, [pc, #216]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 8008316:	4313      	orrs	r3, r2
 8008318:	608b      	str	r3, [r1, #8]
 800831a:	e008      	b.n	800832e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	2b80      	cmp	r3, #128	; 0x80
 8008320:	d105      	bne.n	800832e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008322:	4b33      	ldr	r3, [pc, #204]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	4a32      	ldr	r2, [pc, #200]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 8008328:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800832c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800832e:	4b2f      	ldr	r3, [pc, #188]	; (80083ec <HAL_RCC_ClockConfig+0x260>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 030f 	and.w	r3, r3, #15
 8008336:	683a      	ldr	r2, [r7, #0]
 8008338:	429a      	cmp	r2, r3
 800833a:	d21d      	bcs.n	8008378 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800833c:	4b2b      	ldr	r3, [pc, #172]	; (80083ec <HAL_RCC_ClockConfig+0x260>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f023 020f 	bic.w	r2, r3, #15
 8008344:	4929      	ldr	r1, [pc, #164]	; (80083ec <HAL_RCC_ClockConfig+0x260>)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	4313      	orrs	r3, r2
 800834a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800834c:	f7fa f9fa 	bl	8002744 <HAL_GetTick>
 8008350:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008352:	e00a      	b.n	800836a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008354:	f7fa f9f6 	bl	8002744 <HAL_GetTick>
 8008358:	4602      	mov	r2, r0
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008362:	4293      	cmp	r3, r2
 8008364:	d901      	bls.n	800836a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008366:	2303      	movs	r3, #3
 8008368:	e03b      	b.n	80083e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800836a:	4b20      	ldr	r3, [pc, #128]	; (80083ec <HAL_RCC_ClockConfig+0x260>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 030f 	and.w	r3, r3, #15
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	429a      	cmp	r2, r3
 8008376:	d1ed      	bne.n	8008354 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0304 	and.w	r3, r3, #4
 8008380:	2b00      	cmp	r3, #0
 8008382:	d008      	beq.n	8008396 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008384:	4b1a      	ldr	r3, [pc, #104]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	4917      	ldr	r1, [pc, #92]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 8008392:	4313      	orrs	r3, r2
 8008394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0308 	and.w	r3, r3, #8
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d009      	beq.n	80083b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083a2:	4b13      	ldr	r3, [pc, #76]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	00db      	lsls	r3, r3, #3
 80083b0:	490f      	ldr	r1, [pc, #60]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 80083b2:	4313      	orrs	r3, r2
 80083b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80083b6:	f000 f825 	bl	8008404 <HAL_RCC_GetSysClockFreq>
 80083ba:	4602      	mov	r2, r0
 80083bc:	4b0c      	ldr	r3, [pc, #48]	; (80083f0 <HAL_RCC_ClockConfig+0x264>)
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	091b      	lsrs	r3, r3, #4
 80083c2:	f003 030f 	and.w	r3, r3, #15
 80083c6:	490c      	ldr	r1, [pc, #48]	; (80083f8 <HAL_RCC_ClockConfig+0x26c>)
 80083c8:	5ccb      	ldrb	r3, [r1, r3]
 80083ca:	f003 031f 	and.w	r3, r3, #31
 80083ce:	fa22 f303 	lsr.w	r3, r2, r3
 80083d2:	4a0a      	ldr	r2, [pc, #40]	; (80083fc <HAL_RCC_ClockConfig+0x270>)
 80083d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80083d6:	4b0a      	ldr	r3, [pc, #40]	; (8008400 <HAL_RCC_ClockConfig+0x274>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fa f966 	bl	80026ac <HAL_InitTick>
 80083e0:	4603      	mov	r3, r0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3718      	adds	r7, #24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	40022000 	.word	0x40022000
 80083f0:	40021000 	.word	0x40021000
 80083f4:	04c4b400 	.word	0x04c4b400
 80083f8:	08011e88 	.word	0x08011e88
 80083fc:	2000000c 	.word	0x2000000c
 8008400:	20000010 	.word	0x20000010

08008404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008404:	b480      	push	{r7}
 8008406:	b087      	sub	sp, #28
 8008408:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800840a:	4b2c      	ldr	r3, [pc, #176]	; (80084bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	f003 030c 	and.w	r3, r3, #12
 8008412:	2b04      	cmp	r3, #4
 8008414:	d102      	bne.n	800841c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008416:	4b2a      	ldr	r3, [pc, #168]	; (80084c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008418:	613b      	str	r3, [r7, #16]
 800841a:	e047      	b.n	80084ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800841c:	4b27      	ldr	r3, [pc, #156]	; (80084bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f003 030c 	and.w	r3, r3, #12
 8008424:	2b08      	cmp	r3, #8
 8008426:	d102      	bne.n	800842e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008428:	4b26      	ldr	r3, [pc, #152]	; (80084c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800842a:	613b      	str	r3, [r7, #16]
 800842c:	e03e      	b.n	80084ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800842e:	4b23      	ldr	r3, [pc, #140]	; (80084bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f003 030c 	and.w	r3, r3, #12
 8008436:	2b0c      	cmp	r3, #12
 8008438:	d136      	bne.n	80084a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800843a:	4b20      	ldr	r3, [pc, #128]	; (80084bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	f003 0303 	and.w	r3, r3, #3
 8008442:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008444:	4b1d      	ldr	r3, [pc, #116]	; (80084bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	091b      	lsrs	r3, r3, #4
 800844a:	f003 030f 	and.w	r3, r3, #15
 800844e:	3301      	adds	r3, #1
 8008450:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2b03      	cmp	r3, #3
 8008456:	d10c      	bne.n	8008472 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008458:	4a1a      	ldr	r2, [pc, #104]	; (80084c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008460:	4a16      	ldr	r2, [pc, #88]	; (80084bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008462:	68d2      	ldr	r2, [r2, #12]
 8008464:	0a12      	lsrs	r2, r2, #8
 8008466:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800846a:	fb02 f303 	mul.w	r3, r2, r3
 800846e:	617b      	str	r3, [r7, #20]
      break;
 8008470:	e00c      	b.n	800848c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008472:	4a13      	ldr	r2, [pc, #76]	; (80084c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	fbb2 f3f3 	udiv	r3, r2, r3
 800847a:	4a10      	ldr	r2, [pc, #64]	; (80084bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800847c:	68d2      	ldr	r2, [r2, #12]
 800847e:	0a12      	lsrs	r2, r2, #8
 8008480:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008484:	fb02 f303 	mul.w	r3, r2, r3
 8008488:	617b      	str	r3, [r7, #20]
      break;
 800848a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800848c:	4b0b      	ldr	r3, [pc, #44]	; (80084bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	0e5b      	lsrs	r3, r3, #25
 8008492:	f003 0303 	and.w	r3, r3, #3
 8008496:	3301      	adds	r3, #1
 8008498:	005b      	lsls	r3, r3, #1
 800849a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084a4:	613b      	str	r3, [r7, #16]
 80084a6:	e001      	b.n	80084ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80084a8:	2300      	movs	r3, #0
 80084aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80084ac:	693b      	ldr	r3, [r7, #16]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	371c      	adds	r7, #28
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	40021000 	.word	0x40021000
 80084c0:	00f42400 	.word	0x00f42400
 80084c4:	007a1200 	.word	0x007a1200

080084c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084c8:	b480      	push	{r7}
 80084ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80084cc:	4b03      	ldr	r3, [pc, #12]	; (80084dc <HAL_RCC_GetHCLKFreq+0x14>)
 80084ce:	681b      	ldr	r3, [r3, #0]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	2000000c 	.word	0x2000000c

080084e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80084e6:	4b1e      	ldr	r3, [pc, #120]	; (8008560 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	f003 0303 	and.w	r3, r3, #3
 80084ee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80084f0:	4b1b      	ldr	r3, [pc, #108]	; (8008560 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	091b      	lsrs	r3, r3, #4
 80084f6:	f003 030f 	and.w	r3, r3, #15
 80084fa:	3301      	adds	r3, #1
 80084fc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	2b03      	cmp	r3, #3
 8008502:	d10c      	bne.n	800851e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008504:	4a17      	ldr	r2, [pc, #92]	; (8008564 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	fbb2 f3f3 	udiv	r3, r2, r3
 800850c:	4a14      	ldr	r2, [pc, #80]	; (8008560 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800850e:	68d2      	ldr	r2, [r2, #12]
 8008510:	0a12      	lsrs	r2, r2, #8
 8008512:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008516:	fb02 f303 	mul.w	r3, r2, r3
 800851a:	617b      	str	r3, [r7, #20]
    break;
 800851c:	e00c      	b.n	8008538 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800851e:	4a12      	ldr	r2, [pc, #72]	; (8008568 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	fbb2 f3f3 	udiv	r3, r2, r3
 8008526:	4a0e      	ldr	r2, [pc, #56]	; (8008560 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008528:	68d2      	ldr	r2, [r2, #12]
 800852a:	0a12      	lsrs	r2, r2, #8
 800852c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008530:	fb02 f303 	mul.w	r3, r2, r3
 8008534:	617b      	str	r3, [r7, #20]
    break;
 8008536:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008538:	4b09      	ldr	r3, [pc, #36]	; (8008560 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	0e5b      	lsrs	r3, r3, #25
 800853e:	f003 0303 	and.w	r3, r3, #3
 8008542:	3301      	adds	r3, #1
 8008544:	005b      	lsls	r3, r3, #1
 8008546:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008550:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008552:	687b      	ldr	r3, [r7, #4]
}
 8008554:	4618      	mov	r0, r3
 8008556:	371c      	adds	r7, #28
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr
 8008560:	40021000 	.word	0x40021000
 8008564:	007a1200 	.word	0x007a1200
 8008568:	00f42400 	.word	0x00f42400

0800856c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008574:	2300      	movs	r3, #0
 8008576:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008578:	2300      	movs	r3, #0
 800857a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 8098 	beq.w	80086ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800858a:	2300      	movs	r3, #0
 800858c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800858e:	4b43      	ldr	r3, [pc, #268]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10d      	bne.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800859a:	4b40      	ldr	r3, [pc, #256]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800859c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800859e:	4a3f      	ldr	r2, [pc, #252]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80085a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085a4:	6593      	str	r3, [r2, #88]	; 0x58
 80085a6:	4b3d      	ldr	r3, [pc, #244]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80085a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085ae:	60bb      	str	r3, [r7, #8]
 80085b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085b2:	2301      	movs	r3, #1
 80085b4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80085b6:	4b3a      	ldr	r3, [pc, #232]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a39      	ldr	r2, [pc, #228]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80085bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80085c2:	f7fa f8bf 	bl	8002744 <HAL_GetTick>
 80085c6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085c8:	e009      	b.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085ca:	f7fa f8bb 	bl	8002744 <HAL_GetTick>
 80085ce:	4602      	mov	r2, r0
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	1ad3      	subs	r3, r2, r3
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d902      	bls.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80085d8:	2303      	movs	r3, #3
 80085da:	74fb      	strb	r3, [r7, #19]
        break;
 80085dc:	e005      	b.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085de:	4b30      	ldr	r3, [pc, #192]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d0ef      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80085ea:	7cfb      	ldrb	r3, [r7, #19]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d159      	bne.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80085f0:	4b2a      	ldr	r3, [pc, #168]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80085f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085fa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d01e      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	429a      	cmp	r2, r3
 800860a:	d019      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800860c:	4b23      	ldr	r3, [pc, #140]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800860e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008616:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008618:	4b20      	ldr	r3, [pc, #128]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800861a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800861e:	4a1f      	ldr	r2, [pc, #124]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008628:	4b1c      	ldr	r3, [pc, #112]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800862a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800862e:	4a1b      	ldr	r2, [pc, #108]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008638:	4a18      	ldr	r2, [pc, #96]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f003 0301 	and.w	r3, r3, #1
 8008646:	2b00      	cmp	r3, #0
 8008648:	d016      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800864a:	f7fa f87b 	bl	8002744 <HAL_GetTick>
 800864e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008650:	e00b      	b.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008652:	f7fa f877 	bl	8002744 <HAL_GetTick>
 8008656:	4602      	mov	r2, r0
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008660:	4293      	cmp	r3, r2
 8008662:	d902      	bls.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	74fb      	strb	r3, [r7, #19]
            break;
 8008668:	e006      	b.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800866a:	4b0c      	ldr	r3, [pc, #48]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800866c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008670:	f003 0302 	and.w	r3, r3, #2
 8008674:	2b00      	cmp	r3, #0
 8008676:	d0ec      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008678:	7cfb      	ldrb	r3, [r7, #19]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d10b      	bne.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800867e:	4b07      	ldr	r3, [pc, #28]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008684:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800868c:	4903      	ldr	r1, [pc, #12]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800868e:	4313      	orrs	r3, r2
 8008690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008694:	e008      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008696:	7cfb      	ldrb	r3, [r7, #19]
 8008698:	74bb      	strb	r3, [r7, #18]
 800869a:	e005      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800869c:	40021000 	.word	0x40021000
 80086a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a4:	7cfb      	ldrb	r3, [r7, #19]
 80086a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80086a8:	7c7b      	ldrb	r3, [r7, #17]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d105      	bne.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086ae:	4ba7      	ldr	r3, [pc, #668]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086b2:	4aa6      	ldr	r2, [pc, #664]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00a      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80086c6:	4ba1      	ldr	r3, [pc, #644]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086cc:	f023 0203 	bic.w	r2, r3, #3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	499d      	ldr	r1, [pc, #628]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086d6:	4313      	orrs	r3, r2
 80086d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 0302 	and.w	r3, r3, #2
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00a      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80086e8:	4b98      	ldr	r3, [pc, #608]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ee:	f023 020c 	bic.w	r2, r3, #12
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	4995      	ldr	r1, [pc, #596]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80086f8:	4313      	orrs	r3, r2
 80086fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 0304 	and.w	r3, r3, #4
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00a      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800870a:	4b90      	ldr	r3, [pc, #576]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800870c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008710:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	498c      	ldr	r1, [pc, #560]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800871a:	4313      	orrs	r3, r2
 800871c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0308 	and.w	r3, r3, #8
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00a      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800872c:	4b87      	ldr	r3, [pc, #540]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800872e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008732:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	4984      	ldr	r1, [pc, #528]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800873c:	4313      	orrs	r3, r2
 800873e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 0310 	and.w	r3, r3, #16
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00a      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800874e:	4b7f      	ldr	r3, [pc, #508]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	497b      	ldr	r1, [pc, #492]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800875e:	4313      	orrs	r3, r2
 8008760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0320 	and.w	r3, r3, #32
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00a      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008770:	4b76      	ldr	r3, [pc, #472]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008776:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	4973      	ldr	r1, [pc, #460]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008780:	4313      	orrs	r3, r2
 8008782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00a      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008792:	4b6e      	ldr	r3, [pc, #440]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008798:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	496a      	ldr	r1, [pc, #424]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087a2:	4313      	orrs	r3, r2
 80087a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00a      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80087b4:	4b65      	ldr	r3, [pc, #404]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a1b      	ldr	r3, [r3, #32]
 80087c2:	4962      	ldr	r1, [pc, #392]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087c4:	4313      	orrs	r3, r2
 80087c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00a      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80087d6:	4b5d      	ldr	r3, [pc, #372]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e4:	4959      	ldr	r1, [pc, #356]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00a      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80087f8:	4b54      	ldr	r3, [pc, #336]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80087fe:	f023 0203 	bic.w	r2, r3, #3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008806:	4951      	ldr	r1, [pc, #324]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008808:	4313      	orrs	r3, r2
 800880a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00a      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800881a:	4b4c      	ldr	r3, [pc, #304]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800881c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008820:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008828:	4948      	ldr	r1, [pc, #288]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800882a:	4313      	orrs	r3, r2
 800882c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008838:	2b00      	cmp	r3, #0
 800883a:	d015      	beq.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800883c:	4b43      	ldr	r3, [pc, #268]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800883e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008842:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884a:	4940      	ldr	r1, [pc, #256]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800884c:	4313      	orrs	r3, r2
 800884e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800885a:	d105      	bne.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800885c:	4b3b      	ldr	r3, [pc, #236]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	4a3a      	ldr	r2, [pc, #232]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008866:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008870:	2b00      	cmp	r3, #0
 8008872:	d015      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008874:	4b35      	ldr	r3, [pc, #212]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800887a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008882:	4932      	ldr	r1, [pc, #200]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008884:	4313      	orrs	r3, r2
 8008886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800888e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008892:	d105      	bne.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008894:	4b2d      	ldr	r3, [pc, #180]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	4a2c      	ldr	r2, [pc, #176]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800889a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800889e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d015      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80088ac:	4b27      	ldr	r3, [pc, #156]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ba:	4924      	ldr	r1, [pc, #144]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088bc:	4313      	orrs	r3, r2
 80088be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088ca:	d105      	bne.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088cc:	4b1f      	ldr	r3, [pc, #124]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	4a1e      	ldr	r2, [pc, #120]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088d6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d015      	beq.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80088e4:	4b19      	ldr	r3, [pc, #100]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f2:	4916      	ldr	r1, [pc, #88]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088f4:	4313      	orrs	r3, r2
 80088f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008902:	d105      	bne.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008904:	4b11      	ldr	r3, [pc, #68]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	4a10      	ldr	r2, [pc, #64]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800890a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800890e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d019      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800891c:	4b0b      	ldr	r3, [pc, #44]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800891e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008922:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892a:	4908      	ldr	r1, [pc, #32]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800892c:	4313      	orrs	r3, r2
 800892e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008936:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800893a:	d109      	bne.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800893c:	4b03      	ldr	r3, [pc, #12]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	4a02      	ldr	r2, [pc, #8]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008946:	60d3      	str	r3, [r2, #12]
 8008948:	e002      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800894a:	bf00      	nop
 800894c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d015      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800895c:	4b29      	ldr	r3, [pc, #164]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800895e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008962:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800896a:	4926      	ldr	r1, [pc, #152]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800896c:	4313      	orrs	r3, r2
 800896e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008976:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800897a:	d105      	bne.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800897c:	4b21      	ldr	r3, [pc, #132]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	4a20      	ldr	r2, [pc, #128]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008986:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d015      	beq.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008994:	4b1b      	ldr	r3, [pc, #108]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800899a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089a2:	4918      	ldr	r1, [pc, #96]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80089a4:	4313      	orrs	r3, r2
 80089a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089b2:	d105      	bne.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80089b4:	4b13      	ldr	r3, [pc, #76]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	4a12      	ldr	r2, [pc, #72]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80089ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089be:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d015      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80089cc:	4b0d      	ldr	r3, [pc, #52]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80089ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80089d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089da:	490a      	ldr	r1, [pc, #40]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80089dc:	4313      	orrs	r3, r2
 80089de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089ea:	d105      	bne.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089ec:	4b05      	ldr	r3, [pc, #20]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	4a04      	ldr	r2, [pc, #16]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80089f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80089f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3718      	adds	r7, #24
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	40021000 	.word	0x40021000

08008a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d101      	bne.n	8008a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e049      	b.n	8008aae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d106      	bne.n	8008a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7f9 fc7a 	bl	8002328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2202      	movs	r2, #2
 8008a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	3304      	adds	r3, #4
 8008a44:	4619      	mov	r1, r3
 8008a46:	4610      	mov	r0, r2
 8008a48:	f000 fb74 	bl	8009134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
	...

08008ab8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d001      	beq.n	8008ad0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e054      	b.n	8008b7a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2202      	movs	r2, #2
 8008ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68da      	ldr	r2, [r3, #12]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f042 0201 	orr.w	r2, r2, #1
 8008ae6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a26      	ldr	r2, [pc, #152]	; (8008b88 <HAL_TIM_Base_Start_IT+0xd0>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d022      	beq.n	8008b38 <HAL_TIM_Base_Start_IT+0x80>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008afa:	d01d      	beq.n	8008b38 <HAL_TIM_Base_Start_IT+0x80>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a22      	ldr	r2, [pc, #136]	; (8008b8c <HAL_TIM_Base_Start_IT+0xd4>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d018      	beq.n	8008b38 <HAL_TIM_Base_Start_IT+0x80>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a21      	ldr	r2, [pc, #132]	; (8008b90 <HAL_TIM_Base_Start_IT+0xd8>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d013      	beq.n	8008b38 <HAL_TIM_Base_Start_IT+0x80>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a1f      	ldr	r2, [pc, #124]	; (8008b94 <HAL_TIM_Base_Start_IT+0xdc>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d00e      	beq.n	8008b38 <HAL_TIM_Base_Start_IT+0x80>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a1e      	ldr	r2, [pc, #120]	; (8008b98 <HAL_TIM_Base_Start_IT+0xe0>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d009      	beq.n	8008b38 <HAL_TIM_Base_Start_IT+0x80>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a1c      	ldr	r2, [pc, #112]	; (8008b9c <HAL_TIM_Base_Start_IT+0xe4>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d004      	beq.n	8008b38 <HAL_TIM_Base_Start_IT+0x80>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a1b      	ldr	r2, [pc, #108]	; (8008ba0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d115      	bne.n	8008b64 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	689a      	ldr	r2, [r3, #8]
 8008b3e:	4b19      	ldr	r3, [pc, #100]	; (8008ba4 <HAL_TIM_Base_Start_IT+0xec>)
 8008b40:	4013      	ands	r3, r2
 8008b42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2b06      	cmp	r3, #6
 8008b48:	d015      	beq.n	8008b76 <HAL_TIM_Base_Start_IT+0xbe>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b50:	d011      	beq.n	8008b76 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f042 0201 	orr.w	r2, r2, #1
 8008b60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b62:	e008      	b.n	8008b76 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f042 0201 	orr.w	r2, r2, #1
 8008b72:	601a      	str	r2, [r3, #0]
 8008b74:	e000      	b.n	8008b78 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	40012c00 	.word	0x40012c00
 8008b8c:	40000400 	.word	0x40000400
 8008b90:	40000800 	.word	0x40000800
 8008b94:	40000c00 	.word	0x40000c00
 8008b98:	40013400 	.word	0x40013400
 8008b9c:	40014000 	.word	0x40014000
 8008ba0:	40015000 	.word	0x40015000
 8008ba4:	00010007 	.word	0x00010007

08008ba8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	68da      	ldr	r2, [r3, #12]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f022 0201 	bic.w	r2, r2, #1
 8008bbe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6a1a      	ldr	r2, [r3, #32]
 8008bc6:	f241 1311 	movw	r3, #4369	; 0x1111
 8008bca:	4013      	ands	r3, r2
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d10f      	bne.n	8008bf0 <HAL_TIM_Base_Stop_IT+0x48>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6a1a      	ldr	r2, [r3, #32]
 8008bd6:	f244 4344 	movw	r3, #17476	; 0x4444
 8008bda:	4013      	ands	r3, r2
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d107      	bne.n	8008bf0 <HAL_TIM_Base_Stop_IT+0x48>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f022 0201 	bic.w	r2, r2, #1
 8008bee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr

08008c06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b084      	sub	sp, #16
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	f003 0302 	and.w	r3, r3, #2
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d020      	beq.n	8008c6a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f003 0302 	and.w	r3, r3, #2
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d01b      	beq.n	8008c6a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f06f 0202 	mvn.w	r2, #2
 8008c3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	f003 0303 	and.w	r3, r3, #3
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d003      	beq.n	8008c58 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fa51 	bl	80090f8 <HAL_TIM_IC_CaptureCallback>
 8008c56:	e005      	b.n	8008c64 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fa43 	bl	80090e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 fa54 	bl	800910c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	f003 0304 	and.w	r3, r3, #4
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d020      	beq.n	8008cb6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f003 0304 	and.w	r3, r3, #4
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d01b      	beq.n	8008cb6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f06f 0204 	mvn.w	r2, #4
 8008c86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d003      	beq.n	8008ca4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fa2b 	bl	80090f8 <HAL_TIM_IC_CaptureCallback>
 8008ca2:	e005      	b.n	8008cb0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fa1d 	bl	80090e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fa2e 	bl	800910c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	f003 0308 	and.w	r3, r3, #8
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d020      	beq.n	8008d02 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f003 0308 	and.w	r3, r3, #8
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d01b      	beq.n	8008d02 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f06f 0208 	mvn.w	r2, #8
 8008cd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2204      	movs	r2, #4
 8008cd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	69db      	ldr	r3, [r3, #28]
 8008ce0:	f003 0303 	and.w	r3, r3, #3
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d003      	beq.n	8008cf0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fa05 	bl	80090f8 <HAL_TIM_IC_CaptureCallback>
 8008cee:	e005      	b.n	8008cfc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f9f7 	bl	80090e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fa08 	bl	800910c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	f003 0310 	and.w	r3, r3, #16
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d020      	beq.n	8008d4e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f003 0310 	and.w	r3, r3, #16
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d01b      	beq.n	8008d4e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f06f 0210 	mvn.w	r2, #16
 8008d1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2208      	movs	r2, #8
 8008d24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	69db      	ldr	r3, [r3, #28]
 8008d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d003      	beq.n	8008d3c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f9df 	bl	80090f8 <HAL_TIM_IC_CaptureCallback>
 8008d3a:	e005      	b.n	8008d48 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f9d1 	bl	80090e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 f9e2 	bl	800910c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	f003 0301 	and.w	r3, r3, #1
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00c      	beq.n	8008d72 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f003 0301 	and.w	r3, r3, #1
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d007      	beq.n	8008d72 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f06f 0201 	mvn.w	r2, #1
 8008d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f9af 	bl	80090d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d104      	bne.n	8008d86 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00c      	beq.n	8008da0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d007      	beq.n	8008da0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8008d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fbba 	bl	8009514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00c      	beq.n	8008dc4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d007      	beq.n	8008dc4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fbb2 	bl	8009528 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00c      	beq.n	8008de8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d007      	beq.n	8008de8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f99c 	bl	8009120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	f003 0320 	and.w	r3, r3, #32
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00c      	beq.n	8008e0c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f003 0320 	and.w	r3, r3, #32
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d007      	beq.n	8008e0c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f06f 0220 	mvn.w	r2, #32
 8008e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 fb7a 	bl	8009500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00c      	beq.n	8008e30 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d007      	beq.n	8008e30 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fb86 	bl	800953c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00c      	beq.n	8008e54 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d007      	beq.n	8008e54 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fb7e 	bl	8009550 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00c      	beq.n	8008e78 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d007      	beq.n	8008e78 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fb76 	bl	8009564 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00c      	beq.n	8008e9c <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d007      	beq.n	8008e9c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fb6e 	bl	8009578 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e9c:	bf00      	nop
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d101      	bne.n	8008ec0 <HAL_TIM_ConfigClockSource+0x1c>
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	e0f6      	b.n	80090ae <HAL_TIM_ConfigClockSource+0x20a>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2202      	movs	r2, #2
 8008ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008ede:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008eea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a6f      	ldr	r2, [pc, #444]	; (80090b8 <HAL_TIM_ConfigClockSource+0x214>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	f000 80c1 	beq.w	8009082 <HAL_TIM_ConfigClockSource+0x1de>
 8008f00:	4a6d      	ldr	r2, [pc, #436]	; (80090b8 <HAL_TIM_ConfigClockSource+0x214>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	f200 80c6 	bhi.w	8009094 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f08:	4a6c      	ldr	r2, [pc, #432]	; (80090bc <HAL_TIM_ConfigClockSource+0x218>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	f000 80b9 	beq.w	8009082 <HAL_TIM_ConfigClockSource+0x1de>
 8008f10:	4a6a      	ldr	r2, [pc, #424]	; (80090bc <HAL_TIM_ConfigClockSource+0x218>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	f200 80be 	bhi.w	8009094 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f18:	4a69      	ldr	r2, [pc, #420]	; (80090c0 <HAL_TIM_ConfigClockSource+0x21c>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	f000 80b1 	beq.w	8009082 <HAL_TIM_ConfigClockSource+0x1de>
 8008f20:	4a67      	ldr	r2, [pc, #412]	; (80090c0 <HAL_TIM_ConfigClockSource+0x21c>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	f200 80b6 	bhi.w	8009094 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f28:	4a66      	ldr	r2, [pc, #408]	; (80090c4 <HAL_TIM_ConfigClockSource+0x220>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	f000 80a9 	beq.w	8009082 <HAL_TIM_ConfigClockSource+0x1de>
 8008f30:	4a64      	ldr	r2, [pc, #400]	; (80090c4 <HAL_TIM_ConfigClockSource+0x220>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	f200 80ae 	bhi.w	8009094 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f38:	4a63      	ldr	r2, [pc, #396]	; (80090c8 <HAL_TIM_ConfigClockSource+0x224>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	f000 80a1 	beq.w	8009082 <HAL_TIM_ConfigClockSource+0x1de>
 8008f40:	4a61      	ldr	r2, [pc, #388]	; (80090c8 <HAL_TIM_ConfigClockSource+0x224>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	f200 80a6 	bhi.w	8009094 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f48:	4a60      	ldr	r2, [pc, #384]	; (80090cc <HAL_TIM_ConfigClockSource+0x228>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	f000 8099 	beq.w	8009082 <HAL_TIM_ConfigClockSource+0x1de>
 8008f50:	4a5e      	ldr	r2, [pc, #376]	; (80090cc <HAL_TIM_ConfigClockSource+0x228>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	f200 809e 	bhi.w	8009094 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008f5c:	f000 8091 	beq.w	8009082 <HAL_TIM_ConfigClockSource+0x1de>
 8008f60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008f64:	f200 8096 	bhi.w	8009094 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f6c:	f000 8089 	beq.w	8009082 <HAL_TIM_ConfigClockSource+0x1de>
 8008f70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f74:	f200 808e 	bhi.w	8009094 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f7c:	d03e      	beq.n	8008ffc <HAL_TIM_ConfigClockSource+0x158>
 8008f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f82:	f200 8087 	bhi.w	8009094 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f8a:	f000 8086 	beq.w	800909a <HAL_TIM_ConfigClockSource+0x1f6>
 8008f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f92:	d87f      	bhi.n	8009094 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f94:	2b70      	cmp	r3, #112	; 0x70
 8008f96:	d01a      	beq.n	8008fce <HAL_TIM_ConfigClockSource+0x12a>
 8008f98:	2b70      	cmp	r3, #112	; 0x70
 8008f9a:	d87b      	bhi.n	8009094 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f9c:	2b60      	cmp	r3, #96	; 0x60
 8008f9e:	d050      	beq.n	8009042 <HAL_TIM_ConfigClockSource+0x19e>
 8008fa0:	2b60      	cmp	r3, #96	; 0x60
 8008fa2:	d877      	bhi.n	8009094 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fa4:	2b50      	cmp	r3, #80	; 0x50
 8008fa6:	d03c      	beq.n	8009022 <HAL_TIM_ConfigClockSource+0x17e>
 8008fa8:	2b50      	cmp	r3, #80	; 0x50
 8008faa:	d873      	bhi.n	8009094 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fac:	2b40      	cmp	r3, #64	; 0x40
 8008fae:	d058      	beq.n	8009062 <HAL_TIM_ConfigClockSource+0x1be>
 8008fb0:	2b40      	cmp	r3, #64	; 0x40
 8008fb2:	d86f      	bhi.n	8009094 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fb4:	2b30      	cmp	r3, #48	; 0x30
 8008fb6:	d064      	beq.n	8009082 <HAL_TIM_ConfigClockSource+0x1de>
 8008fb8:	2b30      	cmp	r3, #48	; 0x30
 8008fba:	d86b      	bhi.n	8009094 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fbc:	2b20      	cmp	r3, #32
 8008fbe:	d060      	beq.n	8009082 <HAL_TIM_ConfigClockSource+0x1de>
 8008fc0:	2b20      	cmp	r3, #32
 8008fc2:	d867      	bhi.n	8009094 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d05c      	beq.n	8009082 <HAL_TIM_ConfigClockSource+0x1de>
 8008fc8:	2b10      	cmp	r3, #16
 8008fca:	d05a      	beq.n	8009082 <HAL_TIM_ConfigClockSource+0x1de>
 8008fcc:	e062      	b.n	8009094 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008fde:	f000 f9d9 	bl	8009394 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ff0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	609a      	str	r2, [r3, #8]
      break;
 8008ffa:	e04f      	b.n	800909c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800900c:	f000 f9c2 	bl	8009394 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	689a      	ldr	r2, [r3, #8]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800901e:	609a      	str	r2, [r3, #8]
      break;
 8009020:	e03c      	b.n	800909c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800902e:	461a      	mov	r2, r3
 8009030:	f000 f934 	bl	800929c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2150      	movs	r1, #80	; 0x50
 800903a:	4618      	mov	r0, r3
 800903c:	f000 f98d 	bl	800935a <TIM_ITRx_SetConfig>
      break;
 8009040:	e02c      	b.n	800909c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800904e:	461a      	mov	r2, r3
 8009050:	f000 f953 	bl	80092fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2160      	movs	r1, #96	; 0x60
 800905a:	4618      	mov	r0, r3
 800905c:	f000 f97d 	bl	800935a <TIM_ITRx_SetConfig>
      break;
 8009060:	e01c      	b.n	800909c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800906e:	461a      	mov	r2, r3
 8009070:	f000 f914 	bl	800929c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2140      	movs	r1, #64	; 0x40
 800907a:	4618      	mov	r0, r3
 800907c:	f000 f96d 	bl	800935a <TIM_ITRx_SetConfig>
      break;
 8009080:	e00c      	b.n	800909c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4619      	mov	r1, r3
 800908c:	4610      	mov	r0, r2
 800908e:	f000 f964 	bl	800935a <TIM_ITRx_SetConfig>
      break;
 8009092:	e003      	b.n	800909c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	73fb      	strb	r3, [r7, #15]
      break;
 8009098:	e000      	b.n	800909c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800909a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80090ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	00100070 	.word	0x00100070
 80090bc:	00100060 	.word	0x00100060
 80090c0:	00100050 	.word	0x00100050
 80090c4:	00100040 	.word	0x00100040
 80090c8:	00100030 	.word	0x00100030
 80090cc:	00100020 	.word	0x00100020

080090d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a4c      	ldr	r2, [pc, #304]	; (8009278 <TIM_Base_SetConfig+0x144>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d017      	beq.n	800917c <TIM_Base_SetConfig+0x48>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009152:	d013      	beq.n	800917c <TIM_Base_SetConfig+0x48>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a49      	ldr	r2, [pc, #292]	; (800927c <TIM_Base_SetConfig+0x148>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d00f      	beq.n	800917c <TIM_Base_SetConfig+0x48>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a48      	ldr	r2, [pc, #288]	; (8009280 <TIM_Base_SetConfig+0x14c>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d00b      	beq.n	800917c <TIM_Base_SetConfig+0x48>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a47      	ldr	r2, [pc, #284]	; (8009284 <TIM_Base_SetConfig+0x150>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d007      	beq.n	800917c <TIM_Base_SetConfig+0x48>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a46      	ldr	r2, [pc, #280]	; (8009288 <TIM_Base_SetConfig+0x154>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d003      	beq.n	800917c <TIM_Base_SetConfig+0x48>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a45      	ldr	r2, [pc, #276]	; (800928c <TIM_Base_SetConfig+0x158>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d108      	bne.n	800918e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	4313      	orrs	r3, r2
 800918c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a39      	ldr	r2, [pc, #228]	; (8009278 <TIM_Base_SetConfig+0x144>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d023      	beq.n	80091de <TIM_Base_SetConfig+0xaa>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800919c:	d01f      	beq.n	80091de <TIM_Base_SetConfig+0xaa>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a36      	ldr	r2, [pc, #216]	; (800927c <TIM_Base_SetConfig+0x148>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d01b      	beq.n	80091de <TIM_Base_SetConfig+0xaa>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a35      	ldr	r2, [pc, #212]	; (8009280 <TIM_Base_SetConfig+0x14c>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d017      	beq.n	80091de <TIM_Base_SetConfig+0xaa>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a34      	ldr	r2, [pc, #208]	; (8009284 <TIM_Base_SetConfig+0x150>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d013      	beq.n	80091de <TIM_Base_SetConfig+0xaa>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a33      	ldr	r2, [pc, #204]	; (8009288 <TIM_Base_SetConfig+0x154>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d00f      	beq.n	80091de <TIM_Base_SetConfig+0xaa>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a33      	ldr	r2, [pc, #204]	; (8009290 <TIM_Base_SetConfig+0x15c>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d00b      	beq.n	80091de <TIM_Base_SetConfig+0xaa>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a32      	ldr	r2, [pc, #200]	; (8009294 <TIM_Base_SetConfig+0x160>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d007      	beq.n	80091de <TIM_Base_SetConfig+0xaa>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a31      	ldr	r2, [pc, #196]	; (8009298 <TIM_Base_SetConfig+0x164>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d003      	beq.n	80091de <TIM_Base_SetConfig+0xaa>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a2c      	ldr	r2, [pc, #176]	; (800928c <TIM_Base_SetConfig+0x158>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d108      	bne.n	80091f0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	689a      	ldr	r2, [r3, #8]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a18      	ldr	r2, [pc, #96]	; (8009278 <TIM_Base_SetConfig+0x144>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d013      	beq.n	8009244 <TIM_Base_SetConfig+0x110>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4a1a      	ldr	r2, [pc, #104]	; (8009288 <TIM_Base_SetConfig+0x154>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d00f      	beq.n	8009244 <TIM_Base_SetConfig+0x110>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a1a      	ldr	r2, [pc, #104]	; (8009290 <TIM_Base_SetConfig+0x15c>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d00b      	beq.n	8009244 <TIM_Base_SetConfig+0x110>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a19      	ldr	r2, [pc, #100]	; (8009294 <TIM_Base_SetConfig+0x160>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d007      	beq.n	8009244 <TIM_Base_SetConfig+0x110>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4a18      	ldr	r2, [pc, #96]	; (8009298 <TIM_Base_SetConfig+0x164>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d003      	beq.n	8009244 <TIM_Base_SetConfig+0x110>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4a13      	ldr	r2, [pc, #76]	; (800928c <TIM_Base_SetConfig+0x158>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d103      	bne.n	800924c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	691a      	ldr	r2, [r3, #16]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	2b01      	cmp	r3, #1
 800925c:	d105      	bne.n	800926a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	f023 0201 	bic.w	r2, r3, #1
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	611a      	str	r2, [r3, #16]
  }
}
 800926a:	bf00      	nop
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	40012c00 	.word	0x40012c00
 800927c:	40000400 	.word	0x40000400
 8009280:	40000800 	.word	0x40000800
 8009284:	40000c00 	.word	0x40000c00
 8009288:	40013400 	.word	0x40013400
 800928c:	40015000 	.word	0x40015000
 8009290:	40014000 	.word	0x40014000
 8009294:	40014400 	.word	0x40014400
 8009298:	40014800 	.word	0x40014800

0800929c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800929c:	b480      	push	{r7}
 800929e:	b087      	sub	sp, #28
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6a1b      	ldr	r3, [r3, #32]
 80092ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6a1b      	ldr	r3, [r3, #32]
 80092b2:	f023 0201 	bic.w	r2, r3, #1
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	699b      	ldr	r3, [r3, #24]
 80092be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80092c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	011b      	lsls	r3, r3, #4
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	f023 030a 	bic.w	r3, r3, #10
 80092d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80092da:	697a      	ldr	r2, [r7, #20]
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	4313      	orrs	r3, r2
 80092e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	693a      	ldr	r2, [r7, #16]
 80092e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	697a      	ldr	r2, [r7, #20]
 80092ec:	621a      	str	r2, [r3, #32]
}
 80092ee:	bf00      	nop
 80092f0:	371c      	adds	r7, #28
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr

080092fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092fa:	b480      	push	{r7}
 80092fc:	b087      	sub	sp, #28
 80092fe:	af00      	add	r7, sp, #0
 8009300:	60f8      	str	r0, [r7, #12]
 8009302:	60b9      	str	r1, [r7, #8]
 8009304:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6a1b      	ldr	r3, [r3, #32]
 8009310:	f023 0210 	bic.w	r2, r3, #16
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009324:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	031b      	lsls	r3, r3, #12
 800932a:	693a      	ldr	r2, [r7, #16]
 800932c:	4313      	orrs	r3, r2
 800932e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009336:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	011b      	lsls	r3, r3, #4
 800933c:	697a      	ldr	r2, [r7, #20]
 800933e:	4313      	orrs	r3, r2
 8009340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	693a      	ldr	r2, [r7, #16]
 8009346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	697a      	ldr	r2, [r7, #20]
 800934c:	621a      	str	r2, [r3, #32]
}
 800934e:	bf00      	nop
 8009350:	371c      	adds	r7, #28
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr

0800935a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800935a:	b480      	push	{r7}
 800935c:	b085      	sub	sp, #20
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009374:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	4313      	orrs	r3, r2
 800937c:	f043 0307 	orr.w	r3, r3, #7
 8009380:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	609a      	str	r2, [r3, #8]
}
 8009388:	bf00      	nop
 800938a:	3714      	adds	r7, #20
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009394:	b480      	push	{r7}
 8009396:	b087      	sub	sp, #28
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
 80093a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80093ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	021a      	lsls	r2, r3, #8
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	431a      	orrs	r2, r3
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	4313      	orrs	r3, r2
 80093bc:	697a      	ldr	r2, [r7, #20]
 80093be:	4313      	orrs	r3, r2
 80093c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	697a      	ldr	r2, [r7, #20]
 80093c6:	609a      	str	r2, [r3, #8]
}
 80093c8:	bf00      	nop
 80093ca:	371c      	adds	r7, #28
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d101      	bne.n	80093ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093e8:	2302      	movs	r3, #2
 80093ea:	e074      	b.n	80094d6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2202      	movs	r2, #2
 80093f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a34      	ldr	r2, [pc, #208]	; (80094e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d009      	beq.n	800942a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a33      	ldr	r2, [pc, #204]	; (80094e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d004      	beq.n	800942a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a31      	ldr	r2, [pc, #196]	; (80094ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d108      	bne.n	800943c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009430:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	4313      	orrs	r3, r2
 800943a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009446:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	4313      	orrs	r3, r2
 8009450:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a21      	ldr	r2, [pc, #132]	; (80094e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d022      	beq.n	80094aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800946c:	d01d      	beq.n	80094aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a1f      	ldr	r2, [pc, #124]	; (80094f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d018      	beq.n	80094aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a1d      	ldr	r2, [pc, #116]	; (80094f4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d013      	beq.n	80094aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a1c      	ldr	r2, [pc, #112]	; (80094f8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d00e      	beq.n	80094aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a15      	ldr	r2, [pc, #84]	; (80094e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d009      	beq.n	80094aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a18      	ldr	r2, [pc, #96]	; (80094fc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d004      	beq.n	80094aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a11      	ldr	r2, [pc, #68]	; (80094ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d10c      	bne.n	80094c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	68ba      	ldr	r2, [r7, #8]
 80094c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3714      	adds	r7, #20
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	40012c00 	.word	0x40012c00
 80094e8:	40013400 	.word	0x40013400
 80094ec:	40015000 	.word	0x40015000
 80094f0:	40000400 	.word	0x40000400
 80094f4:	40000800 	.word	0x40000800
 80094f8:	40000c00 	.word	0x40000c00
 80094fc:	40014000 	.word	0x40014000

08009500 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800951c:	bf00      	nop
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800956c:	bf00      	nop
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800959c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80095a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80095ac:	2300      	movs	r3, #0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3714      	adds	r7, #20
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr

080095ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80095ba:	b480      	push	{r7}
 80095bc:	b085      	sub	sp, #20
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80095c2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80095c6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	43db      	mvns	r3, r3
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	4013      	ands	r3, r2
 80095da:	b29a      	uxth	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	1d3b      	adds	r3, r7, #4
 80095fa:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2201      	movs	r2, #1
 8009602:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2200      	movs	r2, #0
 8009612:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2200      	movs	r2, #0
 800961a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3714      	adds	r7, #20
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800962c:	b480      	push	{r7}
 800962e:	b09d      	sub	sp, #116	; 0x74
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009636:	2300      	movs	r3, #0
 8009638:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	4413      	add	r3, r2
 8009646:	881b      	ldrh	r3, [r3, #0]
 8009648:	b29b      	uxth	r3, r3
 800964a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800964e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009652:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	78db      	ldrb	r3, [r3, #3]
 800965a:	2b03      	cmp	r3, #3
 800965c:	d81f      	bhi.n	800969e <USB_ActivateEndpoint+0x72>
 800965e:	a201      	add	r2, pc, #4	; (adr r2, 8009664 <USB_ActivateEndpoint+0x38>)
 8009660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009664:	08009675 	.word	0x08009675
 8009668:	08009691 	.word	0x08009691
 800966c:	080096a7 	.word	0x080096a7
 8009670:	08009683 	.word	0x08009683
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009674:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009678:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800967c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009680:	e012      	b.n	80096a8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009682:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009686:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800968a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800968e:	e00b      	b.n	80096a8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009690:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009694:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009698:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800969c:	e004      	b.n	80096a8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80096a4:	e000      	b.n	80096a8 <USB_ActivateEndpoint+0x7c>
      break;
 80096a6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	441a      	add	r2, r3
 80096b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4413      	add	r3, r2
 80096d4:	881b      	ldrh	r3, [r3, #0]
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	b21b      	sxth	r3, r3
 80096da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096e2:	b21a      	sxth	r2, r3
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	b21b      	sxth	r3, r3
 80096ea:	4313      	orrs	r3, r2
 80096ec:	b21b      	sxth	r3, r3
 80096ee:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	441a      	add	r2, r3
 80096fc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800970c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009710:	b29b      	uxth	r3, r3
 8009712:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	7b1b      	ldrb	r3, [r3, #12]
 8009718:	2b00      	cmp	r3, #0
 800971a:	f040 8178 	bne.w	8009a0e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	785b      	ldrb	r3, [r3, #1]
 8009722:	2b00      	cmp	r3, #0
 8009724:	f000 8084 	beq.w	8009830 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	61bb      	str	r3, [r7, #24]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009732:	b29b      	uxth	r3, r3
 8009734:	461a      	mov	r2, r3
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	4413      	add	r3, r2
 800973a:	61bb      	str	r3, [r7, #24]
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	00da      	lsls	r2, r3, #3
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	4413      	add	r3, r2
 8009746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800974a:	617b      	str	r3, [r7, #20]
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	88db      	ldrh	r3, [r3, #6]
 8009750:	085b      	lsrs	r3, r3, #1
 8009752:	b29b      	uxth	r3, r3
 8009754:	005b      	lsls	r3, r3, #1
 8009756:	b29a      	uxth	r2, r3
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	4413      	add	r3, r2
 8009766:	881b      	ldrh	r3, [r3, #0]
 8009768:	827b      	strh	r3, [r7, #18]
 800976a:	8a7b      	ldrh	r3, [r7, #18]
 800976c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009770:	2b00      	cmp	r3, #0
 8009772:	d01b      	beq.n	80097ac <USB_ActivateEndpoint+0x180>
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	881b      	ldrh	r3, [r3, #0]
 8009780:	b29b      	uxth	r3, r3
 8009782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800978a:	823b      	strh	r3, [r7, #16]
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	441a      	add	r2, r3
 8009796:	8a3b      	ldrh	r3, [r7, #16]
 8009798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800979c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	78db      	ldrb	r3, [r3, #3]
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d020      	beq.n	80097f6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	4413      	add	r3, r2
 80097be:	881b      	ldrh	r3, [r3, #0]
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097ca:	81bb      	strh	r3, [r7, #12]
 80097cc:	89bb      	ldrh	r3, [r7, #12]
 80097ce:	f083 0320 	eor.w	r3, r3, #32
 80097d2:	81bb      	strh	r3, [r7, #12]
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	441a      	add	r2, r3
 80097de:	89bb      	ldrh	r3, [r7, #12]
 80097e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	8013      	strh	r3, [r2, #0]
 80097f4:	e2d5      	b.n	8009da2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4413      	add	r3, r2
 8009800:	881b      	ldrh	r3, [r3, #0]
 8009802:	b29b      	uxth	r3, r3
 8009804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800980c:	81fb      	strh	r3, [r7, #14]
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	441a      	add	r2, r3
 8009818:	89fb      	ldrh	r3, [r7, #14]
 800981a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800981e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800982a:	b29b      	uxth	r3, r3
 800982c:	8013      	strh	r3, [r2, #0]
 800982e:	e2b8      	b.n	8009da2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	633b      	str	r3, [r7, #48]	; 0x30
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800983a:	b29b      	uxth	r3, r3
 800983c:	461a      	mov	r2, r3
 800983e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009840:	4413      	add	r3, r2
 8009842:	633b      	str	r3, [r7, #48]	; 0x30
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	00da      	lsls	r2, r3, #3
 800984a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984c:	4413      	add	r3, r2
 800984e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	88db      	ldrh	r3, [r3, #6]
 8009858:	085b      	lsrs	r3, r3, #1
 800985a:	b29b      	uxth	r3, r3
 800985c:	005b      	lsls	r3, r3, #1
 800985e:	b29a      	uxth	r2, r3
 8009860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009862:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	62bb      	str	r3, [r7, #40]	; 0x28
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800986e:	b29b      	uxth	r3, r3
 8009870:	461a      	mov	r2, r3
 8009872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009874:	4413      	add	r3, r2
 8009876:	62bb      	str	r3, [r7, #40]	; 0x28
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	00da      	lsls	r2, r3, #3
 800987e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009880:	4413      	add	r3, r2
 8009882:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009886:	627b      	str	r3, [r7, #36]	; 0x24
 8009888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988a:	881b      	ldrh	r3, [r3, #0]
 800988c:	b29b      	uxth	r3, r3
 800988e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009892:	b29a      	uxth	r2, r3
 8009894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009896:	801a      	strh	r2, [r3, #0]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	2b3e      	cmp	r3, #62	; 0x3e
 800989e:	d91d      	bls.n	80098dc <USB_ActivateEndpoint+0x2b0>
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	095b      	lsrs	r3, r3, #5
 80098a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	f003 031f 	and.w	r3, r3, #31
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d102      	bne.n	80098ba <USB_ActivateEndpoint+0x28e>
 80098b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098b6:	3b01      	subs	r3, #1
 80098b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80098ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098bc:	881b      	ldrh	r3, [r3, #0]
 80098be:	b29a      	uxth	r2, r3
 80098c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	029b      	lsls	r3, r3, #10
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	4313      	orrs	r3, r2
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d8:	801a      	strh	r2, [r3, #0]
 80098da:	e026      	b.n	800992a <USB_ActivateEndpoint+0x2fe>
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d10a      	bne.n	80098fa <USB_ActivateEndpoint+0x2ce>
 80098e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e6:	881b      	ldrh	r3, [r3, #0]
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f6:	801a      	strh	r2, [r3, #0]
 80098f8:	e017      	b.n	800992a <USB_ActivateEndpoint+0x2fe>
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	085b      	lsrs	r3, r3, #1
 8009900:	66bb      	str	r3, [r7, #104]	; 0x68
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	f003 0301 	and.w	r3, r3, #1
 800990a:	2b00      	cmp	r3, #0
 800990c:	d002      	beq.n	8009914 <USB_ActivateEndpoint+0x2e8>
 800990e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009910:	3301      	adds	r3, #1
 8009912:	66bb      	str	r3, [r7, #104]	; 0x68
 8009914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009916:	881b      	ldrh	r3, [r3, #0]
 8009918:	b29a      	uxth	r2, r3
 800991a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800991c:	b29b      	uxth	r3, r3
 800991e:	029b      	lsls	r3, r3, #10
 8009920:	b29b      	uxth	r3, r3
 8009922:	4313      	orrs	r3, r2
 8009924:	b29a      	uxth	r2, r3
 8009926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009928:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4413      	add	r3, r2
 8009934:	881b      	ldrh	r3, [r3, #0]
 8009936:	847b      	strh	r3, [r7, #34]	; 0x22
 8009938:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800993a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800993e:	2b00      	cmp	r3, #0
 8009940:	d01b      	beq.n	800997a <USB_ActivateEndpoint+0x34e>
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	881b      	ldrh	r3, [r3, #0]
 800994e:	b29b      	uxth	r3, r3
 8009950:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009958:	843b      	strh	r3, [r7, #32]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	441a      	add	r2, r3
 8009964:	8c3b      	ldrh	r3, [r7, #32]
 8009966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800996a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800996e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009976:	b29b      	uxth	r3, r3
 8009978:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d124      	bne.n	80099cc <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4413      	add	r3, r2
 800998c:	881b      	ldrh	r3, [r3, #0]
 800998e:	b29b      	uxth	r3, r3
 8009990:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009998:	83bb      	strh	r3, [r7, #28]
 800999a:	8bbb      	ldrh	r3, [r7, #28]
 800999c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80099a0:	83bb      	strh	r3, [r7, #28]
 80099a2:	8bbb      	ldrh	r3, [r7, #28]
 80099a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80099a8:	83bb      	strh	r3, [r7, #28]
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	441a      	add	r2, r3
 80099b4:	8bbb      	ldrh	r3, [r7, #28]
 80099b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	8013      	strh	r3, [r2, #0]
 80099ca:	e1ea      	b.n	8009da2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4413      	add	r3, r2
 80099d6:	881b      	ldrh	r3, [r3, #0]
 80099d8:	b29b      	uxth	r3, r3
 80099da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e2:	83fb      	strh	r3, [r7, #30]
 80099e4:	8bfb      	ldrh	r3, [r7, #30]
 80099e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80099ea:	83fb      	strh	r3, [r7, #30]
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	441a      	add	r2, r3
 80099f6:	8bfb      	ldrh	r3, [r7, #30]
 80099f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	8013      	strh	r3, [r2, #0]
 8009a0c:	e1c9      	b.n	8009da2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	78db      	ldrb	r3, [r3, #3]
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d11e      	bne.n	8009a54 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4413      	add	r3, r2
 8009a20:	881b      	ldrh	r3, [r3, #0]
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a2c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	441a      	add	r2, r3
 8009a3a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a46:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	8013      	strh	r3, [r2, #0]
 8009a52:	e01d      	b.n	8009a90 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	4413      	add	r3, r2
 8009a5e:	881b      	ldrh	r3, [r3, #0]
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a6a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	441a      	add	r2, r3
 8009a78:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009aa0:	4413      	add	r3, r2
 8009aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	00da      	lsls	r2, r3, #3
 8009aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009aac:	4413      	add	r3, r2
 8009aae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ab2:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	891b      	ldrh	r3, [r3, #8]
 8009ab8:	085b      	lsrs	r3, r3, #1
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	005b      	lsls	r3, r3, #1
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ac2:	801a      	strh	r2, [r3, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	657b      	str	r3, [r7, #84]	; 0x54
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ad4:	4413      	add	r3, r2
 8009ad6:	657b      	str	r3, [r7, #84]	; 0x54
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	00da      	lsls	r2, r3, #3
 8009ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ae6:	653b      	str	r3, [r7, #80]	; 0x50
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	895b      	ldrh	r3, [r3, #10]
 8009aec:	085b      	lsrs	r3, r3, #1
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	005b      	lsls	r3, r3, #1
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009af6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	785b      	ldrb	r3, [r3, #1]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f040 8093 	bne.w	8009c28 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	4413      	add	r3, r2
 8009b0c:	881b      	ldrh	r3, [r3, #0]
 8009b0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009b12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d01b      	beq.n	8009b56 <USB_ActivateEndpoint+0x52a>
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	4413      	add	r3, r2
 8009b28:	881b      	ldrh	r3, [r3, #0]
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b34:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	441a      	add	r2, r3
 8009b40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009b42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4413      	add	r3, r2
 8009b60:	881b      	ldrh	r3, [r3, #0]
 8009b62:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009b64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d01b      	beq.n	8009ba6 <USB_ActivateEndpoint+0x57a>
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	4413      	add	r3, r2
 8009b78:	881b      	ldrh	r3, [r3, #0]
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b84:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	441a      	add	r2, r3
 8009b90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	4413      	add	r3, r2
 8009bb0:	881b      	ldrh	r3, [r3, #0]
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bbc:	873b      	strh	r3, [r7, #56]	; 0x38
 8009bbe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009bc0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009bc4:	873b      	strh	r3, [r7, #56]	; 0x38
 8009bc6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009bc8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009bcc:	873b      	strh	r3, [r7, #56]	; 0x38
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	441a      	add	r2, r3
 8009bd8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	4413      	add	r3, r2
 8009bf8:	881b      	ldrh	r3, [r3, #0]
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c04:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	441a      	add	r2, r3
 8009c10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	8013      	strh	r3, [r2, #0]
 8009c26:	e0bc      	b.n	8009da2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4413      	add	r3, r2
 8009c32:	881b      	ldrh	r3, [r3, #0]
 8009c34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009c38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d01d      	beq.n	8009c80 <USB_ActivateEndpoint+0x654>
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	4413      	add	r3, r2
 8009c4e:	881b      	ldrh	r3, [r3, #0]
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c5a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	441a      	add	r2, r3
 8009c68:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	4413      	add	r3, r2
 8009c8a:	881b      	ldrh	r3, [r3, #0]
 8009c8c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009c90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d01d      	beq.n	8009cd8 <USB_ActivateEndpoint+0x6ac>
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	4413      	add	r3, r2
 8009ca6:	881b      	ldrh	r3, [r3, #0]
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cb2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	441a      	add	r2, r3
 8009cc0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	78db      	ldrb	r3, [r3, #3]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d024      	beq.n	8009d2a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	4413      	add	r3, r2
 8009cea:	881b      	ldrh	r3, [r3, #0]
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cf6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009cfa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009cfe:	f083 0320 	eor.w	r3, r3, #32
 8009d02:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	441a      	add	r2, r3
 8009d10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	8013      	strh	r3, [r2, #0]
 8009d28:	e01d      	b.n	8009d66 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4413      	add	r3, r2
 8009d34:	881b      	ldrh	r3, [r3, #0]
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d40:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	441a      	add	r2, r3
 8009d4e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	4413      	add	r3, r2
 8009d70:	881b      	ldrh	r3, [r3, #0]
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	441a      	add	r2, r3
 8009d8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009da2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3774      	adds	r7, #116	; 0x74
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop

08009db4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b08d      	sub	sp, #52	; 0x34
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	7b1b      	ldrb	r3, [r3, #12]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f040 808e 	bne.w	8009ee4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	785b      	ldrb	r3, [r3, #1]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d044      	beq.n	8009e5a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	4413      	add	r3, r2
 8009dda:	881b      	ldrh	r3, [r3, #0]
 8009ddc:	81bb      	strh	r3, [r7, #12]
 8009dde:	89bb      	ldrh	r3, [r7, #12]
 8009de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d01b      	beq.n	8009e20 <USB_DeactivateEndpoint+0x6c>
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	4413      	add	r3, r2
 8009df2:	881b      	ldrh	r3, [r3, #0]
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dfe:	817b      	strh	r3, [r7, #10]
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	441a      	add	r2, r3
 8009e0a:	897b      	ldrh	r3, [r7, #10]
 8009e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4413      	add	r3, r2
 8009e2a:	881b      	ldrh	r3, [r3, #0]
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e36:	813b      	strh	r3, [r7, #8]
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	441a      	add	r2, r3
 8009e42:	893b      	ldrh	r3, [r7, #8]
 8009e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	8013      	strh	r3, [r2, #0]
 8009e58:	e192      	b.n	800a180 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	4413      	add	r3, r2
 8009e64:	881b      	ldrh	r3, [r3, #0]
 8009e66:	827b      	strh	r3, [r7, #18]
 8009e68:	8a7b      	ldrh	r3, [r7, #18]
 8009e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d01b      	beq.n	8009eaa <USB_DeactivateEndpoint+0xf6>
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	4413      	add	r3, r2
 8009e7c:	881b      	ldrh	r3, [r3, #0]
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e88:	823b      	strh	r3, [r7, #16]
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	441a      	add	r2, r3
 8009e94:	8a3b      	ldrh	r3, [r7, #16]
 8009e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4413      	add	r3, r2
 8009eb4:	881b      	ldrh	r3, [r3, #0]
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ec0:	81fb      	strh	r3, [r7, #14]
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	441a      	add	r2, r3
 8009ecc:	89fb      	ldrh	r3, [r7, #14]
 8009ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	8013      	strh	r3, [r2, #0]
 8009ee2:	e14d      	b.n	800a180 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	785b      	ldrb	r3, [r3, #1]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f040 80a5 	bne.w	800a038 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4413      	add	r3, r2
 8009ef8:	881b      	ldrh	r3, [r3, #0]
 8009efa:	843b      	strh	r3, [r7, #32]
 8009efc:	8c3b      	ldrh	r3, [r7, #32]
 8009efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d01b      	beq.n	8009f3e <USB_DeactivateEndpoint+0x18a>
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	4413      	add	r3, r2
 8009f10:	881b      	ldrh	r3, [r3, #0]
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f1c:	83fb      	strh	r3, [r7, #30]
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	441a      	add	r2, r3
 8009f28:	8bfb      	ldrh	r3, [r7, #30]
 8009f2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	4413      	add	r3, r2
 8009f48:	881b      	ldrh	r3, [r3, #0]
 8009f4a:	83bb      	strh	r3, [r7, #28]
 8009f4c:	8bbb      	ldrh	r3, [r7, #28]
 8009f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d01b      	beq.n	8009f8e <USB_DeactivateEndpoint+0x1da>
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	4413      	add	r3, r2
 8009f60:	881b      	ldrh	r3, [r3, #0]
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f6c:	837b      	strh	r3, [r7, #26]
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	441a      	add	r2, r3
 8009f78:	8b7b      	ldrh	r3, [r7, #26]
 8009f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4413      	add	r3, r2
 8009f98:	881b      	ldrh	r3, [r3, #0]
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fa4:	833b      	strh	r3, [r7, #24]
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	441a      	add	r2, r3
 8009fb0:	8b3b      	ldrh	r3, [r7, #24]
 8009fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4413      	add	r3, r2
 8009fd0:	881b      	ldrh	r3, [r3, #0]
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fdc:	82fb      	strh	r3, [r7, #22]
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	441a      	add	r2, r3
 8009fe8:	8afb      	ldrh	r3, [r7, #22]
 8009fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4413      	add	r3, r2
 800a008:	881b      	ldrh	r3, [r3, #0]
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a014:	82bb      	strh	r3, [r7, #20]
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	441a      	add	r2, r3
 800a020:	8abb      	ldrh	r3, [r7, #20]
 800a022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a02a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a02e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a032:	b29b      	uxth	r3, r3
 800a034:	8013      	strh	r3, [r2, #0]
 800a036:	e0a3      	b.n	800a180 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	4413      	add	r3, r2
 800a042:	881b      	ldrh	r3, [r3, #0]
 800a044:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a046:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d01b      	beq.n	800a088 <USB_DeactivateEndpoint+0x2d4>
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4413      	add	r3, r2
 800a05a:	881b      	ldrh	r3, [r3, #0]
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a066:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	441a      	add	r2, r3
 800a072:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a07c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a084:	b29b      	uxth	r3, r3
 800a086:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4413      	add	r3, r2
 800a092:	881b      	ldrh	r3, [r3, #0]
 800a094:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a096:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d01b      	beq.n	800a0d8 <USB_DeactivateEndpoint+0x324>
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	4413      	add	r3, r2
 800a0aa:	881b      	ldrh	r3, [r3, #0]
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0b6:	853b      	strh	r3, [r7, #40]	; 0x28
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	441a      	add	r2, r3
 800a0c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a0c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4413      	add	r3, r2
 800a0e2:	881b      	ldrh	r3, [r3, #0]
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	441a      	add	r2, r3
 800a0fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a104:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4413      	add	r3, r2
 800a11a:	881b      	ldrh	r3, [r3, #0]
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a126:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	441a      	add	r2, r3
 800a132:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a13c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a144:	b29b      	uxth	r3, r3
 800a146:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	4413      	add	r3, r2
 800a152:	881b      	ldrh	r3, [r3, #0]
 800a154:	b29b      	uxth	r3, r3
 800a156:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a15a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a15e:	847b      	strh	r3, [r7, #34]	; 0x22
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	441a      	add	r2, r3
 800a16a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a16c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a170:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3734      	adds	r7, #52	; 0x34
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr

0800a18e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b0c2      	sub	sp, #264	; 0x108
 800a192:	af00      	add	r7, sp, #0
 800a194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a198:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a19c:	6018      	str	r0, [r3, #0]
 800a19e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1a6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a1a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	785b      	ldrb	r3, [r3, #1]
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	f040 86b7 	bne.w	800af28 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a1ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	699a      	ldr	r2, [r3, #24]
 800a1c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d908      	bls.n	800a1e8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a1d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a1e6:	e007      	b.n	800a1f8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a1e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	699b      	ldr	r3, [r3, #24]
 800a1f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a1f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	7b1b      	ldrb	r3, [r3, #12]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d13a      	bne.n	800a27e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a20c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	6959      	ldr	r1, [r3, #20]
 800a214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	88da      	ldrh	r2, [r3, #6]
 800a220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a224:	b29b      	uxth	r3, r3
 800a226:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a22a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a22e:	6800      	ldr	r0, [r0, #0]
 800a230:	f001 fc98 	bl	800bb64 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a238:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	613b      	str	r3, [r7, #16]
 800a240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a244:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a24e:	b29b      	uxth	r3, r3
 800a250:	461a      	mov	r2, r3
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	4413      	add	r3, r2
 800a256:	613b      	str	r3, [r7, #16]
 800a258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a25c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	00da      	lsls	r2, r3, #3
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	4413      	add	r3, r2
 800a26a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a26e:	60fb      	str	r3, [r7, #12]
 800a270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a274:	b29a      	uxth	r2, r3
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	801a      	strh	r2, [r3, #0]
 800a27a:	f000 be1f 	b.w	800aebc <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a27e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	78db      	ldrb	r3, [r3, #3]
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	f040 8462 	bne.w	800ab54 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	6a1a      	ldr	r2, [r3, #32]
 800a29c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	f240 83df 	bls.w	800aa6c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a2ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	4413      	add	r3, r2
 800a2c8:	881b      	ldrh	r3, [r3, #0]
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a2d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	441a      	add	r2, r3
 800a2f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a2f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a306:	b29b      	uxth	r3, r3
 800a308:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a30a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a30e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	6a1a      	ldr	r2, [r3, #32]
 800a316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a31a:	1ad2      	subs	r2, r2, r3
 800a31c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a32c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	4413      	add	r3, r2
 800a342:	881b      	ldrh	r3, [r3, #0]
 800a344:	b29b      	uxth	r3, r3
 800a346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f000 81c7 	beq.w	800a6de <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a354:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	633b      	str	r3, [r7, #48]	; 0x30
 800a35c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	785b      	ldrb	r3, [r3, #1]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d177      	bne.n	800a45c <USB_EPStartXfer+0x2ce>
 800a36c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a370:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	62bb      	str	r3, [r7, #40]	; 0x28
 800a378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a37c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a386:	b29b      	uxth	r3, r3
 800a388:	461a      	mov	r2, r3
 800a38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38c:	4413      	add	r3, r2
 800a38e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	00da      	lsls	r2, r3, #3
 800a39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a3a6:	627b      	str	r3, [r7, #36]	; 0x24
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3aa:	881b      	ldrh	r3, [r3, #0]
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3b2:	b29a      	uxth	r2, r3
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b6:	801a      	strh	r2, [r3, #0]
 800a3b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3bc:	2b3e      	cmp	r3, #62	; 0x3e
 800a3be:	d921      	bls.n	800a404 <USB_EPStartXfer+0x276>
 800a3c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3c4:	095b      	lsrs	r3, r3, #5
 800a3c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a3ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ce:	f003 031f 	and.w	r3, r3, #31
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d104      	bne.n	800a3e0 <USB_EPStartXfer+0x252>
 800a3d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e2:	881b      	ldrh	r3, [r3, #0]
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	029b      	lsls	r3, r3, #10
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a400:	801a      	strh	r2, [r3, #0]
 800a402:	e050      	b.n	800a4a6 <USB_EPStartXfer+0x318>
 800a404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d10a      	bne.n	800a422 <USB_EPStartXfer+0x294>
 800a40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40e:	881b      	ldrh	r3, [r3, #0]
 800a410:	b29b      	uxth	r3, r3
 800a412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41e:	801a      	strh	r2, [r3, #0]
 800a420:	e041      	b.n	800a4a6 <USB_EPStartXfer+0x318>
 800a422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a426:	085b      	lsrs	r3, r3, #1
 800a428:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a42c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a430:	f003 0301 	and.w	r3, r3, #1
 800a434:	2b00      	cmp	r3, #0
 800a436:	d004      	beq.n	800a442 <USB_EPStartXfer+0x2b4>
 800a438:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a43c:	3301      	adds	r3, #1
 800a43e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a444:	881b      	ldrh	r3, [r3, #0]
 800a446:	b29a      	uxth	r2, r3
 800a448:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	029b      	lsls	r3, r3, #10
 800a450:	b29b      	uxth	r3, r3
 800a452:	4313      	orrs	r3, r2
 800a454:	b29a      	uxth	r2, r3
 800a456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a458:	801a      	strh	r2, [r3, #0]
 800a45a:	e024      	b.n	800a4a6 <USB_EPStartXfer+0x318>
 800a45c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	785b      	ldrb	r3, [r3, #1]
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d11c      	bne.n	800a4a6 <USB_EPStartXfer+0x318>
 800a46c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a470:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	461a      	mov	r2, r3
 800a47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a480:	4413      	add	r3, r2
 800a482:	633b      	str	r3, [r7, #48]	; 0x30
 800a484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	00da      	lsls	r2, r3, #3
 800a492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a494:	4413      	add	r3, r2
 800a496:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a49a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a49c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a4a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	895b      	ldrh	r3, [r3, #10]
 800a4b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	6959      	ldr	r1, [r3, #20]
 800a4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a4cc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a4d0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a4d4:	6800      	ldr	r0, [r0, #0]
 800a4d6:	f001 fb45 	bl	800bb64 <USB_WritePMA>
            ep->xfer_buff += len;
 800a4da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	695a      	ldr	r2, [r3, #20]
 800a4e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4ea:	441a      	add	r2, r3
 800a4ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a4f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	6a1a      	ldr	r2, [r3, #32]
 800a504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	429a      	cmp	r2, r3
 800a512:	d90f      	bls.n	800a534 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	6a1a      	ldr	r2, [r3, #32]
 800a520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a524:	1ad2      	subs	r2, r2, r3
 800a526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a52a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	621a      	str	r2, [r3, #32]
 800a532:	e00e      	b.n	800a552 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	6a1b      	ldr	r3, [r3, #32]
 800a540:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2200      	movs	r2, #0
 800a550:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	785b      	ldrb	r3, [r3, #1]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d177      	bne.n	800a652 <USB_EPStartXfer+0x4c4>
 800a562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a566:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	61bb      	str	r3, [r7, #24]
 800a56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a572:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	461a      	mov	r2, r3
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	4413      	add	r3, r2
 800a584:	61bb      	str	r3, [r7, #24]
 800a586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a58a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	00da      	lsls	r2, r3, #3
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	4413      	add	r3, r2
 800a598:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a59c:	617b      	str	r3, [r7, #20]
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	881b      	ldrh	r3, [r3, #0]
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	801a      	strh	r2, [r3, #0]
 800a5ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5b2:	2b3e      	cmp	r3, #62	; 0x3e
 800a5b4:	d921      	bls.n	800a5fa <USB_EPStartXfer+0x46c>
 800a5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ba:	095b      	lsrs	r3, r3, #5
 800a5bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5c4:	f003 031f 	and.w	r3, r3, #31
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d104      	bne.n	800a5d6 <USB_EPStartXfer+0x448>
 800a5cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	881b      	ldrh	r3, [r3, #0]
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	029b      	lsls	r3, r3, #10
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	801a      	strh	r2, [r3, #0]
 800a5f8:	e056      	b.n	800a6a8 <USB_EPStartXfer+0x51a>
 800a5fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10a      	bne.n	800a618 <USB_EPStartXfer+0x48a>
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	881b      	ldrh	r3, [r3, #0]
 800a606:	b29b      	uxth	r3, r3
 800a608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a60c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a610:	b29a      	uxth	r2, r3
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	801a      	strh	r2, [r3, #0]
 800a616:	e047      	b.n	800a6a8 <USB_EPStartXfer+0x51a>
 800a618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a61c:	085b      	lsrs	r3, r3, #1
 800a61e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a626:	f003 0301 	and.w	r3, r3, #1
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d004      	beq.n	800a638 <USB_EPStartXfer+0x4aa>
 800a62e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a632:	3301      	adds	r3, #1
 800a634:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	881b      	ldrh	r3, [r3, #0]
 800a63c:	b29a      	uxth	r2, r3
 800a63e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a642:	b29b      	uxth	r3, r3
 800a644:	029b      	lsls	r3, r3, #10
 800a646:	b29b      	uxth	r3, r3
 800a648:	4313      	orrs	r3, r2
 800a64a:	b29a      	uxth	r2, r3
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	801a      	strh	r2, [r3, #0]
 800a650:	e02a      	b.n	800a6a8 <USB_EPStartXfer+0x51a>
 800a652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	785b      	ldrb	r3, [r3, #1]
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d122      	bne.n	800a6a8 <USB_EPStartXfer+0x51a>
 800a662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a666:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	623b      	str	r3, [r7, #32]
 800a66e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a672:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	461a      	mov	r2, r3
 800a680:	6a3b      	ldr	r3, [r7, #32]
 800a682:	4413      	add	r3, r2
 800a684:	623b      	str	r3, [r7, #32]
 800a686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a68a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	00da      	lsls	r2, r3, #3
 800a694:	6a3b      	ldr	r3, [r7, #32]
 800a696:	4413      	add	r3, r2
 800a698:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a69c:	61fb      	str	r3, [r7, #28]
 800a69e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6a2:	b29a      	uxth	r2, r3
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a6a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	891b      	ldrh	r3, [r3, #8]
 800a6b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a6b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	6959      	ldr	r1, [r3, #20]
 800a6c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a6ce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a6d2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a6d6:	6800      	ldr	r0, [r0, #0]
 800a6d8:	f001 fa44 	bl	800bb64 <USB_WritePMA>
 800a6dc:	e3ee      	b.n	800aebc <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a6de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	785b      	ldrb	r3, [r3, #1]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d177      	bne.n	800a7de <USB_EPStartXfer+0x650>
 800a6ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a708:	b29b      	uxth	r3, r3
 800a70a:	461a      	mov	r2, r3
 800a70c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a70e:	4413      	add	r3, r2
 800a710:	64bb      	str	r3, [r7, #72]	; 0x48
 800a712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	00da      	lsls	r2, r3, #3
 800a720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a722:	4413      	add	r3, r2
 800a724:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a728:	647b      	str	r3, [r7, #68]	; 0x44
 800a72a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a72c:	881b      	ldrh	r3, [r3, #0]
 800a72e:	b29b      	uxth	r3, r3
 800a730:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a734:	b29a      	uxth	r2, r3
 800a736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a738:	801a      	strh	r2, [r3, #0]
 800a73a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a73e:	2b3e      	cmp	r3, #62	; 0x3e
 800a740:	d921      	bls.n	800a786 <USB_EPStartXfer+0x5f8>
 800a742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a746:	095b      	lsrs	r3, r3, #5
 800a748:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a74c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a750:	f003 031f 	and.w	r3, r3, #31
 800a754:	2b00      	cmp	r3, #0
 800a756:	d104      	bne.n	800a762 <USB_EPStartXfer+0x5d4>
 800a758:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a75c:	3b01      	subs	r3, #1
 800a75e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a764:	881b      	ldrh	r3, [r3, #0]
 800a766:	b29a      	uxth	r2, r3
 800a768:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	029b      	lsls	r3, r3, #10
 800a770:	b29b      	uxth	r3, r3
 800a772:	4313      	orrs	r3, r2
 800a774:	b29b      	uxth	r3, r3
 800a776:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a77a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a77e:	b29a      	uxth	r2, r3
 800a780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a782:	801a      	strh	r2, [r3, #0]
 800a784:	e056      	b.n	800a834 <USB_EPStartXfer+0x6a6>
 800a786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d10a      	bne.n	800a7a4 <USB_EPStartXfer+0x616>
 800a78e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a790:	881b      	ldrh	r3, [r3, #0]
 800a792:	b29b      	uxth	r3, r3
 800a794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a79c:	b29a      	uxth	r2, r3
 800a79e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7a0:	801a      	strh	r2, [r3, #0]
 800a7a2:	e047      	b.n	800a834 <USB_EPStartXfer+0x6a6>
 800a7a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7a8:	085b      	lsrs	r3, r3, #1
 800a7aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a7ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d004      	beq.n	800a7c4 <USB_EPStartXfer+0x636>
 800a7ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a7be:	3301      	adds	r3, #1
 800a7c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a7c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7c6:	881b      	ldrh	r3, [r3, #0]
 800a7c8:	b29a      	uxth	r2, r3
 800a7ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	029b      	lsls	r3, r3, #10
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	b29a      	uxth	r2, r3
 800a7d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7da:	801a      	strh	r2, [r3, #0]
 800a7dc:	e02a      	b.n	800a834 <USB_EPStartXfer+0x6a6>
 800a7de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	785b      	ldrb	r3, [r3, #1]
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d122      	bne.n	800a834 <USB_EPStartXfer+0x6a6>
 800a7ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	653b      	str	r3, [r7, #80]	; 0x50
 800a7fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a808:	b29b      	uxth	r3, r3
 800a80a:	461a      	mov	r2, r3
 800a80c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a80e:	4413      	add	r3, r2
 800a810:	653b      	str	r3, [r7, #80]	; 0x50
 800a812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	00da      	lsls	r2, r3, #3
 800a820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a822:	4413      	add	r3, r2
 800a824:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a828:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a82a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a82e:	b29a      	uxth	r2, r3
 800a830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a832:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	891b      	ldrh	r3, [r3, #8]
 800a840:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	6959      	ldr	r1, [r3, #20]
 800a850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a854:	b29b      	uxth	r3, r3
 800a856:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a85a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a85e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a862:	6800      	ldr	r0, [r0, #0]
 800a864:	f001 f97e 	bl	800bb64 <USB_WritePMA>
            ep->xfer_buff += len;
 800a868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a86c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	695a      	ldr	r2, [r3, #20]
 800a874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a878:	441a      	add	r2, r3
 800a87a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a87e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a88a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	6a1a      	ldr	r2, [r3, #32]
 800a892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d90f      	bls.n	800a8c2 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a8a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	6a1a      	ldr	r2, [r3, #32]
 800a8ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b2:	1ad2      	subs	r2, r2, r3
 800a8b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	621a      	str	r2, [r3, #32]
 800a8c0:	e00e      	b.n	800a8e0 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800a8c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	6a1b      	ldr	r3, [r3, #32]
 800a8ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a8d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a8e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	643b      	str	r3, [r7, #64]	; 0x40
 800a8ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	785b      	ldrb	r3, [r3, #1]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d177      	bne.n	800a9ec <USB_EPStartXfer+0x85e>
 800a8fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a900:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	63bb      	str	r3, [r7, #56]	; 0x38
 800a908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a90c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a916:	b29b      	uxth	r3, r3
 800a918:	461a      	mov	r2, r3
 800a91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91c:	4413      	add	r3, r2
 800a91e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	00da      	lsls	r2, r3, #3
 800a92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a930:	4413      	add	r3, r2
 800a932:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a936:	637b      	str	r3, [r7, #52]	; 0x34
 800a938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a93a:	881b      	ldrh	r3, [r3, #0]
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a942:	b29a      	uxth	r2, r3
 800a944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a946:	801a      	strh	r2, [r3, #0]
 800a948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a94c:	2b3e      	cmp	r3, #62	; 0x3e
 800a94e:	d921      	bls.n	800a994 <USB_EPStartXfer+0x806>
 800a950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a954:	095b      	lsrs	r3, r3, #5
 800a956:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a95a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a95e:	f003 031f 	and.w	r3, r3, #31
 800a962:	2b00      	cmp	r3, #0
 800a964:	d104      	bne.n	800a970 <USB_EPStartXfer+0x7e2>
 800a966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a96a:	3b01      	subs	r3, #1
 800a96c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a972:	881b      	ldrh	r3, [r3, #0]
 800a974:	b29a      	uxth	r2, r3
 800a976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	029b      	lsls	r3, r3, #10
 800a97e:	b29b      	uxth	r3, r3
 800a980:	4313      	orrs	r3, r2
 800a982:	b29b      	uxth	r3, r3
 800a984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a98c:	b29a      	uxth	r2, r3
 800a98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a990:	801a      	strh	r2, [r3, #0]
 800a992:	e050      	b.n	800aa36 <USB_EPStartXfer+0x8a8>
 800a994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d10a      	bne.n	800a9b2 <USB_EPStartXfer+0x824>
 800a99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a99e:	881b      	ldrh	r3, [r3, #0]
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ae:	801a      	strh	r2, [r3, #0]
 800a9b0:	e041      	b.n	800aa36 <USB_EPStartXfer+0x8a8>
 800a9b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b6:	085b      	lsrs	r3, r3, #1
 800a9b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a9bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9c0:	f003 0301 	and.w	r3, r3, #1
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d004      	beq.n	800a9d2 <USB_EPStartXfer+0x844>
 800a9c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9d4:	881b      	ldrh	r3, [r3, #0]
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	029b      	lsls	r3, r3, #10
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9e8:	801a      	strh	r2, [r3, #0]
 800a9ea:	e024      	b.n	800aa36 <USB_EPStartXfer+0x8a8>
 800a9ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	785b      	ldrb	r3, [r3, #1]
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d11c      	bne.n	800aa36 <USB_EPStartXfer+0x8a8>
 800a9fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa10:	4413      	add	r3, r2
 800aa12:	643b      	str	r3, [r7, #64]	; 0x40
 800aa14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	00da      	lsls	r2, r3, #3
 800aa22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa24:	4413      	add	r3, r2
 800aa26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa30:	b29a      	uxth	r2, r3
 800aa32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800aa36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	895b      	ldrh	r3, [r3, #10]
 800aa42:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	6959      	ldr	r1, [r3, #20]
 800aa52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aa5c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aa60:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aa64:	6800      	ldr	r0, [r0, #0]
 800aa66:	f001 f87d 	bl	800bb64 <USB_WritePMA>
 800aa6a:	e227      	b.n	800aebc <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800aa6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	6a1b      	ldr	r3, [r3, #32]
 800aa78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800aa7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	4413      	add	r3, r2
 800aa96:	881b      	ldrh	r3, [r3, #0]
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800aa9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaa2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800aaa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	441a      	add	r2, r3
 800aac0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800aac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aacc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aadc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aae8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aaf8:	4413      	add	r3, r2
 800aafa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aafc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	00da      	lsls	r2, r3, #3
 800ab0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab0c:	4413      	add	r3, r2
 800ab0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab12:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab1c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ab1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	891b      	ldrh	r3, [r3, #8]
 800ab2a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	6959      	ldr	r1, [r3, #20]
 800ab3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ab44:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ab48:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ab4c:	6800      	ldr	r0, [r0, #0]
 800ab4e:	f001 f809 	bl	800bb64 <USB_WritePMA>
 800ab52:	e1b3      	b.n	800aebc <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ab54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	6a1a      	ldr	r2, [r3, #32]
 800ab60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab64:	1ad2      	subs	r2, r2, r3
 800ab66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ab72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	4413      	add	r3, r2
 800ab8c:	881b      	ldrh	r3, [r3, #0]
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f000 80c6 	beq.w	800ad26 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	673b      	str	r3, [r7, #112]	; 0x70
 800aba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	785b      	ldrb	r3, [r3, #1]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d177      	bne.n	800aca6 <USB_EPStartXfer+0xb18>
 800abb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	66bb      	str	r3, [r7, #104]	; 0x68
 800abc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	461a      	mov	r2, r3
 800abd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abd6:	4413      	add	r3, r2
 800abd8:	66bb      	str	r3, [r7, #104]	; 0x68
 800abda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	00da      	lsls	r2, r3, #3
 800abe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abea:	4413      	add	r3, r2
 800abec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800abf0:	667b      	str	r3, [r7, #100]	; 0x64
 800abf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abf4:	881b      	ldrh	r3, [r3, #0]
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abfc:	b29a      	uxth	r2, r3
 800abfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac00:	801a      	strh	r2, [r3, #0]
 800ac02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac06:	2b3e      	cmp	r3, #62	; 0x3e
 800ac08:	d921      	bls.n	800ac4e <USB_EPStartXfer+0xac0>
 800ac0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac0e:	095b      	lsrs	r3, r3, #5
 800ac10:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac18:	f003 031f 	and.w	r3, r3, #31
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d104      	bne.n	800ac2a <USB_EPStartXfer+0xa9c>
 800ac20:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac24:	3b01      	subs	r3, #1
 800ac26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac2c:	881b      	ldrh	r3, [r3, #0]
 800ac2e:	b29a      	uxth	r2, r3
 800ac30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	029b      	lsls	r3, r3, #10
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac4a:	801a      	strh	r2, [r3, #0]
 800ac4c:	e050      	b.n	800acf0 <USB_EPStartXfer+0xb62>
 800ac4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d10a      	bne.n	800ac6c <USB_EPStartXfer+0xade>
 800ac56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac58:	881b      	ldrh	r3, [r3, #0]
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac64:	b29a      	uxth	r2, r3
 800ac66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac68:	801a      	strh	r2, [r3, #0]
 800ac6a:	e041      	b.n	800acf0 <USB_EPStartXfer+0xb62>
 800ac6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac70:	085b      	lsrs	r3, r3, #1
 800ac72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac7a:	f003 0301 	and.w	r3, r3, #1
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d004      	beq.n	800ac8c <USB_EPStartXfer+0xafe>
 800ac82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac86:	3301      	adds	r3, #1
 800ac88:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac8e:	881b      	ldrh	r3, [r3, #0]
 800ac90:	b29a      	uxth	r2, r3
 800ac92:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	029b      	lsls	r3, r3, #10
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	b29a      	uxth	r2, r3
 800aca0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aca2:	801a      	strh	r2, [r3, #0]
 800aca4:	e024      	b.n	800acf0 <USB_EPStartXfer+0xb62>
 800aca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	785b      	ldrb	r3, [r3, #1]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d11c      	bne.n	800acf0 <USB_EPStartXfer+0xb62>
 800acb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	461a      	mov	r2, r3
 800acc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acca:	4413      	add	r3, r2
 800accc:	673b      	str	r3, [r7, #112]	; 0x70
 800acce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	00da      	lsls	r2, r3, #3
 800acdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acde:	4413      	add	r3, r2
 800ace0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ace4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ace6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acea:	b29a      	uxth	r2, r3
 800acec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800acf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	895b      	ldrh	r3, [r3, #10]
 800acfc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	6959      	ldr	r1, [r3, #20]
 800ad0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ad16:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ad1a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ad1e:	6800      	ldr	r0, [r0, #0]
 800ad20:	f000 ff20 	bl	800bb64 <USB_WritePMA>
 800ad24:	e0ca      	b.n	800aebc <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	785b      	ldrb	r3, [r3, #1]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d177      	bne.n	800ae26 <USB_EPStartXfer+0xc98>
 800ad36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ad42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	461a      	mov	r2, r3
 800ad54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad56:	4413      	add	r3, r2
 800ad58:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ad5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	00da      	lsls	r2, r3, #3
 800ad68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad6a:	4413      	add	r3, r2
 800ad6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ad70:	67bb      	str	r3, [r7, #120]	; 0x78
 800ad72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad74:	881b      	ldrh	r3, [r3, #0]
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad7c:	b29a      	uxth	r2, r3
 800ad7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad80:	801a      	strh	r2, [r3, #0]
 800ad82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad86:	2b3e      	cmp	r3, #62	; 0x3e
 800ad88:	d921      	bls.n	800adce <USB_EPStartXfer+0xc40>
 800ad8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad8e:	095b      	lsrs	r3, r3, #5
 800ad90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad98:	f003 031f 	and.w	r3, r3, #31
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d104      	bne.n	800adaa <USB_EPStartXfer+0xc1c>
 800ada0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ada4:	3b01      	subs	r3, #1
 800ada6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800adaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adac:	881b      	ldrh	r3, [r3, #0]
 800adae:	b29a      	uxth	r2, r3
 800adb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	029b      	lsls	r3, r3, #10
 800adb8:	b29b      	uxth	r3, r3
 800adba:	4313      	orrs	r3, r2
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adc6:	b29a      	uxth	r2, r3
 800adc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adca:	801a      	strh	r2, [r3, #0]
 800adcc:	e05c      	b.n	800ae88 <USB_EPStartXfer+0xcfa>
 800adce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800add2:	2b00      	cmp	r3, #0
 800add4:	d10a      	bne.n	800adec <USB_EPStartXfer+0xc5e>
 800add6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800add8:	881b      	ldrh	r3, [r3, #0]
 800adda:	b29b      	uxth	r3, r3
 800addc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ade0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ade4:	b29a      	uxth	r2, r3
 800ade6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ade8:	801a      	strh	r2, [r3, #0]
 800adea:	e04d      	b.n	800ae88 <USB_EPStartXfer+0xcfa>
 800adec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf0:	085b      	lsrs	r3, r3, #1
 800adf2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800adf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adfa:	f003 0301 	and.w	r3, r3, #1
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d004      	beq.n	800ae0c <USB_EPStartXfer+0xc7e>
 800ae02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ae06:	3301      	adds	r3, #1
 800ae08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ae0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae0e:	881b      	ldrh	r3, [r3, #0]
 800ae10:	b29a      	uxth	r2, r3
 800ae12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	029b      	lsls	r3, r3, #10
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	b29a      	uxth	r2, r3
 800ae20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae22:	801a      	strh	r2, [r3, #0]
 800ae24:	e030      	b.n	800ae88 <USB_EPStartXfer+0xcfa>
 800ae26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	785b      	ldrb	r3, [r3, #1]
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d128      	bne.n	800ae88 <USB_EPStartXfer+0xcfa>
 800ae36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	461a      	mov	r2, r3
 800ae56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae5a:	4413      	add	r3, r2
 800ae5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	00da      	lsls	r2, r3, #3
 800ae6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae72:	4413      	add	r3, r2
 800ae74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ae78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ae7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae80:	b29a      	uxth	r2, r3
 800ae82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae86:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ae88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	891b      	ldrh	r3, [r3, #8]
 800ae94:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	6959      	ldr	r1, [r3, #20]
 800aea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aeae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aeb2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aeb6:	6800      	ldr	r0, [r0, #0]
 800aeb8:	f000 fe54 	bl	800bb64 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800aebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aec0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4413      	add	r3, r2
 800aed6:	881b      	ldrh	r3, [r3, #0]
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aee2:	817b      	strh	r3, [r7, #10]
 800aee4:	897b      	ldrh	r3, [r7, #10]
 800aee6:	f083 0310 	eor.w	r3, r3, #16
 800aeea:	817b      	strh	r3, [r7, #10]
 800aeec:	897b      	ldrh	r3, [r7, #10]
 800aeee:	f083 0320 	eor.w	r3, r3, #32
 800aef2:	817b      	strh	r3, [r7, #10]
 800aef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aef8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	441a      	add	r2, r3
 800af0e:	897b      	ldrh	r3, [r7, #10]
 800af10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af20:	b29b      	uxth	r3, r3
 800af22:	8013      	strh	r3, [r2, #0]
 800af24:	f000 bcde 	b.w	800b8e4 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800af28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	7b1b      	ldrb	r3, [r3, #12]
 800af34:	2b00      	cmp	r3, #0
 800af36:	f040 80bb 	bne.w	800b0b0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800af3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	699a      	ldr	r2, [r3, #24]
 800af46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	429a      	cmp	r2, r3
 800af54:	d917      	bls.n	800af86 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800af56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	691b      	ldr	r3, [r3, #16]
 800af62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800af66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	699a      	ldr	r2, [r3, #24]
 800af72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af76:	1ad2      	subs	r2, r2, r3
 800af78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	619a      	str	r2, [r3, #24]
 800af84:	e00e      	b.n	800afa4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800af86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	699b      	ldr	r3, [r3, #24]
 800af92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800af96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2200      	movs	r2, #0
 800afa2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800afa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800afb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	461a      	mov	r2, r3
 800afc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800afc8:	4413      	add	r3, r2
 800afca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800afce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	00da      	lsls	r2, r3, #3
 800afdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800afe0:	4413      	add	r3, r2
 800afe2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800afe6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800afea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afee:	881b      	ldrh	r3, [r3, #0]
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aff6:	b29a      	uxth	r2, r3
 800aff8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800affc:	801a      	strh	r2, [r3, #0]
 800affe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b002:	2b3e      	cmp	r3, #62	; 0x3e
 800b004:	d924      	bls.n	800b050 <USB_EPStartXfer+0xec2>
 800b006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b00a:	095b      	lsrs	r3, r3, #5
 800b00c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b010:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b014:	f003 031f 	and.w	r3, r3, #31
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d104      	bne.n	800b026 <USB_EPStartXfer+0xe98>
 800b01c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b020:	3b01      	subs	r3, #1
 800b022:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b02a:	881b      	ldrh	r3, [r3, #0]
 800b02c:	b29a      	uxth	r2, r3
 800b02e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b032:	b29b      	uxth	r3, r3
 800b034:	029b      	lsls	r3, r3, #10
 800b036:	b29b      	uxth	r3, r3
 800b038:	4313      	orrs	r3, r2
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b044:	b29a      	uxth	r2, r3
 800b046:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b04a:	801a      	strh	r2, [r3, #0]
 800b04c:	f000 bc10 	b.w	800b870 <USB_EPStartXfer+0x16e2>
 800b050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10c      	bne.n	800b072 <USB_EPStartXfer+0xee4>
 800b058:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b05c:	881b      	ldrh	r3, [r3, #0]
 800b05e:	b29b      	uxth	r3, r3
 800b060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b068:	b29a      	uxth	r2, r3
 800b06a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b06e:	801a      	strh	r2, [r3, #0]
 800b070:	e3fe      	b.n	800b870 <USB_EPStartXfer+0x16e2>
 800b072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b076:	085b      	lsrs	r3, r3, #1
 800b078:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b080:	f003 0301 	and.w	r3, r3, #1
 800b084:	2b00      	cmp	r3, #0
 800b086:	d004      	beq.n	800b092 <USB_EPStartXfer+0xf04>
 800b088:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b08c:	3301      	adds	r3, #1
 800b08e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b092:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b096:	881b      	ldrh	r3, [r3, #0]
 800b098:	b29a      	uxth	r2, r3
 800b09a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	029b      	lsls	r3, r3, #10
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	b29a      	uxth	r2, r3
 800b0a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0ac:	801a      	strh	r2, [r3, #0]
 800b0ae:	e3df      	b.n	800b870 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b0b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	78db      	ldrb	r3, [r3, #3]
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	f040 8218 	bne.w	800b4f2 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b0c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	785b      	ldrb	r3, [r3, #1]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	f040 809d 	bne.w	800b20e <USB_EPStartXfer+0x1080>
 800b0d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b0e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b0f8:	4413      	add	r3, r2
 800b0fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b0fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	00da      	lsls	r2, r3, #3
 800b10c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b110:	4413      	add	r3, r2
 800b112:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b116:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b11a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b11e:	881b      	ldrh	r3, [r3, #0]
 800b120:	b29b      	uxth	r3, r3
 800b122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b126:	b29a      	uxth	r2, r3
 800b128:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b12c:	801a      	strh	r2, [r3, #0]
 800b12e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	691b      	ldr	r3, [r3, #16]
 800b13a:	2b3e      	cmp	r3, #62	; 0x3e
 800b13c:	d92b      	bls.n	800b196 <USB_EPStartXfer+0x1008>
 800b13e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	095b      	lsrs	r3, r3, #5
 800b14c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	691b      	ldr	r3, [r3, #16]
 800b15c:	f003 031f 	and.w	r3, r3, #31
 800b160:	2b00      	cmp	r3, #0
 800b162:	d104      	bne.n	800b16e <USB_EPStartXfer+0xfe0>
 800b164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b168:	3b01      	subs	r3, #1
 800b16a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b16e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b172:	881b      	ldrh	r3, [r3, #0]
 800b174:	b29a      	uxth	r2, r3
 800b176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	029b      	lsls	r3, r3, #10
 800b17e:	b29b      	uxth	r3, r3
 800b180:	4313      	orrs	r3, r2
 800b182:	b29b      	uxth	r3, r3
 800b184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b18c:	b29a      	uxth	r2, r3
 800b18e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b192:	801a      	strh	r2, [r3, #0]
 800b194:	e070      	b.n	800b278 <USB_EPStartXfer+0x10ea>
 800b196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b19a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d10c      	bne.n	800b1c0 <USB_EPStartXfer+0x1032>
 800b1a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b1aa:	881b      	ldrh	r3, [r3, #0]
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1b6:	b29a      	uxth	r2, r3
 800b1b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b1bc:	801a      	strh	r2, [r3, #0]
 800b1be:	e05b      	b.n	800b278 <USB_EPStartXfer+0x10ea>
 800b1c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	085b      	lsrs	r3, r3, #1
 800b1ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b1d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	f003 0301 	and.w	r3, r3, #1
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d004      	beq.n	800b1f0 <USB_EPStartXfer+0x1062>
 800b1e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b1f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b1f4:	881b      	ldrh	r3, [r3, #0]
 800b1f6:	b29a      	uxth	r2, r3
 800b1f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	029b      	lsls	r3, r3, #10
 800b200:	b29b      	uxth	r3, r3
 800b202:	4313      	orrs	r3, r2
 800b204:	b29a      	uxth	r2, r3
 800b206:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b20a:	801a      	strh	r2, [r3, #0]
 800b20c:	e034      	b.n	800b278 <USB_EPStartXfer+0x10ea>
 800b20e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	785b      	ldrb	r3, [r3, #1]
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d12c      	bne.n	800b278 <USB_EPStartXfer+0x10ea>
 800b21e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b222:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b22c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b230:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	461a      	mov	r2, r3
 800b23e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b242:	4413      	add	r3, r2
 800b244:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b24c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	00da      	lsls	r2, r3, #3
 800b256:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b25a:	4413      	add	r3, r2
 800b25c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	b29a      	uxth	r2, r3
 800b272:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b276:	801a      	strh	r2, [r3, #0]
 800b278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b27c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b28a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	785b      	ldrb	r3, [r3, #1]
 800b292:	2b00      	cmp	r3, #0
 800b294:	f040 809d 	bne.w	800b3d2 <USB_EPStartXfer+0x1244>
 800b298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b29c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b2a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b2bc:	4413      	add	r3, r2
 800b2be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b2c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	00da      	lsls	r2, r3, #3
 800b2d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b2d4:	4413      	add	r3, r2
 800b2d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b2da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b2de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2e2:	881b      	ldrh	r3, [r3, #0]
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2ea:	b29a      	uxth	r2, r3
 800b2ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2f0:	801a      	strh	r2, [r3, #0]
 800b2f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	2b3e      	cmp	r3, #62	; 0x3e
 800b300:	d92b      	bls.n	800b35a <USB_EPStartXfer+0x11cc>
 800b302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	691b      	ldr	r3, [r3, #16]
 800b30e:	095b      	lsrs	r3, r3, #5
 800b310:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	691b      	ldr	r3, [r3, #16]
 800b320:	f003 031f 	and.w	r3, r3, #31
 800b324:	2b00      	cmp	r3, #0
 800b326:	d104      	bne.n	800b332 <USB_EPStartXfer+0x11a4>
 800b328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b32c:	3b01      	subs	r3, #1
 800b32e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b332:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b336:	881b      	ldrh	r3, [r3, #0]
 800b338:	b29a      	uxth	r2, r3
 800b33a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b33e:	b29b      	uxth	r3, r3
 800b340:	029b      	lsls	r3, r3, #10
 800b342:	b29b      	uxth	r3, r3
 800b344:	4313      	orrs	r3, r2
 800b346:	b29b      	uxth	r3, r3
 800b348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b34c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b350:	b29a      	uxth	r2, r3
 800b352:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b356:	801a      	strh	r2, [r3, #0]
 800b358:	e069      	b.n	800b42e <USB_EPStartXfer+0x12a0>
 800b35a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b35e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	691b      	ldr	r3, [r3, #16]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d10c      	bne.n	800b384 <USB_EPStartXfer+0x11f6>
 800b36a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b36e:	881b      	ldrh	r3, [r3, #0]
 800b370:	b29b      	uxth	r3, r3
 800b372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b37a:	b29a      	uxth	r2, r3
 800b37c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b380:	801a      	strh	r2, [r3, #0]
 800b382:	e054      	b.n	800b42e <USB_EPStartXfer+0x12a0>
 800b384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	691b      	ldr	r3, [r3, #16]
 800b390:	085b      	lsrs	r3, r3, #1
 800b392:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b39a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	691b      	ldr	r3, [r3, #16]
 800b3a2:	f003 0301 	and.w	r3, r3, #1
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d004      	beq.n	800b3b4 <USB_EPStartXfer+0x1226>
 800b3aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b3b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3b8:	881b      	ldrh	r3, [r3, #0]
 800b3ba:	b29a      	uxth	r2, r3
 800b3bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	029b      	lsls	r3, r3, #10
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3ce:	801a      	strh	r2, [r3, #0]
 800b3d0:	e02d      	b.n	800b42e <USB_EPStartXfer+0x12a0>
 800b3d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	785b      	ldrb	r3, [r3, #1]
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d125      	bne.n	800b42e <USB_EPStartXfer+0x12a0>
 800b3e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b3f8:	4413      	add	r3, r2
 800b3fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b3fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	00da      	lsls	r2, r3, #3
 800b40c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b410:	4413      	add	r3, r2
 800b412:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b41a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b41e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	691b      	ldr	r3, [r3, #16]
 800b426:	b29a      	uxth	r2, r3
 800b428:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b42c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b42e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	69db      	ldr	r3, [r3, #28]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	f000 8218 	beq.w	800b870 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b444:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b44e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	4413      	add	r3, r2
 800b45a:	881b      	ldrh	r3, [r3, #0]
 800b45c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b460:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d005      	beq.n	800b478 <USB_EPStartXfer+0x12ea>
 800b46c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10d      	bne.n	800b494 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b478:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b47c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b480:	2b00      	cmp	r3, #0
 800b482:	f040 81f5 	bne.w	800b870 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b486:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b48a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b48e:	2b00      	cmp	r3, #0
 800b490:	f040 81ee 	bne.w	800b870 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b498:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	009b      	lsls	r3, r3, #2
 800b4ac:	4413      	add	r3, r2
 800b4ae:	881b      	ldrh	r3, [r3, #0]
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4ba:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b4be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	441a      	add	r2, r3
 800b4d8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b4dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	8013      	strh	r3, [r2, #0]
 800b4f0:	e1be      	b.n	800b870 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b4f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	78db      	ldrb	r3, [r3, #3]
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	f040 81b4 	bne.w	800b86c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	699a      	ldr	r2, [r3, #24]
 800b510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	691b      	ldr	r3, [r3, #16]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d917      	bls.n	800b550 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	691b      	ldr	r3, [r3, #16]
 800b52c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	699a      	ldr	r2, [r3, #24]
 800b53c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b540:	1ad2      	subs	r2, r2, r3
 800b542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	619a      	str	r2, [r3, #24]
 800b54e:	e00e      	b.n	800b56e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	699b      	ldr	r3, [r3, #24]
 800b55c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2200      	movs	r2, #0
 800b56c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	785b      	ldrb	r3, [r3, #1]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	f040 8085 	bne.w	800b68a <USB_EPStartXfer+0x14fc>
 800b580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b584:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b58e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b592:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	461a      	mov	r2, r3
 800b5a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b5a4:	4413      	add	r3, r2
 800b5a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b5aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	00da      	lsls	r2, r3, #3
 800b5b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b5bc:	4413      	add	r3, r2
 800b5be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b5c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b5c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b5ca:	881b      	ldrh	r3, [r3, #0]
 800b5cc:	b29b      	uxth	r3, r3
 800b5ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b5d2:	b29a      	uxth	r2, r3
 800b5d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b5d8:	801a      	strh	r2, [r3, #0]
 800b5da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5de:	2b3e      	cmp	r3, #62	; 0x3e
 800b5e0:	d923      	bls.n	800b62a <USB_EPStartXfer+0x149c>
 800b5e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5e6:	095b      	lsrs	r3, r3, #5
 800b5e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b5ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f0:	f003 031f 	and.w	r3, r3, #31
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d104      	bne.n	800b602 <USB_EPStartXfer+0x1474>
 800b5f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5fc:	3b01      	subs	r3, #1
 800b5fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b602:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b606:	881b      	ldrh	r3, [r3, #0]
 800b608:	b29a      	uxth	r2, r3
 800b60a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b60e:	b29b      	uxth	r3, r3
 800b610:	029b      	lsls	r3, r3, #10
 800b612:	b29b      	uxth	r3, r3
 800b614:	4313      	orrs	r3, r2
 800b616:	b29b      	uxth	r3, r3
 800b618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b61c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b620:	b29a      	uxth	r2, r3
 800b622:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b626:	801a      	strh	r2, [r3, #0]
 800b628:	e060      	b.n	800b6ec <USB_EPStartXfer+0x155e>
 800b62a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d10c      	bne.n	800b64c <USB_EPStartXfer+0x14be>
 800b632:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b636:	881b      	ldrh	r3, [r3, #0]
 800b638:	b29b      	uxth	r3, r3
 800b63a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b63e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b642:	b29a      	uxth	r2, r3
 800b644:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b648:	801a      	strh	r2, [r3, #0]
 800b64a:	e04f      	b.n	800b6ec <USB_EPStartXfer+0x155e>
 800b64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b650:	085b      	lsrs	r3, r3, #1
 800b652:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b65a:	f003 0301 	and.w	r3, r3, #1
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d004      	beq.n	800b66c <USB_EPStartXfer+0x14de>
 800b662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b666:	3301      	adds	r3, #1
 800b668:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b66c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b670:	881b      	ldrh	r3, [r3, #0]
 800b672:	b29a      	uxth	r2, r3
 800b674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b678:	b29b      	uxth	r3, r3
 800b67a:	029b      	lsls	r3, r3, #10
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	4313      	orrs	r3, r2
 800b680:	b29a      	uxth	r2, r3
 800b682:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b686:	801a      	strh	r2, [r3, #0]
 800b688:	e030      	b.n	800b6ec <USB_EPStartXfer+0x155e>
 800b68a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b68e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	785b      	ldrb	r3, [r3, #1]
 800b696:	2b01      	cmp	r3, #1
 800b698:	d128      	bne.n	800b6ec <USB_EPStartXfer+0x155e>
 800b69a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b69e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b6a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6be:	4413      	add	r3, r2
 800b6c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b6c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	00da      	lsls	r2, r3, #3
 800b6d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6d6:	4413      	add	r3, r2
 800b6d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b6dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b6e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e4:	b29a      	uxth	r2, r3
 800b6e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b6ea:	801a      	strh	r2, [r3, #0]
 800b6ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b6fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	785b      	ldrb	r3, [r3, #1]
 800b706:	2b00      	cmp	r3, #0
 800b708:	f040 8085 	bne.w	800b816 <USB_EPStartXfer+0x1688>
 800b70c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b710:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b71a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b71e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b728:	b29b      	uxth	r3, r3
 800b72a:	461a      	mov	r2, r3
 800b72c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b730:	4413      	add	r3, r2
 800b732:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b73a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	00da      	lsls	r2, r3, #3
 800b744:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b748:	4413      	add	r3, r2
 800b74a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b74e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b752:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b756:	881b      	ldrh	r3, [r3, #0]
 800b758:	b29b      	uxth	r3, r3
 800b75a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b75e:	b29a      	uxth	r2, r3
 800b760:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b764:	801a      	strh	r2, [r3, #0]
 800b766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b76a:	2b3e      	cmp	r3, #62	; 0x3e
 800b76c:	d923      	bls.n	800b7b6 <USB_EPStartXfer+0x1628>
 800b76e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b772:	095b      	lsrs	r3, r3, #5
 800b774:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b77c:	f003 031f 	and.w	r3, r3, #31
 800b780:	2b00      	cmp	r3, #0
 800b782:	d104      	bne.n	800b78e <USB_EPStartXfer+0x1600>
 800b784:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b788:	3b01      	subs	r3, #1
 800b78a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b78e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b792:	881b      	ldrh	r3, [r3, #0]
 800b794:	b29a      	uxth	r2, r3
 800b796:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	029b      	lsls	r3, r3, #10
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7ac:	b29a      	uxth	r2, r3
 800b7ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b7b2:	801a      	strh	r2, [r3, #0]
 800b7b4:	e05c      	b.n	800b870 <USB_EPStartXfer+0x16e2>
 800b7b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d10c      	bne.n	800b7d8 <USB_EPStartXfer+0x164a>
 800b7be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b7c2:	881b      	ldrh	r3, [r3, #0]
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7ce:	b29a      	uxth	r2, r3
 800b7d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b7d4:	801a      	strh	r2, [r3, #0]
 800b7d6:	e04b      	b.n	800b870 <USB_EPStartXfer+0x16e2>
 800b7d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7dc:	085b      	lsrs	r3, r3, #1
 800b7de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b7e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7e6:	f003 0301 	and.w	r3, r3, #1
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d004      	beq.n	800b7f8 <USB_EPStartXfer+0x166a>
 800b7ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b7f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b7fc:	881b      	ldrh	r3, [r3, #0]
 800b7fe:	b29a      	uxth	r2, r3
 800b800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b804:	b29b      	uxth	r3, r3
 800b806:	029b      	lsls	r3, r3, #10
 800b808:	b29b      	uxth	r3, r3
 800b80a:	4313      	orrs	r3, r2
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b812:	801a      	strh	r2, [r3, #0]
 800b814:	e02c      	b.n	800b870 <USB_EPStartXfer+0x16e2>
 800b816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b81a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	785b      	ldrb	r3, [r3, #1]
 800b822:	2b01      	cmp	r3, #1
 800b824:	d124      	bne.n	800b870 <USB_EPStartXfer+0x16e2>
 800b826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b82a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b834:	b29b      	uxth	r3, r3
 800b836:	461a      	mov	r2, r3
 800b838:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b83c:	4413      	add	r3, r2
 800b83e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	00da      	lsls	r2, r3, #3
 800b850:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b854:	4413      	add	r3, r2
 800b856:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b85a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b85e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b862:	b29a      	uxth	r2, r3
 800b864:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b868:	801a      	strh	r2, [r3, #0]
 800b86a:	e001      	b.n	800b870 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b86c:	2301      	movs	r3, #1
 800b86e:	e03a      	b.n	800b8e6 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b874:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b87e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	4413      	add	r3, r2
 800b88a:	881b      	ldrh	r3, [r3, #0]
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b896:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b89a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b89e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b8a2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b8a6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b8aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b8ae:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b8b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	009b      	lsls	r3, r3, #2
 800b8ca:	441a      	add	r2, r3
 800b8cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b8d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b8e4:	2300      	movs	r3, #0
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b085      	sub	sp, #20
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	785b      	ldrb	r3, [r3, #1]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d020      	beq.n	800b944 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	4413      	add	r3, r2
 800b90c:	881b      	ldrh	r3, [r3, #0]
 800b90e:	b29b      	uxth	r3, r3
 800b910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b918:	81bb      	strh	r3, [r7, #12]
 800b91a:	89bb      	ldrh	r3, [r7, #12]
 800b91c:	f083 0310 	eor.w	r3, r3, #16
 800b920:	81bb      	strh	r3, [r7, #12]
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	441a      	add	r2, r3
 800b92c:	89bb      	ldrh	r3, [r7, #12]
 800b92e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b93a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b93e:	b29b      	uxth	r3, r3
 800b940:	8013      	strh	r3, [r2, #0]
 800b942:	e01f      	b.n	800b984 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	4413      	add	r3, r2
 800b94e:	881b      	ldrh	r3, [r3, #0]
 800b950:	b29b      	uxth	r3, r3
 800b952:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b95a:	81fb      	strh	r3, [r7, #14]
 800b95c:	89fb      	ldrh	r3, [r7, #14]
 800b95e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b962:	81fb      	strh	r3, [r7, #14]
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	441a      	add	r2, r3
 800b96e:	89fb      	ldrh	r3, [r7, #14]
 800b970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b97c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b980:	b29b      	uxth	r3, r3
 800b982:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	3714      	adds	r7, #20
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr

0800b992 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b992:	b480      	push	{r7}
 800b994:	b087      	sub	sp, #28
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
 800b99a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	7b1b      	ldrb	r3, [r3, #12]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f040 809d 	bne.w	800bae0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	785b      	ldrb	r3, [r3, #1]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d04c      	beq.n	800ba48 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	009b      	lsls	r3, r3, #2
 800b9b6:	4413      	add	r3, r2
 800b9b8:	881b      	ldrh	r3, [r3, #0]
 800b9ba:	823b      	strh	r3, [r7, #16]
 800b9bc:	8a3b      	ldrh	r3, [r7, #16]
 800b9be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d01b      	beq.n	800b9fe <USB_EPClearStall+0x6c>
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	4413      	add	r3, r2
 800b9d0:	881b      	ldrh	r3, [r3, #0]
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9dc:	81fb      	strh	r3, [r7, #14]
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	441a      	add	r2, r3
 800b9e8:	89fb      	ldrh	r3, [r7, #14]
 800b9ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	78db      	ldrb	r3, [r3, #3]
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d06c      	beq.n	800bae0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	4413      	add	r3, r2
 800ba10:	881b      	ldrh	r3, [r3, #0]
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba1c:	81bb      	strh	r3, [r7, #12]
 800ba1e:	89bb      	ldrh	r3, [r7, #12]
 800ba20:	f083 0320 	eor.w	r3, r3, #32
 800ba24:	81bb      	strh	r3, [r7, #12]
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	441a      	add	r2, r3
 800ba30:	89bb      	ldrh	r3, [r7, #12]
 800ba32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	8013      	strh	r3, [r2, #0]
 800ba46:	e04b      	b.n	800bae0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	4413      	add	r3, r2
 800ba52:	881b      	ldrh	r3, [r3, #0]
 800ba54:	82fb      	strh	r3, [r7, #22]
 800ba56:	8afb      	ldrh	r3, [r7, #22]
 800ba58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d01b      	beq.n	800ba98 <USB_EPClearStall+0x106>
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	4413      	add	r3, r2
 800ba6a:	881b      	ldrh	r3, [r3, #0]
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba76:	82bb      	strh	r3, [r7, #20]
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	441a      	add	r2, r3
 800ba82:	8abb      	ldrh	r3, [r7, #20]
 800ba84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ba90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	4413      	add	r3, r2
 800baa2:	881b      	ldrh	r3, [r3, #0]
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800baaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baae:	827b      	strh	r3, [r7, #18]
 800bab0:	8a7b      	ldrh	r3, [r7, #18]
 800bab2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bab6:	827b      	strh	r3, [r7, #18]
 800bab8:	8a7b      	ldrh	r3, [r7, #18]
 800baba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800babe:	827b      	strh	r3, [r7, #18]
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	441a      	add	r2, r3
 800baca:	8a7b      	ldrh	r3, [r7, #18]
 800bacc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800badc:	b29b      	uxth	r3, r3
 800bade:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	371c      	adds	r7, #28
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr

0800baee <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800baee:	b480      	push	{r7}
 800baf0:	b083      	sub	sp, #12
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
 800baf6:	460b      	mov	r3, r1
 800baf8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800bafa:	78fb      	ldrb	r3, [r7, #3]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d103      	bne.n	800bb08 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2280      	movs	r2, #128	; 0x80
 800bb04:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	370c      	adds	r7, #12
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr

0800bb16 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800bb16:	b480      	push	{r7}
 800bb18:	b083      	sub	sp, #12
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb2e:	b29a      	uxth	r2, r3
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800bb36:	2300      	movs	r3, #0
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	370c      	adds	r7, #12
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b085      	sub	sp, #20
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bb56:	68fb      	ldr	r3, [r7, #12]
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3714      	adds	r7, #20
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr

0800bb64 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b08b      	sub	sp, #44	; 0x2c
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	4611      	mov	r1, r2
 800bb70:	461a      	mov	r2, r3
 800bb72:	460b      	mov	r3, r1
 800bb74:	80fb      	strh	r3, [r7, #6]
 800bb76:	4613      	mov	r3, r2
 800bb78:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bb7a:	88bb      	ldrh	r3, [r7, #4]
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	085b      	lsrs	r3, r3, #1
 800bb80:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bb8a:	88fa      	ldrh	r2, [r7, #6]
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	4413      	add	r3, r2
 800bb90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb94:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	627b      	str	r3, [r7, #36]	; 0x24
 800bb9a:	e01b      	b.n	800bbd4 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800bba2:	69fb      	ldr	r3, [r7, #28]
 800bba4:	3301      	adds	r3, #1
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	021b      	lsls	r3, r3, #8
 800bbaa:	b21a      	sxth	r2, r3
 800bbac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	b21b      	sxth	r3, r3
 800bbb4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800bbb6:	6a3b      	ldr	r3, [r7, #32]
 800bbb8:	8a7a      	ldrh	r2, [r7, #18]
 800bbba:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bbbc:	6a3b      	ldr	r3, [r7, #32]
 800bbbe:	3302      	adds	r3, #2
 800bbc0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800bbc2:	69fb      	ldr	r3, [r7, #28]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd0:	3b01      	subs	r3, #1
 800bbd2:	627b      	str	r3, [r7, #36]	; 0x24
 800bbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d1e0      	bne.n	800bb9c <USB_WritePMA+0x38>
  }
}
 800bbda:	bf00      	nop
 800bbdc:	bf00      	nop
 800bbde:	372c      	adds	r7, #44	; 0x2c
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b08b      	sub	sp, #44	; 0x2c
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	60f8      	str	r0, [r7, #12]
 800bbf0:	60b9      	str	r1, [r7, #8]
 800bbf2:	4611      	mov	r1, r2
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	80fb      	strh	r3, [r7, #6]
 800bbfa:	4613      	mov	r3, r2
 800bbfc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bbfe:	88bb      	ldrh	r3, [r7, #4]
 800bc00:	085b      	lsrs	r3, r3, #1
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bc0e:	88fa      	ldrh	r2, [r7, #6]
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	4413      	add	r3, r2
 800bc14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc18:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	627b      	str	r3, [r7, #36]	; 0x24
 800bc1e:	e018      	b.n	800bc52 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800bc20:	6a3b      	ldr	r3, [r7, #32]
 800bc22:	881b      	ldrh	r3, [r3, #0]
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bc28:	6a3b      	ldr	r3, [r7, #32]
 800bc2a:	3302      	adds	r3, #2
 800bc2c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	b2da      	uxtb	r2, r3
 800bc32:	69fb      	ldr	r3, [r7, #28]
 800bc34:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bc36:	69fb      	ldr	r3, [r7, #28]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	0a1b      	lsrs	r3, r3, #8
 800bc40:	b2da      	uxtb	r2, r3
 800bc42:	69fb      	ldr	r3, [r7, #28]
 800bc44:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bc46:	69fb      	ldr	r3, [r7, #28]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4e:	3b01      	subs	r3, #1
 800bc50:	627b      	str	r3, [r7, #36]	; 0x24
 800bc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d1e3      	bne.n	800bc20 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bc58:	88bb      	ldrh	r3, [r7, #4]
 800bc5a:	f003 0301 	and.w	r3, r3, #1
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d007      	beq.n	800bc74 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800bc64:	6a3b      	ldr	r3, [r7, #32]
 800bc66:	881b      	ldrh	r3, [r3, #0]
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	b2da      	uxtb	r2, r3
 800bc70:	69fb      	ldr	r3, [r7, #28]
 800bc72:	701a      	strb	r2, [r3, #0]
  }
}
 800bc74:	bf00      	nop
 800bc76:	372c      	adds	r7, #44	; 0x2c
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	460b      	mov	r3, r1
 800bc8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bc8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bc90:	f002 f91e 	bl	800ded0 <USBD_static_malloc>
 800bc94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d105      	bne.n	800bca8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bca4:	2302      	movs	r3, #2
 800bca6:	e066      	b.n	800bd76 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	68fa      	ldr	r2, [r7, #12]
 800bcac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	7c1b      	ldrb	r3, [r3, #16]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d119      	bne.n	800bcec <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bcb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bcbc:	2202      	movs	r2, #2
 800bcbe:	2181      	movs	r1, #129	; 0x81
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f001 ffac 	bl	800dc1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2201      	movs	r2, #1
 800bcca:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bcd0:	2202      	movs	r2, #2
 800bcd2:	2101      	movs	r1, #1
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f001 ffa2 	bl	800dc1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2201      	movs	r2, #1
 800bcde:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2210      	movs	r2, #16
 800bce6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bcea:	e016      	b.n	800bd1a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bcec:	2340      	movs	r3, #64	; 0x40
 800bcee:	2202      	movs	r2, #2
 800bcf0:	2181      	movs	r1, #129	; 0x81
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f001 ff93 	bl	800dc1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bcfe:	2340      	movs	r3, #64	; 0x40
 800bd00:	2202      	movs	r2, #2
 800bd02:	2101      	movs	r1, #1
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f001 ff8a 	bl	800dc1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2210      	movs	r2, #16
 800bd16:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bd1a:	2308      	movs	r3, #8
 800bd1c:	2203      	movs	r2, #3
 800bd1e:	2182      	movs	r1, #130	; 0x82
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f001 ff7c 	bl	800dc1e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2201      	movs	r2, #1
 800bd2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2200      	movs	r2, #0
 800bd44:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	7c1b      	ldrb	r3, [r3, #16]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d109      	bne.n	800bd64 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd56:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd5a:	2101      	movs	r1, #1
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f002 f84d 	bl	800ddfc <USBD_LL_PrepareReceive>
 800bd62:	e007      	b.n	800bd74 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd6a:	2340      	movs	r3, #64	; 0x40
 800bd6c:	2101      	movs	r1, #1
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f002 f844 	bl	800ddfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bd74:	2300      	movs	r3, #0
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3710      	adds	r7, #16
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}

0800bd7e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b082      	sub	sp, #8
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
 800bd86:	460b      	mov	r3, r1
 800bd88:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bd8a:	2181      	movs	r1, #129	; 0x81
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f001 ff6c 	bl	800dc6a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2200      	movs	r2, #0
 800bd96:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bd98:	2101      	movs	r1, #1
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f001 ff65 	bl	800dc6a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bda8:	2182      	movs	r1, #130	; 0x82
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f001 ff5d 	bl	800dc6a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00e      	beq.n	800bde8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdda:	4618      	mov	r0, r3
 800bddc:	f002 f886 	bl	800deec <USBD_static_free>
    pdev->pClassData = NULL;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bde8:	2300      	movs	r3, #0
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3708      	adds	r7, #8
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
	...

0800bdf4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b086      	sub	sp, #24
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be04:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800be06:	2300      	movs	r3, #0
 800be08:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800be0a:	2300      	movs	r3, #0
 800be0c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800be0e:	2300      	movs	r3, #0
 800be10:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d101      	bne.n	800be1c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800be18:	2303      	movs	r3, #3
 800be1a:	e0af      	b.n	800bf7c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be24:	2b00      	cmp	r3, #0
 800be26:	d03f      	beq.n	800bea8 <USBD_CDC_Setup+0xb4>
 800be28:	2b20      	cmp	r3, #32
 800be2a:	f040 809f 	bne.w	800bf6c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	88db      	ldrh	r3, [r3, #6]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d02e      	beq.n	800be94 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	b25b      	sxtb	r3, r3
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	da16      	bge.n	800be6e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be46:	689b      	ldr	r3, [r3, #8]
 800be48:	683a      	ldr	r2, [r7, #0]
 800be4a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800be4c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800be4e:	683a      	ldr	r2, [r7, #0]
 800be50:	88d2      	ldrh	r2, [r2, #6]
 800be52:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	88db      	ldrh	r3, [r3, #6]
 800be58:	2b07      	cmp	r3, #7
 800be5a:	bf28      	it	cs
 800be5c:	2307      	movcs	r3, #7
 800be5e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	89fa      	ldrh	r2, [r7, #14]
 800be64:	4619      	mov	r1, r3
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f001 facf 	bl	800d40a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800be6c:	e085      	b.n	800bf7a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	785a      	ldrb	r2, [r3, #1]
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	88db      	ldrh	r3, [r3, #6]
 800be7c:	b2da      	uxtb	r2, r3
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800be84:	6939      	ldr	r1, [r7, #16]
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	88db      	ldrh	r3, [r3, #6]
 800be8a:	461a      	mov	r2, r3
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f001 fae8 	bl	800d462 <USBD_CtlPrepareRx>
      break;
 800be92:	e072      	b.n	800bf7a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be9a:	689b      	ldr	r3, [r3, #8]
 800be9c:	683a      	ldr	r2, [r7, #0]
 800be9e:	7850      	ldrb	r0, [r2, #1]
 800bea0:	2200      	movs	r2, #0
 800bea2:	6839      	ldr	r1, [r7, #0]
 800bea4:	4798      	blx	r3
      break;
 800bea6:	e068      	b.n	800bf7a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	785b      	ldrb	r3, [r3, #1]
 800beac:	2b0b      	cmp	r3, #11
 800beae:	d852      	bhi.n	800bf56 <USBD_CDC_Setup+0x162>
 800beb0:	a201      	add	r2, pc, #4	; (adr r2, 800beb8 <USBD_CDC_Setup+0xc4>)
 800beb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beb6:	bf00      	nop
 800beb8:	0800bee9 	.word	0x0800bee9
 800bebc:	0800bf65 	.word	0x0800bf65
 800bec0:	0800bf57 	.word	0x0800bf57
 800bec4:	0800bf57 	.word	0x0800bf57
 800bec8:	0800bf57 	.word	0x0800bf57
 800becc:	0800bf57 	.word	0x0800bf57
 800bed0:	0800bf57 	.word	0x0800bf57
 800bed4:	0800bf57 	.word	0x0800bf57
 800bed8:	0800bf57 	.word	0x0800bf57
 800bedc:	0800bf57 	.word	0x0800bf57
 800bee0:	0800bf13 	.word	0x0800bf13
 800bee4:	0800bf3d 	.word	0x0800bf3d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	2b03      	cmp	r3, #3
 800bef2:	d107      	bne.n	800bf04 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bef4:	f107 030a 	add.w	r3, r7, #10
 800bef8:	2202      	movs	r2, #2
 800befa:	4619      	mov	r1, r3
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f001 fa84 	bl	800d40a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bf02:	e032      	b.n	800bf6a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bf04:	6839      	ldr	r1, [r7, #0]
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f001 fa0e 	bl	800d328 <USBD_CtlError>
            ret = USBD_FAIL;
 800bf0c:	2303      	movs	r3, #3
 800bf0e:	75fb      	strb	r3, [r7, #23]
          break;
 800bf10:	e02b      	b.n	800bf6a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf18:	b2db      	uxtb	r3, r3
 800bf1a:	2b03      	cmp	r3, #3
 800bf1c:	d107      	bne.n	800bf2e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bf1e:	f107 030d 	add.w	r3, r7, #13
 800bf22:	2201      	movs	r2, #1
 800bf24:	4619      	mov	r1, r3
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f001 fa6f 	bl	800d40a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bf2c:	e01d      	b.n	800bf6a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bf2e:	6839      	ldr	r1, [r7, #0]
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f001 f9f9 	bl	800d328 <USBD_CtlError>
            ret = USBD_FAIL;
 800bf36:	2303      	movs	r3, #3
 800bf38:	75fb      	strb	r3, [r7, #23]
          break;
 800bf3a:	e016      	b.n	800bf6a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	2b03      	cmp	r3, #3
 800bf46:	d00f      	beq.n	800bf68 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800bf48:	6839      	ldr	r1, [r7, #0]
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f001 f9ec 	bl	800d328 <USBD_CtlError>
            ret = USBD_FAIL;
 800bf50:	2303      	movs	r3, #3
 800bf52:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bf54:	e008      	b.n	800bf68 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bf56:	6839      	ldr	r1, [r7, #0]
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f001 f9e5 	bl	800d328 <USBD_CtlError>
          ret = USBD_FAIL;
 800bf5e:	2303      	movs	r3, #3
 800bf60:	75fb      	strb	r3, [r7, #23]
          break;
 800bf62:	e002      	b.n	800bf6a <USBD_CDC_Setup+0x176>
          break;
 800bf64:	bf00      	nop
 800bf66:	e008      	b.n	800bf7a <USBD_CDC_Setup+0x186>
          break;
 800bf68:	bf00      	nop
      }
      break;
 800bf6a:	e006      	b.n	800bf7a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800bf6c:	6839      	ldr	r1, [r7, #0]
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f001 f9da 	bl	800d328 <USBD_CtlError>
      ret = USBD_FAIL;
 800bf74:	2303      	movs	r3, #3
 800bf76:	75fb      	strb	r3, [r7, #23]
      break;
 800bf78:	bf00      	nop
  }

  return (uint8_t)ret;
 800bf7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3718      	adds	r7, #24
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d101      	bne.n	800bfa6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bfa2:	2303      	movs	r3, #3
 800bfa4:	e04f      	b.n	800c046 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bfae:	78fa      	ldrb	r2, [r7, #3]
 800bfb0:	6879      	ldr	r1, [r7, #4]
 800bfb2:	4613      	mov	r3, r2
 800bfb4:	009b      	lsls	r3, r3, #2
 800bfb6:	4413      	add	r3, r2
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	440b      	add	r3, r1
 800bfbc:	3318      	adds	r3, #24
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d029      	beq.n	800c018 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bfc4:	78fa      	ldrb	r2, [r7, #3]
 800bfc6:	6879      	ldr	r1, [r7, #4]
 800bfc8:	4613      	mov	r3, r2
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	4413      	add	r3, r2
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	440b      	add	r3, r1
 800bfd2:	3318      	adds	r3, #24
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	78f9      	ldrb	r1, [r7, #3]
 800bfd8:	68f8      	ldr	r0, [r7, #12]
 800bfda:	460b      	mov	r3, r1
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	440b      	add	r3, r1
 800bfe0:	00db      	lsls	r3, r3, #3
 800bfe2:	4403      	add	r3, r0
 800bfe4:	3320      	adds	r3, #32
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	fbb2 f1f3 	udiv	r1, r2, r3
 800bfec:	fb01 f303 	mul.w	r3, r1, r3
 800bff0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d110      	bne.n	800c018 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bff6:	78fa      	ldrb	r2, [r7, #3]
 800bff8:	6879      	ldr	r1, [r7, #4]
 800bffa:	4613      	mov	r3, r2
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	4413      	add	r3, r2
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	440b      	add	r3, r1
 800c004:	3318      	adds	r3, #24
 800c006:	2200      	movs	r2, #0
 800c008:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c00a:	78f9      	ldrb	r1, [r7, #3]
 800c00c:	2300      	movs	r3, #0
 800c00e:	2200      	movs	r2, #0
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f001 fed2 	bl	800ddba <USBD_LL_Transmit>
 800c016:	e015      	b.n	800c044 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	2200      	movs	r2, #0
 800c01c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c026:	691b      	ldr	r3, [r3, #16]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d00b      	beq.n	800c044 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c032:	691b      	ldr	r3, [r3, #16]
 800c034:	68ba      	ldr	r2, [r7, #8]
 800c036:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c03a:	68ba      	ldr	r2, [r7, #8]
 800c03c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c040:	78fa      	ldrb	r2, [r7, #3]
 800c042:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c044:	2300      	movs	r3, #0
}
 800c046:	4618      	mov	r0, r3
 800c048:	3710      	adds	r7, #16
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b084      	sub	sp, #16
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	460b      	mov	r3, r1
 800c058:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c060:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d101      	bne.n	800c070 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c06c:	2303      	movs	r3, #3
 800c06e:	e015      	b.n	800c09c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c070:	78fb      	ldrb	r3, [r7, #3]
 800c072:	4619      	mov	r1, r3
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f001 fee2 	bl	800de3e <USBD_LL_GetRxDataSize>
 800c07a:	4602      	mov	r2, r0
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c088:	68db      	ldr	r3, [r3, #12]
 800c08a:	68fa      	ldr	r2, [r7, #12]
 800c08c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c090:	68fa      	ldr	r2, [r7, #12]
 800c092:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c096:	4611      	mov	r1, r2
 800c098:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3710      	adds	r7, #16
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b084      	sub	sp, #16
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d101      	bne.n	800c0be <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c0ba:	2303      	movs	r3, #3
 800c0bc:	e01b      	b.n	800c0f6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d015      	beq.n	800c0f4 <USBD_CDC_EP0_RxReady+0x50>
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c0ce:	2bff      	cmp	r3, #255	; 0xff
 800c0d0:	d010      	beq.n	800c0f4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0d8:	689b      	ldr	r3, [r3, #8]
 800c0da:	68fa      	ldr	r2, [r7, #12]
 800c0dc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c0e0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c0e2:	68fa      	ldr	r2, [r7, #12]
 800c0e4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c0e8:	b292      	uxth	r2, r2
 800c0ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	22ff      	movs	r2, #255	; 0xff
 800c0f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c0f4:	2300      	movs	r3, #0
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3710      	adds	r7, #16
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
	...

0800c100 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c100:	b480      	push	{r7}
 800c102:	b083      	sub	sp, #12
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2243      	movs	r2, #67	; 0x43
 800c10c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c10e:	4b03      	ldr	r3, [pc, #12]	; (800c11c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c110:	4618      	mov	r0, r3
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr
 800c11c:	200000a0 	.word	0x200000a0

0800c120 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2243      	movs	r2, #67	; 0x43
 800c12c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c12e:	4b03      	ldr	r3, [pc, #12]	; (800c13c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c130:	4618      	mov	r0, r3
 800c132:	370c      	adds	r7, #12
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr
 800c13c:	2000005c 	.word	0x2000005c

0800c140 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2243      	movs	r2, #67	; 0x43
 800c14c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c14e:	4b03      	ldr	r3, [pc, #12]	; (800c15c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c150:	4618      	mov	r0, r3
 800c152:	370c      	adds	r7, #12
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr
 800c15c:	200000e4 	.word	0x200000e4

0800c160 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c160:	b480      	push	{r7}
 800c162:	b083      	sub	sp, #12
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	220a      	movs	r2, #10
 800c16c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c16e:	4b03      	ldr	r3, [pc, #12]	; (800c17c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c170:	4618      	mov	r0, r3
 800c172:	370c      	adds	r7, #12
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr
 800c17c:	20000018 	.word	0x20000018

0800c180 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c180:	b480      	push	{r7}
 800c182:	b083      	sub	sp, #12
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d101      	bne.n	800c194 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c190:	2303      	movs	r3, #3
 800c192:	e004      	b.n	800c19e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	683a      	ldr	r2, [r7, #0]
 800c198:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c19c:	2300      	movs	r3, #0
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	370c      	adds	r7, #12
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr

0800c1aa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c1aa:	b480      	push	{r7}
 800c1ac:	b087      	sub	sp, #28
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	60f8      	str	r0, [r7, #12]
 800c1b2:	60b9      	str	r1, [r7, #8]
 800c1b4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1bc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d101      	bne.n	800c1c8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c1c4:	2303      	movs	r3, #3
 800c1c6:	e008      	b.n	800c1da <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	68ba      	ldr	r2, [r7, #8]
 800c1cc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c1d8:	2300      	movs	r3, #0
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	371c      	adds	r7, #28
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr

0800c1e6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c1e6:	b480      	push	{r7}
 800c1e8:	b085      	sub	sp, #20
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
 800c1ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d101      	bne.n	800c202 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c1fe:	2303      	movs	r3, #3
 800c200:	e004      	b.n	800c20c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	683a      	ldr	r2, [r7, #0]
 800c206:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c20a:	2300      	movs	r3, #0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3714      	adds	r7, #20
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	4770      	bx	lr

0800c218 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c226:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c228:	2301      	movs	r3, #1
 800c22a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c232:	2b00      	cmp	r3, #0
 800c234:	d101      	bne.n	800c23a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c236:	2303      	movs	r3, #3
 800c238:	e01a      	b.n	800c270 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c240:	2b00      	cmp	r3, #0
 800c242:	d114      	bne.n	800c26e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	2201      	movs	r2, #1
 800c248:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c262:	2181      	movs	r1, #129	; 0x81
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f001 fda8 	bl	800ddba <USBD_LL_Transmit>

    ret = USBD_OK;
 800c26a:	2300      	movs	r3, #0
 800c26c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c270:	4618      	mov	r0, r3
 800c272:	3710      	adds	r7, #16
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c286:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d101      	bne.n	800c296 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c292:	2303      	movs	r3, #3
 800c294:	e016      	b.n	800c2c4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	7c1b      	ldrb	r3, [r3, #16]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d109      	bne.n	800c2b2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c2a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2a8:	2101      	movs	r1, #1
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f001 fda6 	bl	800ddfc <USBD_LL_PrepareReceive>
 800c2b0:	e007      	b.n	800c2c2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c2b8:	2340      	movs	r3, #64	; 0x40
 800c2ba:	2101      	movs	r1, #1
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f001 fd9d 	bl	800ddfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c2c2:	2300      	movs	r3, #0
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3710      	adds	r7, #16
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b086      	sub	sp, #24
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	60b9      	str	r1, [r7, #8]
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d101      	bne.n	800c2e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c2e0:	2303      	movs	r3, #3
 800c2e2:	e01f      	b.n	800c324 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d003      	beq.n	800c30a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	68ba      	ldr	r2, [r7, #8]
 800c306:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2201      	movs	r2, #1
 800c30e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	79fa      	ldrb	r2, [r7, #7]
 800c316:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c318:	68f8      	ldr	r0, [r7, #12]
 800c31a:	f001 fc05 	bl	800db28 <USBD_LL_Init>
 800c31e:	4603      	mov	r3, r0
 800c320:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c322:	7dfb      	ldrb	r3, [r7, #23]
}
 800c324:	4618      	mov	r0, r3
 800c326:	3718      	adds	r7, #24
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b084      	sub	sp, #16
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c336:	2300      	movs	r3, #0
 800c338:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d101      	bne.n	800c344 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c340:	2303      	movs	r3, #3
 800c342:	e016      	b.n	800c372 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	683a      	ldr	r2, [r7, #0]
 800c348:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c354:	2b00      	cmp	r3, #0
 800c356:	d00b      	beq.n	800c370 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c360:	f107 020e 	add.w	r2, r7, #14
 800c364:	4610      	mov	r0, r2
 800c366:	4798      	blx	r3
 800c368:	4602      	mov	r2, r0
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c370:	2300      	movs	r3, #0
}
 800c372:	4618      	mov	r0, r3
 800c374:	3710      	adds	r7, #16
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b082      	sub	sp, #8
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f001 fc30 	bl	800dbe8 <USBD_LL_Start>
 800c388:	4603      	mov	r3, r0
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3708      	adds	r7, #8
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c392:	b480      	push	{r7}
 800c394:	b083      	sub	sp, #12
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c39a:	2300      	movs	r3, #0
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c3b4:	2303      	movs	r3, #3
 800c3b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d009      	beq.n	800c3d6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	78fa      	ldrb	r2, [r7, #3]
 800c3cc:	4611      	mov	r1, r2
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	4798      	blx	r3
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d007      	beq.n	800c406 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	78fa      	ldrb	r2, [r7, #3]
 800c400:	4611      	mov	r1, r2
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	4798      	blx	r3
  }

  return USBD_OK;
 800c406:	2300      	movs	r3, #0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3708      	adds	r7, #8
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c420:	6839      	ldr	r1, [r7, #0]
 800c422:	4618      	mov	r0, r3
 800c424:	f000 ff46 	bl	800d2b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2201      	movs	r2, #1
 800c42c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c436:	461a      	mov	r2, r3
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c444:	f003 031f 	and.w	r3, r3, #31
 800c448:	2b02      	cmp	r3, #2
 800c44a:	d01a      	beq.n	800c482 <USBD_LL_SetupStage+0x72>
 800c44c:	2b02      	cmp	r3, #2
 800c44e:	d822      	bhi.n	800c496 <USBD_LL_SetupStage+0x86>
 800c450:	2b00      	cmp	r3, #0
 800c452:	d002      	beq.n	800c45a <USBD_LL_SetupStage+0x4a>
 800c454:	2b01      	cmp	r3, #1
 800c456:	d00a      	beq.n	800c46e <USBD_LL_SetupStage+0x5e>
 800c458:	e01d      	b.n	800c496 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c460:	4619      	mov	r1, r3
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f000 f9ee 	bl	800c844 <USBD_StdDevReq>
 800c468:	4603      	mov	r3, r0
 800c46a:	73fb      	strb	r3, [r7, #15]
      break;
 800c46c:	e020      	b.n	800c4b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c474:	4619      	mov	r1, r3
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 fa52 	bl	800c920 <USBD_StdItfReq>
 800c47c:	4603      	mov	r3, r0
 800c47e:	73fb      	strb	r3, [r7, #15]
      break;
 800c480:	e016      	b.n	800c4b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c488:	4619      	mov	r1, r3
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f000 fa91 	bl	800c9b2 <USBD_StdEPReq>
 800c490:	4603      	mov	r3, r0
 800c492:	73fb      	strb	r3, [r7, #15]
      break;
 800c494:	e00c      	b.n	800c4b0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c49c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c4a0:	b2db      	uxtb	r3, r3
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f001 fbff 	bl	800dca8 <USBD_LL_StallEP>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	73fb      	strb	r3, [r7, #15]
      break;
 800c4ae:	bf00      	nop
  }

  return ret;
 800c4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3710      	adds	r7, #16
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b086      	sub	sp, #24
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	60f8      	str	r0, [r7, #12]
 800c4c2:	460b      	mov	r3, r1
 800c4c4:	607a      	str	r2, [r7, #4]
 800c4c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c4c8:	7afb      	ldrb	r3, [r7, #11]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d138      	bne.n	800c540 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c4d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c4dc:	2b03      	cmp	r3, #3
 800c4de:	d14a      	bne.n	800c576 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	689a      	ldr	r2, [r3, #8]
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	68db      	ldr	r3, [r3, #12]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d913      	bls.n	800c514 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	689a      	ldr	r2, [r3, #8]
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	1ad2      	subs	r2, r2, r3
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	68da      	ldr	r2, [r3, #12]
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	689b      	ldr	r3, [r3, #8]
 800c502:	4293      	cmp	r3, r2
 800c504:	bf28      	it	cs
 800c506:	4613      	movcs	r3, r2
 800c508:	461a      	mov	r2, r3
 800c50a:	6879      	ldr	r1, [r7, #4]
 800c50c:	68f8      	ldr	r0, [r7, #12]
 800c50e:	f000 ffc5 	bl	800d49c <USBD_CtlContinueRx>
 800c512:	e030      	b.n	800c576 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c51a:	b2db      	uxtb	r3, r3
 800c51c:	2b03      	cmp	r3, #3
 800c51e:	d10b      	bne.n	800c538 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c526:	691b      	ldr	r3, [r3, #16]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d005      	beq.n	800c538 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c532:	691b      	ldr	r3, [r3, #16]
 800c534:	68f8      	ldr	r0, [r7, #12]
 800c536:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c538:	68f8      	ldr	r0, [r7, #12]
 800c53a:	f000 ffc0 	bl	800d4be <USBD_CtlSendStatus>
 800c53e:	e01a      	b.n	800c576 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c546:	b2db      	uxtb	r3, r3
 800c548:	2b03      	cmp	r3, #3
 800c54a:	d114      	bne.n	800c576 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c552:	699b      	ldr	r3, [r3, #24]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d00e      	beq.n	800c576 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c55e:	699b      	ldr	r3, [r3, #24]
 800c560:	7afa      	ldrb	r2, [r7, #11]
 800c562:	4611      	mov	r1, r2
 800c564:	68f8      	ldr	r0, [r7, #12]
 800c566:	4798      	blx	r3
 800c568:	4603      	mov	r3, r0
 800c56a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c56c:	7dfb      	ldrb	r3, [r7, #23]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d001      	beq.n	800c576 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c572:	7dfb      	ldrb	r3, [r7, #23]
 800c574:	e000      	b.n	800c578 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c576:	2300      	movs	r3, #0
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3718      	adds	r7, #24
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b086      	sub	sp, #24
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	460b      	mov	r3, r1
 800c58a:	607a      	str	r2, [r7, #4]
 800c58c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c58e:	7afb      	ldrb	r3, [r7, #11]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d16b      	bne.n	800c66c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	3314      	adds	r3, #20
 800c598:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c5a0:	2b02      	cmp	r3, #2
 800c5a2:	d156      	bne.n	800c652 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	689a      	ldr	r2, [r3, #8]
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	68db      	ldr	r3, [r3, #12]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d914      	bls.n	800c5da <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	689a      	ldr	r2, [r3, #8]
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	1ad2      	subs	r2, r2, r3
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	689b      	ldr	r3, [r3, #8]
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	6879      	ldr	r1, [r7, #4]
 800c5c6:	68f8      	ldr	r0, [r7, #12]
 800c5c8:	f000 ff3a 	bl	800d440 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	2100      	movs	r1, #0
 800c5d2:	68f8      	ldr	r0, [r7, #12]
 800c5d4:	f001 fc12 	bl	800ddfc <USBD_LL_PrepareReceive>
 800c5d8:	e03b      	b.n	800c652 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	68da      	ldr	r2, [r3, #12]
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	689b      	ldr	r3, [r3, #8]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d11c      	bne.n	800c620 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	685a      	ldr	r2, [r3, #4]
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d316      	bcc.n	800c620 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	685a      	ldr	r2, [r3, #4]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d20f      	bcs.n	800c620 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c600:	2200      	movs	r2, #0
 800c602:	2100      	movs	r1, #0
 800c604:	68f8      	ldr	r0, [r7, #12]
 800c606:	f000 ff1b 	bl	800d440 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	2200      	movs	r2, #0
 800c60e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c612:	2300      	movs	r3, #0
 800c614:	2200      	movs	r2, #0
 800c616:	2100      	movs	r1, #0
 800c618:	68f8      	ldr	r0, [r7, #12]
 800c61a:	f001 fbef 	bl	800ddfc <USBD_LL_PrepareReceive>
 800c61e:	e018      	b.n	800c652 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c626:	b2db      	uxtb	r3, r3
 800c628:	2b03      	cmp	r3, #3
 800c62a:	d10b      	bne.n	800c644 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c632:	68db      	ldr	r3, [r3, #12]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d005      	beq.n	800c644 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c63e:	68db      	ldr	r3, [r3, #12]
 800c640:	68f8      	ldr	r0, [r7, #12]
 800c642:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c644:	2180      	movs	r1, #128	; 0x80
 800c646:	68f8      	ldr	r0, [r7, #12]
 800c648:	f001 fb2e 	bl	800dca8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c64c:	68f8      	ldr	r0, [r7, #12]
 800c64e:	f000 ff49 	bl	800d4e4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d122      	bne.n	800c6a2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c65c:	68f8      	ldr	r0, [r7, #12]
 800c65e:	f7ff fe98 	bl	800c392 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2200      	movs	r2, #0
 800c666:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c66a:	e01a      	b.n	800c6a2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c672:	b2db      	uxtb	r3, r3
 800c674:	2b03      	cmp	r3, #3
 800c676:	d114      	bne.n	800c6a2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c67e:	695b      	ldr	r3, [r3, #20]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d00e      	beq.n	800c6a2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c68a:	695b      	ldr	r3, [r3, #20]
 800c68c:	7afa      	ldrb	r2, [r7, #11]
 800c68e:	4611      	mov	r1, r2
 800c690:	68f8      	ldr	r0, [r7, #12]
 800c692:	4798      	blx	r3
 800c694:	4603      	mov	r3, r0
 800c696:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c698:	7dfb      	ldrb	r3, [r7, #23]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d001      	beq.n	800c6a2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c69e:	7dfb      	ldrb	r3, [r7, #23]
 800c6a0:	e000      	b.n	800c6a4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c6a2:	2300      	movs	r3, #0
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3718      	adds	r7, #24
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d101      	bne.n	800c6e0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c6dc:	2303      	movs	r3, #3
 800c6de:	e02f      	b.n	800c740 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00f      	beq.n	800c70a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d009      	beq.n	800c70a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	6852      	ldr	r2, [r2, #4]
 800c702:	b2d2      	uxtb	r2, r2
 800c704:	4611      	mov	r1, r2
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c70a:	2340      	movs	r3, #64	; 0x40
 800c70c:	2200      	movs	r2, #0
 800c70e:	2100      	movs	r1, #0
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f001 fa84 	bl	800dc1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2201      	movs	r2, #1
 800c71a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2240      	movs	r2, #64	; 0x40
 800c722:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c726:	2340      	movs	r3, #64	; 0x40
 800c728:	2200      	movs	r2, #0
 800c72a:	2180      	movs	r1, #128	; 0x80
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f001 fa76 	bl	800dc1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2201      	movs	r2, #1
 800c736:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2240      	movs	r2, #64	; 0x40
 800c73c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c73e:	2300      	movs	r3, #0
}
 800c740:	4618      	mov	r0, r3
 800c742:	3708      	adds	r7, #8
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}

0800c748 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c748:	b480      	push	{r7}
 800c74a:	b083      	sub	sp, #12
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	460b      	mov	r3, r1
 800c752:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	78fa      	ldrb	r2, [r7, #3]
 800c758:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c75a:	2300      	movs	r3, #0
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	370c      	adds	r7, #12
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr

0800c768 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c768:	b480      	push	{r7}
 800c76a:	b083      	sub	sp, #12
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c776:	b2da      	uxtb	r2, r3
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2204      	movs	r2, #4
 800c782:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c786:	2300      	movs	r3, #0
}
 800c788:	4618      	mov	r0, r3
 800c78a:	370c      	adds	r7, #12
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	2b04      	cmp	r3, #4
 800c7a6:	d106      	bne.n	800c7b6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c7ae:	b2da      	uxtb	r2, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d101      	bne.n	800c7da <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c7d6:	2303      	movs	r3, #3
 800c7d8:	e012      	b.n	800c800 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	2b03      	cmp	r3, #3
 800c7e4:	d10b      	bne.n	800c7fe <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7ec:	69db      	ldr	r3, [r3, #28]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d005      	beq.n	800c7fe <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7f8:	69db      	ldr	r3, [r3, #28]
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c7fe:	2300      	movs	r3, #0
}
 800c800:	4618      	mov	r0, r3
 800c802:	3708      	adds	r7, #8
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c808:	b480      	push	{r7}
 800c80a:	b087      	sub	sp, #28
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	3301      	adds	r3, #1
 800c81e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c826:	8a3b      	ldrh	r3, [r7, #16]
 800c828:	021b      	lsls	r3, r3, #8
 800c82a:	b21a      	sxth	r2, r3
 800c82c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c830:	4313      	orrs	r3, r2
 800c832:	b21b      	sxth	r3, r3
 800c834:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c836:	89fb      	ldrh	r3, [r7, #14]
}
 800c838:	4618      	mov	r0, r3
 800c83a:	371c      	adds	r7, #28
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b084      	sub	sp, #16
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c84e:	2300      	movs	r3, #0
 800c850:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c85a:	2b40      	cmp	r3, #64	; 0x40
 800c85c:	d005      	beq.n	800c86a <USBD_StdDevReq+0x26>
 800c85e:	2b40      	cmp	r3, #64	; 0x40
 800c860:	d853      	bhi.n	800c90a <USBD_StdDevReq+0xc6>
 800c862:	2b00      	cmp	r3, #0
 800c864:	d00b      	beq.n	800c87e <USBD_StdDevReq+0x3a>
 800c866:	2b20      	cmp	r3, #32
 800c868:	d14f      	bne.n	800c90a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c870:	689b      	ldr	r3, [r3, #8]
 800c872:	6839      	ldr	r1, [r7, #0]
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	4798      	blx	r3
 800c878:	4603      	mov	r3, r0
 800c87a:	73fb      	strb	r3, [r7, #15]
      break;
 800c87c:	e04a      	b.n	800c914 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	785b      	ldrb	r3, [r3, #1]
 800c882:	2b09      	cmp	r3, #9
 800c884:	d83b      	bhi.n	800c8fe <USBD_StdDevReq+0xba>
 800c886:	a201      	add	r2, pc, #4	; (adr r2, 800c88c <USBD_StdDevReq+0x48>)
 800c888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c88c:	0800c8e1 	.word	0x0800c8e1
 800c890:	0800c8f5 	.word	0x0800c8f5
 800c894:	0800c8ff 	.word	0x0800c8ff
 800c898:	0800c8eb 	.word	0x0800c8eb
 800c89c:	0800c8ff 	.word	0x0800c8ff
 800c8a0:	0800c8bf 	.word	0x0800c8bf
 800c8a4:	0800c8b5 	.word	0x0800c8b5
 800c8a8:	0800c8ff 	.word	0x0800c8ff
 800c8ac:	0800c8d7 	.word	0x0800c8d7
 800c8b0:	0800c8c9 	.word	0x0800c8c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c8b4:	6839      	ldr	r1, [r7, #0]
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 f9de 	bl	800cc78 <USBD_GetDescriptor>
          break;
 800c8bc:	e024      	b.n	800c908 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c8be:	6839      	ldr	r1, [r7, #0]
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f000 fb6d 	bl	800cfa0 <USBD_SetAddress>
          break;
 800c8c6:	e01f      	b.n	800c908 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c8c8:	6839      	ldr	r1, [r7, #0]
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f000 fbac 	bl	800d028 <USBD_SetConfig>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	73fb      	strb	r3, [r7, #15]
          break;
 800c8d4:	e018      	b.n	800c908 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c8d6:	6839      	ldr	r1, [r7, #0]
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 fc4b 	bl	800d174 <USBD_GetConfig>
          break;
 800c8de:	e013      	b.n	800c908 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c8e0:	6839      	ldr	r1, [r7, #0]
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 fc7c 	bl	800d1e0 <USBD_GetStatus>
          break;
 800c8e8:	e00e      	b.n	800c908 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c8ea:	6839      	ldr	r1, [r7, #0]
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 fcab 	bl	800d248 <USBD_SetFeature>
          break;
 800c8f2:	e009      	b.n	800c908 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c8f4:	6839      	ldr	r1, [r7, #0]
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f000 fcba 	bl	800d270 <USBD_ClrFeature>
          break;
 800c8fc:	e004      	b.n	800c908 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c8fe:	6839      	ldr	r1, [r7, #0]
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f000 fd11 	bl	800d328 <USBD_CtlError>
          break;
 800c906:	bf00      	nop
      }
      break;
 800c908:	e004      	b.n	800c914 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c90a:	6839      	ldr	r1, [r7, #0]
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f000 fd0b 	bl	800d328 <USBD_CtlError>
      break;
 800c912:	bf00      	nop
  }

  return ret;
 800c914:	7bfb      	ldrb	r3, [r7, #15]
}
 800c916:	4618      	mov	r0, r3
 800c918:	3710      	adds	r7, #16
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop

0800c920 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b084      	sub	sp, #16
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c92a:	2300      	movs	r3, #0
 800c92c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c936:	2b40      	cmp	r3, #64	; 0x40
 800c938:	d005      	beq.n	800c946 <USBD_StdItfReq+0x26>
 800c93a:	2b40      	cmp	r3, #64	; 0x40
 800c93c:	d82f      	bhi.n	800c99e <USBD_StdItfReq+0x7e>
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d001      	beq.n	800c946 <USBD_StdItfReq+0x26>
 800c942:	2b20      	cmp	r3, #32
 800c944:	d12b      	bne.n	800c99e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c94c:	b2db      	uxtb	r3, r3
 800c94e:	3b01      	subs	r3, #1
 800c950:	2b02      	cmp	r3, #2
 800c952:	d81d      	bhi.n	800c990 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	889b      	ldrh	r3, [r3, #4]
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	d813      	bhi.n	800c986 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c964:	689b      	ldr	r3, [r3, #8]
 800c966:	6839      	ldr	r1, [r7, #0]
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	4798      	blx	r3
 800c96c:	4603      	mov	r3, r0
 800c96e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	88db      	ldrh	r3, [r3, #6]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d110      	bne.n	800c99a <USBD_StdItfReq+0x7a>
 800c978:	7bfb      	ldrb	r3, [r7, #15]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d10d      	bne.n	800c99a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f000 fd9d 	bl	800d4be <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c984:	e009      	b.n	800c99a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c986:	6839      	ldr	r1, [r7, #0]
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f000 fccd 	bl	800d328 <USBD_CtlError>
          break;
 800c98e:	e004      	b.n	800c99a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c990:	6839      	ldr	r1, [r7, #0]
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 fcc8 	bl	800d328 <USBD_CtlError>
          break;
 800c998:	e000      	b.n	800c99c <USBD_StdItfReq+0x7c>
          break;
 800c99a:	bf00      	nop
      }
      break;
 800c99c:	e004      	b.n	800c9a8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c99e:	6839      	ldr	r1, [r7, #0]
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f000 fcc1 	bl	800d328 <USBD_CtlError>
      break;
 800c9a6:	bf00      	nop
  }

  return ret;
 800c9a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3710      	adds	r7, #16
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b084      	sub	sp, #16
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
 800c9ba:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	889b      	ldrh	r3, [r3, #4]
 800c9c4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c9ce:	2b40      	cmp	r3, #64	; 0x40
 800c9d0:	d007      	beq.n	800c9e2 <USBD_StdEPReq+0x30>
 800c9d2:	2b40      	cmp	r3, #64	; 0x40
 800c9d4:	f200 8145 	bhi.w	800cc62 <USBD_StdEPReq+0x2b0>
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d00c      	beq.n	800c9f6 <USBD_StdEPReq+0x44>
 800c9dc:	2b20      	cmp	r3, #32
 800c9de:	f040 8140 	bne.w	800cc62 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9e8:	689b      	ldr	r3, [r3, #8]
 800c9ea:	6839      	ldr	r1, [r7, #0]
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	4798      	blx	r3
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	73fb      	strb	r3, [r7, #15]
      break;
 800c9f4:	e13a      	b.n	800cc6c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	785b      	ldrb	r3, [r3, #1]
 800c9fa:	2b03      	cmp	r3, #3
 800c9fc:	d007      	beq.n	800ca0e <USBD_StdEPReq+0x5c>
 800c9fe:	2b03      	cmp	r3, #3
 800ca00:	f300 8129 	bgt.w	800cc56 <USBD_StdEPReq+0x2a4>
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d07f      	beq.n	800cb08 <USBD_StdEPReq+0x156>
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d03c      	beq.n	800ca86 <USBD_StdEPReq+0xd4>
 800ca0c:	e123      	b.n	800cc56 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	2b02      	cmp	r3, #2
 800ca18:	d002      	beq.n	800ca20 <USBD_StdEPReq+0x6e>
 800ca1a:	2b03      	cmp	r3, #3
 800ca1c:	d016      	beq.n	800ca4c <USBD_StdEPReq+0x9a>
 800ca1e:	e02c      	b.n	800ca7a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca20:	7bbb      	ldrb	r3, [r7, #14]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d00d      	beq.n	800ca42 <USBD_StdEPReq+0x90>
 800ca26:	7bbb      	ldrb	r3, [r7, #14]
 800ca28:	2b80      	cmp	r3, #128	; 0x80
 800ca2a:	d00a      	beq.n	800ca42 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca2c:	7bbb      	ldrb	r3, [r7, #14]
 800ca2e:	4619      	mov	r1, r3
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f001 f939 	bl	800dca8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca36:	2180      	movs	r1, #128	; 0x80
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f001 f935 	bl	800dca8 <USBD_LL_StallEP>
 800ca3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ca40:	e020      	b.n	800ca84 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ca42:	6839      	ldr	r1, [r7, #0]
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f000 fc6f 	bl	800d328 <USBD_CtlError>
              break;
 800ca4a:	e01b      	b.n	800ca84 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	885b      	ldrh	r3, [r3, #2]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d10e      	bne.n	800ca72 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ca54:	7bbb      	ldrb	r3, [r7, #14]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d00b      	beq.n	800ca72 <USBD_StdEPReq+0xc0>
 800ca5a:	7bbb      	ldrb	r3, [r7, #14]
 800ca5c:	2b80      	cmp	r3, #128	; 0x80
 800ca5e:	d008      	beq.n	800ca72 <USBD_StdEPReq+0xc0>
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	88db      	ldrh	r3, [r3, #6]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d104      	bne.n	800ca72 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca68:	7bbb      	ldrb	r3, [r7, #14]
 800ca6a:	4619      	mov	r1, r3
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f001 f91b 	bl	800dca8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 fd23 	bl	800d4be <USBD_CtlSendStatus>

              break;
 800ca78:	e004      	b.n	800ca84 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ca7a:	6839      	ldr	r1, [r7, #0]
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 fc53 	bl	800d328 <USBD_CtlError>
              break;
 800ca82:	bf00      	nop
          }
          break;
 800ca84:	e0ec      	b.n	800cc60 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	2b02      	cmp	r3, #2
 800ca90:	d002      	beq.n	800ca98 <USBD_StdEPReq+0xe6>
 800ca92:	2b03      	cmp	r3, #3
 800ca94:	d016      	beq.n	800cac4 <USBD_StdEPReq+0x112>
 800ca96:	e030      	b.n	800cafa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca98:	7bbb      	ldrb	r3, [r7, #14]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d00d      	beq.n	800caba <USBD_StdEPReq+0x108>
 800ca9e:	7bbb      	ldrb	r3, [r7, #14]
 800caa0:	2b80      	cmp	r3, #128	; 0x80
 800caa2:	d00a      	beq.n	800caba <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800caa4:	7bbb      	ldrb	r3, [r7, #14]
 800caa6:	4619      	mov	r1, r3
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f001 f8fd 	bl	800dca8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800caae:	2180      	movs	r1, #128	; 0x80
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f001 f8f9 	bl	800dca8 <USBD_LL_StallEP>
 800cab6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cab8:	e025      	b.n	800cb06 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800caba:	6839      	ldr	r1, [r7, #0]
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f000 fc33 	bl	800d328 <USBD_CtlError>
              break;
 800cac2:	e020      	b.n	800cb06 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	885b      	ldrh	r3, [r3, #2]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d11b      	bne.n	800cb04 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cacc:	7bbb      	ldrb	r3, [r7, #14]
 800cace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d004      	beq.n	800cae0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cad6:	7bbb      	ldrb	r3, [r7, #14]
 800cad8:	4619      	mov	r1, r3
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f001 f903 	bl	800dce6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f000 fcec 	bl	800d4be <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caec:	689b      	ldr	r3, [r3, #8]
 800caee:	6839      	ldr	r1, [r7, #0]
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	4798      	blx	r3
 800caf4:	4603      	mov	r3, r0
 800caf6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800caf8:	e004      	b.n	800cb04 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800cafa:	6839      	ldr	r1, [r7, #0]
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f000 fc13 	bl	800d328 <USBD_CtlError>
              break;
 800cb02:	e000      	b.n	800cb06 <USBD_StdEPReq+0x154>
              break;
 800cb04:	bf00      	nop
          }
          break;
 800cb06:	e0ab      	b.n	800cc60 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	2b02      	cmp	r3, #2
 800cb12:	d002      	beq.n	800cb1a <USBD_StdEPReq+0x168>
 800cb14:	2b03      	cmp	r3, #3
 800cb16:	d032      	beq.n	800cb7e <USBD_StdEPReq+0x1cc>
 800cb18:	e097      	b.n	800cc4a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb1a:	7bbb      	ldrb	r3, [r7, #14]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d007      	beq.n	800cb30 <USBD_StdEPReq+0x17e>
 800cb20:	7bbb      	ldrb	r3, [r7, #14]
 800cb22:	2b80      	cmp	r3, #128	; 0x80
 800cb24:	d004      	beq.n	800cb30 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800cb26:	6839      	ldr	r1, [r7, #0]
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 fbfd 	bl	800d328 <USBD_CtlError>
                break;
 800cb2e:	e091      	b.n	800cc54 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	da0b      	bge.n	800cb50 <USBD_StdEPReq+0x19e>
 800cb38:	7bbb      	ldrb	r3, [r7, #14]
 800cb3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb3e:	4613      	mov	r3, r2
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	4413      	add	r3, r2
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	3310      	adds	r3, #16
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	4413      	add	r3, r2
 800cb4c:	3304      	adds	r3, #4
 800cb4e:	e00b      	b.n	800cb68 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cb50:	7bbb      	ldrb	r3, [r7, #14]
 800cb52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb56:	4613      	mov	r3, r2
 800cb58:	009b      	lsls	r3, r3, #2
 800cb5a:	4413      	add	r3, r2
 800cb5c:	009b      	lsls	r3, r3, #2
 800cb5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cb62:	687a      	ldr	r2, [r7, #4]
 800cb64:	4413      	add	r3, r2
 800cb66:	3304      	adds	r3, #4
 800cb68:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	2202      	movs	r2, #2
 800cb74:	4619      	mov	r1, r3
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 fc47 	bl	800d40a <USBD_CtlSendData>
              break;
 800cb7c:	e06a      	b.n	800cc54 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cb7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	da11      	bge.n	800cbaa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cb86:	7bbb      	ldrb	r3, [r7, #14]
 800cb88:	f003 020f 	and.w	r2, r3, #15
 800cb8c:	6879      	ldr	r1, [r7, #4]
 800cb8e:	4613      	mov	r3, r2
 800cb90:	009b      	lsls	r3, r3, #2
 800cb92:	4413      	add	r3, r2
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	440b      	add	r3, r1
 800cb98:	3324      	adds	r3, #36	; 0x24
 800cb9a:	881b      	ldrh	r3, [r3, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d117      	bne.n	800cbd0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cba0:	6839      	ldr	r1, [r7, #0]
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 fbc0 	bl	800d328 <USBD_CtlError>
                  break;
 800cba8:	e054      	b.n	800cc54 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cbaa:	7bbb      	ldrb	r3, [r7, #14]
 800cbac:	f003 020f 	and.w	r2, r3, #15
 800cbb0:	6879      	ldr	r1, [r7, #4]
 800cbb2:	4613      	mov	r3, r2
 800cbb4:	009b      	lsls	r3, r3, #2
 800cbb6:	4413      	add	r3, r2
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	440b      	add	r3, r1
 800cbbc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cbc0:	881b      	ldrh	r3, [r3, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d104      	bne.n	800cbd0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cbc6:	6839      	ldr	r1, [r7, #0]
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 fbad 	bl	800d328 <USBD_CtlError>
                  break;
 800cbce:	e041      	b.n	800cc54 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	da0b      	bge.n	800cbf0 <USBD_StdEPReq+0x23e>
 800cbd8:	7bbb      	ldrb	r3, [r7, #14]
 800cbda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cbde:	4613      	mov	r3, r2
 800cbe0:	009b      	lsls	r3, r3, #2
 800cbe2:	4413      	add	r3, r2
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	3310      	adds	r3, #16
 800cbe8:	687a      	ldr	r2, [r7, #4]
 800cbea:	4413      	add	r3, r2
 800cbec:	3304      	adds	r3, #4
 800cbee:	e00b      	b.n	800cc08 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cbf0:	7bbb      	ldrb	r3, [r7, #14]
 800cbf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbf6:	4613      	mov	r3, r2
 800cbf8:	009b      	lsls	r3, r3, #2
 800cbfa:	4413      	add	r3, r2
 800cbfc:	009b      	lsls	r3, r3, #2
 800cbfe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	4413      	add	r3, r2
 800cc06:	3304      	adds	r3, #4
 800cc08:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cc0a:	7bbb      	ldrb	r3, [r7, #14]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d002      	beq.n	800cc16 <USBD_StdEPReq+0x264>
 800cc10:	7bbb      	ldrb	r3, [r7, #14]
 800cc12:	2b80      	cmp	r3, #128	; 0x80
 800cc14:	d103      	bne.n	800cc1e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	601a      	str	r2, [r3, #0]
 800cc1c:	e00e      	b.n	800cc3c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cc1e:	7bbb      	ldrb	r3, [r7, #14]
 800cc20:	4619      	mov	r1, r3
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f001 f87e 	bl	800dd24 <USBD_LL_IsStallEP>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d003      	beq.n	800cc36 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	2201      	movs	r2, #1
 800cc32:	601a      	str	r2, [r3, #0]
 800cc34:	e002      	b.n	800cc3c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	2202      	movs	r2, #2
 800cc40:	4619      	mov	r1, r3
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 fbe1 	bl	800d40a <USBD_CtlSendData>
              break;
 800cc48:	e004      	b.n	800cc54 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cc4a:	6839      	ldr	r1, [r7, #0]
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 fb6b 	bl	800d328 <USBD_CtlError>
              break;
 800cc52:	bf00      	nop
          }
          break;
 800cc54:	e004      	b.n	800cc60 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cc56:	6839      	ldr	r1, [r7, #0]
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f000 fb65 	bl	800d328 <USBD_CtlError>
          break;
 800cc5e:	bf00      	nop
      }
      break;
 800cc60:	e004      	b.n	800cc6c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cc62:	6839      	ldr	r1, [r7, #0]
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f000 fb5f 	bl	800d328 <USBD_CtlError>
      break;
 800cc6a:	bf00      	nop
  }

  return ret;
 800cc6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3710      	adds	r7, #16
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
	...

0800cc78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cc82:	2300      	movs	r3, #0
 800cc84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cc86:	2300      	movs	r3, #0
 800cc88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	885b      	ldrh	r3, [r3, #2]
 800cc92:	0a1b      	lsrs	r3, r3, #8
 800cc94:	b29b      	uxth	r3, r3
 800cc96:	3b01      	subs	r3, #1
 800cc98:	2b0e      	cmp	r3, #14
 800cc9a:	f200 8152 	bhi.w	800cf42 <USBD_GetDescriptor+0x2ca>
 800cc9e:	a201      	add	r2, pc, #4	; (adr r2, 800cca4 <USBD_GetDescriptor+0x2c>)
 800cca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca4:	0800cd15 	.word	0x0800cd15
 800cca8:	0800cd2d 	.word	0x0800cd2d
 800ccac:	0800cd6d 	.word	0x0800cd6d
 800ccb0:	0800cf43 	.word	0x0800cf43
 800ccb4:	0800cf43 	.word	0x0800cf43
 800ccb8:	0800cee3 	.word	0x0800cee3
 800ccbc:	0800cf0f 	.word	0x0800cf0f
 800ccc0:	0800cf43 	.word	0x0800cf43
 800ccc4:	0800cf43 	.word	0x0800cf43
 800ccc8:	0800cf43 	.word	0x0800cf43
 800cccc:	0800cf43 	.word	0x0800cf43
 800ccd0:	0800cf43 	.word	0x0800cf43
 800ccd4:	0800cf43 	.word	0x0800cf43
 800ccd8:	0800cf43 	.word	0x0800cf43
 800ccdc:	0800cce1 	.word	0x0800cce1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cce6:	69db      	ldr	r3, [r3, #28]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d00b      	beq.n	800cd04 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccf2:	69db      	ldr	r3, [r3, #28]
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	7c12      	ldrb	r2, [r2, #16]
 800ccf8:	f107 0108 	add.w	r1, r7, #8
 800ccfc:	4610      	mov	r0, r2
 800ccfe:	4798      	blx	r3
 800cd00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd02:	e126      	b.n	800cf52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cd04:	6839      	ldr	r1, [r7, #0]
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f000 fb0e 	bl	800d328 <USBD_CtlError>
        err++;
 800cd0c:	7afb      	ldrb	r3, [r7, #11]
 800cd0e:	3301      	adds	r3, #1
 800cd10:	72fb      	strb	r3, [r7, #11]
      break;
 800cd12:	e11e      	b.n	800cf52 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	7c12      	ldrb	r2, [r2, #16]
 800cd20:	f107 0108 	add.w	r1, r7, #8
 800cd24:	4610      	mov	r0, r2
 800cd26:	4798      	blx	r3
 800cd28:	60f8      	str	r0, [r7, #12]
      break;
 800cd2a:	e112      	b.n	800cf52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	7c1b      	ldrb	r3, [r3, #16]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d10d      	bne.n	800cd50 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd3c:	f107 0208 	add.w	r2, r7, #8
 800cd40:	4610      	mov	r0, r2
 800cd42:	4798      	blx	r3
 800cd44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	3301      	adds	r3, #1
 800cd4a:	2202      	movs	r2, #2
 800cd4c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cd4e:	e100      	b.n	800cf52 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd58:	f107 0208 	add.w	r2, r7, #8
 800cd5c:	4610      	mov	r0, r2
 800cd5e:	4798      	blx	r3
 800cd60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	3301      	adds	r3, #1
 800cd66:	2202      	movs	r2, #2
 800cd68:	701a      	strb	r2, [r3, #0]
      break;
 800cd6a:	e0f2      	b.n	800cf52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	885b      	ldrh	r3, [r3, #2]
 800cd70:	b2db      	uxtb	r3, r3
 800cd72:	2b05      	cmp	r3, #5
 800cd74:	f200 80ac 	bhi.w	800ced0 <USBD_GetDescriptor+0x258>
 800cd78:	a201      	add	r2, pc, #4	; (adr r2, 800cd80 <USBD_GetDescriptor+0x108>)
 800cd7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd7e:	bf00      	nop
 800cd80:	0800cd99 	.word	0x0800cd99
 800cd84:	0800cdcd 	.word	0x0800cdcd
 800cd88:	0800ce01 	.word	0x0800ce01
 800cd8c:	0800ce35 	.word	0x0800ce35
 800cd90:	0800ce69 	.word	0x0800ce69
 800cd94:	0800ce9d 	.word	0x0800ce9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d00b      	beq.n	800cdbc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	7c12      	ldrb	r2, [r2, #16]
 800cdb0:	f107 0108 	add.w	r1, r7, #8
 800cdb4:	4610      	mov	r0, r2
 800cdb6:	4798      	blx	r3
 800cdb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdba:	e091      	b.n	800cee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cdbc:	6839      	ldr	r1, [r7, #0]
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 fab2 	bl	800d328 <USBD_CtlError>
            err++;
 800cdc4:	7afb      	ldrb	r3, [r7, #11]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	72fb      	strb	r3, [r7, #11]
          break;
 800cdca:	e089      	b.n	800cee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdd2:	689b      	ldr	r3, [r3, #8]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d00b      	beq.n	800cdf0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdde:	689b      	ldr	r3, [r3, #8]
 800cde0:	687a      	ldr	r2, [r7, #4]
 800cde2:	7c12      	ldrb	r2, [r2, #16]
 800cde4:	f107 0108 	add.w	r1, r7, #8
 800cde8:	4610      	mov	r0, r2
 800cdea:	4798      	blx	r3
 800cdec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdee:	e077      	b.n	800cee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cdf0:	6839      	ldr	r1, [r7, #0]
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 fa98 	bl	800d328 <USBD_CtlError>
            err++;
 800cdf8:	7afb      	ldrb	r3, [r7, #11]
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	72fb      	strb	r3, [r7, #11]
          break;
 800cdfe:	e06f      	b.n	800cee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce06:	68db      	ldr	r3, [r3, #12]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d00b      	beq.n	800ce24 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce12:	68db      	ldr	r3, [r3, #12]
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	7c12      	ldrb	r2, [r2, #16]
 800ce18:	f107 0108 	add.w	r1, r7, #8
 800ce1c:	4610      	mov	r0, r2
 800ce1e:	4798      	blx	r3
 800ce20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce22:	e05d      	b.n	800cee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce24:	6839      	ldr	r1, [r7, #0]
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f000 fa7e 	bl	800d328 <USBD_CtlError>
            err++;
 800ce2c:	7afb      	ldrb	r3, [r7, #11]
 800ce2e:	3301      	adds	r3, #1
 800ce30:	72fb      	strb	r3, [r7, #11]
          break;
 800ce32:	e055      	b.n	800cee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce3a:	691b      	ldr	r3, [r3, #16]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d00b      	beq.n	800ce58 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce46:	691b      	ldr	r3, [r3, #16]
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	7c12      	ldrb	r2, [r2, #16]
 800ce4c:	f107 0108 	add.w	r1, r7, #8
 800ce50:	4610      	mov	r0, r2
 800ce52:	4798      	blx	r3
 800ce54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce56:	e043      	b.n	800cee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce58:	6839      	ldr	r1, [r7, #0]
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 fa64 	bl	800d328 <USBD_CtlError>
            err++;
 800ce60:	7afb      	ldrb	r3, [r7, #11]
 800ce62:	3301      	adds	r3, #1
 800ce64:	72fb      	strb	r3, [r7, #11]
          break;
 800ce66:	e03b      	b.n	800cee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce6e:	695b      	ldr	r3, [r3, #20]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d00b      	beq.n	800ce8c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce7a:	695b      	ldr	r3, [r3, #20]
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	7c12      	ldrb	r2, [r2, #16]
 800ce80:	f107 0108 	add.w	r1, r7, #8
 800ce84:	4610      	mov	r0, r2
 800ce86:	4798      	blx	r3
 800ce88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce8a:	e029      	b.n	800cee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce8c:	6839      	ldr	r1, [r7, #0]
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f000 fa4a 	bl	800d328 <USBD_CtlError>
            err++;
 800ce94:	7afb      	ldrb	r3, [r7, #11]
 800ce96:	3301      	adds	r3, #1
 800ce98:	72fb      	strb	r3, [r7, #11]
          break;
 800ce9a:	e021      	b.n	800cee0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cea2:	699b      	ldr	r3, [r3, #24]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d00b      	beq.n	800cec0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceae:	699b      	ldr	r3, [r3, #24]
 800ceb0:	687a      	ldr	r2, [r7, #4]
 800ceb2:	7c12      	ldrb	r2, [r2, #16]
 800ceb4:	f107 0108 	add.w	r1, r7, #8
 800ceb8:	4610      	mov	r0, r2
 800ceba:	4798      	blx	r3
 800cebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cebe:	e00f      	b.n	800cee0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cec0:	6839      	ldr	r1, [r7, #0]
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 fa30 	bl	800d328 <USBD_CtlError>
            err++;
 800cec8:	7afb      	ldrb	r3, [r7, #11]
 800ceca:	3301      	adds	r3, #1
 800cecc:	72fb      	strb	r3, [r7, #11]
          break;
 800cece:	e007      	b.n	800cee0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ced0:	6839      	ldr	r1, [r7, #0]
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f000 fa28 	bl	800d328 <USBD_CtlError>
          err++;
 800ced8:	7afb      	ldrb	r3, [r7, #11]
 800ceda:	3301      	adds	r3, #1
 800cedc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cede:	bf00      	nop
      }
      break;
 800cee0:	e037      	b.n	800cf52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	7c1b      	ldrb	r3, [r3, #16]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d109      	bne.n	800cefe <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cef2:	f107 0208 	add.w	r2, r7, #8
 800cef6:	4610      	mov	r0, r2
 800cef8:	4798      	blx	r3
 800cefa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cefc:	e029      	b.n	800cf52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cefe:	6839      	ldr	r1, [r7, #0]
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f000 fa11 	bl	800d328 <USBD_CtlError>
        err++;
 800cf06:	7afb      	ldrb	r3, [r7, #11]
 800cf08:	3301      	adds	r3, #1
 800cf0a:	72fb      	strb	r3, [r7, #11]
      break;
 800cf0c:	e021      	b.n	800cf52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	7c1b      	ldrb	r3, [r3, #16]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d10d      	bne.n	800cf32 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf1e:	f107 0208 	add.w	r2, r7, #8
 800cf22:	4610      	mov	r0, r2
 800cf24:	4798      	blx	r3
 800cf26:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	2207      	movs	r2, #7
 800cf2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf30:	e00f      	b.n	800cf52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cf32:	6839      	ldr	r1, [r7, #0]
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f000 f9f7 	bl	800d328 <USBD_CtlError>
        err++;
 800cf3a:	7afb      	ldrb	r3, [r7, #11]
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	72fb      	strb	r3, [r7, #11]
      break;
 800cf40:	e007      	b.n	800cf52 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cf42:	6839      	ldr	r1, [r7, #0]
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 f9ef 	bl	800d328 <USBD_CtlError>
      err++;
 800cf4a:	7afb      	ldrb	r3, [r7, #11]
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	72fb      	strb	r3, [r7, #11]
      break;
 800cf50:	bf00      	nop
  }

  if (err != 0U)
 800cf52:	7afb      	ldrb	r3, [r7, #11]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d11e      	bne.n	800cf96 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	88db      	ldrh	r3, [r3, #6]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d016      	beq.n	800cf8e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800cf60:	893b      	ldrh	r3, [r7, #8]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d00e      	beq.n	800cf84 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	88da      	ldrh	r2, [r3, #6]
 800cf6a:	893b      	ldrh	r3, [r7, #8]
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	bf28      	it	cs
 800cf70:	4613      	movcs	r3, r2
 800cf72:	b29b      	uxth	r3, r3
 800cf74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cf76:	893b      	ldrh	r3, [r7, #8]
 800cf78:	461a      	mov	r2, r3
 800cf7a:	68f9      	ldr	r1, [r7, #12]
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f000 fa44 	bl	800d40a <USBD_CtlSendData>
 800cf82:	e009      	b.n	800cf98 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cf84:	6839      	ldr	r1, [r7, #0]
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 f9ce 	bl	800d328 <USBD_CtlError>
 800cf8c:	e004      	b.n	800cf98 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f000 fa95 	bl	800d4be <USBD_CtlSendStatus>
 800cf94:	e000      	b.n	800cf98 <USBD_GetDescriptor+0x320>
    return;
 800cf96:	bf00      	nop
  }
}
 800cf98:	3710      	adds	r7, #16
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop

0800cfa0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	889b      	ldrh	r3, [r3, #4]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d131      	bne.n	800d016 <USBD_SetAddress+0x76>
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	88db      	ldrh	r3, [r3, #6]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d12d      	bne.n	800d016 <USBD_SetAddress+0x76>
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	885b      	ldrh	r3, [r3, #2]
 800cfbe:	2b7f      	cmp	r3, #127	; 0x7f
 800cfc0:	d829      	bhi.n	800d016 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	885b      	ldrh	r3, [r3, #2]
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfcc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfd4:	b2db      	uxtb	r3, r3
 800cfd6:	2b03      	cmp	r3, #3
 800cfd8:	d104      	bne.n	800cfe4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cfda:	6839      	ldr	r1, [r7, #0]
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 f9a3 	bl	800d328 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfe2:	e01d      	b.n	800d020 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	7bfa      	ldrb	r2, [r7, #15]
 800cfe8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cfec:	7bfb      	ldrb	r3, [r7, #15]
 800cfee:	4619      	mov	r1, r3
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 fec3 	bl	800dd7c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f000 fa61 	bl	800d4be <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cffc:	7bfb      	ldrb	r3, [r7, #15]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d004      	beq.n	800d00c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2202      	movs	r2, #2
 800d006:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d00a:	e009      	b.n	800d020 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2201      	movs	r2, #1
 800d010:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d014:	e004      	b.n	800d020 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d016:	6839      	ldr	r1, [r7, #0]
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f000 f985 	bl	800d328 <USBD_CtlError>
  }
}
 800d01e:	bf00      	nop
 800d020:	bf00      	nop
 800d022:	3710      	adds	r7, #16
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}

0800d028 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d032:	2300      	movs	r3, #0
 800d034:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	885b      	ldrh	r3, [r3, #2]
 800d03a:	b2da      	uxtb	r2, r3
 800d03c:	4b4c      	ldr	r3, [pc, #304]	; (800d170 <USBD_SetConfig+0x148>)
 800d03e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d040:	4b4b      	ldr	r3, [pc, #300]	; (800d170 <USBD_SetConfig+0x148>)
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	2b01      	cmp	r3, #1
 800d046:	d905      	bls.n	800d054 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d048:	6839      	ldr	r1, [r7, #0]
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f000 f96c 	bl	800d328 <USBD_CtlError>
    return USBD_FAIL;
 800d050:	2303      	movs	r3, #3
 800d052:	e088      	b.n	800d166 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	2b02      	cmp	r3, #2
 800d05e:	d002      	beq.n	800d066 <USBD_SetConfig+0x3e>
 800d060:	2b03      	cmp	r3, #3
 800d062:	d025      	beq.n	800d0b0 <USBD_SetConfig+0x88>
 800d064:	e071      	b.n	800d14a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d066:	4b42      	ldr	r3, [pc, #264]	; (800d170 <USBD_SetConfig+0x148>)
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d01c      	beq.n	800d0a8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d06e:	4b40      	ldr	r3, [pc, #256]	; (800d170 <USBD_SetConfig+0x148>)
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	461a      	mov	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d078:	4b3d      	ldr	r3, [pc, #244]	; (800d170 <USBD_SetConfig+0x148>)
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	4619      	mov	r1, r3
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f7ff f992 	bl	800c3a8 <USBD_SetClassConfig>
 800d084:	4603      	mov	r3, r0
 800d086:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d088:	7bfb      	ldrb	r3, [r7, #15]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d004      	beq.n	800d098 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d08e:	6839      	ldr	r1, [r7, #0]
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f000 f949 	bl	800d328 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d096:	e065      	b.n	800d164 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f000 fa10 	bl	800d4be <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2203      	movs	r2, #3
 800d0a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d0a6:	e05d      	b.n	800d164 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f000 fa08 	bl	800d4be <USBD_CtlSendStatus>
      break;
 800d0ae:	e059      	b.n	800d164 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d0b0:	4b2f      	ldr	r3, [pc, #188]	; (800d170 <USBD_SetConfig+0x148>)
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d112      	bne.n	800d0de <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2202      	movs	r2, #2
 800d0bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d0c0:	4b2b      	ldr	r3, [pc, #172]	; (800d170 <USBD_SetConfig+0x148>)
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	461a      	mov	r2, r3
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d0ca:	4b29      	ldr	r3, [pc, #164]	; (800d170 <USBD_SetConfig+0x148>)
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f7ff f985 	bl	800c3e0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 f9f1 	bl	800d4be <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d0dc:	e042      	b.n	800d164 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d0de:	4b24      	ldr	r3, [pc, #144]	; (800d170 <USBD_SetConfig+0x148>)
 800d0e0:	781b      	ldrb	r3, [r3, #0]
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	685b      	ldr	r3, [r3, #4]
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d02a      	beq.n	800d142 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	b2db      	uxtb	r3, r3
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f7ff f973 	bl	800c3e0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d0fa:	4b1d      	ldr	r3, [pc, #116]	; (800d170 <USBD_SetConfig+0x148>)
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	461a      	mov	r2, r3
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d104:	4b1a      	ldr	r3, [pc, #104]	; (800d170 <USBD_SetConfig+0x148>)
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	4619      	mov	r1, r3
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f7ff f94c 	bl	800c3a8 <USBD_SetClassConfig>
 800d110:	4603      	mov	r3, r0
 800d112:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d114:	7bfb      	ldrb	r3, [r7, #15]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00f      	beq.n	800d13a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d11a:	6839      	ldr	r1, [r7, #0]
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f000 f903 	bl	800d328 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	685b      	ldr	r3, [r3, #4]
 800d126:	b2db      	uxtb	r3, r3
 800d128:	4619      	mov	r1, r3
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f7ff f958 	bl	800c3e0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2202      	movs	r2, #2
 800d134:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d138:	e014      	b.n	800d164 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f000 f9bf 	bl	800d4be <USBD_CtlSendStatus>
      break;
 800d140:	e010      	b.n	800d164 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f000 f9bb 	bl	800d4be <USBD_CtlSendStatus>
      break;
 800d148:	e00c      	b.n	800d164 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d14a:	6839      	ldr	r1, [r7, #0]
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 f8eb 	bl	800d328 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d152:	4b07      	ldr	r3, [pc, #28]	; (800d170 <USBD_SetConfig+0x148>)
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	4619      	mov	r1, r3
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f7ff f941 	bl	800c3e0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d15e:	2303      	movs	r3, #3
 800d160:	73fb      	strb	r3, [r7, #15]
      break;
 800d162:	bf00      	nop
  }

  return ret;
 800d164:	7bfb      	ldrb	r3, [r7, #15]
}
 800d166:	4618      	mov	r0, r3
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	20004654 	.word	0x20004654

0800d174 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b082      	sub	sp, #8
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	88db      	ldrh	r3, [r3, #6]
 800d182:	2b01      	cmp	r3, #1
 800d184:	d004      	beq.n	800d190 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d186:	6839      	ldr	r1, [r7, #0]
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 f8cd 	bl	800d328 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d18e:	e023      	b.n	800d1d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d196:	b2db      	uxtb	r3, r3
 800d198:	2b02      	cmp	r3, #2
 800d19a:	dc02      	bgt.n	800d1a2 <USBD_GetConfig+0x2e>
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	dc03      	bgt.n	800d1a8 <USBD_GetConfig+0x34>
 800d1a0:	e015      	b.n	800d1ce <USBD_GetConfig+0x5a>
 800d1a2:	2b03      	cmp	r3, #3
 800d1a4:	d00b      	beq.n	800d1be <USBD_GetConfig+0x4a>
 800d1a6:	e012      	b.n	800d1ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	3308      	adds	r3, #8
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f000 f927 	bl	800d40a <USBD_CtlSendData>
        break;
 800d1bc:	e00c      	b.n	800d1d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	3304      	adds	r3, #4
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f000 f91f 	bl	800d40a <USBD_CtlSendData>
        break;
 800d1cc:	e004      	b.n	800d1d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d1ce:	6839      	ldr	r1, [r7, #0]
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f000 f8a9 	bl	800d328 <USBD_CtlError>
        break;
 800d1d6:	bf00      	nop
}
 800d1d8:	bf00      	nop
 800d1da:	3708      	adds	r7, #8
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1f0:	b2db      	uxtb	r3, r3
 800d1f2:	3b01      	subs	r3, #1
 800d1f4:	2b02      	cmp	r3, #2
 800d1f6:	d81e      	bhi.n	800d236 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	88db      	ldrh	r3, [r3, #6]
 800d1fc:	2b02      	cmp	r3, #2
 800d1fe:	d004      	beq.n	800d20a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d200:	6839      	ldr	r1, [r7, #0]
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f000 f890 	bl	800d328 <USBD_CtlError>
        break;
 800d208:	e01a      	b.n	800d240 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2201      	movs	r2, #1
 800d20e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d216:	2b00      	cmp	r3, #0
 800d218:	d005      	beq.n	800d226 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	68db      	ldr	r3, [r3, #12]
 800d21e:	f043 0202 	orr.w	r2, r3, #2
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	330c      	adds	r3, #12
 800d22a:	2202      	movs	r2, #2
 800d22c:	4619      	mov	r1, r3
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f000 f8eb 	bl	800d40a <USBD_CtlSendData>
      break;
 800d234:	e004      	b.n	800d240 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d236:	6839      	ldr	r1, [r7, #0]
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f000 f875 	bl	800d328 <USBD_CtlError>
      break;
 800d23e:	bf00      	nop
  }
}
 800d240:	bf00      	nop
 800d242:	3708      	adds	r7, #8
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	885b      	ldrh	r3, [r3, #2]
 800d256:	2b01      	cmp	r3, #1
 800d258:	d106      	bne.n	800d268 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2201      	movs	r2, #1
 800d25e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 f92b 	bl	800d4be <USBD_CtlSendStatus>
  }
}
 800d268:	bf00      	nop
 800d26a:	3708      	adds	r7, #8
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b082      	sub	sp, #8
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d280:	b2db      	uxtb	r3, r3
 800d282:	3b01      	subs	r3, #1
 800d284:	2b02      	cmp	r3, #2
 800d286:	d80b      	bhi.n	800d2a0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	885b      	ldrh	r3, [r3, #2]
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	d10c      	bne.n	800d2aa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2200      	movs	r2, #0
 800d294:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f000 f910 	bl	800d4be <USBD_CtlSendStatus>
      }
      break;
 800d29e:	e004      	b.n	800d2aa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d2a0:	6839      	ldr	r1, [r7, #0]
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 f840 	bl	800d328 <USBD_CtlError>
      break;
 800d2a8:	e000      	b.n	800d2ac <USBD_ClrFeature+0x3c>
      break;
 800d2aa:	bf00      	nop
  }
}
 800d2ac:	bf00      	nop
 800d2ae:	3708      	adds	r7, #8
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b084      	sub	sp, #16
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	781a      	ldrb	r2, [r3, #0]
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	781a      	ldrb	r2, [r3, #0]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d2de:	68f8      	ldr	r0, [r7, #12]
 800d2e0:	f7ff fa92 	bl	800c808 <SWAPBYTE>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d2f8:	68f8      	ldr	r0, [r7, #12]
 800d2fa:	f7ff fa85 	bl	800c808 <SWAPBYTE>
 800d2fe:	4603      	mov	r3, r0
 800d300:	461a      	mov	r2, r3
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	3301      	adds	r3, #1
 800d30a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	3301      	adds	r3, #1
 800d310:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d312:	68f8      	ldr	r0, [r7, #12]
 800d314:	f7ff fa78 	bl	800c808 <SWAPBYTE>
 800d318:	4603      	mov	r3, r0
 800d31a:	461a      	mov	r2, r3
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	80da      	strh	r2, [r3, #6]
}
 800d320:	bf00      	nop
 800d322:	3710      	adds	r7, #16
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d332:	2180      	movs	r1, #128	; 0x80
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f000 fcb7 	bl	800dca8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d33a:	2100      	movs	r1, #0
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f000 fcb3 	bl	800dca8 <USBD_LL_StallEP>
}
 800d342:	bf00      	nop
 800d344:	3708      	adds	r7, #8
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}

0800d34a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d34a:	b580      	push	{r7, lr}
 800d34c:	b086      	sub	sp, #24
 800d34e:	af00      	add	r7, sp, #0
 800d350:	60f8      	str	r0, [r7, #12]
 800d352:	60b9      	str	r1, [r7, #8]
 800d354:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d356:	2300      	movs	r3, #0
 800d358:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d036      	beq.n	800d3ce <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d364:	6938      	ldr	r0, [r7, #16]
 800d366:	f000 f836 	bl	800d3d6 <USBD_GetLen>
 800d36a:	4603      	mov	r3, r0
 800d36c:	3301      	adds	r3, #1
 800d36e:	b29b      	uxth	r3, r3
 800d370:	005b      	lsls	r3, r3, #1
 800d372:	b29a      	uxth	r2, r3
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d378:	7dfb      	ldrb	r3, [r7, #23]
 800d37a:	68ba      	ldr	r2, [r7, #8]
 800d37c:	4413      	add	r3, r2
 800d37e:	687a      	ldr	r2, [r7, #4]
 800d380:	7812      	ldrb	r2, [r2, #0]
 800d382:	701a      	strb	r2, [r3, #0]
  idx++;
 800d384:	7dfb      	ldrb	r3, [r7, #23]
 800d386:	3301      	adds	r3, #1
 800d388:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d38a:	7dfb      	ldrb	r3, [r7, #23]
 800d38c:	68ba      	ldr	r2, [r7, #8]
 800d38e:	4413      	add	r3, r2
 800d390:	2203      	movs	r2, #3
 800d392:	701a      	strb	r2, [r3, #0]
  idx++;
 800d394:	7dfb      	ldrb	r3, [r7, #23]
 800d396:	3301      	adds	r3, #1
 800d398:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d39a:	e013      	b.n	800d3c4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d39c:	7dfb      	ldrb	r3, [r7, #23]
 800d39e:	68ba      	ldr	r2, [r7, #8]
 800d3a0:	4413      	add	r3, r2
 800d3a2:	693a      	ldr	r2, [r7, #16]
 800d3a4:	7812      	ldrb	r2, [r2, #0]
 800d3a6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	613b      	str	r3, [r7, #16]
    idx++;
 800d3ae:	7dfb      	ldrb	r3, [r7, #23]
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d3b4:	7dfb      	ldrb	r3, [r7, #23]
 800d3b6:	68ba      	ldr	r2, [r7, #8]
 800d3b8:	4413      	add	r3, r2
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	701a      	strb	r2, [r3, #0]
    idx++;
 800d3be:	7dfb      	ldrb	r3, [r7, #23]
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d1e7      	bne.n	800d39c <USBD_GetString+0x52>
 800d3cc:	e000      	b.n	800d3d0 <USBD_GetString+0x86>
    return;
 800d3ce:	bf00      	nop
  }
}
 800d3d0:	3718      	adds	r7, #24
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}

0800d3d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d3d6:	b480      	push	{r7}
 800d3d8:	b085      	sub	sp, #20
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d3e6:	e005      	b.n	800d3f4 <USBD_GetLen+0x1e>
  {
    len++;
 800d3e8:	7bfb      	ldrb	r3, [r7, #15]
 800d3ea:	3301      	adds	r3, #1
 800d3ec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d1f5      	bne.n	800d3e8 <USBD_GetLen+0x12>
  }

  return len;
 800d3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3714      	adds	r7, #20
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr

0800d40a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d40a:	b580      	push	{r7, lr}
 800d40c:	b084      	sub	sp, #16
 800d40e:	af00      	add	r7, sp, #0
 800d410:	60f8      	str	r0, [r7, #12]
 800d412:	60b9      	str	r1, [r7, #8]
 800d414:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2202      	movs	r2, #2
 800d41a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	687a      	ldr	r2, [r7, #4]
 800d422:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	687a      	ldr	r2, [r7, #4]
 800d428:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	68ba      	ldr	r2, [r7, #8]
 800d42e:	2100      	movs	r1, #0
 800d430:	68f8      	ldr	r0, [r7, #12]
 800d432:	f000 fcc2 	bl	800ddba <USBD_LL_Transmit>

  return USBD_OK;
 800d436:	2300      	movs	r3, #0
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3710      	adds	r7, #16
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	af00      	add	r7, sp, #0
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	60b9      	str	r1, [r7, #8]
 800d44a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	68ba      	ldr	r2, [r7, #8]
 800d450:	2100      	movs	r1, #0
 800d452:	68f8      	ldr	r0, [r7, #12]
 800d454:	f000 fcb1 	bl	800ddba <USBD_LL_Transmit>

  return USBD_OK;
 800d458:	2300      	movs	r3, #0
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3710      	adds	r7, #16
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}

0800d462 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d462:	b580      	push	{r7, lr}
 800d464:	b084      	sub	sp, #16
 800d466:	af00      	add	r7, sp, #0
 800d468:	60f8      	str	r0, [r7, #12]
 800d46a:	60b9      	str	r1, [r7, #8]
 800d46c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2203      	movs	r2, #3
 800d472:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	687a      	ldr	r2, [r7, #4]
 800d482:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	68ba      	ldr	r2, [r7, #8]
 800d48a:	2100      	movs	r1, #0
 800d48c:	68f8      	ldr	r0, [r7, #12]
 800d48e:	f000 fcb5 	bl	800ddfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d492:	2300      	movs	r3, #0
}
 800d494:	4618      	mov	r0, r3
 800d496:	3710      	adds	r7, #16
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b084      	sub	sp, #16
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	60f8      	str	r0, [r7, #12]
 800d4a4:	60b9      	str	r1, [r7, #8]
 800d4a6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	68ba      	ldr	r2, [r7, #8]
 800d4ac:	2100      	movs	r1, #0
 800d4ae:	68f8      	ldr	r0, [r7, #12]
 800d4b0:	f000 fca4 	bl	800ddfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4b4:	2300      	movs	r3, #0
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3710      	adds	r7, #16
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}

0800d4be <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d4be:	b580      	push	{r7, lr}
 800d4c0:	b082      	sub	sp, #8
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2204      	movs	r2, #4
 800d4ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	2100      	movs	r1, #0
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f000 fc70 	bl	800ddba <USBD_LL_Transmit>

  return USBD_OK;
 800d4da:	2300      	movs	r3, #0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3708      	adds	r7, #8
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2205      	movs	r2, #5
 800d4f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	2100      	movs	r1, #0
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 fc7e 	bl	800ddfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d500:	2300      	movs	r3, #0
}
 800d502:	4618      	mov	r0, r3
 800d504:	3708      	adds	r7, #8
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
	...

0800d50c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d510:	2200      	movs	r2, #0
 800d512:	4912      	ldr	r1, [pc, #72]	; (800d55c <MX_USB_Device_Init+0x50>)
 800d514:	4812      	ldr	r0, [pc, #72]	; (800d560 <MX_USB_Device_Init+0x54>)
 800d516:	f7fe fed9 	bl	800c2cc <USBD_Init>
 800d51a:	4603      	mov	r3, r0
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d001      	beq.n	800d524 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d520:	f7f4 fc3a 	bl	8001d98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d524:	490f      	ldr	r1, [pc, #60]	; (800d564 <MX_USB_Device_Init+0x58>)
 800d526:	480e      	ldr	r0, [pc, #56]	; (800d560 <MX_USB_Device_Init+0x54>)
 800d528:	f7fe ff00 	bl	800c32c <USBD_RegisterClass>
 800d52c:	4603      	mov	r3, r0
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d001      	beq.n	800d536 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d532:	f7f4 fc31 	bl	8001d98 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d536:	490c      	ldr	r1, [pc, #48]	; (800d568 <MX_USB_Device_Init+0x5c>)
 800d538:	4809      	ldr	r0, [pc, #36]	; (800d560 <MX_USB_Device_Init+0x54>)
 800d53a:	f7fe fe21 	bl	800c180 <USBD_CDC_RegisterInterface>
 800d53e:	4603      	mov	r3, r0
 800d540:	2b00      	cmp	r3, #0
 800d542:	d001      	beq.n	800d548 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d544:	f7f4 fc28 	bl	8001d98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d548:	4805      	ldr	r0, [pc, #20]	; (800d560 <MX_USB_Device_Init+0x54>)
 800d54a:	f7fe ff16 	bl	800c37a <USBD_Start>
 800d54e:	4603      	mov	r3, r0
 800d550:	2b00      	cmp	r3, #0
 800d552:	d001      	beq.n	800d558 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d554:	f7f4 fc20 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d558:	bf00      	nop
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	2000013c 	.word	0x2000013c
 800d560:	20004658 	.word	0x20004658
 800d564:	20000024 	.word	0x20000024
 800d568:	20000128 	.word	0x20000128

0800d56c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d570:	2200      	movs	r2, #0
 800d572:	4905      	ldr	r1, [pc, #20]	; (800d588 <CDC_Init_FS+0x1c>)
 800d574:	4805      	ldr	r0, [pc, #20]	; (800d58c <CDC_Init_FS+0x20>)
 800d576:	f7fe fe18 	bl	800c1aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d57a:	4905      	ldr	r1, [pc, #20]	; (800d590 <CDC_Init_FS+0x24>)
 800d57c:	4803      	ldr	r0, [pc, #12]	; (800d58c <CDC_Init_FS+0x20>)
 800d57e:	f7fe fe32 	bl	800c1e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d582:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d584:	4618      	mov	r0, r3
 800d586:	bd80      	pop	{r7, pc}
 800d588:	20005128 	.word	0x20005128
 800d58c:	20004658 	.word	0x20004658
 800d590:	20004928 	.word	0x20004928

0800d594 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d594:	b480      	push	{r7}
 800d596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d598:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr

0800d5a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b083      	sub	sp, #12
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	6039      	str	r1, [r7, #0]
 800d5ae:	71fb      	strb	r3, [r7, #7]
 800d5b0:	4613      	mov	r3, r2
 800d5b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d5b4:	79fb      	ldrb	r3, [r7, #7]
 800d5b6:	2b23      	cmp	r3, #35	; 0x23
 800d5b8:	d84a      	bhi.n	800d650 <CDC_Control_FS+0xac>
 800d5ba:	a201      	add	r2, pc, #4	; (adr r2, 800d5c0 <CDC_Control_FS+0x1c>)
 800d5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c0:	0800d651 	.word	0x0800d651
 800d5c4:	0800d651 	.word	0x0800d651
 800d5c8:	0800d651 	.word	0x0800d651
 800d5cc:	0800d651 	.word	0x0800d651
 800d5d0:	0800d651 	.word	0x0800d651
 800d5d4:	0800d651 	.word	0x0800d651
 800d5d8:	0800d651 	.word	0x0800d651
 800d5dc:	0800d651 	.word	0x0800d651
 800d5e0:	0800d651 	.word	0x0800d651
 800d5e4:	0800d651 	.word	0x0800d651
 800d5e8:	0800d651 	.word	0x0800d651
 800d5ec:	0800d651 	.word	0x0800d651
 800d5f0:	0800d651 	.word	0x0800d651
 800d5f4:	0800d651 	.word	0x0800d651
 800d5f8:	0800d651 	.word	0x0800d651
 800d5fc:	0800d651 	.word	0x0800d651
 800d600:	0800d651 	.word	0x0800d651
 800d604:	0800d651 	.word	0x0800d651
 800d608:	0800d651 	.word	0x0800d651
 800d60c:	0800d651 	.word	0x0800d651
 800d610:	0800d651 	.word	0x0800d651
 800d614:	0800d651 	.word	0x0800d651
 800d618:	0800d651 	.word	0x0800d651
 800d61c:	0800d651 	.word	0x0800d651
 800d620:	0800d651 	.word	0x0800d651
 800d624:	0800d651 	.word	0x0800d651
 800d628:	0800d651 	.word	0x0800d651
 800d62c:	0800d651 	.word	0x0800d651
 800d630:	0800d651 	.word	0x0800d651
 800d634:	0800d651 	.word	0x0800d651
 800d638:	0800d651 	.word	0x0800d651
 800d63c:	0800d651 	.word	0x0800d651
 800d640:	0800d651 	.word	0x0800d651
 800d644:	0800d651 	.word	0x0800d651
 800d648:	0800d651 	.word	0x0800d651
 800d64c:	0800d651 	.word	0x0800d651
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d650:	bf00      	nop
  }

  return (USBD_OK);
 800d652:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d654:	4618      	mov	r0, r3
 800d656:	370c      	adds	r7, #12
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr

0800d660 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b084      	sub	sp, #16
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d66a:	6879      	ldr	r1, [r7, #4]
 800d66c:	4810      	ldr	r0, [pc, #64]	; (800d6b0 <CDC_Receive_FS+0x50>)
 800d66e:	f7fe fdba 	bl	800c1e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d672:	480f      	ldr	r0, [pc, #60]	; (800d6b0 <CDC_Receive_FS+0x50>)
 800d674:	f7fe fe00 	bl	800c278 <USBD_CDC_ReceivePacket>

  memset (rx_buffer, '\0', USB_RX_BUFFER_SIZE);  // clear the buffer
 800d678:	2240      	movs	r2, #64	; 0x40
 800d67a:	2100      	movs	r1, #0
 800d67c:	480d      	ldr	r0, [pc, #52]	; (800d6b4 <CDC_Receive_FS+0x54>)
 800d67e:	f001 fa9e 	bl	800ebbe <memset>
  uint8_t len = (uint8_t)*Len;
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	73fb      	strb	r3, [r7, #15]
  memcpy(rx_buffer, Buf, len);  // copy the data to the buffer
 800d688:	7bfb      	ldrb	r3, [r7, #15]
 800d68a:	461a      	mov	r2, r3
 800d68c:	6879      	ldr	r1, [r7, #4]
 800d68e:	4809      	ldr	r0, [pc, #36]	; (800d6b4 <CDC_Receive_FS+0x54>)
 800d690:	f001 fb27 	bl	800ece2 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800d694:	7bfb      	ldrb	r3, [r7, #15]
 800d696:	461a      	mov	r2, r3
 800d698:	2100      	movs	r1, #0
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f001 fa8f 	bl	800ebbe <memset>

  conv_state = CFG_RECEIVED;
 800d6a0:	4b05      	ldr	r3, [pc, #20]	; (800d6b8 <CDC_Receive_FS+0x58>)
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800d6a6:	2300      	movs	r3, #0

  /* USER CODE END 6 */
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	3710      	adds	r7, #16
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}
 800d6b0:	20004658 	.word	0x20004658
 800d6b4:	200045e8 	.word	0x200045e8
 800d6b8:	20004628 	.word	0x20004628

0800d6bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	460b      	mov	r3, r1
 800d6c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d6cc:	4b0d      	ldr	r3, [pc, #52]	; (800d704 <CDC_Transmit_FS+0x48>)
 800d6ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d6d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d001      	beq.n	800d6e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d6de:	2301      	movs	r3, #1
 800d6e0:	e00b      	b.n	800d6fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d6e2:	887b      	ldrh	r3, [r7, #2]
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	6879      	ldr	r1, [r7, #4]
 800d6e8:	4806      	ldr	r0, [pc, #24]	; (800d704 <CDC_Transmit_FS+0x48>)
 800d6ea:	f7fe fd5e 	bl	800c1aa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d6ee:	4805      	ldr	r0, [pc, #20]	; (800d704 <CDC_Transmit_FS+0x48>)
 800d6f0:	f7fe fd92 	bl	800c218 <USBD_CDC_TransmitPacket>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3710      	adds	r7, #16
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
 800d702:	bf00      	nop
 800d704:	20004658 	.word	0x20004658

0800d708 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d708:	b480      	push	{r7}
 800d70a:	b087      	sub	sp, #28
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	60f8      	str	r0, [r7, #12]
 800d710:	60b9      	str	r1, [r7, #8]
 800d712:	4613      	mov	r3, r2
 800d714:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d716:	2300      	movs	r3, #0
 800d718:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d71a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d71e:	4618      	mov	r0, r3
 800d720:	371c      	adds	r7, #28
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr
	...

0800d72c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	4603      	mov	r3, r0
 800d734:	6039      	str	r1, [r7, #0]
 800d736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	2212      	movs	r2, #18
 800d73c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800d73e:	4b03      	ldr	r3, [pc, #12]	; (800d74c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800d740:	4618      	mov	r0, r3
 800d742:	370c      	adds	r7, #12
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr
 800d74c:	2000015c 	.word	0x2000015c

0800d750 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d750:	b480      	push	{r7}
 800d752:	b083      	sub	sp, #12
 800d754:	af00      	add	r7, sp, #0
 800d756:	4603      	mov	r3, r0
 800d758:	6039      	str	r1, [r7, #0]
 800d75a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	2204      	movs	r2, #4
 800d760:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d762:	4b03      	ldr	r3, [pc, #12]	; (800d770 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800d764:	4618      	mov	r0, r3
 800d766:	370c      	adds	r7, #12
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr
 800d770:	20000170 	.word	0x20000170

0800d774 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b082      	sub	sp, #8
 800d778:	af00      	add	r7, sp, #0
 800d77a:	4603      	mov	r3, r0
 800d77c:	6039      	str	r1, [r7, #0]
 800d77e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d780:	79fb      	ldrb	r3, [r7, #7]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d105      	bne.n	800d792 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d786:	683a      	ldr	r2, [r7, #0]
 800d788:	4907      	ldr	r1, [pc, #28]	; (800d7a8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d78a:	4808      	ldr	r0, [pc, #32]	; (800d7ac <USBD_CDC_ProductStrDescriptor+0x38>)
 800d78c:	f7ff fddd 	bl	800d34a <USBD_GetString>
 800d790:	e004      	b.n	800d79c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d792:	683a      	ldr	r2, [r7, #0]
 800d794:	4904      	ldr	r1, [pc, #16]	; (800d7a8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d796:	4805      	ldr	r0, [pc, #20]	; (800d7ac <USBD_CDC_ProductStrDescriptor+0x38>)
 800d798:	f7ff fdd7 	bl	800d34a <USBD_GetString>
  }
  return USBD_StrDesc;
 800d79c:	4b02      	ldr	r3, [pc, #8]	; (800d7a8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3708      	adds	r7, #8
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	20005928 	.word	0x20005928
 800d7ac:	08011cd0 	.word	0x08011cd0

0800d7b0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b082      	sub	sp, #8
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	6039      	str	r1, [r7, #0]
 800d7ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d7bc:	683a      	ldr	r2, [r7, #0]
 800d7be:	4904      	ldr	r1, [pc, #16]	; (800d7d0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800d7c0:	4804      	ldr	r0, [pc, #16]	; (800d7d4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800d7c2:	f7ff fdc2 	bl	800d34a <USBD_GetString>
  return USBD_StrDesc;
 800d7c6:	4b02      	ldr	r3, [pc, #8]	; (800d7d0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3708      	adds	r7, #8
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	20005928 	.word	0x20005928
 800d7d4:	08011ce0 	.word	0x08011ce0

0800d7d8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	4603      	mov	r3, r0
 800d7e0:	6039      	str	r1, [r7, #0]
 800d7e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	221a      	movs	r2, #26
 800d7e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d7ea:	f000 f843 	bl	800d874 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d7ee:	4b02      	ldr	r3, [pc, #8]	; (800d7f8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3708      	adds	r7, #8
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	20000174 	.word	0x20000174

0800d7fc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	4603      	mov	r3, r0
 800d804:	6039      	str	r1, [r7, #0]
 800d806:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d808:	79fb      	ldrb	r3, [r7, #7]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d105      	bne.n	800d81a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d80e:	683a      	ldr	r2, [r7, #0]
 800d810:	4907      	ldr	r1, [pc, #28]	; (800d830 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d812:	4808      	ldr	r0, [pc, #32]	; (800d834 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d814:	f7ff fd99 	bl	800d34a <USBD_GetString>
 800d818:	e004      	b.n	800d824 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d81a:	683a      	ldr	r2, [r7, #0]
 800d81c:	4904      	ldr	r1, [pc, #16]	; (800d830 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d81e:	4805      	ldr	r0, [pc, #20]	; (800d834 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d820:	f7ff fd93 	bl	800d34a <USBD_GetString>
  }
  return USBD_StrDesc;
 800d824:	4b02      	ldr	r3, [pc, #8]	; (800d830 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800d826:	4618      	mov	r0, r3
 800d828:	3708      	adds	r7, #8
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	bf00      	nop
 800d830:	20005928 	.word	0x20005928
 800d834:	08011ce4 	.word	0x08011ce4

0800d838 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	4603      	mov	r3, r0
 800d840:	6039      	str	r1, [r7, #0]
 800d842:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d844:	79fb      	ldrb	r3, [r7, #7]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d105      	bne.n	800d856 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d84a:	683a      	ldr	r2, [r7, #0]
 800d84c:	4907      	ldr	r1, [pc, #28]	; (800d86c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d84e:	4808      	ldr	r0, [pc, #32]	; (800d870 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d850:	f7ff fd7b 	bl	800d34a <USBD_GetString>
 800d854:	e004      	b.n	800d860 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d856:	683a      	ldr	r2, [r7, #0]
 800d858:	4904      	ldr	r1, [pc, #16]	; (800d86c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d85a:	4805      	ldr	r0, [pc, #20]	; (800d870 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d85c:	f7ff fd75 	bl	800d34a <USBD_GetString>
  }
  return USBD_StrDesc;
 800d860:	4b02      	ldr	r3, [pc, #8]	; (800d86c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800d862:	4618      	mov	r0, r3
 800d864:	3708      	adds	r7, #8
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	20005928 	.word	0x20005928
 800d870:	08011cf0 	.word	0x08011cf0

0800d874 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b084      	sub	sp, #16
 800d878:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d87a:	4b0f      	ldr	r3, [pc, #60]	; (800d8b8 <Get_SerialNum+0x44>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d880:	4b0e      	ldr	r3, [pc, #56]	; (800d8bc <Get_SerialNum+0x48>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d886:	4b0e      	ldr	r3, [pc, #56]	; (800d8c0 <Get_SerialNum+0x4c>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d88c:	68fa      	ldr	r2, [r7, #12]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	4413      	add	r3, r2
 800d892:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d009      	beq.n	800d8ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d89a:	2208      	movs	r2, #8
 800d89c:	4909      	ldr	r1, [pc, #36]	; (800d8c4 <Get_SerialNum+0x50>)
 800d89e:	68f8      	ldr	r0, [r7, #12]
 800d8a0:	f000 f814 	bl	800d8cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d8a4:	2204      	movs	r2, #4
 800d8a6:	4908      	ldr	r1, [pc, #32]	; (800d8c8 <Get_SerialNum+0x54>)
 800d8a8:	68b8      	ldr	r0, [r7, #8]
 800d8aa:	f000 f80f 	bl	800d8cc <IntToUnicode>
  }
}
 800d8ae:	bf00      	nop
 800d8b0:	3710      	adds	r7, #16
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	1fff7590 	.word	0x1fff7590
 800d8bc:	1fff7594 	.word	0x1fff7594
 800d8c0:	1fff7598 	.word	0x1fff7598
 800d8c4:	20000176 	.word	0x20000176
 800d8c8:	20000186 	.word	0x20000186

0800d8cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b087      	sub	sp, #28
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	4613      	mov	r3, r2
 800d8d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d8de:	2300      	movs	r3, #0
 800d8e0:	75fb      	strb	r3, [r7, #23]
 800d8e2:	e027      	b.n	800d934 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	0f1b      	lsrs	r3, r3, #28
 800d8e8:	2b09      	cmp	r3, #9
 800d8ea:	d80b      	bhi.n	800d904 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	0f1b      	lsrs	r3, r3, #28
 800d8f0:	b2da      	uxtb	r2, r3
 800d8f2:	7dfb      	ldrb	r3, [r7, #23]
 800d8f4:	005b      	lsls	r3, r3, #1
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	440b      	add	r3, r1
 800d8fc:	3230      	adds	r2, #48	; 0x30
 800d8fe:	b2d2      	uxtb	r2, r2
 800d900:	701a      	strb	r2, [r3, #0]
 800d902:	e00a      	b.n	800d91a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	0f1b      	lsrs	r3, r3, #28
 800d908:	b2da      	uxtb	r2, r3
 800d90a:	7dfb      	ldrb	r3, [r7, #23]
 800d90c:	005b      	lsls	r3, r3, #1
 800d90e:	4619      	mov	r1, r3
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	440b      	add	r3, r1
 800d914:	3237      	adds	r2, #55	; 0x37
 800d916:	b2d2      	uxtb	r2, r2
 800d918:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	011b      	lsls	r3, r3, #4
 800d91e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d920:	7dfb      	ldrb	r3, [r7, #23]
 800d922:	005b      	lsls	r3, r3, #1
 800d924:	3301      	adds	r3, #1
 800d926:	68ba      	ldr	r2, [r7, #8]
 800d928:	4413      	add	r3, r2
 800d92a:	2200      	movs	r2, #0
 800d92c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d92e:	7dfb      	ldrb	r3, [r7, #23]
 800d930:	3301      	adds	r3, #1
 800d932:	75fb      	strb	r3, [r7, #23]
 800d934:	7dfa      	ldrb	r2, [r7, #23]
 800d936:	79fb      	ldrb	r3, [r7, #7]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d3d3      	bcc.n	800d8e4 <IntToUnicode+0x18>
  }
}
 800d93c:	bf00      	nop
 800d93e:	bf00      	nop
 800d940:	371c      	adds	r7, #28
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr
	...

0800d94c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b098      	sub	sp, #96	; 0x60
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d954:	f107 030c 	add.w	r3, r7, #12
 800d958:	2254      	movs	r2, #84	; 0x54
 800d95a:	2100      	movs	r1, #0
 800d95c:	4618      	mov	r0, r3
 800d95e:	f001 f92e 	bl	800ebbe <memset>
  if(pcdHandle->Instance==USB)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	4a19      	ldr	r2, [pc, #100]	; (800d9cc <HAL_PCD_MspInit+0x80>)
 800d968:	4293      	cmp	r3, r2
 800d96a:	d12a      	bne.n	800d9c2 <HAL_PCD_MspInit+0x76>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d96c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d970:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d972:	2300      	movs	r3, #0
 800d974:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d976:	f107 030c 	add.w	r3, r7, #12
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7fa fdf6 	bl	800856c <HAL_RCCEx_PeriphCLKConfig>
 800d980:	4603      	mov	r3, r0
 800d982:	2b00      	cmp	r3, #0
 800d984:	d001      	beq.n	800d98a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800d986:	f7f4 fa07 	bl	8001d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d98a:	4b11      	ldr	r3, [pc, #68]	; (800d9d0 <HAL_PCD_MspInit+0x84>)
 800d98c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d98e:	4a10      	ldr	r2, [pc, #64]	; (800d9d0 <HAL_PCD_MspInit+0x84>)
 800d990:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d994:	6593      	str	r3, [r2, #88]	; 0x58
 800d996:	4b0e      	ldr	r3, [pc, #56]	; (800d9d0 <HAL_PCD_MspInit+0x84>)
 800d998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d99a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d99e:	60bb      	str	r3, [r7, #8]
 800d9a0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	2100      	movs	r1, #0
 800d9a6:	2013      	movs	r0, #19
 800d9a8:	f7f6 fda9 	bl	80044fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800d9ac:	2013      	movs	r0, #19
 800d9ae:	f7f6 fdc0 	bl	8004532 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	2100      	movs	r1, #0
 800d9b6:	2014      	movs	r0, #20
 800d9b8:	f7f6 fda1 	bl	80044fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d9bc:	2014      	movs	r0, #20
 800d9be:	f7f6 fdb8 	bl	8004532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d9c2:	bf00      	nop
 800d9c4:	3760      	adds	r7, #96	; 0x60
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
 800d9ca:	bf00      	nop
 800d9cc:	40005c00 	.word	0x40005c00
 800d9d0:	40021000 	.word	0x40021000

0800d9d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b082      	sub	sp, #8
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	4610      	mov	r0, r2
 800d9ec:	f7fe fd10 	bl	800c410 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800d9f0:	bf00      	nop
 800d9f2:	3708      	adds	r7, #8
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b082      	sub	sp, #8
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	460b      	mov	r3, r1
 800da02:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800da0a:	78fa      	ldrb	r2, [r7, #3]
 800da0c:	6879      	ldr	r1, [r7, #4]
 800da0e:	4613      	mov	r3, r2
 800da10:	009b      	lsls	r3, r3, #2
 800da12:	4413      	add	r3, r2
 800da14:	00db      	lsls	r3, r3, #3
 800da16:	440b      	add	r3, r1
 800da18:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800da1c:	681a      	ldr	r2, [r3, #0]
 800da1e:	78fb      	ldrb	r3, [r7, #3]
 800da20:	4619      	mov	r1, r3
 800da22:	f7fe fd4a 	bl	800c4ba <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800da26:	bf00      	nop
 800da28:	3708      	adds	r7, #8
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da2e:	b580      	push	{r7, lr}
 800da30:	b082      	sub	sp, #8
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
 800da36:	460b      	mov	r3, r1
 800da38:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800da40:	78fa      	ldrb	r2, [r7, #3]
 800da42:	6879      	ldr	r1, [r7, #4]
 800da44:	4613      	mov	r3, r2
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	4413      	add	r3, r2
 800da4a:	00db      	lsls	r3, r3, #3
 800da4c:	440b      	add	r3, r1
 800da4e:	3324      	adds	r3, #36	; 0x24
 800da50:	681a      	ldr	r2, [r3, #0]
 800da52:	78fb      	ldrb	r3, [r7, #3]
 800da54:	4619      	mov	r1, r3
 800da56:	f7fe fd93 	bl	800c580 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800da5a:	bf00      	nop
 800da5c:	3708      	adds	r7, #8
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}

0800da62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da62:	b580      	push	{r7, lr}
 800da64:	b082      	sub	sp, #8
 800da66:	af00      	add	r7, sp, #0
 800da68:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800da70:	4618      	mov	r0, r3
 800da72:	f7fe fea7 	bl	800c7c4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800da76:	bf00      	nop
 800da78:	3708      	adds	r7, #8
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}

0800da7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da7e:	b580      	push	{r7, lr}
 800da80:	b084      	sub	sp, #16
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800da86:	2301      	movs	r3, #1
 800da88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	795b      	ldrb	r3, [r3, #5]
 800da8e:	2b02      	cmp	r3, #2
 800da90:	d001      	beq.n	800da96 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800da92:	f7f4 f981 	bl	8001d98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800da9c:	7bfa      	ldrb	r2, [r7, #15]
 800da9e:	4611      	mov	r1, r2
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7fe fe51 	bl	800c748 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800daac:	4618      	mov	r0, r3
 800daae:	f7fe fdfd 	bl	800c6ac <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800dab2:	bf00      	nop
 800dab4:	3710      	adds	r7, #16
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}
	...

0800dabc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b082      	sub	sp, #8
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800daca:	4618      	mov	r0, r3
 800dacc:	f7fe fe4c 	bl	800c768 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	7a5b      	ldrb	r3, [r3, #9]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d005      	beq.n	800dae4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dad8:	4b04      	ldr	r3, [pc, #16]	; (800daec <HAL_PCD_SuspendCallback+0x30>)
 800dada:	691b      	ldr	r3, [r3, #16]
 800dadc:	4a03      	ldr	r2, [pc, #12]	; (800daec <HAL_PCD_SuspendCallback+0x30>)
 800dade:	f043 0306 	orr.w	r3, r3, #6
 800dae2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800dae4:	bf00      	nop
 800dae6:	3708      	adds	r7, #8
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}
 800daec:	e000ed00 	.word	0xe000ed00

0800daf0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b082      	sub	sp, #8
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	7a5b      	ldrb	r3, [r3, #9]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d007      	beq.n	800db10 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db00:	4b08      	ldr	r3, [pc, #32]	; (800db24 <HAL_PCD_ResumeCallback+0x34>)
 800db02:	691b      	ldr	r3, [r3, #16]
 800db04:	4a07      	ldr	r2, [pc, #28]	; (800db24 <HAL_PCD_ResumeCallback+0x34>)
 800db06:	f023 0306 	bic.w	r3, r3, #6
 800db0a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800db0c:	f000 f9f8 	bl	800df00 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800db16:	4618      	mov	r0, r3
 800db18:	f7fe fe3c 	bl	800c794 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800db1c:	bf00      	nop
 800db1e:	3708      	adds	r7, #8
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}
 800db24:	e000ed00 	.word	0xe000ed00

0800db28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800db30:	4a2b      	ldr	r2, [pc, #172]	; (800dbe0 <USBD_LL_Init+0xb8>)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	4a29      	ldr	r2, [pc, #164]	; (800dbe0 <USBD_LL_Init+0xb8>)
 800db3c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800db40:	4b27      	ldr	r3, [pc, #156]	; (800dbe0 <USBD_LL_Init+0xb8>)
 800db42:	4a28      	ldr	r2, [pc, #160]	; (800dbe4 <USBD_LL_Init+0xbc>)
 800db44:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800db46:	4b26      	ldr	r3, [pc, #152]	; (800dbe0 <USBD_LL_Init+0xb8>)
 800db48:	2208      	movs	r2, #8
 800db4a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800db4c:	4b24      	ldr	r3, [pc, #144]	; (800dbe0 <USBD_LL_Init+0xb8>)
 800db4e:	2202      	movs	r2, #2
 800db50:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800db52:	4b23      	ldr	r3, [pc, #140]	; (800dbe0 <USBD_LL_Init+0xb8>)
 800db54:	2202      	movs	r2, #2
 800db56:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800db58:	4b21      	ldr	r3, [pc, #132]	; (800dbe0 <USBD_LL_Init+0xb8>)
 800db5a:	2200      	movs	r2, #0
 800db5c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800db5e:	4b20      	ldr	r3, [pc, #128]	; (800dbe0 <USBD_LL_Init+0xb8>)
 800db60:	2200      	movs	r2, #0
 800db62:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800db64:	4b1e      	ldr	r3, [pc, #120]	; (800dbe0 <USBD_LL_Init+0xb8>)
 800db66:	2200      	movs	r2, #0
 800db68:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800db6a:	4b1d      	ldr	r3, [pc, #116]	; (800dbe0 <USBD_LL_Init+0xb8>)
 800db6c:	2200      	movs	r2, #0
 800db6e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800db70:	481b      	ldr	r0, [pc, #108]	; (800dbe0 <USBD_LL_Init+0xb8>)
 800db72:	f7f8 fa10 	bl	8005f96 <HAL_PCD_Init>
 800db76:	4603      	mov	r3, r0
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d001      	beq.n	800db80 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800db7c:	f7f4 f90c 	bl	8001d98 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800db86:	2318      	movs	r3, #24
 800db88:	2200      	movs	r2, #0
 800db8a:	2100      	movs	r1, #0
 800db8c:	f7f9 feca 	bl	8007924 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800db96:	2358      	movs	r3, #88	; 0x58
 800db98:	2200      	movs	r2, #0
 800db9a:	2180      	movs	r1, #128	; 0x80
 800db9c:	f7f9 fec2 	bl	8007924 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dba6:	23c0      	movs	r3, #192	; 0xc0
 800dba8:	2200      	movs	r2, #0
 800dbaa:	2181      	movs	r1, #129	; 0x81
 800dbac:	f7f9 feba 	bl	8007924 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dbb6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800dbba:	2200      	movs	r2, #0
 800dbbc:	2101      	movs	r1, #1
 800dbbe:	f7f9 feb1 	bl	8007924 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dbc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dbcc:	2200      	movs	r2, #0
 800dbce:	2182      	movs	r1, #130	; 0x82
 800dbd0:	f7f9 fea8 	bl	8007924 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800dbd4:	2300      	movs	r3, #0
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3708      	adds	r7, #8
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	20005b28 	.word	0x20005b28
 800dbe4:	40005c00 	.word	0x40005c00

0800dbe8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7f8 fa97 	bl	8006132 <HAL_PCD_Start>
 800dc04:	4603      	mov	r3, r0
 800dc06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc08:	7bfb      	ldrb	r3, [r7, #15]
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f000 f97e 	bl	800df0c <USBD_Get_USB_Status>
 800dc10:	4603      	mov	r3, r0
 800dc12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc14:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3710      	adds	r7, #16
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}

0800dc1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dc1e:	b580      	push	{r7, lr}
 800dc20:	b084      	sub	sp, #16
 800dc22:	af00      	add	r7, sp, #0
 800dc24:	6078      	str	r0, [r7, #4]
 800dc26:	4608      	mov	r0, r1
 800dc28:	4611      	mov	r1, r2
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	70fb      	strb	r3, [r7, #3]
 800dc30:	460b      	mov	r3, r1
 800dc32:	70bb      	strb	r3, [r7, #2]
 800dc34:	4613      	mov	r3, r2
 800dc36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dc46:	78bb      	ldrb	r3, [r7, #2]
 800dc48:	883a      	ldrh	r2, [r7, #0]
 800dc4a:	78f9      	ldrb	r1, [r7, #3]
 800dc4c:	f7f8 fbde 	bl	800640c <HAL_PCD_EP_Open>
 800dc50:	4603      	mov	r3, r0
 800dc52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc54:	7bfb      	ldrb	r3, [r7, #15]
 800dc56:	4618      	mov	r0, r3
 800dc58:	f000 f958 	bl	800df0c <USBD_Get_USB_Status>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc60:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	3710      	adds	r7, #16
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}

0800dc6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc6a:	b580      	push	{r7, lr}
 800dc6c:	b084      	sub	sp, #16
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	6078      	str	r0, [r7, #4]
 800dc72:	460b      	mov	r3, r1
 800dc74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc76:	2300      	movs	r3, #0
 800dc78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dc84:	78fa      	ldrb	r2, [r7, #3]
 800dc86:	4611      	mov	r1, r2
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f7f8 fc1c 	bl	80064c6 <HAL_PCD_EP_Close>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc92:	7bfb      	ldrb	r3, [r7, #15]
 800dc94:	4618      	mov	r0, r3
 800dc96:	f000 f939 	bl	800df0c <USBD_Get_USB_Status>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3710      	adds	r7, #16
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	460b      	mov	r3, r1
 800dcb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dcc2:	78fa      	ldrb	r2, [r7, #3]
 800dcc4:	4611      	mov	r1, r2
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f7f8 fcc5 	bl	8006656 <HAL_PCD_EP_SetStall>
 800dccc:	4603      	mov	r3, r0
 800dcce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcd0:	7bfb      	ldrb	r3, [r7, #15]
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f000 f91a 	bl	800df0c <USBD_Get_USB_Status>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3710      	adds	r7, #16
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}

0800dce6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dce6:	b580      	push	{r7, lr}
 800dce8:	b084      	sub	sp, #16
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]
 800dcee:	460b      	mov	r3, r1
 800dcf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dd00:	78fa      	ldrb	r2, [r7, #3]
 800dd02:	4611      	mov	r1, r2
 800dd04:	4618      	mov	r0, r3
 800dd06:	f7f8 fcf8 	bl	80066fa <HAL_PCD_EP_ClrStall>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd0e:	7bfb      	ldrb	r3, [r7, #15]
 800dd10:	4618      	mov	r0, r3
 800dd12:	f000 f8fb 	bl	800df0c <USBD_Get_USB_Status>
 800dd16:	4603      	mov	r3, r0
 800dd18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3710      	adds	r7, #16
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}

0800dd24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd24:	b480      	push	{r7}
 800dd26:	b085      	sub	sp, #20
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	460b      	mov	r3, r1
 800dd2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dd36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dd38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	da0b      	bge.n	800dd58 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dd40:	78fb      	ldrb	r3, [r7, #3]
 800dd42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd46:	68f9      	ldr	r1, [r7, #12]
 800dd48:	4613      	mov	r3, r2
 800dd4a:	009b      	lsls	r3, r3, #2
 800dd4c:	4413      	add	r3, r2
 800dd4e:	00db      	lsls	r3, r3, #3
 800dd50:	440b      	add	r3, r1
 800dd52:	3312      	adds	r3, #18
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	e00b      	b.n	800dd70 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dd58:	78fb      	ldrb	r3, [r7, #3]
 800dd5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd5e:	68f9      	ldr	r1, [r7, #12]
 800dd60:	4613      	mov	r3, r2
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	4413      	add	r3, r2
 800dd66:	00db      	lsls	r3, r3, #3
 800dd68:	440b      	add	r3, r1
 800dd6a:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800dd6e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3714      	adds	r7, #20
 800dd74:	46bd      	mov	sp, r7
 800dd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7a:	4770      	bx	lr

0800dd7c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	460b      	mov	r3, r1
 800dd86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dd96:	78fa      	ldrb	r2, [r7, #3]
 800dd98:	4611      	mov	r1, r2
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f7f8 fb12 	bl	80063c4 <HAL_PCD_SetAddress>
 800dda0:	4603      	mov	r3, r0
 800dda2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dda4:	7bfb      	ldrb	r3, [r7, #15]
 800dda6:	4618      	mov	r0, r3
 800dda8:	f000 f8b0 	bl	800df0c <USBD_Get_USB_Status>
 800ddac:	4603      	mov	r3, r0
 800ddae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3710      	adds	r7, #16
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}

0800ddba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ddba:	b580      	push	{r7, lr}
 800ddbc:	b086      	sub	sp, #24
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	60f8      	str	r0, [r7, #12]
 800ddc2:	607a      	str	r2, [r7, #4]
 800ddc4:	603b      	str	r3, [r7, #0]
 800ddc6:	460b      	mov	r3, r1
 800ddc8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ddd8:	7af9      	ldrb	r1, [r7, #11]
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	687a      	ldr	r2, [r7, #4]
 800ddde:	f7f8 fc03 	bl	80065e8 <HAL_PCD_EP_Transmit>
 800dde2:	4603      	mov	r3, r0
 800dde4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dde6:	7dfb      	ldrb	r3, [r7, #23]
 800dde8:	4618      	mov	r0, r3
 800ddea:	f000 f88f 	bl	800df0c <USBD_Get_USB_Status>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ddf2:	7dbb      	ldrb	r3, [r7, #22]
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3718      	adds	r7, #24
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}

0800ddfc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b086      	sub	sp, #24
 800de00:	af00      	add	r7, sp, #0
 800de02:	60f8      	str	r0, [r7, #12]
 800de04:	607a      	str	r2, [r7, #4]
 800de06:	603b      	str	r3, [r7, #0]
 800de08:	460b      	mov	r3, r1
 800de0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de0c:	2300      	movs	r3, #0
 800de0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de10:	2300      	movs	r3, #0
 800de12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800de1a:	7af9      	ldrb	r1, [r7, #11]
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	687a      	ldr	r2, [r7, #4]
 800de20:	f7f8 fb99 	bl	8006556 <HAL_PCD_EP_Receive>
 800de24:	4603      	mov	r3, r0
 800de26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de28:	7dfb      	ldrb	r3, [r7, #23]
 800de2a:	4618      	mov	r0, r3
 800de2c:	f000 f86e 	bl	800df0c <USBD_Get_USB_Status>
 800de30:	4603      	mov	r3, r0
 800de32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de34:	7dbb      	ldrb	r3, [r7, #22]
}
 800de36:	4618      	mov	r0, r3
 800de38:	3718      	adds	r7, #24
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}

0800de3e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de3e:	b580      	push	{r7, lr}
 800de40:	b082      	sub	sp, #8
 800de42:	af00      	add	r7, sp, #0
 800de44:	6078      	str	r0, [r7, #4]
 800de46:	460b      	mov	r3, r1
 800de48:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800de50:	78fa      	ldrb	r2, [r7, #3]
 800de52:	4611      	mov	r1, r2
 800de54:	4618      	mov	r0, r3
 800de56:	f7f8 fbaf 	bl	80065b8 <HAL_PCD_EP_GetRxCount>
 800de5a:	4603      	mov	r3, r0
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3708      	adds	r7, #8
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	460b      	mov	r3, r1
 800de6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800de70:	78fb      	ldrb	r3, [r7, #3]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d002      	beq.n	800de7c <HAL_PCDEx_LPM_Callback+0x18>
 800de76:	2b01      	cmp	r3, #1
 800de78:	d013      	beq.n	800dea2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800de7a:	e023      	b.n	800dec4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	7a5b      	ldrb	r3, [r3, #9]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d007      	beq.n	800de94 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800de84:	f000 f83c 	bl	800df00 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800de88:	4b10      	ldr	r3, [pc, #64]	; (800decc <HAL_PCDEx_LPM_Callback+0x68>)
 800de8a:	691b      	ldr	r3, [r3, #16]
 800de8c:	4a0f      	ldr	r2, [pc, #60]	; (800decc <HAL_PCDEx_LPM_Callback+0x68>)
 800de8e:	f023 0306 	bic.w	r3, r3, #6
 800de92:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7fe fc7a 	bl	800c794 <USBD_LL_Resume>
    break;
 800dea0:	e010      	b.n	800dec4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dea8:	4618      	mov	r0, r3
 800deaa:	f7fe fc5d 	bl	800c768 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	7a5b      	ldrb	r3, [r3, #9]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d005      	beq.n	800dec2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800deb6:	4b05      	ldr	r3, [pc, #20]	; (800decc <HAL_PCDEx_LPM_Callback+0x68>)
 800deb8:	691b      	ldr	r3, [r3, #16]
 800deba:	4a04      	ldr	r2, [pc, #16]	; (800decc <HAL_PCDEx_LPM_Callback+0x68>)
 800debc:	f043 0306 	orr.w	r3, r3, #6
 800dec0:	6113      	str	r3, [r2, #16]
    break;
 800dec2:	bf00      	nop
}
 800dec4:	bf00      	nop
 800dec6:	3708      	adds	r7, #8
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}
 800decc:	e000ed00 	.word	0xe000ed00

0800ded0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ded0:	b480      	push	{r7}
 800ded2:	b083      	sub	sp, #12
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ded8:	4b03      	ldr	r3, [pc, #12]	; (800dee8 <USBD_static_malloc+0x18>)
}
 800deda:	4618      	mov	r0, r3
 800dedc:	370c      	adds	r7, #12
 800dede:	46bd      	mov	sp, r7
 800dee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee4:	4770      	bx	lr
 800dee6:	bf00      	nop
 800dee8:	20005e04 	.word	0x20005e04

0800deec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800deec:	b480      	push	{r7}
 800deee:	b083      	sub	sp, #12
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]

}
 800def4:	bf00      	nop
 800def6:	370c      	adds	r7, #12
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr

0800df00 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800df04:	f7f2 ffb0 	bl	8000e68 <SystemClock_Config>
}
 800df08:	bf00      	nop
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b085      	sub	sp, #20
 800df10:	af00      	add	r7, sp, #0
 800df12:	4603      	mov	r3, r0
 800df14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df16:	2300      	movs	r3, #0
 800df18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800df1a:	79fb      	ldrb	r3, [r7, #7]
 800df1c:	2b03      	cmp	r3, #3
 800df1e:	d817      	bhi.n	800df50 <USBD_Get_USB_Status+0x44>
 800df20:	a201      	add	r2, pc, #4	; (adr r2, 800df28 <USBD_Get_USB_Status+0x1c>)
 800df22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df26:	bf00      	nop
 800df28:	0800df39 	.word	0x0800df39
 800df2c:	0800df3f 	.word	0x0800df3f
 800df30:	0800df45 	.word	0x0800df45
 800df34:	0800df4b 	.word	0x0800df4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800df38:	2300      	movs	r3, #0
 800df3a:	73fb      	strb	r3, [r7, #15]
    break;
 800df3c:	e00b      	b.n	800df56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df3e:	2303      	movs	r3, #3
 800df40:	73fb      	strb	r3, [r7, #15]
    break;
 800df42:	e008      	b.n	800df56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df44:	2301      	movs	r3, #1
 800df46:	73fb      	strb	r3, [r7, #15]
    break;
 800df48:	e005      	b.n	800df56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df4a:	2303      	movs	r3, #3
 800df4c:	73fb      	strb	r3, [r7, #15]
    break;
 800df4e:	e002      	b.n	800df56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800df50:	2303      	movs	r3, #3
 800df52:	73fb      	strb	r3, [r7, #15]
    break;
 800df54:	bf00      	nop
  }
  return usb_status;
 800df56:	7bfb      	ldrb	r3, [r7, #15]
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3714      	adds	r7, #20
 800df5c:	46bd      	mov	sp, r7
 800df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df62:	4770      	bx	lr

0800df64 <atoi>:
 800df64:	220a      	movs	r2, #10
 800df66:	2100      	movs	r1, #0
 800df68:	f000 b882 	b.w	800e070 <strtol>

0800df6c <_strtol_l.constprop.0>:
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df72:	d001      	beq.n	800df78 <_strtol_l.constprop.0+0xc>
 800df74:	2b24      	cmp	r3, #36	; 0x24
 800df76:	d906      	bls.n	800df86 <_strtol_l.constprop.0+0x1a>
 800df78:	f000 fe86 	bl	800ec88 <__errno>
 800df7c:	2316      	movs	r3, #22
 800df7e:	6003      	str	r3, [r0, #0]
 800df80:	2000      	movs	r0, #0
 800df82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df86:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e06c <_strtol_l.constprop.0+0x100>
 800df8a:	460d      	mov	r5, r1
 800df8c:	462e      	mov	r6, r5
 800df8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df92:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800df96:	f017 0708 	ands.w	r7, r7, #8
 800df9a:	d1f7      	bne.n	800df8c <_strtol_l.constprop.0+0x20>
 800df9c:	2c2d      	cmp	r4, #45	; 0x2d
 800df9e:	d132      	bne.n	800e006 <_strtol_l.constprop.0+0x9a>
 800dfa0:	782c      	ldrb	r4, [r5, #0]
 800dfa2:	2701      	movs	r7, #1
 800dfa4:	1cb5      	adds	r5, r6, #2
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d05b      	beq.n	800e062 <_strtol_l.constprop.0+0xf6>
 800dfaa:	2b10      	cmp	r3, #16
 800dfac:	d109      	bne.n	800dfc2 <_strtol_l.constprop.0+0x56>
 800dfae:	2c30      	cmp	r4, #48	; 0x30
 800dfb0:	d107      	bne.n	800dfc2 <_strtol_l.constprop.0+0x56>
 800dfb2:	782c      	ldrb	r4, [r5, #0]
 800dfb4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dfb8:	2c58      	cmp	r4, #88	; 0x58
 800dfba:	d14d      	bne.n	800e058 <_strtol_l.constprop.0+0xec>
 800dfbc:	786c      	ldrb	r4, [r5, #1]
 800dfbe:	2310      	movs	r3, #16
 800dfc0:	3502      	adds	r5, #2
 800dfc2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800dfc6:	f108 38ff 	add.w	r8, r8, #4294967295
 800dfca:	f04f 0e00 	mov.w	lr, #0
 800dfce:	fbb8 f9f3 	udiv	r9, r8, r3
 800dfd2:	4676      	mov	r6, lr
 800dfd4:	fb03 8a19 	mls	sl, r3, r9, r8
 800dfd8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800dfdc:	f1bc 0f09 	cmp.w	ip, #9
 800dfe0:	d816      	bhi.n	800e010 <_strtol_l.constprop.0+0xa4>
 800dfe2:	4664      	mov	r4, ip
 800dfe4:	42a3      	cmp	r3, r4
 800dfe6:	dd24      	ble.n	800e032 <_strtol_l.constprop.0+0xc6>
 800dfe8:	f1be 3fff 	cmp.w	lr, #4294967295
 800dfec:	d008      	beq.n	800e000 <_strtol_l.constprop.0+0x94>
 800dfee:	45b1      	cmp	r9, r6
 800dff0:	d31c      	bcc.n	800e02c <_strtol_l.constprop.0+0xc0>
 800dff2:	d101      	bne.n	800dff8 <_strtol_l.constprop.0+0x8c>
 800dff4:	45a2      	cmp	sl, r4
 800dff6:	db19      	blt.n	800e02c <_strtol_l.constprop.0+0xc0>
 800dff8:	fb06 4603 	mla	r6, r6, r3, r4
 800dffc:	f04f 0e01 	mov.w	lr, #1
 800e000:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e004:	e7e8      	b.n	800dfd8 <_strtol_l.constprop.0+0x6c>
 800e006:	2c2b      	cmp	r4, #43	; 0x2b
 800e008:	bf04      	itt	eq
 800e00a:	782c      	ldrbeq	r4, [r5, #0]
 800e00c:	1cb5      	addeq	r5, r6, #2
 800e00e:	e7ca      	b.n	800dfa6 <_strtol_l.constprop.0+0x3a>
 800e010:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e014:	f1bc 0f19 	cmp.w	ip, #25
 800e018:	d801      	bhi.n	800e01e <_strtol_l.constprop.0+0xb2>
 800e01a:	3c37      	subs	r4, #55	; 0x37
 800e01c:	e7e2      	b.n	800dfe4 <_strtol_l.constprop.0+0x78>
 800e01e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e022:	f1bc 0f19 	cmp.w	ip, #25
 800e026:	d804      	bhi.n	800e032 <_strtol_l.constprop.0+0xc6>
 800e028:	3c57      	subs	r4, #87	; 0x57
 800e02a:	e7db      	b.n	800dfe4 <_strtol_l.constprop.0+0x78>
 800e02c:	f04f 3eff 	mov.w	lr, #4294967295
 800e030:	e7e6      	b.n	800e000 <_strtol_l.constprop.0+0x94>
 800e032:	f1be 3fff 	cmp.w	lr, #4294967295
 800e036:	d105      	bne.n	800e044 <_strtol_l.constprop.0+0xd8>
 800e038:	2322      	movs	r3, #34	; 0x22
 800e03a:	6003      	str	r3, [r0, #0]
 800e03c:	4646      	mov	r6, r8
 800e03e:	b942      	cbnz	r2, 800e052 <_strtol_l.constprop.0+0xe6>
 800e040:	4630      	mov	r0, r6
 800e042:	e79e      	b.n	800df82 <_strtol_l.constprop.0+0x16>
 800e044:	b107      	cbz	r7, 800e048 <_strtol_l.constprop.0+0xdc>
 800e046:	4276      	negs	r6, r6
 800e048:	2a00      	cmp	r2, #0
 800e04a:	d0f9      	beq.n	800e040 <_strtol_l.constprop.0+0xd4>
 800e04c:	f1be 0f00 	cmp.w	lr, #0
 800e050:	d000      	beq.n	800e054 <_strtol_l.constprop.0+0xe8>
 800e052:	1e69      	subs	r1, r5, #1
 800e054:	6011      	str	r1, [r2, #0]
 800e056:	e7f3      	b.n	800e040 <_strtol_l.constprop.0+0xd4>
 800e058:	2430      	movs	r4, #48	; 0x30
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d1b1      	bne.n	800dfc2 <_strtol_l.constprop.0+0x56>
 800e05e:	2308      	movs	r3, #8
 800e060:	e7af      	b.n	800dfc2 <_strtol_l.constprop.0+0x56>
 800e062:	2c30      	cmp	r4, #48	; 0x30
 800e064:	d0a5      	beq.n	800dfb2 <_strtol_l.constprop.0+0x46>
 800e066:	230a      	movs	r3, #10
 800e068:	e7ab      	b.n	800dfc2 <_strtol_l.constprop.0+0x56>
 800e06a:	bf00      	nop
 800e06c:	08011e99 	.word	0x08011e99

0800e070 <strtol>:
 800e070:	4613      	mov	r3, r2
 800e072:	460a      	mov	r2, r1
 800e074:	4601      	mov	r1, r0
 800e076:	4802      	ldr	r0, [pc, #8]	; (800e080 <strtol+0x10>)
 800e078:	6800      	ldr	r0, [r0, #0]
 800e07a:	f7ff bf77 	b.w	800df6c <_strtol_l.constprop.0>
 800e07e:	bf00      	nop
 800e080:	200001e8 	.word	0x200001e8

0800e084 <__cvt>:
 800e084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e088:	ec55 4b10 	vmov	r4, r5, d0
 800e08c:	2d00      	cmp	r5, #0
 800e08e:	460e      	mov	r6, r1
 800e090:	4619      	mov	r1, r3
 800e092:	462b      	mov	r3, r5
 800e094:	bfbb      	ittet	lt
 800e096:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e09a:	461d      	movlt	r5, r3
 800e09c:	2300      	movge	r3, #0
 800e09e:	232d      	movlt	r3, #45	; 0x2d
 800e0a0:	700b      	strb	r3, [r1, #0]
 800e0a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e0a8:	4691      	mov	r9, r2
 800e0aa:	f023 0820 	bic.w	r8, r3, #32
 800e0ae:	bfbc      	itt	lt
 800e0b0:	4622      	movlt	r2, r4
 800e0b2:	4614      	movlt	r4, r2
 800e0b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e0b8:	d005      	beq.n	800e0c6 <__cvt+0x42>
 800e0ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e0be:	d100      	bne.n	800e0c2 <__cvt+0x3e>
 800e0c0:	3601      	adds	r6, #1
 800e0c2:	2102      	movs	r1, #2
 800e0c4:	e000      	b.n	800e0c8 <__cvt+0x44>
 800e0c6:	2103      	movs	r1, #3
 800e0c8:	ab03      	add	r3, sp, #12
 800e0ca:	9301      	str	r3, [sp, #4]
 800e0cc:	ab02      	add	r3, sp, #8
 800e0ce:	9300      	str	r3, [sp, #0]
 800e0d0:	ec45 4b10 	vmov	d0, r4, r5
 800e0d4:	4653      	mov	r3, sl
 800e0d6:	4632      	mov	r2, r6
 800e0d8:	f000 fe9a 	bl	800ee10 <_dtoa_r>
 800e0dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e0e0:	4607      	mov	r7, r0
 800e0e2:	d102      	bne.n	800e0ea <__cvt+0x66>
 800e0e4:	f019 0f01 	tst.w	r9, #1
 800e0e8:	d022      	beq.n	800e130 <__cvt+0xac>
 800e0ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e0ee:	eb07 0906 	add.w	r9, r7, r6
 800e0f2:	d110      	bne.n	800e116 <__cvt+0x92>
 800e0f4:	783b      	ldrb	r3, [r7, #0]
 800e0f6:	2b30      	cmp	r3, #48	; 0x30
 800e0f8:	d10a      	bne.n	800e110 <__cvt+0x8c>
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	4620      	mov	r0, r4
 800e100:	4629      	mov	r1, r5
 800e102:	f7f2 fd19 	bl	8000b38 <__aeabi_dcmpeq>
 800e106:	b918      	cbnz	r0, 800e110 <__cvt+0x8c>
 800e108:	f1c6 0601 	rsb	r6, r6, #1
 800e10c:	f8ca 6000 	str.w	r6, [sl]
 800e110:	f8da 3000 	ldr.w	r3, [sl]
 800e114:	4499      	add	r9, r3
 800e116:	2200      	movs	r2, #0
 800e118:	2300      	movs	r3, #0
 800e11a:	4620      	mov	r0, r4
 800e11c:	4629      	mov	r1, r5
 800e11e:	f7f2 fd0b 	bl	8000b38 <__aeabi_dcmpeq>
 800e122:	b108      	cbz	r0, 800e128 <__cvt+0xa4>
 800e124:	f8cd 900c 	str.w	r9, [sp, #12]
 800e128:	2230      	movs	r2, #48	; 0x30
 800e12a:	9b03      	ldr	r3, [sp, #12]
 800e12c:	454b      	cmp	r3, r9
 800e12e:	d307      	bcc.n	800e140 <__cvt+0xbc>
 800e130:	9b03      	ldr	r3, [sp, #12]
 800e132:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e134:	1bdb      	subs	r3, r3, r7
 800e136:	4638      	mov	r0, r7
 800e138:	6013      	str	r3, [r2, #0]
 800e13a:	b004      	add	sp, #16
 800e13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e140:	1c59      	adds	r1, r3, #1
 800e142:	9103      	str	r1, [sp, #12]
 800e144:	701a      	strb	r2, [r3, #0]
 800e146:	e7f0      	b.n	800e12a <__cvt+0xa6>

0800e148 <__exponent>:
 800e148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e14a:	4603      	mov	r3, r0
 800e14c:	2900      	cmp	r1, #0
 800e14e:	bfb8      	it	lt
 800e150:	4249      	neglt	r1, r1
 800e152:	f803 2b02 	strb.w	r2, [r3], #2
 800e156:	bfb4      	ite	lt
 800e158:	222d      	movlt	r2, #45	; 0x2d
 800e15a:	222b      	movge	r2, #43	; 0x2b
 800e15c:	2909      	cmp	r1, #9
 800e15e:	7042      	strb	r2, [r0, #1]
 800e160:	dd2a      	ble.n	800e1b8 <__exponent+0x70>
 800e162:	f10d 0207 	add.w	r2, sp, #7
 800e166:	4617      	mov	r7, r2
 800e168:	260a      	movs	r6, #10
 800e16a:	4694      	mov	ip, r2
 800e16c:	fb91 f5f6 	sdiv	r5, r1, r6
 800e170:	fb06 1415 	mls	r4, r6, r5, r1
 800e174:	3430      	adds	r4, #48	; 0x30
 800e176:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e17a:	460c      	mov	r4, r1
 800e17c:	2c63      	cmp	r4, #99	; 0x63
 800e17e:	f102 32ff 	add.w	r2, r2, #4294967295
 800e182:	4629      	mov	r1, r5
 800e184:	dcf1      	bgt.n	800e16a <__exponent+0x22>
 800e186:	3130      	adds	r1, #48	; 0x30
 800e188:	f1ac 0402 	sub.w	r4, ip, #2
 800e18c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e190:	1c41      	adds	r1, r0, #1
 800e192:	4622      	mov	r2, r4
 800e194:	42ba      	cmp	r2, r7
 800e196:	d30a      	bcc.n	800e1ae <__exponent+0x66>
 800e198:	f10d 0209 	add.w	r2, sp, #9
 800e19c:	eba2 020c 	sub.w	r2, r2, ip
 800e1a0:	42bc      	cmp	r4, r7
 800e1a2:	bf88      	it	hi
 800e1a4:	2200      	movhi	r2, #0
 800e1a6:	4413      	add	r3, r2
 800e1a8:	1a18      	subs	r0, r3, r0
 800e1aa:	b003      	add	sp, #12
 800e1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1ae:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e1b2:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e1b6:	e7ed      	b.n	800e194 <__exponent+0x4c>
 800e1b8:	2330      	movs	r3, #48	; 0x30
 800e1ba:	3130      	adds	r1, #48	; 0x30
 800e1bc:	7083      	strb	r3, [r0, #2]
 800e1be:	70c1      	strb	r1, [r0, #3]
 800e1c0:	1d03      	adds	r3, r0, #4
 800e1c2:	e7f1      	b.n	800e1a8 <__exponent+0x60>

0800e1c4 <_printf_float>:
 800e1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1c8:	ed2d 8b02 	vpush	{d8}
 800e1cc:	b08d      	sub	sp, #52	; 0x34
 800e1ce:	460c      	mov	r4, r1
 800e1d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e1d4:	4616      	mov	r6, r2
 800e1d6:	461f      	mov	r7, r3
 800e1d8:	4605      	mov	r5, r0
 800e1da:	f000 fd0b 	bl	800ebf4 <_localeconv_r>
 800e1de:	f8d0 a000 	ldr.w	sl, [r0]
 800e1e2:	4650      	mov	r0, sl
 800e1e4:	f7f2 f87c 	bl	80002e0 <strlen>
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	930a      	str	r3, [sp, #40]	; 0x28
 800e1ec:	6823      	ldr	r3, [r4, #0]
 800e1ee:	9305      	str	r3, [sp, #20]
 800e1f0:	f8d8 3000 	ldr.w	r3, [r8]
 800e1f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e1f8:	3307      	adds	r3, #7
 800e1fa:	f023 0307 	bic.w	r3, r3, #7
 800e1fe:	f103 0208 	add.w	r2, r3, #8
 800e202:	f8c8 2000 	str.w	r2, [r8]
 800e206:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e20a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e20e:	9307      	str	r3, [sp, #28]
 800e210:	f8cd 8018 	str.w	r8, [sp, #24]
 800e214:	ee08 0a10 	vmov	s16, r0
 800e218:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e21c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e220:	4b9e      	ldr	r3, [pc, #632]	; (800e49c <_printf_float+0x2d8>)
 800e222:	f04f 32ff 	mov.w	r2, #4294967295
 800e226:	f7f2 fcb9 	bl	8000b9c <__aeabi_dcmpun>
 800e22a:	bb88      	cbnz	r0, 800e290 <_printf_float+0xcc>
 800e22c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e230:	4b9a      	ldr	r3, [pc, #616]	; (800e49c <_printf_float+0x2d8>)
 800e232:	f04f 32ff 	mov.w	r2, #4294967295
 800e236:	f7f2 fc93 	bl	8000b60 <__aeabi_dcmple>
 800e23a:	bb48      	cbnz	r0, 800e290 <_printf_float+0xcc>
 800e23c:	2200      	movs	r2, #0
 800e23e:	2300      	movs	r3, #0
 800e240:	4640      	mov	r0, r8
 800e242:	4649      	mov	r1, r9
 800e244:	f7f2 fc82 	bl	8000b4c <__aeabi_dcmplt>
 800e248:	b110      	cbz	r0, 800e250 <_printf_float+0x8c>
 800e24a:	232d      	movs	r3, #45	; 0x2d
 800e24c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e250:	4a93      	ldr	r2, [pc, #588]	; (800e4a0 <_printf_float+0x2dc>)
 800e252:	4b94      	ldr	r3, [pc, #592]	; (800e4a4 <_printf_float+0x2e0>)
 800e254:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e258:	bf94      	ite	ls
 800e25a:	4690      	movls	r8, r2
 800e25c:	4698      	movhi	r8, r3
 800e25e:	2303      	movs	r3, #3
 800e260:	6123      	str	r3, [r4, #16]
 800e262:	9b05      	ldr	r3, [sp, #20]
 800e264:	f023 0304 	bic.w	r3, r3, #4
 800e268:	6023      	str	r3, [r4, #0]
 800e26a:	f04f 0900 	mov.w	r9, #0
 800e26e:	9700      	str	r7, [sp, #0]
 800e270:	4633      	mov	r3, r6
 800e272:	aa0b      	add	r2, sp, #44	; 0x2c
 800e274:	4621      	mov	r1, r4
 800e276:	4628      	mov	r0, r5
 800e278:	f000 f9da 	bl	800e630 <_printf_common>
 800e27c:	3001      	adds	r0, #1
 800e27e:	f040 8090 	bne.w	800e3a2 <_printf_float+0x1de>
 800e282:	f04f 30ff 	mov.w	r0, #4294967295
 800e286:	b00d      	add	sp, #52	; 0x34
 800e288:	ecbd 8b02 	vpop	{d8}
 800e28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e290:	4642      	mov	r2, r8
 800e292:	464b      	mov	r3, r9
 800e294:	4640      	mov	r0, r8
 800e296:	4649      	mov	r1, r9
 800e298:	f7f2 fc80 	bl	8000b9c <__aeabi_dcmpun>
 800e29c:	b140      	cbz	r0, 800e2b0 <_printf_float+0xec>
 800e29e:	464b      	mov	r3, r9
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	bfbc      	itt	lt
 800e2a4:	232d      	movlt	r3, #45	; 0x2d
 800e2a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e2aa:	4a7f      	ldr	r2, [pc, #508]	; (800e4a8 <_printf_float+0x2e4>)
 800e2ac:	4b7f      	ldr	r3, [pc, #508]	; (800e4ac <_printf_float+0x2e8>)
 800e2ae:	e7d1      	b.n	800e254 <_printf_float+0x90>
 800e2b0:	6863      	ldr	r3, [r4, #4]
 800e2b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e2b6:	9206      	str	r2, [sp, #24]
 800e2b8:	1c5a      	adds	r2, r3, #1
 800e2ba:	d13f      	bne.n	800e33c <_printf_float+0x178>
 800e2bc:	2306      	movs	r3, #6
 800e2be:	6063      	str	r3, [r4, #4]
 800e2c0:	9b05      	ldr	r3, [sp, #20]
 800e2c2:	6861      	ldr	r1, [r4, #4]
 800e2c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	9303      	str	r3, [sp, #12]
 800e2cc:	ab0a      	add	r3, sp, #40	; 0x28
 800e2ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e2d2:	ab09      	add	r3, sp, #36	; 0x24
 800e2d4:	ec49 8b10 	vmov	d0, r8, r9
 800e2d8:	9300      	str	r3, [sp, #0]
 800e2da:	6022      	str	r2, [r4, #0]
 800e2dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e2e0:	4628      	mov	r0, r5
 800e2e2:	f7ff fecf 	bl	800e084 <__cvt>
 800e2e6:	9b06      	ldr	r3, [sp, #24]
 800e2e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e2ea:	2b47      	cmp	r3, #71	; 0x47
 800e2ec:	4680      	mov	r8, r0
 800e2ee:	d108      	bne.n	800e302 <_printf_float+0x13e>
 800e2f0:	1cc8      	adds	r0, r1, #3
 800e2f2:	db02      	blt.n	800e2fa <_printf_float+0x136>
 800e2f4:	6863      	ldr	r3, [r4, #4]
 800e2f6:	4299      	cmp	r1, r3
 800e2f8:	dd41      	ble.n	800e37e <_printf_float+0x1ba>
 800e2fa:	f1ab 0302 	sub.w	r3, fp, #2
 800e2fe:	fa5f fb83 	uxtb.w	fp, r3
 800e302:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e306:	d820      	bhi.n	800e34a <_printf_float+0x186>
 800e308:	3901      	subs	r1, #1
 800e30a:	465a      	mov	r2, fp
 800e30c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e310:	9109      	str	r1, [sp, #36]	; 0x24
 800e312:	f7ff ff19 	bl	800e148 <__exponent>
 800e316:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e318:	1813      	adds	r3, r2, r0
 800e31a:	2a01      	cmp	r2, #1
 800e31c:	4681      	mov	r9, r0
 800e31e:	6123      	str	r3, [r4, #16]
 800e320:	dc02      	bgt.n	800e328 <_printf_float+0x164>
 800e322:	6822      	ldr	r2, [r4, #0]
 800e324:	07d2      	lsls	r2, r2, #31
 800e326:	d501      	bpl.n	800e32c <_printf_float+0x168>
 800e328:	3301      	adds	r3, #1
 800e32a:	6123      	str	r3, [r4, #16]
 800e32c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e330:	2b00      	cmp	r3, #0
 800e332:	d09c      	beq.n	800e26e <_printf_float+0xaa>
 800e334:	232d      	movs	r3, #45	; 0x2d
 800e336:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e33a:	e798      	b.n	800e26e <_printf_float+0xaa>
 800e33c:	9a06      	ldr	r2, [sp, #24]
 800e33e:	2a47      	cmp	r2, #71	; 0x47
 800e340:	d1be      	bne.n	800e2c0 <_printf_float+0xfc>
 800e342:	2b00      	cmp	r3, #0
 800e344:	d1bc      	bne.n	800e2c0 <_printf_float+0xfc>
 800e346:	2301      	movs	r3, #1
 800e348:	e7b9      	b.n	800e2be <_printf_float+0xfa>
 800e34a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e34e:	d118      	bne.n	800e382 <_printf_float+0x1be>
 800e350:	2900      	cmp	r1, #0
 800e352:	6863      	ldr	r3, [r4, #4]
 800e354:	dd0b      	ble.n	800e36e <_printf_float+0x1aa>
 800e356:	6121      	str	r1, [r4, #16]
 800e358:	b913      	cbnz	r3, 800e360 <_printf_float+0x19c>
 800e35a:	6822      	ldr	r2, [r4, #0]
 800e35c:	07d0      	lsls	r0, r2, #31
 800e35e:	d502      	bpl.n	800e366 <_printf_float+0x1a2>
 800e360:	3301      	adds	r3, #1
 800e362:	440b      	add	r3, r1
 800e364:	6123      	str	r3, [r4, #16]
 800e366:	65a1      	str	r1, [r4, #88]	; 0x58
 800e368:	f04f 0900 	mov.w	r9, #0
 800e36c:	e7de      	b.n	800e32c <_printf_float+0x168>
 800e36e:	b913      	cbnz	r3, 800e376 <_printf_float+0x1b2>
 800e370:	6822      	ldr	r2, [r4, #0]
 800e372:	07d2      	lsls	r2, r2, #31
 800e374:	d501      	bpl.n	800e37a <_printf_float+0x1b6>
 800e376:	3302      	adds	r3, #2
 800e378:	e7f4      	b.n	800e364 <_printf_float+0x1a0>
 800e37a:	2301      	movs	r3, #1
 800e37c:	e7f2      	b.n	800e364 <_printf_float+0x1a0>
 800e37e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e384:	4299      	cmp	r1, r3
 800e386:	db05      	blt.n	800e394 <_printf_float+0x1d0>
 800e388:	6823      	ldr	r3, [r4, #0]
 800e38a:	6121      	str	r1, [r4, #16]
 800e38c:	07d8      	lsls	r0, r3, #31
 800e38e:	d5ea      	bpl.n	800e366 <_printf_float+0x1a2>
 800e390:	1c4b      	adds	r3, r1, #1
 800e392:	e7e7      	b.n	800e364 <_printf_float+0x1a0>
 800e394:	2900      	cmp	r1, #0
 800e396:	bfd4      	ite	le
 800e398:	f1c1 0202 	rsble	r2, r1, #2
 800e39c:	2201      	movgt	r2, #1
 800e39e:	4413      	add	r3, r2
 800e3a0:	e7e0      	b.n	800e364 <_printf_float+0x1a0>
 800e3a2:	6823      	ldr	r3, [r4, #0]
 800e3a4:	055a      	lsls	r2, r3, #21
 800e3a6:	d407      	bmi.n	800e3b8 <_printf_float+0x1f4>
 800e3a8:	6923      	ldr	r3, [r4, #16]
 800e3aa:	4642      	mov	r2, r8
 800e3ac:	4631      	mov	r1, r6
 800e3ae:	4628      	mov	r0, r5
 800e3b0:	47b8      	blx	r7
 800e3b2:	3001      	adds	r0, #1
 800e3b4:	d12c      	bne.n	800e410 <_printf_float+0x24c>
 800e3b6:	e764      	b.n	800e282 <_printf_float+0xbe>
 800e3b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e3bc:	f240 80e0 	bls.w	800e580 <_printf_float+0x3bc>
 800e3c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	f7f2 fbb6 	bl	8000b38 <__aeabi_dcmpeq>
 800e3cc:	2800      	cmp	r0, #0
 800e3ce:	d034      	beq.n	800e43a <_printf_float+0x276>
 800e3d0:	4a37      	ldr	r2, [pc, #220]	; (800e4b0 <_printf_float+0x2ec>)
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	4631      	mov	r1, r6
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	47b8      	blx	r7
 800e3da:	3001      	adds	r0, #1
 800e3dc:	f43f af51 	beq.w	800e282 <_printf_float+0xbe>
 800e3e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	db02      	blt.n	800e3ee <_printf_float+0x22a>
 800e3e8:	6823      	ldr	r3, [r4, #0]
 800e3ea:	07d8      	lsls	r0, r3, #31
 800e3ec:	d510      	bpl.n	800e410 <_printf_float+0x24c>
 800e3ee:	ee18 3a10 	vmov	r3, s16
 800e3f2:	4652      	mov	r2, sl
 800e3f4:	4631      	mov	r1, r6
 800e3f6:	4628      	mov	r0, r5
 800e3f8:	47b8      	blx	r7
 800e3fa:	3001      	adds	r0, #1
 800e3fc:	f43f af41 	beq.w	800e282 <_printf_float+0xbe>
 800e400:	f04f 0800 	mov.w	r8, #0
 800e404:	f104 091a 	add.w	r9, r4, #26
 800e408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e40a:	3b01      	subs	r3, #1
 800e40c:	4543      	cmp	r3, r8
 800e40e:	dc09      	bgt.n	800e424 <_printf_float+0x260>
 800e410:	6823      	ldr	r3, [r4, #0]
 800e412:	079b      	lsls	r3, r3, #30
 800e414:	f100 8107 	bmi.w	800e626 <_printf_float+0x462>
 800e418:	68e0      	ldr	r0, [r4, #12]
 800e41a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e41c:	4298      	cmp	r0, r3
 800e41e:	bfb8      	it	lt
 800e420:	4618      	movlt	r0, r3
 800e422:	e730      	b.n	800e286 <_printf_float+0xc2>
 800e424:	2301      	movs	r3, #1
 800e426:	464a      	mov	r2, r9
 800e428:	4631      	mov	r1, r6
 800e42a:	4628      	mov	r0, r5
 800e42c:	47b8      	blx	r7
 800e42e:	3001      	adds	r0, #1
 800e430:	f43f af27 	beq.w	800e282 <_printf_float+0xbe>
 800e434:	f108 0801 	add.w	r8, r8, #1
 800e438:	e7e6      	b.n	800e408 <_printf_float+0x244>
 800e43a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	dc39      	bgt.n	800e4b4 <_printf_float+0x2f0>
 800e440:	4a1b      	ldr	r2, [pc, #108]	; (800e4b0 <_printf_float+0x2ec>)
 800e442:	2301      	movs	r3, #1
 800e444:	4631      	mov	r1, r6
 800e446:	4628      	mov	r0, r5
 800e448:	47b8      	blx	r7
 800e44a:	3001      	adds	r0, #1
 800e44c:	f43f af19 	beq.w	800e282 <_printf_float+0xbe>
 800e450:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e454:	4313      	orrs	r3, r2
 800e456:	d102      	bne.n	800e45e <_printf_float+0x29a>
 800e458:	6823      	ldr	r3, [r4, #0]
 800e45a:	07d9      	lsls	r1, r3, #31
 800e45c:	d5d8      	bpl.n	800e410 <_printf_float+0x24c>
 800e45e:	ee18 3a10 	vmov	r3, s16
 800e462:	4652      	mov	r2, sl
 800e464:	4631      	mov	r1, r6
 800e466:	4628      	mov	r0, r5
 800e468:	47b8      	blx	r7
 800e46a:	3001      	adds	r0, #1
 800e46c:	f43f af09 	beq.w	800e282 <_printf_float+0xbe>
 800e470:	f04f 0900 	mov.w	r9, #0
 800e474:	f104 0a1a 	add.w	sl, r4, #26
 800e478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e47a:	425b      	negs	r3, r3
 800e47c:	454b      	cmp	r3, r9
 800e47e:	dc01      	bgt.n	800e484 <_printf_float+0x2c0>
 800e480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e482:	e792      	b.n	800e3aa <_printf_float+0x1e6>
 800e484:	2301      	movs	r3, #1
 800e486:	4652      	mov	r2, sl
 800e488:	4631      	mov	r1, r6
 800e48a:	4628      	mov	r0, r5
 800e48c:	47b8      	blx	r7
 800e48e:	3001      	adds	r0, #1
 800e490:	f43f aef7 	beq.w	800e282 <_printf_float+0xbe>
 800e494:	f109 0901 	add.w	r9, r9, #1
 800e498:	e7ee      	b.n	800e478 <_printf_float+0x2b4>
 800e49a:	bf00      	nop
 800e49c:	7fefffff 	.word	0x7fefffff
 800e4a0:	08011f99 	.word	0x08011f99
 800e4a4:	08011f9d 	.word	0x08011f9d
 800e4a8:	08011fa1 	.word	0x08011fa1
 800e4ac:	08011fa5 	.word	0x08011fa5
 800e4b0:	08011fa9 	.word	0x08011fa9
 800e4b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	bfa8      	it	ge
 800e4bc:	461a      	movge	r2, r3
 800e4be:	2a00      	cmp	r2, #0
 800e4c0:	4691      	mov	r9, r2
 800e4c2:	dc37      	bgt.n	800e534 <_printf_float+0x370>
 800e4c4:	f04f 0b00 	mov.w	fp, #0
 800e4c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e4cc:	f104 021a 	add.w	r2, r4, #26
 800e4d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e4d2:	9305      	str	r3, [sp, #20]
 800e4d4:	eba3 0309 	sub.w	r3, r3, r9
 800e4d8:	455b      	cmp	r3, fp
 800e4da:	dc33      	bgt.n	800e544 <_printf_float+0x380>
 800e4dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	db3b      	blt.n	800e55c <_printf_float+0x398>
 800e4e4:	6823      	ldr	r3, [r4, #0]
 800e4e6:	07da      	lsls	r2, r3, #31
 800e4e8:	d438      	bmi.n	800e55c <_printf_float+0x398>
 800e4ea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e4ee:	eba2 0903 	sub.w	r9, r2, r3
 800e4f2:	9b05      	ldr	r3, [sp, #20]
 800e4f4:	1ad2      	subs	r2, r2, r3
 800e4f6:	4591      	cmp	r9, r2
 800e4f8:	bfa8      	it	ge
 800e4fa:	4691      	movge	r9, r2
 800e4fc:	f1b9 0f00 	cmp.w	r9, #0
 800e500:	dc35      	bgt.n	800e56e <_printf_float+0x3aa>
 800e502:	f04f 0800 	mov.w	r8, #0
 800e506:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e50a:	f104 0a1a 	add.w	sl, r4, #26
 800e50e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e512:	1a9b      	subs	r3, r3, r2
 800e514:	eba3 0309 	sub.w	r3, r3, r9
 800e518:	4543      	cmp	r3, r8
 800e51a:	f77f af79 	ble.w	800e410 <_printf_float+0x24c>
 800e51e:	2301      	movs	r3, #1
 800e520:	4652      	mov	r2, sl
 800e522:	4631      	mov	r1, r6
 800e524:	4628      	mov	r0, r5
 800e526:	47b8      	blx	r7
 800e528:	3001      	adds	r0, #1
 800e52a:	f43f aeaa 	beq.w	800e282 <_printf_float+0xbe>
 800e52e:	f108 0801 	add.w	r8, r8, #1
 800e532:	e7ec      	b.n	800e50e <_printf_float+0x34a>
 800e534:	4613      	mov	r3, r2
 800e536:	4631      	mov	r1, r6
 800e538:	4642      	mov	r2, r8
 800e53a:	4628      	mov	r0, r5
 800e53c:	47b8      	blx	r7
 800e53e:	3001      	adds	r0, #1
 800e540:	d1c0      	bne.n	800e4c4 <_printf_float+0x300>
 800e542:	e69e      	b.n	800e282 <_printf_float+0xbe>
 800e544:	2301      	movs	r3, #1
 800e546:	4631      	mov	r1, r6
 800e548:	4628      	mov	r0, r5
 800e54a:	9205      	str	r2, [sp, #20]
 800e54c:	47b8      	blx	r7
 800e54e:	3001      	adds	r0, #1
 800e550:	f43f ae97 	beq.w	800e282 <_printf_float+0xbe>
 800e554:	9a05      	ldr	r2, [sp, #20]
 800e556:	f10b 0b01 	add.w	fp, fp, #1
 800e55a:	e7b9      	b.n	800e4d0 <_printf_float+0x30c>
 800e55c:	ee18 3a10 	vmov	r3, s16
 800e560:	4652      	mov	r2, sl
 800e562:	4631      	mov	r1, r6
 800e564:	4628      	mov	r0, r5
 800e566:	47b8      	blx	r7
 800e568:	3001      	adds	r0, #1
 800e56a:	d1be      	bne.n	800e4ea <_printf_float+0x326>
 800e56c:	e689      	b.n	800e282 <_printf_float+0xbe>
 800e56e:	9a05      	ldr	r2, [sp, #20]
 800e570:	464b      	mov	r3, r9
 800e572:	4442      	add	r2, r8
 800e574:	4631      	mov	r1, r6
 800e576:	4628      	mov	r0, r5
 800e578:	47b8      	blx	r7
 800e57a:	3001      	adds	r0, #1
 800e57c:	d1c1      	bne.n	800e502 <_printf_float+0x33e>
 800e57e:	e680      	b.n	800e282 <_printf_float+0xbe>
 800e580:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e582:	2a01      	cmp	r2, #1
 800e584:	dc01      	bgt.n	800e58a <_printf_float+0x3c6>
 800e586:	07db      	lsls	r3, r3, #31
 800e588:	d53a      	bpl.n	800e600 <_printf_float+0x43c>
 800e58a:	2301      	movs	r3, #1
 800e58c:	4642      	mov	r2, r8
 800e58e:	4631      	mov	r1, r6
 800e590:	4628      	mov	r0, r5
 800e592:	47b8      	blx	r7
 800e594:	3001      	adds	r0, #1
 800e596:	f43f ae74 	beq.w	800e282 <_printf_float+0xbe>
 800e59a:	ee18 3a10 	vmov	r3, s16
 800e59e:	4652      	mov	r2, sl
 800e5a0:	4631      	mov	r1, r6
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	47b8      	blx	r7
 800e5a6:	3001      	adds	r0, #1
 800e5a8:	f43f ae6b 	beq.w	800e282 <_printf_float+0xbe>
 800e5ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e5b8:	f7f2 fabe 	bl	8000b38 <__aeabi_dcmpeq>
 800e5bc:	b9d8      	cbnz	r0, 800e5f6 <_printf_float+0x432>
 800e5be:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e5c2:	f108 0201 	add.w	r2, r8, #1
 800e5c6:	4631      	mov	r1, r6
 800e5c8:	4628      	mov	r0, r5
 800e5ca:	47b8      	blx	r7
 800e5cc:	3001      	adds	r0, #1
 800e5ce:	d10e      	bne.n	800e5ee <_printf_float+0x42a>
 800e5d0:	e657      	b.n	800e282 <_printf_float+0xbe>
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	4652      	mov	r2, sl
 800e5d6:	4631      	mov	r1, r6
 800e5d8:	4628      	mov	r0, r5
 800e5da:	47b8      	blx	r7
 800e5dc:	3001      	adds	r0, #1
 800e5de:	f43f ae50 	beq.w	800e282 <_printf_float+0xbe>
 800e5e2:	f108 0801 	add.w	r8, r8, #1
 800e5e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5e8:	3b01      	subs	r3, #1
 800e5ea:	4543      	cmp	r3, r8
 800e5ec:	dcf1      	bgt.n	800e5d2 <_printf_float+0x40e>
 800e5ee:	464b      	mov	r3, r9
 800e5f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e5f4:	e6da      	b.n	800e3ac <_printf_float+0x1e8>
 800e5f6:	f04f 0800 	mov.w	r8, #0
 800e5fa:	f104 0a1a 	add.w	sl, r4, #26
 800e5fe:	e7f2      	b.n	800e5e6 <_printf_float+0x422>
 800e600:	2301      	movs	r3, #1
 800e602:	4642      	mov	r2, r8
 800e604:	e7df      	b.n	800e5c6 <_printf_float+0x402>
 800e606:	2301      	movs	r3, #1
 800e608:	464a      	mov	r2, r9
 800e60a:	4631      	mov	r1, r6
 800e60c:	4628      	mov	r0, r5
 800e60e:	47b8      	blx	r7
 800e610:	3001      	adds	r0, #1
 800e612:	f43f ae36 	beq.w	800e282 <_printf_float+0xbe>
 800e616:	f108 0801 	add.w	r8, r8, #1
 800e61a:	68e3      	ldr	r3, [r4, #12]
 800e61c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e61e:	1a5b      	subs	r3, r3, r1
 800e620:	4543      	cmp	r3, r8
 800e622:	dcf0      	bgt.n	800e606 <_printf_float+0x442>
 800e624:	e6f8      	b.n	800e418 <_printf_float+0x254>
 800e626:	f04f 0800 	mov.w	r8, #0
 800e62a:	f104 0919 	add.w	r9, r4, #25
 800e62e:	e7f4      	b.n	800e61a <_printf_float+0x456>

0800e630 <_printf_common>:
 800e630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e634:	4616      	mov	r6, r2
 800e636:	4699      	mov	r9, r3
 800e638:	688a      	ldr	r2, [r1, #8]
 800e63a:	690b      	ldr	r3, [r1, #16]
 800e63c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e640:	4293      	cmp	r3, r2
 800e642:	bfb8      	it	lt
 800e644:	4613      	movlt	r3, r2
 800e646:	6033      	str	r3, [r6, #0]
 800e648:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e64c:	4607      	mov	r7, r0
 800e64e:	460c      	mov	r4, r1
 800e650:	b10a      	cbz	r2, 800e656 <_printf_common+0x26>
 800e652:	3301      	adds	r3, #1
 800e654:	6033      	str	r3, [r6, #0]
 800e656:	6823      	ldr	r3, [r4, #0]
 800e658:	0699      	lsls	r1, r3, #26
 800e65a:	bf42      	ittt	mi
 800e65c:	6833      	ldrmi	r3, [r6, #0]
 800e65e:	3302      	addmi	r3, #2
 800e660:	6033      	strmi	r3, [r6, #0]
 800e662:	6825      	ldr	r5, [r4, #0]
 800e664:	f015 0506 	ands.w	r5, r5, #6
 800e668:	d106      	bne.n	800e678 <_printf_common+0x48>
 800e66a:	f104 0a19 	add.w	sl, r4, #25
 800e66e:	68e3      	ldr	r3, [r4, #12]
 800e670:	6832      	ldr	r2, [r6, #0]
 800e672:	1a9b      	subs	r3, r3, r2
 800e674:	42ab      	cmp	r3, r5
 800e676:	dc26      	bgt.n	800e6c6 <_printf_common+0x96>
 800e678:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e67c:	1e13      	subs	r3, r2, #0
 800e67e:	6822      	ldr	r2, [r4, #0]
 800e680:	bf18      	it	ne
 800e682:	2301      	movne	r3, #1
 800e684:	0692      	lsls	r2, r2, #26
 800e686:	d42b      	bmi.n	800e6e0 <_printf_common+0xb0>
 800e688:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e68c:	4649      	mov	r1, r9
 800e68e:	4638      	mov	r0, r7
 800e690:	47c0      	blx	r8
 800e692:	3001      	adds	r0, #1
 800e694:	d01e      	beq.n	800e6d4 <_printf_common+0xa4>
 800e696:	6823      	ldr	r3, [r4, #0]
 800e698:	6922      	ldr	r2, [r4, #16]
 800e69a:	f003 0306 	and.w	r3, r3, #6
 800e69e:	2b04      	cmp	r3, #4
 800e6a0:	bf02      	ittt	eq
 800e6a2:	68e5      	ldreq	r5, [r4, #12]
 800e6a4:	6833      	ldreq	r3, [r6, #0]
 800e6a6:	1aed      	subeq	r5, r5, r3
 800e6a8:	68a3      	ldr	r3, [r4, #8]
 800e6aa:	bf0c      	ite	eq
 800e6ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e6b0:	2500      	movne	r5, #0
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	bfc4      	itt	gt
 800e6b6:	1a9b      	subgt	r3, r3, r2
 800e6b8:	18ed      	addgt	r5, r5, r3
 800e6ba:	2600      	movs	r6, #0
 800e6bc:	341a      	adds	r4, #26
 800e6be:	42b5      	cmp	r5, r6
 800e6c0:	d11a      	bne.n	800e6f8 <_printf_common+0xc8>
 800e6c2:	2000      	movs	r0, #0
 800e6c4:	e008      	b.n	800e6d8 <_printf_common+0xa8>
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	4652      	mov	r2, sl
 800e6ca:	4649      	mov	r1, r9
 800e6cc:	4638      	mov	r0, r7
 800e6ce:	47c0      	blx	r8
 800e6d0:	3001      	adds	r0, #1
 800e6d2:	d103      	bne.n	800e6dc <_printf_common+0xac>
 800e6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6dc:	3501      	adds	r5, #1
 800e6de:	e7c6      	b.n	800e66e <_printf_common+0x3e>
 800e6e0:	18e1      	adds	r1, r4, r3
 800e6e2:	1c5a      	adds	r2, r3, #1
 800e6e4:	2030      	movs	r0, #48	; 0x30
 800e6e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e6ea:	4422      	add	r2, r4
 800e6ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e6f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e6f4:	3302      	adds	r3, #2
 800e6f6:	e7c7      	b.n	800e688 <_printf_common+0x58>
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	4622      	mov	r2, r4
 800e6fc:	4649      	mov	r1, r9
 800e6fe:	4638      	mov	r0, r7
 800e700:	47c0      	blx	r8
 800e702:	3001      	adds	r0, #1
 800e704:	d0e6      	beq.n	800e6d4 <_printf_common+0xa4>
 800e706:	3601      	adds	r6, #1
 800e708:	e7d9      	b.n	800e6be <_printf_common+0x8e>
	...

0800e70c <_printf_i>:
 800e70c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e710:	7e0f      	ldrb	r7, [r1, #24]
 800e712:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e714:	2f78      	cmp	r7, #120	; 0x78
 800e716:	4691      	mov	r9, r2
 800e718:	4680      	mov	r8, r0
 800e71a:	460c      	mov	r4, r1
 800e71c:	469a      	mov	sl, r3
 800e71e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e722:	d807      	bhi.n	800e734 <_printf_i+0x28>
 800e724:	2f62      	cmp	r7, #98	; 0x62
 800e726:	d80a      	bhi.n	800e73e <_printf_i+0x32>
 800e728:	2f00      	cmp	r7, #0
 800e72a:	f000 80d4 	beq.w	800e8d6 <_printf_i+0x1ca>
 800e72e:	2f58      	cmp	r7, #88	; 0x58
 800e730:	f000 80c0 	beq.w	800e8b4 <_printf_i+0x1a8>
 800e734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e738:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e73c:	e03a      	b.n	800e7b4 <_printf_i+0xa8>
 800e73e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e742:	2b15      	cmp	r3, #21
 800e744:	d8f6      	bhi.n	800e734 <_printf_i+0x28>
 800e746:	a101      	add	r1, pc, #4	; (adr r1, 800e74c <_printf_i+0x40>)
 800e748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e74c:	0800e7a5 	.word	0x0800e7a5
 800e750:	0800e7b9 	.word	0x0800e7b9
 800e754:	0800e735 	.word	0x0800e735
 800e758:	0800e735 	.word	0x0800e735
 800e75c:	0800e735 	.word	0x0800e735
 800e760:	0800e735 	.word	0x0800e735
 800e764:	0800e7b9 	.word	0x0800e7b9
 800e768:	0800e735 	.word	0x0800e735
 800e76c:	0800e735 	.word	0x0800e735
 800e770:	0800e735 	.word	0x0800e735
 800e774:	0800e735 	.word	0x0800e735
 800e778:	0800e8bd 	.word	0x0800e8bd
 800e77c:	0800e7e5 	.word	0x0800e7e5
 800e780:	0800e877 	.word	0x0800e877
 800e784:	0800e735 	.word	0x0800e735
 800e788:	0800e735 	.word	0x0800e735
 800e78c:	0800e8df 	.word	0x0800e8df
 800e790:	0800e735 	.word	0x0800e735
 800e794:	0800e7e5 	.word	0x0800e7e5
 800e798:	0800e735 	.word	0x0800e735
 800e79c:	0800e735 	.word	0x0800e735
 800e7a0:	0800e87f 	.word	0x0800e87f
 800e7a4:	682b      	ldr	r3, [r5, #0]
 800e7a6:	1d1a      	adds	r2, r3, #4
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	602a      	str	r2, [r5, #0]
 800e7ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e7b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	e09f      	b.n	800e8f8 <_printf_i+0x1ec>
 800e7b8:	6820      	ldr	r0, [r4, #0]
 800e7ba:	682b      	ldr	r3, [r5, #0]
 800e7bc:	0607      	lsls	r7, r0, #24
 800e7be:	f103 0104 	add.w	r1, r3, #4
 800e7c2:	6029      	str	r1, [r5, #0]
 800e7c4:	d501      	bpl.n	800e7ca <_printf_i+0xbe>
 800e7c6:	681e      	ldr	r6, [r3, #0]
 800e7c8:	e003      	b.n	800e7d2 <_printf_i+0xc6>
 800e7ca:	0646      	lsls	r6, r0, #25
 800e7cc:	d5fb      	bpl.n	800e7c6 <_printf_i+0xba>
 800e7ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e7d2:	2e00      	cmp	r6, #0
 800e7d4:	da03      	bge.n	800e7de <_printf_i+0xd2>
 800e7d6:	232d      	movs	r3, #45	; 0x2d
 800e7d8:	4276      	negs	r6, r6
 800e7da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7de:	485a      	ldr	r0, [pc, #360]	; (800e948 <_printf_i+0x23c>)
 800e7e0:	230a      	movs	r3, #10
 800e7e2:	e012      	b.n	800e80a <_printf_i+0xfe>
 800e7e4:	682b      	ldr	r3, [r5, #0]
 800e7e6:	6820      	ldr	r0, [r4, #0]
 800e7e8:	1d19      	adds	r1, r3, #4
 800e7ea:	6029      	str	r1, [r5, #0]
 800e7ec:	0605      	lsls	r5, r0, #24
 800e7ee:	d501      	bpl.n	800e7f4 <_printf_i+0xe8>
 800e7f0:	681e      	ldr	r6, [r3, #0]
 800e7f2:	e002      	b.n	800e7fa <_printf_i+0xee>
 800e7f4:	0641      	lsls	r1, r0, #25
 800e7f6:	d5fb      	bpl.n	800e7f0 <_printf_i+0xe4>
 800e7f8:	881e      	ldrh	r6, [r3, #0]
 800e7fa:	4853      	ldr	r0, [pc, #332]	; (800e948 <_printf_i+0x23c>)
 800e7fc:	2f6f      	cmp	r7, #111	; 0x6f
 800e7fe:	bf0c      	ite	eq
 800e800:	2308      	moveq	r3, #8
 800e802:	230a      	movne	r3, #10
 800e804:	2100      	movs	r1, #0
 800e806:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e80a:	6865      	ldr	r5, [r4, #4]
 800e80c:	60a5      	str	r5, [r4, #8]
 800e80e:	2d00      	cmp	r5, #0
 800e810:	bfa2      	ittt	ge
 800e812:	6821      	ldrge	r1, [r4, #0]
 800e814:	f021 0104 	bicge.w	r1, r1, #4
 800e818:	6021      	strge	r1, [r4, #0]
 800e81a:	b90e      	cbnz	r6, 800e820 <_printf_i+0x114>
 800e81c:	2d00      	cmp	r5, #0
 800e81e:	d04b      	beq.n	800e8b8 <_printf_i+0x1ac>
 800e820:	4615      	mov	r5, r2
 800e822:	fbb6 f1f3 	udiv	r1, r6, r3
 800e826:	fb03 6711 	mls	r7, r3, r1, r6
 800e82a:	5dc7      	ldrb	r7, [r0, r7]
 800e82c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e830:	4637      	mov	r7, r6
 800e832:	42bb      	cmp	r3, r7
 800e834:	460e      	mov	r6, r1
 800e836:	d9f4      	bls.n	800e822 <_printf_i+0x116>
 800e838:	2b08      	cmp	r3, #8
 800e83a:	d10b      	bne.n	800e854 <_printf_i+0x148>
 800e83c:	6823      	ldr	r3, [r4, #0]
 800e83e:	07de      	lsls	r6, r3, #31
 800e840:	d508      	bpl.n	800e854 <_printf_i+0x148>
 800e842:	6923      	ldr	r3, [r4, #16]
 800e844:	6861      	ldr	r1, [r4, #4]
 800e846:	4299      	cmp	r1, r3
 800e848:	bfde      	ittt	le
 800e84a:	2330      	movle	r3, #48	; 0x30
 800e84c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e850:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e854:	1b52      	subs	r2, r2, r5
 800e856:	6122      	str	r2, [r4, #16]
 800e858:	f8cd a000 	str.w	sl, [sp]
 800e85c:	464b      	mov	r3, r9
 800e85e:	aa03      	add	r2, sp, #12
 800e860:	4621      	mov	r1, r4
 800e862:	4640      	mov	r0, r8
 800e864:	f7ff fee4 	bl	800e630 <_printf_common>
 800e868:	3001      	adds	r0, #1
 800e86a:	d14a      	bne.n	800e902 <_printf_i+0x1f6>
 800e86c:	f04f 30ff 	mov.w	r0, #4294967295
 800e870:	b004      	add	sp, #16
 800e872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e876:	6823      	ldr	r3, [r4, #0]
 800e878:	f043 0320 	orr.w	r3, r3, #32
 800e87c:	6023      	str	r3, [r4, #0]
 800e87e:	4833      	ldr	r0, [pc, #204]	; (800e94c <_printf_i+0x240>)
 800e880:	2778      	movs	r7, #120	; 0x78
 800e882:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e886:	6823      	ldr	r3, [r4, #0]
 800e888:	6829      	ldr	r1, [r5, #0]
 800e88a:	061f      	lsls	r7, r3, #24
 800e88c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e890:	d402      	bmi.n	800e898 <_printf_i+0x18c>
 800e892:	065f      	lsls	r7, r3, #25
 800e894:	bf48      	it	mi
 800e896:	b2b6      	uxthmi	r6, r6
 800e898:	07df      	lsls	r7, r3, #31
 800e89a:	bf48      	it	mi
 800e89c:	f043 0320 	orrmi.w	r3, r3, #32
 800e8a0:	6029      	str	r1, [r5, #0]
 800e8a2:	bf48      	it	mi
 800e8a4:	6023      	strmi	r3, [r4, #0]
 800e8a6:	b91e      	cbnz	r6, 800e8b0 <_printf_i+0x1a4>
 800e8a8:	6823      	ldr	r3, [r4, #0]
 800e8aa:	f023 0320 	bic.w	r3, r3, #32
 800e8ae:	6023      	str	r3, [r4, #0]
 800e8b0:	2310      	movs	r3, #16
 800e8b2:	e7a7      	b.n	800e804 <_printf_i+0xf8>
 800e8b4:	4824      	ldr	r0, [pc, #144]	; (800e948 <_printf_i+0x23c>)
 800e8b6:	e7e4      	b.n	800e882 <_printf_i+0x176>
 800e8b8:	4615      	mov	r5, r2
 800e8ba:	e7bd      	b.n	800e838 <_printf_i+0x12c>
 800e8bc:	682b      	ldr	r3, [r5, #0]
 800e8be:	6826      	ldr	r6, [r4, #0]
 800e8c0:	6961      	ldr	r1, [r4, #20]
 800e8c2:	1d18      	adds	r0, r3, #4
 800e8c4:	6028      	str	r0, [r5, #0]
 800e8c6:	0635      	lsls	r5, r6, #24
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	d501      	bpl.n	800e8d0 <_printf_i+0x1c4>
 800e8cc:	6019      	str	r1, [r3, #0]
 800e8ce:	e002      	b.n	800e8d6 <_printf_i+0x1ca>
 800e8d0:	0670      	lsls	r0, r6, #25
 800e8d2:	d5fb      	bpl.n	800e8cc <_printf_i+0x1c0>
 800e8d4:	8019      	strh	r1, [r3, #0]
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	6123      	str	r3, [r4, #16]
 800e8da:	4615      	mov	r5, r2
 800e8dc:	e7bc      	b.n	800e858 <_printf_i+0x14c>
 800e8de:	682b      	ldr	r3, [r5, #0]
 800e8e0:	1d1a      	adds	r2, r3, #4
 800e8e2:	602a      	str	r2, [r5, #0]
 800e8e4:	681d      	ldr	r5, [r3, #0]
 800e8e6:	6862      	ldr	r2, [r4, #4]
 800e8e8:	2100      	movs	r1, #0
 800e8ea:	4628      	mov	r0, r5
 800e8ec:	f7f1 fca8 	bl	8000240 <memchr>
 800e8f0:	b108      	cbz	r0, 800e8f6 <_printf_i+0x1ea>
 800e8f2:	1b40      	subs	r0, r0, r5
 800e8f4:	6060      	str	r0, [r4, #4]
 800e8f6:	6863      	ldr	r3, [r4, #4]
 800e8f8:	6123      	str	r3, [r4, #16]
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e900:	e7aa      	b.n	800e858 <_printf_i+0x14c>
 800e902:	6923      	ldr	r3, [r4, #16]
 800e904:	462a      	mov	r2, r5
 800e906:	4649      	mov	r1, r9
 800e908:	4640      	mov	r0, r8
 800e90a:	47d0      	blx	sl
 800e90c:	3001      	adds	r0, #1
 800e90e:	d0ad      	beq.n	800e86c <_printf_i+0x160>
 800e910:	6823      	ldr	r3, [r4, #0]
 800e912:	079b      	lsls	r3, r3, #30
 800e914:	d413      	bmi.n	800e93e <_printf_i+0x232>
 800e916:	68e0      	ldr	r0, [r4, #12]
 800e918:	9b03      	ldr	r3, [sp, #12]
 800e91a:	4298      	cmp	r0, r3
 800e91c:	bfb8      	it	lt
 800e91e:	4618      	movlt	r0, r3
 800e920:	e7a6      	b.n	800e870 <_printf_i+0x164>
 800e922:	2301      	movs	r3, #1
 800e924:	4632      	mov	r2, r6
 800e926:	4649      	mov	r1, r9
 800e928:	4640      	mov	r0, r8
 800e92a:	47d0      	blx	sl
 800e92c:	3001      	adds	r0, #1
 800e92e:	d09d      	beq.n	800e86c <_printf_i+0x160>
 800e930:	3501      	adds	r5, #1
 800e932:	68e3      	ldr	r3, [r4, #12]
 800e934:	9903      	ldr	r1, [sp, #12]
 800e936:	1a5b      	subs	r3, r3, r1
 800e938:	42ab      	cmp	r3, r5
 800e93a:	dcf2      	bgt.n	800e922 <_printf_i+0x216>
 800e93c:	e7eb      	b.n	800e916 <_printf_i+0x20a>
 800e93e:	2500      	movs	r5, #0
 800e940:	f104 0619 	add.w	r6, r4, #25
 800e944:	e7f5      	b.n	800e932 <_printf_i+0x226>
 800e946:	bf00      	nop
 800e948:	08011fab 	.word	0x08011fab
 800e94c:	08011fbc 	.word	0x08011fbc

0800e950 <std>:
 800e950:	2300      	movs	r3, #0
 800e952:	b510      	push	{r4, lr}
 800e954:	4604      	mov	r4, r0
 800e956:	e9c0 3300 	strd	r3, r3, [r0]
 800e95a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e95e:	6083      	str	r3, [r0, #8]
 800e960:	8181      	strh	r1, [r0, #12]
 800e962:	6643      	str	r3, [r0, #100]	; 0x64
 800e964:	81c2      	strh	r2, [r0, #14]
 800e966:	6183      	str	r3, [r0, #24]
 800e968:	4619      	mov	r1, r3
 800e96a:	2208      	movs	r2, #8
 800e96c:	305c      	adds	r0, #92	; 0x5c
 800e96e:	f000 f926 	bl	800ebbe <memset>
 800e972:	4b0d      	ldr	r3, [pc, #52]	; (800e9a8 <std+0x58>)
 800e974:	6263      	str	r3, [r4, #36]	; 0x24
 800e976:	4b0d      	ldr	r3, [pc, #52]	; (800e9ac <std+0x5c>)
 800e978:	62a3      	str	r3, [r4, #40]	; 0x28
 800e97a:	4b0d      	ldr	r3, [pc, #52]	; (800e9b0 <std+0x60>)
 800e97c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e97e:	4b0d      	ldr	r3, [pc, #52]	; (800e9b4 <std+0x64>)
 800e980:	6323      	str	r3, [r4, #48]	; 0x30
 800e982:	4b0d      	ldr	r3, [pc, #52]	; (800e9b8 <std+0x68>)
 800e984:	6224      	str	r4, [r4, #32]
 800e986:	429c      	cmp	r4, r3
 800e988:	d006      	beq.n	800e998 <std+0x48>
 800e98a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e98e:	4294      	cmp	r4, r2
 800e990:	d002      	beq.n	800e998 <std+0x48>
 800e992:	33d0      	adds	r3, #208	; 0xd0
 800e994:	429c      	cmp	r4, r3
 800e996:	d105      	bne.n	800e9a4 <std+0x54>
 800e998:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9a0:	f000 b99c 	b.w	800ecdc <__retarget_lock_init_recursive>
 800e9a4:	bd10      	pop	{r4, pc}
 800e9a6:	bf00      	nop
 800e9a8:	0800eb39 	.word	0x0800eb39
 800e9ac:	0800eb5b 	.word	0x0800eb5b
 800e9b0:	0800eb93 	.word	0x0800eb93
 800e9b4:	0800ebb7 	.word	0x0800ebb7
 800e9b8:	20006024 	.word	0x20006024

0800e9bc <stdio_exit_handler>:
 800e9bc:	4a02      	ldr	r2, [pc, #8]	; (800e9c8 <stdio_exit_handler+0xc>)
 800e9be:	4903      	ldr	r1, [pc, #12]	; (800e9cc <stdio_exit_handler+0x10>)
 800e9c0:	4803      	ldr	r0, [pc, #12]	; (800e9d0 <stdio_exit_handler+0x14>)
 800e9c2:	f000 b869 	b.w	800ea98 <_fwalk_sglue>
 800e9c6:	bf00      	nop
 800e9c8:	20000190 	.word	0x20000190
 800e9cc:	08010931 	.word	0x08010931
 800e9d0:	2000019c 	.word	0x2000019c

0800e9d4 <cleanup_stdio>:
 800e9d4:	6841      	ldr	r1, [r0, #4]
 800e9d6:	4b0c      	ldr	r3, [pc, #48]	; (800ea08 <cleanup_stdio+0x34>)
 800e9d8:	4299      	cmp	r1, r3
 800e9da:	b510      	push	{r4, lr}
 800e9dc:	4604      	mov	r4, r0
 800e9de:	d001      	beq.n	800e9e4 <cleanup_stdio+0x10>
 800e9e0:	f001 ffa6 	bl	8010930 <_fflush_r>
 800e9e4:	68a1      	ldr	r1, [r4, #8]
 800e9e6:	4b09      	ldr	r3, [pc, #36]	; (800ea0c <cleanup_stdio+0x38>)
 800e9e8:	4299      	cmp	r1, r3
 800e9ea:	d002      	beq.n	800e9f2 <cleanup_stdio+0x1e>
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	f001 ff9f 	bl	8010930 <_fflush_r>
 800e9f2:	68e1      	ldr	r1, [r4, #12]
 800e9f4:	4b06      	ldr	r3, [pc, #24]	; (800ea10 <cleanup_stdio+0x3c>)
 800e9f6:	4299      	cmp	r1, r3
 800e9f8:	d004      	beq.n	800ea04 <cleanup_stdio+0x30>
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea00:	f001 bf96 	b.w	8010930 <_fflush_r>
 800ea04:	bd10      	pop	{r4, pc}
 800ea06:	bf00      	nop
 800ea08:	20006024 	.word	0x20006024
 800ea0c:	2000608c 	.word	0x2000608c
 800ea10:	200060f4 	.word	0x200060f4

0800ea14 <global_stdio_init.part.0>:
 800ea14:	b510      	push	{r4, lr}
 800ea16:	4b0b      	ldr	r3, [pc, #44]	; (800ea44 <global_stdio_init.part.0+0x30>)
 800ea18:	4c0b      	ldr	r4, [pc, #44]	; (800ea48 <global_stdio_init.part.0+0x34>)
 800ea1a:	4a0c      	ldr	r2, [pc, #48]	; (800ea4c <global_stdio_init.part.0+0x38>)
 800ea1c:	601a      	str	r2, [r3, #0]
 800ea1e:	4620      	mov	r0, r4
 800ea20:	2200      	movs	r2, #0
 800ea22:	2104      	movs	r1, #4
 800ea24:	f7ff ff94 	bl	800e950 <std>
 800ea28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ea2c:	2201      	movs	r2, #1
 800ea2e:	2109      	movs	r1, #9
 800ea30:	f7ff ff8e 	bl	800e950 <std>
 800ea34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ea38:	2202      	movs	r2, #2
 800ea3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea3e:	2112      	movs	r1, #18
 800ea40:	f7ff bf86 	b.w	800e950 <std>
 800ea44:	2000615c 	.word	0x2000615c
 800ea48:	20006024 	.word	0x20006024
 800ea4c:	0800e9bd 	.word	0x0800e9bd

0800ea50 <__sfp_lock_acquire>:
 800ea50:	4801      	ldr	r0, [pc, #4]	; (800ea58 <__sfp_lock_acquire+0x8>)
 800ea52:	f000 b944 	b.w	800ecde <__retarget_lock_acquire_recursive>
 800ea56:	bf00      	nop
 800ea58:	20006165 	.word	0x20006165

0800ea5c <__sfp_lock_release>:
 800ea5c:	4801      	ldr	r0, [pc, #4]	; (800ea64 <__sfp_lock_release+0x8>)
 800ea5e:	f000 b93f 	b.w	800ece0 <__retarget_lock_release_recursive>
 800ea62:	bf00      	nop
 800ea64:	20006165 	.word	0x20006165

0800ea68 <__sinit>:
 800ea68:	b510      	push	{r4, lr}
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	f7ff fff0 	bl	800ea50 <__sfp_lock_acquire>
 800ea70:	6a23      	ldr	r3, [r4, #32]
 800ea72:	b11b      	cbz	r3, 800ea7c <__sinit+0x14>
 800ea74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea78:	f7ff bff0 	b.w	800ea5c <__sfp_lock_release>
 800ea7c:	4b04      	ldr	r3, [pc, #16]	; (800ea90 <__sinit+0x28>)
 800ea7e:	6223      	str	r3, [r4, #32]
 800ea80:	4b04      	ldr	r3, [pc, #16]	; (800ea94 <__sinit+0x2c>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d1f5      	bne.n	800ea74 <__sinit+0xc>
 800ea88:	f7ff ffc4 	bl	800ea14 <global_stdio_init.part.0>
 800ea8c:	e7f2      	b.n	800ea74 <__sinit+0xc>
 800ea8e:	bf00      	nop
 800ea90:	0800e9d5 	.word	0x0800e9d5
 800ea94:	2000615c 	.word	0x2000615c

0800ea98 <_fwalk_sglue>:
 800ea98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea9c:	4607      	mov	r7, r0
 800ea9e:	4688      	mov	r8, r1
 800eaa0:	4614      	mov	r4, r2
 800eaa2:	2600      	movs	r6, #0
 800eaa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eaa8:	f1b9 0901 	subs.w	r9, r9, #1
 800eaac:	d505      	bpl.n	800eaba <_fwalk_sglue+0x22>
 800eaae:	6824      	ldr	r4, [r4, #0]
 800eab0:	2c00      	cmp	r4, #0
 800eab2:	d1f7      	bne.n	800eaa4 <_fwalk_sglue+0xc>
 800eab4:	4630      	mov	r0, r6
 800eab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eaba:	89ab      	ldrh	r3, [r5, #12]
 800eabc:	2b01      	cmp	r3, #1
 800eabe:	d907      	bls.n	800ead0 <_fwalk_sglue+0x38>
 800eac0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eac4:	3301      	adds	r3, #1
 800eac6:	d003      	beq.n	800ead0 <_fwalk_sglue+0x38>
 800eac8:	4629      	mov	r1, r5
 800eaca:	4638      	mov	r0, r7
 800eacc:	47c0      	blx	r8
 800eace:	4306      	orrs	r6, r0
 800ead0:	3568      	adds	r5, #104	; 0x68
 800ead2:	e7e9      	b.n	800eaa8 <_fwalk_sglue+0x10>

0800ead4 <iprintf>:
 800ead4:	b40f      	push	{r0, r1, r2, r3}
 800ead6:	b507      	push	{r0, r1, r2, lr}
 800ead8:	4906      	ldr	r1, [pc, #24]	; (800eaf4 <iprintf+0x20>)
 800eada:	ab04      	add	r3, sp, #16
 800eadc:	6808      	ldr	r0, [r1, #0]
 800eade:	f853 2b04 	ldr.w	r2, [r3], #4
 800eae2:	6881      	ldr	r1, [r0, #8]
 800eae4:	9301      	str	r3, [sp, #4]
 800eae6:	f001 fd83 	bl	80105f0 <_vfiprintf_r>
 800eaea:	b003      	add	sp, #12
 800eaec:	f85d eb04 	ldr.w	lr, [sp], #4
 800eaf0:	b004      	add	sp, #16
 800eaf2:	4770      	bx	lr
 800eaf4:	200001e8 	.word	0x200001e8

0800eaf8 <siprintf>:
 800eaf8:	b40e      	push	{r1, r2, r3}
 800eafa:	b500      	push	{lr}
 800eafc:	b09c      	sub	sp, #112	; 0x70
 800eafe:	ab1d      	add	r3, sp, #116	; 0x74
 800eb00:	9002      	str	r0, [sp, #8]
 800eb02:	9006      	str	r0, [sp, #24]
 800eb04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eb08:	4809      	ldr	r0, [pc, #36]	; (800eb30 <siprintf+0x38>)
 800eb0a:	9107      	str	r1, [sp, #28]
 800eb0c:	9104      	str	r1, [sp, #16]
 800eb0e:	4909      	ldr	r1, [pc, #36]	; (800eb34 <siprintf+0x3c>)
 800eb10:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb14:	9105      	str	r1, [sp, #20]
 800eb16:	6800      	ldr	r0, [r0, #0]
 800eb18:	9301      	str	r3, [sp, #4]
 800eb1a:	a902      	add	r1, sp, #8
 800eb1c:	f001 fc40 	bl	80103a0 <_svfiprintf_r>
 800eb20:	9b02      	ldr	r3, [sp, #8]
 800eb22:	2200      	movs	r2, #0
 800eb24:	701a      	strb	r2, [r3, #0]
 800eb26:	b01c      	add	sp, #112	; 0x70
 800eb28:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb2c:	b003      	add	sp, #12
 800eb2e:	4770      	bx	lr
 800eb30:	200001e8 	.word	0x200001e8
 800eb34:	ffff0208 	.word	0xffff0208

0800eb38 <__sread>:
 800eb38:	b510      	push	{r4, lr}
 800eb3a:	460c      	mov	r4, r1
 800eb3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb40:	f000 f87e 	bl	800ec40 <_read_r>
 800eb44:	2800      	cmp	r0, #0
 800eb46:	bfab      	itete	ge
 800eb48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eb4a:	89a3      	ldrhlt	r3, [r4, #12]
 800eb4c:	181b      	addge	r3, r3, r0
 800eb4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eb52:	bfac      	ite	ge
 800eb54:	6563      	strge	r3, [r4, #84]	; 0x54
 800eb56:	81a3      	strhlt	r3, [r4, #12]
 800eb58:	bd10      	pop	{r4, pc}

0800eb5a <__swrite>:
 800eb5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb5e:	461f      	mov	r7, r3
 800eb60:	898b      	ldrh	r3, [r1, #12]
 800eb62:	05db      	lsls	r3, r3, #23
 800eb64:	4605      	mov	r5, r0
 800eb66:	460c      	mov	r4, r1
 800eb68:	4616      	mov	r6, r2
 800eb6a:	d505      	bpl.n	800eb78 <__swrite+0x1e>
 800eb6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb70:	2302      	movs	r3, #2
 800eb72:	2200      	movs	r2, #0
 800eb74:	f000 f852 	bl	800ec1c <_lseek_r>
 800eb78:	89a3      	ldrh	r3, [r4, #12]
 800eb7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb82:	81a3      	strh	r3, [r4, #12]
 800eb84:	4632      	mov	r2, r6
 800eb86:	463b      	mov	r3, r7
 800eb88:	4628      	mov	r0, r5
 800eb8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb8e:	f000 b869 	b.w	800ec64 <_write_r>

0800eb92 <__sseek>:
 800eb92:	b510      	push	{r4, lr}
 800eb94:	460c      	mov	r4, r1
 800eb96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb9a:	f000 f83f 	bl	800ec1c <_lseek_r>
 800eb9e:	1c43      	adds	r3, r0, #1
 800eba0:	89a3      	ldrh	r3, [r4, #12]
 800eba2:	bf15      	itete	ne
 800eba4:	6560      	strne	r0, [r4, #84]	; 0x54
 800eba6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ebaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ebae:	81a3      	strheq	r3, [r4, #12]
 800ebb0:	bf18      	it	ne
 800ebb2:	81a3      	strhne	r3, [r4, #12]
 800ebb4:	bd10      	pop	{r4, pc}

0800ebb6 <__sclose>:
 800ebb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebba:	f000 b81f 	b.w	800ebfc <_close_r>

0800ebbe <memset>:
 800ebbe:	4402      	add	r2, r0
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	d100      	bne.n	800ebc8 <memset+0xa>
 800ebc6:	4770      	bx	lr
 800ebc8:	f803 1b01 	strb.w	r1, [r3], #1
 800ebcc:	e7f9      	b.n	800ebc2 <memset+0x4>

0800ebce <strncpy>:
 800ebce:	b510      	push	{r4, lr}
 800ebd0:	3901      	subs	r1, #1
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	b132      	cbz	r2, 800ebe4 <strncpy+0x16>
 800ebd6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ebda:	f803 4b01 	strb.w	r4, [r3], #1
 800ebde:	3a01      	subs	r2, #1
 800ebe0:	2c00      	cmp	r4, #0
 800ebe2:	d1f7      	bne.n	800ebd4 <strncpy+0x6>
 800ebe4:	441a      	add	r2, r3
 800ebe6:	2100      	movs	r1, #0
 800ebe8:	4293      	cmp	r3, r2
 800ebea:	d100      	bne.n	800ebee <strncpy+0x20>
 800ebec:	bd10      	pop	{r4, pc}
 800ebee:	f803 1b01 	strb.w	r1, [r3], #1
 800ebf2:	e7f9      	b.n	800ebe8 <strncpy+0x1a>

0800ebf4 <_localeconv_r>:
 800ebf4:	4800      	ldr	r0, [pc, #0]	; (800ebf8 <_localeconv_r+0x4>)
 800ebf6:	4770      	bx	lr
 800ebf8:	200002dc 	.word	0x200002dc

0800ebfc <_close_r>:
 800ebfc:	b538      	push	{r3, r4, r5, lr}
 800ebfe:	4d06      	ldr	r5, [pc, #24]	; (800ec18 <_close_r+0x1c>)
 800ec00:	2300      	movs	r3, #0
 800ec02:	4604      	mov	r4, r0
 800ec04:	4608      	mov	r0, r1
 800ec06:	602b      	str	r3, [r5, #0]
 800ec08:	f7f3 fc91 	bl	800252e <_close>
 800ec0c:	1c43      	adds	r3, r0, #1
 800ec0e:	d102      	bne.n	800ec16 <_close_r+0x1a>
 800ec10:	682b      	ldr	r3, [r5, #0]
 800ec12:	b103      	cbz	r3, 800ec16 <_close_r+0x1a>
 800ec14:	6023      	str	r3, [r4, #0]
 800ec16:	bd38      	pop	{r3, r4, r5, pc}
 800ec18:	20006160 	.word	0x20006160

0800ec1c <_lseek_r>:
 800ec1c:	b538      	push	{r3, r4, r5, lr}
 800ec1e:	4d07      	ldr	r5, [pc, #28]	; (800ec3c <_lseek_r+0x20>)
 800ec20:	4604      	mov	r4, r0
 800ec22:	4608      	mov	r0, r1
 800ec24:	4611      	mov	r1, r2
 800ec26:	2200      	movs	r2, #0
 800ec28:	602a      	str	r2, [r5, #0]
 800ec2a:	461a      	mov	r2, r3
 800ec2c:	f7f3 fca6 	bl	800257c <_lseek>
 800ec30:	1c43      	adds	r3, r0, #1
 800ec32:	d102      	bne.n	800ec3a <_lseek_r+0x1e>
 800ec34:	682b      	ldr	r3, [r5, #0]
 800ec36:	b103      	cbz	r3, 800ec3a <_lseek_r+0x1e>
 800ec38:	6023      	str	r3, [r4, #0]
 800ec3a:	bd38      	pop	{r3, r4, r5, pc}
 800ec3c:	20006160 	.word	0x20006160

0800ec40 <_read_r>:
 800ec40:	b538      	push	{r3, r4, r5, lr}
 800ec42:	4d07      	ldr	r5, [pc, #28]	; (800ec60 <_read_r+0x20>)
 800ec44:	4604      	mov	r4, r0
 800ec46:	4608      	mov	r0, r1
 800ec48:	4611      	mov	r1, r2
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	602a      	str	r2, [r5, #0]
 800ec4e:	461a      	mov	r2, r3
 800ec50:	f7f3 fc34 	bl	80024bc <_read>
 800ec54:	1c43      	adds	r3, r0, #1
 800ec56:	d102      	bne.n	800ec5e <_read_r+0x1e>
 800ec58:	682b      	ldr	r3, [r5, #0]
 800ec5a:	b103      	cbz	r3, 800ec5e <_read_r+0x1e>
 800ec5c:	6023      	str	r3, [r4, #0]
 800ec5e:	bd38      	pop	{r3, r4, r5, pc}
 800ec60:	20006160 	.word	0x20006160

0800ec64 <_write_r>:
 800ec64:	b538      	push	{r3, r4, r5, lr}
 800ec66:	4d07      	ldr	r5, [pc, #28]	; (800ec84 <_write_r+0x20>)
 800ec68:	4604      	mov	r4, r0
 800ec6a:	4608      	mov	r0, r1
 800ec6c:	4611      	mov	r1, r2
 800ec6e:	2200      	movs	r2, #0
 800ec70:	602a      	str	r2, [r5, #0]
 800ec72:	461a      	mov	r2, r3
 800ec74:	f7f3 fc3f 	bl	80024f6 <_write>
 800ec78:	1c43      	adds	r3, r0, #1
 800ec7a:	d102      	bne.n	800ec82 <_write_r+0x1e>
 800ec7c:	682b      	ldr	r3, [r5, #0]
 800ec7e:	b103      	cbz	r3, 800ec82 <_write_r+0x1e>
 800ec80:	6023      	str	r3, [r4, #0]
 800ec82:	bd38      	pop	{r3, r4, r5, pc}
 800ec84:	20006160 	.word	0x20006160

0800ec88 <__errno>:
 800ec88:	4b01      	ldr	r3, [pc, #4]	; (800ec90 <__errno+0x8>)
 800ec8a:	6818      	ldr	r0, [r3, #0]
 800ec8c:	4770      	bx	lr
 800ec8e:	bf00      	nop
 800ec90:	200001e8 	.word	0x200001e8

0800ec94 <__libc_init_array>:
 800ec94:	b570      	push	{r4, r5, r6, lr}
 800ec96:	4d0d      	ldr	r5, [pc, #52]	; (800eccc <__libc_init_array+0x38>)
 800ec98:	4c0d      	ldr	r4, [pc, #52]	; (800ecd0 <__libc_init_array+0x3c>)
 800ec9a:	1b64      	subs	r4, r4, r5
 800ec9c:	10a4      	asrs	r4, r4, #2
 800ec9e:	2600      	movs	r6, #0
 800eca0:	42a6      	cmp	r6, r4
 800eca2:	d109      	bne.n	800ecb8 <__libc_init_array+0x24>
 800eca4:	4d0b      	ldr	r5, [pc, #44]	; (800ecd4 <__libc_init_array+0x40>)
 800eca6:	4c0c      	ldr	r4, [pc, #48]	; (800ecd8 <__libc_init_array+0x44>)
 800eca8:	f002 ffce 	bl	8011c48 <_init>
 800ecac:	1b64      	subs	r4, r4, r5
 800ecae:	10a4      	asrs	r4, r4, #2
 800ecb0:	2600      	movs	r6, #0
 800ecb2:	42a6      	cmp	r6, r4
 800ecb4:	d105      	bne.n	800ecc2 <__libc_init_array+0x2e>
 800ecb6:	bd70      	pop	{r4, r5, r6, pc}
 800ecb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecbc:	4798      	blx	r3
 800ecbe:	3601      	adds	r6, #1
 800ecc0:	e7ee      	b.n	800eca0 <__libc_init_array+0xc>
 800ecc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecc6:	4798      	blx	r3
 800ecc8:	3601      	adds	r6, #1
 800ecca:	e7f2      	b.n	800ecb2 <__libc_init_array+0x1e>
 800eccc:	08012240 	.word	0x08012240
 800ecd0:	08012240 	.word	0x08012240
 800ecd4:	08012240 	.word	0x08012240
 800ecd8:	08012244 	.word	0x08012244

0800ecdc <__retarget_lock_init_recursive>:
 800ecdc:	4770      	bx	lr

0800ecde <__retarget_lock_acquire_recursive>:
 800ecde:	4770      	bx	lr

0800ece0 <__retarget_lock_release_recursive>:
 800ece0:	4770      	bx	lr

0800ece2 <memcpy>:
 800ece2:	440a      	add	r2, r1
 800ece4:	4291      	cmp	r1, r2
 800ece6:	f100 33ff 	add.w	r3, r0, #4294967295
 800ecea:	d100      	bne.n	800ecee <memcpy+0xc>
 800ecec:	4770      	bx	lr
 800ecee:	b510      	push	{r4, lr}
 800ecf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ecf8:	4291      	cmp	r1, r2
 800ecfa:	d1f9      	bne.n	800ecf0 <memcpy+0xe>
 800ecfc:	bd10      	pop	{r4, pc}

0800ecfe <quorem>:
 800ecfe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed02:	6903      	ldr	r3, [r0, #16]
 800ed04:	690c      	ldr	r4, [r1, #16]
 800ed06:	42a3      	cmp	r3, r4
 800ed08:	4607      	mov	r7, r0
 800ed0a:	db7e      	blt.n	800ee0a <quorem+0x10c>
 800ed0c:	3c01      	subs	r4, #1
 800ed0e:	f101 0814 	add.w	r8, r1, #20
 800ed12:	f100 0514 	add.w	r5, r0, #20
 800ed16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed1a:	9301      	str	r3, [sp, #4]
 800ed1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ed20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed24:	3301      	adds	r3, #1
 800ed26:	429a      	cmp	r2, r3
 800ed28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ed2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ed30:	fbb2 f6f3 	udiv	r6, r2, r3
 800ed34:	d331      	bcc.n	800ed9a <quorem+0x9c>
 800ed36:	f04f 0e00 	mov.w	lr, #0
 800ed3a:	4640      	mov	r0, r8
 800ed3c:	46ac      	mov	ip, r5
 800ed3e:	46f2      	mov	sl, lr
 800ed40:	f850 2b04 	ldr.w	r2, [r0], #4
 800ed44:	b293      	uxth	r3, r2
 800ed46:	fb06 e303 	mla	r3, r6, r3, lr
 800ed4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ed4e:	0c1a      	lsrs	r2, r3, #16
 800ed50:	b29b      	uxth	r3, r3
 800ed52:	ebaa 0303 	sub.w	r3, sl, r3
 800ed56:	f8dc a000 	ldr.w	sl, [ip]
 800ed5a:	fa13 f38a 	uxtah	r3, r3, sl
 800ed5e:	fb06 220e 	mla	r2, r6, lr, r2
 800ed62:	9300      	str	r3, [sp, #0]
 800ed64:	9b00      	ldr	r3, [sp, #0]
 800ed66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ed6a:	b292      	uxth	r2, r2
 800ed6c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ed70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ed74:	f8bd 3000 	ldrh.w	r3, [sp]
 800ed78:	4581      	cmp	r9, r0
 800ed7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed7e:	f84c 3b04 	str.w	r3, [ip], #4
 800ed82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ed86:	d2db      	bcs.n	800ed40 <quorem+0x42>
 800ed88:	f855 300b 	ldr.w	r3, [r5, fp]
 800ed8c:	b92b      	cbnz	r3, 800ed9a <quorem+0x9c>
 800ed8e:	9b01      	ldr	r3, [sp, #4]
 800ed90:	3b04      	subs	r3, #4
 800ed92:	429d      	cmp	r5, r3
 800ed94:	461a      	mov	r2, r3
 800ed96:	d32c      	bcc.n	800edf2 <quorem+0xf4>
 800ed98:	613c      	str	r4, [r7, #16]
 800ed9a:	4638      	mov	r0, r7
 800ed9c:	f001 f9a6 	bl	80100ec <__mcmp>
 800eda0:	2800      	cmp	r0, #0
 800eda2:	db22      	blt.n	800edea <quorem+0xec>
 800eda4:	3601      	adds	r6, #1
 800eda6:	4629      	mov	r1, r5
 800eda8:	2000      	movs	r0, #0
 800edaa:	f858 2b04 	ldr.w	r2, [r8], #4
 800edae:	f8d1 c000 	ldr.w	ip, [r1]
 800edb2:	b293      	uxth	r3, r2
 800edb4:	1ac3      	subs	r3, r0, r3
 800edb6:	0c12      	lsrs	r2, r2, #16
 800edb8:	fa13 f38c 	uxtah	r3, r3, ip
 800edbc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800edc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800edc4:	b29b      	uxth	r3, r3
 800edc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800edca:	45c1      	cmp	r9, r8
 800edcc:	f841 3b04 	str.w	r3, [r1], #4
 800edd0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800edd4:	d2e9      	bcs.n	800edaa <quorem+0xac>
 800edd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800edda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800edde:	b922      	cbnz	r2, 800edea <quorem+0xec>
 800ede0:	3b04      	subs	r3, #4
 800ede2:	429d      	cmp	r5, r3
 800ede4:	461a      	mov	r2, r3
 800ede6:	d30a      	bcc.n	800edfe <quorem+0x100>
 800ede8:	613c      	str	r4, [r7, #16]
 800edea:	4630      	mov	r0, r6
 800edec:	b003      	add	sp, #12
 800edee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edf2:	6812      	ldr	r2, [r2, #0]
 800edf4:	3b04      	subs	r3, #4
 800edf6:	2a00      	cmp	r2, #0
 800edf8:	d1ce      	bne.n	800ed98 <quorem+0x9a>
 800edfa:	3c01      	subs	r4, #1
 800edfc:	e7c9      	b.n	800ed92 <quorem+0x94>
 800edfe:	6812      	ldr	r2, [r2, #0]
 800ee00:	3b04      	subs	r3, #4
 800ee02:	2a00      	cmp	r2, #0
 800ee04:	d1f0      	bne.n	800ede8 <quorem+0xea>
 800ee06:	3c01      	subs	r4, #1
 800ee08:	e7eb      	b.n	800ede2 <quorem+0xe4>
 800ee0a:	2000      	movs	r0, #0
 800ee0c:	e7ee      	b.n	800edec <quorem+0xee>
	...

0800ee10 <_dtoa_r>:
 800ee10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee14:	ed2d 8b04 	vpush	{d8-d9}
 800ee18:	69c5      	ldr	r5, [r0, #28]
 800ee1a:	b093      	sub	sp, #76	; 0x4c
 800ee1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ee20:	ec57 6b10 	vmov	r6, r7, d0
 800ee24:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ee28:	9107      	str	r1, [sp, #28]
 800ee2a:	4604      	mov	r4, r0
 800ee2c:	920a      	str	r2, [sp, #40]	; 0x28
 800ee2e:	930d      	str	r3, [sp, #52]	; 0x34
 800ee30:	b975      	cbnz	r5, 800ee50 <_dtoa_r+0x40>
 800ee32:	2010      	movs	r0, #16
 800ee34:	f000 fe2a 	bl	800fa8c <malloc>
 800ee38:	4602      	mov	r2, r0
 800ee3a:	61e0      	str	r0, [r4, #28]
 800ee3c:	b920      	cbnz	r0, 800ee48 <_dtoa_r+0x38>
 800ee3e:	4bae      	ldr	r3, [pc, #696]	; (800f0f8 <_dtoa_r+0x2e8>)
 800ee40:	21ef      	movs	r1, #239	; 0xef
 800ee42:	48ae      	ldr	r0, [pc, #696]	; (800f0fc <_dtoa_r+0x2ec>)
 800ee44:	f001 fe5c 	bl	8010b00 <__assert_func>
 800ee48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ee4c:	6005      	str	r5, [r0, #0]
 800ee4e:	60c5      	str	r5, [r0, #12]
 800ee50:	69e3      	ldr	r3, [r4, #28]
 800ee52:	6819      	ldr	r1, [r3, #0]
 800ee54:	b151      	cbz	r1, 800ee6c <_dtoa_r+0x5c>
 800ee56:	685a      	ldr	r2, [r3, #4]
 800ee58:	604a      	str	r2, [r1, #4]
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	4093      	lsls	r3, r2
 800ee5e:	608b      	str	r3, [r1, #8]
 800ee60:	4620      	mov	r0, r4
 800ee62:	f000 ff07 	bl	800fc74 <_Bfree>
 800ee66:	69e3      	ldr	r3, [r4, #28]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	601a      	str	r2, [r3, #0]
 800ee6c:	1e3b      	subs	r3, r7, #0
 800ee6e:	bfbb      	ittet	lt
 800ee70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ee74:	9303      	strlt	r3, [sp, #12]
 800ee76:	2300      	movge	r3, #0
 800ee78:	2201      	movlt	r2, #1
 800ee7a:	bfac      	ite	ge
 800ee7c:	f8c8 3000 	strge.w	r3, [r8]
 800ee80:	f8c8 2000 	strlt.w	r2, [r8]
 800ee84:	4b9e      	ldr	r3, [pc, #632]	; (800f100 <_dtoa_r+0x2f0>)
 800ee86:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ee8a:	ea33 0308 	bics.w	r3, r3, r8
 800ee8e:	d11b      	bne.n	800eec8 <_dtoa_r+0xb8>
 800ee90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ee92:	f242 730f 	movw	r3, #9999	; 0x270f
 800ee96:	6013      	str	r3, [r2, #0]
 800ee98:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ee9c:	4333      	orrs	r3, r6
 800ee9e:	f000 8593 	beq.w	800f9c8 <_dtoa_r+0xbb8>
 800eea2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eea4:	b963      	cbnz	r3, 800eec0 <_dtoa_r+0xb0>
 800eea6:	4b97      	ldr	r3, [pc, #604]	; (800f104 <_dtoa_r+0x2f4>)
 800eea8:	e027      	b.n	800eefa <_dtoa_r+0xea>
 800eeaa:	4b97      	ldr	r3, [pc, #604]	; (800f108 <_dtoa_r+0x2f8>)
 800eeac:	9300      	str	r3, [sp, #0]
 800eeae:	3308      	adds	r3, #8
 800eeb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eeb2:	6013      	str	r3, [r2, #0]
 800eeb4:	9800      	ldr	r0, [sp, #0]
 800eeb6:	b013      	add	sp, #76	; 0x4c
 800eeb8:	ecbd 8b04 	vpop	{d8-d9}
 800eebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eec0:	4b90      	ldr	r3, [pc, #576]	; (800f104 <_dtoa_r+0x2f4>)
 800eec2:	9300      	str	r3, [sp, #0]
 800eec4:	3303      	adds	r3, #3
 800eec6:	e7f3      	b.n	800eeb0 <_dtoa_r+0xa0>
 800eec8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eecc:	2200      	movs	r2, #0
 800eece:	ec51 0b17 	vmov	r0, r1, d7
 800eed2:	eeb0 8a47 	vmov.f32	s16, s14
 800eed6:	eef0 8a67 	vmov.f32	s17, s15
 800eeda:	2300      	movs	r3, #0
 800eedc:	f7f1 fe2c 	bl	8000b38 <__aeabi_dcmpeq>
 800eee0:	4681      	mov	r9, r0
 800eee2:	b160      	cbz	r0, 800eefe <_dtoa_r+0xee>
 800eee4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eee6:	2301      	movs	r3, #1
 800eee8:	6013      	str	r3, [r2, #0]
 800eeea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	f000 8568 	beq.w	800f9c2 <_dtoa_r+0xbb2>
 800eef2:	4b86      	ldr	r3, [pc, #536]	; (800f10c <_dtoa_r+0x2fc>)
 800eef4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eef6:	6013      	str	r3, [r2, #0]
 800eef8:	3b01      	subs	r3, #1
 800eefa:	9300      	str	r3, [sp, #0]
 800eefc:	e7da      	b.n	800eeb4 <_dtoa_r+0xa4>
 800eefe:	aa10      	add	r2, sp, #64	; 0x40
 800ef00:	a911      	add	r1, sp, #68	; 0x44
 800ef02:	4620      	mov	r0, r4
 800ef04:	eeb0 0a48 	vmov.f32	s0, s16
 800ef08:	eef0 0a68 	vmov.f32	s1, s17
 800ef0c:	f001 f994 	bl	8010238 <__d2b>
 800ef10:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ef14:	4682      	mov	sl, r0
 800ef16:	2d00      	cmp	r5, #0
 800ef18:	d07f      	beq.n	800f01a <_dtoa_r+0x20a>
 800ef1a:	ee18 3a90 	vmov	r3, s17
 800ef1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef22:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ef26:	ec51 0b18 	vmov	r0, r1, d8
 800ef2a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ef2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ef32:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ef36:	4619      	mov	r1, r3
 800ef38:	2200      	movs	r2, #0
 800ef3a:	4b75      	ldr	r3, [pc, #468]	; (800f110 <_dtoa_r+0x300>)
 800ef3c:	f7f1 f9dc 	bl	80002f8 <__aeabi_dsub>
 800ef40:	a367      	add	r3, pc, #412	; (adr r3, 800f0e0 <_dtoa_r+0x2d0>)
 800ef42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef46:	f7f1 fb8f 	bl	8000668 <__aeabi_dmul>
 800ef4a:	a367      	add	r3, pc, #412	; (adr r3, 800f0e8 <_dtoa_r+0x2d8>)
 800ef4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef50:	f7f1 f9d4 	bl	80002fc <__adddf3>
 800ef54:	4606      	mov	r6, r0
 800ef56:	4628      	mov	r0, r5
 800ef58:	460f      	mov	r7, r1
 800ef5a:	f7f1 fb1b 	bl	8000594 <__aeabi_i2d>
 800ef5e:	a364      	add	r3, pc, #400	; (adr r3, 800f0f0 <_dtoa_r+0x2e0>)
 800ef60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef64:	f7f1 fb80 	bl	8000668 <__aeabi_dmul>
 800ef68:	4602      	mov	r2, r0
 800ef6a:	460b      	mov	r3, r1
 800ef6c:	4630      	mov	r0, r6
 800ef6e:	4639      	mov	r1, r7
 800ef70:	f7f1 f9c4 	bl	80002fc <__adddf3>
 800ef74:	4606      	mov	r6, r0
 800ef76:	460f      	mov	r7, r1
 800ef78:	f7f1 fe26 	bl	8000bc8 <__aeabi_d2iz>
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	4683      	mov	fp, r0
 800ef80:	2300      	movs	r3, #0
 800ef82:	4630      	mov	r0, r6
 800ef84:	4639      	mov	r1, r7
 800ef86:	f7f1 fde1 	bl	8000b4c <__aeabi_dcmplt>
 800ef8a:	b148      	cbz	r0, 800efa0 <_dtoa_r+0x190>
 800ef8c:	4658      	mov	r0, fp
 800ef8e:	f7f1 fb01 	bl	8000594 <__aeabi_i2d>
 800ef92:	4632      	mov	r2, r6
 800ef94:	463b      	mov	r3, r7
 800ef96:	f7f1 fdcf 	bl	8000b38 <__aeabi_dcmpeq>
 800ef9a:	b908      	cbnz	r0, 800efa0 <_dtoa_r+0x190>
 800ef9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800efa0:	f1bb 0f16 	cmp.w	fp, #22
 800efa4:	d857      	bhi.n	800f056 <_dtoa_r+0x246>
 800efa6:	4b5b      	ldr	r3, [pc, #364]	; (800f114 <_dtoa_r+0x304>)
 800efa8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800efac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb0:	ec51 0b18 	vmov	r0, r1, d8
 800efb4:	f7f1 fdca 	bl	8000b4c <__aeabi_dcmplt>
 800efb8:	2800      	cmp	r0, #0
 800efba:	d04e      	beq.n	800f05a <_dtoa_r+0x24a>
 800efbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800efc0:	2300      	movs	r3, #0
 800efc2:	930c      	str	r3, [sp, #48]	; 0x30
 800efc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800efc6:	1b5b      	subs	r3, r3, r5
 800efc8:	1e5a      	subs	r2, r3, #1
 800efca:	bf45      	ittet	mi
 800efcc:	f1c3 0301 	rsbmi	r3, r3, #1
 800efd0:	9305      	strmi	r3, [sp, #20]
 800efd2:	2300      	movpl	r3, #0
 800efd4:	2300      	movmi	r3, #0
 800efd6:	9206      	str	r2, [sp, #24]
 800efd8:	bf54      	ite	pl
 800efda:	9305      	strpl	r3, [sp, #20]
 800efdc:	9306      	strmi	r3, [sp, #24]
 800efde:	f1bb 0f00 	cmp.w	fp, #0
 800efe2:	db3c      	blt.n	800f05e <_dtoa_r+0x24e>
 800efe4:	9b06      	ldr	r3, [sp, #24]
 800efe6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800efea:	445b      	add	r3, fp
 800efec:	9306      	str	r3, [sp, #24]
 800efee:	2300      	movs	r3, #0
 800eff0:	9308      	str	r3, [sp, #32]
 800eff2:	9b07      	ldr	r3, [sp, #28]
 800eff4:	2b09      	cmp	r3, #9
 800eff6:	d868      	bhi.n	800f0ca <_dtoa_r+0x2ba>
 800eff8:	2b05      	cmp	r3, #5
 800effa:	bfc4      	itt	gt
 800effc:	3b04      	subgt	r3, #4
 800effe:	9307      	strgt	r3, [sp, #28]
 800f000:	9b07      	ldr	r3, [sp, #28]
 800f002:	f1a3 0302 	sub.w	r3, r3, #2
 800f006:	bfcc      	ite	gt
 800f008:	2500      	movgt	r5, #0
 800f00a:	2501      	movle	r5, #1
 800f00c:	2b03      	cmp	r3, #3
 800f00e:	f200 8085 	bhi.w	800f11c <_dtoa_r+0x30c>
 800f012:	e8df f003 	tbb	[pc, r3]
 800f016:	3b2e      	.short	0x3b2e
 800f018:	5839      	.short	0x5839
 800f01a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f01e:	441d      	add	r5, r3
 800f020:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f024:	2b20      	cmp	r3, #32
 800f026:	bfc1      	itttt	gt
 800f028:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f02c:	fa08 f803 	lslgt.w	r8, r8, r3
 800f030:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f034:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f038:	bfd6      	itet	le
 800f03a:	f1c3 0320 	rsble	r3, r3, #32
 800f03e:	ea48 0003 	orrgt.w	r0, r8, r3
 800f042:	fa06 f003 	lslle.w	r0, r6, r3
 800f046:	f7f1 fa95 	bl	8000574 <__aeabi_ui2d>
 800f04a:	2201      	movs	r2, #1
 800f04c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f050:	3d01      	subs	r5, #1
 800f052:	920e      	str	r2, [sp, #56]	; 0x38
 800f054:	e76f      	b.n	800ef36 <_dtoa_r+0x126>
 800f056:	2301      	movs	r3, #1
 800f058:	e7b3      	b.n	800efc2 <_dtoa_r+0x1b2>
 800f05a:	900c      	str	r0, [sp, #48]	; 0x30
 800f05c:	e7b2      	b.n	800efc4 <_dtoa_r+0x1b4>
 800f05e:	9b05      	ldr	r3, [sp, #20]
 800f060:	eba3 030b 	sub.w	r3, r3, fp
 800f064:	9305      	str	r3, [sp, #20]
 800f066:	f1cb 0300 	rsb	r3, fp, #0
 800f06a:	9308      	str	r3, [sp, #32]
 800f06c:	2300      	movs	r3, #0
 800f06e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f070:	e7bf      	b.n	800eff2 <_dtoa_r+0x1e2>
 800f072:	2300      	movs	r3, #0
 800f074:	9309      	str	r3, [sp, #36]	; 0x24
 800f076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f078:	2b00      	cmp	r3, #0
 800f07a:	dc52      	bgt.n	800f122 <_dtoa_r+0x312>
 800f07c:	2301      	movs	r3, #1
 800f07e:	9301      	str	r3, [sp, #4]
 800f080:	9304      	str	r3, [sp, #16]
 800f082:	461a      	mov	r2, r3
 800f084:	920a      	str	r2, [sp, #40]	; 0x28
 800f086:	e00b      	b.n	800f0a0 <_dtoa_r+0x290>
 800f088:	2301      	movs	r3, #1
 800f08a:	e7f3      	b.n	800f074 <_dtoa_r+0x264>
 800f08c:	2300      	movs	r3, #0
 800f08e:	9309      	str	r3, [sp, #36]	; 0x24
 800f090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f092:	445b      	add	r3, fp
 800f094:	9301      	str	r3, [sp, #4]
 800f096:	3301      	adds	r3, #1
 800f098:	2b01      	cmp	r3, #1
 800f09a:	9304      	str	r3, [sp, #16]
 800f09c:	bfb8      	it	lt
 800f09e:	2301      	movlt	r3, #1
 800f0a0:	69e0      	ldr	r0, [r4, #28]
 800f0a2:	2100      	movs	r1, #0
 800f0a4:	2204      	movs	r2, #4
 800f0a6:	f102 0614 	add.w	r6, r2, #20
 800f0aa:	429e      	cmp	r6, r3
 800f0ac:	d93d      	bls.n	800f12a <_dtoa_r+0x31a>
 800f0ae:	6041      	str	r1, [r0, #4]
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	f000 fd9f 	bl	800fbf4 <_Balloc>
 800f0b6:	9000      	str	r0, [sp, #0]
 800f0b8:	2800      	cmp	r0, #0
 800f0ba:	d139      	bne.n	800f130 <_dtoa_r+0x320>
 800f0bc:	4b16      	ldr	r3, [pc, #88]	; (800f118 <_dtoa_r+0x308>)
 800f0be:	4602      	mov	r2, r0
 800f0c0:	f240 11af 	movw	r1, #431	; 0x1af
 800f0c4:	e6bd      	b.n	800ee42 <_dtoa_r+0x32>
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	e7e1      	b.n	800f08e <_dtoa_r+0x27e>
 800f0ca:	2501      	movs	r5, #1
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	9307      	str	r3, [sp, #28]
 800f0d0:	9509      	str	r5, [sp, #36]	; 0x24
 800f0d2:	f04f 33ff 	mov.w	r3, #4294967295
 800f0d6:	9301      	str	r3, [sp, #4]
 800f0d8:	9304      	str	r3, [sp, #16]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	2312      	movs	r3, #18
 800f0de:	e7d1      	b.n	800f084 <_dtoa_r+0x274>
 800f0e0:	636f4361 	.word	0x636f4361
 800f0e4:	3fd287a7 	.word	0x3fd287a7
 800f0e8:	8b60c8b3 	.word	0x8b60c8b3
 800f0ec:	3fc68a28 	.word	0x3fc68a28
 800f0f0:	509f79fb 	.word	0x509f79fb
 800f0f4:	3fd34413 	.word	0x3fd34413
 800f0f8:	08011fda 	.word	0x08011fda
 800f0fc:	08011ff1 	.word	0x08011ff1
 800f100:	7ff00000 	.word	0x7ff00000
 800f104:	08011fd6 	.word	0x08011fd6
 800f108:	08011fcd 	.word	0x08011fcd
 800f10c:	08011faa 	.word	0x08011faa
 800f110:	3ff80000 	.word	0x3ff80000
 800f114:	080120e0 	.word	0x080120e0
 800f118:	08012049 	.word	0x08012049
 800f11c:	2301      	movs	r3, #1
 800f11e:	9309      	str	r3, [sp, #36]	; 0x24
 800f120:	e7d7      	b.n	800f0d2 <_dtoa_r+0x2c2>
 800f122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f124:	9301      	str	r3, [sp, #4]
 800f126:	9304      	str	r3, [sp, #16]
 800f128:	e7ba      	b.n	800f0a0 <_dtoa_r+0x290>
 800f12a:	3101      	adds	r1, #1
 800f12c:	0052      	lsls	r2, r2, #1
 800f12e:	e7ba      	b.n	800f0a6 <_dtoa_r+0x296>
 800f130:	69e3      	ldr	r3, [r4, #28]
 800f132:	9a00      	ldr	r2, [sp, #0]
 800f134:	601a      	str	r2, [r3, #0]
 800f136:	9b04      	ldr	r3, [sp, #16]
 800f138:	2b0e      	cmp	r3, #14
 800f13a:	f200 80a8 	bhi.w	800f28e <_dtoa_r+0x47e>
 800f13e:	2d00      	cmp	r5, #0
 800f140:	f000 80a5 	beq.w	800f28e <_dtoa_r+0x47e>
 800f144:	f1bb 0f00 	cmp.w	fp, #0
 800f148:	dd38      	ble.n	800f1bc <_dtoa_r+0x3ac>
 800f14a:	4bc0      	ldr	r3, [pc, #768]	; (800f44c <_dtoa_r+0x63c>)
 800f14c:	f00b 020f 	and.w	r2, fp, #15
 800f150:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f154:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f158:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f15c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f160:	d019      	beq.n	800f196 <_dtoa_r+0x386>
 800f162:	4bbb      	ldr	r3, [pc, #748]	; (800f450 <_dtoa_r+0x640>)
 800f164:	ec51 0b18 	vmov	r0, r1, d8
 800f168:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f16c:	f7f1 fba6 	bl	80008bc <__aeabi_ddiv>
 800f170:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f174:	f008 080f 	and.w	r8, r8, #15
 800f178:	2503      	movs	r5, #3
 800f17a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f450 <_dtoa_r+0x640>
 800f17e:	f1b8 0f00 	cmp.w	r8, #0
 800f182:	d10a      	bne.n	800f19a <_dtoa_r+0x38a>
 800f184:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f188:	4632      	mov	r2, r6
 800f18a:	463b      	mov	r3, r7
 800f18c:	f7f1 fb96 	bl	80008bc <__aeabi_ddiv>
 800f190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f194:	e02b      	b.n	800f1ee <_dtoa_r+0x3de>
 800f196:	2502      	movs	r5, #2
 800f198:	e7ef      	b.n	800f17a <_dtoa_r+0x36a>
 800f19a:	f018 0f01 	tst.w	r8, #1
 800f19e:	d008      	beq.n	800f1b2 <_dtoa_r+0x3a2>
 800f1a0:	4630      	mov	r0, r6
 800f1a2:	4639      	mov	r1, r7
 800f1a4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f1a8:	f7f1 fa5e 	bl	8000668 <__aeabi_dmul>
 800f1ac:	3501      	adds	r5, #1
 800f1ae:	4606      	mov	r6, r0
 800f1b0:	460f      	mov	r7, r1
 800f1b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f1b6:	f109 0908 	add.w	r9, r9, #8
 800f1ba:	e7e0      	b.n	800f17e <_dtoa_r+0x36e>
 800f1bc:	f000 809f 	beq.w	800f2fe <_dtoa_r+0x4ee>
 800f1c0:	f1cb 0600 	rsb	r6, fp, #0
 800f1c4:	4ba1      	ldr	r3, [pc, #644]	; (800f44c <_dtoa_r+0x63c>)
 800f1c6:	4fa2      	ldr	r7, [pc, #648]	; (800f450 <_dtoa_r+0x640>)
 800f1c8:	f006 020f 	and.w	r2, r6, #15
 800f1cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d4:	ec51 0b18 	vmov	r0, r1, d8
 800f1d8:	f7f1 fa46 	bl	8000668 <__aeabi_dmul>
 800f1dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1e0:	1136      	asrs	r6, r6, #4
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	2502      	movs	r5, #2
 800f1e6:	2e00      	cmp	r6, #0
 800f1e8:	d17e      	bne.n	800f2e8 <_dtoa_r+0x4d8>
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d1d0      	bne.n	800f190 <_dtoa_r+0x380>
 800f1ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f1f0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	f000 8084 	beq.w	800f302 <_dtoa_r+0x4f2>
 800f1fa:	4b96      	ldr	r3, [pc, #600]	; (800f454 <_dtoa_r+0x644>)
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	4640      	mov	r0, r8
 800f200:	4649      	mov	r1, r9
 800f202:	f7f1 fca3 	bl	8000b4c <__aeabi_dcmplt>
 800f206:	2800      	cmp	r0, #0
 800f208:	d07b      	beq.n	800f302 <_dtoa_r+0x4f2>
 800f20a:	9b04      	ldr	r3, [sp, #16]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d078      	beq.n	800f302 <_dtoa_r+0x4f2>
 800f210:	9b01      	ldr	r3, [sp, #4]
 800f212:	2b00      	cmp	r3, #0
 800f214:	dd39      	ble.n	800f28a <_dtoa_r+0x47a>
 800f216:	4b90      	ldr	r3, [pc, #576]	; (800f458 <_dtoa_r+0x648>)
 800f218:	2200      	movs	r2, #0
 800f21a:	4640      	mov	r0, r8
 800f21c:	4649      	mov	r1, r9
 800f21e:	f7f1 fa23 	bl	8000668 <__aeabi_dmul>
 800f222:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f226:	9e01      	ldr	r6, [sp, #4]
 800f228:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f22c:	3501      	adds	r5, #1
 800f22e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f232:	4628      	mov	r0, r5
 800f234:	f7f1 f9ae 	bl	8000594 <__aeabi_i2d>
 800f238:	4642      	mov	r2, r8
 800f23a:	464b      	mov	r3, r9
 800f23c:	f7f1 fa14 	bl	8000668 <__aeabi_dmul>
 800f240:	4b86      	ldr	r3, [pc, #536]	; (800f45c <_dtoa_r+0x64c>)
 800f242:	2200      	movs	r2, #0
 800f244:	f7f1 f85a 	bl	80002fc <__adddf3>
 800f248:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f24c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f250:	9303      	str	r3, [sp, #12]
 800f252:	2e00      	cmp	r6, #0
 800f254:	d158      	bne.n	800f308 <_dtoa_r+0x4f8>
 800f256:	4b82      	ldr	r3, [pc, #520]	; (800f460 <_dtoa_r+0x650>)
 800f258:	2200      	movs	r2, #0
 800f25a:	4640      	mov	r0, r8
 800f25c:	4649      	mov	r1, r9
 800f25e:	f7f1 f84b 	bl	80002f8 <__aeabi_dsub>
 800f262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f266:	4680      	mov	r8, r0
 800f268:	4689      	mov	r9, r1
 800f26a:	f7f1 fc8d 	bl	8000b88 <__aeabi_dcmpgt>
 800f26e:	2800      	cmp	r0, #0
 800f270:	f040 8296 	bne.w	800f7a0 <_dtoa_r+0x990>
 800f274:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f278:	4640      	mov	r0, r8
 800f27a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f27e:	4649      	mov	r1, r9
 800f280:	f7f1 fc64 	bl	8000b4c <__aeabi_dcmplt>
 800f284:	2800      	cmp	r0, #0
 800f286:	f040 8289 	bne.w	800f79c <_dtoa_r+0x98c>
 800f28a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f28e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f290:	2b00      	cmp	r3, #0
 800f292:	f2c0 814e 	blt.w	800f532 <_dtoa_r+0x722>
 800f296:	f1bb 0f0e 	cmp.w	fp, #14
 800f29a:	f300 814a 	bgt.w	800f532 <_dtoa_r+0x722>
 800f29e:	4b6b      	ldr	r3, [pc, #428]	; (800f44c <_dtoa_r+0x63c>)
 800f2a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f2a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f2a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	f280 80dc 	bge.w	800f468 <_dtoa_r+0x658>
 800f2b0:	9b04      	ldr	r3, [sp, #16]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	f300 80d8 	bgt.w	800f468 <_dtoa_r+0x658>
 800f2b8:	f040 826f 	bne.w	800f79a <_dtoa_r+0x98a>
 800f2bc:	4b68      	ldr	r3, [pc, #416]	; (800f460 <_dtoa_r+0x650>)
 800f2be:	2200      	movs	r2, #0
 800f2c0:	4640      	mov	r0, r8
 800f2c2:	4649      	mov	r1, r9
 800f2c4:	f7f1 f9d0 	bl	8000668 <__aeabi_dmul>
 800f2c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f2cc:	f7f1 fc52 	bl	8000b74 <__aeabi_dcmpge>
 800f2d0:	9e04      	ldr	r6, [sp, #16]
 800f2d2:	4637      	mov	r7, r6
 800f2d4:	2800      	cmp	r0, #0
 800f2d6:	f040 8245 	bne.w	800f764 <_dtoa_r+0x954>
 800f2da:	9d00      	ldr	r5, [sp, #0]
 800f2dc:	2331      	movs	r3, #49	; 0x31
 800f2de:	f805 3b01 	strb.w	r3, [r5], #1
 800f2e2:	f10b 0b01 	add.w	fp, fp, #1
 800f2e6:	e241      	b.n	800f76c <_dtoa_r+0x95c>
 800f2e8:	07f2      	lsls	r2, r6, #31
 800f2ea:	d505      	bpl.n	800f2f8 <_dtoa_r+0x4e8>
 800f2ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2f0:	f7f1 f9ba 	bl	8000668 <__aeabi_dmul>
 800f2f4:	3501      	adds	r5, #1
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	1076      	asrs	r6, r6, #1
 800f2fa:	3708      	adds	r7, #8
 800f2fc:	e773      	b.n	800f1e6 <_dtoa_r+0x3d6>
 800f2fe:	2502      	movs	r5, #2
 800f300:	e775      	b.n	800f1ee <_dtoa_r+0x3de>
 800f302:	9e04      	ldr	r6, [sp, #16]
 800f304:	465f      	mov	r7, fp
 800f306:	e792      	b.n	800f22e <_dtoa_r+0x41e>
 800f308:	9900      	ldr	r1, [sp, #0]
 800f30a:	4b50      	ldr	r3, [pc, #320]	; (800f44c <_dtoa_r+0x63c>)
 800f30c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f310:	4431      	add	r1, r6
 800f312:	9102      	str	r1, [sp, #8]
 800f314:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f316:	eeb0 9a47 	vmov.f32	s18, s14
 800f31a:	eef0 9a67 	vmov.f32	s19, s15
 800f31e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f322:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f326:	2900      	cmp	r1, #0
 800f328:	d044      	beq.n	800f3b4 <_dtoa_r+0x5a4>
 800f32a:	494e      	ldr	r1, [pc, #312]	; (800f464 <_dtoa_r+0x654>)
 800f32c:	2000      	movs	r0, #0
 800f32e:	f7f1 fac5 	bl	80008bc <__aeabi_ddiv>
 800f332:	ec53 2b19 	vmov	r2, r3, d9
 800f336:	f7f0 ffdf 	bl	80002f8 <__aeabi_dsub>
 800f33a:	9d00      	ldr	r5, [sp, #0]
 800f33c:	ec41 0b19 	vmov	d9, r0, r1
 800f340:	4649      	mov	r1, r9
 800f342:	4640      	mov	r0, r8
 800f344:	f7f1 fc40 	bl	8000bc8 <__aeabi_d2iz>
 800f348:	4606      	mov	r6, r0
 800f34a:	f7f1 f923 	bl	8000594 <__aeabi_i2d>
 800f34e:	4602      	mov	r2, r0
 800f350:	460b      	mov	r3, r1
 800f352:	4640      	mov	r0, r8
 800f354:	4649      	mov	r1, r9
 800f356:	f7f0 ffcf 	bl	80002f8 <__aeabi_dsub>
 800f35a:	3630      	adds	r6, #48	; 0x30
 800f35c:	f805 6b01 	strb.w	r6, [r5], #1
 800f360:	ec53 2b19 	vmov	r2, r3, d9
 800f364:	4680      	mov	r8, r0
 800f366:	4689      	mov	r9, r1
 800f368:	f7f1 fbf0 	bl	8000b4c <__aeabi_dcmplt>
 800f36c:	2800      	cmp	r0, #0
 800f36e:	d164      	bne.n	800f43a <_dtoa_r+0x62a>
 800f370:	4642      	mov	r2, r8
 800f372:	464b      	mov	r3, r9
 800f374:	4937      	ldr	r1, [pc, #220]	; (800f454 <_dtoa_r+0x644>)
 800f376:	2000      	movs	r0, #0
 800f378:	f7f0 ffbe 	bl	80002f8 <__aeabi_dsub>
 800f37c:	ec53 2b19 	vmov	r2, r3, d9
 800f380:	f7f1 fbe4 	bl	8000b4c <__aeabi_dcmplt>
 800f384:	2800      	cmp	r0, #0
 800f386:	f040 80b6 	bne.w	800f4f6 <_dtoa_r+0x6e6>
 800f38a:	9b02      	ldr	r3, [sp, #8]
 800f38c:	429d      	cmp	r5, r3
 800f38e:	f43f af7c 	beq.w	800f28a <_dtoa_r+0x47a>
 800f392:	4b31      	ldr	r3, [pc, #196]	; (800f458 <_dtoa_r+0x648>)
 800f394:	ec51 0b19 	vmov	r0, r1, d9
 800f398:	2200      	movs	r2, #0
 800f39a:	f7f1 f965 	bl	8000668 <__aeabi_dmul>
 800f39e:	4b2e      	ldr	r3, [pc, #184]	; (800f458 <_dtoa_r+0x648>)
 800f3a0:	ec41 0b19 	vmov	d9, r0, r1
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	4640      	mov	r0, r8
 800f3a8:	4649      	mov	r1, r9
 800f3aa:	f7f1 f95d 	bl	8000668 <__aeabi_dmul>
 800f3ae:	4680      	mov	r8, r0
 800f3b0:	4689      	mov	r9, r1
 800f3b2:	e7c5      	b.n	800f340 <_dtoa_r+0x530>
 800f3b4:	ec51 0b17 	vmov	r0, r1, d7
 800f3b8:	f7f1 f956 	bl	8000668 <__aeabi_dmul>
 800f3bc:	9b02      	ldr	r3, [sp, #8]
 800f3be:	9d00      	ldr	r5, [sp, #0]
 800f3c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f3c2:	ec41 0b19 	vmov	d9, r0, r1
 800f3c6:	4649      	mov	r1, r9
 800f3c8:	4640      	mov	r0, r8
 800f3ca:	f7f1 fbfd 	bl	8000bc8 <__aeabi_d2iz>
 800f3ce:	4606      	mov	r6, r0
 800f3d0:	f7f1 f8e0 	bl	8000594 <__aeabi_i2d>
 800f3d4:	3630      	adds	r6, #48	; 0x30
 800f3d6:	4602      	mov	r2, r0
 800f3d8:	460b      	mov	r3, r1
 800f3da:	4640      	mov	r0, r8
 800f3dc:	4649      	mov	r1, r9
 800f3de:	f7f0 ff8b 	bl	80002f8 <__aeabi_dsub>
 800f3e2:	f805 6b01 	strb.w	r6, [r5], #1
 800f3e6:	9b02      	ldr	r3, [sp, #8]
 800f3e8:	429d      	cmp	r5, r3
 800f3ea:	4680      	mov	r8, r0
 800f3ec:	4689      	mov	r9, r1
 800f3ee:	f04f 0200 	mov.w	r2, #0
 800f3f2:	d124      	bne.n	800f43e <_dtoa_r+0x62e>
 800f3f4:	4b1b      	ldr	r3, [pc, #108]	; (800f464 <_dtoa_r+0x654>)
 800f3f6:	ec51 0b19 	vmov	r0, r1, d9
 800f3fa:	f7f0 ff7f 	bl	80002fc <__adddf3>
 800f3fe:	4602      	mov	r2, r0
 800f400:	460b      	mov	r3, r1
 800f402:	4640      	mov	r0, r8
 800f404:	4649      	mov	r1, r9
 800f406:	f7f1 fbbf 	bl	8000b88 <__aeabi_dcmpgt>
 800f40a:	2800      	cmp	r0, #0
 800f40c:	d173      	bne.n	800f4f6 <_dtoa_r+0x6e6>
 800f40e:	ec53 2b19 	vmov	r2, r3, d9
 800f412:	4914      	ldr	r1, [pc, #80]	; (800f464 <_dtoa_r+0x654>)
 800f414:	2000      	movs	r0, #0
 800f416:	f7f0 ff6f 	bl	80002f8 <__aeabi_dsub>
 800f41a:	4602      	mov	r2, r0
 800f41c:	460b      	mov	r3, r1
 800f41e:	4640      	mov	r0, r8
 800f420:	4649      	mov	r1, r9
 800f422:	f7f1 fb93 	bl	8000b4c <__aeabi_dcmplt>
 800f426:	2800      	cmp	r0, #0
 800f428:	f43f af2f 	beq.w	800f28a <_dtoa_r+0x47a>
 800f42c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f42e:	1e6b      	subs	r3, r5, #1
 800f430:	930f      	str	r3, [sp, #60]	; 0x3c
 800f432:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f436:	2b30      	cmp	r3, #48	; 0x30
 800f438:	d0f8      	beq.n	800f42c <_dtoa_r+0x61c>
 800f43a:	46bb      	mov	fp, r7
 800f43c:	e04a      	b.n	800f4d4 <_dtoa_r+0x6c4>
 800f43e:	4b06      	ldr	r3, [pc, #24]	; (800f458 <_dtoa_r+0x648>)
 800f440:	f7f1 f912 	bl	8000668 <__aeabi_dmul>
 800f444:	4680      	mov	r8, r0
 800f446:	4689      	mov	r9, r1
 800f448:	e7bd      	b.n	800f3c6 <_dtoa_r+0x5b6>
 800f44a:	bf00      	nop
 800f44c:	080120e0 	.word	0x080120e0
 800f450:	080120b8 	.word	0x080120b8
 800f454:	3ff00000 	.word	0x3ff00000
 800f458:	40240000 	.word	0x40240000
 800f45c:	401c0000 	.word	0x401c0000
 800f460:	40140000 	.word	0x40140000
 800f464:	3fe00000 	.word	0x3fe00000
 800f468:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f46c:	9d00      	ldr	r5, [sp, #0]
 800f46e:	4642      	mov	r2, r8
 800f470:	464b      	mov	r3, r9
 800f472:	4630      	mov	r0, r6
 800f474:	4639      	mov	r1, r7
 800f476:	f7f1 fa21 	bl	80008bc <__aeabi_ddiv>
 800f47a:	f7f1 fba5 	bl	8000bc8 <__aeabi_d2iz>
 800f47e:	9001      	str	r0, [sp, #4]
 800f480:	f7f1 f888 	bl	8000594 <__aeabi_i2d>
 800f484:	4642      	mov	r2, r8
 800f486:	464b      	mov	r3, r9
 800f488:	f7f1 f8ee 	bl	8000668 <__aeabi_dmul>
 800f48c:	4602      	mov	r2, r0
 800f48e:	460b      	mov	r3, r1
 800f490:	4630      	mov	r0, r6
 800f492:	4639      	mov	r1, r7
 800f494:	f7f0 ff30 	bl	80002f8 <__aeabi_dsub>
 800f498:	9e01      	ldr	r6, [sp, #4]
 800f49a:	9f04      	ldr	r7, [sp, #16]
 800f49c:	3630      	adds	r6, #48	; 0x30
 800f49e:	f805 6b01 	strb.w	r6, [r5], #1
 800f4a2:	9e00      	ldr	r6, [sp, #0]
 800f4a4:	1bae      	subs	r6, r5, r6
 800f4a6:	42b7      	cmp	r7, r6
 800f4a8:	4602      	mov	r2, r0
 800f4aa:	460b      	mov	r3, r1
 800f4ac:	d134      	bne.n	800f518 <_dtoa_r+0x708>
 800f4ae:	f7f0 ff25 	bl	80002fc <__adddf3>
 800f4b2:	4642      	mov	r2, r8
 800f4b4:	464b      	mov	r3, r9
 800f4b6:	4606      	mov	r6, r0
 800f4b8:	460f      	mov	r7, r1
 800f4ba:	f7f1 fb65 	bl	8000b88 <__aeabi_dcmpgt>
 800f4be:	b9c8      	cbnz	r0, 800f4f4 <_dtoa_r+0x6e4>
 800f4c0:	4642      	mov	r2, r8
 800f4c2:	464b      	mov	r3, r9
 800f4c4:	4630      	mov	r0, r6
 800f4c6:	4639      	mov	r1, r7
 800f4c8:	f7f1 fb36 	bl	8000b38 <__aeabi_dcmpeq>
 800f4cc:	b110      	cbz	r0, 800f4d4 <_dtoa_r+0x6c4>
 800f4ce:	9b01      	ldr	r3, [sp, #4]
 800f4d0:	07db      	lsls	r3, r3, #31
 800f4d2:	d40f      	bmi.n	800f4f4 <_dtoa_r+0x6e4>
 800f4d4:	4651      	mov	r1, sl
 800f4d6:	4620      	mov	r0, r4
 800f4d8:	f000 fbcc 	bl	800fc74 <_Bfree>
 800f4dc:	2300      	movs	r3, #0
 800f4de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f4e0:	702b      	strb	r3, [r5, #0]
 800f4e2:	f10b 0301 	add.w	r3, fp, #1
 800f4e6:	6013      	str	r3, [r2, #0]
 800f4e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	f43f ace2 	beq.w	800eeb4 <_dtoa_r+0xa4>
 800f4f0:	601d      	str	r5, [r3, #0]
 800f4f2:	e4df      	b.n	800eeb4 <_dtoa_r+0xa4>
 800f4f4:	465f      	mov	r7, fp
 800f4f6:	462b      	mov	r3, r5
 800f4f8:	461d      	mov	r5, r3
 800f4fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f4fe:	2a39      	cmp	r2, #57	; 0x39
 800f500:	d106      	bne.n	800f510 <_dtoa_r+0x700>
 800f502:	9a00      	ldr	r2, [sp, #0]
 800f504:	429a      	cmp	r2, r3
 800f506:	d1f7      	bne.n	800f4f8 <_dtoa_r+0x6e8>
 800f508:	9900      	ldr	r1, [sp, #0]
 800f50a:	2230      	movs	r2, #48	; 0x30
 800f50c:	3701      	adds	r7, #1
 800f50e:	700a      	strb	r2, [r1, #0]
 800f510:	781a      	ldrb	r2, [r3, #0]
 800f512:	3201      	adds	r2, #1
 800f514:	701a      	strb	r2, [r3, #0]
 800f516:	e790      	b.n	800f43a <_dtoa_r+0x62a>
 800f518:	4ba3      	ldr	r3, [pc, #652]	; (800f7a8 <_dtoa_r+0x998>)
 800f51a:	2200      	movs	r2, #0
 800f51c:	f7f1 f8a4 	bl	8000668 <__aeabi_dmul>
 800f520:	2200      	movs	r2, #0
 800f522:	2300      	movs	r3, #0
 800f524:	4606      	mov	r6, r0
 800f526:	460f      	mov	r7, r1
 800f528:	f7f1 fb06 	bl	8000b38 <__aeabi_dcmpeq>
 800f52c:	2800      	cmp	r0, #0
 800f52e:	d09e      	beq.n	800f46e <_dtoa_r+0x65e>
 800f530:	e7d0      	b.n	800f4d4 <_dtoa_r+0x6c4>
 800f532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f534:	2a00      	cmp	r2, #0
 800f536:	f000 80ca 	beq.w	800f6ce <_dtoa_r+0x8be>
 800f53a:	9a07      	ldr	r2, [sp, #28]
 800f53c:	2a01      	cmp	r2, #1
 800f53e:	f300 80ad 	bgt.w	800f69c <_dtoa_r+0x88c>
 800f542:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f544:	2a00      	cmp	r2, #0
 800f546:	f000 80a5 	beq.w	800f694 <_dtoa_r+0x884>
 800f54a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f54e:	9e08      	ldr	r6, [sp, #32]
 800f550:	9d05      	ldr	r5, [sp, #20]
 800f552:	9a05      	ldr	r2, [sp, #20]
 800f554:	441a      	add	r2, r3
 800f556:	9205      	str	r2, [sp, #20]
 800f558:	9a06      	ldr	r2, [sp, #24]
 800f55a:	2101      	movs	r1, #1
 800f55c:	441a      	add	r2, r3
 800f55e:	4620      	mov	r0, r4
 800f560:	9206      	str	r2, [sp, #24]
 800f562:	f000 fc3d 	bl	800fde0 <__i2b>
 800f566:	4607      	mov	r7, r0
 800f568:	b165      	cbz	r5, 800f584 <_dtoa_r+0x774>
 800f56a:	9b06      	ldr	r3, [sp, #24]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	dd09      	ble.n	800f584 <_dtoa_r+0x774>
 800f570:	42ab      	cmp	r3, r5
 800f572:	9a05      	ldr	r2, [sp, #20]
 800f574:	bfa8      	it	ge
 800f576:	462b      	movge	r3, r5
 800f578:	1ad2      	subs	r2, r2, r3
 800f57a:	9205      	str	r2, [sp, #20]
 800f57c:	9a06      	ldr	r2, [sp, #24]
 800f57e:	1aed      	subs	r5, r5, r3
 800f580:	1ad3      	subs	r3, r2, r3
 800f582:	9306      	str	r3, [sp, #24]
 800f584:	9b08      	ldr	r3, [sp, #32]
 800f586:	b1f3      	cbz	r3, 800f5c6 <_dtoa_r+0x7b6>
 800f588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	f000 80a3 	beq.w	800f6d6 <_dtoa_r+0x8c6>
 800f590:	2e00      	cmp	r6, #0
 800f592:	dd10      	ble.n	800f5b6 <_dtoa_r+0x7a6>
 800f594:	4639      	mov	r1, r7
 800f596:	4632      	mov	r2, r6
 800f598:	4620      	mov	r0, r4
 800f59a:	f000 fce1 	bl	800ff60 <__pow5mult>
 800f59e:	4652      	mov	r2, sl
 800f5a0:	4601      	mov	r1, r0
 800f5a2:	4607      	mov	r7, r0
 800f5a4:	4620      	mov	r0, r4
 800f5a6:	f000 fc31 	bl	800fe0c <__multiply>
 800f5aa:	4651      	mov	r1, sl
 800f5ac:	4680      	mov	r8, r0
 800f5ae:	4620      	mov	r0, r4
 800f5b0:	f000 fb60 	bl	800fc74 <_Bfree>
 800f5b4:	46c2      	mov	sl, r8
 800f5b6:	9b08      	ldr	r3, [sp, #32]
 800f5b8:	1b9a      	subs	r2, r3, r6
 800f5ba:	d004      	beq.n	800f5c6 <_dtoa_r+0x7b6>
 800f5bc:	4651      	mov	r1, sl
 800f5be:	4620      	mov	r0, r4
 800f5c0:	f000 fcce 	bl	800ff60 <__pow5mult>
 800f5c4:	4682      	mov	sl, r0
 800f5c6:	2101      	movs	r1, #1
 800f5c8:	4620      	mov	r0, r4
 800f5ca:	f000 fc09 	bl	800fde0 <__i2b>
 800f5ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	4606      	mov	r6, r0
 800f5d4:	f340 8081 	ble.w	800f6da <_dtoa_r+0x8ca>
 800f5d8:	461a      	mov	r2, r3
 800f5da:	4601      	mov	r1, r0
 800f5dc:	4620      	mov	r0, r4
 800f5de:	f000 fcbf 	bl	800ff60 <__pow5mult>
 800f5e2:	9b07      	ldr	r3, [sp, #28]
 800f5e4:	2b01      	cmp	r3, #1
 800f5e6:	4606      	mov	r6, r0
 800f5e8:	dd7a      	ble.n	800f6e0 <_dtoa_r+0x8d0>
 800f5ea:	f04f 0800 	mov.w	r8, #0
 800f5ee:	6933      	ldr	r3, [r6, #16]
 800f5f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f5f4:	6918      	ldr	r0, [r3, #16]
 800f5f6:	f000 fba5 	bl	800fd44 <__hi0bits>
 800f5fa:	f1c0 0020 	rsb	r0, r0, #32
 800f5fe:	9b06      	ldr	r3, [sp, #24]
 800f600:	4418      	add	r0, r3
 800f602:	f010 001f 	ands.w	r0, r0, #31
 800f606:	f000 8094 	beq.w	800f732 <_dtoa_r+0x922>
 800f60a:	f1c0 0320 	rsb	r3, r0, #32
 800f60e:	2b04      	cmp	r3, #4
 800f610:	f340 8085 	ble.w	800f71e <_dtoa_r+0x90e>
 800f614:	9b05      	ldr	r3, [sp, #20]
 800f616:	f1c0 001c 	rsb	r0, r0, #28
 800f61a:	4403      	add	r3, r0
 800f61c:	9305      	str	r3, [sp, #20]
 800f61e:	9b06      	ldr	r3, [sp, #24]
 800f620:	4403      	add	r3, r0
 800f622:	4405      	add	r5, r0
 800f624:	9306      	str	r3, [sp, #24]
 800f626:	9b05      	ldr	r3, [sp, #20]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	dd05      	ble.n	800f638 <_dtoa_r+0x828>
 800f62c:	4651      	mov	r1, sl
 800f62e:	461a      	mov	r2, r3
 800f630:	4620      	mov	r0, r4
 800f632:	f000 fcef 	bl	8010014 <__lshift>
 800f636:	4682      	mov	sl, r0
 800f638:	9b06      	ldr	r3, [sp, #24]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	dd05      	ble.n	800f64a <_dtoa_r+0x83a>
 800f63e:	4631      	mov	r1, r6
 800f640:	461a      	mov	r2, r3
 800f642:	4620      	mov	r0, r4
 800f644:	f000 fce6 	bl	8010014 <__lshift>
 800f648:	4606      	mov	r6, r0
 800f64a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d072      	beq.n	800f736 <_dtoa_r+0x926>
 800f650:	4631      	mov	r1, r6
 800f652:	4650      	mov	r0, sl
 800f654:	f000 fd4a 	bl	80100ec <__mcmp>
 800f658:	2800      	cmp	r0, #0
 800f65a:	da6c      	bge.n	800f736 <_dtoa_r+0x926>
 800f65c:	2300      	movs	r3, #0
 800f65e:	4651      	mov	r1, sl
 800f660:	220a      	movs	r2, #10
 800f662:	4620      	mov	r0, r4
 800f664:	f000 fb28 	bl	800fcb8 <__multadd>
 800f668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f66a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f66e:	4682      	mov	sl, r0
 800f670:	2b00      	cmp	r3, #0
 800f672:	f000 81b0 	beq.w	800f9d6 <_dtoa_r+0xbc6>
 800f676:	2300      	movs	r3, #0
 800f678:	4639      	mov	r1, r7
 800f67a:	220a      	movs	r2, #10
 800f67c:	4620      	mov	r0, r4
 800f67e:	f000 fb1b 	bl	800fcb8 <__multadd>
 800f682:	9b01      	ldr	r3, [sp, #4]
 800f684:	2b00      	cmp	r3, #0
 800f686:	4607      	mov	r7, r0
 800f688:	f300 8096 	bgt.w	800f7b8 <_dtoa_r+0x9a8>
 800f68c:	9b07      	ldr	r3, [sp, #28]
 800f68e:	2b02      	cmp	r3, #2
 800f690:	dc59      	bgt.n	800f746 <_dtoa_r+0x936>
 800f692:	e091      	b.n	800f7b8 <_dtoa_r+0x9a8>
 800f694:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f696:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f69a:	e758      	b.n	800f54e <_dtoa_r+0x73e>
 800f69c:	9b04      	ldr	r3, [sp, #16]
 800f69e:	1e5e      	subs	r6, r3, #1
 800f6a0:	9b08      	ldr	r3, [sp, #32]
 800f6a2:	42b3      	cmp	r3, r6
 800f6a4:	bfbf      	itttt	lt
 800f6a6:	9b08      	ldrlt	r3, [sp, #32]
 800f6a8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f6aa:	9608      	strlt	r6, [sp, #32]
 800f6ac:	1af3      	sublt	r3, r6, r3
 800f6ae:	bfb4      	ite	lt
 800f6b0:	18d2      	addlt	r2, r2, r3
 800f6b2:	1b9e      	subge	r6, r3, r6
 800f6b4:	9b04      	ldr	r3, [sp, #16]
 800f6b6:	bfbc      	itt	lt
 800f6b8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f6ba:	2600      	movlt	r6, #0
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	bfb7      	itett	lt
 800f6c0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f6c4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f6c8:	1a9d      	sublt	r5, r3, r2
 800f6ca:	2300      	movlt	r3, #0
 800f6cc:	e741      	b.n	800f552 <_dtoa_r+0x742>
 800f6ce:	9e08      	ldr	r6, [sp, #32]
 800f6d0:	9d05      	ldr	r5, [sp, #20]
 800f6d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f6d4:	e748      	b.n	800f568 <_dtoa_r+0x758>
 800f6d6:	9a08      	ldr	r2, [sp, #32]
 800f6d8:	e770      	b.n	800f5bc <_dtoa_r+0x7ac>
 800f6da:	9b07      	ldr	r3, [sp, #28]
 800f6dc:	2b01      	cmp	r3, #1
 800f6de:	dc19      	bgt.n	800f714 <_dtoa_r+0x904>
 800f6e0:	9b02      	ldr	r3, [sp, #8]
 800f6e2:	b9bb      	cbnz	r3, 800f714 <_dtoa_r+0x904>
 800f6e4:	9b03      	ldr	r3, [sp, #12]
 800f6e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f6ea:	b99b      	cbnz	r3, 800f714 <_dtoa_r+0x904>
 800f6ec:	9b03      	ldr	r3, [sp, #12]
 800f6ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f6f2:	0d1b      	lsrs	r3, r3, #20
 800f6f4:	051b      	lsls	r3, r3, #20
 800f6f6:	b183      	cbz	r3, 800f71a <_dtoa_r+0x90a>
 800f6f8:	9b05      	ldr	r3, [sp, #20]
 800f6fa:	3301      	adds	r3, #1
 800f6fc:	9305      	str	r3, [sp, #20]
 800f6fe:	9b06      	ldr	r3, [sp, #24]
 800f700:	3301      	adds	r3, #1
 800f702:	9306      	str	r3, [sp, #24]
 800f704:	f04f 0801 	mov.w	r8, #1
 800f708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	f47f af6f 	bne.w	800f5ee <_dtoa_r+0x7de>
 800f710:	2001      	movs	r0, #1
 800f712:	e774      	b.n	800f5fe <_dtoa_r+0x7ee>
 800f714:	f04f 0800 	mov.w	r8, #0
 800f718:	e7f6      	b.n	800f708 <_dtoa_r+0x8f8>
 800f71a:	4698      	mov	r8, r3
 800f71c:	e7f4      	b.n	800f708 <_dtoa_r+0x8f8>
 800f71e:	d082      	beq.n	800f626 <_dtoa_r+0x816>
 800f720:	9a05      	ldr	r2, [sp, #20]
 800f722:	331c      	adds	r3, #28
 800f724:	441a      	add	r2, r3
 800f726:	9205      	str	r2, [sp, #20]
 800f728:	9a06      	ldr	r2, [sp, #24]
 800f72a:	441a      	add	r2, r3
 800f72c:	441d      	add	r5, r3
 800f72e:	9206      	str	r2, [sp, #24]
 800f730:	e779      	b.n	800f626 <_dtoa_r+0x816>
 800f732:	4603      	mov	r3, r0
 800f734:	e7f4      	b.n	800f720 <_dtoa_r+0x910>
 800f736:	9b04      	ldr	r3, [sp, #16]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	dc37      	bgt.n	800f7ac <_dtoa_r+0x99c>
 800f73c:	9b07      	ldr	r3, [sp, #28]
 800f73e:	2b02      	cmp	r3, #2
 800f740:	dd34      	ble.n	800f7ac <_dtoa_r+0x99c>
 800f742:	9b04      	ldr	r3, [sp, #16]
 800f744:	9301      	str	r3, [sp, #4]
 800f746:	9b01      	ldr	r3, [sp, #4]
 800f748:	b963      	cbnz	r3, 800f764 <_dtoa_r+0x954>
 800f74a:	4631      	mov	r1, r6
 800f74c:	2205      	movs	r2, #5
 800f74e:	4620      	mov	r0, r4
 800f750:	f000 fab2 	bl	800fcb8 <__multadd>
 800f754:	4601      	mov	r1, r0
 800f756:	4606      	mov	r6, r0
 800f758:	4650      	mov	r0, sl
 800f75a:	f000 fcc7 	bl	80100ec <__mcmp>
 800f75e:	2800      	cmp	r0, #0
 800f760:	f73f adbb 	bgt.w	800f2da <_dtoa_r+0x4ca>
 800f764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f766:	9d00      	ldr	r5, [sp, #0]
 800f768:	ea6f 0b03 	mvn.w	fp, r3
 800f76c:	f04f 0800 	mov.w	r8, #0
 800f770:	4631      	mov	r1, r6
 800f772:	4620      	mov	r0, r4
 800f774:	f000 fa7e 	bl	800fc74 <_Bfree>
 800f778:	2f00      	cmp	r7, #0
 800f77a:	f43f aeab 	beq.w	800f4d4 <_dtoa_r+0x6c4>
 800f77e:	f1b8 0f00 	cmp.w	r8, #0
 800f782:	d005      	beq.n	800f790 <_dtoa_r+0x980>
 800f784:	45b8      	cmp	r8, r7
 800f786:	d003      	beq.n	800f790 <_dtoa_r+0x980>
 800f788:	4641      	mov	r1, r8
 800f78a:	4620      	mov	r0, r4
 800f78c:	f000 fa72 	bl	800fc74 <_Bfree>
 800f790:	4639      	mov	r1, r7
 800f792:	4620      	mov	r0, r4
 800f794:	f000 fa6e 	bl	800fc74 <_Bfree>
 800f798:	e69c      	b.n	800f4d4 <_dtoa_r+0x6c4>
 800f79a:	2600      	movs	r6, #0
 800f79c:	4637      	mov	r7, r6
 800f79e:	e7e1      	b.n	800f764 <_dtoa_r+0x954>
 800f7a0:	46bb      	mov	fp, r7
 800f7a2:	4637      	mov	r7, r6
 800f7a4:	e599      	b.n	800f2da <_dtoa_r+0x4ca>
 800f7a6:	bf00      	nop
 800f7a8:	40240000 	.word	0x40240000
 800f7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	f000 80c8 	beq.w	800f944 <_dtoa_r+0xb34>
 800f7b4:	9b04      	ldr	r3, [sp, #16]
 800f7b6:	9301      	str	r3, [sp, #4]
 800f7b8:	2d00      	cmp	r5, #0
 800f7ba:	dd05      	ble.n	800f7c8 <_dtoa_r+0x9b8>
 800f7bc:	4639      	mov	r1, r7
 800f7be:	462a      	mov	r2, r5
 800f7c0:	4620      	mov	r0, r4
 800f7c2:	f000 fc27 	bl	8010014 <__lshift>
 800f7c6:	4607      	mov	r7, r0
 800f7c8:	f1b8 0f00 	cmp.w	r8, #0
 800f7cc:	d05b      	beq.n	800f886 <_dtoa_r+0xa76>
 800f7ce:	6879      	ldr	r1, [r7, #4]
 800f7d0:	4620      	mov	r0, r4
 800f7d2:	f000 fa0f 	bl	800fbf4 <_Balloc>
 800f7d6:	4605      	mov	r5, r0
 800f7d8:	b928      	cbnz	r0, 800f7e6 <_dtoa_r+0x9d6>
 800f7da:	4b83      	ldr	r3, [pc, #524]	; (800f9e8 <_dtoa_r+0xbd8>)
 800f7dc:	4602      	mov	r2, r0
 800f7de:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f7e2:	f7ff bb2e 	b.w	800ee42 <_dtoa_r+0x32>
 800f7e6:	693a      	ldr	r2, [r7, #16]
 800f7e8:	3202      	adds	r2, #2
 800f7ea:	0092      	lsls	r2, r2, #2
 800f7ec:	f107 010c 	add.w	r1, r7, #12
 800f7f0:	300c      	adds	r0, #12
 800f7f2:	f7ff fa76 	bl	800ece2 <memcpy>
 800f7f6:	2201      	movs	r2, #1
 800f7f8:	4629      	mov	r1, r5
 800f7fa:	4620      	mov	r0, r4
 800f7fc:	f000 fc0a 	bl	8010014 <__lshift>
 800f800:	9b00      	ldr	r3, [sp, #0]
 800f802:	3301      	adds	r3, #1
 800f804:	9304      	str	r3, [sp, #16]
 800f806:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f80a:	4413      	add	r3, r2
 800f80c:	9308      	str	r3, [sp, #32]
 800f80e:	9b02      	ldr	r3, [sp, #8]
 800f810:	f003 0301 	and.w	r3, r3, #1
 800f814:	46b8      	mov	r8, r7
 800f816:	9306      	str	r3, [sp, #24]
 800f818:	4607      	mov	r7, r0
 800f81a:	9b04      	ldr	r3, [sp, #16]
 800f81c:	4631      	mov	r1, r6
 800f81e:	3b01      	subs	r3, #1
 800f820:	4650      	mov	r0, sl
 800f822:	9301      	str	r3, [sp, #4]
 800f824:	f7ff fa6b 	bl	800ecfe <quorem>
 800f828:	4641      	mov	r1, r8
 800f82a:	9002      	str	r0, [sp, #8]
 800f82c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f830:	4650      	mov	r0, sl
 800f832:	f000 fc5b 	bl	80100ec <__mcmp>
 800f836:	463a      	mov	r2, r7
 800f838:	9005      	str	r0, [sp, #20]
 800f83a:	4631      	mov	r1, r6
 800f83c:	4620      	mov	r0, r4
 800f83e:	f000 fc71 	bl	8010124 <__mdiff>
 800f842:	68c2      	ldr	r2, [r0, #12]
 800f844:	4605      	mov	r5, r0
 800f846:	bb02      	cbnz	r2, 800f88a <_dtoa_r+0xa7a>
 800f848:	4601      	mov	r1, r0
 800f84a:	4650      	mov	r0, sl
 800f84c:	f000 fc4e 	bl	80100ec <__mcmp>
 800f850:	4602      	mov	r2, r0
 800f852:	4629      	mov	r1, r5
 800f854:	4620      	mov	r0, r4
 800f856:	9209      	str	r2, [sp, #36]	; 0x24
 800f858:	f000 fa0c 	bl	800fc74 <_Bfree>
 800f85c:	9b07      	ldr	r3, [sp, #28]
 800f85e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f860:	9d04      	ldr	r5, [sp, #16]
 800f862:	ea43 0102 	orr.w	r1, r3, r2
 800f866:	9b06      	ldr	r3, [sp, #24]
 800f868:	4319      	orrs	r1, r3
 800f86a:	d110      	bne.n	800f88e <_dtoa_r+0xa7e>
 800f86c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f870:	d029      	beq.n	800f8c6 <_dtoa_r+0xab6>
 800f872:	9b05      	ldr	r3, [sp, #20]
 800f874:	2b00      	cmp	r3, #0
 800f876:	dd02      	ble.n	800f87e <_dtoa_r+0xa6e>
 800f878:	9b02      	ldr	r3, [sp, #8]
 800f87a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f87e:	9b01      	ldr	r3, [sp, #4]
 800f880:	f883 9000 	strb.w	r9, [r3]
 800f884:	e774      	b.n	800f770 <_dtoa_r+0x960>
 800f886:	4638      	mov	r0, r7
 800f888:	e7ba      	b.n	800f800 <_dtoa_r+0x9f0>
 800f88a:	2201      	movs	r2, #1
 800f88c:	e7e1      	b.n	800f852 <_dtoa_r+0xa42>
 800f88e:	9b05      	ldr	r3, [sp, #20]
 800f890:	2b00      	cmp	r3, #0
 800f892:	db04      	blt.n	800f89e <_dtoa_r+0xa8e>
 800f894:	9907      	ldr	r1, [sp, #28]
 800f896:	430b      	orrs	r3, r1
 800f898:	9906      	ldr	r1, [sp, #24]
 800f89a:	430b      	orrs	r3, r1
 800f89c:	d120      	bne.n	800f8e0 <_dtoa_r+0xad0>
 800f89e:	2a00      	cmp	r2, #0
 800f8a0:	dded      	ble.n	800f87e <_dtoa_r+0xa6e>
 800f8a2:	4651      	mov	r1, sl
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	f000 fbb4 	bl	8010014 <__lshift>
 800f8ac:	4631      	mov	r1, r6
 800f8ae:	4682      	mov	sl, r0
 800f8b0:	f000 fc1c 	bl	80100ec <__mcmp>
 800f8b4:	2800      	cmp	r0, #0
 800f8b6:	dc03      	bgt.n	800f8c0 <_dtoa_r+0xab0>
 800f8b8:	d1e1      	bne.n	800f87e <_dtoa_r+0xa6e>
 800f8ba:	f019 0f01 	tst.w	r9, #1
 800f8be:	d0de      	beq.n	800f87e <_dtoa_r+0xa6e>
 800f8c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f8c4:	d1d8      	bne.n	800f878 <_dtoa_r+0xa68>
 800f8c6:	9a01      	ldr	r2, [sp, #4]
 800f8c8:	2339      	movs	r3, #57	; 0x39
 800f8ca:	7013      	strb	r3, [r2, #0]
 800f8cc:	462b      	mov	r3, r5
 800f8ce:	461d      	mov	r5, r3
 800f8d0:	3b01      	subs	r3, #1
 800f8d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f8d6:	2a39      	cmp	r2, #57	; 0x39
 800f8d8:	d06c      	beq.n	800f9b4 <_dtoa_r+0xba4>
 800f8da:	3201      	adds	r2, #1
 800f8dc:	701a      	strb	r2, [r3, #0]
 800f8de:	e747      	b.n	800f770 <_dtoa_r+0x960>
 800f8e0:	2a00      	cmp	r2, #0
 800f8e2:	dd07      	ble.n	800f8f4 <_dtoa_r+0xae4>
 800f8e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f8e8:	d0ed      	beq.n	800f8c6 <_dtoa_r+0xab6>
 800f8ea:	9a01      	ldr	r2, [sp, #4]
 800f8ec:	f109 0301 	add.w	r3, r9, #1
 800f8f0:	7013      	strb	r3, [r2, #0]
 800f8f2:	e73d      	b.n	800f770 <_dtoa_r+0x960>
 800f8f4:	9b04      	ldr	r3, [sp, #16]
 800f8f6:	9a08      	ldr	r2, [sp, #32]
 800f8f8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f8fc:	4293      	cmp	r3, r2
 800f8fe:	d043      	beq.n	800f988 <_dtoa_r+0xb78>
 800f900:	4651      	mov	r1, sl
 800f902:	2300      	movs	r3, #0
 800f904:	220a      	movs	r2, #10
 800f906:	4620      	mov	r0, r4
 800f908:	f000 f9d6 	bl	800fcb8 <__multadd>
 800f90c:	45b8      	cmp	r8, r7
 800f90e:	4682      	mov	sl, r0
 800f910:	f04f 0300 	mov.w	r3, #0
 800f914:	f04f 020a 	mov.w	r2, #10
 800f918:	4641      	mov	r1, r8
 800f91a:	4620      	mov	r0, r4
 800f91c:	d107      	bne.n	800f92e <_dtoa_r+0xb1e>
 800f91e:	f000 f9cb 	bl	800fcb8 <__multadd>
 800f922:	4680      	mov	r8, r0
 800f924:	4607      	mov	r7, r0
 800f926:	9b04      	ldr	r3, [sp, #16]
 800f928:	3301      	adds	r3, #1
 800f92a:	9304      	str	r3, [sp, #16]
 800f92c:	e775      	b.n	800f81a <_dtoa_r+0xa0a>
 800f92e:	f000 f9c3 	bl	800fcb8 <__multadd>
 800f932:	4639      	mov	r1, r7
 800f934:	4680      	mov	r8, r0
 800f936:	2300      	movs	r3, #0
 800f938:	220a      	movs	r2, #10
 800f93a:	4620      	mov	r0, r4
 800f93c:	f000 f9bc 	bl	800fcb8 <__multadd>
 800f940:	4607      	mov	r7, r0
 800f942:	e7f0      	b.n	800f926 <_dtoa_r+0xb16>
 800f944:	9b04      	ldr	r3, [sp, #16]
 800f946:	9301      	str	r3, [sp, #4]
 800f948:	9d00      	ldr	r5, [sp, #0]
 800f94a:	4631      	mov	r1, r6
 800f94c:	4650      	mov	r0, sl
 800f94e:	f7ff f9d6 	bl	800ecfe <quorem>
 800f952:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f956:	9b00      	ldr	r3, [sp, #0]
 800f958:	f805 9b01 	strb.w	r9, [r5], #1
 800f95c:	1aea      	subs	r2, r5, r3
 800f95e:	9b01      	ldr	r3, [sp, #4]
 800f960:	4293      	cmp	r3, r2
 800f962:	dd07      	ble.n	800f974 <_dtoa_r+0xb64>
 800f964:	4651      	mov	r1, sl
 800f966:	2300      	movs	r3, #0
 800f968:	220a      	movs	r2, #10
 800f96a:	4620      	mov	r0, r4
 800f96c:	f000 f9a4 	bl	800fcb8 <__multadd>
 800f970:	4682      	mov	sl, r0
 800f972:	e7ea      	b.n	800f94a <_dtoa_r+0xb3a>
 800f974:	9b01      	ldr	r3, [sp, #4]
 800f976:	2b00      	cmp	r3, #0
 800f978:	bfc8      	it	gt
 800f97a:	461d      	movgt	r5, r3
 800f97c:	9b00      	ldr	r3, [sp, #0]
 800f97e:	bfd8      	it	le
 800f980:	2501      	movle	r5, #1
 800f982:	441d      	add	r5, r3
 800f984:	f04f 0800 	mov.w	r8, #0
 800f988:	4651      	mov	r1, sl
 800f98a:	2201      	movs	r2, #1
 800f98c:	4620      	mov	r0, r4
 800f98e:	f000 fb41 	bl	8010014 <__lshift>
 800f992:	4631      	mov	r1, r6
 800f994:	4682      	mov	sl, r0
 800f996:	f000 fba9 	bl	80100ec <__mcmp>
 800f99a:	2800      	cmp	r0, #0
 800f99c:	dc96      	bgt.n	800f8cc <_dtoa_r+0xabc>
 800f99e:	d102      	bne.n	800f9a6 <_dtoa_r+0xb96>
 800f9a0:	f019 0f01 	tst.w	r9, #1
 800f9a4:	d192      	bne.n	800f8cc <_dtoa_r+0xabc>
 800f9a6:	462b      	mov	r3, r5
 800f9a8:	461d      	mov	r5, r3
 800f9aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f9ae:	2a30      	cmp	r2, #48	; 0x30
 800f9b0:	d0fa      	beq.n	800f9a8 <_dtoa_r+0xb98>
 800f9b2:	e6dd      	b.n	800f770 <_dtoa_r+0x960>
 800f9b4:	9a00      	ldr	r2, [sp, #0]
 800f9b6:	429a      	cmp	r2, r3
 800f9b8:	d189      	bne.n	800f8ce <_dtoa_r+0xabe>
 800f9ba:	f10b 0b01 	add.w	fp, fp, #1
 800f9be:	2331      	movs	r3, #49	; 0x31
 800f9c0:	e796      	b.n	800f8f0 <_dtoa_r+0xae0>
 800f9c2:	4b0a      	ldr	r3, [pc, #40]	; (800f9ec <_dtoa_r+0xbdc>)
 800f9c4:	f7ff ba99 	b.w	800eefa <_dtoa_r+0xea>
 800f9c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	f47f aa6d 	bne.w	800eeaa <_dtoa_r+0x9a>
 800f9d0:	4b07      	ldr	r3, [pc, #28]	; (800f9f0 <_dtoa_r+0xbe0>)
 800f9d2:	f7ff ba92 	b.w	800eefa <_dtoa_r+0xea>
 800f9d6:	9b01      	ldr	r3, [sp, #4]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	dcb5      	bgt.n	800f948 <_dtoa_r+0xb38>
 800f9dc:	9b07      	ldr	r3, [sp, #28]
 800f9de:	2b02      	cmp	r3, #2
 800f9e0:	f73f aeb1 	bgt.w	800f746 <_dtoa_r+0x936>
 800f9e4:	e7b0      	b.n	800f948 <_dtoa_r+0xb38>
 800f9e6:	bf00      	nop
 800f9e8:	08012049 	.word	0x08012049
 800f9ec:	08011fa9 	.word	0x08011fa9
 800f9f0:	08011fcd 	.word	0x08011fcd

0800f9f4 <_free_r>:
 800f9f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f9f6:	2900      	cmp	r1, #0
 800f9f8:	d044      	beq.n	800fa84 <_free_r+0x90>
 800f9fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9fe:	9001      	str	r0, [sp, #4]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	f1a1 0404 	sub.w	r4, r1, #4
 800fa06:	bfb8      	it	lt
 800fa08:	18e4      	addlt	r4, r4, r3
 800fa0a:	f000 f8e7 	bl	800fbdc <__malloc_lock>
 800fa0e:	4a1e      	ldr	r2, [pc, #120]	; (800fa88 <_free_r+0x94>)
 800fa10:	9801      	ldr	r0, [sp, #4]
 800fa12:	6813      	ldr	r3, [r2, #0]
 800fa14:	b933      	cbnz	r3, 800fa24 <_free_r+0x30>
 800fa16:	6063      	str	r3, [r4, #4]
 800fa18:	6014      	str	r4, [r2, #0]
 800fa1a:	b003      	add	sp, #12
 800fa1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa20:	f000 b8e2 	b.w	800fbe8 <__malloc_unlock>
 800fa24:	42a3      	cmp	r3, r4
 800fa26:	d908      	bls.n	800fa3a <_free_r+0x46>
 800fa28:	6825      	ldr	r5, [r4, #0]
 800fa2a:	1961      	adds	r1, r4, r5
 800fa2c:	428b      	cmp	r3, r1
 800fa2e:	bf01      	itttt	eq
 800fa30:	6819      	ldreq	r1, [r3, #0]
 800fa32:	685b      	ldreq	r3, [r3, #4]
 800fa34:	1949      	addeq	r1, r1, r5
 800fa36:	6021      	streq	r1, [r4, #0]
 800fa38:	e7ed      	b.n	800fa16 <_free_r+0x22>
 800fa3a:	461a      	mov	r2, r3
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	b10b      	cbz	r3, 800fa44 <_free_r+0x50>
 800fa40:	42a3      	cmp	r3, r4
 800fa42:	d9fa      	bls.n	800fa3a <_free_r+0x46>
 800fa44:	6811      	ldr	r1, [r2, #0]
 800fa46:	1855      	adds	r5, r2, r1
 800fa48:	42a5      	cmp	r5, r4
 800fa4a:	d10b      	bne.n	800fa64 <_free_r+0x70>
 800fa4c:	6824      	ldr	r4, [r4, #0]
 800fa4e:	4421      	add	r1, r4
 800fa50:	1854      	adds	r4, r2, r1
 800fa52:	42a3      	cmp	r3, r4
 800fa54:	6011      	str	r1, [r2, #0]
 800fa56:	d1e0      	bne.n	800fa1a <_free_r+0x26>
 800fa58:	681c      	ldr	r4, [r3, #0]
 800fa5a:	685b      	ldr	r3, [r3, #4]
 800fa5c:	6053      	str	r3, [r2, #4]
 800fa5e:	440c      	add	r4, r1
 800fa60:	6014      	str	r4, [r2, #0]
 800fa62:	e7da      	b.n	800fa1a <_free_r+0x26>
 800fa64:	d902      	bls.n	800fa6c <_free_r+0x78>
 800fa66:	230c      	movs	r3, #12
 800fa68:	6003      	str	r3, [r0, #0]
 800fa6a:	e7d6      	b.n	800fa1a <_free_r+0x26>
 800fa6c:	6825      	ldr	r5, [r4, #0]
 800fa6e:	1961      	adds	r1, r4, r5
 800fa70:	428b      	cmp	r3, r1
 800fa72:	bf04      	itt	eq
 800fa74:	6819      	ldreq	r1, [r3, #0]
 800fa76:	685b      	ldreq	r3, [r3, #4]
 800fa78:	6063      	str	r3, [r4, #4]
 800fa7a:	bf04      	itt	eq
 800fa7c:	1949      	addeq	r1, r1, r5
 800fa7e:	6021      	streq	r1, [r4, #0]
 800fa80:	6054      	str	r4, [r2, #4]
 800fa82:	e7ca      	b.n	800fa1a <_free_r+0x26>
 800fa84:	b003      	add	sp, #12
 800fa86:	bd30      	pop	{r4, r5, pc}
 800fa88:	20006168 	.word	0x20006168

0800fa8c <malloc>:
 800fa8c:	4b02      	ldr	r3, [pc, #8]	; (800fa98 <malloc+0xc>)
 800fa8e:	4601      	mov	r1, r0
 800fa90:	6818      	ldr	r0, [r3, #0]
 800fa92:	f000 b823 	b.w	800fadc <_malloc_r>
 800fa96:	bf00      	nop
 800fa98:	200001e8 	.word	0x200001e8

0800fa9c <sbrk_aligned>:
 800fa9c:	b570      	push	{r4, r5, r6, lr}
 800fa9e:	4e0e      	ldr	r6, [pc, #56]	; (800fad8 <sbrk_aligned+0x3c>)
 800faa0:	460c      	mov	r4, r1
 800faa2:	6831      	ldr	r1, [r6, #0]
 800faa4:	4605      	mov	r5, r0
 800faa6:	b911      	cbnz	r1, 800faae <sbrk_aligned+0x12>
 800faa8:	f001 f81a 	bl	8010ae0 <_sbrk_r>
 800faac:	6030      	str	r0, [r6, #0]
 800faae:	4621      	mov	r1, r4
 800fab0:	4628      	mov	r0, r5
 800fab2:	f001 f815 	bl	8010ae0 <_sbrk_r>
 800fab6:	1c43      	adds	r3, r0, #1
 800fab8:	d00a      	beq.n	800fad0 <sbrk_aligned+0x34>
 800faba:	1cc4      	adds	r4, r0, #3
 800fabc:	f024 0403 	bic.w	r4, r4, #3
 800fac0:	42a0      	cmp	r0, r4
 800fac2:	d007      	beq.n	800fad4 <sbrk_aligned+0x38>
 800fac4:	1a21      	subs	r1, r4, r0
 800fac6:	4628      	mov	r0, r5
 800fac8:	f001 f80a 	bl	8010ae0 <_sbrk_r>
 800facc:	3001      	adds	r0, #1
 800face:	d101      	bne.n	800fad4 <sbrk_aligned+0x38>
 800fad0:	f04f 34ff 	mov.w	r4, #4294967295
 800fad4:	4620      	mov	r0, r4
 800fad6:	bd70      	pop	{r4, r5, r6, pc}
 800fad8:	2000616c 	.word	0x2000616c

0800fadc <_malloc_r>:
 800fadc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fae0:	1ccd      	adds	r5, r1, #3
 800fae2:	f025 0503 	bic.w	r5, r5, #3
 800fae6:	3508      	adds	r5, #8
 800fae8:	2d0c      	cmp	r5, #12
 800faea:	bf38      	it	cc
 800faec:	250c      	movcc	r5, #12
 800faee:	2d00      	cmp	r5, #0
 800faf0:	4607      	mov	r7, r0
 800faf2:	db01      	blt.n	800faf8 <_malloc_r+0x1c>
 800faf4:	42a9      	cmp	r1, r5
 800faf6:	d905      	bls.n	800fb04 <_malloc_r+0x28>
 800faf8:	230c      	movs	r3, #12
 800fafa:	603b      	str	r3, [r7, #0]
 800fafc:	2600      	movs	r6, #0
 800fafe:	4630      	mov	r0, r6
 800fb00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb04:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fbd8 <_malloc_r+0xfc>
 800fb08:	f000 f868 	bl	800fbdc <__malloc_lock>
 800fb0c:	f8d8 3000 	ldr.w	r3, [r8]
 800fb10:	461c      	mov	r4, r3
 800fb12:	bb5c      	cbnz	r4, 800fb6c <_malloc_r+0x90>
 800fb14:	4629      	mov	r1, r5
 800fb16:	4638      	mov	r0, r7
 800fb18:	f7ff ffc0 	bl	800fa9c <sbrk_aligned>
 800fb1c:	1c43      	adds	r3, r0, #1
 800fb1e:	4604      	mov	r4, r0
 800fb20:	d155      	bne.n	800fbce <_malloc_r+0xf2>
 800fb22:	f8d8 4000 	ldr.w	r4, [r8]
 800fb26:	4626      	mov	r6, r4
 800fb28:	2e00      	cmp	r6, #0
 800fb2a:	d145      	bne.n	800fbb8 <_malloc_r+0xdc>
 800fb2c:	2c00      	cmp	r4, #0
 800fb2e:	d048      	beq.n	800fbc2 <_malloc_r+0xe6>
 800fb30:	6823      	ldr	r3, [r4, #0]
 800fb32:	4631      	mov	r1, r6
 800fb34:	4638      	mov	r0, r7
 800fb36:	eb04 0903 	add.w	r9, r4, r3
 800fb3a:	f000 ffd1 	bl	8010ae0 <_sbrk_r>
 800fb3e:	4581      	cmp	r9, r0
 800fb40:	d13f      	bne.n	800fbc2 <_malloc_r+0xe6>
 800fb42:	6821      	ldr	r1, [r4, #0]
 800fb44:	1a6d      	subs	r5, r5, r1
 800fb46:	4629      	mov	r1, r5
 800fb48:	4638      	mov	r0, r7
 800fb4a:	f7ff ffa7 	bl	800fa9c <sbrk_aligned>
 800fb4e:	3001      	adds	r0, #1
 800fb50:	d037      	beq.n	800fbc2 <_malloc_r+0xe6>
 800fb52:	6823      	ldr	r3, [r4, #0]
 800fb54:	442b      	add	r3, r5
 800fb56:	6023      	str	r3, [r4, #0]
 800fb58:	f8d8 3000 	ldr.w	r3, [r8]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d038      	beq.n	800fbd2 <_malloc_r+0xf6>
 800fb60:	685a      	ldr	r2, [r3, #4]
 800fb62:	42a2      	cmp	r2, r4
 800fb64:	d12b      	bne.n	800fbbe <_malloc_r+0xe2>
 800fb66:	2200      	movs	r2, #0
 800fb68:	605a      	str	r2, [r3, #4]
 800fb6a:	e00f      	b.n	800fb8c <_malloc_r+0xb0>
 800fb6c:	6822      	ldr	r2, [r4, #0]
 800fb6e:	1b52      	subs	r2, r2, r5
 800fb70:	d41f      	bmi.n	800fbb2 <_malloc_r+0xd6>
 800fb72:	2a0b      	cmp	r2, #11
 800fb74:	d917      	bls.n	800fba6 <_malloc_r+0xca>
 800fb76:	1961      	adds	r1, r4, r5
 800fb78:	42a3      	cmp	r3, r4
 800fb7a:	6025      	str	r5, [r4, #0]
 800fb7c:	bf18      	it	ne
 800fb7e:	6059      	strne	r1, [r3, #4]
 800fb80:	6863      	ldr	r3, [r4, #4]
 800fb82:	bf08      	it	eq
 800fb84:	f8c8 1000 	streq.w	r1, [r8]
 800fb88:	5162      	str	r2, [r4, r5]
 800fb8a:	604b      	str	r3, [r1, #4]
 800fb8c:	4638      	mov	r0, r7
 800fb8e:	f104 060b 	add.w	r6, r4, #11
 800fb92:	f000 f829 	bl	800fbe8 <__malloc_unlock>
 800fb96:	f026 0607 	bic.w	r6, r6, #7
 800fb9a:	1d23      	adds	r3, r4, #4
 800fb9c:	1af2      	subs	r2, r6, r3
 800fb9e:	d0ae      	beq.n	800fafe <_malloc_r+0x22>
 800fba0:	1b9b      	subs	r3, r3, r6
 800fba2:	50a3      	str	r3, [r4, r2]
 800fba4:	e7ab      	b.n	800fafe <_malloc_r+0x22>
 800fba6:	42a3      	cmp	r3, r4
 800fba8:	6862      	ldr	r2, [r4, #4]
 800fbaa:	d1dd      	bne.n	800fb68 <_malloc_r+0x8c>
 800fbac:	f8c8 2000 	str.w	r2, [r8]
 800fbb0:	e7ec      	b.n	800fb8c <_malloc_r+0xb0>
 800fbb2:	4623      	mov	r3, r4
 800fbb4:	6864      	ldr	r4, [r4, #4]
 800fbb6:	e7ac      	b.n	800fb12 <_malloc_r+0x36>
 800fbb8:	4634      	mov	r4, r6
 800fbba:	6876      	ldr	r6, [r6, #4]
 800fbbc:	e7b4      	b.n	800fb28 <_malloc_r+0x4c>
 800fbbe:	4613      	mov	r3, r2
 800fbc0:	e7cc      	b.n	800fb5c <_malloc_r+0x80>
 800fbc2:	230c      	movs	r3, #12
 800fbc4:	603b      	str	r3, [r7, #0]
 800fbc6:	4638      	mov	r0, r7
 800fbc8:	f000 f80e 	bl	800fbe8 <__malloc_unlock>
 800fbcc:	e797      	b.n	800fafe <_malloc_r+0x22>
 800fbce:	6025      	str	r5, [r4, #0]
 800fbd0:	e7dc      	b.n	800fb8c <_malloc_r+0xb0>
 800fbd2:	605b      	str	r3, [r3, #4]
 800fbd4:	deff      	udf	#255	; 0xff
 800fbd6:	bf00      	nop
 800fbd8:	20006168 	.word	0x20006168

0800fbdc <__malloc_lock>:
 800fbdc:	4801      	ldr	r0, [pc, #4]	; (800fbe4 <__malloc_lock+0x8>)
 800fbde:	f7ff b87e 	b.w	800ecde <__retarget_lock_acquire_recursive>
 800fbe2:	bf00      	nop
 800fbe4:	20006164 	.word	0x20006164

0800fbe8 <__malloc_unlock>:
 800fbe8:	4801      	ldr	r0, [pc, #4]	; (800fbf0 <__malloc_unlock+0x8>)
 800fbea:	f7ff b879 	b.w	800ece0 <__retarget_lock_release_recursive>
 800fbee:	bf00      	nop
 800fbf0:	20006164 	.word	0x20006164

0800fbf4 <_Balloc>:
 800fbf4:	b570      	push	{r4, r5, r6, lr}
 800fbf6:	69c6      	ldr	r6, [r0, #28]
 800fbf8:	4604      	mov	r4, r0
 800fbfa:	460d      	mov	r5, r1
 800fbfc:	b976      	cbnz	r6, 800fc1c <_Balloc+0x28>
 800fbfe:	2010      	movs	r0, #16
 800fc00:	f7ff ff44 	bl	800fa8c <malloc>
 800fc04:	4602      	mov	r2, r0
 800fc06:	61e0      	str	r0, [r4, #28]
 800fc08:	b920      	cbnz	r0, 800fc14 <_Balloc+0x20>
 800fc0a:	4b18      	ldr	r3, [pc, #96]	; (800fc6c <_Balloc+0x78>)
 800fc0c:	4818      	ldr	r0, [pc, #96]	; (800fc70 <_Balloc+0x7c>)
 800fc0e:	216b      	movs	r1, #107	; 0x6b
 800fc10:	f000 ff76 	bl	8010b00 <__assert_func>
 800fc14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc18:	6006      	str	r6, [r0, #0]
 800fc1a:	60c6      	str	r6, [r0, #12]
 800fc1c:	69e6      	ldr	r6, [r4, #28]
 800fc1e:	68f3      	ldr	r3, [r6, #12]
 800fc20:	b183      	cbz	r3, 800fc44 <_Balloc+0x50>
 800fc22:	69e3      	ldr	r3, [r4, #28]
 800fc24:	68db      	ldr	r3, [r3, #12]
 800fc26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fc2a:	b9b8      	cbnz	r0, 800fc5c <_Balloc+0x68>
 800fc2c:	2101      	movs	r1, #1
 800fc2e:	fa01 f605 	lsl.w	r6, r1, r5
 800fc32:	1d72      	adds	r2, r6, #5
 800fc34:	0092      	lsls	r2, r2, #2
 800fc36:	4620      	mov	r0, r4
 800fc38:	f000 ff80 	bl	8010b3c <_calloc_r>
 800fc3c:	b160      	cbz	r0, 800fc58 <_Balloc+0x64>
 800fc3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fc42:	e00e      	b.n	800fc62 <_Balloc+0x6e>
 800fc44:	2221      	movs	r2, #33	; 0x21
 800fc46:	2104      	movs	r1, #4
 800fc48:	4620      	mov	r0, r4
 800fc4a:	f000 ff77 	bl	8010b3c <_calloc_r>
 800fc4e:	69e3      	ldr	r3, [r4, #28]
 800fc50:	60f0      	str	r0, [r6, #12]
 800fc52:	68db      	ldr	r3, [r3, #12]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d1e4      	bne.n	800fc22 <_Balloc+0x2e>
 800fc58:	2000      	movs	r0, #0
 800fc5a:	bd70      	pop	{r4, r5, r6, pc}
 800fc5c:	6802      	ldr	r2, [r0, #0]
 800fc5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fc62:	2300      	movs	r3, #0
 800fc64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fc68:	e7f7      	b.n	800fc5a <_Balloc+0x66>
 800fc6a:	bf00      	nop
 800fc6c:	08011fda 	.word	0x08011fda
 800fc70:	0801205a 	.word	0x0801205a

0800fc74 <_Bfree>:
 800fc74:	b570      	push	{r4, r5, r6, lr}
 800fc76:	69c6      	ldr	r6, [r0, #28]
 800fc78:	4605      	mov	r5, r0
 800fc7a:	460c      	mov	r4, r1
 800fc7c:	b976      	cbnz	r6, 800fc9c <_Bfree+0x28>
 800fc7e:	2010      	movs	r0, #16
 800fc80:	f7ff ff04 	bl	800fa8c <malloc>
 800fc84:	4602      	mov	r2, r0
 800fc86:	61e8      	str	r0, [r5, #28]
 800fc88:	b920      	cbnz	r0, 800fc94 <_Bfree+0x20>
 800fc8a:	4b09      	ldr	r3, [pc, #36]	; (800fcb0 <_Bfree+0x3c>)
 800fc8c:	4809      	ldr	r0, [pc, #36]	; (800fcb4 <_Bfree+0x40>)
 800fc8e:	218f      	movs	r1, #143	; 0x8f
 800fc90:	f000 ff36 	bl	8010b00 <__assert_func>
 800fc94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc98:	6006      	str	r6, [r0, #0]
 800fc9a:	60c6      	str	r6, [r0, #12]
 800fc9c:	b13c      	cbz	r4, 800fcae <_Bfree+0x3a>
 800fc9e:	69eb      	ldr	r3, [r5, #28]
 800fca0:	6862      	ldr	r2, [r4, #4]
 800fca2:	68db      	ldr	r3, [r3, #12]
 800fca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fca8:	6021      	str	r1, [r4, #0]
 800fcaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fcae:	bd70      	pop	{r4, r5, r6, pc}
 800fcb0:	08011fda 	.word	0x08011fda
 800fcb4:	0801205a 	.word	0x0801205a

0800fcb8 <__multadd>:
 800fcb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcbc:	690d      	ldr	r5, [r1, #16]
 800fcbe:	4607      	mov	r7, r0
 800fcc0:	460c      	mov	r4, r1
 800fcc2:	461e      	mov	r6, r3
 800fcc4:	f101 0c14 	add.w	ip, r1, #20
 800fcc8:	2000      	movs	r0, #0
 800fcca:	f8dc 3000 	ldr.w	r3, [ip]
 800fcce:	b299      	uxth	r1, r3
 800fcd0:	fb02 6101 	mla	r1, r2, r1, r6
 800fcd4:	0c1e      	lsrs	r6, r3, #16
 800fcd6:	0c0b      	lsrs	r3, r1, #16
 800fcd8:	fb02 3306 	mla	r3, r2, r6, r3
 800fcdc:	b289      	uxth	r1, r1
 800fcde:	3001      	adds	r0, #1
 800fce0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fce4:	4285      	cmp	r5, r0
 800fce6:	f84c 1b04 	str.w	r1, [ip], #4
 800fcea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fcee:	dcec      	bgt.n	800fcca <__multadd+0x12>
 800fcf0:	b30e      	cbz	r6, 800fd36 <__multadd+0x7e>
 800fcf2:	68a3      	ldr	r3, [r4, #8]
 800fcf4:	42ab      	cmp	r3, r5
 800fcf6:	dc19      	bgt.n	800fd2c <__multadd+0x74>
 800fcf8:	6861      	ldr	r1, [r4, #4]
 800fcfa:	4638      	mov	r0, r7
 800fcfc:	3101      	adds	r1, #1
 800fcfe:	f7ff ff79 	bl	800fbf4 <_Balloc>
 800fd02:	4680      	mov	r8, r0
 800fd04:	b928      	cbnz	r0, 800fd12 <__multadd+0x5a>
 800fd06:	4602      	mov	r2, r0
 800fd08:	4b0c      	ldr	r3, [pc, #48]	; (800fd3c <__multadd+0x84>)
 800fd0a:	480d      	ldr	r0, [pc, #52]	; (800fd40 <__multadd+0x88>)
 800fd0c:	21ba      	movs	r1, #186	; 0xba
 800fd0e:	f000 fef7 	bl	8010b00 <__assert_func>
 800fd12:	6922      	ldr	r2, [r4, #16]
 800fd14:	3202      	adds	r2, #2
 800fd16:	f104 010c 	add.w	r1, r4, #12
 800fd1a:	0092      	lsls	r2, r2, #2
 800fd1c:	300c      	adds	r0, #12
 800fd1e:	f7fe ffe0 	bl	800ece2 <memcpy>
 800fd22:	4621      	mov	r1, r4
 800fd24:	4638      	mov	r0, r7
 800fd26:	f7ff ffa5 	bl	800fc74 <_Bfree>
 800fd2a:	4644      	mov	r4, r8
 800fd2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fd30:	3501      	adds	r5, #1
 800fd32:	615e      	str	r6, [r3, #20]
 800fd34:	6125      	str	r5, [r4, #16]
 800fd36:	4620      	mov	r0, r4
 800fd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd3c:	08012049 	.word	0x08012049
 800fd40:	0801205a 	.word	0x0801205a

0800fd44 <__hi0bits>:
 800fd44:	0c03      	lsrs	r3, r0, #16
 800fd46:	041b      	lsls	r3, r3, #16
 800fd48:	b9d3      	cbnz	r3, 800fd80 <__hi0bits+0x3c>
 800fd4a:	0400      	lsls	r0, r0, #16
 800fd4c:	2310      	movs	r3, #16
 800fd4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fd52:	bf04      	itt	eq
 800fd54:	0200      	lsleq	r0, r0, #8
 800fd56:	3308      	addeq	r3, #8
 800fd58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fd5c:	bf04      	itt	eq
 800fd5e:	0100      	lsleq	r0, r0, #4
 800fd60:	3304      	addeq	r3, #4
 800fd62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fd66:	bf04      	itt	eq
 800fd68:	0080      	lsleq	r0, r0, #2
 800fd6a:	3302      	addeq	r3, #2
 800fd6c:	2800      	cmp	r0, #0
 800fd6e:	db05      	blt.n	800fd7c <__hi0bits+0x38>
 800fd70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fd74:	f103 0301 	add.w	r3, r3, #1
 800fd78:	bf08      	it	eq
 800fd7a:	2320      	moveq	r3, #32
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	4770      	bx	lr
 800fd80:	2300      	movs	r3, #0
 800fd82:	e7e4      	b.n	800fd4e <__hi0bits+0xa>

0800fd84 <__lo0bits>:
 800fd84:	6803      	ldr	r3, [r0, #0]
 800fd86:	f013 0207 	ands.w	r2, r3, #7
 800fd8a:	d00c      	beq.n	800fda6 <__lo0bits+0x22>
 800fd8c:	07d9      	lsls	r1, r3, #31
 800fd8e:	d422      	bmi.n	800fdd6 <__lo0bits+0x52>
 800fd90:	079a      	lsls	r2, r3, #30
 800fd92:	bf49      	itett	mi
 800fd94:	085b      	lsrmi	r3, r3, #1
 800fd96:	089b      	lsrpl	r3, r3, #2
 800fd98:	6003      	strmi	r3, [r0, #0]
 800fd9a:	2201      	movmi	r2, #1
 800fd9c:	bf5c      	itt	pl
 800fd9e:	6003      	strpl	r3, [r0, #0]
 800fda0:	2202      	movpl	r2, #2
 800fda2:	4610      	mov	r0, r2
 800fda4:	4770      	bx	lr
 800fda6:	b299      	uxth	r1, r3
 800fda8:	b909      	cbnz	r1, 800fdae <__lo0bits+0x2a>
 800fdaa:	0c1b      	lsrs	r3, r3, #16
 800fdac:	2210      	movs	r2, #16
 800fdae:	b2d9      	uxtb	r1, r3
 800fdb0:	b909      	cbnz	r1, 800fdb6 <__lo0bits+0x32>
 800fdb2:	3208      	adds	r2, #8
 800fdb4:	0a1b      	lsrs	r3, r3, #8
 800fdb6:	0719      	lsls	r1, r3, #28
 800fdb8:	bf04      	itt	eq
 800fdba:	091b      	lsreq	r3, r3, #4
 800fdbc:	3204      	addeq	r2, #4
 800fdbe:	0799      	lsls	r1, r3, #30
 800fdc0:	bf04      	itt	eq
 800fdc2:	089b      	lsreq	r3, r3, #2
 800fdc4:	3202      	addeq	r2, #2
 800fdc6:	07d9      	lsls	r1, r3, #31
 800fdc8:	d403      	bmi.n	800fdd2 <__lo0bits+0x4e>
 800fdca:	085b      	lsrs	r3, r3, #1
 800fdcc:	f102 0201 	add.w	r2, r2, #1
 800fdd0:	d003      	beq.n	800fdda <__lo0bits+0x56>
 800fdd2:	6003      	str	r3, [r0, #0]
 800fdd4:	e7e5      	b.n	800fda2 <__lo0bits+0x1e>
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	e7e3      	b.n	800fda2 <__lo0bits+0x1e>
 800fdda:	2220      	movs	r2, #32
 800fddc:	e7e1      	b.n	800fda2 <__lo0bits+0x1e>
	...

0800fde0 <__i2b>:
 800fde0:	b510      	push	{r4, lr}
 800fde2:	460c      	mov	r4, r1
 800fde4:	2101      	movs	r1, #1
 800fde6:	f7ff ff05 	bl	800fbf4 <_Balloc>
 800fdea:	4602      	mov	r2, r0
 800fdec:	b928      	cbnz	r0, 800fdfa <__i2b+0x1a>
 800fdee:	4b05      	ldr	r3, [pc, #20]	; (800fe04 <__i2b+0x24>)
 800fdf0:	4805      	ldr	r0, [pc, #20]	; (800fe08 <__i2b+0x28>)
 800fdf2:	f240 1145 	movw	r1, #325	; 0x145
 800fdf6:	f000 fe83 	bl	8010b00 <__assert_func>
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	6144      	str	r4, [r0, #20]
 800fdfe:	6103      	str	r3, [r0, #16]
 800fe00:	bd10      	pop	{r4, pc}
 800fe02:	bf00      	nop
 800fe04:	08012049 	.word	0x08012049
 800fe08:	0801205a 	.word	0x0801205a

0800fe0c <__multiply>:
 800fe0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe10:	4691      	mov	r9, r2
 800fe12:	690a      	ldr	r2, [r1, #16]
 800fe14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fe18:	429a      	cmp	r2, r3
 800fe1a:	bfb8      	it	lt
 800fe1c:	460b      	movlt	r3, r1
 800fe1e:	460c      	mov	r4, r1
 800fe20:	bfbc      	itt	lt
 800fe22:	464c      	movlt	r4, r9
 800fe24:	4699      	movlt	r9, r3
 800fe26:	6927      	ldr	r7, [r4, #16]
 800fe28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fe2c:	68a3      	ldr	r3, [r4, #8]
 800fe2e:	6861      	ldr	r1, [r4, #4]
 800fe30:	eb07 060a 	add.w	r6, r7, sl
 800fe34:	42b3      	cmp	r3, r6
 800fe36:	b085      	sub	sp, #20
 800fe38:	bfb8      	it	lt
 800fe3a:	3101      	addlt	r1, #1
 800fe3c:	f7ff feda 	bl	800fbf4 <_Balloc>
 800fe40:	b930      	cbnz	r0, 800fe50 <__multiply+0x44>
 800fe42:	4602      	mov	r2, r0
 800fe44:	4b44      	ldr	r3, [pc, #272]	; (800ff58 <__multiply+0x14c>)
 800fe46:	4845      	ldr	r0, [pc, #276]	; (800ff5c <__multiply+0x150>)
 800fe48:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800fe4c:	f000 fe58 	bl	8010b00 <__assert_func>
 800fe50:	f100 0514 	add.w	r5, r0, #20
 800fe54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fe58:	462b      	mov	r3, r5
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	4543      	cmp	r3, r8
 800fe5e:	d321      	bcc.n	800fea4 <__multiply+0x98>
 800fe60:	f104 0314 	add.w	r3, r4, #20
 800fe64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fe68:	f109 0314 	add.w	r3, r9, #20
 800fe6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fe70:	9202      	str	r2, [sp, #8]
 800fe72:	1b3a      	subs	r2, r7, r4
 800fe74:	3a15      	subs	r2, #21
 800fe76:	f022 0203 	bic.w	r2, r2, #3
 800fe7a:	3204      	adds	r2, #4
 800fe7c:	f104 0115 	add.w	r1, r4, #21
 800fe80:	428f      	cmp	r7, r1
 800fe82:	bf38      	it	cc
 800fe84:	2204      	movcc	r2, #4
 800fe86:	9201      	str	r2, [sp, #4]
 800fe88:	9a02      	ldr	r2, [sp, #8]
 800fe8a:	9303      	str	r3, [sp, #12]
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d80c      	bhi.n	800feaa <__multiply+0x9e>
 800fe90:	2e00      	cmp	r6, #0
 800fe92:	dd03      	ble.n	800fe9c <__multiply+0x90>
 800fe94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d05b      	beq.n	800ff54 <__multiply+0x148>
 800fe9c:	6106      	str	r6, [r0, #16]
 800fe9e:	b005      	add	sp, #20
 800fea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fea4:	f843 2b04 	str.w	r2, [r3], #4
 800fea8:	e7d8      	b.n	800fe5c <__multiply+0x50>
 800feaa:	f8b3 a000 	ldrh.w	sl, [r3]
 800feae:	f1ba 0f00 	cmp.w	sl, #0
 800feb2:	d024      	beq.n	800fefe <__multiply+0xf2>
 800feb4:	f104 0e14 	add.w	lr, r4, #20
 800feb8:	46a9      	mov	r9, r5
 800feba:	f04f 0c00 	mov.w	ip, #0
 800febe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fec2:	f8d9 1000 	ldr.w	r1, [r9]
 800fec6:	fa1f fb82 	uxth.w	fp, r2
 800feca:	b289      	uxth	r1, r1
 800fecc:	fb0a 110b 	mla	r1, sl, fp, r1
 800fed0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fed4:	f8d9 2000 	ldr.w	r2, [r9]
 800fed8:	4461      	add	r1, ip
 800feda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fede:	fb0a c20b 	mla	r2, sl, fp, ip
 800fee2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fee6:	b289      	uxth	r1, r1
 800fee8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800feec:	4577      	cmp	r7, lr
 800feee:	f849 1b04 	str.w	r1, [r9], #4
 800fef2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fef6:	d8e2      	bhi.n	800febe <__multiply+0xb2>
 800fef8:	9a01      	ldr	r2, [sp, #4]
 800fefa:	f845 c002 	str.w	ip, [r5, r2]
 800fefe:	9a03      	ldr	r2, [sp, #12]
 800ff00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ff04:	3304      	adds	r3, #4
 800ff06:	f1b9 0f00 	cmp.w	r9, #0
 800ff0a:	d021      	beq.n	800ff50 <__multiply+0x144>
 800ff0c:	6829      	ldr	r1, [r5, #0]
 800ff0e:	f104 0c14 	add.w	ip, r4, #20
 800ff12:	46ae      	mov	lr, r5
 800ff14:	f04f 0a00 	mov.w	sl, #0
 800ff18:	f8bc b000 	ldrh.w	fp, [ip]
 800ff1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ff20:	fb09 220b 	mla	r2, r9, fp, r2
 800ff24:	4452      	add	r2, sl
 800ff26:	b289      	uxth	r1, r1
 800ff28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ff2c:	f84e 1b04 	str.w	r1, [lr], #4
 800ff30:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ff34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ff38:	f8be 1000 	ldrh.w	r1, [lr]
 800ff3c:	fb09 110a 	mla	r1, r9, sl, r1
 800ff40:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ff44:	4567      	cmp	r7, ip
 800ff46:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ff4a:	d8e5      	bhi.n	800ff18 <__multiply+0x10c>
 800ff4c:	9a01      	ldr	r2, [sp, #4]
 800ff4e:	50a9      	str	r1, [r5, r2]
 800ff50:	3504      	adds	r5, #4
 800ff52:	e799      	b.n	800fe88 <__multiply+0x7c>
 800ff54:	3e01      	subs	r6, #1
 800ff56:	e79b      	b.n	800fe90 <__multiply+0x84>
 800ff58:	08012049 	.word	0x08012049
 800ff5c:	0801205a 	.word	0x0801205a

0800ff60 <__pow5mult>:
 800ff60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff64:	4615      	mov	r5, r2
 800ff66:	f012 0203 	ands.w	r2, r2, #3
 800ff6a:	4606      	mov	r6, r0
 800ff6c:	460f      	mov	r7, r1
 800ff6e:	d007      	beq.n	800ff80 <__pow5mult+0x20>
 800ff70:	4c25      	ldr	r4, [pc, #148]	; (8010008 <__pow5mult+0xa8>)
 800ff72:	3a01      	subs	r2, #1
 800ff74:	2300      	movs	r3, #0
 800ff76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ff7a:	f7ff fe9d 	bl	800fcb8 <__multadd>
 800ff7e:	4607      	mov	r7, r0
 800ff80:	10ad      	asrs	r5, r5, #2
 800ff82:	d03d      	beq.n	8010000 <__pow5mult+0xa0>
 800ff84:	69f4      	ldr	r4, [r6, #28]
 800ff86:	b97c      	cbnz	r4, 800ffa8 <__pow5mult+0x48>
 800ff88:	2010      	movs	r0, #16
 800ff8a:	f7ff fd7f 	bl	800fa8c <malloc>
 800ff8e:	4602      	mov	r2, r0
 800ff90:	61f0      	str	r0, [r6, #28]
 800ff92:	b928      	cbnz	r0, 800ffa0 <__pow5mult+0x40>
 800ff94:	4b1d      	ldr	r3, [pc, #116]	; (801000c <__pow5mult+0xac>)
 800ff96:	481e      	ldr	r0, [pc, #120]	; (8010010 <__pow5mult+0xb0>)
 800ff98:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ff9c:	f000 fdb0 	bl	8010b00 <__assert_func>
 800ffa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ffa4:	6004      	str	r4, [r0, #0]
 800ffa6:	60c4      	str	r4, [r0, #12]
 800ffa8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ffac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ffb0:	b94c      	cbnz	r4, 800ffc6 <__pow5mult+0x66>
 800ffb2:	f240 2171 	movw	r1, #625	; 0x271
 800ffb6:	4630      	mov	r0, r6
 800ffb8:	f7ff ff12 	bl	800fde0 <__i2b>
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	f8c8 0008 	str.w	r0, [r8, #8]
 800ffc2:	4604      	mov	r4, r0
 800ffc4:	6003      	str	r3, [r0, #0]
 800ffc6:	f04f 0900 	mov.w	r9, #0
 800ffca:	07eb      	lsls	r3, r5, #31
 800ffcc:	d50a      	bpl.n	800ffe4 <__pow5mult+0x84>
 800ffce:	4639      	mov	r1, r7
 800ffd0:	4622      	mov	r2, r4
 800ffd2:	4630      	mov	r0, r6
 800ffd4:	f7ff ff1a 	bl	800fe0c <__multiply>
 800ffd8:	4639      	mov	r1, r7
 800ffda:	4680      	mov	r8, r0
 800ffdc:	4630      	mov	r0, r6
 800ffde:	f7ff fe49 	bl	800fc74 <_Bfree>
 800ffe2:	4647      	mov	r7, r8
 800ffe4:	106d      	asrs	r5, r5, #1
 800ffe6:	d00b      	beq.n	8010000 <__pow5mult+0xa0>
 800ffe8:	6820      	ldr	r0, [r4, #0]
 800ffea:	b938      	cbnz	r0, 800fffc <__pow5mult+0x9c>
 800ffec:	4622      	mov	r2, r4
 800ffee:	4621      	mov	r1, r4
 800fff0:	4630      	mov	r0, r6
 800fff2:	f7ff ff0b 	bl	800fe0c <__multiply>
 800fff6:	6020      	str	r0, [r4, #0]
 800fff8:	f8c0 9000 	str.w	r9, [r0]
 800fffc:	4604      	mov	r4, r0
 800fffe:	e7e4      	b.n	800ffca <__pow5mult+0x6a>
 8010000:	4638      	mov	r0, r7
 8010002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010006:	bf00      	nop
 8010008:	080121a8 	.word	0x080121a8
 801000c:	08011fda 	.word	0x08011fda
 8010010:	0801205a 	.word	0x0801205a

08010014 <__lshift>:
 8010014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010018:	460c      	mov	r4, r1
 801001a:	6849      	ldr	r1, [r1, #4]
 801001c:	6923      	ldr	r3, [r4, #16]
 801001e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010022:	68a3      	ldr	r3, [r4, #8]
 8010024:	4607      	mov	r7, r0
 8010026:	4691      	mov	r9, r2
 8010028:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801002c:	f108 0601 	add.w	r6, r8, #1
 8010030:	42b3      	cmp	r3, r6
 8010032:	db0b      	blt.n	801004c <__lshift+0x38>
 8010034:	4638      	mov	r0, r7
 8010036:	f7ff fddd 	bl	800fbf4 <_Balloc>
 801003a:	4605      	mov	r5, r0
 801003c:	b948      	cbnz	r0, 8010052 <__lshift+0x3e>
 801003e:	4602      	mov	r2, r0
 8010040:	4b28      	ldr	r3, [pc, #160]	; (80100e4 <__lshift+0xd0>)
 8010042:	4829      	ldr	r0, [pc, #164]	; (80100e8 <__lshift+0xd4>)
 8010044:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010048:	f000 fd5a 	bl	8010b00 <__assert_func>
 801004c:	3101      	adds	r1, #1
 801004e:	005b      	lsls	r3, r3, #1
 8010050:	e7ee      	b.n	8010030 <__lshift+0x1c>
 8010052:	2300      	movs	r3, #0
 8010054:	f100 0114 	add.w	r1, r0, #20
 8010058:	f100 0210 	add.w	r2, r0, #16
 801005c:	4618      	mov	r0, r3
 801005e:	4553      	cmp	r3, sl
 8010060:	db33      	blt.n	80100ca <__lshift+0xb6>
 8010062:	6920      	ldr	r0, [r4, #16]
 8010064:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010068:	f104 0314 	add.w	r3, r4, #20
 801006c:	f019 091f 	ands.w	r9, r9, #31
 8010070:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010074:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010078:	d02b      	beq.n	80100d2 <__lshift+0xbe>
 801007a:	f1c9 0e20 	rsb	lr, r9, #32
 801007e:	468a      	mov	sl, r1
 8010080:	2200      	movs	r2, #0
 8010082:	6818      	ldr	r0, [r3, #0]
 8010084:	fa00 f009 	lsl.w	r0, r0, r9
 8010088:	4310      	orrs	r0, r2
 801008a:	f84a 0b04 	str.w	r0, [sl], #4
 801008e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010092:	459c      	cmp	ip, r3
 8010094:	fa22 f20e 	lsr.w	r2, r2, lr
 8010098:	d8f3      	bhi.n	8010082 <__lshift+0x6e>
 801009a:	ebac 0304 	sub.w	r3, ip, r4
 801009e:	3b15      	subs	r3, #21
 80100a0:	f023 0303 	bic.w	r3, r3, #3
 80100a4:	3304      	adds	r3, #4
 80100a6:	f104 0015 	add.w	r0, r4, #21
 80100aa:	4584      	cmp	ip, r0
 80100ac:	bf38      	it	cc
 80100ae:	2304      	movcc	r3, #4
 80100b0:	50ca      	str	r2, [r1, r3]
 80100b2:	b10a      	cbz	r2, 80100b8 <__lshift+0xa4>
 80100b4:	f108 0602 	add.w	r6, r8, #2
 80100b8:	3e01      	subs	r6, #1
 80100ba:	4638      	mov	r0, r7
 80100bc:	612e      	str	r6, [r5, #16]
 80100be:	4621      	mov	r1, r4
 80100c0:	f7ff fdd8 	bl	800fc74 <_Bfree>
 80100c4:	4628      	mov	r0, r5
 80100c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80100ce:	3301      	adds	r3, #1
 80100d0:	e7c5      	b.n	801005e <__lshift+0x4a>
 80100d2:	3904      	subs	r1, #4
 80100d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80100d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80100dc:	459c      	cmp	ip, r3
 80100de:	d8f9      	bhi.n	80100d4 <__lshift+0xc0>
 80100e0:	e7ea      	b.n	80100b8 <__lshift+0xa4>
 80100e2:	bf00      	nop
 80100e4:	08012049 	.word	0x08012049
 80100e8:	0801205a 	.word	0x0801205a

080100ec <__mcmp>:
 80100ec:	b530      	push	{r4, r5, lr}
 80100ee:	6902      	ldr	r2, [r0, #16]
 80100f0:	690c      	ldr	r4, [r1, #16]
 80100f2:	1b12      	subs	r2, r2, r4
 80100f4:	d10e      	bne.n	8010114 <__mcmp+0x28>
 80100f6:	f100 0314 	add.w	r3, r0, #20
 80100fa:	3114      	adds	r1, #20
 80100fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010100:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010104:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010108:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801010c:	42a5      	cmp	r5, r4
 801010e:	d003      	beq.n	8010118 <__mcmp+0x2c>
 8010110:	d305      	bcc.n	801011e <__mcmp+0x32>
 8010112:	2201      	movs	r2, #1
 8010114:	4610      	mov	r0, r2
 8010116:	bd30      	pop	{r4, r5, pc}
 8010118:	4283      	cmp	r3, r0
 801011a:	d3f3      	bcc.n	8010104 <__mcmp+0x18>
 801011c:	e7fa      	b.n	8010114 <__mcmp+0x28>
 801011e:	f04f 32ff 	mov.w	r2, #4294967295
 8010122:	e7f7      	b.n	8010114 <__mcmp+0x28>

08010124 <__mdiff>:
 8010124:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010128:	460c      	mov	r4, r1
 801012a:	4606      	mov	r6, r0
 801012c:	4611      	mov	r1, r2
 801012e:	4620      	mov	r0, r4
 8010130:	4690      	mov	r8, r2
 8010132:	f7ff ffdb 	bl	80100ec <__mcmp>
 8010136:	1e05      	subs	r5, r0, #0
 8010138:	d110      	bne.n	801015c <__mdiff+0x38>
 801013a:	4629      	mov	r1, r5
 801013c:	4630      	mov	r0, r6
 801013e:	f7ff fd59 	bl	800fbf4 <_Balloc>
 8010142:	b930      	cbnz	r0, 8010152 <__mdiff+0x2e>
 8010144:	4b3a      	ldr	r3, [pc, #232]	; (8010230 <__mdiff+0x10c>)
 8010146:	4602      	mov	r2, r0
 8010148:	f240 2137 	movw	r1, #567	; 0x237
 801014c:	4839      	ldr	r0, [pc, #228]	; (8010234 <__mdiff+0x110>)
 801014e:	f000 fcd7 	bl	8010b00 <__assert_func>
 8010152:	2301      	movs	r3, #1
 8010154:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010158:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801015c:	bfa4      	itt	ge
 801015e:	4643      	movge	r3, r8
 8010160:	46a0      	movge	r8, r4
 8010162:	4630      	mov	r0, r6
 8010164:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010168:	bfa6      	itte	ge
 801016a:	461c      	movge	r4, r3
 801016c:	2500      	movge	r5, #0
 801016e:	2501      	movlt	r5, #1
 8010170:	f7ff fd40 	bl	800fbf4 <_Balloc>
 8010174:	b920      	cbnz	r0, 8010180 <__mdiff+0x5c>
 8010176:	4b2e      	ldr	r3, [pc, #184]	; (8010230 <__mdiff+0x10c>)
 8010178:	4602      	mov	r2, r0
 801017a:	f240 2145 	movw	r1, #581	; 0x245
 801017e:	e7e5      	b.n	801014c <__mdiff+0x28>
 8010180:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010184:	6926      	ldr	r6, [r4, #16]
 8010186:	60c5      	str	r5, [r0, #12]
 8010188:	f104 0914 	add.w	r9, r4, #20
 801018c:	f108 0514 	add.w	r5, r8, #20
 8010190:	f100 0e14 	add.w	lr, r0, #20
 8010194:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010198:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801019c:	f108 0210 	add.w	r2, r8, #16
 80101a0:	46f2      	mov	sl, lr
 80101a2:	2100      	movs	r1, #0
 80101a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80101a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80101ac:	fa11 f88b 	uxtah	r8, r1, fp
 80101b0:	b299      	uxth	r1, r3
 80101b2:	0c1b      	lsrs	r3, r3, #16
 80101b4:	eba8 0801 	sub.w	r8, r8, r1
 80101b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80101bc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80101c0:	fa1f f888 	uxth.w	r8, r8
 80101c4:	1419      	asrs	r1, r3, #16
 80101c6:	454e      	cmp	r6, r9
 80101c8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80101cc:	f84a 3b04 	str.w	r3, [sl], #4
 80101d0:	d8e8      	bhi.n	80101a4 <__mdiff+0x80>
 80101d2:	1b33      	subs	r3, r6, r4
 80101d4:	3b15      	subs	r3, #21
 80101d6:	f023 0303 	bic.w	r3, r3, #3
 80101da:	3304      	adds	r3, #4
 80101dc:	3415      	adds	r4, #21
 80101de:	42a6      	cmp	r6, r4
 80101e0:	bf38      	it	cc
 80101e2:	2304      	movcc	r3, #4
 80101e4:	441d      	add	r5, r3
 80101e6:	4473      	add	r3, lr
 80101e8:	469e      	mov	lr, r3
 80101ea:	462e      	mov	r6, r5
 80101ec:	4566      	cmp	r6, ip
 80101ee:	d30e      	bcc.n	801020e <__mdiff+0xea>
 80101f0:	f10c 0203 	add.w	r2, ip, #3
 80101f4:	1b52      	subs	r2, r2, r5
 80101f6:	f022 0203 	bic.w	r2, r2, #3
 80101fa:	3d03      	subs	r5, #3
 80101fc:	45ac      	cmp	ip, r5
 80101fe:	bf38      	it	cc
 8010200:	2200      	movcc	r2, #0
 8010202:	4413      	add	r3, r2
 8010204:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010208:	b17a      	cbz	r2, 801022a <__mdiff+0x106>
 801020a:	6107      	str	r7, [r0, #16]
 801020c:	e7a4      	b.n	8010158 <__mdiff+0x34>
 801020e:	f856 8b04 	ldr.w	r8, [r6], #4
 8010212:	fa11 f288 	uxtah	r2, r1, r8
 8010216:	1414      	asrs	r4, r2, #16
 8010218:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801021c:	b292      	uxth	r2, r2
 801021e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010222:	f84e 2b04 	str.w	r2, [lr], #4
 8010226:	1421      	asrs	r1, r4, #16
 8010228:	e7e0      	b.n	80101ec <__mdiff+0xc8>
 801022a:	3f01      	subs	r7, #1
 801022c:	e7ea      	b.n	8010204 <__mdiff+0xe0>
 801022e:	bf00      	nop
 8010230:	08012049 	.word	0x08012049
 8010234:	0801205a 	.word	0x0801205a

08010238 <__d2b>:
 8010238:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801023c:	460f      	mov	r7, r1
 801023e:	2101      	movs	r1, #1
 8010240:	ec59 8b10 	vmov	r8, r9, d0
 8010244:	4616      	mov	r6, r2
 8010246:	f7ff fcd5 	bl	800fbf4 <_Balloc>
 801024a:	4604      	mov	r4, r0
 801024c:	b930      	cbnz	r0, 801025c <__d2b+0x24>
 801024e:	4602      	mov	r2, r0
 8010250:	4b24      	ldr	r3, [pc, #144]	; (80102e4 <__d2b+0xac>)
 8010252:	4825      	ldr	r0, [pc, #148]	; (80102e8 <__d2b+0xb0>)
 8010254:	f240 310f 	movw	r1, #783	; 0x30f
 8010258:	f000 fc52 	bl	8010b00 <__assert_func>
 801025c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010260:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010264:	bb2d      	cbnz	r5, 80102b2 <__d2b+0x7a>
 8010266:	9301      	str	r3, [sp, #4]
 8010268:	f1b8 0300 	subs.w	r3, r8, #0
 801026c:	d026      	beq.n	80102bc <__d2b+0x84>
 801026e:	4668      	mov	r0, sp
 8010270:	9300      	str	r3, [sp, #0]
 8010272:	f7ff fd87 	bl	800fd84 <__lo0bits>
 8010276:	e9dd 1200 	ldrd	r1, r2, [sp]
 801027a:	b1e8      	cbz	r0, 80102b8 <__d2b+0x80>
 801027c:	f1c0 0320 	rsb	r3, r0, #32
 8010280:	fa02 f303 	lsl.w	r3, r2, r3
 8010284:	430b      	orrs	r3, r1
 8010286:	40c2      	lsrs	r2, r0
 8010288:	6163      	str	r3, [r4, #20]
 801028a:	9201      	str	r2, [sp, #4]
 801028c:	9b01      	ldr	r3, [sp, #4]
 801028e:	61a3      	str	r3, [r4, #24]
 8010290:	2b00      	cmp	r3, #0
 8010292:	bf14      	ite	ne
 8010294:	2202      	movne	r2, #2
 8010296:	2201      	moveq	r2, #1
 8010298:	6122      	str	r2, [r4, #16]
 801029a:	b1bd      	cbz	r5, 80102cc <__d2b+0x94>
 801029c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80102a0:	4405      	add	r5, r0
 80102a2:	603d      	str	r5, [r7, #0]
 80102a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80102a8:	6030      	str	r0, [r6, #0]
 80102aa:	4620      	mov	r0, r4
 80102ac:	b003      	add	sp, #12
 80102ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80102b6:	e7d6      	b.n	8010266 <__d2b+0x2e>
 80102b8:	6161      	str	r1, [r4, #20]
 80102ba:	e7e7      	b.n	801028c <__d2b+0x54>
 80102bc:	a801      	add	r0, sp, #4
 80102be:	f7ff fd61 	bl	800fd84 <__lo0bits>
 80102c2:	9b01      	ldr	r3, [sp, #4]
 80102c4:	6163      	str	r3, [r4, #20]
 80102c6:	3020      	adds	r0, #32
 80102c8:	2201      	movs	r2, #1
 80102ca:	e7e5      	b.n	8010298 <__d2b+0x60>
 80102cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80102d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80102d4:	6038      	str	r0, [r7, #0]
 80102d6:	6918      	ldr	r0, [r3, #16]
 80102d8:	f7ff fd34 	bl	800fd44 <__hi0bits>
 80102dc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80102e0:	e7e2      	b.n	80102a8 <__d2b+0x70>
 80102e2:	bf00      	nop
 80102e4:	08012049 	.word	0x08012049
 80102e8:	0801205a 	.word	0x0801205a

080102ec <__ssputs_r>:
 80102ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102f0:	688e      	ldr	r6, [r1, #8]
 80102f2:	461f      	mov	r7, r3
 80102f4:	42be      	cmp	r6, r7
 80102f6:	680b      	ldr	r3, [r1, #0]
 80102f8:	4682      	mov	sl, r0
 80102fa:	460c      	mov	r4, r1
 80102fc:	4690      	mov	r8, r2
 80102fe:	d82c      	bhi.n	801035a <__ssputs_r+0x6e>
 8010300:	898a      	ldrh	r2, [r1, #12]
 8010302:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010306:	d026      	beq.n	8010356 <__ssputs_r+0x6a>
 8010308:	6965      	ldr	r5, [r4, #20]
 801030a:	6909      	ldr	r1, [r1, #16]
 801030c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010310:	eba3 0901 	sub.w	r9, r3, r1
 8010314:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010318:	1c7b      	adds	r3, r7, #1
 801031a:	444b      	add	r3, r9
 801031c:	106d      	asrs	r5, r5, #1
 801031e:	429d      	cmp	r5, r3
 8010320:	bf38      	it	cc
 8010322:	461d      	movcc	r5, r3
 8010324:	0553      	lsls	r3, r2, #21
 8010326:	d527      	bpl.n	8010378 <__ssputs_r+0x8c>
 8010328:	4629      	mov	r1, r5
 801032a:	f7ff fbd7 	bl	800fadc <_malloc_r>
 801032e:	4606      	mov	r6, r0
 8010330:	b360      	cbz	r0, 801038c <__ssputs_r+0xa0>
 8010332:	6921      	ldr	r1, [r4, #16]
 8010334:	464a      	mov	r2, r9
 8010336:	f7fe fcd4 	bl	800ece2 <memcpy>
 801033a:	89a3      	ldrh	r3, [r4, #12]
 801033c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010344:	81a3      	strh	r3, [r4, #12]
 8010346:	6126      	str	r6, [r4, #16]
 8010348:	6165      	str	r5, [r4, #20]
 801034a:	444e      	add	r6, r9
 801034c:	eba5 0509 	sub.w	r5, r5, r9
 8010350:	6026      	str	r6, [r4, #0]
 8010352:	60a5      	str	r5, [r4, #8]
 8010354:	463e      	mov	r6, r7
 8010356:	42be      	cmp	r6, r7
 8010358:	d900      	bls.n	801035c <__ssputs_r+0x70>
 801035a:	463e      	mov	r6, r7
 801035c:	6820      	ldr	r0, [r4, #0]
 801035e:	4632      	mov	r2, r6
 8010360:	4641      	mov	r1, r8
 8010362:	f000 fba3 	bl	8010aac <memmove>
 8010366:	68a3      	ldr	r3, [r4, #8]
 8010368:	1b9b      	subs	r3, r3, r6
 801036a:	60a3      	str	r3, [r4, #8]
 801036c:	6823      	ldr	r3, [r4, #0]
 801036e:	4433      	add	r3, r6
 8010370:	6023      	str	r3, [r4, #0]
 8010372:	2000      	movs	r0, #0
 8010374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010378:	462a      	mov	r2, r5
 801037a:	f000 fc07 	bl	8010b8c <_realloc_r>
 801037e:	4606      	mov	r6, r0
 8010380:	2800      	cmp	r0, #0
 8010382:	d1e0      	bne.n	8010346 <__ssputs_r+0x5a>
 8010384:	6921      	ldr	r1, [r4, #16]
 8010386:	4650      	mov	r0, sl
 8010388:	f7ff fb34 	bl	800f9f4 <_free_r>
 801038c:	230c      	movs	r3, #12
 801038e:	f8ca 3000 	str.w	r3, [sl]
 8010392:	89a3      	ldrh	r3, [r4, #12]
 8010394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010398:	81a3      	strh	r3, [r4, #12]
 801039a:	f04f 30ff 	mov.w	r0, #4294967295
 801039e:	e7e9      	b.n	8010374 <__ssputs_r+0x88>

080103a0 <_svfiprintf_r>:
 80103a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103a4:	4698      	mov	r8, r3
 80103a6:	898b      	ldrh	r3, [r1, #12]
 80103a8:	061b      	lsls	r3, r3, #24
 80103aa:	b09d      	sub	sp, #116	; 0x74
 80103ac:	4607      	mov	r7, r0
 80103ae:	460d      	mov	r5, r1
 80103b0:	4614      	mov	r4, r2
 80103b2:	d50e      	bpl.n	80103d2 <_svfiprintf_r+0x32>
 80103b4:	690b      	ldr	r3, [r1, #16]
 80103b6:	b963      	cbnz	r3, 80103d2 <_svfiprintf_r+0x32>
 80103b8:	2140      	movs	r1, #64	; 0x40
 80103ba:	f7ff fb8f 	bl	800fadc <_malloc_r>
 80103be:	6028      	str	r0, [r5, #0]
 80103c0:	6128      	str	r0, [r5, #16]
 80103c2:	b920      	cbnz	r0, 80103ce <_svfiprintf_r+0x2e>
 80103c4:	230c      	movs	r3, #12
 80103c6:	603b      	str	r3, [r7, #0]
 80103c8:	f04f 30ff 	mov.w	r0, #4294967295
 80103cc:	e0d0      	b.n	8010570 <_svfiprintf_r+0x1d0>
 80103ce:	2340      	movs	r3, #64	; 0x40
 80103d0:	616b      	str	r3, [r5, #20]
 80103d2:	2300      	movs	r3, #0
 80103d4:	9309      	str	r3, [sp, #36]	; 0x24
 80103d6:	2320      	movs	r3, #32
 80103d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80103dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80103e0:	2330      	movs	r3, #48	; 0x30
 80103e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010588 <_svfiprintf_r+0x1e8>
 80103e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80103ea:	f04f 0901 	mov.w	r9, #1
 80103ee:	4623      	mov	r3, r4
 80103f0:	469a      	mov	sl, r3
 80103f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103f6:	b10a      	cbz	r2, 80103fc <_svfiprintf_r+0x5c>
 80103f8:	2a25      	cmp	r2, #37	; 0x25
 80103fa:	d1f9      	bne.n	80103f0 <_svfiprintf_r+0x50>
 80103fc:	ebba 0b04 	subs.w	fp, sl, r4
 8010400:	d00b      	beq.n	801041a <_svfiprintf_r+0x7a>
 8010402:	465b      	mov	r3, fp
 8010404:	4622      	mov	r2, r4
 8010406:	4629      	mov	r1, r5
 8010408:	4638      	mov	r0, r7
 801040a:	f7ff ff6f 	bl	80102ec <__ssputs_r>
 801040e:	3001      	adds	r0, #1
 8010410:	f000 80a9 	beq.w	8010566 <_svfiprintf_r+0x1c6>
 8010414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010416:	445a      	add	r2, fp
 8010418:	9209      	str	r2, [sp, #36]	; 0x24
 801041a:	f89a 3000 	ldrb.w	r3, [sl]
 801041e:	2b00      	cmp	r3, #0
 8010420:	f000 80a1 	beq.w	8010566 <_svfiprintf_r+0x1c6>
 8010424:	2300      	movs	r3, #0
 8010426:	f04f 32ff 	mov.w	r2, #4294967295
 801042a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801042e:	f10a 0a01 	add.w	sl, sl, #1
 8010432:	9304      	str	r3, [sp, #16]
 8010434:	9307      	str	r3, [sp, #28]
 8010436:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801043a:	931a      	str	r3, [sp, #104]	; 0x68
 801043c:	4654      	mov	r4, sl
 801043e:	2205      	movs	r2, #5
 8010440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010444:	4850      	ldr	r0, [pc, #320]	; (8010588 <_svfiprintf_r+0x1e8>)
 8010446:	f7ef fefb 	bl	8000240 <memchr>
 801044a:	9a04      	ldr	r2, [sp, #16]
 801044c:	b9d8      	cbnz	r0, 8010486 <_svfiprintf_r+0xe6>
 801044e:	06d0      	lsls	r0, r2, #27
 8010450:	bf44      	itt	mi
 8010452:	2320      	movmi	r3, #32
 8010454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010458:	0711      	lsls	r1, r2, #28
 801045a:	bf44      	itt	mi
 801045c:	232b      	movmi	r3, #43	; 0x2b
 801045e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010462:	f89a 3000 	ldrb.w	r3, [sl]
 8010466:	2b2a      	cmp	r3, #42	; 0x2a
 8010468:	d015      	beq.n	8010496 <_svfiprintf_r+0xf6>
 801046a:	9a07      	ldr	r2, [sp, #28]
 801046c:	4654      	mov	r4, sl
 801046e:	2000      	movs	r0, #0
 8010470:	f04f 0c0a 	mov.w	ip, #10
 8010474:	4621      	mov	r1, r4
 8010476:	f811 3b01 	ldrb.w	r3, [r1], #1
 801047a:	3b30      	subs	r3, #48	; 0x30
 801047c:	2b09      	cmp	r3, #9
 801047e:	d94d      	bls.n	801051c <_svfiprintf_r+0x17c>
 8010480:	b1b0      	cbz	r0, 80104b0 <_svfiprintf_r+0x110>
 8010482:	9207      	str	r2, [sp, #28]
 8010484:	e014      	b.n	80104b0 <_svfiprintf_r+0x110>
 8010486:	eba0 0308 	sub.w	r3, r0, r8
 801048a:	fa09 f303 	lsl.w	r3, r9, r3
 801048e:	4313      	orrs	r3, r2
 8010490:	9304      	str	r3, [sp, #16]
 8010492:	46a2      	mov	sl, r4
 8010494:	e7d2      	b.n	801043c <_svfiprintf_r+0x9c>
 8010496:	9b03      	ldr	r3, [sp, #12]
 8010498:	1d19      	adds	r1, r3, #4
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	9103      	str	r1, [sp, #12]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	bfbb      	ittet	lt
 80104a2:	425b      	neglt	r3, r3
 80104a4:	f042 0202 	orrlt.w	r2, r2, #2
 80104a8:	9307      	strge	r3, [sp, #28]
 80104aa:	9307      	strlt	r3, [sp, #28]
 80104ac:	bfb8      	it	lt
 80104ae:	9204      	strlt	r2, [sp, #16]
 80104b0:	7823      	ldrb	r3, [r4, #0]
 80104b2:	2b2e      	cmp	r3, #46	; 0x2e
 80104b4:	d10c      	bne.n	80104d0 <_svfiprintf_r+0x130>
 80104b6:	7863      	ldrb	r3, [r4, #1]
 80104b8:	2b2a      	cmp	r3, #42	; 0x2a
 80104ba:	d134      	bne.n	8010526 <_svfiprintf_r+0x186>
 80104bc:	9b03      	ldr	r3, [sp, #12]
 80104be:	1d1a      	adds	r2, r3, #4
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	9203      	str	r2, [sp, #12]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	bfb8      	it	lt
 80104c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80104cc:	3402      	adds	r4, #2
 80104ce:	9305      	str	r3, [sp, #20]
 80104d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010598 <_svfiprintf_r+0x1f8>
 80104d4:	7821      	ldrb	r1, [r4, #0]
 80104d6:	2203      	movs	r2, #3
 80104d8:	4650      	mov	r0, sl
 80104da:	f7ef feb1 	bl	8000240 <memchr>
 80104de:	b138      	cbz	r0, 80104f0 <_svfiprintf_r+0x150>
 80104e0:	9b04      	ldr	r3, [sp, #16]
 80104e2:	eba0 000a 	sub.w	r0, r0, sl
 80104e6:	2240      	movs	r2, #64	; 0x40
 80104e8:	4082      	lsls	r2, r0
 80104ea:	4313      	orrs	r3, r2
 80104ec:	3401      	adds	r4, #1
 80104ee:	9304      	str	r3, [sp, #16]
 80104f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104f4:	4825      	ldr	r0, [pc, #148]	; (801058c <_svfiprintf_r+0x1ec>)
 80104f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80104fa:	2206      	movs	r2, #6
 80104fc:	f7ef fea0 	bl	8000240 <memchr>
 8010500:	2800      	cmp	r0, #0
 8010502:	d038      	beq.n	8010576 <_svfiprintf_r+0x1d6>
 8010504:	4b22      	ldr	r3, [pc, #136]	; (8010590 <_svfiprintf_r+0x1f0>)
 8010506:	bb1b      	cbnz	r3, 8010550 <_svfiprintf_r+0x1b0>
 8010508:	9b03      	ldr	r3, [sp, #12]
 801050a:	3307      	adds	r3, #7
 801050c:	f023 0307 	bic.w	r3, r3, #7
 8010510:	3308      	adds	r3, #8
 8010512:	9303      	str	r3, [sp, #12]
 8010514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010516:	4433      	add	r3, r6
 8010518:	9309      	str	r3, [sp, #36]	; 0x24
 801051a:	e768      	b.n	80103ee <_svfiprintf_r+0x4e>
 801051c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010520:	460c      	mov	r4, r1
 8010522:	2001      	movs	r0, #1
 8010524:	e7a6      	b.n	8010474 <_svfiprintf_r+0xd4>
 8010526:	2300      	movs	r3, #0
 8010528:	3401      	adds	r4, #1
 801052a:	9305      	str	r3, [sp, #20]
 801052c:	4619      	mov	r1, r3
 801052e:	f04f 0c0a 	mov.w	ip, #10
 8010532:	4620      	mov	r0, r4
 8010534:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010538:	3a30      	subs	r2, #48	; 0x30
 801053a:	2a09      	cmp	r2, #9
 801053c:	d903      	bls.n	8010546 <_svfiprintf_r+0x1a6>
 801053e:	2b00      	cmp	r3, #0
 8010540:	d0c6      	beq.n	80104d0 <_svfiprintf_r+0x130>
 8010542:	9105      	str	r1, [sp, #20]
 8010544:	e7c4      	b.n	80104d0 <_svfiprintf_r+0x130>
 8010546:	fb0c 2101 	mla	r1, ip, r1, r2
 801054a:	4604      	mov	r4, r0
 801054c:	2301      	movs	r3, #1
 801054e:	e7f0      	b.n	8010532 <_svfiprintf_r+0x192>
 8010550:	ab03      	add	r3, sp, #12
 8010552:	9300      	str	r3, [sp, #0]
 8010554:	462a      	mov	r2, r5
 8010556:	4b0f      	ldr	r3, [pc, #60]	; (8010594 <_svfiprintf_r+0x1f4>)
 8010558:	a904      	add	r1, sp, #16
 801055a:	4638      	mov	r0, r7
 801055c:	f7fd fe32 	bl	800e1c4 <_printf_float>
 8010560:	1c42      	adds	r2, r0, #1
 8010562:	4606      	mov	r6, r0
 8010564:	d1d6      	bne.n	8010514 <_svfiprintf_r+0x174>
 8010566:	89ab      	ldrh	r3, [r5, #12]
 8010568:	065b      	lsls	r3, r3, #25
 801056a:	f53f af2d 	bmi.w	80103c8 <_svfiprintf_r+0x28>
 801056e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010570:	b01d      	add	sp, #116	; 0x74
 8010572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010576:	ab03      	add	r3, sp, #12
 8010578:	9300      	str	r3, [sp, #0]
 801057a:	462a      	mov	r2, r5
 801057c:	4b05      	ldr	r3, [pc, #20]	; (8010594 <_svfiprintf_r+0x1f4>)
 801057e:	a904      	add	r1, sp, #16
 8010580:	4638      	mov	r0, r7
 8010582:	f7fe f8c3 	bl	800e70c <_printf_i>
 8010586:	e7eb      	b.n	8010560 <_svfiprintf_r+0x1c0>
 8010588:	080121b4 	.word	0x080121b4
 801058c:	080121be 	.word	0x080121be
 8010590:	0800e1c5 	.word	0x0800e1c5
 8010594:	080102ed 	.word	0x080102ed
 8010598:	080121ba 	.word	0x080121ba

0801059c <__sfputc_r>:
 801059c:	6893      	ldr	r3, [r2, #8]
 801059e:	3b01      	subs	r3, #1
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	b410      	push	{r4}
 80105a4:	6093      	str	r3, [r2, #8]
 80105a6:	da08      	bge.n	80105ba <__sfputc_r+0x1e>
 80105a8:	6994      	ldr	r4, [r2, #24]
 80105aa:	42a3      	cmp	r3, r4
 80105ac:	db01      	blt.n	80105b2 <__sfputc_r+0x16>
 80105ae:	290a      	cmp	r1, #10
 80105b0:	d103      	bne.n	80105ba <__sfputc_r+0x1e>
 80105b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105b6:	f000 b9e3 	b.w	8010980 <__swbuf_r>
 80105ba:	6813      	ldr	r3, [r2, #0]
 80105bc:	1c58      	adds	r0, r3, #1
 80105be:	6010      	str	r0, [r2, #0]
 80105c0:	7019      	strb	r1, [r3, #0]
 80105c2:	4608      	mov	r0, r1
 80105c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105c8:	4770      	bx	lr

080105ca <__sfputs_r>:
 80105ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105cc:	4606      	mov	r6, r0
 80105ce:	460f      	mov	r7, r1
 80105d0:	4614      	mov	r4, r2
 80105d2:	18d5      	adds	r5, r2, r3
 80105d4:	42ac      	cmp	r4, r5
 80105d6:	d101      	bne.n	80105dc <__sfputs_r+0x12>
 80105d8:	2000      	movs	r0, #0
 80105da:	e007      	b.n	80105ec <__sfputs_r+0x22>
 80105dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105e0:	463a      	mov	r2, r7
 80105e2:	4630      	mov	r0, r6
 80105e4:	f7ff ffda 	bl	801059c <__sfputc_r>
 80105e8:	1c43      	adds	r3, r0, #1
 80105ea:	d1f3      	bne.n	80105d4 <__sfputs_r+0xa>
 80105ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080105f0 <_vfiprintf_r>:
 80105f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105f4:	460d      	mov	r5, r1
 80105f6:	b09d      	sub	sp, #116	; 0x74
 80105f8:	4614      	mov	r4, r2
 80105fa:	4698      	mov	r8, r3
 80105fc:	4606      	mov	r6, r0
 80105fe:	b118      	cbz	r0, 8010608 <_vfiprintf_r+0x18>
 8010600:	6a03      	ldr	r3, [r0, #32]
 8010602:	b90b      	cbnz	r3, 8010608 <_vfiprintf_r+0x18>
 8010604:	f7fe fa30 	bl	800ea68 <__sinit>
 8010608:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801060a:	07d9      	lsls	r1, r3, #31
 801060c:	d405      	bmi.n	801061a <_vfiprintf_r+0x2a>
 801060e:	89ab      	ldrh	r3, [r5, #12]
 8010610:	059a      	lsls	r2, r3, #22
 8010612:	d402      	bmi.n	801061a <_vfiprintf_r+0x2a>
 8010614:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010616:	f7fe fb62 	bl	800ecde <__retarget_lock_acquire_recursive>
 801061a:	89ab      	ldrh	r3, [r5, #12]
 801061c:	071b      	lsls	r3, r3, #28
 801061e:	d501      	bpl.n	8010624 <_vfiprintf_r+0x34>
 8010620:	692b      	ldr	r3, [r5, #16]
 8010622:	b99b      	cbnz	r3, 801064c <_vfiprintf_r+0x5c>
 8010624:	4629      	mov	r1, r5
 8010626:	4630      	mov	r0, r6
 8010628:	f000 f9e8 	bl	80109fc <__swsetup_r>
 801062c:	b170      	cbz	r0, 801064c <_vfiprintf_r+0x5c>
 801062e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010630:	07dc      	lsls	r4, r3, #31
 8010632:	d504      	bpl.n	801063e <_vfiprintf_r+0x4e>
 8010634:	f04f 30ff 	mov.w	r0, #4294967295
 8010638:	b01d      	add	sp, #116	; 0x74
 801063a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801063e:	89ab      	ldrh	r3, [r5, #12]
 8010640:	0598      	lsls	r0, r3, #22
 8010642:	d4f7      	bmi.n	8010634 <_vfiprintf_r+0x44>
 8010644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010646:	f7fe fb4b 	bl	800ece0 <__retarget_lock_release_recursive>
 801064a:	e7f3      	b.n	8010634 <_vfiprintf_r+0x44>
 801064c:	2300      	movs	r3, #0
 801064e:	9309      	str	r3, [sp, #36]	; 0x24
 8010650:	2320      	movs	r3, #32
 8010652:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010656:	f8cd 800c 	str.w	r8, [sp, #12]
 801065a:	2330      	movs	r3, #48	; 0x30
 801065c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010810 <_vfiprintf_r+0x220>
 8010660:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010664:	f04f 0901 	mov.w	r9, #1
 8010668:	4623      	mov	r3, r4
 801066a:	469a      	mov	sl, r3
 801066c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010670:	b10a      	cbz	r2, 8010676 <_vfiprintf_r+0x86>
 8010672:	2a25      	cmp	r2, #37	; 0x25
 8010674:	d1f9      	bne.n	801066a <_vfiprintf_r+0x7a>
 8010676:	ebba 0b04 	subs.w	fp, sl, r4
 801067a:	d00b      	beq.n	8010694 <_vfiprintf_r+0xa4>
 801067c:	465b      	mov	r3, fp
 801067e:	4622      	mov	r2, r4
 8010680:	4629      	mov	r1, r5
 8010682:	4630      	mov	r0, r6
 8010684:	f7ff ffa1 	bl	80105ca <__sfputs_r>
 8010688:	3001      	adds	r0, #1
 801068a:	f000 80a9 	beq.w	80107e0 <_vfiprintf_r+0x1f0>
 801068e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010690:	445a      	add	r2, fp
 8010692:	9209      	str	r2, [sp, #36]	; 0x24
 8010694:	f89a 3000 	ldrb.w	r3, [sl]
 8010698:	2b00      	cmp	r3, #0
 801069a:	f000 80a1 	beq.w	80107e0 <_vfiprintf_r+0x1f0>
 801069e:	2300      	movs	r3, #0
 80106a0:	f04f 32ff 	mov.w	r2, #4294967295
 80106a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80106a8:	f10a 0a01 	add.w	sl, sl, #1
 80106ac:	9304      	str	r3, [sp, #16]
 80106ae:	9307      	str	r3, [sp, #28]
 80106b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80106b4:	931a      	str	r3, [sp, #104]	; 0x68
 80106b6:	4654      	mov	r4, sl
 80106b8:	2205      	movs	r2, #5
 80106ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106be:	4854      	ldr	r0, [pc, #336]	; (8010810 <_vfiprintf_r+0x220>)
 80106c0:	f7ef fdbe 	bl	8000240 <memchr>
 80106c4:	9a04      	ldr	r2, [sp, #16]
 80106c6:	b9d8      	cbnz	r0, 8010700 <_vfiprintf_r+0x110>
 80106c8:	06d1      	lsls	r1, r2, #27
 80106ca:	bf44      	itt	mi
 80106cc:	2320      	movmi	r3, #32
 80106ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106d2:	0713      	lsls	r3, r2, #28
 80106d4:	bf44      	itt	mi
 80106d6:	232b      	movmi	r3, #43	; 0x2b
 80106d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106dc:	f89a 3000 	ldrb.w	r3, [sl]
 80106e0:	2b2a      	cmp	r3, #42	; 0x2a
 80106e2:	d015      	beq.n	8010710 <_vfiprintf_r+0x120>
 80106e4:	9a07      	ldr	r2, [sp, #28]
 80106e6:	4654      	mov	r4, sl
 80106e8:	2000      	movs	r0, #0
 80106ea:	f04f 0c0a 	mov.w	ip, #10
 80106ee:	4621      	mov	r1, r4
 80106f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106f4:	3b30      	subs	r3, #48	; 0x30
 80106f6:	2b09      	cmp	r3, #9
 80106f8:	d94d      	bls.n	8010796 <_vfiprintf_r+0x1a6>
 80106fa:	b1b0      	cbz	r0, 801072a <_vfiprintf_r+0x13a>
 80106fc:	9207      	str	r2, [sp, #28]
 80106fe:	e014      	b.n	801072a <_vfiprintf_r+0x13a>
 8010700:	eba0 0308 	sub.w	r3, r0, r8
 8010704:	fa09 f303 	lsl.w	r3, r9, r3
 8010708:	4313      	orrs	r3, r2
 801070a:	9304      	str	r3, [sp, #16]
 801070c:	46a2      	mov	sl, r4
 801070e:	e7d2      	b.n	80106b6 <_vfiprintf_r+0xc6>
 8010710:	9b03      	ldr	r3, [sp, #12]
 8010712:	1d19      	adds	r1, r3, #4
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	9103      	str	r1, [sp, #12]
 8010718:	2b00      	cmp	r3, #0
 801071a:	bfbb      	ittet	lt
 801071c:	425b      	neglt	r3, r3
 801071e:	f042 0202 	orrlt.w	r2, r2, #2
 8010722:	9307      	strge	r3, [sp, #28]
 8010724:	9307      	strlt	r3, [sp, #28]
 8010726:	bfb8      	it	lt
 8010728:	9204      	strlt	r2, [sp, #16]
 801072a:	7823      	ldrb	r3, [r4, #0]
 801072c:	2b2e      	cmp	r3, #46	; 0x2e
 801072e:	d10c      	bne.n	801074a <_vfiprintf_r+0x15a>
 8010730:	7863      	ldrb	r3, [r4, #1]
 8010732:	2b2a      	cmp	r3, #42	; 0x2a
 8010734:	d134      	bne.n	80107a0 <_vfiprintf_r+0x1b0>
 8010736:	9b03      	ldr	r3, [sp, #12]
 8010738:	1d1a      	adds	r2, r3, #4
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	9203      	str	r2, [sp, #12]
 801073e:	2b00      	cmp	r3, #0
 8010740:	bfb8      	it	lt
 8010742:	f04f 33ff 	movlt.w	r3, #4294967295
 8010746:	3402      	adds	r4, #2
 8010748:	9305      	str	r3, [sp, #20]
 801074a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010820 <_vfiprintf_r+0x230>
 801074e:	7821      	ldrb	r1, [r4, #0]
 8010750:	2203      	movs	r2, #3
 8010752:	4650      	mov	r0, sl
 8010754:	f7ef fd74 	bl	8000240 <memchr>
 8010758:	b138      	cbz	r0, 801076a <_vfiprintf_r+0x17a>
 801075a:	9b04      	ldr	r3, [sp, #16]
 801075c:	eba0 000a 	sub.w	r0, r0, sl
 8010760:	2240      	movs	r2, #64	; 0x40
 8010762:	4082      	lsls	r2, r0
 8010764:	4313      	orrs	r3, r2
 8010766:	3401      	adds	r4, #1
 8010768:	9304      	str	r3, [sp, #16]
 801076a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801076e:	4829      	ldr	r0, [pc, #164]	; (8010814 <_vfiprintf_r+0x224>)
 8010770:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010774:	2206      	movs	r2, #6
 8010776:	f7ef fd63 	bl	8000240 <memchr>
 801077a:	2800      	cmp	r0, #0
 801077c:	d03f      	beq.n	80107fe <_vfiprintf_r+0x20e>
 801077e:	4b26      	ldr	r3, [pc, #152]	; (8010818 <_vfiprintf_r+0x228>)
 8010780:	bb1b      	cbnz	r3, 80107ca <_vfiprintf_r+0x1da>
 8010782:	9b03      	ldr	r3, [sp, #12]
 8010784:	3307      	adds	r3, #7
 8010786:	f023 0307 	bic.w	r3, r3, #7
 801078a:	3308      	adds	r3, #8
 801078c:	9303      	str	r3, [sp, #12]
 801078e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010790:	443b      	add	r3, r7
 8010792:	9309      	str	r3, [sp, #36]	; 0x24
 8010794:	e768      	b.n	8010668 <_vfiprintf_r+0x78>
 8010796:	fb0c 3202 	mla	r2, ip, r2, r3
 801079a:	460c      	mov	r4, r1
 801079c:	2001      	movs	r0, #1
 801079e:	e7a6      	b.n	80106ee <_vfiprintf_r+0xfe>
 80107a0:	2300      	movs	r3, #0
 80107a2:	3401      	adds	r4, #1
 80107a4:	9305      	str	r3, [sp, #20]
 80107a6:	4619      	mov	r1, r3
 80107a8:	f04f 0c0a 	mov.w	ip, #10
 80107ac:	4620      	mov	r0, r4
 80107ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107b2:	3a30      	subs	r2, #48	; 0x30
 80107b4:	2a09      	cmp	r2, #9
 80107b6:	d903      	bls.n	80107c0 <_vfiprintf_r+0x1d0>
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d0c6      	beq.n	801074a <_vfiprintf_r+0x15a>
 80107bc:	9105      	str	r1, [sp, #20]
 80107be:	e7c4      	b.n	801074a <_vfiprintf_r+0x15a>
 80107c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80107c4:	4604      	mov	r4, r0
 80107c6:	2301      	movs	r3, #1
 80107c8:	e7f0      	b.n	80107ac <_vfiprintf_r+0x1bc>
 80107ca:	ab03      	add	r3, sp, #12
 80107cc:	9300      	str	r3, [sp, #0]
 80107ce:	462a      	mov	r2, r5
 80107d0:	4b12      	ldr	r3, [pc, #72]	; (801081c <_vfiprintf_r+0x22c>)
 80107d2:	a904      	add	r1, sp, #16
 80107d4:	4630      	mov	r0, r6
 80107d6:	f7fd fcf5 	bl	800e1c4 <_printf_float>
 80107da:	4607      	mov	r7, r0
 80107dc:	1c78      	adds	r0, r7, #1
 80107de:	d1d6      	bne.n	801078e <_vfiprintf_r+0x19e>
 80107e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80107e2:	07d9      	lsls	r1, r3, #31
 80107e4:	d405      	bmi.n	80107f2 <_vfiprintf_r+0x202>
 80107e6:	89ab      	ldrh	r3, [r5, #12]
 80107e8:	059a      	lsls	r2, r3, #22
 80107ea:	d402      	bmi.n	80107f2 <_vfiprintf_r+0x202>
 80107ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80107ee:	f7fe fa77 	bl	800ece0 <__retarget_lock_release_recursive>
 80107f2:	89ab      	ldrh	r3, [r5, #12]
 80107f4:	065b      	lsls	r3, r3, #25
 80107f6:	f53f af1d 	bmi.w	8010634 <_vfiprintf_r+0x44>
 80107fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80107fc:	e71c      	b.n	8010638 <_vfiprintf_r+0x48>
 80107fe:	ab03      	add	r3, sp, #12
 8010800:	9300      	str	r3, [sp, #0]
 8010802:	462a      	mov	r2, r5
 8010804:	4b05      	ldr	r3, [pc, #20]	; (801081c <_vfiprintf_r+0x22c>)
 8010806:	a904      	add	r1, sp, #16
 8010808:	4630      	mov	r0, r6
 801080a:	f7fd ff7f 	bl	800e70c <_printf_i>
 801080e:	e7e4      	b.n	80107da <_vfiprintf_r+0x1ea>
 8010810:	080121b4 	.word	0x080121b4
 8010814:	080121be 	.word	0x080121be
 8010818:	0800e1c5 	.word	0x0800e1c5
 801081c:	080105cb 	.word	0x080105cb
 8010820:	080121ba 	.word	0x080121ba

08010824 <__sflush_r>:
 8010824:	898a      	ldrh	r2, [r1, #12]
 8010826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801082a:	4605      	mov	r5, r0
 801082c:	0710      	lsls	r0, r2, #28
 801082e:	460c      	mov	r4, r1
 8010830:	d458      	bmi.n	80108e4 <__sflush_r+0xc0>
 8010832:	684b      	ldr	r3, [r1, #4]
 8010834:	2b00      	cmp	r3, #0
 8010836:	dc05      	bgt.n	8010844 <__sflush_r+0x20>
 8010838:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801083a:	2b00      	cmp	r3, #0
 801083c:	dc02      	bgt.n	8010844 <__sflush_r+0x20>
 801083e:	2000      	movs	r0, #0
 8010840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010846:	2e00      	cmp	r6, #0
 8010848:	d0f9      	beq.n	801083e <__sflush_r+0x1a>
 801084a:	2300      	movs	r3, #0
 801084c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010850:	682f      	ldr	r7, [r5, #0]
 8010852:	6a21      	ldr	r1, [r4, #32]
 8010854:	602b      	str	r3, [r5, #0]
 8010856:	d032      	beq.n	80108be <__sflush_r+0x9a>
 8010858:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801085a:	89a3      	ldrh	r3, [r4, #12]
 801085c:	075a      	lsls	r2, r3, #29
 801085e:	d505      	bpl.n	801086c <__sflush_r+0x48>
 8010860:	6863      	ldr	r3, [r4, #4]
 8010862:	1ac0      	subs	r0, r0, r3
 8010864:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010866:	b10b      	cbz	r3, 801086c <__sflush_r+0x48>
 8010868:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801086a:	1ac0      	subs	r0, r0, r3
 801086c:	2300      	movs	r3, #0
 801086e:	4602      	mov	r2, r0
 8010870:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010872:	6a21      	ldr	r1, [r4, #32]
 8010874:	4628      	mov	r0, r5
 8010876:	47b0      	blx	r6
 8010878:	1c43      	adds	r3, r0, #1
 801087a:	89a3      	ldrh	r3, [r4, #12]
 801087c:	d106      	bne.n	801088c <__sflush_r+0x68>
 801087e:	6829      	ldr	r1, [r5, #0]
 8010880:	291d      	cmp	r1, #29
 8010882:	d82b      	bhi.n	80108dc <__sflush_r+0xb8>
 8010884:	4a29      	ldr	r2, [pc, #164]	; (801092c <__sflush_r+0x108>)
 8010886:	410a      	asrs	r2, r1
 8010888:	07d6      	lsls	r6, r2, #31
 801088a:	d427      	bmi.n	80108dc <__sflush_r+0xb8>
 801088c:	2200      	movs	r2, #0
 801088e:	6062      	str	r2, [r4, #4]
 8010890:	04d9      	lsls	r1, r3, #19
 8010892:	6922      	ldr	r2, [r4, #16]
 8010894:	6022      	str	r2, [r4, #0]
 8010896:	d504      	bpl.n	80108a2 <__sflush_r+0x7e>
 8010898:	1c42      	adds	r2, r0, #1
 801089a:	d101      	bne.n	80108a0 <__sflush_r+0x7c>
 801089c:	682b      	ldr	r3, [r5, #0]
 801089e:	b903      	cbnz	r3, 80108a2 <__sflush_r+0x7e>
 80108a0:	6560      	str	r0, [r4, #84]	; 0x54
 80108a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80108a4:	602f      	str	r7, [r5, #0]
 80108a6:	2900      	cmp	r1, #0
 80108a8:	d0c9      	beq.n	801083e <__sflush_r+0x1a>
 80108aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80108ae:	4299      	cmp	r1, r3
 80108b0:	d002      	beq.n	80108b8 <__sflush_r+0x94>
 80108b2:	4628      	mov	r0, r5
 80108b4:	f7ff f89e 	bl	800f9f4 <_free_r>
 80108b8:	2000      	movs	r0, #0
 80108ba:	6360      	str	r0, [r4, #52]	; 0x34
 80108bc:	e7c0      	b.n	8010840 <__sflush_r+0x1c>
 80108be:	2301      	movs	r3, #1
 80108c0:	4628      	mov	r0, r5
 80108c2:	47b0      	blx	r6
 80108c4:	1c41      	adds	r1, r0, #1
 80108c6:	d1c8      	bne.n	801085a <__sflush_r+0x36>
 80108c8:	682b      	ldr	r3, [r5, #0]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d0c5      	beq.n	801085a <__sflush_r+0x36>
 80108ce:	2b1d      	cmp	r3, #29
 80108d0:	d001      	beq.n	80108d6 <__sflush_r+0xb2>
 80108d2:	2b16      	cmp	r3, #22
 80108d4:	d101      	bne.n	80108da <__sflush_r+0xb6>
 80108d6:	602f      	str	r7, [r5, #0]
 80108d8:	e7b1      	b.n	801083e <__sflush_r+0x1a>
 80108da:	89a3      	ldrh	r3, [r4, #12]
 80108dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108e0:	81a3      	strh	r3, [r4, #12]
 80108e2:	e7ad      	b.n	8010840 <__sflush_r+0x1c>
 80108e4:	690f      	ldr	r7, [r1, #16]
 80108e6:	2f00      	cmp	r7, #0
 80108e8:	d0a9      	beq.n	801083e <__sflush_r+0x1a>
 80108ea:	0793      	lsls	r3, r2, #30
 80108ec:	680e      	ldr	r6, [r1, #0]
 80108ee:	bf08      	it	eq
 80108f0:	694b      	ldreq	r3, [r1, #20]
 80108f2:	600f      	str	r7, [r1, #0]
 80108f4:	bf18      	it	ne
 80108f6:	2300      	movne	r3, #0
 80108f8:	eba6 0807 	sub.w	r8, r6, r7
 80108fc:	608b      	str	r3, [r1, #8]
 80108fe:	f1b8 0f00 	cmp.w	r8, #0
 8010902:	dd9c      	ble.n	801083e <__sflush_r+0x1a>
 8010904:	6a21      	ldr	r1, [r4, #32]
 8010906:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010908:	4643      	mov	r3, r8
 801090a:	463a      	mov	r2, r7
 801090c:	4628      	mov	r0, r5
 801090e:	47b0      	blx	r6
 8010910:	2800      	cmp	r0, #0
 8010912:	dc06      	bgt.n	8010922 <__sflush_r+0xfe>
 8010914:	89a3      	ldrh	r3, [r4, #12]
 8010916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801091a:	81a3      	strh	r3, [r4, #12]
 801091c:	f04f 30ff 	mov.w	r0, #4294967295
 8010920:	e78e      	b.n	8010840 <__sflush_r+0x1c>
 8010922:	4407      	add	r7, r0
 8010924:	eba8 0800 	sub.w	r8, r8, r0
 8010928:	e7e9      	b.n	80108fe <__sflush_r+0xda>
 801092a:	bf00      	nop
 801092c:	dfbffffe 	.word	0xdfbffffe

08010930 <_fflush_r>:
 8010930:	b538      	push	{r3, r4, r5, lr}
 8010932:	690b      	ldr	r3, [r1, #16]
 8010934:	4605      	mov	r5, r0
 8010936:	460c      	mov	r4, r1
 8010938:	b913      	cbnz	r3, 8010940 <_fflush_r+0x10>
 801093a:	2500      	movs	r5, #0
 801093c:	4628      	mov	r0, r5
 801093e:	bd38      	pop	{r3, r4, r5, pc}
 8010940:	b118      	cbz	r0, 801094a <_fflush_r+0x1a>
 8010942:	6a03      	ldr	r3, [r0, #32]
 8010944:	b90b      	cbnz	r3, 801094a <_fflush_r+0x1a>
 8010946:	f7fe f88f 	bl	800ea68 <__sinit>
 801094a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d0f3      	beq.n	801093a <_fflush_r+0xa>
 8010952:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010954:	07d0      	lsls	r0, r2, #31
 8010956:	d404      	bmi.n	8010962 <_fflush_r+0x32>
 8010958:	0599      	lsls	r1, r3, #22
 801095a:	d402      	bmi.n	8010962 <_fflush_r+0x32>
 801095c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801095e:	f7fe f9be 	bl	800ecde <__retarget_lock_acquire_recursive>
 8010962:	4628      	mov	r0, r5
 8010964:	4621      	mov	r1, r4
 8010966:	f7ff ff5d 	bl	8010824 <__sflush_r>
 801096a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801096c:	07da      	lsls	r2, r3, #31
 801096e:	4605      	mov	r5, r0
 8010970:	d4e4      	bmi.n	801093c <_fflush_r+0xc>
 8010972:	89a3      	ldrh	r3, [r4, #12]
 8010974:	059b      	lsls	r3, r3, #22
 8010976:	d4e1      	bmi.n	801093c <_fflush_r+0xc>
 8010978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801097a:	f7fe f9b1 	bl	800ece0 <__retarget_lock_release_recursive>
 801097e:	e7dd      	b.n	801093c <_fflush_r+0xc>

08010980 <__swbuf_r>:
 8010980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010982:	460e      	mov	r6, r1
 8010984:	4614      	mov	r4, r2
 8010986:	4605      	mov	r5, r0
 8010988:	b118      	cbz	r0, 8010992 <__swbuf_r+0x12>
 801098a:	6a03      	ldr	r3, [r0, #32]
 801098c:	b90b      	cbnz	r3, 8010992 <__swbuf_r+0x12>
 801098e:	f7fe f86b 	bl	800ea68 <__sinit>
 8010992:	69a3      	ldr	r3, [r4, #24]
 8010994:	60a3      	str	r3, [r4, #8]
 8010996:	89a3      	ldrh	r3, [r4, #12]
 8010998:	071a      	lsls	r2, r3, #28
 801099a:	d525      	bpl.n	80109e8 <__swbuf_r+0x68>
 801099c:	6923      	ldr	r3, [r4, #16]
 801099e:	b31b      	cbz	r3, 80109e8 <__swbuf_r+0x68>
 80109a0:	6823      	ldr	r3, [r4, #0]
 80109a2:	6922      	ldr	r2, [r4, #16]
 80109a4:	1a98      	subs	r0, r3, r2
 80109a6:	6963      	ldr	r3, [r4, #20]
 80109a8:	b2f6      	uxtb	r6, r6
 80109aa:	4283      	cmp	r3, r0
 80109ac:	4637      	mov	r7, r6
 80109ae:	dc04      	bgt.n	80109ba <__swbuf_r+0x3a>
 80109b0:	4621      	mov	r1, r4
 80109b2:	4628      	mov	r0, r5
 80109b4:	f7ff ffbc 	bl	8010930 <_fflush_r>
 80109b8:	b9e0      	cbnz	r0, 80109f4 <__swbuf_r+0x74>
 80109ba:	68a3      	ldr	r3, [r4, #8]
 80109bc:	3b01      	subs	r3, #1
 80109be:	60a3      	str	r3, [r4, #8]
 80109c0:	6823      	ldr	r3, [r4, #0]
 80109c2:	1c5a      	adds	r2, r3, #1
 80109c4:	6022      	str	r2, [r4, #0]
 80109c6:	701e      	strb	r6, [r3, #0]
 80109c8:	6962      	ldr	r2, [r4, #20]
 80109ca:	1c43      	adds	r3, r0, #1
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d004      	beq.n	80109da <__swbuf_r+0x5a>
 80109d0:	89a3      	ldrh	r3, [r4, #12]
 80109d2:	07db      	lsls	r3, r3, #31
 80109d4:	d506      	bpl.n	80109e4 <__swbuf_r+0x64>
 80109d6:	2e0a      	cmp	r6, #10
 80109d8:	d104      	bne.n	80109e4 <__swbuf_r+0x64>
 80109da:	4621      	mov	r1, r4
 80109dc:	4628      	mov	r0, r5
 80109de:	f7ff ffa7 	bl	8010930 <_fflush_r>
 80109e2:	b938      	cbnz	r0, 80109f4 <__swbuf_r+0x74>
 80109e4:	4638      	mov	r0, r7
 80109e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109e8:	4621      	mov	r1, r4
 80109ea:	4628      	mov	r0, r5
 80109ec:	f000 f806 	bl	80109fc <__swsetup_r>
 80109f0:	2800      	cmp	r0, #0
 80109f2:	d0d5      	beq.n	80109a0 <__swbuf_r+0x20>
 80109f4:	f04f 37ff 	mov.w	r7, #4294967295
 80109f8:	e7f4      	b.n	80109e4 <__swbuf_r+0x64>
	...

080109fc <__swsetup_r>:
 80109fc:	b538      	push	{r3, r4, r5, lr}
 80109fe:	4b2a      	ldr	r3, [pc, #168]	; (8010aa8 <__swsetup_r+0xac>)
 8010a00:	4605      	mov	r5, r0
 8010a02:	6818      	ldr	r0, [r3, #0]
 8010a04:	460c      	mov	r4, r1
 8010a06:	b118      	cbz	r0, 8010a10 <__swsetup_r+0x14>
 8010a08:	6a03      	ldr	r3, [r0, #32]
 8010a0a:	b90b      	cbnz	r3, 8010a10 <__swsetup_r+0x14>
 8010a0c:	f7fe f82c 	bl	800ea68 <__sinit>
 8010a10:	89a3      	ldrh	r3, [r4, #12]
 8010a12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a16:	0718      	lsls	r0, r3, #28
 8010a18:	d422      	bmi.n	8010a60 <__swsetup_r+0x64>
 8010a1a:	06d9      	lsls	r1, r3, #27
 8010a1c:	d407      	bmi.n	8010a2e <__swsetup_r+0x32>
 8010a1e:	2309      	movs	r3, #9
 8010a20:	602b      	str	r3, [r5, #0]
 8010a22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010a26:	81a3      	strh	r3, [r4, #12]
 8010a28:	f04f 30ff 	mov.w	r0, #4294967295
 8010a2c:	e034      	b.n	8010a98 <__swsetup_r+0x9c>
 8010a2e:	0758      	lsls	r0, r3, #29
 8010a30:	d512      	bpl.n	8010a58 <__swsetup_r+0x5c>
 8010a32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a34:	b141      	cbz	r1, 8010a48 <__swsetup_r+0x4c>
 8010a36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a3a:	4299      	cmp	r1, r3
 8010a3c:	d002      	beq.n	8010a44 <__swsetup_r+0x48>
 8010a3e:	4628      	mov	r0, r5
 8010a40:	f7fe ffd8 	bl	800f9f4 <_free_r>
 8010a44:	2300      	movs	r3, #0
 8010a46:	6363      	str	r3, [r4, #52]	; 0x34
 8010a48:	89a3      	ldrh	r3, [r4, #12]
 8010a4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010a4e:	81a3      	strh	r3, [r4, #12]
 8010a50:	2300      	movs	r3, #0
 8010a52:	6063      	str	r3, [r4, #4]
 8010a54:	6923      	ldr	r3, [r4, #16]
 8010a56:	6023      	str	r3, [r4, #0]
 8010a58:	89a3      	ldrh	r3, [r4, #12]
 8010a5a:	f043 0308 	orr.w	r3, r3, #8
 8010a5e:	81a3      	strh	r3, [r4, #12]
 8010a60:	6923      	ldr	r3, [r4, #16]
 8010a62:	b94b      	cbnz	r3, 8010a78 <__swsetup_r+0x7c>
 8010a64:	89a3      	ldrh	r3, [r4, #12]
 8010a66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a6e:	d003      	beq.n	8010a78 <__swsetup_r+0x7c>
 8010a70:	4621      	mov	r1, r4
 8010a72:	4628      	mov	r0, r5
 8010a74:	f000 f8fe 	bl	8010c74 <__smakebuf_r>
 8010a78:	89a0      	ldrh	r0, [r4, #12]
 8010a7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a7e:	f010 0301 	ands.w	r3, r0, #1
 8010a82:	d00a      	beq.n	8010a9a <__swsetup_r+0x9e>
 8010a84:	2300      	movs	r3, #0
 8010a86:	60a3      	str	r3, [r4, #8]
 8010a88:	6963      	ldr	r3, [r4, #20]
 8010a8a:	425b      	negs	r3, r3
 8010a8c:	61a3      	str	r3, [r4, #24]
 8010a8e:	6923      	ldr	r3, [r4, #16]
 8010a90:	b943      	cbnz	r3, 8010aa4 <__swsetup_r+0xa8>
 8010a92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010a96:	d1c4      	bne.n	8010a22 <__swsetup_r+0x26>
 8010a98:	bd38      	pop	{r3, r4, r5, pc}
 8010a9a:	0781      	lsls	r1, r0, #30
 8010a9c:	bf58      	it	pl
 8010a9e:	6963      	ldrpl	r3, [r4, #20]
 8010aa0:	60a3      	str	r3, [r4, #8]
 8010aa2:	e7f4      	b.n	8010a8e <__swsetup_r+0x92>
 8010aa4:	2000      	movs	r0, #0
 8010aa6:	e7f7      	b.n	8010a98 <__swsetup_r+0x9c>
 8010aa8:	200001e8 	.word	0x200001e8

08010aac <memmove>:
 8010aac:	4288      	cmp	r0, r1
 8010aae:	b510      	push	{r4, lr}
 8010ab0:	eb01 0402 	add.w	r4, r1, r2
 8010ab4:	d902      	bls.n	8010abc <memmove+0x10>
 8010ab6:	4284      	cmp	r4, r0
 8010ab8:	4623      	mov	r3, r4
 8010aba:	d807      	bhi.n	8010acc <memmove+0x20>
 8010abc:	1e43      	subs	r3, r0, #1
 8010abe:	42a1      	cmp	r1, r4
 8010ac0:	d008      	beq.n	8010ad4 <memmove+0x28>
 8010ac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010ac6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010aca:	e7f8      	b.n	8010abe <memmove+0x12>
 8010acc:	4402      	add	r2, r0
 8010ace:	4601      	mov	r1, r0
 8010ad0:	428a      	cmp	r2, r1
 8010ad2:	d100      	bne.n	8010ad6 <memmove+0x2a>
 8010ad4:	bd10      	pop	{r4, pc}
 8010ad6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010ada:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010ade:	e7f7      	b.n	8010ad0 <memmove+0x24>

08010ae0 <_sbrk_r>:
 8010ae0:	b538      	push	{r3, r4, r5, lr}
 8010ae2:	4d06      	ldr	r5, [pc, #24]	; (8010afc <_sbrk_r+0x1c>)
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	4604      	mov	r4, r0
 8010ae8:	4608      	mov	r0, r1
 8010aea:	602b      	str	r3, [r5, #0]
 8010aec:	f7f1 fd54 	bl	8002598 <_sbrk>
 8010af0:	1c43      	adds	r3, r0, #1
 8010af2:	d102      	bne.n	8010afa <_sbrk_r+0x1a>
 8010af4:	682b      	ldr	r3, [r5, #0]
 8010af6:	b103      	cbz	r3, 8010afa <_sbrk_r+0x1a>
 8010af8:	6023      	str	r3, [r4, #0]
 8010afa:	bd38      	pop	{r3, r4, r5, pc}
 8010afc:	20006160 	.word	0x20006160

08010b00 <__assert_func>:
 8010b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b02:	4614      	mov	r4, r2
 8010b04:	461a      	mov	r2, r3
 8010b06:	4b09      	ldr	r3, [pc, #36]	; (8010b2c <__assert_func+0x2c>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	4605      	mov	r5, r0
 8010b0c:	68d8      	ldr	r0, [r3, #12]
 8010b0e:	b14c      	cbz	r4, 8010b24 <__assert_func+0x24>
 8010b10:	4b07      	ldr	r3, [pc, #28]	; (8010b30 <__assert_func+0x30>)
 8010b12:	9100      	str	r1, [sp, #0]
 8010b14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010b18:	4906      	ldr	r1, [pc, #24]	; (8010b34 <__assert_func+0x34>)
 8010b1a:	462b      	mov	r3, r5
 8010b1c:	f000 f872 	bl	8010c04 <fiprintf>
 8010b20:	f000 f906 	bl	8010d30 <abort>
 8010b24:	4b04      	ldr	r3, [pc, #16]	; (8010b38 <__assert_func+0x38>)
 8010b26:	461c      	mov	r4, r3
 8010b28:	e7f3      	b.n	8010b12 <__assert_func+0x12>
 8010b2a:	bf00      	nop
 8010b2c:	200001e8 	.word	0x200001e8
 8010b30:	080121cf 	.word	0x080121cf
 8010b34:	080121dc 	.word	0x080121dc
 8010b38:	0801220a 	.word	0x0801220a

08010b3c <_calloc_r>:
 8010b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b3e:	fba1 2402 	umull	r2, r4, r1, r2
 8010b42:	b94c      	cbnz	r4, 8010b58 <_calloc_r+0x1c>
 8010b44:	4611      	mov	r1, r2
 8010b46:	9201      	str	r2, [sp, #4]
 8010b48:	f7fe ffc8 	bl	800fadc <_malloc_r>
 8010b4c:	9a01      	ldr	r2, [sp, #4]
 8010b4e:	4605      	mov	r5, r0
 8010b50:	b930      	cbnz	r0, 8010b60 <_calloc_r+0x24>
 8010b52:	4628      	mov	r0, r5
 8010b54:	b003      	add	sp, #12
 8010b56:	bd30      	pop	{r4, r5, pc}
 8010b58:	220c      	movs	r2, #12
 8010b5a:	6002      	str	r2, [r0, #0]
 8010b5c:	2500      	movs	r5, #0
 8010b5e:	e7f8      	b.n	8010b52 <_calloc_r+0x16>
 8010b60:	4621      	mov	r1, r4
 8010b62:	f7fe f82c 	bl	800ebbe <memset>
 8010b66:	e7f4      	b.n	8010b52 <_calloc_r+0x16>

08010b68 <__ascii_mbtowc>:
 8010b68:	b082      	sub	sp, #8
 8010b6a:	b901      	cbnz	r1, 8010b6e <__ascii_mbtowc+0x6>
 8010b6c:	a901      	add	r1, sp, #4
 8010b6e:	b142      	cbz	r2, 8010b82 <__ascii_mbtowc+0x1a>
 8010b70:	b14b      	cbz	r3, 8010b86 <__ascii_mbtowc+0x1e>
 8010b72:	7813      	ldrb	r3, [r2, #0]
 8010b74:	600b      	str	r3, [r1, #0]
 8010b76:	7812      	ldrb	r2, [r2, #0]
 8010b78:	1e10      	subs	r0, r2, #0
 8010b7a:	bf18      	it	ne
 8010b7c:	2001      	movne	r0, #1
 8010b7e:	b002      	add	sp, #8
 8010b80:	4770      	bx	lr
 8010b82:	4610      	mov	r0, r2
 8010b84:	e7fb      	b.n	8010b7e <__ascii_mbtowc+0x16>
 8010b86:	f06f 0001 	mvn.w	r0, #1
 8010b8a:	e7f8      	b.n	8010b7e <__ascii_mbtowc+0x16>

08010b8c <_realloc_r>:
 8010b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b90:	4680      	mov	r8, r0
 8010b92:	4614      	mov	r4, r2
 8010b94:	460e      	mov	r6, r1
 8010b96:	b921      	cbnz	r1, 8010ba2 <_realloc_r+0x16>
 8010b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b9c:	4611      	mov	r1, r2
 8010b9e:	f7fe bf9d 	b.w	800fadc <_malloc_r>
 8010ba2:	b92a      	cbnz	r2, 8010bb0 <_realloc_r+0x24>
 8010ba4:	f7fe ff26 	bl	800f9f4 <_free_r>
 8010ba8:	4625      	mov	r5, r4
 8010baa:	4628      	mov	r0, r5
 8010bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bb0:	f000 f8c5 	bl	8010d3e <_malloc_usable_size_r>
 8010bb4:	4284      	cmp	r4, r0
 8010bb6:	4607      	mov	r7, r0
 8010bb8:	d802      	bhi.n	8010bc0 <_realloc_r+0x34>
 8010bba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010bbe:	d812      	bhi.n	8010be6 <_realloc_r+0x5a>
 8010bc0:	4621      	mov	r1, r4
 8010bc2:	4640      	mov	r0, r8
 8010bc4:	f7fe ff8a 	bl	800fadc <_malloc_r>
 8010bc8:	4605      	mov	r5, r0
 8010bca:	2800      	cmp	r0, #0
 8010bcc:	d0ed      	beq.n	8010baa <_realloc_r+0x1e>
 8010bce:	42bc      	cmp	r4, r7
 8010bd0:	4622      	mov	r2, r4
 8010bd2:	4631      	mov	r1, r6
 8010bd4:	bf28      	it	cs
 8010bd6:	463a      	movcs	r2, r7
 8010bd8:	f7fe f883 	bl	800ece2 <memcpy>
 8010bdc:	4631      	mov	r1, r6
 8010bde:	4640      	mov	r0, r8
 8010be0:	f7fe ff08 	bl	800f9f4 <_free_r>
 8010be4:	e7e1      	b.n	8010baa <_realloc_r+0x1e>
 8010be6:	4635      	mov	r5, r6
 8010be8:	e7df      	b.n	8010baa <_realloc_r+0x1e>

08010bea <__ascii_wctomb>:
 8010bea:	b149      	cbz	r1, 8010c00 <__ascii_wctomb+0x16>
 8010bec:	2aff      	cmp	r2, #255	; 0xff
 8010bee:	bf85      	ittet	hi
 8010bf0:	238a      	movhi	r3, #138	; 0x8a
 8010bf2:	6003      	strhi	r3, [r0, #0]
 8010bf4:	700a      	strbls	r2, [r1, #0]
 8010bf6:	f04f 30ff 	movhi.w	r0, #4294967295
 8010bfa:	bf98      	it	ls
 8010bfc:	2001      	movls	r0, #1
 8010bfe:	4770      	bx	lr
 8010c00:	4608      	mov	r0, r1
 8010c02:	4770      	bx	lr

08010c04 <fiprintf>:
 8010c04:	b40e      	push	{r1, r2, r3}
 8010c06:	b503      	push	{r0, r1, lr}
 8010c08:	4601      	mov	r1, r0
 8010c0a:	ab03      	add	r3, sp, #12
 8010c0c:	4805      	ldr	r0, [pc, #20]	; (8010c24 <fiprintf+0x20>)
 8010c0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c12:	6800      	ldr	r0, [r0, #0]
 8010c14:	9301      	str	r3, [sp, #4]
 8010c16:	f7ff fceb 	bl	80105f0 <_vfiprintf_r>
 8010c1a:	b002      	add	sp, #8
 8010c1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c20:	b003      	add	sp, #12
 8010c22:	4770      	bx	lr
 8010c24:	200001e8 	.word	0x200001e8

08010c28 <__swhatbuf_r>:
 8010c28:	b570      	push	{r4, r5, r6, lr}
 8010c2a:	460c      	mov	r4, r1
 8010c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c30:	2900      	cmp	r1, #0
 8010c32:	b096      	sub	sp, #88	; 0x58
 8010c34:	4615      	mov	r5, r2
 8010c36:	461e      	mov	r6, r3
 8010c38:	da0d      	bge.n	8010c56 <__swhatbuf_r+0x2e>
 8010c3a:	89a3      	ldrh	r3, [r4, #12]
 8010c3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010c40:	f04f 0100 	mov.w	r1, #0
 8010c44:	bf0c      	ite	eq
 8010c46:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010c4a:	2340      	movne	r3, #64	; 0x40
 8010c4c:	2000      	movs	r0, #0
 8010c4e:	6031      	str	r1, [r6, #0]
 8010c50:	602b      	str	r3, [r5, #0]
 8010c52:	b016      	add	sp, #88	; 0x58
 8010c54:	bd70      	pop	{r4, r5, r6, pc}
 8010c56:	466a      	mov	r2, sp
 8010c58:	f000 f848 	bl	8010cec <_fstat_r>
 8010c5c:	2800      	cmp	r0, #0
 8010c5e:	dbec      	blt.n	8010c3a <__swhatbuf_r+0x12>
 8010c60:	9901      	ldr	r1, [sp, #4]
 8010c62:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010c66:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010c6a:	4259      	negs	r1, r3
 8010c6c:	4159      	adcs	r1, r3
 8010c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c72:	e7eb      	b.n	8010c4c <__swhatbuf_r+0x24>

08010c74 <__smakebuf_r>:
 8010c74:	898b      	ldrh	r3, [r1, #12]
 8010c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c78:	079d      	lsls	r5, r3, #30
 8010c7a:	4606      	mov	r6, r0
 8010c7c:	460c      	mov	r4, r1
 8010c7e:	d507      	bpl.n	8010c90 <__smakebuf_r+0x1c>
 8010c80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010c84:	6023      	str	r3, [r4, #0]
 8010c86:	6123      	str	r3, [r4, #16]
 8010c88:	2301      	movs	r3, #1
 8010c8a:	6163      	str	r3, [r4, #20]
 8010c8c:	b002      	add	sp, #8
 8010c8e:	bd70      	pop	{r4, r5, r6, pc}
 8010c90:	ab01      	add	r3, sp, #4
 8010c92:	466a      	mov	r2, sp
 8010c94:	f7ff ffc8 	bl	8010c28 <__swhatbuf_r>
 8010c98:	9900      	ldr	r1, [sp, #0]
 8010c9a:	4605      	mov	r5, r0
 8010c9c:	4630      	mov	r0, r6
 8010c9e:	f7fe ff1d 	bl	800fadc <_malloc_r>
 8010ca2:	b948      	cbnz	r0, 8010cb8 <__smakebuf_r+0x44>
 8010ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ca8:	059a      	lsls	r2, r3, #22
 8010caa:	d4ef      	bmi.n	8010c8c <__smakebuf_r+0x18>
 8010cac:	f023 0303 	bic.w	r3, r3, #3
 8010cb0:	f043 0302 	orr.w	r3, r3, #2
 8010cb4:	81a3      	strh	r3, [r4, #12]
 8010cb6:	e7e3      	b.n	8010c80 <__smakebuf_r+0xc>
 8010cb8:	89a3      	ldrh	r3, [r4, #12]
 8010cba:	6020      	str	r0, [r4, #0]
 8010cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cc0:	81a3      	strh	r3, [r4, #12]
 8010cc2:	9b00      	ldr	r3, [sp, #0]
 8010cc4:	6163      	str	r3, [r4, #20]
 8010cc6:	9b01      	ldr	r3, [sp, #4]
 8010cc8:	6120      	str	r0, [r4, #16]
 8010cca:	b15b      	cbz	r3, 8010ce4 <__smakebuf_r+0x70>
 8010ccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010cd0:	4630      	mov	r0, r6
 8010cd2:	f000 f81d 	bl	8010d10 <_isatty_r>
 8010cd6:	b128      	cbz	r0, 8010ce4 <__smakebuf_r+0x70>
 8010cd8:	89a3      	ldrh	r3, [r4, #12]
 8010cda:	f023 0303 	bic.w	r3, r3, #3
 8010cde:	f043 0301 	orr.w	r3, r3, #1
 8010ce2:	81a3      	strh	r3, [r4, #12]
 8010ce4:	89a3      	ldrh	r3, [r4, #12]
 8010ce6:	431d      	orrs	r5, r3
 8010ce8:	81a5      	strh	r5, [r4, #12]
 8010cea:	e7cf      	b.n	8010c8c <__smakebuf_r+0x18>

08010cec <_fstat_r>:
 8010cec:	b538      	push	{r3, r4, r5, lr}
 8010cee:	4d07      	ldr	r5, [pc, #28]	; (8010d0c <_fstat_r+0x20>)
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	4604      	mov	r4, r0
 8010cf4:	4608      	mov	r0, r1
 8010cf6:	4611      	mov	r1, r2
 8010cf8:	602b      	str	r3, [r5, #0]
 8010cfa:	f7f1 fc24 	bl	8002546 <_fstat>
 8010cfe:	1c43      	adds	r3, r0, #1
 8010d00:	d102      	bne.n	8010d08 <_fstat_r+0x1c>
 8010d02:	682b      	ldr	r3, [r5, #0]
 8010d04:	b103      	cbz	r3, 8010d08 <_fstat_r+0x1c>
 8010d06:	6023      	str	r3, [r4, #0]
 8010d08:	bd38      	pop	{r3, r4, r5, pc}
 8010d0a:	bf00      	nop
 8010d0c:	20006160 	.word	0x20006160

08010d10 <_isatty_r>:
 8010d10:	b538      	push	{r3, r4, r5, lr}
 8010d12:	4d06      	ldr	r5, [pc, #24]	; (8010d2c <_isatty_r+0x1c>)
 8010d14:	2300      	movs	r3, #0
 8010d16:	4604      	mov	r4, r0
 8010d18:	4608      	mov	r0, r1
 8010d1a:	602b      	str	r3, [r5, #0]
 8010d1c:	f7f1 fc23 	bl	8002566 <_isatty>
 8010d20:	1c43      	adds	r3, r0, #1
 8010d22:	d102      	bne.n	8010d2a <_isatty_r+0x1a>
 8010d24:	682b      	ldr	r3, [r5, #0]
 8010d26:	b103      	cbz	r3, 8010d2a <_isatty_r+0x1a>
 8010d28:	6023      	str	r3, [r4, #0]
 8010d2a:	bd38      	pop	{r3, r4, r5, pc}
 8010d2c:	20006160 	.word	0x20006160

08010d30 <abort>:
 8010d30:	b508      	push	{r3, lr}
 8010d32:	2006      	movs	r0, #6
 8010d34:	f000 f834 	bl	8010da0 <raise>
 8010d38:	2001      	movs	r0, #1
 8010d3a:	f7f1 fbb5 	bl	80024a8 <_exit>

08010d3e <_malloc_usable_size_r>:
 8010d3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d42:	1f18      	subs	r0, r3, #4
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	bfbc      	itt	lt
 8010d48:	580b      	ldrlt	r3, [r1, r0]
 8010d4a:	18c0      	addlt	r0, r0, r3
 8010d4c:	4770      	bx	lr

08010d4e <_raise_r>:
 8010d4e:	291f      	cmp	r1, #31
 8010d50:	b538      	push	{r3, r4, r5, lr}
 8010d52:	4604      	mov	r4, r0
 8010d54:	460d      	mov	r5, r1
 8010d56:	d904      	bls.n	8010d62 <_raise_r+0x14>
 8010d58:	2316      	movs	r3, #22
 8010d5a:	6003      	str	r3, [r0, #0]
 8010d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8010d60:	bd38      	pop	{r3, r4, r5, pc}
 8010d62:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010d64:	b112      	cbz	r2, 8010d6c <_raise_r+0x1e>
 8010d66:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d6a:	b94b      	cbnz	r3, 8010d80 <_raise_r+0x32>
 8010d6c:	4620      	mov	r0, r4
 8010d6e:	f000 f831 	bl	8010dd4 <_getpid_r>
 8010d72:	462a      	mov	r2, r5
 8010d74:	4601      	mov	r1, r0
 8010d76:	4620      	mov	r0, r4
 8010d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d7c:	f000 b818 	b.w	8010db0 <_kill_r>
 8010d80:	2b01      	cmp	r3, #1
 8010d82:	d00a      	beq.n	8010d9a <_raise_r+0x4c>
 8010d84:	1c59      	adds	r1, r3, #1
 8010d86:	d103      	bne.n	8010d90 <_raise_r+0x42>
 8010d88:	2316      	movs	r3, #22
 8010d8a:	6003      	str	r3, [r0, #0]
 8010d8c:	2001      	movs	r0, #1
 8010d8e:	e7e7      	b.n	8010d60 <_raise_r+0x12>
 8010d90:	2400      	movs	r4, #0
 8010d92:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010d96:	4628      	mov	r0, r5
 8010d98:	4798      	blx	r3
 8010d9a:	2000      	movs	r0, #0
 8010d9c:	e7e0      	b.n	8010d60 <_raise_r+0x12>
	...

08010da0 <raise>:
 8010da0:	4b02      	ldr	r3, [pc, #8]	; (8010dac <raise+0xc>)
 8010da2:	4601      	mov	r1, r0
 8010da4:	6818      	ldr	r0, [r3, #0]
 8010da6:	f7ff bfd2 	b.w	8010d4e <_raise_r>
 8010daa:	bf00      	nop
 8010dac:	200001e8 	.word	0x200001e8

08010db0 <_kill_r>:
 8010db0:	b538      	push	{r3, r4, r5, lr}
 8010db2:	4d07      	ldr	r5, [pc, #28]	; (8010dd0 <_kill_r+0x20>)
 8010db4:	2300      	movs	r3, #0
 8010db6:	4604      	mov	r4, r0
 8010db8:	4608      	mov	r0, r1
 8010dba:	4611      	mov	r1, r2
 8010dbc:	602b      	str	r3, [r5, #0]
 8010dbe:	f7f1 fb63 	bl	8002488 <_kill>
 8010dc2:	1c43      	adds	r3, r0, #1
 8010dc4:	d102      	bne.n	8010dcc <_kill_r+0x1c>
 8010dc6:	682b      	ldr	r3, [r5, #0]
 8010dc8:	b103      	cbz	r3, 8010dcc <_kill_r+0x1c>
 8010dca:	6023      	str	r3, [r4, #0]
 8010dcc:	bd38      	pop	{r3, r4, r5, pc}
 8010dce:	bf00      	nop
 8010dd0:	20006160 	.word	0x20006160

08010dd4 <_getpid_r>:
 8010dd4:	f7f1 bb50 	b.w	8002478 <_getpid>

08010dd8 <pow>:
 8010dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dda:	ed2d 8b02 	vpush	{d8}
 8010dde:	eeb0 8a40 	vmov.f32	s16, s0
 8010de2:	eef0 8a60 	vmov.f32	s17, s1
 8010de6:	ec55 4b11 	vmov	r4, r5, d1
 8010dea:	f000 f871 	bl	8010ed0 <__ieee754_pow>
 8010dee:	4622      	mov	r2, r4
 8010df0:	462b      	mov	r3, r5
 8010df2:	4620      	mov	r0, r4
 8010df4:	4629      	mov	r1, r5
 8010df6:	ec57 6b10 	vmov	r6, r7, d0
 8010dfa:	f7ef fecf 	bl	8000b9c <__aeabi_dcmpun>
 8010dfe:	2800      	cmp	r0, #0
 8010e00:	d13b      	bne.n	8010e7a <pow+0xa2>
 8010e02:	ec51 0b18 	vmov	r0, r1, d8
 8010e06:	2200      	movs	r2, #0
 8010e08:	2300      	movs	r3, #0
 8010e0a:	f7ef fe95 	bl	8000b38 <__aeabi_dcmpeq>
 8010e0e:	b1b8      	cbz	r0, 8010e40 <pow+0x68>
 8010e10:	2200      	movs	r2, #0
 8010e12:	2300      	movs	r3, #0
 8010e14:	4620      	mov	r0, r4
 8010e16:	4629      	mov	r1, r5
 8010e18:	f7ef fe8e 	bl	8000b38 <__aeabi_dcmpeq>
 8010e1c:	2800      	cmp	r0, #0
 8010e1e:	d146      	bne.n	8010eae <pow+0xd6>
 8010e20:	ec45 4b10 	vmov	d0, r4, r5
 8010e24:	f000 f848 	bl	8010eb8 <finite>
 8010e28:	b338      	cbz	r0, 8010e7a <pow+0xa2>
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	4620      	mov	r0, r4
 8010e30:	4629      	mov	r1, r5
 8010e32:	f7ef fe8b 	bl	8000b4c <__aeabi_dcmplt>
 8010e36:	b300      	cbz	r0, 8010e7a <pow+0xa2>
 8010e38:	f7fd ff26 	bl	800ec88 <__errno>
 8010e3c:	2322      	movs	r3, #34	; 0x22
 8010e3e:	e01b      	b.n	8010e78 <pow+0xa0>
 8010e40:	ec47 6b10 	vmov	d0, r6, r7
 8010e44:	f000 f838 	bl	8010eb8 <finite>
 8010e48:	b9e0      	cbnz	r0, 8010e84 <pow+0xac>
 8010e4a:	eeb0 0a48 	vmov.f32	s0, s16
 8010e4e:	eef0 0a68 	vmov.f32	s1, s17
 8010e52:	f000 f831 	bl	8010eb8 <finite>
 8010e56:	b1a8      	cbz	r0, 8010e84 <pow+0xac>
 8010e58:	ec45 4b10 	vmov	d0, r4, r5
 8010e5c:	f000 f82c 	bl	8010eb8 <finite>
 8010e60:	b180      	cbz	r0, 8010e84 <pow+0xac>
 8010e62:	4632      	mov	r2, r6
 8010e64:	463b      	mov	r3, r7
 8010e66:	4630      	mov	r0, r6
 8010e68:	4639      	mov	r1, r7
 8010e6a:	f7ef fe97 	bl	8000b9c <__aeabi_dcmpun>
 8010e6e:	2800      	cmp	r0, #0
 8010e70:	d0e2      	beq.n	8010e38 <pow+0x60>
 8010e72:	f7fd ff09 	bl	800ec88 <__errno>
 8010e76:	2321      	movs	r3, #33	; 0x21
 8010e78:	6003      	str	r3, [r0, #0]
 8010e7a:	ecbd 8b02 	vpop	{d8}
 8010e7e:	ec47 6b10 	vmov	d0, r6, r7
 8010e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e84:	2200      	movs	r2, #0
 8010e86:	2300      	movs	r3, #0
 8010e88:	4630      	mov	r0, r6
 8010e8a:	4639      	mov	r1, r7
 8010e8c:	f7ef fe54 	bl	8000b38 <__aeabi_dcmpeq>
 8010e90:	2800      	cmp	r0, #0
 8010e92:	d0f2      	beq.n	8010e7a <pow+0xa2>
 8010e94:	eeb0 0a48 	vmov.f32	s0, s16
 8010e98:	eef0 0a68 	vmov.f32	s1, s17
 8010e9c:	f000 f80c 	bl	8010eb8 <finite>
 8010ea0:	2800      	cmp	r0, #0
 8010ea2:	d0ea      	beq.n	8010e7a <pow+0xa2>
 8010ea4:	ec45 4b10 	vmov	d0, r4, r5
 8010ea8:	f000 f806 	bl	8010eb8 <finite>
 8010eac:	e7c3      	b.n	8010e36 <pow+0x5e>
 8010eae:	4f01      	ldr	r7, [pc, #4]	; (8010eb4 <pow+0xdc>)
 8010eb0:	2600      	movs	r6, #0
 8010eb2:	e7e2      	b.n	8010e7a <pow+0xa2>
 8010eb4:	3ff00000 	.word	0x3ff00000

08010eb8 <finite>:
 8010eb8:	b082      	sub	sp, #8
 8010eba:	ed8d 0b00 	vstr	d0, [sp]
 8010ebe:	9801      	ldr	r0, [sp, #4]
 8010ec0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010ec4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010ec8:	0fc0      	lsrs	r0, r0, #31
 8010eca:	b002      	add	sp, #8
 8010ecc:	4770      	bx	lr
	...

08010ed0 <__ieee754_pow>:
 8010ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ed4:	ed2d 8b06 	vpush	{d8-d10}
 8010ed8:	b089      	sub	sp, #36	; 0x24
 8010eda:	ed8d 1b00 	vstr	d1, [sp]
 8010ede:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010ee2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010ee6:	ea58 0102 	orrs.w	r1, r8, r2
 8010eea:	ec57 6b10 	vmov	r6, r7, d0
 8010eee:	d115      	bne.n	8010f1c <__ieee754_pow+0x4c>
 8010ef0:	19b3      	adds	r3, r6, r6
 8010ef2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010ef6:	4152      	adcs	r2, r2
 8010ef8:	4299      	cmp	r1, r3
 8010efa:	4b89      	ldr	r3, [pc, #548]	; (8011120 <__ieee754_pow+0x250>)
 8010efc:	4193      	sbcs	r3, r2
 8010efe:	f080 84d1 	bcs.w	80118a4 <__ieee754_pow+0x9d4>
 8010f02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f06:	4630      	mov	r0, r6
 8010f08:	4639      	mov	r1, r7
 8010f0a:	f7ef f9f7 	bl	80002fc <__adddf3>
 8010f0e:	ec41 0b10 	vmov	d0, r0, r1
 8010f12:	b009      	add	sp, #36	; 0x24
 8010f14:	ecbd 8b06 	vpop	{d8-d10}
 8010f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f1c:	4b81      	ldr	r3, [pc, #516]	; (8011124 <__ieee754_pow+0x254>)
 8010f1e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010f22:	429c      	cmp	r4, r3
 8010f24:	ee10 aa10 	vmov	sl, s0
 8010f28:	463d      	mov	r5, r7
 8010f2a:	dc06      	bgt.n	8010f3a <__ieee754_pow+0x6a>
 8010f2c:	d101      	bne.n	8010f32 <__ieee754_pow+0x62>
 8010f2e:	2e00      	cmp	r6, #0
 8010f30:	d1e7      	bne.n	8010f02 <__ieee754_pow+0x32>
 8010f32:	4598      	cmp	r8, r3
 8010f34:	dc01      	bgt.n	8010f3a <__ieee754_pow+0x6a>
 8010f36:	d10f      	bne.n	8010f58 <__ieee754_pow+0x88>
 8010f38:	b172      	cbz	r2, 8010f58 <__ieee754_pow+0x88>
 8010f3a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8010f3e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8010f42:	ea55 050a 	orrs.w	r5, r5, sl
 8010f46:	d1dc      	bne.n	8010f02 <__ieee754_pow+0x32>
 8010f48:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010f4c:	18db      	adds	r3, r3, r3
 8010f4e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8010f52:	4152      	adcs	r2, r2
 8010f54:	429d      	cmp	r5, r3
 8010f56:	e7d0      	b.n	8010efa <__ieee754_pow+0x2a>
 8010f58:	2d00      	cmp	r5, #0
 8010f5a:	da3b      	bge.n	8010fd4 <__ieee754_pow+0x104>
 8010f5c:	4b72      	ldr	r3, [pc, #456]	; (8011128 <__ieee754_pow+0x258>)
 8010f5e:	4598      	cmp	r8, r3
 8010f60:	dc51      	bgt.n	8011006 <__ieee754_pow+0x136>
 8010f62:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010f66:	4598      	cmp	r8, r3
 8010f68:	f340 84ab 	ble.w	80118c2 <__ieee754_pow+0x9f2>
 8010f6c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010f70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010f74:	2b14      	cmp	r3, #20
 8010f76:	dd0f      	ble.n	8010f98 <__ieee754_pow+0xc8>
 8010f78:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010f7c:	fa22 f103 	lsr.w	r1, r2, r3
 8010f80:	fa01 f303 	lsl.w	r3, r1, r3
 8010f84:	4293      	cmp	r3, r2
 8010f86:	f040 849c 	bne.w	80118c2 <__ieee754_pow+0x9f2>
 8010f8a:	f001 0101 	and.w	r1, r1, #1
 8010f8e:	f1c1 0302 	rsb	r3, r1, #2
 8010f92:	9304      	str	r3, [sp, #16]
 8010f94:	b182      	cbz	r2, 8010fb8 <__ieee754_pow+0xe8>
 8010f96:	e05f      	b.n	8011058 <__ieee754_pow+0x188>
 8010f98:	2a00      	cmp	r2, #0
 8010f9a:	d15b      	bne.n	8011054 <__ieee754_pow+0x184>
 8010f9c:	f1c3 0314 	rsb	r3, r3, #20
 8010fa0:	fa48 f103 	asr.w	r1, r8, r3
 8010fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8010fa8:	4543      	cmp	r3, r8
 8010faa:	f040 8487 	bne.w	80118bc <__ieee754_pow+0x9ec>
 8010fae:	f001 0101 	and.w	r1, r1, #1
 8010fb2:	f1c1 0302 	rsb	r3, r1, #2
 8010fb6:	9304      	str	r3, [sp, #16]
 8010fb8:	4b5c      	ldr	r3, [pc, #368]	; (801112c <__ieee754_pow+0x25c>)
 8010fba:	4598      	cmp	r8, r3
 8010fbc:	d132      	bne.n	8011024 <__ieee754_pow+0x154>
 8010fbe:	f1b9 0f00 	cmp.w	r9, #0
 8010fc2:	f280 8477 	bge.w	80118b4 <__ieee754_pow+0x9e4>
 8010fc6:	4959      	ldr	r1, [pc, #356]	; (801112c <__ieee754_pow+0x25c>)
 8010fc8:	4632      	mov	r2, r6
 8010fca:	463b      	mov	r3, r7
 8010fcc:	2000      	movs	r0, #0
 8010fce:	f7ef fc75 	bl	80008bc <__aeabi_ddiv>
 8010fd2:	e79c      	b.n	8010f0e <__ieee754_pow+0x3e>
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	9304      	str	r3, [sp, #16]
 8010fd8:	2a00      	cmp	r2, #0
 8010fda:	d13d      	bne.n	8011058 <__ieee754_pow+0x188>
 8010fdc:	4b51      	ldr	r3, [pc, #324]	; (8011124 <__ieee754_pow+0x254>)
 8010fde:	4598      	cmp	r8, r3
 8010fe0:	d1ea      	bne.n	8010fb8 <__ieee754_pow+0xe8>
 8010fe2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010fe6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010fea:	ea53 030a 	orrs.w	r3, r3, sl
 8010fee:	f000 8459 	beq.w	80118a4 <__ieee754_pow+0x9d4>
 8010ff2:	4b4f      	ldr	r3, [pc, #316]	; (8011130 <__ieee754_pow+0x260>)
 8010ff4:	429c      	cmp	r4, r3
 8010ff6:	dd08      	ble.n	801100a <__ieee754_pow+0x13a>
 8010ff8:	f1b9 0f00 	cmp.w	r9, #0
 8010ffc:	f2c0 8456 	blt.w	80118ac <__ieee754_pow+0x9dc>
 8011000:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011004:	e783      	b.n	8010f0e <__ieee754_pow+0x3e>
 8011006:	2302      	movs	r3, #2
 8011008:	e7e5      	b.n	8010fd6 <__ieee754_pow+0x106>
 801100a:	f1b9 0f00 	cmp.w	r9, #0
 801100e:	f04f 0000 	mov.w	r0, #0
 8011012:	f04f 0100 	mov.w	r1, #0
 8011016:	f6bf af7a 	bge.w	8010f0e <__ieee754_pow+0x3e>
 801101a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801101e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011022:	e774      	b.n	8010f0e <__ieee754_pow+0x3e>
 8011024:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011028:	d106      	bne.n	8011038 <__ieee754_pow+0x168>
 801102a:	4632      	mov	r2, r6
 801102c:	463b      	mov	r3, r7
 801102e:	4630      	mov	r0, r6
 8011030:	4639      	mov	r1, r7
 8011032:	f7ef fb19 	bl	8000668 <__aeabi_dmul>
 8011036:	e76a      	b.n	8010f0e <__ieee754_pow+0x3e>
 8011038:	4b3e      	ldr	r3, [pc, #248]	; (8011134 <__ieee754_pow+0x264>)
 801103a:	4599      	cmp	r9, r3
 801103c:	d10c      	bne.n	8011058 <__ieee754_pow+0x188>
 801103e:	2d00      	cmp	r5, #0
 8011040:	db0a      	blt.n	8011058 <__ieee754_pow+0x188>
 8011042:	ec47 6b10 	vmov	d0, r6, r7
 8011046:	b009      	add	sp, #36	; 0x24
 8011048:	ecbd 8b06 	vpop	{d8-d10}
 801104c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011050:	f000 bd20 	b.w	8011a94 <__ieee754_sqrt>
 8011054:	2300      	movs	r3, #0
 8011056:	9304      	str	r3, [sp, #16]
 8011058:	ec47 6b10 	vmov	d0, r6, r7
 801105c:	f000 fc62 	bl	8011924 <fabs>
 8011060:	ec51 0b10 	vmov	r0, r1, d0
 8011064:	f1ba 0f00 	cmp.w	sl, #0
 8011068:	d129      	bne.n	80110be <__ieee754_pow+0x1ee>
 801106a:	b124      	cbz	r4, 8011076 <__ieee754_pow+0x1a6>
 801106c:	4b2f      	ldr	r3, [pc, #188]	; (801112c <__ieee754_pow+0x25c>)
 801106e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8011072:	429a      	cmp	r2, r3
 8011074:	d123      	bne.n	80110be <__ieee754_pow+0x1ee>
 8011076:	f1b9 0f00 	cmp.w	r9, #0
 801107a:	da05      	bge.n	8011088 <__ieee754_pow+0x1b8>
 801107c:	4602      	mov	r2, r0
 801107e:	460b      	mov	r3, r1
 8011080:	2000      	movs	r0, #0
 8011082:	492a      	ldr	r1, [pc, #168]	; (801112c <__ieee754_pow+0x25c>)
 8011084:	f7ef fc1a 	bl	80008bc <__aeabi_ddiv>
 8011088:	2d00      	cmp	r5, #0
 801108a:	f6bf af40 	bge.w	8010f0e <__ieee754_pow+0x3e>
 801108e:	9b04      	ldr	r3, [sp, #16]
 8011090:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011094:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011098:	431c      	orrs	r4, r3
 801109a:	d108      	bne.n	80110ae <__ieee754_pow+0x1de>
 801109c:	4602      	mov	r2, r0
 801109e:	460b      	mov	r3, r1
 80110a0:	4610      	mov	r0, r2
 80110a2:	4619      	mov	r1, r3
 80110a4:	f7ef f928 	bl	80002f8 <__aeabi_dsub>
 80110a8:	4602      	mov	r2, r0
 80110aa:	460b      	mov	r3, r1
 80110ac:	e78f      	b.n	8010fce <__ieee754_pow+0xfe>
 80110ae:	9b04      	ldr	r3, [sp, #16]
 80110b0:	2b01      	cmp	r3, #1
 80110b2:	f47f af2c 	bne.w	8010f0e <__ieee754_pow+0x3e>
 80110b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80110ba:	4619      	mov	r1, r3
 80110bc:	e727      	b.n	8010f0e <__ieee754_pow+0x3e>
 80110be:	0feb      	lsrs	r3, r5, #31
 80110c0:	3b01      	subs	r3, #1
 80110c2:	9306      	str	r3, [sp, #24]
 80110c4:	9a06      	ldr	r2, [sp, #24]
 80110c6:	9b04      	ldr	r3, [sp, #16]
 80110c8:	4313      	orrs	r3, r2
 80110ca:	d102      	bne.n	80110d2 <__ieee754_pow+0x202>
 80110cc:	4632      	mov	r2, r6
 80110ce:	463b      	mov	r3, r7
 80110d0:	e7e6      	b.n	80110a0 <__ieee754_pow+0x1d0>
 80110d2:	4b19      	ldr	r3, [pc, #100]	; (8011138 <__ieee754_pow+0x268>)
 80110d4:	4598      	cmp	r8, r3
 80110d6:	f340 80fb 	ble.w	80112d0 <__ieee754_pow+0x400>
 80110da:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80110de:	4598      	cmp	r8, r3
 80110e0:	4b13      	ldr	r3, [pc, #76]	; (8011130 <__ieee754_pow+0x260>)
 80110e2:	dd0c      	ble.n	80110fe <__ieee754_pow+0x22e>
 80110e4:	429c      	cmp	r4, r3
 80110e6:	dc0f      	bgt.n	8011108 <__ieee754_pow+0x238>
 80110e8:	f1b9 0f00 	cmp.w	r9, #0
 80110ec:	da0f      	bge.n	801110e <__ieee754_pow+0x23e>
 80110ee:	2000      	movs	r0, #0
 80110f0:	b009      	add	sp, #36	; 0x24
 80110f2:	ecbd 8b06 	vpop	{d8-d10}
 80110f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110fa:	f000 bcc2 	b.w	8011a82 <__math_oflow>
 80110fe:	429c      	cmp	r4, r3
 8011100:	dbf2      	blt.n	80110e8 <__ieee754_pow+0x218>
 8011102:	4b0a      	ldr	r3, [pc, #40]	; (801112c <__ieee754_pow+0x25c>)
 8011104:	429c      	cmp	r4, r3
 8011106:	dd19      	ble.n	801113c <__ieee754_pow+0x26c>
 8011108:	f1b9 0f00 	cmp.w	r9, #0
 801110c:	dcef      	bgt.n	80110ee <__ieee754_pow+0x21e>
 801110e:	2000      	movs	r0, #0
 8011110:	b009      	add	sp, #36	; 0x24
 8011112:	ecbd 8b06 	vpop	{d8-d10}
 8011116:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801111a:	f000 bca9 	b.w	8011a70 <__math_uflow>
 801111e:	bf00      	nop
 8011120:	fff00000 	.word	0xfff00000
 8011124:	7ff00000 	.word	0x7ff00000
 8011128:	433fffff 	.word	0x433fffff
 801112c:	3ff00000 	.word	0x3ff00000
 8011130:	3fefffff 	.word	0x3fefffff
 8011134:	3fe00000 	.word	0x3fe00000
 8011138:	41e00000 	.word	0x41e00000
 801113c:	4b60      	ldr	r3, [pc, #384]	; (80112c0 <__ieee754_pow+0x3f0>)
 801113e:	2200      	movs	r2, #0
 8011140:	f7ef f8da 	bl	80002f8 <__aeabi_dsub>
 8011144:	a354      	add	r3, pc, #336	; (adr r3, 8011298 <__ieee754_pow+0x3c8>)
 8011146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801114a:	4604      	mov	r4, r0
 801114c:	460d      	mov	r5, r1
 801114e:	f7ef fa8b 	bl	8000668 <__aeabi_dmul>
 8011152:	a353      	add	r3, pc, #332	; (adr r3, 80112a0 <__ieee754_pow+0x3d0>)
 8011154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011158:	4606      	mov	r6, r0
 801115a:	460f      	mov	r7, r1
 801115c:	4620      	mov	r0, r4
 801115e:	4629      	mov	r1, r5
 8011160:	f7ef fa82 	bl	8000668 <__aeabi_dmul>
 8011164:	4b57      	ldr	r3, [pc, #348]	; (80112c4 <__ieee754_pow+0x3f4>)
 8011166:	4682      	mov	sl, r0
 8011168:	468b      	mov	fp, r1
 801116a:	2200      	movs	r2, #0
 801116c:	4620      	mov	r0, r4
 801116e:	4629      	mov	r1, r5
 8011170:	f7ef fa7a 	bl	8000668 <__aeabi_dmul>
 8011174:	4602      	mov	r2, r0
 8011176:	460b      	mov	r3, r1
 8011178:	a14b      	add	r1, pc, #300	; (adr r1, 80112a8 <__ieee754_pow+0x3d8>)
 801117a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801117e:	f7ef f8bb 	bl	80002f8 <__aeabi_dsub>
 8011182:	4622      	mov	r2, r4
 8011184:	462b      	mov	r3, r5
 8011186:	f7ef fa6f 	bl	8000668 <__aeabi_dmul>
 801118a:	4602      	mov	r2, r0
 801118c:	460b      	mov	r3, r1
 801118e:	2000      	movs	r0, #0
 8011190:	494d      	ldr	r1, [pc, #308]	; (80112c8 <__ieee754_pow+0x3f8>)
 8011192:	f7ef f8b1 	bl	80002f8 <__aeabi_dsub>
 8011196:	4622      	mov	r2, r4
 8011198:	4680      	mov	r8, r0
 801119a:	4689      	mov	r9, r1
 801119c:	462b      	mov	r3, r5
 801119e:	4620      	mov	r0, r4
 80111a0:	4629      	mov	r1, r5
 80111a2:	f7ef fa61 	bl	8000668 <__aeabi_dmul>
 80111a6:	4602      	mov	r2, r0
 80111a8:	460b      	mov	r3, r1
 80111aa:	4640      	mov	r0, r8
 80111ac:	4649      	mov	r1, r9
 80111ae:	f7ef fa5b 	bl	8000668 <__aeabi_dmul>
 80111b2:	a33f      	add	r3, pc, #252	; (adr r3, 80112b0 <__ieee754_pow+0x3e0>)
 80111b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111b8:	f7ef fa56 	bl	8000668 <__aeabi_dmul>
 80111bc:	4602      	mov	r2, r0
 80111be:	460b      	mov	r3, r1
 80111c0:	4650      	mov	r0, sl
 80111c2:	4659      	mov	r1, fp
 80111c4:	f7ef f898 	bl	80002f8 <__aeabi_dsub>
 80111c8:	4602      	mov	r2, r0
 80111ca:	460b      	mov	r3, r1
 80111cc:	4680      	mov	r8, r0
 80111ce:	4689      	mov	r9, r1
 80111d0:	4630      	mov	r0, r6
 80111d2:	4639      	mov	r1, r7
 80111d4:	f7ef f892 	bl	80002fc <__adddf3>
 80111d8:	2000      	movs	r0, #0
 80111da:	4632      	mov	r2, r6
 80111dc:	463b      	mov	r3, r7
 80111de:	4604      	mov	r4, r0
 80111e0:	460d      	mov	r5, r1
 80111e2:	f7ef f889 	bl	80002f8 <__aeabi_dsub>
 80111e6:	4602      	mov	r2, r0
 80111e8:	460b      	mov	r3, r1
 80111ea:	4640      	mov	r0, r8
 80111ec:	4649      	mov	r1, r9
 80111ee:	f7ef f883 	bl	80002f8 <__aeabi_dsub>
 80111f2:	9b04      	ldr	r3, [sp, #16]
 80111f4:	9a06      	ldr	r2, [sp, #24]
 80111f6:	3b01      	subs	r3, #1
 80111f8:	4313      	orrs	r3, r2
 80111fa:	4682      	mov	sl, r0
 80111fc:	468b      	mov	fp, r1
 80111fe:	f040 81e7 	bne.w	80115d0 <__ieee754_pow+0x700>
 8011202:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80112b8 <__ieee754_pow+0x3e8>
 8011206:	eeb0 8a47 	vmov.f32	s16, s14
 801120a:	eef0 8a67 	vmov.f32	s17, s15
 801120e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011212:	2600      	movs	r6, #0
 8011214:	4632      	mov	r2, r6
 8011216:	463b      	mov	r3, r7
 8011218:	e9dd 0100 	ldrd	r0, r1, [sp]
 801121c:	f7ef f86c 	bl	80002f8 <__aeabi_dsub>
 8011220:	4622      	mov	r2, r4
 8011222:	462b      	mov	r3, r5
 8011224:	f7ef fa20 	bl	8000668 <__aeabi_dmul>
 8011228:	e9dd 2300 	ldrd	r2, r3, [sp]
 801122c:	4680      	mov	r8, r0
 801122e:	4689      	mov	r9, r1
 8011230:	4650      	mov	r0, sl
 8011232:	4659      	mov	r1, fp
 8011234:	f7ef fa18 	bl	8000668 <__aeabi_dmul>
 8011238:	4602      	mov	r2, r0
 801123a:	460b      	mov	r3, r1
 801123c:	4640      	mov	r0, r8
 801123e:	4649      	mov	r1, r9
 8011240:	f7ef f85c 	bl	80002fc <__adddf3>
 8011244:	4632      	mov	r2, r6
 8011246:	463b      	mov	r3, r7
 8011248:	4680      	mov	r8, r0
 801124a:	4689      	mov	r9, r1
 801124c:	4620      	mov	r0, r4
 801124e:	4629      	mov	r1, r5
 8011250:	f7ef fa0a 	bl	8000668 <__aeabi_dmul>
 8011254:	460b      	mov	r3, r1
 8011256:	4604      	mov	r4, r0
 8011258:	460d      	mov	r5, r1
 801125a:	4602      	mov	r2, r0
 801125c:	4649      	mov	r1, r9
 801125e:	4640      	mov	r0, r8
 8011260:	f7ef f84c 	bl	80002fc <__adddf3>
 8011264:	4b19      	ldr	r3, [pc, #100]	; (80112cc <__ieee754_pow+0x3fc>)
 8011266:	4299      	cmp	r1, r3
 8011268:	ec45 4b19 	vmov	d9, r4, r5
 801126c:	4606      	mov	r6, r0
 801126e:	460f      	mov	r7, r1
 8011270:	468b      	mov	fp, r1
 8011272:	f340 82f0 	ble.w	8011856 <__ieee754_pow+0x986>
 8011276:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801127a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801127e:	4303      	orrs	r3, r0
 8011280:	f000 81e4 	beq.w	801164c <__ieee754_pow+0x77c>
 8011284:	ec51 0b18 	vmov	r0, r1, d8
 8011288:	2200      	movs	r2, #0
 801128a:	2300      	movs	r3, #0
 801128c:	f7ef fc5e 	bl	8000b4c <__aeabi_dcmplt>
 8011290:	3800      	subs	r0, #0
 8011292:	bf18      	it	ne
 8011294:	2001      	movne	r0, #1
 8011296:	e72b      	b.n	80110f0 <__ieee754_pow+0x220>
 8011298:	60000000 	.word	0x60000000
 801129c:	3ff71547 	.word	0x3ff71547
 80112a0:	f85ddf44 	.word	0xf85ddf44
 80112a4:	3e54ae0b 	.word	0x3e54ae0b
 80112a8:	55555555 	.word	0x55555555
 80112ac:	3fd55555 	.word	0x3fd55555
 80112b0:	652b82fe 	.word	0x652b82fe
 80112b4:	3ff71547 	.word	0x3ff71547
 80112b8:	00000000 	.word	0x00000000
 80112bc:	bff00000 	.word	0xbff00000
 80112c0:	3ff00000 	.word	0x3ff00000
 80112c4:	3fd00000 	.word	0x3fd00000
 80112c8:	3fe00000 	.word	0x3fe00000
 80112cc:	408fffff 	.word	0x408fffff
 80112d0:	4bd5      	ldr	r3, [pc, #852]	; (8011628 <__ieee754_pow+0x758>)
 80112d2:	402b      	ands	r3, r5
 80112d4:	2200      	movs	r2, #0
 80112d6:	b92b      	cbnz	r3, 80112e4 <__ieee754_pow+0x414>
 80112d8:	4bd4      	ldr	r3, [pc, #848]	; (801162c <__ieee754_pow+0x75c>)
 80112da:	f7ef f9c5 	bl	8000668 <__aeabi_dmul>
 80112de:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80112e2:	460c      	mov	r4, r1
 80112e4:	1523      	asrs	r3, r4, #20
 80112e6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80112ea:	4413      	add	r3, r2
 80112ec:	9305      	str	r3, [sp, #20]
 80112ee:	4bd0      	ldr	r3, [pc, #832]	; (8011630 <__ieee754_pow+0x760>)
 80112f0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80112f4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80112f8:	429c      	cmp	r4, r3
 80112fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80112fe:	dd08      	ble.n	8011312 <__ieee754_pow+0x442>
 8011300:	4bcc      	ldr	r3, [pc, #816]	; (8011634 <__ieee754_pow+0x764>)
 8011302:	429c      	cmp	r4, r3
 8011304:	f340 8162 	ble.w	80115cc <__ieee754_pow+0x6fc>
 8011308:	9b05      	ldr	r3, [sp, #20]
 801130a:	3301      	adds	r3, #1
 801130c:	9305      	str	r3, [sp, #20]
 801130e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011312:	2400      	movs	r4, #0
 8011314:	00e3      	lsls	r3, r4, #3
 8011316:	9307      	str	r3, [sp, #28]
 8011318:	4bc7      	ldr	r3, [pc, #796]	; (8011638 <__ieee754_pow+0x768>)
 801131a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801131e:	ed93 7b00 	vldr	d7, [r3]
 8011322:	4629      	mov	r1, r5
 8011324:	ec53 2b17 	vmov	r2, r3, d7
 8011328:	eeb0 9a47 	vmov.f32	s18, s14
 801132c:	eef0 9a67 	vmov.f32	s19, s15
 8011330:	4682      	mov	sl, r0
 8011332:	f7ee ffe1 	bl	80002f8 <__aeabi_dsub>
 8011336:	4652      	mov	r2, sl
 8011338:	4606      	mov	r6, r0
 801133a:	460f      	mov	r7, r1
 801133c:	462b      	mov	r3, r5
 801133e:	ec51 0b19 	vmov	r0, r1, d9
 8011342:	f7ee ffdb 	bl	80002fc <__adddf3>
 8011346:	4602      	mov	r2, r0
 8011348:	460b      	mov	r3, r1
 801134a:	2000      	movs	r0, #0
 801134c:	49bb      	ldr	r1, [pc, #748]	; (801163c <__ieee754_pow+0x76c>)
 801134e:	f7ef fab5 	bl	80008bc <__aeabi_ddiv>
 8011352:	ec41 0b1a 	vmov	d10, r0, r1
 8011356:	4602      	mov	r2, r0
 8011358:	460b      	mov	r3, r1
 801135a:	4630      	mov	r0, r6
 801135c:	4639      	mov	r1, r7
 801135e:	f7ef f983 	bl	8000668 <__aeabi_dmul>
 8011362:	2300      	movs	r3, #0
 8011364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011368:	9302      	str	r3, [sp, #8]
 801136a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801136e:	46ab      	mov	fp, r5
 8011370:	106d      	asrs	r5, r5, #1
 8011372:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011376:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801137a:	ec41 0b18 	vmov	d8, r0, r1
 801137e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011382:	2200      	movs	r2, #0
 8011384:	4640      	mov	r0, r8
 8011386:	4649      	mov	r1, r9
 8011388:	4614      	mov	r4, r2
 801138a:	461d      	mov	r5, r3
 801138c:	f7ef f96c 	bl	8000668 <__aeabi_dmul>
 8011390:	4602      	mov	r2, r0
 8011392:	460b      	mov	r3, r1
 8011394:	4630      	mov	r0, r6
 8011396:	4639      	mov	r1, r7
 8011398:	f7ee ffae 	bl	80002f8 <__aeabi_dsub>
 801139c:	ec53 2b19 	vmov	r2, r3, d9
 80113a0:	4606      	mov	r6, r0
 80113a2:	460f      	mov	r7, r1
 80113a4:	4620      	mov	r0, r4
 80113a6:	4629      	mov	r1, r5
 80113a8:	f7ee ffa6 	bl	80002f8 <__aeabi_dsub>
 80113ac:	4602      	mov	r2, r0
 80113ae:	460b      	mov	r3, r1
 80113b0:	4650      	mov	r0, sl
 80113b2:	4659      	mov	r1, fp
 80113b4:	f7ee ffa0 	bl	80002f8 <__aeabi_dsub>
 80113b8:	4642      	mov	r2, r8
 80113ba:	464b      	mov	r3, r9
 80113bc:	f7ef f954 	bl	8000668 <__aeabi_dmul>
 80113c0:	4602      	mov	r2, r0
 80113c2:	460b      	mov	r3, r1
 80113c4:	4630      	mov	r0, r6
 80113c6:	4639      	mov	r1, r7
 80113c8:	f7ee ff96 	bl	80002f8 <__aeabi_dsub>
 80113cc:	ec53 2b1a 	vmov	r2, r3, d10
 80113d0:	f7ef f94a 	bl	8000668 <__aeabi_dmul>
 80113d4:	ec53 2b18 	vmov	r2, r3, d8
 80113d8:	ec41 0b19 	vmov	d9, r0, r1
 80113dc:	ec51 0b18 	vmov	r0, r1, d8
 80113e0:	f7ef f942 	bl	8000668 <__aeabi_dmul>
 80113e4:	a37c      	add	r3, pc, #496	; (adr r3, 80115d8 <__ieee754_pow+0x708>)
 80113e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ea:	4604      	mov	r4, r0
 80113ec:	460d      	mov	r5, r1
 80113ee:	f7ef f93b 	bl	8000668 <__aeabi_dmul>
 80113f2:	a37b      	add	r3, pc, #492	; (adr r3, 80115e0 <__ieee754_pow+0x710>)
 80113f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113f8:	f7ee ff80 	bl	80002fc <__adddf3>
 80113fc:	4622      	mov	r2, r4
 80113fe:	462b      	mov	r3, r5
 8011400:	f7ef f932 	bl	8000668 <__aeabi_dmul>
 8011404:	a378      	add	r3, pc, #480	; (adr r3, 80115e8 <__ieee754_pow+0x718>)
 8011406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801140a:	f7ee ff77 	bl	80002fc <__adddf3>
 801140e:	4622      	mov	r2, r4
 8011410:	462b      	mov	r3, r5
 8011412:	f7ef f929 	bl	8000668 <__aeabi_dmul>
 8011416:	a376      	add	r3, pc, #472	; (adr r3, 80115f0 <__ieee754_pow+0x720>)
 8011418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801141c:	f7ee ff6e 	bl	80002fc <__adddf3>
 8011420:	4622      	mov	r2, r4
 8011422:	462b      	mov	r3, r5
 8011424:	f7ef f920 	bl	8000668 <__aeabi_dmul>
 8011428:	a373      	add	r3, pc, #460	; (adr r3, 80115f8 <__ieee754_pow+0x728>)
 801142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801142e:	f7ee ff65 	bl	80002fc <__adddf3>
 8011432:	4622      	mov	r2, r4
 8011434:	462b      	mov	r3, r5
 8011436:	f7ef f917 	bl	8000668 <__aeabi_dmul>
 801143a:	a371      	add	r3, pc, #452	; (adr r3, 8011600 <__ieee754_pow+0x730>)
 801143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011440:	f7ee ff5c 	bl	80002fc <__adddf3>
 8011444:	4622      	mov	r2, r4
 8011446:	4606      	mov	r6, r0
 8011448:	460f      	mov	r7, r1
 801144a:	462b      	mov	r3, r5
 801144c:	4620      	mov	r0, r4
 801144e:	4629      	mov	r1, r5
 8011450:	f7ef f90a 	bl	8000668 <__aeabi_dmul>
 8011454:	4602      	mov	r2, r0
 8011456:	460b      	mov	r3, r1
 8011458:	4630      	mov	r0, r6
 801145a:	4639      	mov	r1, r7
 801145c:	f7ef f904 	bl	8000668 <__aeabi_dmul>
 8011460:	4642      	mov	r2, r8
 8011462:	4604      	mov	r4, r0
 8011464:	460d      	mov	r5, r1
 8011466:	464b      	mov	r3, r9
 8011468:	ec51 0b18 	vmov	r0, r1, d8
 801146c:	f7ee ff46 	bl	80002fc <__adddf3>
 8011470:	ec53 2b19 	vmov	r2, r3, d9
 8011474:	f7ef f8f8 	bl	8000668 <__aeabi_dmul>
 8011478:	4622      	mov	r2, r4
 801147a:	462b      	mov	r3, r5
 801147c:	f7ee ff3e 	bl	80002fc <__adddf3>
 8011480:	4642      	mov	r2, r8
 8011482:	4682      	mov	sl, r0
 8011484:	468b      	mov	fp, r1
 8011486:	464b      	mov	r3, r9
 8011488:	4640      	mov	r0, r8
 801148a:	4649      	mov	r1, r9
 801148c:	f7ef f8ec 	bl	8000668 <__aeabi_dmul>
 8011490:	4b6b      	ldr	r3, [pc, #428]	; (8011640 <__ieee754_pow+0x770>)
 8011492:	2200      	movs	r2, #0
 8011494:	4606      	mov	r6, r0
 8011496:	460f      	mov	r7, r1
 8011498:	f7ee ff30 	bl	80002fc <__adddf3>
 801149c:	4652      	mov	r2, sl
 801149e:	465b      	mov	r3, fp
 80114a0:	f7ee ff2c 	bl	80002fc <__adddf3>
 80114a4:	2000      	movs	r0, #0
 80114a6:	4604      	mov	r4, r0
 80114a8:	460d      	mov	r5, r1
 80114aa:	4602      	mov	r2, r0
 80114ac:	460b      	mov	r3, r1
 80114ae:	4640      	mov	r0, r8
 80114b0:	4649      	mov	r1, r9
 80114b2:	f7ef f8d9 	bl	8000668 <__aeabi_dmul>
 80114b6:	4b62      	ldr	r3, [pc, #392]	; (8011640 <__ieee754_pow+0x770>)
 80114b8:	4680      	mov	r8, r0
 80114ba:	4689      	mov	r9, r1
 80114bc:	2200      	movs	r2, #0
 80114be:	4620      	mov	r0, r4
 80114c0:	4629      	mov	r1, r5
 80114c2:	f7ee ff19 	bl	80002f8 <__aeabi_dsub>
 80114c6:	4632      	mov	r2, r6
 80114c8:	463b      	mov	r3, r7
 80114ca:	f7ee ff15 	bl	80002f8 <__aeabi_dsub>
 80114ce:	4602      	mov	r2, r0
 80114d0:	460b      	mov	r3, r1
 80114d2:	4650      	mov	r0, sl
 80114d4:	4659      	mov	r1, fp
 80114d6:	f7ee ff0f 	bl	80002f8 <__aeabi_dsub>
 80114da:	ec53 2b18 	vmov	r2, r3, d8
 80114de:	f7ef f8c3 	bl	8000668 <__aeabi_dmul>
 80114e2:	4622      	mov	r2, r4
 80114e4:	4606      	mov	r6, r0
 80114e6:	460f      	mov	r7, r1
 80114e8:	462b      	mov	r3, r5
 80114ea:	ec51 0b19 	vmov	r0, r1, d9
 80114ee:	f7ef f8bb 	bl	8000668 <__aeabi_dmul>
 80114f2:	4602      	mov	r2, r0
 80114f4:	460b      	mov	r3, r1
 80114f6:	4630      	mov	r0, r6
 80114f8:	4639      	mov	r1, r7
 80114fa:	f7ee feff 	bl	80002fc <__adddf3>
 80114fe:	4606      	mov	r6, r0
 8011500:	460f      	mov	r7, r1
 8011502:	4602      	mov	r2, r0
 8011504:	460b      	mov	r3, r1
 8011506:	4640      	mov	r0, r8
 8011508:	4649      	mov	r1, r9
 801150a:	f7ee fef7 	bl	80002fc <__adddf3>
 801150e:	a33e      	add	r3, pc, #248	; (adr r3, 8011608 <__ieee754_pow+0x738>)
 8011510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011514:	2000      	movs	r0, #0
 8011516:	4604      	mov	r4, r0
 8011518:	460d      	mov	r5, r1
 801151a:	f7ef f8a5 	bl	8000668 <__aeabi_dmul>
 801151e:	4642      	mov	r2, r8
 8011520:	ec41 0b18 	vmov	d8, r0, r1
 8011524:	464b      	mov	r3, r9
 8011526:	4620      	mov	r0, r4
 8011528:	4629      	mov	r1, r5
 801152a:	f7ee fee5 	bl	80002f8 <__aeabi_dsub>
 801152e:	4602      	mov	r2, r0
 8011530:	460b      	mov	r3, r1
 8011532:	4630      	mov	r0, r6
 8011534:	4639      	mov	r1, r7
 8011536:	f7ee fedf 	bl	80002f8 <__aeabi_dsub>
 801153a:	a335      	add	r3, pc, #212	; (adr r3, 8011610 <__ieee754_pow+0x740>)
 801153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011540:	f7ef f892 	bl	8000668 <__aeabi_dmul>
 8011544:	a334      	add	r3, pc, #208	; (adr r3, 8011618 <__ieee754_pow+0x748>)
 8011546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801154a:	4606      	mov	r6, r0
 801154c:	460f      	mov	r7, r1
 801154e:	4620      	mov	r0, r4
 8011550:	4629      	mov	r1, r5
 8011552:	f7ef f889 	bl	8000668 <__aeabi_dmul>
 8011556:	4602      	mov	r2, r0
 8011558:	460b      	mov	r3, r1
 801155a:	4630      	mov	r0, r6
 801155c:	4639      	mov	r1, r7
 801155e:	f7ee fecd 	bl	80002fc <__adddf3>
 8011562:	9a07      	ldr	r2, [sp, #28]
 8011564:	4b37      	ldr	r3, [pc, #220]	; (8011644 <__ieee754_pow+0x774>)
 8011566:	4413      	add	r3, r2
 8011568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801156c:	f7ee fec6 	bl	80002fc <__adddf3>
 8011570:	4682      	mov	sl, r0
 8011572:	9805      	ldr	r0, [sp, #20]
 8011574:	468b      	mov	fp, r1
 8011576:	f7ef f80d 	bl	8000594 <__aeabi_i2d>
 801157a:	9a07      	ldr	r2, [sp, #28]
 801157c:	4b32      	ldr	r3, [pc, #200]	; (8011648 <__ieee754_pow+0x778>)
 801157e:	4413      	add	r3, r2
 8011580:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011584:	4606      	mov	r6, r0
 8011586:	460f      	mov	r7, r1
 8011588:	4652      	mov	r2, sl
 801158a:	465b      	mov	r3, fp
 801158c:	ec51 0b18 	vmov	r0, r1, d8
 8011590:	f7ee feb4 	bl	80002fc <__adddf3>
 8011594:	4642      	mov	r2, r8
 8011596:	464b      	mov	r3, r9
 8011598:	f7ee feb0 	bl	80002fc <__adddf3>
 801159c:	4632      	mov	r2, r6
 801159e:	463b      	mov	r3, r7
 80115a0:	f7ee feac 	bl	80002fc <__adddf3>
 80115a4:	2000      	movs	r0, #0
 80115a6:	4632      	mov	r2, r6
 80115a8:	463b      	mov	r3, r7
 80115aa:	4604      	mov	r4, r0
 80115ac:	460d      	mov	r5, r1
 80115ae:	f7ee fea3 	bl	80002f8 <__aeabi_dsub>
 80115b2:	4642      	mov	r2, r8
 80115b4:	464b      	mov	r3, r9
 80115b6:	f7ee fe9f 	bl	80002f8 <__aeabi_dsub>
 80115ba:	ec53 2b18 	vmov	r2, r3, d8
 80115be:	f7ee fe9b 	bl	80002f8 <__aeabi_dsub>
 80115c2:	4602      	mov	r2, r0
 80115c4:	460b      	mov	r3, r1
 80115c6:	4650      	mov	r0, sl
 80115c8:	4659      	mov	r1, fp
 80115ca:	e610      	b.n	80111ee <__ieee754_pow+0x31e>
 80115cc:	2401      	movs	r4, #1
 80115ce:	e6a1      	b.n	8011314 <__ieee754_pow+0x444>
 80115d0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011620 <__ieee754_pow+0x750>
 80115d4:	e617      	b.n	8011206 <__ieee754_pow+0x336>
 80115d6:	bf00      	nop
 80115d8:	4a454eef 	.word	0x4a454eef
 80115dc:	3fca7e28 	.word	0x3fca7e28
 80115e0:	93c9db65 	.word	0x93c9db65
 80115e4:	3fcd864a 	.word	0x3fcd864a
 80115e8:	a91d4101 	.word	0xa91d4101
 80115ec:	3fd17460 	.word	0x3fd17460
 80115f0:	518f264d 	.word	0x518f264d
 80115f4:	3fd55555 	.word	0x3fd55555
 80115f8:	db6fabff 	.word	0xdb6fabff
 80115fc:	3fdb6db6 	.word	0x3fdb6db6
 8011600:	33333303 	.word	0x33333303
 8011604:	3fe33333 	.word	0x3fe33333
 8011608:	e0000000 	.word	0xe0000000
 801160c:	3feec709 	.word	0x3feec709
 8011610:	dc3a03fd 	.word	0xdc3a03fd
 8011614:	3feec709 	.word	0x3feec709
 8011618:	145b01f5 	.word	0x145b01f5
 801161c:	be3e2fe0 	.word	0xbe3e2fe0
 8011620:	00000000 	.word	0x00000000
 8011624:	3ff00000 	.word	0x3ff00000
 8011628:	7ff00000 	.word	0x7ff00000
 801162c:	43400000 	.word	0x43400000
 8011630:	0003988e 	.word	0x0003988e
 8011634:	000bb679 	.word	0x000bb679
 8011638:	08012210 	.word	0x08012210
 801163c:	3ff00000 	.word	0x3ff00000
 8011640:	40080000 	.word	0x40080000
 8011644:	08012230 	.word	0x08012230
 8011648:	08012220 	.word	0x08012220
 801164c:	a3b3      	add	r3, pc, #716	; (adr r3, 801191c <__ieee754_pow+0xa4c>)
 801164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011652:	4640      	mov	r0, r8
 8011654:	4649      	mov	r1, r9
 8011656:	f7ee fe51 	bl	80002fc <__adddf3>
 801165a:	4622      	mov	r2, r4
 801165c:	ec41 0b1a 	vmov	d10, r0, r1
 8011660:	462b      	mov	r3, r5
 8011662:	4630      	mov	r0, r6
 8011664:	4639      	mov	r1, r7
 8011666:	f7ee fe47 	bl	80002f8 <__aeabi_dsub>
 801166a:	4602      	mov	r2, r0
 801166c:	460b      	mov	r3, r1
 801166e:	ec51 0b1a 	vmov	r0, r1, d10
 8011672:	f7ef fa89 	bl	8000b88 <__aeabi_dcmpgt>
 8011676:	2800      	cmp	r0, #0
 8011678:	f47f ae04 	bne.w	8011284 <__ieee754_pow+0x3b4>
 801167c:	4aa2      	ldr	r2, [pc, #648]	; (8011908 <__ieee754_pow+0xa38>)
 801167e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011682:	4293      	cmp	r3, r2
 8011684:	f340 8107 	ble.w	8011896 <__ieee754_pow+0x9c6>
 8011688:	151b      	asrs	r3, r3, #20
 801168a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801168e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011692:	fa4a fa03 	asr.w	sl, sl, r3
 8011696:	44da      	add	sl, fp
 8011698:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801169c:	489b      	ldr	r0, [pc, #620]	; (801190c <__ieee754_pow+0xa3c>)
 801169e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80116a2:	4108      	asrs	r0, r1
 80116a4:	ea00 030a 	and.w	r3, r0, sl
 80116a8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80116ac:	f1c1 0114 	rsb	r1, r1, #20
 80116b0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80116b4:	fa4a fa01 	asr.w	sl, sl, r1
 80116b8:	f1bb 0f00 	cmp.w	fp, #0
 80116bc:	f04f 0200 	mov.w	r2, #0
 80116c0:	4620      	mov	r0, r4
 80116c2:	4629      	mov	r1, r5
 80116c4:	bfb8      	it	lt
 80116c6:	f1ca 0a00 	rsblt	sl, sl, #0
 80116ca:	f7ee fe15 	bl	80002f8 <__aeabi_dsub>
 80116ce:	ec41 0b19 	vmov	d9, r0, r1
 80116d2:	4642      	mov	r2, r8
 80116d4:	464b      	mov	r3, r9
 80116d6:	ec51 0b19 	vmov	r0, r1, d9
 80116da:	f7ee fe0f 	bl	80002fc <__adddf3>
 80116de:	a37a      	add	r3, pc, #488	; (adr r3, 80118c8 <__ieee754_pow+0x9f8>)
 80116e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e4:	2000      	movs	r0, #0
 80116e6:	4604      	mov	r4, r0
 80116e8:	460d      	mov	r5, r1
 80116ea:	f7ee ffbd 	bl	8000668 <__aeabi_dmul>
 80116ee:	ec53 2b19 	vmov	r2, r3, d9
 80116f2:	4606      	mov	r6, r0
 80116f4:	460f      	mov	r7, r1
 80116f6:	4620      	mov	r0, r4
 80116f8:	4629      	mov	r1, r5
 80116fa:	f7ee fdfd 	bl	80002f8 <__aeabi_dsub>
 80116fe:	4602      	mov	r2, r0
 8011700:	460b      	mov	r3, r1
 8011702:	4640      	mov	r0, r8
 8011704:	4649      	mov	r1, r9
 8011706:	f7ee fdf7 	bl	80002f8 <__aeabi_dsub>
 801170a:	a371      	add	r3, pc, #452	; (adr r3, 80118d0 <__ieee754_pow+0xa00>)
 801170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011710:	f7ee ffaa 	bl	8000668 <__aeabi_dmul>
 8011714:	a370      	add	r3, pc, #448	; (adr r3, 80118d8 <__ieee754_pow+0xa08>)
 8011716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801171a:	4680      	mov	r8, r0
 801171c:	4689      	mov	r9, r1
 801171e:	4620      	mov	r0, r4
 8011720:	4629      	mov	r1, r5
 8011722:	f7ee ffa1 	bl	8000668 <__aeabi_dmul>
 8011726:	4602      	mov	r2, r0
 8011728:	460b      	mov	r3, r1
 801172a:	4640      	mov	r0, r8
 801172c:	4649      	mov	r1, r9
 801172e:	f7ee fde5 	bl	80002fc <__adddf3>
 8011732:	4604      	mov	r4, r0
 8011734:	460d      	mov	r5, r1
 8011736:	4602      	mov	r2, r0
 8011738:	460b      	mov	r3, r1
 801173a:	4630      	mov	r0, r6
 801173c:	4639      	mov	r1, r7
 801173e:	f7ee fddd 	bl	80002fc <__adddf3>
 8011742:	4632      	mov	r2, r6
 8011744:	463b      	mov	r3, r7
 8011746:	4680      	mov	r8, r0
 8011748:	4689      	mov	r9, r1
 801174a:	f7ee fdd5 	bl	80002f8 <__aeabi_dsub>
 801174e:	4602      	mov	r2, r0
 8011750:	460b      	mov	r3, r1
 8011752:	4620      	mov	r0, r4
 8011754:	4629      	mov	r1, r5
 8011756:	f7ee fdcf 	bl	80002f8 <__aeabi_dsub>
 801175a:	4642      	mov	r2, r8
 801175c:	4606      	mov	r6, r0
 801175e:	460f      	mov	r7, r1
 8011760:	464b      	mov	r3, r9
 8011762:	4640      	mov	r0, r8
 8011764:	4649      	mov	r1, r9
 8011766:	f7ee ff7f 	bl	8000668 <__aeabi_dmul>
 801176a:	a35d      	add	r3, pc, #372	; (adr r3, 80118e0 <__ieee754_pow+0xa10>)
 801176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011770:	4604      	mov	r4, r0
 8011772:	460d      	mov	r5, r1
 8011774:	f7ee ff78 	bl	8000668 <__aeabi_dmul>
 8011778:	a35b      	add	r3, pc, #364	; (adr r3, 80118e8 <__ieee754_pow+0xa18>)
 801177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801177e:	f7ee fdbb 	bl	80002f8 <__aeabi_dsub>
 8011782:	4622      	mov	r2, r4
 8011784:	462b      	mov	r3, r5
 8011786:	f7ee ff6f 	bl	8000668 <__aeabi_dmul>
 801178a:	a359      	add	r3, pc, #356	; (adr r3, 80118f0 <__ieee754_pow+0xa20>)
 801178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011790:	f7ee fdb4 	bl	80002fc <__adddf3>
 8011794:	4622      	mov	r2, r4
 8011796:	462b      	mov	r3, r5
 8011798:	f7ee ff66 	bl	8000668 <__aeabi_dmul>
 801179c:	a356      	add	r3, pc, #344	; (adr r3, 80118f8 <__ieee754_pow+0xa28>)
 801179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117a2:	f7ee fda9 	bl	80002f8 <__aeabi_dsub>
 80117a6:	4622      	mov	r2, r4
 80117a8:	462b      	mov	r3, r5
 80117aa:	f7ee ff5d 	bl	8000668 <__aeabi_dmul>
 80117ae:	a354      	add	r3, pc, #336	; (adr r3, 8011900 <__ieee754_pow+0xa30>)
 80117b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b4:	f7ee fda2 	bl	80002fc <__adddf3>
 80117b8:	4622      	mov	r2, r4
 80117ba:	462b      	mov	r3, r5
 80117bc:	f7ee ff54 	bl	8000668 <__aeabi_dmul>
 80117c0:	4602      	mov	r2, r0
 80117c2:	460b      	mov	r3, r1
 80117c4:	4640      	mov	r0, r8
 80117c6:	4649      	mov	r1, r9
 80117c8:	f7ee fd96 	bl	80002f8 <__aeabi_dsub>
 80117cc:	4604      	mov	r4, r0
 80117ce:	460d      	mov	r5, r1
 80117d0:	4602      	mov	r2, r0
 80117d2:	460b      	mov	r3, r1
 80117d4:	4640      	mov	r0, r8
 80117d6:	4649      	mov	r1, r9
 80117d8:	f7ee ff46 	bl	8000668 <__aeabi_dmul>
 80117dc:	2200      	movs	r2, #0
 80117de:	ec41 0b19 	vmov	d9, r0, r1
 80117e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80117e6:	4620      	mov	r0, r4
 80117e8:	4629      	mov	r1, r5
 80117ea:	f7ee fd85 	bl	80002f8 <__aeabi_dsub>
 80117ee:	4602      	mov	r2, r0
 80117f0:	460b      	mov	r3, r1
 80117f2:	ec51 0b19 	vmov	r0, r1, d9
 80117f6:	f7ef f861 	bl	80008bc <__aeabi_ddiv>
 80117fa:	4632      	mov	r2, r6
 80117fc:	4604      	mov	r4, r0
 80117fe:	460d      	mov	r5, r1
 8011800:	463b      	mov	r3, r7
 8011802:	4640      	mov	r0, r8
 8011804:	4649      	mov	r1, r9
 8011806:	f7ee ff2f 	bl	8000668 <__aeabi_dmul>
 801180a:	4632      	mov	r2, r6
 801180c:	463b      	mov	r3, r7
 801180e:	f7ee fd75 	bl	80002fc <__adddf3>
 8011812:	4602      	mov	r2, r0
 8011814:	460b      	mov	r3, r1
 8011816:	4620      	mov	r0, r4
 8011818:	4629      	mov	r1, r5
 801181a:	f7ee fd6d 	bl	80002f8 <__aeabi_dsub>
 801181e:	4642      	mov	r2, r8
 8011820:	464b      	mov	r3, r9
 8011822:	f7ee fd69 	bl	80002f8 <__aeabi_dsub>
 8011826:	460b      	mov	r3, r1
 8011828:	4602      	mov	r2, r0
 801182a:	4939      	ldr	r1, [pc, #228]	; (8011910 <__ieee754_pow+0xa40>)
 801182c:	2000      	movs	r0, #0
 801182e:	f7ee fd63 	bl	80002f8 <__aeabi_dsub>
 8011832:	ec41 0b10 	vmov	d0, r0, r1
 8011836:	ee10 3a90 	vmov	r3, s1
 801183a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801183e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011842:	da2b      	bge.n	801189c <__ieee754_pow+0x9cc>
 8011844:	4650      	mov	r0, sl
 8011846:	f000 f877 	bl	8011938 <scalbn>
 801184a:	ec51 0b10 	vmov	r0, r1, d0
 801184e:	ec53 2b18 	vmov	r2, r3, d8
 8011852:	f7ff bbee 	b.w	8011032 <__ieee754_pow+0x162>
 8011856:	4b2f      	ldr	r3, [pc, #188]	; (8011914 <__ieee754_pow+0xa44>)
 8011858:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801185c:	429e      	cmp	r6, r3
 801185e:	f77f af0d 	ble.w	801167c <__ieee754_pow+0x7ac>
 8011862:	4b2d      	ldr	r3, [pc, #180]	; (8011918 <__ieee754_pow+0xa48>)
 8011864:	440b      	add	r3, r1
 8011866:	4303      	orrs	r3, r0
 8011868:	d009      	beq.n	801187e <__ieee754_pow+0x9ae>
 801186a:	ec51 0b18 	vmov	r0, r1, d8
 801186e:	2200      	movs	r2, #0
 8011870:	2300      	movs	r3, #0
 8011872:	f7ef f96b 	bl	8000b4c <__aeabi_dcmplt>
 8011876:	3800      	subs	r0, #0
 8011878:	bf18      	it	ne
 801187a:	2001      	movne	r0, #1
 801187c:	e448      	b.n	8011110 <__ieee754_pow+0x240>
 801187e:	4622      	mov	r2, r4
 8011880:	462b      	mov	r3, r5
 8011882:	f7ee fd39 	bl	80002f8 <__aeabi_dsub>
 8011886:	4642      	mov	r2, r8
 8011888:	464b      	mov	r3, r9
 801188a:	f7ef f973 	bl	8000b74 <__aeabi_dcmpge>
 801188e:	2800      	cmp	r0, #0
 8011890:	f43f aef4 	beq.w	801167c <__ieee754_pow+0x7ac>
 8011894:	e7e9      	b.n	801186a <__ieee754_pow+0x99a>
 8011896:	f04f 0a00 	mov.w	sl, #0
 801189a:	e71a      	b.n	80116d2 <__ieee754_pow+0x802>
 801189c:	ec51 0b10 	vmov	r0, r1, d0
 80118a0:	4619      	mov	r1, r3
 80118a2:	e7d4      	b.n	801184e <__ieee754_pow+0x97e>
 80118a4:	491a      	ldr	r1, [pc, #104]	; (8011910 <__ieee754_pow+0xa40>)
 80118a6:	2000      	movs	r0, #0
 80118a8:	f7ff bb31 	b.w	8010f0e <__ieee754_pow+0x3e>
 80118ac:	2000      	movs	r0, #0
 80118ae:	2100      	movs	r1, #0
 80118b0:	f7ff bb2d 	b.w	8010f0e <__ieee754_pow+0x3e>
 80118b4:	4630      	mov	r0, r6
 80118b6:	4639      	mov	r1, r7
 80118b8:	f7ff bb29 	b.w	8010f0e <__ieee754_pow+0x3e>
 80118bc:	9204      	str	r2, [sp, #16]
 80118be:	f7ff bb7b 	b.w	8010fb8 <__ieee754_pow+0xe8>
 80118c2:	2300      	movs	r3, #0
 80118c4:	f7ff bb65 	b.w	8010f92 <__ieee754_pow+0xc2>
 80118c8:	00000000 	.word	0x00000000
 80118cc:	3fe62e43 	.word	0x3fe62e43
 80118d0:	fefa39ef 	.word	0xfefa39ef
 80118d4:	3fe62e42 	.word	0x3fe62e42
 80118d8:	0ca86c39 	.word	0x0ca86c39
 80118dc:	be205c61 	.word	0xbe205c61
 80118e0:	72bea4d0 	.word	0x72bea4d0
 80118e4:	3e663769 	.word	0x3e663769
 80118e8:	c5d26bf1 	.word	0xc5d26bf1
 80118ec:	3ebbbd41 	.word	0x3ebbbd41
 80118f0:	af25de2c 	.word	0xaf25de2c
 80118f4:	3f11566a 	.word	0x3f11566a
 80118f8:	16bebd93 	.word	0x16bebd93
 80118fc:	3f66c16c 	.word	0x3f66c16c
 8011900:	5555553e 	.word	0x5555553e
 8011904:	3fc55555 	.word	0x3fc55555
 8011908:	3fe00000 	.word	0x3fe00000
 801190c:	fff00000 	.word	0xfff00000
 8011910:	3ff00000 	.word	0x3ff00000
 8011914:	4090cbff 	.word	0x4090cbff
 8011918:	3f6f3400 	.word	0x3f6f3400
 801191c:	652b82fe 	.word	0x652b82fe
 8011920:	3c971547 	.word	0x3c971547

08011924 <fabs>:
 8011924:	ec51 0b10 	vmov	r0, r1, d0
 8011928:	ee10 2a10 	vmov	r2, s0
 801192c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011930:	ec43 2b10 	vmov	d0, r2, r3
 8011934:	4770      	bx	lr
	...

08011938 <scalbn>:
 8011938:	b570      	push	{r4, r5, r6, lr}
 801193a:	ec55 4b10 	vmov	r4, r5, d0
 801193e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011942:	4606      	mov	r6, r0
 8011944:	462b      	mov	r3, r5
 8011946:	b999      	cbnz	r1, 8011970 <scalbn+0x38>
 8011948:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801194c:	4323      	orrs	r3, r4
 801194e:	d03f      	beq.n	80119d0 <scalbn+0x98>
 8011950:	4b35      	ldr	r3, [pc, #212]	; (8011a28 <scalbn+0xf0>)
 8011952:	4629      	mov	r1, r5
 8011954:	ee10 0a10 	vmov	r0, s0
 8011958:	2200      	movs	r2, #0
 801195a:	f7ee fe85 	bl	8000668 <__aeabi_dmul>
 801195e:	4b33      	ldr	r3, [pc, #204]	; (8011a2c <scalbn+0xf4>)
 8011960:	429e      	cmp	r6, r3
 8011962:	4604      	mov	r4, r0
 8011964:	460d      	mov	r5, r1
 8011966:	da10      	bge.n	801198a <scalbn+0x52>
 8011968:	a327      	add	r3, pc, #156	; (adr r3, 8011a08 <scalbn+0xd0>)
 801196a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801196e:	e01f      	b.n	80119b0 <scalbn+0x78>
 8011970:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011974:	4291      	cmp	r1, r2
 8011976:	d10c      	bne.n	8011992 <scalbn+0x5a>
 8011978:	ee10 2a10 	vmov	r2, s0
 801197c:	4620      	mov	r0, r4
 801197e:	4629      	mov	r1, r5
 8011980:	f7ee fcbc 	bl	80002fc <__adddf3>
 8011984:	4604      	mov	r4, r0
 8011986:	460d      	mov	r5, r1
 8011988:	e022      	b.n	80119d0 <scalbn+0x98>
 801198a:	460b      	mov	r3, r1
 801198c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011990:	3936      	subs	r1, #54	; 0x36
 8011992:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011996:	4296      	cmp	r6, r2
 8011998:	dd0d      	ble.n	80119b6 <scalbn+0x7e>
 801199a:	2d00      	cmp	r5, #0
 801199c:	a11c      	add	r1, pc, #112	; (adr r1, 8011a10 <scalbn+0xd8>)
 801199e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119a2:	da02      	bge.n	80119aa <scalbn+0x72>
 80119a4:	a11c      	add	r1, pc, #112	; (adr r1, 8011a18 <scalbn+0xe0>)
 80119a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119aa:	a319      	add	r3, pc, #100	; (adr r3, 8011a10 <scalbn+0xd8>)
 80119ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b0:	f7ee fe5a 	bl	8000668 <__aeabi_dmul>
 80119b4:	e7e6      	b.n	8011984 <scalbn+0x4c>
 80119b6:	1872      	adds	r2, r6, r1
 80119b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80119bc:	428a      	cmp	r2, r1
 80119be:	dcec      	bgt.n	801199a <scalbn+0x62>
 80119c0:	2a00      	cmp	r2, #0
 80119c2:	dd08      	ble.n	80119d6 <scalbn+0x9e>
 80119c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80119c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80119cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80119d0:	ec45 4b10 	vmov	d0, r4, r5
 80119d4:	bd70      	pop	{r4, r5, r6, pc}
 80119d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80119da:	da08      	bge.n	80119ee <scalbn+0xb6>
 80119dc:	2d00      	cmp	r5, #0
 80119de:	a10a      	add	r1, pc, #40	; (adr r1, 8011a08 <scalbn+0xd0>)
 80119e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119e4:	dac0      	bge.n	8011968 <scalbn+0x30>
 80119e6:	a10e      	add	r1, pc, #56	; (adr r1, 8011a20 <scalbn+0xe8>)
 80119e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119ec:	e7bc      	b.n	8011968 <scalbn+0x30>
 80119ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80119f2:	3236      	adds	r2, #54	; 0x36
 80119f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80119f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80119fc:	4620      	mov	r0, r4
 80119fe:	4b0c      	ldr	r3, [pc, #48]	; (8011a30 <scalbn+0xf8>)
 8011a00:	2200      	movs	r2, #0
 8011a02:	e7d5      	b.n	80119b0 <scalbn+0x78>
 8011a04:	f3af 8000 	nop.w
 8011a08:	c2f8f359 	.word	0xc2f8f359
 8011a0c:	01a56e1f 	.word	0x01a56e1f
 8011a10:	8800759c 	.word	0x8800759c
 8011a14:	7e37e43c 	.word	0x7e37e43c
 8011a18:	8800759c 	.word	0x8800759c
 8011a1c:	fe37e43c 	.word	0xfe37e43c
 8011a20:	c2f8f359 	.word	0xc2f8f359
 8011a24:	81a56e1f 	.word	0x81a56e1f
 8011a28:	43500000 	.word	0x43500000
 8011a2c:	ffff3cb0 	.word	0xffff3cb0
 8011a30:	3c900000 	.word	0x3c900000

08011a34 <with_errno>:
 8011a34:	b570      	push	{r4, r5, r6, lr}
 8011a36:	4604      	mov	r4, r0
 8011a38:	460d      	mov	r5, r1
 8011a3a:	4616      	mov	r6, r2
 8011a3c:	f7fd f924 	bl	800ec88 <__errno>
 8011a40:	4629      	mov	r1, r5
 8011a42:	6006      	str	r6, [r0, #0]
 8011a44:	4620      	mov	r0, r4
 8011a46:	bd70      	pop	{r4, r5, r6, pc}

08011a48 <xflow>:
 8011a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a4a:	4614      	mov	r4, r2
 8011a4c:	461d      	mov	r5, r3
 8011a4e:	b108      	cbz	r0, 8011a54 <xflow+0xc>
 8011a50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011a54:	e9cd 2300 	strd	r2, r3, [sp]
 8011a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	4629      	mov	r1, r5
 8011a60:	f7ee fe02 	bl	8000668 <__aeabi_dmul>
 8011a64:	2222      	movs	r2, #34	; 0x22
 8011a66:	b003      	add	sp, #12
 8011a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a6c:	f7ff bfe2 	b.w	8011a34 <with_errno>

08011a70 <__math_uflow>:
 8011a70:	b508      	push	{r3, lr}
 8011a72:	2200      	movs	r2, #0
 8011a74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011a78:	f7ff ffe6 	bl	8011a48 <xflow>
 8011a7c:	ec41 0b10 	vmov	d0, r0, r1
 8011a80:	bd08      	pop	{r3, pc}

08011a82 <__math_oflow>:
 8011a82:	b508      	push	{r3, lr}
 8011a84:	2200      	movs	r2, #0
 8011a86:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8011a8a:	f7ff ffdd 	bl	8011a48 <xflow>
 8011a8e:	ec41 0b10 	vmov	d0, r0, r1
 8011a92:	bd08      	pop	{r3, pc}

08011a94 <__ieee754_sqrt>:
 8011a94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a98:	ec55 4b10 	vmov	r4, r5, d0
 8011a9c:	4e67      	ldr	r6, [pc, #412]	; (8011c3c <__ieee754_sqrt+0x1a8>)
 8011a9e:	43ae      	bics	r6, r5
 8011aa0:	ee10 0a10 	vmov	r0, s0
 8011aa4:	ee10 2a10 	vmov	r2, s0
 8011aa8:	4629      	mov	r1, r5
 8011aaa:	462b      	mov	r3, r5
 8011aac:	d10d      	bne.n	8011aca <__ieee754_sqrt+0x36>
 8011aae:	f7ee fddb 	bl	8000668 <__aeabi_dmul>
 8011ab2:	4602      	mov	r2, r0
 8011ab4:	460b      	mov	r3, r1
 8011ab6:	4620      	mov	r0, r4
 8011ab8:	4629      	mov	r1, r5
 8011aba:	f7ee fc1f 	bl	80002fc <__adddf3>
 8011abe:	4604      	mov	r4, r0
 8011ac0:	460d      	mov	r5, r1
 8011ac2:	ec45 4b10 	vmov	d0, r4, r5
 8011ac6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aca:	2d00      	cmp	r5, #0
 8011acc:	dc0b      	bgt.n	8011ae6 <__ieee754_sqrt+0x52>
 8011ace:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011ad2:	4326      	orrs	r6, r4
 8011ad4:	d0f5      	beq.n	8011ac2 <__ieee754_sqrt+0x2e>
 8011ad6:	b135      	cbz	r5, 8011ae6 <__ieee754_sqrt+0x52>
 8011ad8:	f7ee fc0e 	bl	80002f8 <__aeabi_dsub>
 8011adc:	4602      	mov	r2, r0
 8011ade:	460b      	mov	r3, r1
 8011ae0:	f7ee feec 	bl	80008bc <__aeabi_ddiv>
 8011ae4:	e7eb      	b.n	8011abe <__ieee754_sqrt+0x2a>
 8011ae6:	1509      	asrs	r1, r1, #20
 8011ae8:	f000 808d 	beq.w	8011c06 <__ieee754_sqrt+0x172>
 8011aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011af0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8011af4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011af8:	07c9      	lsls	r1, r1, #31
 8011afa:	bf5c      	itt	pl
 8011afc:	005b      	lslpl	r3, r3, #1
 8011afe:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8011b02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011b06:	bf58      	it	pl
 8011b08:	0052      	lslpl	r2, r2, #1
 8011b0a:	2500      	movs	r5, #0
 8011b0c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011b10:	1076      	asrs	r6, r6, #1
 8011b12:	0052      	lsls	r2, r2, #1
 8011b14:	f04f 0e16 	mov.w	lr, #22
 8011b18:	46ac      	mov	ip, r5
 8011b1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011b1e:	eb0c 0001 	add.w	r0, ip, r1
 8011b22:	4298      	cmp	r0, r3
 8011b24:	bfde      	ittt	le
 8011b26:	1a1b      	suble	r3, r3, r0
 8011b28:	eb00 0c01 	addle.w	ip, r0, r1
 8011b2c:	186d      	addle	r5, r5, r1
 8011b2e:	005b      	lsls	r3, r3, #1
 8011b30:	f1be 0e01 	subs.w	lr, lr, #1
 8011b34:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011b38:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011b3c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011b40:	d1ed      	bne.n	8011b1e <__ieee754_sqrt+0x8a>
 8011b42:	4674      	mov	r4, lr
 8011b44:	2720      	movs	r7, #32
 8011b46:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8011b4a:	4563      	cmp	r3, ip
 8011b4c:	eb01 000e 	add.w	r0, r1, lr
 8011b50:	dc02      	bgt.n	8011b58 <__ieee754_sqrt+0xc4>
 8011b52:	d113      	bne.n	8011b7c <__ieee754_sqrt+0xe8>
 8011b54:	4290      	cmp	r0, r2
 8011b56:	d811      	bhi.n	8011b7c <__ieee754_sqrt+0xe8>
 8011b58:	2800      	cmp	r0, #0
 8011b5a:	eb00 0e01 	add.w	lr, r0, r1
 8011b5e:	da57      	bge.n	8011c10 <__ieee754_sqrt+0x17c>
 8011b60:	f1be 0f00 	cmp.w	lr, #0
 8011b64:	db54      	blt.n	8011c10 <__ieee754_sqrt+0x17c>
 8011b66:	f10c 0801 	add.w	r8, ip, #1
 8011b6a:	eba3 030c 	sub.w	r3, r3, ip
 8011b6e:	4290      	cmp	r0, r2
 8011b70:	bf88      	it	hi
 8011b72:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011b76:	1a12      	subs	r2, r2, r0
 8011b78:	440c      	add	r4, r1
 8011b7a:	46c4      	mov	ip, r8
 8011b7c:	005b      	lsls	r3, r3, #1
 8011b7e:	3f01      	subs	r7, #1
 8011b80:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011b84:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011b88:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011b8c:	d1dd      	bne.n	8011b4a <__ieee754_sqrt+0xb6>
 8011b8e:	4313      	orrs	r3, r2
 8011b90:	d01b      	beq.n	8011bca <__ieee754_sqrt+0x136>
 8011b92:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8011c40 <__ieee754_sqrt+0x1ac>
 8011b96:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8011c44 <__ieee754_sqrt+0x1b0>
 8011b9a:	e9da 0100 	ldrd	r0, r1, [sl]
 8011b9e:	e9db 2300 	ldrd	r2, r3, [fp]
 8011ba2:	f7ee fba9 	bl	80002f8 <__aeabi_dsub>
 8011ba6:	e9da 8900 	ldrd	r8, r9, [sl]
 8011baa:	4602      	mov	r2, r0
 8011bac:	460b      	mov	r3, r1
 8011bae:	4640      	mov	r0, r8
 8011bb0:	4649      	mov	r1, r9
 8011bb2:	f7ee ffd5 	bl	8000b60 <__aeabi_dcmple>
 8011bb6:	b140      	cbz	r0, 8011bca <__ieee754_sqrt+0x136>
 8011bb8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8011bbc:	e9da 0100 	ldrd	r0, r1, [sl]
 8011bc0:	e9db 2300 	ldrd	r2, r3, [fp]
 8011bc4:	d126      	bne.n	8011c14 <__ieee754_sqrt+0x180>
 8011bc6:	3501      	adds	r5, #1
 8011bc8:	463c      	mov	r4, r7
 8011bca:	106a      	asrs	r2, r5, #1
 8011bcc:	0863      	lsrs	r3, r4, #1
 8011bce:	07e9      	lsls	r1, r5, #31
 8011bd0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011bd4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011bd8:	bf48      	it	mi
 8011bda:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011bde:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8011be2:	461c      	mov	r4, r3
 8011be4:	e76d      	b.n	8011ac2 <__ieee754_sqrt+0x2e>
 8011be6:	0ad3      	lsrs	r3, r2, #11
 8011be8:	3815      	subs	r0, #21
 8011bea:	0552      	lsls	r2, r2, #21
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d0fa      	beq.n	8011be6 <__ieee754_sqrt+0x152>
 8011bf0:	02dc      	lsls	r4, r3, #11
 8011bf2:	d50a      	bpl.n	8011c0a <__ieee754_sqrt+0x176>
 8011bf4:	f1c1 0420 	rsb	r4, r1, #32
 8011bf8:	fa22 f404 	lsr.w	r4, r2, r4
 8011bfc:	1e4d      	subs	r5, r1, #1
 8011bfe:	408a      	lsls	r2, r1
 8011c00:	4323      	orrs	r3, r4
 8011c02:	1b41      	subs	r1, r0, r5
 8011c04:	e772      	b.n	8011aec <__ieee754_sqrt+0x58>
 8011c06:	4608      	mov	r0, r1
 8011c08:	e7f0      	b.n	8011bec <__ieee754_sqrt+0x158>
 8011c0a:	005b      	lsls	r3, r3, #1
 8011c0c:	3101      	adds	r1, #1
 8011c0e:	e7ef      	b.n	8011bf0 <__ieee754_sqrt+0x15c>
 8011c10:	46e0      	mov	r8, ip
 8011c12:	e7aa      	b.n	8011b6a <__ieee754_sqrt+0xd6>
 8011c14:	f7ee fb72 	bl	80002fc <__adddf3>
 8011c18:	e9da 8900 	ldrd	r8, r9, [sl]
 8011c1c:	4602      	mov	r2, r0
 8011c1e:	460b      	mov	r3, r1
 8011c20:	4640      	mov	r0, r8
 8011c22:	4649      	mov	r1, r9
 8011c24:	f7ee ff92 	bl	8000b4c <__aeabi_dcmplt>
 8011c28:	b120      	cbz	r0, 8011c34 <__ieee754_sqrt+0x1a0>
 8011c2a:	1ca0      	adds	r0, r4, #2
 8011c2c:	bf08      	it	eq
 8011c2e:	3501      	addeq	r5, #1
 8011c30:	3402      	adds	r4, #2
 8011c32:	e7ca      	b.n	8011bca <__ieee754_sqrt+0x136>
 8011c34:	3401      	adds	r4, #1
 8011c36:	f024 0401 	bic.w	r4, r4, #1
 8011c3a:	e7c6      	b.n	8011bca <__ieee754_sqrt+0x136>
 8011c3c:	7ff00000 	.word	0x7ff00000
 8011c40:	20000358 	.word	0x20000358
 8011c44:	20000360 	.word	0x20000360

08011c48 <_init>:
 8011c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c4a:	bf00      	nop
 8011c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c4e:	bc08      	pop	{r3}
 8011c50:	469e      	mov	lr, r3
 8011c52:	4770      	bx	lr

08011c54 <_fini>:
 8011c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c56:	bf00      	nop
 8011c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c5a:	bc08      	pop	{r3}
 8011c5c:	469e      	mov	lr, r3
 8011c5e:	4770      	bx	lr
