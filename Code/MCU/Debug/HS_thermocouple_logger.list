
HS_thermocouple_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011b50  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08011d30  08011d30  00021d30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012370  08012370  00030368  2**0
                  CONTENTS
  4 .ARM          00000000  08012370  08012370  00030368  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012370  08012370  00030368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012370  08012370  00022370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012374  08012374  00022374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  08012378  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f58  20000368  080126e0  00030368  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  200052c0  080126e0  000352c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030368  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030398  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fc0d  00000000  00000000  000303db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047e5  00000000  00000000  0004ffe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ce0  00000000  00000000  000547d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001626  00000000  00000000  000564b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cdb5  00000000  00000000  00057ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002399a  00000000  00000000  0008488b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00119978  00000000  00000000  000a8225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000090a8  00000000  00000000  001c1ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001cac48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000368 	.word	0x20000368
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011d18 	.word	0x08011d18

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000036c 	.word	0x2000036c
 800021c:	08011d18 	.word	0x08011d18

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfe:	f001 fe96 	bl	8002a2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d02:	f000 f8af 	bl	8000e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d06:	f000 fbef 	bl	80014e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d0a:	f000 fbab 	bl	8001464 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d0e:	f000 f8f5 	bl	8000efc <MX_ADC1_Init>
  MX_ADC3_Init();
 8000d12:	f000 f9e9 	bl	80010e8 <MX_ADC3_Init>
  MX_ADC4_Init();
 8000d16:	f000 fa6d 	bl	80011f4 <MX_ADC4_Init>
  MX_TIM2_Init();
 8000d1a:	f000 fb57 	bl	80013cc <MX_TIM2_Init>
  MX_USB_Device_Init();
 8000d1e:	f00c fc11 	bl	800d544 <MX_USB_Device_Init>
  MX_I2C3_Init();
 8000d22:	f000 fb13 	bl	800134c <MX_I2C3_Init>
  MX_DAC1_Init();
 8000d26:	f000 fad7 	bl	80012d8 <MX_DAC1_Init>
  MX_ADC2_Init();
 8000d2a:	f000 f96b 	bl	8001004 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  ResetStates();
 8000d2e:	f001 f9b3 	bl	8002098 <ResetStates>

  int full_channels = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(prog_state == CFG_RECEIVED){
 8000d36:	4b42      	ldr	r3, [pc, #264]	; (8000e40 <main+0x148>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d101      	bne.n	8000d44 <main+0x4c>
		  InterpretConfig();
 8000d40:	f000 fc7e 	bl	8001640 <InterpretConfig>
	  }
	  if(prog_state == CFG_INTERPRETED){
 8000d44:	4b3e      	ldr	r3, [pc, #248]	; (8000e40 <main+0x148>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d101      	bne.n	8000d52 <main+0x5a>
		  SetupMeasurement();
 8000d4e:	f000 fd9f 	bl	8001890 <SetupMeasurement>
	  }
	  if(prog_state == PARAMETERS_SET){
 8000d52:	4b3b      	ldr	r3, [pc, #236]	; (8000e40 <main+0x148>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	d101      	bne.n	8000d60 <main+0x68>
		  SendParameters();
 8000d5c:	f000 ffce 	bl	8001cfc <SendParameters>
	  }
	  if(prog_state == ARMED){
 8000d60:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <main+0x148>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	d106      	bne.n	8000d78 <main+0x80>
		  while(!measurement_activated);
 8000d6a:	bf00      	nop
 8000d6c:	4b35      	ldr	r3, [pc, #212]	; (8000e44 <main+0x14c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d0fb      	beq.n	8000d6c <main+0x74>
		  StartMeasurement();
 8000d74:	f001 f82c 	bl	8001dd0 <StartMeasurement>
	  }
	  if(prog_state == MEASURING){
 8000d78:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <main+0x148>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b05      	cmp	r3, #5
 8000d80:	d14a      	bne.n	8000e18 <main+0x120>
		 full_channels = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
		 for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 8000d86:	2300      	movs	r3, #0
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	e02a      	b.n	8000de2 <main+0xea>
			 if(!channel_enabled_status[i])
 8000d8c:	4a2e      	ldr	r2, [pc, #184]	; (8000e48 <main+0x150>)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d020      	beq.n	8000dda <main+0xe2>
				 continue;
			 if(adc_states[i] == EMPTY)
 8000d98:	4a2c      	ldr	r2, [pc, #176]	; (8000e4c <main+0x154>)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d022      	beq.n	8000dea <main+0xf2>
				 break;

			 if(usb_transmition_state == EMPTY){
 8000da4:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <main+0x158>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d106      	bne.n	8000dba <main+0xc2>
				 usb_transmition_state = adc_states[i];
 8000dac:	4a27      	ldr	r2, [pc, #156]	; (8000e4c <main+0x154>)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	4413      	add	r3, r2
 8000db2:	781a      	ldrb	r2, [r3, #0]
 8000db4:	4b26      	ldr	r3, [pc, #152]	; (8000e50 <main+0x158>)
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e00b      	b.n	8000dd2 <main+0xda>
			 }
			 else if(adc_states[i] != usb_transmition_state){
 8000dba:	4a24      	ldr	r2, [pc, #144]	; (8000e4c <main+0x154>)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <main+0x158>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d003      	beq.n	8000dd2 <main+0xda>
				 transmission_error = 1;
 8000dca:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <main+0x15c>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	601a      	str	r2, [r3, #0]
				 break;
 8000dd0:	e00c      	b.n	8000dec <main+0xf4>
			 }

			 full_channels++;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	e000      	b.n	8000ddc <main+0xe4>
				 continue;
 8000dda:	bf00      	nop
		 for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	3301      	adds	r3, #1
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	ddd1      	ble.n	8000d8c <main+0x94>
 8000de8:	e000      	b.n	8000dec <main+0xf4>
				 break;
 8000dea:	bf00      	nop
		 }

		 if(full_channels == channel_enabled_count){
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <main+0x160>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d107      	bne.n	8000e06 <main+0x10e>
			 SendData(usb_transmition_state);
 8000df6:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <main+0x158>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 f890 	bl	8001f20 <SendData>
			 usb_transmition_state = EMPTY;
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <main+0x158>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
		 }

		 if(current_packet_count >= target_packet_count) {
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <main+0x164>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <main+0x168>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	db02      	blt.n	8000e18 <main+0x120>
			 prog_state = REPORTING;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <main+0x148>)
 8000e14:	2206      	movs	r2, #6
 8000e16:	701a      	strb	r2, [r3, #0]
		 }
	  }
	  if(prog_state == REPORTING){
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <main+0x148>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d104      	bne.n	8000e2c <main+0x134>
		  SendTrasmissionReport();
 8000e22:	f001 f90b 	bl	800203c <SendTrasmissionReport>
		  prog_state = DONE;
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <main+0x148>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	701a      	strb	r2, [r3, #0]
	  }
	  if(prog_state == DONE){
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <main+0x148>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b07      	cmp	r3, #7
 8000e34:	f47f af7f 	bne.w	8000d36 <main+0x3e>

		  ResetStates();
 8000e38:	f001 f92e 	bl	8002098 <ResetStates>
	  if(prog_state == CFG_RECEIVED){
 8000e3c:	e77b      	b.n	8000d36 <main+0x3e>
 8000e3e:	bf00      	nop
 8000e40:	200027b4 	.word	0x200027b4
 8000e44:	200027e4 	.word	0x200027e4
 8000e48:	200027cc 	.word	0x200027cc
 8000e4c:	200027c4 	.word	0x200027c4
 8000e50:	200027c0 	.word	0x200027c0
 8000e54:	200027dc 	.word	0x200027dc
 8000e58:	200027c8 	.word	0x200027c8
 8000e5c:	20000768 	.word	0x20000768
 8000e60:	2000076c 	.word	0x2000076c

08000e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b094      	sub	sp, #80	; 0x50
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 0318 	add.w	r3, r7, #24
 8000e6e:	2238      	movs	r2, #56	; 0x38
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f00d feaf 	bl	800ebd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e86:	2000      	movs	r0, #0
 8000e88:	f006 ff9c 	bl	8007dc4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000e8c:	2321      	movs	r3, #33	; 0x21
 8000e8e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e94:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e96:	2301      	movs	r3, #1
 8000e98:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 78;
 8000ea6:	234e      	movs	r3, #78	; 0x4e
 8000ea8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000eaa:	2306      	movs	r3, #6
 8000eac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb6:	f107 0318 	add.w	r3, r7, #24
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f007 f836 	bl	8007f2c <HAL_RCC_OscConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ec6:	f001 f949 	bl	800215c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eca:	230f      	movs	r3, #15
 8000ecc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f007 fb34 	bl	8008550 <HAL_RCC_ClockConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000eee:	f001 f935 	bl	800215c <Error_Handler>
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3750      	adds	r7, #80	; 0x50
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	; 0x30
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2220      	movs	r2, #32
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f00d fe5e 	bl	800ebd6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f1a:	4b38      	ldr	r3, [pc, #224]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f22:	4b36      	ldr	r3, [pc, #216]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f28:	4b34      	ldr	r3, [pc, #208]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f2e:	4b33      	ldr	r3, [pc, #204]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f34:	4b31      	ldr	r3, [pc, #196]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f3a:	4b30      	ldr	r3, [pc, #192]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f40:	4b2e      	ldr	r3, [pc, #184]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f42:	2204      	movs	r2, #4
 8000f44:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f46:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f4c:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f52:	4b2a      	ldr	r3, [pc, #168]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f58:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000f60:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f62:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f68:	4b24      	ldr	r3, [pc, #144]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f6e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f70:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f78:	4b20      	ldr	r3, [pc, #128]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f88:	2210      	movs	r2, #16
 8000f8a:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f8e:	2220      	movs	r2, #32
 8000f90:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000f92:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f9e:	4817      	ldr	r0, [pc, #92]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000fa0:	f002 f86e 	bl	8003080 <HAL_ADC_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000faa:	f001 f8d7 	bl	800215c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4810      	ldr	r0, [pc, #64]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000fba:	f003 fa97 	bl	80044ec <HAL_ADCEx_MultiModeConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000fc4:	f001 f8ca 	bl	800215c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <MX_ADC1_Init+0x104>)
 8000fca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fcc:	2306      	movs	r3, #6
 8000fce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fd4:	237f      	movs	r3, #127	; 0x7f
 8000fd6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_ADC1_Init+0x100>)
 8000fe6:	f002 fb47 	bl	8003678 <HAL_ADC_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000ff0:	f001 f8b4 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	3730      	adds	r7, #48	; 0x30
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000384 	.word	0x20000384
 8001000:	04300002 	.word	0x04300002

08001004 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800100a:	463b      	mov	r3, r7
 800100c:	2220      	movs	r2, #32
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f00d fde0 	bl	800ebd6 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001016:	4b31      	ldr	r3, [pc, #196]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001018:	4a31      	ldr	r2, [pc, #196]	; (80010e0 <MX_ADC2_Init+0xdc>)
 800101a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800101c:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <MX_ADC2_Init+0xd8>)
 800101e:	2200      	movs	r2, #0
 8001020:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001022:	4b2e      	ldr	r3, [pc, #184]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001028:	4b2c      	ldr	r3, [pc, #176]	; (80010dc <MX_ADC2_Init+0xd8>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800102e:	4b2b      	ldr	r3, [pc, #172]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001034:	4b29      	ldr	r3, [pc, #164]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800103a:	4b28      	ldr	r3, [pc, #160]	; (80010dc <MX_ADC2_Init+0xd8>)
 800103c:	2204      	movs	r2, #4
 800103e:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001040:	4b26      	ldr	r3, [pc, #152]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001042:	2200      	movs	r2, #0
 8001044:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001046:	4b25      	ldr	r3, [pc, #148]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001048:	2200      	movs	r2, #0
 800104a:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800104c:	4b23      	ldr	r3, [pc, #140]	; (80010dc <MX_ADC2_Init+0xd8>)
 800104e:	2201      	movs	r2, #1
 8001050:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001052:	4b22      	ldr	r3, [pc, #136]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <MX_ADC2_Init+0xd8>)
 800105c:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8001060:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001064:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001068:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <MX_ADC2_Init+0xd8>)
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001074:	2200      	movs	r2, #0
 8001076:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <MX_ADC2_Init+0xd8>)
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001082:	2210      	movs	r2, #16
 8001084:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001088:	2220      	movs	r2, #32
 800108a:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <MX_ADC2_Init+0xd8>)
 800108e:	2200      	movs	r2, #0
 8001090:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001092:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MX_ADC2_Init+0xd8>)
 8001094:	2201      	movs	r2, #1
 8001096:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001098:	4810      	ldr	r0, [pc, #64]	; (80010dc <MX_ADC2_Init+0xd8>)
 800109a:	f001 fff1 	bl	8003080 <HAL_ADC_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 80010a4:	f001 f85a 	bl	800215c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_ADC2_Init+0xe0>)
 80010aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ac:	2306      	movs	r3, #6
 80010ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010b4:	237f      	movs	r3, #127	; 0x7f
 80010b6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010b8:	2304      	movs	r3, #4
 80010ba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010c0:	463b      	mov	r3, r7
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_ADC2_Init+0xd8>)
 80010c6:	f002 fad7 	bl	8003678 <HAL_ADC_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 80010d0:	f001 f844 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200003f0 	.word	0x200003f0
 80010e0:	50000100 	.word	0x50000100
 80010e4:	0c900008 	.word	0x0c900008

080010e8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2220      	movs	r2, #32
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f00d fd68 	bl	800ebd6 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001106:	4b38      	ldr	r3, [pc, #224]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001108:	4a38      	ldr	r2, [pc, #224]	; (80011ec <MX_ADC3_Init+0x104>)
 800110a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800110c:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <MX_ADC3_Init+0x100>)
 800110e:	2200      	movs	r2, #0
 8001110:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001112:	4b35      	ldr	r3, [pc, #212]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001118:	4b33      	ldr	r3, [pc, #204]	; (80011e8 <MX_ADC3_Init+0x100>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 800111e:	4b32      	ldr	r3, [pc, #200]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001124:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001126:	2200      	movs	r2, #0
 8001128:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112a:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <MX_ADC3_Init+0x100>)
 800112c:	2204      	movs	r2, #4
 800112e:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001130:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001132:	2200      	movs	r2, #0
 8001134:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001136:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001138:	2200      	movs	r2, #0
 800113a:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800113c:	4b2a      	ldr	r3, [pc, #168]	; (80011e8 <MX_ADC3_Init+0x100>)
 800113e:	2201      	movs	r2, #1
 8001140:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001142:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800114a:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <MX_ADC3_Init+0x100>)
 800114c:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8001150:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001152:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001154:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001158:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800115a:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <MX_ADC3_Init+0x100>)
 800115c:	2201      	movs	r2, #1
 800115e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001164:	2200      	movs	r2, #0
 8001166:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_ADC3_Init+0x100>)
 800116a:	2201      	movs	r2, #1
 800116c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001172:	2210      	movs	r2, #16
 8001174:	645a      	str	r2, [r3, #68]	; 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001178:	2220      	movs	r2, #32
 800117a:	649a      	str	r2, [r3, #72]	; 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_ADC3_Init+0x100>)
 800117e:	2200      	movs	r2, #0
 8001180:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_ADC3_Init+0x100>)
 8001184:	2201      	movs	r2, #1
 8001186:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001188:	4817      	ldr	r0, [pc, #92]	; (80011e8 <MX_ADC3_Init+0x100>)
 800118a:	f001 ff79 	bl	8003080 <HAL_ADC_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001194:	f000 ffe2 	bl	800215c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800119c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a0:	4619      	mov	r1, r3
 80011a2:	4811      	ldr	r0, [pc, #68]	; (80011e8 <MX_ADC3_Init+0x100>)
 80011a4:	f003 f9a2 	bl	80044ec <HAL_ADCEx_MultiModeConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_ADC3_Init+0xca>
  {
    Error_Handler();
 80011ae:	f000 ffd5 	bl	800215c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_ADC3_Init+0x108>)
 80011b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b6:	2306      	movs	r3, #6
 80011b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011be:	237f      	movs	r3, #127	; 0x7f
 80011c0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011c2:	2304      	movs	r3, #4
 80011c4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	4619      	mov	r1, r3
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <MX_ADC3_Init+0x100>)
 80011d0:	f002 fa52 	bl	8003678 <HAL_ADC_ConfigChannel>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_ADC3_Init+0xf6>
  {
    Error_Handler();
 80011da:	f000 ffbf 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	3730      	adds	r7, #48	; 0x30
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000045c 	.word	0x2000045c
 80011ec:	50000400 	.word	0x50000400
 80011f0:	04300002 	.word	0x04300002

080011f4 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011fa:	463b      	mov	r3, r7
 80011fc:	2220      	movs	r2, #32
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f00d fce8 	bl	800ebd6 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001206:	4b31      	ldr	r3, [pc, #196]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001208:	4a31      	ldr	r2, [pc, #196]	; (80012d0 <MX_ADC4_Init+0xdc>)
 800120a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800120c:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <MX_ADC4_Init+0xd8>)
 800120e:	2200      	movs	r2, #0
 8001210:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001218:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <MX_ADC4_Init+0xd8>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001224:	4b29      	ldr	r3, [pc, #164]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800122a:	4b28      	ldr	r3, [pc, #160]	; (80012cc <MX_ADC4_Init+0xd8>)
 800122c:	2204      	movs	r2, #4
 800122e:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001230:	4b26      	ldr	r3, [pc, #152]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001232:	2200      	movs	r2, #0
 8001234:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8001236:	4b25      	ldr	r3, [pc, #148]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001238:	2200      	movs	r2, #0
 800123a:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <MX_ADC4_Init+0xd8>)
 800123e:	2201      	movs	r2, #1
 8001240:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <MX_ADC4_Init+0xd8>)
 800124c:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8001250:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001252:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001254:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001258:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <MX_ADC4_Init+0xd8>)
 800125c:	2201      	movs	r2, #1
 800125e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001264:	2200      	movs	r2, #0
 8001266:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = ENABLE;
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <MX_ADC4_Init+0xd8>)
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc4.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001272:	2210      	movs	r2, #16
 8001274:	645a      	str	r2, [r3, #68]	; 0x44
  hadc4.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001278:	2220      	movs	r2, #32
 800127a:	649a      	str	r2, [r3, #72]	; 0x48
  hadc4.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_ADC4_Init+0xd8>)
 800127e:	2200      	movs	r2, #0
 8001280:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc4.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MX_ADC4_Init+0xd8>)
 8001284:	2201      	movs	r2, #1
 8001286:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001288:	4810      	ldr	r0, [pc, #64]	; (80012cc <MX_ADC4_Init+0xd8>)
 800128a:	f001 fef9 	bl	8003080 <HAL_ADC_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ADC4_Init+0xa4>
  {
    Error_Handler();
 8001294:	f000 ff62 	bl	800215c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001298:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_ADC4_Init+0xe0>)
 800129a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800129c:	2306      	movs	r3, #6
 800129e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012a4:	237f      	movs	r3, #127	; 0x7f
 80012a6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012a8:	2304      	movs	r3, #4
 80012aa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_ADC4_Init+0xd8>)
 80012b6:	f002 f9df 	bl	8003678 <HAL_ADC_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_ADC4_Init+0xd0>
  {
    Error_Handler();
 80012c0:	f000 ff4c 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200004c8 	.word	0x200004c8
 80012d0:	50000500 	.word	0x50000500
 80012d4:	14f00020 	.word	0x14f00020

080012d8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08c      	sub	sp, #48	; 0x30
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012de:	463b      	mov	r3, r7
 80012e0:	2230      	movs	r2, #48	; 0x30
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f00d fc76 	bl	800ebd6 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <MX_DAC1_Init+0x6c>)
 80012ec:	4a16      	ldr	r2, [pc, #88]	; (8001348 <MX_DAC1_Init+0x70>)
 80012ee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80012f0:	4814      	ldr	r0, [pc, #80]	; (8001344 <MX_DAC1_Init+0x6c>)
 80012f2:	f003 fb12 	bl	800491a <HAL_DAC_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80012fc:	f000 ff2e 	bl	800215c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001318:	2302      	movs	r3, #2
 800131a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800131c:	2301      	movs	r3, #1
 800131e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001324:	463b      	mov	r3, r7
 8001326:	2200      	movs	r2, #0
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	; (8001344 <MX_DAC1_Init+0x6c>)
 800132c:	f003 fbb2 	bl	8004a94 <HAL_DAC_ConfigChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001336:	f000 ff11 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	3730      	adds	r7, #48	; 0x30
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200006b4 	.word	0x200006b4
 8001348:	50000800 	.word	0x50000800

0800134c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <MX_I2C3_Init+0x74>)
 8001352:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <MX_I2C3_Init+0x78>)
 8001354:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x40707EB4;
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <MX_I2C3_Init+0x74>)
 8001358:	4a1b      	ldr	r2, [pc, #108]	; (80013c8 <MX_I2C3_Init+0x7c>)
 800135a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 144;
 800135c:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <MX_I2C3_Init+0x74>)
 800135e:	2290      	movs	r2, #144	; 0x90
 8001360:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001362:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <MX_I2C3_Init+0x74>)
 8001364:	2201      	movs	r2, #1
 8001366:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <MX_I2C3_Init+0x74>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800136e:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <MX_I2C3_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <MX_I2C3_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_I2C3_Init+0x74>)
 800137c:	2200      	movs	r2, #0
 800137e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <MX_I2C3_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001386:	480e      	ldr	r0, [pc, #56]	; (80013c0 <MX_I2C3_Init+0x74>)
 8001388:	f004 f9c5 	bl	8005716 <HAL_I2C_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001392:	f000 fee3 	bl	800215c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001396:	2100      	movs	r1, #0
 8001398:	4809      	ldr	r0, [pc, #36]	; (80013c0 <MX_I2C3_Init+0x74>)
 800139a:	f004 ff47 	bl	800622c <HAL_I2CEx_ConfigAnalogFilter>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80013a4:	f000 feda 	bl	800215c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80013a8:	2100      	movs	r1, #0
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_I2C3_Init+0x74>)
 80013ac:	f004 ff89 	bl	80062c2 <HAL_I2CEx_ConfigDigitalFilter>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80013b6:	f000 fed1 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200006c8 	.word	0x200006c8
 80013c4:	40007800 	.word	0x40007800
 80013c8:	40707eb4 	.word	0x40707eb4

080013cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ea:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <MX_TIM2_Init+0x94>)
 80013ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 156 - 1;
 80013f2:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <MX_TIM2_Init+0x94>)
 80013f4:	229b      	movs	r2, #155	; 0x9b
 80013f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <MX_TIM2_Init+0x94>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <MX_TIM2_Init+0x94>)
 8001400:	2209      	movs	r2, #9
 8001402:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <MX_TIM2_Init+0x94>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <MX_TIM2_Init+0x94>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001410:	4813      	ldr	r0, [pc, #76]	; (8001460 <MX_TIM2_Init+0x94>)
 8001412:	f007 fcdb 	bl	8008dcc <HAL_TIM_Base_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800141c:	f000 fe9e 	bl	800215c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001424:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	4619      	mov	r1, r3
 800142c:	480c      	ldr	r0, [pc, #48]	; (8001460 <MX_TIM2_Init+0x94>)
 800142e:	f007 fdcd 	bl	8008fcc <HAL_TIM_ConfigClockSource>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001438:	f000 fe90 	bl	800215c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800143c:	2320      	movs	r3, #32
 800143e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	4619      	mov	r1, r3
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_TIM2_Init+0x94>)
 800144a:	f008 f825 	bl	8009498 <HAL_TIMEx_MasterConfigSynchronization>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001454:	f000 fe82 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001458:	bf00      	nop
 800145a:	3720      	adds	r7, #32
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2000071c 	.word	0x2000071c

08001464 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800146a:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <MX_DMA_Init+0x80>)
 800146c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146e:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <MX_DMA_Init+0x80>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6493      	str	r3, [r2, #72]	; 0x48
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <MX_DMA_Init+0x80>)
 8001478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <MX_DMA_Init+0x80>)
 8001484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001486:	4a17      	ldr	r2, [pc, #92]	; (80014e4 <MX_DMA_Init+0x80>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6493      	str	r3, [r2, #72]	; 0x48
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <MX_DMA_Init+0x80>)
 8001490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	200b      	movs	r0, #11
 80014a0:	f003 fa07 	bl	80048b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014a4:	200b      	movs	r0, #11
 80014a6:	f003 fa1e 	bl	80048e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	200c      	movs	r0, #12
 80014b0:	f003 f9ff 	bl	80048b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014b4:	200c      	movs	r0, #12
 80014b6:	f003 fa16 	bl	80048e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	200d      	movs	r0, #13
 80014c0:	f003 f9f7 	bl	80048b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80014c4:	200d      	movs	r0, #13
 80014c6:	f003 fa0e 	bl	80048e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	200e      	movs	r0, #14
 80014d0:	f003 f9ef 	bl	80048b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80014d4:	200e      	movs	r0, #14
 80014d6:	f003 fa06 	bl	80048e6 <HAL_NVIC_EnableIRQ>

}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000

080014e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014fe:	4b4d      	ldr	r3, [pc, #308]	; (8001634 <MX_GPIO_Init+0x14c>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	4a4c      	ldr	r2, [pc, #304]	; (8001634 <MX_GPIO_Init+0x14c>)
 8001504:	f043 0320 	orr.w	r3, r3, #32
 8001508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150a:	4b4a      	ldr	r3, [pc, #296]	; (8001634 <MX_GPIO_Init+0x14c>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	f003 0320 	and.w	r3, r3, #32
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	4b47      	ldr	r3, [pc, #284]	; (8001634 <MX_GPIO_Init+0x14c>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	4a46      	ldr	r2, [pc, #280]	; (8001634 <MX_GPIO_Init+0x14c>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001522:	4b44      	ldr	r3, [pc, #272]	; (8001634 <MX_GPIO_Init+0x14c>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	4b41      	ldr	r3, [pc, #260]	; (8001634 <MX_GPIO_Init+0x14c>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	4a40      	ldr	r2, [pc, #256]	; (8001634 <MX_GPIO_Init+0x14c>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153a:	4b3e      	ldr	r3, [pc, #248]	; (8001634 <MX_GPIO_Init+0x14c>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	4b3b      	ldr	r3, [pc, #236]	; (8001634 <MX_GPIO_Init+0x14c>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	4a3a      	ldr	r2, [pc, #232]	; (8001634 <MX_GPIO_Init+0x14c>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001552:	4b38      	ldr	r3, [pc, #224]	; (8001634 <MX_GPIO_Init+0x14c>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ERRATA_FIX1_Pin|ERRATA_FIX2_Pin|ERRATA_FIX3_Pin|ERRATA_FIX4_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 41d8 	mov.w	r1, #27648	; 0x6c00
 8001564:	4834      	ldr	r0, [pc, #208]	; (8001638 <MX_GPIO_Init+0x150>)
 8001566:	f004 f89b 	bl	80056a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IND_LED_R_Pin|IND_LED_G_Pin|IND_LED_B_Pin, GPIO_PIN_SET);
 800156a:	2201      	movs	r2, #1
 800156c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001570:	4832      	ldr	r0, [pc, #200]	; (800163c <MX_GPIO_Init+0x154>)
 8001572:	f004 f895 	bl	80056a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ERRATA_FIX1_Pin ERRATA_FIX2_Pin ERRATA_FIX3_Pin ERRATA_FIX4_Pin */
  GPIO_InitStruct.Pin = ERRATA_FIX1_Pin|ERRATA_FIX2_Pin|ERRATA_FIX3_Pin|ERRATA_FIX4_Pin;
 8001576:	f44f 43d8 	mov.w	r3, #27648	; 0x6c00
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	482a      	ldr	r0, [pc, #168]	; (8001638 <MX_GPIO_Init+0x150>)
 8001590:	f003 ff04 	bl	800539c <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_ALERT_Pin */
  GPIO_InitStruct.Pin = TEMP_ALERT_Pin;
 8001594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_ALERT_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ac:	f003 fef6 	bl	800539c <HAL_GPIO_Init>

  /*Configure GPIO pins : IND_LED_R_Pin IND_LED_G_Pin IND_LED_B_Pin */
  GPIO_InitStruct.Pin = IND_LED_R_Pin|IND_LED_G_Pin|IND_LED_B_Pin;
 80015b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	481c      	ldr	r0, [pc, #112]	; (800163c <MX_GPIO_Init+0x154>)
 80015ca:	f003 fee7 	bl	800539c <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_SHORT_Pin */
  GPIO_InitStruct.Pin = TRIG_SHORT_Pin;
 80015ce:	2320      	movs	r3, #32
 80015d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_SHORT_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	4815      	ldr	r0, [pc, #84]	; (8001638 <MX_GPIO_Init+0x150>)
 80015e4:	f003 feda 	bl	800539c <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_EXT_2_Pin */
  GPIO_InitStruct.Pin = TRIG_EXT_2_Pin;
 80015e8:	2340      	movs	r3, #64	; 0x40
 80015ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015ec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f2:	2301      	movs	r3, #1
 80015f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_EXT_2_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	480e      	ldr	r0, [pc, #56]	; (8001638 <MX_GPIO_Init+0x150>)
 80015fe:	f003 fecd 	bl	800539c <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_EXT_1_Pin */
  GPIO_InitStruct.Pin = TRIG_EXT_1_Pin;
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001606:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800160a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800160c:	2302      	movs	r3, #2
 800160e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_EXT_1_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4619      	mov	r1, r3
 8001616:	4808      	ldr	r0, [pc, #32]	; (8001638 <MX_GPIO_Init+0x150>)
 8001618:	f003 fec0 	bl	800539c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2100      	movs	r1, #0
 8001620:	2017      	movs	r0, #23
 8001622:	f003 f946 	bl	80048b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001626:	2017      	movs	r0, #23
 8001628:	f003 f95d 	bl	80048e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800162c:	bf00      	nop
 800162e:	3728      	adds	r7, #40	; 0x28
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40021000 	.word	0x40021000
 8001638:	48000400 	.word	0x48000400
 800163c:	48000800 	.word	0x48000800

08001640 <InterpretConfig>:

/* USER CODE BEGIN 4 */

int InterpretConfig(void) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b0a6      	sub	sp, #152	; 0x98
 8001644:	af00      	add	r7, sp, #0
	char variable_name[CFG_VAR_SIZE];
	char variable_value[CFG_VAR_SIZE];
	memset(variable_name, 0, sizeof(variable_name));
 8001646:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800164a:	2240      	movs	r2, #64	; 0x40
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f00d fac1 	bl	800ebd6 <memset>
	memset(variable_value, 0, sizeof(variable_value));
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	2240      	movs	r2, #64	; 0x40
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f00d faba 	bl	800ebd6 <memset>
	int variable_name_indexes[2] = {0, 0};
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
	int variable_value_indexes[2] = {0, 0};
 800166a:	2300      	movs	r3, #0
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
	char reading_status = 'n';
 8001672:	236e      	movs	r3, #110	; 0x6e
 8001674:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	for(int i = 0; i < USB_RX_BUFFER_SIZE; i++){
 8001678:	2300      	movs	r3, #0
 800167a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800167e:	e077      	b.n	8001770 <InterpretConfig+0x130>
		if(rx_buffer[i] == '\0'){
 8001680:	4a42      	ldr	r2, [pc, #264]	; (800178c <InterpretConfig+0x14c>)
 8001682:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001686:	4413      	add	r3, r2
 8001688:	f993 3000 	ldrsb.w	r3, [r3]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d074      	beq.n	800177a <InterpretConfig+0x13a>
			break;
		}
		// Reading the variable name
		if(reading_status == 'n'){
 8001690:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001694:	2b6e      	cmp	r3, #110	; 0x6e
 8001696:	d112      	bne.n	80016be <InterpretConfig+0x7e>
			if(rx_buffer[i] == ':') {
 8001698:	4a3c      	ldr	r2, [pc, #240]	; (800178c <InterpretConfig+0x14c>)
 800169a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800169e:	4413      	add	r3, r2
 80016a0:	f993 3000 	ldrsb.w	r3, [r3]
 80016a4:	2b3a      	cmp	r3, #58	; 0x3a
 80016a6:	d15e      	bne.n	8001766 <InterpretConfig+0x126>
				variable_name_indexes[1] = i;
 80016a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016ac:	60fb      	str	r3, [r7, #12]
				variable_value_indexes[0] = i+1;
 80016ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016b2:	3301      	adds	r3, #1
 80016b4:	603b      	str	r3, [r7, #0]
				reading_status = 'v';
 80016b6:	2376      	movs	r3, #118	; 0x76
 80016b8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80016bc:	e053      	b.n	8001766 <InterpretConfig+0x126>
			}
		}
		// Reading the variable value
		else if(reading_status == 'v'){
 80016be:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80016c2:	2b76      	cmp	r3, #118	; 0x76
 80016c4:	d14f      	bne.n	8001766 <InterpretConfig+0x126>
			if(rx_buffer[i] == ';') {
 80016c6:	4a31      	ldr	r2, [pc, #196]	; (800178c <InterpretConfig+0x14c>)
 80016c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016cc:	4413      	add	r3, r2
 80016ce:	f993 3000 	ldrsb.w	r3, [r3]
 80016d2:	2b3b      	cmp	r3, #59	; 0x3b
 80016d4:	d147      	bne.n	8001766 <InterpretConfig+0x126>
				variable_value_indexes[1] = i;
 80016d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016da:	607b      	str	r3, [r7, #4]

				strncpy(variable_name, ((char*)rx_buffer + variable_name_indexes[0]), (variable_name_indexes[1] - variable_name_indexes[0]));
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	461a      	mov	r2, r3
 80016e0:	4b2a      	ldr	r3, [pc, #168]	; (800178c <InterpretConfig+0x14c>)
 80016e2:	18d1      	adds	r1, r2, r3
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	461a      	mov	r2, r3
 80016ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016f0:	4618      	mov	r0, r3
 80016f2:	f00d fa78 	bl	800ebe6 <strncpy>
				variable_name[variable_name_indexes[1] + 1] = '\0';
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	3301      	adds	r3, #1
 80016fa:	3398      	adds	r3, #152	; 0x98
 80016fc:	443b      	add	r3, r7
 80016fe:	2200      	movs	r2, #0
 8001700:	f803 2c48 	strb.w	r2, [r3, #-72]
				strncpy(variable_value, ((char*)rx_buffer + variable_value_indexes[0]), (variable_value_indexes[1] - variable_value_indexes[0]));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	4b20      	ldr	r3, [pc, #128]	; (800178c <InterpretConfig+0x14c>)
 800170a:	18d1      	adds	r1, r2, r3
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	461a      	mov	r2, r3
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4618      	mov	r0, r3
 800171a:	f00d fa64 	bl	800ebe6 <strncpy>
				variable_value[variable_value_indexes[1] + 1] = '\0';
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3301      	adds	r3, #1
 8001722:	3398      	adds	r3, #152	; 0x98
 8001724:	443b      	add	r3, r7
 8001726:	2200      	movs	r2, #0
 8001728:	f803 2c88 	strb.w	r2, [r3, #-136]

				InterpretVariable(variable_name, variable_value);
 800172c:	f107 0210 	add.w	r2, r7, #16
 8001730:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001734:	4611      	mov	r1, r2
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f82c 	bl	8001794 <InterpretVariable>
				memset(variable_name, 0, sizeof(variable_name));
 800173c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001740:	2240      	movs	r2, #64	; 0x40
 8001742:	2100      	movs	r1, #0
 8001744:	4618      	mov	r0, r3
 8001746:	f00d fa46 	bl	800ebd6 <memset>
				memset(variable_value, 0, sizeof(variable_value));
 800174a:	f107 0310 	add.w	r3, r7, #16
 800174e:	2240      	movs	r2, #64	; 0x40
 8001750:	2100      	movs	r1, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f00d fa3f 	bl	800ebd6 <memset>
				variable_name_indexes[0] = i + 1;
 8001758:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800175c:	3301      	adds	r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
				reading_status = 'n';
 8001760:	236e      	movs	r3, #110	; 0x6e
 8001762:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	for(int i = 0; i < USB_RX_BUFFER_SIZE; i++){
 8001766:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800176a:	3301      	adds	r3, #1
 800176c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001770:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001774:	2bff      	cmp	r3, #255	; 0xff
 8001776:	dd83      	ble.n	8001680 <InterpretConfig+0x40>
 8001778:	e000      	b.n	800177c <InterpretConfig+0x13c>
			break;
 800177a:	bf00      	nop
			}
		}
	}

	prog_state = CFG_INTERPRETED;
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <InterpretConfig+0x150>)
 800177e:	2202      	movs	r2, #2
 8001780:	701a      	strb	r2, [r3, #0]
	return 1;
 8001782:	2301      	movs	r3, #1
}
 8001784:	4618      	mov	r0, r3
 8001786:	3798      	adds	r7, #152	; 0x98
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200026b4 	.word	0x200026b4
 8001790:	200027b4 	.word	0x200027b4

08001794 <InterpretVariable>:

int InterpretVariable(char name[CFG_VAR_SIZE], char value[CFG_VAR_SIZE]) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
	if(strcmp(name, "RecLen") == 0) {
 800179e:	4931      	ldr	r1, [pc, #196]	; (8001864 <InterpretVariable+0xd0>)
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7fe fd3d 	bl	8000220 <strcmp>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d107      	bne.n	80017bc <InterpretVariable+0x28>
		record_length_ms = (uint16_t)atoi(value);
 80017ac:	6838      	ldr	r0, [r7, #0]
 80017ae:	f00c fbf7 	bl	800dfa0 <atoi>
 80017b2:	4603      	mov	r3, r0
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <InterpretVariable+0xd4>)
 80017b8:	801a      	strh	r2, [r3, #0]
 80017ba:	e04e      	b.n	800185a <InterpretVariable+0xc6>
	}
	else if(strcmp(name, "RecInt") == 0) {
 80017bc:	492b      	ldr	r1, [pc, #172]	; (800186c <InterpretVariable+0xd8>)
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7fe fd2e 	bl	8000220 <strcmp>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d107      	bne.n	80017da <InterpretVariable+0x46>
		record_interval_us = (uint16_t)atoi(value);
 80017ca:	6838      	ldr	r0, [r7, #0]
 80017cc:	f00c fbe8 	bl	800dfa0 <atoi>
 80017d0:	4603      	mov	r3, r0
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	4b26      	ldr	r3, [pc, #152]	; (8001870 <InterpretVariable+0xdc>)
 80017d6:	801a      	strh	r2, [r3, #0]
 80017d8:	e03f      	b.n	800185a <InterpretVariable+0xc6>
	}
	else if(strcmp(name, "TcType") == 0) {
 80017da:	4926      	ldr	r1, [pc, #152]	; (8001874 <InterpretVariable+0xe0>)
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7fe fd1f 	bl	8000220 <strcmp>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d104      	bne.n	80017f2 <InterpretVariable+0x5e>
		tc_type = value[0];
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	781a      	ldrb	r2, [r3, #0]
 80017ec:	4b22      	ldr	r3, [pc, #136]	; (8001878 <InterpretVariable+0xe4>)
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	e033      	b.n	800185a <InterpretVariable+0xc6>
	}
	else if(strcmp(name, "EnChan") == 0) {
 80017f2:	4922      	ldr	r1, [pc, #136]	; (800187c <InterpretVariable+0xe8>)
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7fe fd13 	bl	8000220 <strcmp>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d12c      	bne.n	800185a <InterpretVariable+0xc6>
		int channel_index = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
		char *channel_status = strtok(value, "|");
 8001804:	491e      	ldr	r1, [pc, #120]	; (8001880 <InterpretVariable+0xec>)
 8001806:	6838      	ldr	r0, [r7, #0]
 8001808:	f00d fa00 	bl	800ec0c <strtok>
 800180c:	6138      	str	r0, [r7, #16]

		while(channel_status != NULL) {
 800180e:	e00f      	b.n	8001830 <InterpretVariable+0x9c>
			channel_enabled_status[channel_index] = channel_status[0] - '0';
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	3b30      	subs	r3, #48	; 0x30
 8001816:	4619      	mov	r1, r3
 8001818:	4a1a      	ldr	r2, [pc, #104]	; (8001884 <InterpretVariable+0xf0>)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			channel_status = strtok(NULL, "|");
 8001820:	4917      	ldr	r1, [pc, #92]	; (8001880 <InterpretVariable+0xec>)
 8001822:	2000      	movs	r0, #0
 8001824:	f00d f9f2 	bl	800ec0c <strtok>
 8001828:	6138      	str	r0, [r7, #16]
			channel_index++;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3301      	adds	r3, #1
 800182e:	617b      	str	r3, [r7, #20]
		while(channel_status != NULL) {
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1ec      	bne.n	8001810 <InterpretVariable+0x7c>
		}

		for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	e00b      	b.n	8001854 <InterpretVariable+0xc0>
			channel_enabled_count += channel_enabled_status[i];
 800183c:	4a11      	ldr	r2, [pc, #68]	; (8001884 <InterpretVariable+0xf0>)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001844:	4b10      	ldr	r3, [pc, #64]	; (8001888 <InterpretVariable+0xf4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4413      	add	r3, r2
 800184a:	4a0f      	ldr	r2, [pc, #60]	; (8001888 <InterpretVariable+0xf4>)
 800184c:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3301      	adds	r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b03      	cmp	r3, #3
 8001858:	ddf0      	ble.n	800183c <InterpretVariable+0xa8>
		}
	}

	return 1;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	08011d30 	.word	0x08011d30
 8001868:	20000004 	.word	0x20000004
 800186c:	08011d38 	.word	0x08011d38
 8001870:	20000006 	.word	0x20000006
 8001874:	08011d40 	.word	0x08011d40
 8001878:	20000008 	.word	0x20000008
 800187c:	08011d48 	.word	0x08011d48
 8001880:	08011d50 	.word	0x08011d50
 8001884:	200027cc 	.word	0x200027cc
 8001888:	200027c8 	.word	0x200027c8
 800188c:	00000000 	.word	0x00000000

08001890 <SetupMeasurement>:

int SetupMeasurement(void){
 8001890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001894:	b090      	sub	sp, #64	; 0x40
 8001896:	af04      	add	r7, sp, #16
	// > Set the correct analog reference voltage and get the relevant coefficients

	const double *used_coefficients;
	uint8_t coefficients_count;
	if(tc_type == 'E') {
 8001898:	4b5d      	ldr	r3, [pc, #372]	; (8001a10 <SetupMeasurement+0x180>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b45      	cmp	r3, #69	; 0x45
 800189e:	d10b      	bne.n	80018b8 <SetupMeasurement+0x28>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2); // 2.9V
 80018a0:	2020      	movs	r0, #32
 80018a2:	f001 f935 	bl	8002b10 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		analog_reference_voltage = 2.9;
 80018a6:	4b5b      	ldr	r3, [pc, #364]	; (8001a14 <SetupMeasurement+0x184>)
 80018a8:	4a5b      	ldr	r2, [pc, #364]	; (8001a18 <SetupMeasurement+0x188>)
 80018aa:	601a      	str	r2, [r3, #0]
		used_coefficients = type_e_coefficients;
 80018ac:	4b5b      	ldr	r3, [pc, #364]	; (8001a1c <SetupMeasurement+0x18c>)
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
		coefficients_count = type_e_coefficients_count;
 80018b0:	230e      	movs	r3, #14
 80018b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80018b6:	e02e      	b.n	8001916 <SetupMeasurement+0x86>
	}
	else if(tc_type == 'J') {
 80018b8:	4b55      	ldr	r3, [pc, #340]	; (8001a10 <SetupMeasurement+0x180>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b4a      	cmp	r3, #74	; 0x4a
 80018be:	d10b      	bne.n	80018d8 <SetupMeasurement+0x48>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1); // 2.5V
 80018c0:	2010      	movs	r0, #16
 80018c2:	f001 f925 	bl	8002b10 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		analog_reference_voltage = 2.5;
 80018c6:	4b53      	ldr	r3, [pc, #332]	; (8001a14 <SetupMeasurement+0x184>)
 80018c8:	4a55      	ldr	r2, [pc, #340]	; (8001a20 <SetupMeasurement+0x190>)
 80018ca:	601a      	str	r2, [r3, #0]
		used_coefficients = type_j_coefficients;
 80018cc:	4b55      	ldr	r3, [pc, #340]	; (8001a24 <SetupMeasurement+0x194>)
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
		coefficients_count = type_j_coefficients_count;
 80018d0:	2309      	movs	r3, #9
 80018d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80018d6:	e01e      	b.n	8001916 <SetupMeasurement+0x86>
	}
	else if(tc_type == 'K') {
 80018d8:	4b4d      	ldr	r3, [pc, #308]	; (8001a10 <SetupMeasurement+0x180>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b4b      	cmp	r3, #75	; 0x4b
 80018de:	d10b      	bne.n	80018f8 <SetupMeasurement+0x68>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0); // 2.048V
 80018e0:	2000      	movs	r0, #0
 80018e2:	f001 f915 	bl	8002b10 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		analog_reference_voltage = 2.048;
 80018e6:	4b4b      	ldr	r3, [pc, #300]	; (8001a14 <SetupMeasurement+0x184>)
 80018e8:	4a4f      	ldr	r2, [pc, #316]	; (8001a28 <SetupMeasurement+0x198>)
 80018ea:	601a      	str	r2, [r3, #0]
		used_coefficients = type_k_coefficients;
 80018ec:	4b4f      	ldr	r3, [pc, #316]	; (8001a2c <SetupMeasurement+0x19c>)
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		coefficients_count = type_k_coefficients_count;
 80018f0:	230b      	movs	r3, #11
 80018f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80018f6:	e00e      	b.n	8001916 <SetupMeasurement+0x86>
	}
	else if(tc_type == 'T') {
 80018f8:	4b45      	ldr	r3, [pc, #276]	; (8001a10 <SetupMeasurement+0x180>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b54      	cmp	r3, #84	; 0x54
 80018fe:	d10a      	bne.n	8001916 <SetupMeasurement+0x86>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0); // 2.048V
 8001900:	2000      	movs	r0, #0
 8001902:	f001 f905 	bl	8002b10 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		analog_reference_voltage = 2.048;
 8001906:	4b43      	ldr	r3, [pc, #268]	; (8001a14 <SetupMeasurement+0x184>)
 8001908:	4a47      	ldr	r2, [pc, #284]	; (8001a28 <SetupMeasurement+0x198>)
 800190a:	601a      	str	r2, [r3, #0]
		used_coefficients = type_t_coefficients;
 800190c:	4b48      	ldr	r3, [pc, #288]	; (8001a30 <SetupMeasurement+0x1a0>)
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
		coefficients_count = type_t_coefficients_count;
 8001910:	230f      	movs	r3, #15
 8001912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	}

	// > Calculate and set ADC sync timer
	__HAL_TIM_SET_AUTORELOAD(&htim2, record_interval_us - 1);
 8001916:	4b47      	ldr	r3, [pc, #284]	; (8001a34 <SetupMeasurement+0x1a4>)
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	1e5a      	subs	r2, r3, #1
 800191c:	4b46      	ldr	r3, [pc, #280]	; (8001a38 <SetupMeasurement+0x1a8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	62da      	str	r2, [r3, #44]	; 0x2c
 8001922:	4b44      	ldr	r3, [pc, #272]	; (8001a34 <SetupMeasurement+0x1a4>)
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	3b01      	subs	r3, #1
 8001928:	461a      	mov	r2, r3
 800192a:	4b43      	ldr	r3, [pc, #268]	; (8001a38 <SetupMeasurement+0x1a8>)
 800192c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(&htim2, record_interval_us - 1);
 800192e:	4b41      	ldr	r3, [pc, #260]	; (8001a34 <SetupMeasurement+0x1a4>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	1e5a      	subs	r2, r3, #1
 8001934:	4b40      	ldr	r3, [pc, #256]	; (8001a38 <SetupMeasurement+0x1a8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	625a      	str	r2, [r3, #36]	; 0x24

	// > Calculate and set DAC value

	// Initiate a one shot temperature conversion
	uint8_t one_shot_conversion_command = 0b01000100;
 800193a:	2344      	movs	r3, #68	; 0x44
 800193c:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(&hi2c3, (TEMP_SENSOR_ADDR << 1), 0x1, I2C_MEMADD_SIZE_8BIT, &one_shot_conversion_command, 1, HAL_MAX_DELAY);
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
 8001942:	9302      	str	r3, [sp, #8]
 8001944:	2301      	movs	r3, #1
 8001946:	9301      	str	r3, [sp, #4]
 8001948:	1cfb      	adds	r3, r7, #3
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	2301      	movs	r3, #1
 800194e:	2201      	movs	r2, #1
 8001950:	2190      	movs	r1, #144	; 0x90
 8001952:	483a      	ldr	r0, [pc, #232]	; (8001a3c <SetupMeasurement+0x1ac>)
 8001954:	f003 ff7a 	bl	800584c <HAL_I2C_Mem_Write>
	// Read the temperature
	uint8_t temp_buffer[2];
	HAL_I2C_Mem_Read(&hi2c3, (TEMP_SENSOR_ADDR << 1), 0x0, I2C_MEMADD_SIZE_8BIT, temp_buffer, 2, HAL_MAX_DELAY);
 8001958:	f04f 33ff 	mov.w	r3, #4294967295
 800195c:	9302      	str	r3, [sp, #8]
 800195e:	2302      	movs	r3, #2
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	463b      	mov	r3, r7
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2301      	movs	r3, #1
 8001968:	2200      	movs	r2, #0
 800196a:	2190      	movs	r1, #144	; 0x90
 800196c:	4833      	ldr	r0, [pc, #204]	; (8001a3c <SetupMeasurement+0x1ac>)
 800196e:	f004 f881 	bl	8005a74 <HAL_I2C_Mem_Read>

	// Calculate the temperature in C
	uint8_t negative_temperature_flag = temp_buffer[0] >> 7;
 8001972:	783b      	ldrb	r3, [r7, #0]
 8001974:	09db      	lsrs	r3, r3, #7
 8001976:	76fb      	strb	r3, [r7, #27]
	temp_buffer[0] &= 0b01111111;
 8001978:	783b      	ldrb	r3, [r7, #0]
 800197a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800197e:	b2db      	uxtb	r3, r3
 8001980:	703b      	strb	r3, [r7, #0]
	uint16_t sensor_output = (temp_buffer[0] << 2) | (temp_buffer[1] >> 6);
 8001982:	783b      	ldrb	r3, [r7, #0]
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	b21a      	sxth	r2, r3
 8001988:	787b      	ldrb	r3, [r7, #1]
 800198a:	099b      	lsrs	r3, r3, #6
 800198c:	b2db      	uxtb	r3, r3
 800198e:	b21b      	sxth	r3, r3
 8001990:	4313      	orrs	r3, r2
 8001992:	b21b      	sxth	r3, r3
 8001994:	833b      	strh	r3, [r7, #24]

	if(negative_temperature_flag) {
 8001996:	7efb      	ldrb	r3, [r7, #27]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d014      	beq.n	80019c6 <SetupMeasurement+0x136>
		cold_junction_temp = (sensor_output - 512)/4.0;
 800199c:	8b3b      	ldrh	r3, [r7, #24]
 800199e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fdf6 	bl	8000594 <__aeabi_i2d>
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <SetupMeasurement+0x1b0>)
 80019ae:	f7fe ff85 	bl	80008bc <__aeabi_ddiv>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	f7ff f94d 	bl	8000c58 <__aeabi_d2f>
 80019be:	4603      	mov	r3, r0
 80019c0:	4a20      	ldr	r2, [pc, #128]	; (8001a44 <SetupMeasurement+0x1b4>)
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e011      	b.n	80019ea <SetupMeasurement+0x15a>
	}
	else{
		cold_junction_temp = (sensor_output)/4.0;
 80019c6:	8b3b      	ldrh	r3, [r7, #24]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fde3 	bl	8000594 <__aeabi_i2d>
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <SetupMeasurement+0x1b0>)
 80019d4:	f7fe ff72 	bl	80008bc <__aeabi_ddiv>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	f7ff f93a 	bl	8000c58 <__aeabi_d2f>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4a17      	ldr	r2, [pc, #92]	; (8001a44 <SetupMeasurement+0x1b4>)
 80019e8:	6013      	str	r3, [r2, #0]
	}

	// Calculate the required DAC offset
	float cjc_offset_temperature = MINIMUM_TEMPERATURE - cold_junction_temp;
 80019ea:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <SetupMeasurement+0x1b4>)
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80019f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f8:	edc7 7a05 	vstr	s15, [r7, #20]
	double cjc_offset_voltage = 0;
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for(int i = 0; i < coefficients_count; i++) {
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
 8001a0c:	e045      	b.n	8001a9a <SetupMeasurement+0x20a>
 8001a0e:	bf00      	nop
 8001a10:	20000008 	.word	0x20000008
 8001a14:	20000000 	.word	0x20000000
 8001a18:	4039999a 	.word	0x4039999a
 8001a1c:	08011ef0 	.word	0x08011ef0
 8001a20:	40200000 	.word	0x40200000
 8001a24:	08011dd8 	.word	0x08011dd8
 8001a28:	4003126f 	.word	0x4003126f
 8001a2c:	08011e20 	.word	0x08011e20
 8001a30:	08011e78 	.word	0x08011e78
 8001a34:	20000006 	.word	0x20000006
 8001a38:	2000071c 	.word	0x2000071c
 8001a3c:	200006c8 	.word	0x200006c8
 8001a40:	40100000 	.word	0x40100000
 8001a44:	200027b8 	.word	0x200027b8
		cjc_offset_voltage += used_coefficients[i] * pow(cjc_offset_temperature, i);
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a4e:	4413      	add	r3, r2
 8001a50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001a54:	6978      	ldr	r0, [r7, #20]
 8001a56:	f7fe fdaf 	bl	80005b8 <__aeabi_f2d>
 8001a5a:	4682      	mov	sl, r0
 8001a5c:	468b      	mov	fp, r1
 8001a5e:	69f8      	ldr	r0, [r7, #28]
 8001a60:	f7fe fd98 	bl	8000594 <__aeabi_i2d>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	ec43 2b11 	vmov	d1, r2, r3
 8001a6c:	ec4b ab10 	vmov	d0, sl, fp
 8001a70:	f00f fa1a 	bl	8010ea8 <pow>
 8001a74:	ec53 2b10 	vmov	r2, r3, d0
 8001a78:	4640      	mov	r0, r8
 8001a7a:	4649      	mov	r1, r9
 8001a7c:	f7fe fdf4 	bl	8000668 <__aeabi_dmul>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a88:	f7fe fc38 	bl	80002fc <__adddf3>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for(int i = 0; i < coefficients_count; i++) {
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	3301      	adds	r3, #1
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	dbd1      	blt.n	8001a48 <SetupMeasurement+0x1b8>
	}

	double total_offset_calc = INAMP_OUTPUT_BUFFER_OFFSET + ((-1) * (cjc_offset_voltage * pow(10, -6)) * INAMP_GAIN);
 8001aa4:	a38f      	add	r3, pc, #572	; (adr r3, 8001ce4 <SetupMeasurement+0x454>)
 8001aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aaa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001aae:	f7fe fddb 	bl	8000668 <__aeabi_dmul>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4614      	mov	r4, r2
 8001ab8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001abc:	a38b      	add	r3, pc, #556	; (adr r3, 8001cec <SetupMeasurement+0x45c>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	f7fe fdcf 	bl	8000668 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	a388      	add	r3, pc, #544	; (adr r3, 8001cf4 <SetupMeasurement+0x464>)
 8001ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad8:	f7fe fc10 	bl	80002fc <__adddf3>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t offset = (uint32_t)(total_offset_calc * 4096) / analog_reference_voltage;
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	4b69      	ldr	r3, [pc, #420]	; (8001c90 <SetupMeasurement+0x400>)
 8001aea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001aee:	f7fe fdbb 	bl	8000668 <__aeabi_dmul>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	f7ff f88d 	bl	8000c18 <__aeabi_d2uiz>
 8001afe:	ee07 0a90 	vmov	s15, r0
 8001b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b06:	4b63      	ldr	r3, [pc, #396]	; (8001c94 <SetupMeasurement+0x404>)
 8001b08:	ed93 7a00 	vldr	s14, [r3]
 8001b0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b14:	ee17 3a90 	vmov	r3, s15
 8001b18:	607b      	str	r3, [r7, #4]
	applied_voltage_offset = (float)(offset * analog_reference_voltage) / 4096;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	ee07 3a90 	vmov	s15, r3
 8001b20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b24:	4b5b      	ldr	r3, [pc, #364]	; (8001c94 <SetupMeasurement+0x404>)
 8001b26:	edd3 7a00 	vldr	s15, [r3]
 8001b2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b2e:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8001c98 <SetupMeasurement+0x408>
 8001b32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b36:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <SetupMeasurement+0x40c>)
 8001b38:	edc3 7a00 	vstr	s15, [r3]

	// Set the DAC voltage
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, offset);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2100      	movs	r1, #0
 8001b42:	4857      	ldr	r0, [pc, #348]	; (8001ca0 <SetupMeasurement+0x410>)
 8001b44:	f002 ff78 	bl	8004a38 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4855      	ldr	r0, [pc, #340]	; (8001ca0 <SetupMeasurement+0x410>)
 8001b4c:	f002 ff08 	bl	8004960 <HAL_DAC_Start>


	// Calculate the target packet number
	target_packet_count = (record_length_ms * 1000.0 / record_interval_us) / (ADC_BUFFER_SIZE / 2);
 8001b50:	4b54      	ldr	r3, [pc, #336]	; (8001ca4 <SetupMeasurement+0x414>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fd1d 	bl	8000594 <__aeabi_i2d>
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	4b52      	ldr	r3, [pc, #328]	; (8001ca8 <SetupMeasurement+0x418>)
 8001b60:	f7fe fd82 	bl	8000668 <__aeabi_dmul>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4614      	mov	r4, r2
 8001b6a:	461d      	mov	r5, r3
 8001b6c:	4b4f      	ldr	r3, [pc, #316]	; (8001cac <SetupMeasurement+0x41c>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fd0f 	bl	8000594 <__aeabi_i2d>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	f7fe fe9d 	bl	80008bc <__aeabi_ddiv>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	4b48      	ldr	r3, [pc, #288]	; (8001cb0 <SetupMeasurement+0x420>)
 8001b90:	f7fe fe94 	bl	80008bc <__aeabi_ddiv>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f7ff f814 	bl	8000bc8 <__aeabi_d2iz>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4a44      	ldr	r2, [pc, #272]	; (8001cb4 <SetupMeasurement+0x424>)
 8001ba4:	6013      	str	r3, [r2, #0]
	if((int)(record_length_ms * 1000.0 / record_interval_us) % (ADC_BUFFER_SIZE / 2) != 0){
 8001ba6:	4b3f      	ldr	r3, [pc, #252]	; (8001ca4 <SetupMeasurement+0x414>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fcf2 	bl	8000594 <__aeabi_i2d>
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	4b3c      	ldr	r3, [pc, #240]	; (8001ca8 <SetupMeasurement+0x418>)
 8001bb6:	f7fe fd57 	bl	8000668 <__aeabi_dmul>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4614      	mov	r4, r2
 8001bc0:	461d      	mov	r5, r3
 8001bc2:	4b3a      	ldr	r3, [pc, #232]	; (8001cac <SetupMeasurement+0x41c>)
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fce4 	bl	8000594 <__aeabi_i2d>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	f7fe fe72 	bl	80008bc <__aeabi_ddiv>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	f7fe fff2 	bl	8000bc8 <__aeabi_d2iz>
 8001be4:	4602      	mov	r2, r0
 8001be6:	4b34      	ldr	r3, [pc, #208]	; (8001cb8 <SetupMeasurement+0x428>)
 8001be8:	fb83 1302 	smull	r1, r3, r3, r2
 8001bec:	1159      	asrs	r1, r3, #5
 8001bee:	17d3      	asrs	r3, r2, #31
 8001bf0:	1acb      	subs	r3, r1, r3
 8001bf2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001bf6:	fb01 f303 	mul.w	r3, r1, r3
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d004      	beq.n	8001c0a <SetupMeasurement+0x37a>
		target_packet_count += 1;
 8001c00:	4b2c      	ldr	r3, [pc, #176]	; (8001cb4 <SetupMeasurement+0x424>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	3301      	adds	r3, #1
 8001c06:	4a2b      	ldr	r2, [pc, #172]	; (8001cb4 <SetupMeasurement+0x424>)
 8001c08:	6013      	str	r3, [r2, #0]
	}

	// Setup ADCs
	if(channel_enabled_status[0]){
 8001c0a:	4b2c      	ldr	r3, [pc, #176]	; (8001cbc <SetupMeasurement+0x42c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d009      	beq.n	8001c26 <SetupMeasurement+0x396>
		HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001c12:	217f      	movs	r1, #127	; 0x7f
 8001c14:	482a      	ldr	r0, [pc, #168]	; (8001cc0 <SetupMeasurement+0x430>)
 8001c16:	f002 fc07 	bl	8004428 <HAL_ADCEx_Calibration_Start>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffers[0], ADC_BUFFER_SIZE);
 8001c1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c1e:	4929      	ldr	r1, [pc, #164]	; (8001cc4 <SetupMeasurement+0x434>)
 8001c20:	4827      	ldr	r0, [pc, #156]	; (8001cc0 <SetupMeasurement+0x430>)
 8001c22:	f001 fbe9 	bl	80033f8 <HAL_ADC_Start_DMA>
	}
	if(channel_enabled_status[1]){
 8001c26:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <SetupMeasurement+0x42c>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d009      	beq.n	8001c42 <SetupMeasurement+0x3b2>
		HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001c2e:	217f      	movs	r1, #127	; 0x7f
 8001c30:	4825      	ldr	r0, [pc, #148]	; (8001cc8 <SetupMeasurement+0x438>)
 8001c32:	f002 fbf9 	bl	8004428 <HAL_ADCEx_Calibration_Start>
		HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_buffers[1], ADC_BUFFER_SIZE);
 8001c36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c3a:	4924      	ldr	r1, [pc, #144]	; (8001ccc <SetupMeasurement+0x43c>)
 8001c3c:	4822      	ldr	r0, [pc, #136]	; (8001cc8 <SetupMeasurement+0x438>)
 8001c3e:	f001 fbdb 	bl	80033f8 <HAL_ADC_Start_DMA>
	}
	if(channel_enabled_status[2]){
 8001c42:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <SetupMeasurement+0x42c>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d009      	beq.n	8001c5e <SetupMeasurement+0x3ce>
		HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8001c4a:	217f      	movs	r1, #127	; 0x7f
 8001c4c:	4820      	ldr	r0, [pc, #128]	; (8001cd0 <SetupMeasurement+0x440>)
 8001c4e:	f002 fbeb 	bl	8004428 <HAL_ADCEx_Calibration_Start>
		HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc_buffers[2], ADC_BUFFER_SIZE);
 8001c52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c56:	491f      	ldr	r1, [pc, #124]	; (8001cd4 <SetupMeasurement+0x444>)
 8001c58:	481d      	ldr	r0, [pc, #116]	; (8001cd0 <SetupMeasurement+0x440>)
 8001c5a:	f001 fbcd 	bl	80033f8 <HAL_ADC_Start_DMA>
	}
	if(channel_enabled_status[3]){
 8001c5e:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <SetupMeasurement+0x42c>)
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d009      	beq.n	8001c7a <SetupMeasurement+0x3ea>
		HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8001c66:	217f      	movs	r1, #127	; 0x7f
 8001c68:	481b      	ldr	r0, [pc, #108]	; (8001cd8 <SetupMeasurement+0x448>)
 8001c6a:	f002 fbdd 	bl	8004428 <HAL_ADCEx_Calibration_Start>
		HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc_buffers[3], ADC_BUFFER_SIZE);
 8001c6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c72:	491a      	ldr	r1, [pc, #104]	; (8001cdc <SetupMeasurement+0x44c>)
 8001c74:	4818      	ldr	r0, [pc, #96]	; (8001cd8 <SetupMeasurement+0x448>)
 8001c76:	f001 fbbf 	bl	80033f8 <HAL_ADC_Start_DMA>
	}

	prog_state = PARAMETERS_SET;
 8001c7a:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <SetupMeasurement+0x450>)
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	701a      	strb	r2, [r3, #0]
	return 1;
 8001c80:	2301      	movs	r3, #1
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3730      	adds	r7, #48	; 0x30
 8001c86:	46bd      	mov	sp, r7
 8001c88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c8c:	f3af 8000 	nop.w
 8001c90:	40b00000 	.word	0x40b00000
 8001c94:	20000000 	.word	0x20000000
 8001c98:	45800000 	.word	0x45800000
 8001c9c:	200027bc 	.word	0x200027bc
 8001ca0:	200006b4 	.word	0x200006b4
 8001ca4:	20000004 	.word	0x20000004
 8001ca8:	408f4000 	.word	0x408f4000
 8001cac:	20000006 	.word	0x20000006
 8001cb0:	407f4000 	.word	0x407f4000
 8001cb4:	2000076c 	.word	0x2000076c
 8001cb8:	10624dd3 	.word	0x10624dd3
 8001cbc:	200027cc 	.word	0x200027cc
 8001cc0:	20000384 	.word	0x20000384
 8001cc4:	20000774 	.word	0x20000774
 8001cc8:	200003f0 	.word	0x200003f0
 8001ccc:	20000f44 	.word	0x20000f44
 8001cd0:	2000045c 	.word	0x2000045c
 8001cd4:	20001714 	.word	0x20001714
 8001cd8:	200004c8 	.word	0x200004c8
 8001cdc:	20001ee4 	.word	0x20001ee4
 8001ce0:	200027b4 	.word	0x200027b4
 8001ce4:	a0b5ed8d 	.word	0xa0b5ed8d
 8001ce8:	3eb0c6f7 	.word	0x3eb0c6f7
 8001cec:	e6d1d609 	.word	0xe6d1d609
 8001cf0:	4066aa7d 	.word	0x4066aa7d
 8001cf4:	9999999a 	.word	0x9999999a
 8001cf8:	3fc99999 	.word	0x3fc99999

08001cfc <SendParameters>:

int SendParameters(void) {
 8001cfc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d00:	b0c8      	sub	sp, #288	; 0x120
 8001d02:	af06      	add	r7, sp, #24
	unsigned char parameters_msg[PARAMETERS_MSG_SIZE];

	sprintf((char *)parameters_msg, "CjcTmp:%.2f;AlgRfr:%.3f;AplOfs:%.4f;AdcBuf:%d;PktCnt:%d\n",
 8001d04:	4b2a      	ldr	r3, [pc, #168]	; (8001db0 <SendParameters+0xb4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fc55 	bl	80005b8 <__aeabi_f2d>
 8001d0e:	4680      	mov	r8, r0
 8001d10:	4689      	mov	r9, r1
 8001d12:	4b28      	ldr	r3, [pc, #160]	; (8001db4 <SendParameters+0xb8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fc4e 	bl	80005b8 <__aeabi_f2d>
 8001d1c:	4604      	mov	r4, r0
 8001d1e:	460d      	mov	r5, r1
 8001d20:	4b25      	ldr	r3, [pc, #148]	; (8001db8 <SendParameters+0xbc>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fc47 	bl	80005b8 <__aeabi_f2d>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4923      	ldr	r1, [pc, #140]	; (8001dbc <SendParameters+0xc0>)
 8001d30:	6809      	ldr	r1, [r1, #0]
 8001d32:	1d38      	adds	r0, r7, #4
 8001d34:	9105      	str	r1, [sp, #20]
 8001d36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d3a:	9104      	str	r1, [sp, #16]
 8001d3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d40:	e9cd 4500 	strd	r4, r5, [sp]
 8001d44:	4642      	mov	r2, r8
 8001d46:	464b      	mov	r3, r9
 8001d48:	491d      	ldr	r1, [pc, #116]	; (8001dc0 <SendParameters+0xc4>)
 8001d4a:	f00c fee1 	bl	800eb10 <siprintf>
									cold_junction_temp,
									analog_reference_voltage,
									applied_voltage_offset,
									ADC_BUFFER_SIZE,
									target_packet_count);
	uint16_t line_len = strlen((char *)parameters_msg);
 8001d4e:	1d3b      	adds	r3, r7, #4
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fac5 	bl	80002e0 <strlen>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
	while(CDC_Transmit_FS(parameters_msg, line_len) != USBD_OK);
 8001d5c:	bf00      	nop
 8001d5e:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f00b fcc6 	bl	800d6f8 <CDC_Transmit_FS>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f5      	bne.n	8001d5e <SendParameters+0x62>

	HAL_GPIO_WritePin(IND_LED_G_GPIO_Port, IND_LED_G_Pin, GPIO_PIN_SET);
 8001d72:	2201      	movs	r2, #1
 8001d74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d78:	4812      	ldr	r0, [pc, #72]	; (8001dc4 <SendParameters+0xc8>)
 8001d7a:	f003 fc91 	bl	80056a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_LED_R_GPIO_Port, IND_LED_R_Pin, GPIO_PIN_SET);
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d84:	480f      	ldr	r0, [pc, #60]	; (8001dc4 <SendParameters+0xc8>)
 8001d86:	f003 fc8b 	bl	80056a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_LED_B_GPIO_Port, IND_LED_B_Pin, GPIO_PIN_RESET);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d90:	480c      	ldr	r0, [pc, #48]	; (8001dc4 <SendParameters+0xc8>)
 8001d92:	f003 fc85 	bl	80056a0 <HAL_GPIO_WritePin>
	measurement_activated = 0;
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <SendParameters+0xcc>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
	prog_state = ARMED;
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <SendParameters+0xd0>)
 8001d9e:	2204      	movs	r2, #4
 8001da0:	701a      	strb	r2, [r3, #0]

	return 1;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001daa:	46bd      	mov	sp, r7
 8001dac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001db0:	200027b8 	.word	0x200027b8
 8001db4:	20000000 	.word	0x20000000
 8001db8:	200027bc 	.word	0x200027bc
 8001dbc:	2000076c 	.word	0x2000076c
 8001dc0:	08011d54 	.word	0x08011d54
 8001dc4:	48000800 	.word	0x48000800
 8001dc8:	200027e4 	.word	0x200027e4
 8001dcc:	200027b4 	.word	0x200027b4

08001dd0 <StartMeasurement>:

int StartMeasurement(void) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IND_LED_G_GPIO_Port, IND_LED_G_Pin, GPIO_PIN_SET);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dda:	480c      	ldr	r0, [pc, #48]	; (8001e0c <StartMeasurement+0x3c>)
 8001ddc:	f003 fc60 	bl	80056a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_LED_R_GPIO_Port, IND_LED_R_Pin, GPIO_PIN_RESET);
 8001de0:	2200      	movs	r2, #0
 8001de2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001de6:	4809      	ldr	r0, [pc, #36]	; (8001e0c <StartMeasurement+0x3c>)
 8001de8:	f003 fc5a 	bl	80056a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_LED_B_GPIO_Port, IND_LED_B_Pin, GPIO_PIN_SET);
 8001dec:	2201      	movs	r2, #1
 8001dee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001df2:	4806      	ldr	r0, [pc, #24]	; (8001e0c <StartMeasurement+0x3c>)
 8001df4:	f003 fc54 	bl	80056a0 <HAL_GPIO_WritePin>

	HAL_TIM_Base_Start_IT(&htim2);
 8001df8:	4805      	ldr	r0, [pc, #20]	; (8001e10 <StartMeasurement+0x40>)
 8001dfa:	f007 f83f 	bl	8008e7c <HAL_TIM_Base_Start_IT>

	prog_state = MEASURING;
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <StartMeasurement+0x44>)
 8001e00:	2205      	movs	r2, #5
 8001e02:	701a      	strb	r2, [r3, #0]

	return 1;
 8001e04:	2301      	movs	r3, #1
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	48000800 	.word	0x48000800
 8001e10:	2000071c 	.word	0x2000071c
 8001e14:	200027b4 	.word	0x200027b4

08001e18 <HAL_ADC_ConvHalfCpltCallback>:

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	int adc_index;

	if (hadc == &hadc1){
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a18      	ldr	r2, [pc, #96]	; (8001e84 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d102      	bne.n	8001e2e <HAL_ADC_ConvHalfCpltCallback+0x16>
		adc_index = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	e013      	b.n	8001e56 <HAL_ADC_ConvHalfCpltCallback+0x3e>
	}
	else if(hadc == &hadc2){
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a15      	ldr	r2, [pc, #84]	; (8001e88 <HAL_ADC_ConvHalfCpltCallback+0x70>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d102      	bne.n	8001e3c <HAL_ADC_ConvHalfCpltCallback+0x24>
		adc_index = 1;
 8001e36:	2301      	movs	r3, #1
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	e00c      	b.n	8001e56 <HAL_ADC_ConvHalfCpltCallback+0x3e>
	}
	else if(hadc == &hadc3){
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a13      	ldr	r2, [pc, #76]	; (8001e8c <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d102      	bne.n	8001e4a <HAL_ADC_ConvHalfCpltCallback+0x32>
		adc_index = 2;
 8001e44:	2302      	movs	r3, #2
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	e005      	b.n	8001e56 <HAL_ADC_ConvHalfCpltCallback+0x3e>
	}
	else if(hadc == &hadc4){
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a10      	ldr	r2, [pc, #64]	; (8001e90 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d101      	bne.n	8001e56 <HAL_ADC_ConvHalfCpltCallback+0x3e>
		adc_index = 3;
 8001e52:	2303      	movs	r3, #3
 8001e54:	60fb      	str	r3, [r7, #12]
	}

	if (adc_states[adc_index] != EMPTY)
 8001e56:	4a0f      	ldr	r2, [pc, #60]	; (8001e94 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d004      	beq.n	8001e6c <HAL_ADC_ConvHalfCpltCallback+0x54>
		dropped_packet_count++;
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <HAL_ADC_ConvHalfCpltCallback+0x80>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	3301      	adds	r3, #1
 8001e68:	4a0b      	ldr	r2, [pc, #44]	; (8001e98 <HAL_ADC_ConvHalfCpltCallback+0x80>)
 8001e6a:	6013      	str	r3, [r2, #0]
	adc_states[adc_index] = START_FULL;
 8001e6c:	4a09      	ldr	r2, [pc, #36]	; (8001e94 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4413      	add	r3, r2
 8001e72:	2201      	movs	r2, #1
 8001e74:	701a      	strb	r2, [r3, #0]
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000384 	.word	0x20000384
 8001e88:	200003f0 	.word	0x200003f0
 8001e8c:	2000045c 	.word	0x2000045c
 8001e90:	200004c8 	.word	0x200004c8
 8001e94:	200027c4 	.word	0x200027c4
 8001e98:	20000770 	.word	0x20000770

08001e9c <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
	int adc_index;

	if (hadc == &hadc1){
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a18      	ldr	r2, [pc, #96]	; (8001f08 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d102      	bne.n	8001eb2 <HAL_ADC_ConvCpltCallback+0x16>
		adc_index = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	e013      	b.n	8001eda <HAL_ADC_ConvCpltCallback+0x3e>
	}
	else if(hadc == &hadc2){
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a15      	ldr	r2, [pc, #84]	; (8001f0c <HAL_ADC_ConvCpltCallback+0x70>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d102      	bne.n	8001ec0 <HAL_ADC_ConvCpltCallback+0x24>
		adc_index = 1;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	e00c      	b.n	8001eda <HAL_ADC_ConvCpltCallback+0x3e>
	}
	else if(hadc == &hadc3){
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a13      	ldr	r2, [pc, #76]	; (8001f10 <HAL_ADC_ConvCpltCallback+0x74>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d102      	bne.n	8001ece <HAL_ADC_ConvCpltCallback+0x32>
		adc_index = 2;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	e005      	b.n	8001eda <HAL_ADC_ConvCpltCallback+0x3e>
	}
	else if(hadc == &hadc4){
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <HAL_ADC_ConvCpltCallback+0x78>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d101      	bne.n	8001eda <HAL_ADC_ConvCpltCallback+0x3e>
		adc_index = 3;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	60fb      	str	r3, [r7, #12]
	}

	if (adc_states[adc_index] != EMPTY)
 8001eda:	4a0f      	ldr	r2, [pc, #60]	; (8001f18 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4413      	add	r3, r2
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d004      	beq.n	8001ef0 <HAL_ADC_ConvCpltCallback+0x54>
		dropped_packet_count++;
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <HAL_ADC_ConvCpltCallback+0x80>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	3301      	adds	r3, #1
 8001eec:	4a0b      	ldr	r2, [pc, #44]	; (8001f1c <HAL_ADC_ConvCpltCallback+0x80>)
 8001eee:	6013      	str	r3, [r2, #0]
	adc_states[adc_index] = END_FULL;
 8001ef0:	4a09      	ldr	r2, [pc, #36]	; (8001f18 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	701a      	strb	r2, [r3, #0]
}
 8001efa:	bf00      	nop
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20000384 	.word	0x20000384
 8001f0c:	200003f0 	.word	0x200003f0
 8001f10:	2000045c 	.word	0x2000045c
 8001f14:	200004c8 	.word	0x200004c8
 8001f18:	200027c4 	.word	0x200027c4
 8001f1c:	20000770 	.word	0x20000770

08001f20 <SendData>:

unsigned char usb_buffer[USB_BUFFER_SIZE];
unsigned int usb_buffer_index;
unsigned int adc_buffer_start_index;

int SendData(enum ADC_BUFFER_STATE usb_transmition_state) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
	// > Create the USB buffer data
	if(usb_transmition_state == START_FULL){
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d103      	bne.n	8001f38 <SendData+0x18>
		adc_buffer_start_index = 0;
 8001f30:	4b3b      	ldr	r3, [pc, #236]	; (8002020 <SendData+0x100>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	e006      	b.n	8001f46 <SendData+0x26>
	}
	else if(usb_transmition_state == END_FULL){
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d103      	bne.n	8001f46 <SendData+0x26>
		adc_buffer_start_index = ADC_BUFFER_SIZE/2;
 8001f3e:	4b38      	ldr	r3, [pc, #224]	; (8002020 <SendData+0x100>)
 8001f40:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f44:	601a      	str	r2, [r3, #0]
	}

	usb_buffer_index = 0;
 8001f46:	4b37      	ldr	r3, [pc, #220]	; (8002024 <SendData+0x104>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
	for(int channel_index = 0; channel_index < MAX_CHANNEL_COUNT; channel_index++) {
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	e04e      	b.n	8001ff0 <SendData+0xd0>
		if(!channel_enabled_status[channel_index])
 8001f52:	4a35      	ldr	r2, [pc, #212]	; (8002028 <SendData+0x108>)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d044      	beq.n	8001fe8 <SendData+0xc8>
			continue;

		for(int i = 0; i < ADC_BUFFER_SIZE/2; i++){
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	e031      	b.n	8001fc8 <SendData+0xa8>
			usb_buffer[usb_buffer_index + (i*2) + 1] = (uint8_t)(adc_buffers[channel_index][adc_buffer_start_index + i] & 0x00FF);
 8001f64:	4b2e      	ldr	r3, [pc, #184]	; (8002020 <SendData+0x100>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	492f      	ldr	r1, [pc, #188]	; (800202c <SendData+0x10c>)
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f74:	fb00 f202 	mul.w	r2, r0, r2
 8001f78:	4413      	add	r3, r2
 8001f7a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4619      	mov	r1, r3
 8001f84:	4b27      	ldr	r3, [pc, #156]	; (8002024 <SendData+0x104>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	440b      	add	r3, r1
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	b2d1      	uxtb	r1, r2
 8001f8e:	4a28      	ldr	r2, [pc, #160]	; (8002030 <SendData+0x110>)
 8001f90:	54d1      	strb	r1, [r2, r3]
			usb_buffer[usb_buffer_index + i*2] = (uint8_t)((adc_buffers[channel_index][adc_buffer_start_index + i] >> 8) & 0x00FF);
 8001f92:	4b23      	ldr	r3, [pc, #140]	; (8002020 <SendData+0x100>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	4413      	add	r3, r2
 8001f9a:	4924      	ldr	r1, [pc, #144]	; (800202c <SendData+0x10c>)
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fa2:	fb00 f202 	mul.w	r2, r0, r2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <SendData+0x104>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	440b      	add	r3, r1
 8001fbc:	b2d1      	uxtb	r1, r2
 8001fbe:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <SendData+0x110>)
 8001fc0:	54d1      	strb	r1, [r2, r3]
		for(int i = 0; i < ADC_BUFFER_SIZE/2; i++){
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fce:	dbc9      	blt.n	8001f64 <SendData+0x44>
		}
		adc_states[channel_index] = EMPTY;
 8001fd0:	4a18      	ldr	r2, [pc, #96]	; (8002034 <SendData+0x114>)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
		usb_buffer_index += ADC_BUFFER_SIZE;
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <SendData+0x104>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001fe2:	4a10      	ldr	r2, [pc, #64]	; (8002024 <SendData+0x104>)
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e000      	b.n	8001fea <SendData+0xca>
			continue;
 8001fe8:	bf00      	nop
	for(int channel_index = 0; channel_index < MAX_CHANNEL_COUNT; channel_index++) {
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	3301      	adds	r3, #1
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	ddad      	ble.n	8001f52 <SendData+0x32>
	}

	while(CDC_Transmit_FS(usb_buffer, usb_buffer_index) != USBD_OK);
 8001ff6:	bf00      	nop
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <SendData+0x104>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	4619      	mov	r1, r3
 8002000:	480b      	ldr	r0, [pc, #44]	; (8002030 <SendData+0x110>)
 8002002:	f00b fb79 	bl	800d6f8 <CDC_Transmit_FS>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f5      	bne.n	8001ff8 <SendData+0xd8>

	current_packet_count++;
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <SendData+0x118>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	3301      	adds	r3, #1
 8002012:	4a09      	ldr	r2, [pc, #36]	; (8002038 <SendData+0x118>)
 8002014:	6013      	str	r3, [r2, #0]

	return 1;
 8002016:	2301      	movs	r3, #1
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	2000378c 	.word	0x2000378c
 8002024:	20003788 	.word	0x20003788
 8002028:	200027cc 	.word	0x200027cc
 800202c:	20000774 	.word	0x20000774
 8002030:	200027e8 	.word	0x200027e8
 8002034:	200027c4 	.word	0x200027c4
 8002038:	20000768 	.word	0x20000768

0800203c <SendTrasmissionReport>:

int SendTrasmissionReport(void) {
 800203c:	b580      	push	{r7, lr}
 800203e:	b0c2      	sub	sp, #264	; 0x108
 8002040:	af00      	add	r7, sp, #0
	unsigned char report_msg[REPORT_MSG_SIZE];

	sprintf((char *)report_msg, "TrsErr:%d;DrpPkt:%d\n",
 8002042:	4b11      	ldr	r3, [pc, #68]	; (8002088 <SendTrasmissionReport+0x4c>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	4b11      	ldr	r3, [pc, #68]	; (800208c <SendTrasmissionReport+0x50>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	1d38      	adds	r0, r7, #4
 800204c:	4910      	ldr	r1, [pc, #64]	; (8002090 <SendTrasmissionReport+0x54>)
 800204e:	f00c fd5f 	bl	800eb10 <siprintf>
									transmission_error,
									dropped_packet_count);
	uint16_t line_len = strlen((char *)report_msg);
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe f943 	bl	80002e0 <strlen>
 800205a:	4603      	mov	r3, r0
 800205c:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
	while(CDC_Transmit_FS(report_msg, line_len) != USBD_OK);
 8002060:	bf00      	nop
 8002062:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f00b fb44 	bl	800d6f8 <CDC_Transmit_FS>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f5      	bne.n	8002062 <SendTrasmissionReport+0x26>

	prog_state = DONE;
 8002076:	4b07      	ldr	r3, [pc, #28]	; (8002094 <SendTrasmissionReport+0x58>)
 8002078:	2207      	movs	r2, #7
 800207a:	701a      	strb	r2, [r3, #0]

	return 1;
 800207c:	2301      	movs	r3, #1
}
 800207e:	4618      	mov	r0, r3
 8002080:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	200027dc 	.word	0x200027dc
 800208c:	20000770 	.word	0x20000770
 8002090:	08011d90 	.word	0x08011d90
 8002094:	200027b4 	.word	0x200027b4

08002098 <ResetStates>:

int ResetStates(void) {
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Stop_IT(&htim2);
 800209c:	4820      	ldr	r0, [pc, #128]	; (8002120 <ResetStates+0x88>)
 800209e:	f006 ff65 	bl	8008f6c <HAL_TIM_Base_Stop_IT>
	  HAL_ADC_Stop_DMA(&hadc1);
 80020a2:	4820      	ldr	r0, [pc, #128]	; (8002124 <ResetStates+0x8c>)
 80020a4:	f001 fa7c 	bl	80035a0 <HAL_ADC_Stop_DMA>
	  HAL_ADC_Stop_DMA(&hadc2);
 80020a8:	481f      	ldr	r0, [pc, #124]	; (8002128 <ResetStates+0x90>)
 80020aa:	f001 fa79 	bl	80035a0 <HAL_ADC_Stop_DMA>
	  HAL_ADC_Stop_DMA(&hadc3);
 80020ae:	481f      	ldr	r0, [pc, #124]	; (800212c <ResetStates+0x94>)
 80020b0:	f001 fa76 	bl	80035a0 <HAL_ADC_Stop_DMA>
	  HAL_ADC_Stop_DMA(&hadc4);
 80020b4:	481e      	ldr	r0, [pc, #120]	; (8002130 <ResetStates+0x98>)
 80020b6:	f001 fa73 	bl	80035a0 <HAL_ADC_Stop_DMA>
	  memset(adc_buffers, 0, sizeof(adc_buffers));
 80020ba:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80020be:	2100      	movs	r1, #0
 80020c0:	481c      	ldr	r0, [pc, #112]	; (8002134 <ResetStates+0x9c>)
 80020c2:	f00c fd88 	bl	800ebd6 <memset>
	  prog_state = IDLE;
 80020c6:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <ResetStates+0xa0>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]
	  conv_count_reached = 0;
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <ResetStates+0xa4>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
	  target_packet_count = 0;
 80020d2:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <ResetStates+0xa8>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
	  current_packet_count = 0;
 80020d8:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <ResetStates+0xac>)
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
	  measurement_activated = 0;
 80020de:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <ResetStates+0xb0>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
	  channel_enabled_count = 0;
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <ResetStates+0xb4>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
	  dropped_packet_count = 0;
 80020ea:	4b19      	ldr	r3, [pc, #100]	; (8002150 <ResetStates+0xb8>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
	  transmission_error = 0;
 80020f0:	4b18      	ldr	r3, [pc, #96]	; (8002154 <ResetStates+0xbc>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]

	  HAL_GPIO_WritePin(IND_LED_G_GPIO_Port, IND_LED_G_Pin, GPIO_PIN_RESET);
 80020f6:	2200      	movs	r2, #0
 80020f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020fc:	4816      	ldr	r0, [pc, #88]	; (8002158 <ResetStates+0xc0>)
 80020fe:	f003 facf 	bl	80056a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IND_LED_R_GPIO_Port, IND_LED_R_Pin, GPIO_PIN_SET);
 8002102:	2201      	movs	r2, #1
 8002104:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002108:	4813      	ldr	r0, [pc, #76]	; (8002158 <ResetStates+0xc0>)
 800210a:	f003 fac9 	bl	80056a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IND_LED_B_GPIO_Port, IND_LED_B_Pin, GPIO_PIN_SET);
 800210e:	2201      	movs	r2, #1
 8002110:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002114:	4810      	ldr	r0, [pc, #64]	; (8002158 <ResetStates+0xc0>)
 8002116:	f003 fac3 	bl	80056a0 <HAL_GPIO_WritePin>

	  return 1;
 800211a:	2301      	movs	r3, #1
}
 800211c:	4618      	mov	r0, r3
 800211e:	bd80      	pop	{r7, pc}
 8002120:	2000071c 	.word	0x2000071c
 8002124:	20000384 	.word	0x20000384
 8002128:	200003f0 	.word	0x200003f0
 800212c:	2000045c 	.word	0x2000045c
 8002130:	200004c8 	.word	0x200004c8
 8002134:	20000774 	.word	0x20000774
 8002138:	200027b4 	.word	0x200027b4
 800213c:	200027e0 	.word	0x200027e0
 8002140:	2000076c 	.word	0x2000076c
 8002144:	20000768 	.word	0x20000768
 8002148:	200027e4 	.word	0x200027e4
 800214c:	200027c8 	.word	0x200027c8
 8002150:	20000770 	.word	0x20000770
 8002154:	200027dc 	.word	0x200027dc
 8002158:	48000800 	.word	0x48000800

0800215c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002160:	b672      	cpsid	i
}
 8002162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002164:	e7fe      	b.n	8002164 <Error_Handler+0x8>
	...

08002168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216e:	4b13      	ldr	r3, [pc, #76]	; (80021bc <HAL_MspInit+0x54>)
 8002170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002172:	4a12      	ldr	r2, [pc, #72]	; (80021bc <HAL_MspInit+0x54>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6613      	str	r3, [r2, #96]	; 0x60
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HAL_MspInit+0x54>)
 800217c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <HAL_MspInit+0x54>)
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218a:	4a0c      	ldr	r2, [pc, #48]	; (80021bc <HAL_MspInit+0x54>)
 800218c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002190:	6593      	str	r3, [r2, #88]	; 0x58
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_MspInit+0x54>)
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 800219e:	2020      	movs	r0, #32
 80021a0:	f000 fcb6 	bl	8002b10 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80021a4:	f000 fcdc 	bl	8002b60 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80021a8:	2000      	movs	r0, #0
 80021aa:	f000 fcc5 	bl	8002b38 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80021ae:	f005 fead 	bl	8007f0c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000

080021c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b0a4      	sub	sp, #144	; 0x90
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021dc:	2254      	movs	r2, #84	; 0x54
 80021de:	2100      	movs	r1, #0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f00c fcf8 	bl	800ebd6 <memset>
  if(hadc->Instance==ADC1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021ee:	d16c      	bne.n	80022ca <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80021f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80021f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80021fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002200:	4618      	mov	r0, r3
 8002202:	f006 fb95 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800220c:	f7ff ffa6 	bl	800215c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002210:	4b9f      	ldr	r3, [pc, #636]	; (8002490 <HAL_ADC_MspInit+0x2d0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	3301      	adds	r3, #1
 8002216:	4a9e      	ldr	r2, [pc, #632]	; (8002490 <HAL_ADC_MspInit+0x2d0>)
 8002218:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800221a:	4b9d      	ldr	r3, [pc, #628]	; (8002490 <HAL_ADC_MspInit+0x2d0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d10b      	bne.n	800223a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002222:	4b9c      	ldr	r3, [pc, #624]	; (8002494 <HAL_ADC_MspInit+0x2d4>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002226:	4a9b      	ldr	r2, [pc, #620]	; (8002494 <HAL_ADC_MspInit+0x2d4>)
 8002228:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800222c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800222e:	4b99      	ldr	r3, [pc, #612]	; (8002494 <HAL_ADC_MspInit+0x2d4>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223a:	4b96      	ldr	r3, [pc, #600]	; (8002494 <HAL_ADC_MspInit+0x2d4>)
 800223c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223e:	4a95      	ldr	r2, [pc, #596]	; (8002494 <HAL_ADC_MspInit+0x2d4>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002246:	4b93      	ldr	r3, [pc, #588]	; (8002494 <HAL_ADC_MspInit+0x2d4>)
 8002248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	623b      	str	r3, [r7, #32]
 8002250:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002252:	2301      	movs	r3, #1
 8002254:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002256:	2303      	movs	r3, #3
 8002258:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002262:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002266:	4619      	mov	r1, r3
 8002268:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800226c:	f003 f896 	bl	800539c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002270:	4b89      	ldr	r3, [pc, #548]	; (8002498 <HAL_ADC_MspInit+0x2d8>)
 8002272:	4a8a      	ldr	r2, [pc, #552]	; (800249c <HAL_ADC_MspInit+0x2dc>)
 8002274:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002276:	4b88      	ldr	r3, [pc, #544]	; (8002498 <HAL_ADC_MspInit+0x2d8>)
 8002278:	2205      	movs	r2, #5
 800227a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800227c:	4b86      	ldr	r3, [pc, #536]	; (8002498 <HAL_ADC_MspInit+0x2d8>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002282:	4b85      	ldr	r3, [pc, #532]	; (8002498 <HAL_ADC_MspInit+0x2d8>)
 8002284:	2200      	movs	r2, #0
 8002286:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002288:	4b83      	ldr	r3, [pc, #524]	; (8002498 <HAL_ADC_MspInit+0x2d8>)
 800228a:	2280      	movs	r2, #128	; 0x80
 800228c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800228e:	4b82      	ldr	r3, [pc, #520]	; (8002498 <HAL_ADC_MspInit+0x2d8>)
 8002290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002294:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002296:	4b80      	ldr	r3, [pc, #512]	; (8002498 <HAL_ADC_MspInit+0x2d8>)
 8002298:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800229c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800229e:	4b7e      	ldr	r3, [pc, #504]	; (8002498 <HAL_ADC_MspInit+0x2d8>)
 80022a0:	2220      	movs	r2, #32
 80022a2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80022a4:	4b7c      	ldr	r3, [pc, #496]	; (8002498 <HAL_ADC_MspInit+0x2d8>)
 80022a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022ac:	487a      	ldr	r0, [pc, #488]	; (8002498 <HAL_ADC_MspInit+0x2d8>)
 80022ae:	f002 fda9 	bl	8004e04 <HAL_DMA_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80022b8:	f7ff ff50 	bl	800215c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a76      	ldr	r2, [pc, #472]	; (8002498 <HAL_ADC_MspInit+0x2d8>)
 80022c0:	655a      	str	r2, [r3, #84]	; 0x54
 80022c2:	4a75      	ldr	r2, [pc, #468]	; (8002498 <HAL_ADC_MspInit+0x2d8>)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80022c8:	e16b      	b.n	80025a2 <HAL_ADC_MspInit+0x3e2>
  else if(hadc->Instance==ADC2)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a74      	ldr	r2, [pc, #464]	; (80024a0 <HAL_ADC_MspInit+0x2e0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d16b      	bne.n	80023ac <HAL_ADC_MspInit+0x1ec>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80022d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80022da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80022de:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022e4:	4618      	mov	r0, r3
 80022e6:	f006 fb23 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 80022f0:	f7ff ff34 	bl	800215c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80022f4:	4b66      	ldr	r3, [pc, #408]	; (8002490 <HAL_ADC_MspInit+0x2d0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	4a65      	ldr	r2, [pc, #404]	; (8002490 <HAL_ADC_MspInit+0x2d0>)
 80022fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80022fe:	4b64      	ldr	r3, [pc, #400]	; (8002490 <HAL_ADC_MspInit+0x2d0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d10b      	bne.n	800231e <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002306:	4b63      	ldr	r3, [pc, #396]	; (8002494 <HAL_ADC_MspInit+0x2d4>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	4a62      	ldr	r2, [pc, #392]	; (8002494 <HAL_ADC_MspInit+0x2d4>)
 800230c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002312:	4b60      	ldr	r3, [pc, #384]	; (8002494 <HAL_ADC_MspInit+0x2d4>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002316:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800231a:	61fb      	str	r3, [r7, #28]
 800231c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231e:	4b5d      	ldr	r3, [pc, #372]	; (8002494 <HAL_ADC_MspInit+0x2d4>)
 8002320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002322:	4a5c      	ldr	r2, [pc, #368]	; (8002494 <HAL_ADC_MspInit+0x2d4>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800232a:	4b5a      	ldr	r3, [pc, #360]	; (8002494 <HAL_ADC_MspInit+0x2d4>)
 800232c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	61bb      	str	r3, [r7, #24]
 8002334:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002336:	2340      	movs	r3, #64	; 0x40
 8002338:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800233a:	2303      	movs	r3, #3
 800233c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002346:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800234a:	4619      	mov	r1, r3
 800234c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002350:	f003 f824 	bl	800539c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8002354:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <HAL_ADC_MspInit+0x2e4>)
 8002356:	4a54      	ldr	r2, [pc, #336]	; (80024a8 <HAL_ADC_MspInit+0x2e8>)
 8002358:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800235a:	4b52      	ldr	r3, [pc, #328]	; (80024a4 <HAL_ADC_MspInit+0x2e4>)
 800235c:	2224      	movs	r2, #36	; 0x24
 800235e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002360:	4b50      	ldr	r3, [pc, #320]	; (80024a4 <HAL_ADC_MspInit+0x2e4>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002366:	4b4f      	ldr	r3, [pc, #316]	; (80024a4 <HAL_ADC_MspInit+0x2e4>)
 8002368:	2200      	movs	r2, #0
 800236a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800236c:	4b4d      	ldr	r3, [pc, #308]	; (80024a4 <HAL_ADC_MspInit+0x2e4>)
 800236e:	2280      	movs	r2, #128	; 0x80
 8002370:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002372:	4b4c      	ldr	r3, [pc, #304]	; (80024a4 <HAL_ADC_MspInit+0x2e4>)
 8002374:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002378:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800237a:	4b4a      	ldr	r3, [pc, #296]	; (80024a4 <HAL_ADC_MspInit+0x2e4>)
 800237c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002380:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002382:	4b48      	ldr	r3, [pc, #288]	; (80024a4 <HAL_ADC_MspInit+0x2e4>)
 8002384:	2220      	movs	r2, #32
 8002386:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002388:	4b46      	ldr	r3, [pc, #280]	; (80024a4 <HAL_ADC_MspInit+0x2e4>)
 800238a:	2200      	movs	r2, #0
 800238c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800238e:	4845      	ldr	r0, [pc, #276]	; (80024a4 <HAL_ADC_MspInit+0x2e4>)
 8002390:	f002 fd38 	bl	8004e04 <HAL_DMA_Init>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_ADC_MspInit+0x1de>
      Error_Handler();
 800239a:	f7ff fedf 	bl	800215c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a40      	ldr	r2, [pc, #256]	; (80024a4 <HAL_ADC_MspInit+0x2e4>)
 80023a2:	655a      	str	r2, [r3, #84]	; 0x54
 80023a4:	4a3f      	ldr	r2, [pc, #252]	; (80024a4 <HAL_ADC_MspInit+0x2e4>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80023aa:	e0fa      	b.n	80025a2 <HAL_ADC_MspInit+0x3e2>
  else if(hadc->Instance==ADC3)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a3e      	ldr	r2, [pc, #248]	; (80024ac <HAL_ADC_MspInit+0x2ec>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	f040 8084 	bne.w	80024c0 <HAL_ADC_MspInit+0x300>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80023b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80023be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023c2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023c8:	4618      	mov	r0, r3
 80023ca:	f006 fab1 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_ADC_MspInit+0x218>
      Error_Handler();
 80023d4:	f7ff fec2 	bl	800215c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80023d8:	4b35      	ldr	r3, [pc, #212]	; (80024b0 <HAL_ADC_MspInit+0x2f0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	3301      	adds	r3, #1
 80023de:	4a34      	ldr	r2, [pc, #208]	; (80024b0 <HAL_ADC_MspInit+0x2f0>)
 80023e0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80023e2:	4b33      	ldr	r3, [pc, #204]	; (80024b0 <HAL_ADC_MspInit+0x2f0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d10b      	bne.n	8002402 <HAL_ADC_MspInit+0x242>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80023ea:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <HAL_ADC_MspInit+0x2d4>)
 80023ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ee:	4a29      	ldr	r2, [pc, #164]	; (8002494 <HAL_ADC_MspInit+0x2d4>)
 80023f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023f6:	4b27      	ldr	r3, [pc, #156]	; (8002494 <HAL_ADC_MspInit+0x2d4>)
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002402:	4b24      	ldr	r3, [pc, #144]	; (8002494 <HAL_ADC_MspInit+0x2d4>)
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002406:	4a23      	ldr	r2, [pc, #140]	; (8002494 <HAL_ADC_MspInit+0x2d4>)
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800240e:	4b21      	ldr	r3, [pc, #132]	; (8002494 <HAL_ADC_MspInit+0x2d4>)
 8002410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800241a:	2302      	movs	r3, #2
 800241c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800241e:	2303      	movs	r3, #3
 8002420:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800242e:	4619      	mov	r1, r3
 8002430:	4820      	ldr	r0, [pc, #128]	; (80024b4 <HAL_ADC_MspInit+0x2f4>)
 8002432:	f002 ffb3 	bl	800539c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_ADC_MspInit+0x2f8>)
 8002438:	4a20      	ldr	r2, [pc, #128]	; (80024bc <HAL_ADC_MspInit+0x2fc>)
 800243a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800243c:	4b1e      	ldr	r3, [pc, #120]	; (80024b8 <HAL_ADC_MspInit+0x2f8>)
 800243e:	2225      	movs	r2, #37	; 0x25
 8002440:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002442:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <HAL_ADC_MspInit+0x2f8>)
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002448:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <HAL_ADC_MspInit+0x2f8>)
 800244a:	2200      	movs	r2, #0
 800244c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800244e:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <HAL_ADC_MspInit+0x2f8>)
 8002450:	2280      	movs	r2, #128	; 0x80
 8002452:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002454:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <HAL_ADC_MspInit+0x2f8>)
 8002456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800245a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800245c:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <HAL_ADC_MspInit+0x2f8>)
 800245e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002462:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <HAL_ADC_MspInit+0x2f8>)
 8002466:	2220      	movs	r2, #32
 8002468:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800246a:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <HAL_ADC_MspInit+0x2f8>)
 800246c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002470:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002472:	4811      	ldr	r0, [pc, #68]	; (80024b8 <HAL_ADC_MspInit+0x2f8>)
 8002474:	f002 fcc6 	bl	8004e04 <HAL_DMA_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_ADC_MspInit+0x2c2>
      Error_Handler();
 800247e:	f7ff fe6d 	bl	800215c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a0c      	ldr	r2, [pc, #48]	; (80024b8 <HAL_ADC_MspInit+0x2f8>)
 8002486:	655a      	str	r2, [r3, #84]	; 0x54
 8002488:	4a0b      	ldr	r2, [pc, #44]	; (80024b8 <HAL_ADC_MspInit+0x2f8>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800248e:	e088      	b.n	80025a2 <HAL_ADC_MspInit+0x3e2>
 8002490:	20003790 	.word	0x20003790
 8002494:	40021000 	.word	0x40021000
 8002498:	20000534 	.word	0x20000534
 800249c:	40020008 	.word	0x40020008
 80024a0:	50000100 	.word	0x50000100
 80024a4:	20000594 	.word	0x20000594
 80024a8:	4002001c 	.word	0x4002001c
 80024ac:	50000400 	.word	0x50000400
 80024b0:	20003794 	.word	0x20003794
 80024b4:	48000400 	.word	0x48000400
 80024b8:	200005f4 	.word	0x200005f4
 80024bc:	40020030 	.word	0x40020030
  else if(hadc->Instance==ADC4)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a39      	ldr	r2, [pc, #228]	; (80025ac <HAL_ADC_MspInit+0x3ec>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d16b      	bne.n	80025a2 <HAL_ADC_MspInit+0x3e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80024ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ce:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80024d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024d4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024da:	4618      	mov	r0, r3
 80024dc:	f006 fa28 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_ADC_MspInit+0x32a>
      Error_Handler();
 80024e6:	f7ff fe39 	bl	800215c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80024ea:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <HAL_ADC_MspInit+0x3f0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	3301      	adds	r3, #1
 80024f0:	4a2f      	ldr	r2, [pc, #188]	; (80025b0 <HAL_ADC_MspInit+0x3f0>)
 80024f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80024f4:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <HAL_ADC_MspInit+0x3f0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d10b      	bne.n	8002514 <HAL_ADC_MspInit+0x354>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80024fc:	4b2d      	ldr	r3, [pc, #180]	; (80025b4 <HAL_ADC_MspInit+0x3f4>)
 80024fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002500:	4a2c      	ldr	r2, [pc, #176]	; (80025b4 <HAL_ADC_MspInit+0x3f4>)
 8002502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002506:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002508:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <HAL_ADC_MspInit+0x3f4>)
 800250a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <HAL_ADC_MspInit+0x3f4>)
 8002516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002518:	4a26      	ldr	r2, [pc, #152]	; (80025b4 <HAL_ADC_MspInit+0x3f4>)
 800251a:	f043 0302 	orr.w	r3, r3, #2
 800251e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002520:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <HAL_ADC_MspInit+0x3f4>)
 8002522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800252c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002530:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002532:	2303      	movs	r3, #3
 8002534:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800253e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002542:	4619      	mov	r1, r3
 8002544:	481c      	ldr	r0, [pc, #112]	; (80025b8 <HAL_ADC_MspInit+0x3f8>)
 8002546:	f002 ff29 	bl	800539c <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 800254a:	4b1c      	ldr	r3, [pc, #112]	; (80025bc <HAL_ADC_MspInit+0x3fc>)
 800254c:	4a1c      	ldr	r2, [pc, #112]	; (80025c0 <HAL_ADC_MspInit+0x400>)
 800254e:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8002550:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <HAL_ADC_MspInit+0x3fc>)
 8002552:	2226      	movs	r2, #38	; 0x26
 8002554:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002556:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_ADC_MspInit+0x3fc>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800255c:	4b17      	ldr	r3, [pc, #92]	; (80025bc <HAL_ADC_MspInit+0x3fc>)
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8002562:	4b16      	ldr	r3, [pc, #88]	; (80025bc <HAL_ADC_MspInit+0x3fc>)
 8002564:	2280      	movs	r2, #128	; 0x80
 8002566:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002568:	4b14      	ldr	r3, [pc, #80]	; (80025bc <HAL_ADC_MspInit+0x3fc>)
 800256a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800256e:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_ADC_MspInit+0x3fc>)
 8002572:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002576:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8002578:	4b10      	ldr	r3, [pc, #64]	; (80025bc <HAL_ADC_MspInit+0x3fc>)
 800257a:	2220      	movs	r2, #32
 800257c:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_HIGH;
 800257e:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <HAL_ADC_MspInit+0x3fc>)
 8002580:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002584:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8002586:	480d      	ldr	r0, [pc, #52]	; (80025bc <HAL_ADC_MspInit+0x3fc>)
 8002588:	f002 fc3c 	bl	8004e04 <HAL_DMA_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_ADC_MspInit+0x3d6>
      Error_Handler();
 8002592:	f7ff fde3 	bl	800215c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a08      	ldr	r2, [pc, #32]	; (80025bc <HAL_ADC_MspInit+0x3fc>)
 800259a:	655a      	str	r2, [r3, #84]	; 0x54
 800259c:	4a07      	ldr	r2, [pc, #28]	; (80025bc <HAL_ADC_MspInit+0x3fc>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80025a2:	bf00      	nop
 80025a4:	3790      	adds	r7, #144	; 0x90
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	50000500 	.word	0x50000500
 80025b0:	20003794 	.word	0x20003794
 80025b4:	40021000 	.word	0x40021000
 80025b8:	48000400 	.word	0x48000400
 80025bc:	20000654 	.word	0x20000654
 80025c0:	40020044 	.word	0x40020044

080025c4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08a      	sub	sp, #40	; 0x28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a15      	ldr	r2, [pc, #84]	; (8002638 <HAL_DAC_MspInit+0x74>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d124      	bne.n	8002630 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_DAC_MspInit+0x78>)
 80025e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ea:	4a14      	ldr	r2, [pc, #80]	; (800263c <HAL_DAC_MspInit+0x78>)
 80025ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_DAC_MspInit+0x78>)
 80025f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fe:	4b0f      	ldr	r3, [pc, #60]	; (800263c <HAL_DAC_MspInit+0x78>)
 8002600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002602:	4a0e      	ldr	r2, [pc, #56]	; (800263c <HAL_DAC_MspInit+0x78>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800260a:	4b0c      	ldr	r3, [pc, #48]	; (800263c <HAL_DAC_MspInit+0x78>)
 800260c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002616:	2310      	movs	r3, #16
 8002618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800261a:	2303      	movs	r3, #3
 800261c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002622:	f107 0314 	add.w	r3, r7, #20
 8002626:	4619      	mov	r1, r3
 8002628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800262c:	f002 feb6 	bl	800539c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002630:	bf00      	nop
 8002632:	3728      	adds	r7, #40	; 0x28
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	50000800 	.word	0x50000800
 800263c:	40021000 	.word	0x40021000

08002640 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b09e      	sub	sp, #120	; 0x78
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002658:	f107 0310 	add.w	r3, r7, #16
 800265c:	2254      	movs	r2, #84	; 0x54
 800265e:	2100      	movs	r1, #0
 8002660:	4618      	mov	r0, r3
 8002662:	f00c fab8 	bl	800ebd6 <memset>
  if(hi2c->Instance==I2C3)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1f      	ldr	r2, [pc, #124]	; (80026e8 <HAL_I2C_MspInit+0xa8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d137      	bne.n	80026e0 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002674:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002676:	2300      	movs	r3, #0
 8002678:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800267a:	f107 0310 	add.w	r3, r7, #16
 800267e:	4618      	mov	r0, r3
 8002680:	f006 f956 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800268a:	f7ff fd67 	bl	800215c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800268e:	4b17      	ldr	r3, [pc, #92]	; (80026ec <HAL_I2C_MspInit+0xac>)
 8002690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002692:	4a16      	ldr	r2, [pc, #88]	; (80026ec <HAL_I2C_MspInit+0xac>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800269a:	4b14      	ldr	r3, [pc, #80]	; (80026ec <HAL_I2C_MspInit+0xac>)
 800269c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = TEMP_SCL_Pin|TEMP_SDA_Pin;
 80026a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026aa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ac:	2312      	movs	r3, #18
 80026ae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b4:	2300      	movs	r3, #0
 80026b6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80026b8:	2308      	movs	r3, #8
 80026ba:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80026c0:	4619      	mov	r1, r3
 80026c2:	480b      	ldr	r0, [pc, #44]	; (80026f0 <HAL_I2C_MspInit+0xb0>)
 80026c4:	f002 fe6a 	bl	800539c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <HAL_I2C_MspInit+0xac>)
 80026ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026cc:	4a07      	ldr	r2, [pc, #28]	; (80026ec <HAL_I2C_MspInit+0xac>)
 80026ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026d2:	6593      	str	r3, [r2, #88]	; 0x58
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <HAL_I2C_MspInit+0xac>)
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80026e0:	bf00      	nop
 80026e2:	3778      	adds	r7, #120	; 0x78
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40007800 	.word	0x40007800
 80026ec:	40021000 	.word	0x40021000
 80026f0:	48000800 	.word	0x48000800

080026f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002704:	d10b      	bne.n	800271e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <HAL_TIM_Base_MspInit+0x38>)
 8002708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270a:	4a08      	ldr	r2, [pc, #32]	; (800272c <HAL_TIM_Base_MspInit+0x38>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6593      	str	r3, [r2, #88]	; 0x58
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_TIM_Base_MspInit+0x38>)
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800271e:	bf00      	nop
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000

08002730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002734:	e7fe      	b.n	8002734 <NMI_Handler+0x4>

08002736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800273a:	e7fe      	b.n	800273a <HardFault_Handler+0x4>

0800273c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002740:	e7fe      	b.n	8002740 <MemManage_Handler+0x4>

08002742 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002746:	e7fe      	b.n	8002746 <BusFault_Handler+0x4>

08002748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800274c:	e7fe      	b.n	800274c <UsageFault_Handler+0x4>

0800274e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800277c:	f000 f9aa 	bl	8002ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002780:	bf00      	nop
 8002782:	bd80      	pop	{r7, pc}

08002784 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002788:	4804      	ldr	r0, [pc, #16]	; (800279c <DMA1_Channel1_IRQHandler+0x18>)
 800278a:	f002 fcb7 	bl	80050fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  dma_int_counter++;
 800278e:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <DMA1_Channel1_IRQHandler+0x1c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	3301      	adds	r3, #1
 8002794:	4a02      	ldr	r2, [pc, #8]	; (80027a0 <DMA1_Channel1_IRQHandler+0x1c>)
 8002796:	6013      	str	r3, [r2, #0]
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000534 	.word	0x20000534
 80027a0:	20003798 	.word	0x20003798

080027a4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80027a8:	4802      	ldr	r0, [pc, #8]	; (80027b4 <DMA1_Channel2_IRQHandler+0x10>)
 80027aa:	f002 fca7 	bl	80050fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000594 	.word	0x20000594

080027b8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80027bc:	4802      	ldr	r0, [pc, #8]	; (80027c8 <DMA1_Channel3_IRQHandler+0x10>)
 80027be:	f002 fc9d 	bl	80050fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200005f4 	.word	0x200005f4

080027cc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80027d0:	4802      	ldr	r0, [pc, #8]	; (80027dc <DMA1_Channel4_IRQHandler+0x10>)
 80027d2:	f002 fc93 	bl	80050fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000654 	.word	0x20000654

080027e0 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80027e4:	4802      	ldr	r0, [pc, #8]	; (80027f0 <USB_HP_IRQHandler+0x10>)
 80027e6:	f003 fea8 	bl	800653a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20004c78 	.word	0x20004c78

080027f4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80027f8:	4802      	ldr	r0, [pc, #8]	; (8002804 <USB_LP_IRQHandler+0x10>)
 80027fa:	f003 fe9e 	bl	800653a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20004c78 	.word	0x20004c78

08002808 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TRIG_SHORT_Pin);
 800280c:	2020      	movs	r0, #32
 800280e:	f002 ff5f 	bl	80056d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TRIG_EXT_2_Pin);
 8002812:	2040      	movs	r0, #64	; 0x40
 8002814:	f002 ff5c 	bl	80056d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TRIG_EXT_1_Pin);
 8002818:	2080      	movs	r0, #128	; 0x80
 800281a:	f002 ff59 	bl	80056d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  measurement_activated = 1;
 800281e:	4b02      	ldr	r3, [pc, #8]	; (8002828 <EXTI9_5_IRQHandler+0x20>)
 8002820:	2201      	movs	r2, #1
 8002822:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}
 8002828:	200027e4 	.word	0x200027e4

0800282c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return 1;
 8002830:	2301      	movs	r3, #1
}
 8002832:	4618      	mov	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <_kill>:

int _kill(int pid, int sig)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002846:	f00c fa87 	bl	800ed58 <__errno>
 800284a:	4603      	mov	r3, r0
 800284c:	2216      	movs	r2, #22
 800284e:	601a      	str	r2, [r3, #0]
  return -1;
 8002850:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <_exit>:

void _exit (int status)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002864:	f04f 31ff 	mov.w	r1, #4294967295
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff ffe7 	bl	800283c <_kill>
  while (1) {}    /* Make sure we hang here */
 800286e:	e7fe      	b.n	800286e <_exit+0x12>

08002870 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	e00a      	b.n	8002898 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002882:	f3af 8000 	nop.w
 8002886:	4601      	mov	r1, r0
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	60ba      	str	r2, [r7, #8]
 800288e:	b2ca      	uxtb	r2, r1
 8002890:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	3301      	adds	r3, #1
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	429a      	cmp	r2, r3
 800289e:	dbf0      	blt.n	8002882 <_read+0x12>
  }

  return len;
 80028a0:	687b      	ldr	r3, [r7, #4]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b086      	sub	sp, #24
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	e009      	b.n	80028d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	60ba      	str	r2, [r7, #8]
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	3301      	adds	r3, #1
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	dbf1      	blt.n	80028bc <_write+0x12>
  }
  return len;
 80028d8:	687b      	ldr	r3, [r7, #4]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <_close>:

int _close(int file)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800290a:	605a      	str	r2, [r3, #4]
  return 0;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <_isatty>:

int _isatty(int file)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002922:	2301      	movs	r3, #1
}
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002954:	4a14      	ldr	r2, [pc, #80]	; (80029a8 <_sbrk+0x5c>)
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <_sbrk+0x60>)
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002960:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <_sbrk+0x64>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d102      	bne.n	800296e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <_sbrk+0x64>)
 800296a:	4a12      	ldr	r2, [pc, #72]	; (80029b4 <_sbrk+0x68>)
 800296c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800296e:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <_sbrk+0x64>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4413      	add	r3, r2
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	429a      	cmp	r2, r3
 800297a:	d207      	bcs.n	800298c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800297c:	f00c f9ec 	bl	800ed58 <__errno>
 8002980:	4603      	mov	r3, r0
 8002982:	220c      	movs	r2, #12
 8002984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002986:	f04f 33ff 	mov.w	r3, #4294967295
 800298a:	e009      	b.n	80029a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800298c:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <_sbrk+0x64>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002992:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <_sbrk+0x64>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4413      	add	r3, r2
 800299a:	4a05      	ldr	r2, [pc, #20]	; (80029b0 <_sbrk+0x64>)
 800299c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800299e:	68fb      	ldr	r3, [r7, #12]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20020000 	.word	0x20020000
 80029ac:	00001000 	.word	0x00001000
 80029b0:	2000379c 	.word	0x2000379c
 80029b4:	200052c0 	.word	0x200052c0

080029b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <SystemInit+0x20>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <SystemInit+0x20>)
 80029c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029dc:	480d      	ldr	r0, [pc, #52]	; (8002a14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029e0:	f7ff ffea 	bl	80029b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029e4:	480c      	ldr	r0, [pc, #48]	; (8002a18 <LoopForever+0x6>)
  ldr r1, =_edata
 80029e6:	490d      	ldr	r1, [pc, #52]	; (8002a1c <LoopForever+0xa>)
  ldr r2, =_sidata
 80029e8:	4a0d      	ldr	r2, [pc, #52]	; (8002a20 <LoopForever+0xe>)
  movs r3, #0
 80029ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80029ec:	e002      	b.n	80029f4 <LoopCopyDataInit>

080029ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029f2:	3304      	adds	r3, #4

080029f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029f8:	d3f9      	bcc.n	80029ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029fa:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029fc:	4c0a      	ldr	r4, [pc, #40]	; (8002a28 <LoopForever+0x16>)
  movs r3, #0
 80029fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a00:	e001      	b.n	8002a06 <LoopFillZerobss>

08002a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a04:	3204      	adds	r2, #4

08002a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a08:	d3fb      	bcc.n	8002a02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a0a:	f00c f9ab 	bl	800ed64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a0e:	f7fe f973 	bl	8000cf8 <main>

08002a12 <LoopForever>:

LoopForever:
    b LoopForever
 8002a12:	e7fe      	b.n	8002a12 <LoopForever>
  ldr   r0, =_estack
 8002a14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a1c:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 8002a20:	08012378 	.word	0x08012378
  ldr r2, =_sbss
 8002a24:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 8002a28:	200052c0 	.word	0x200052c0

08002a2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a2c:	e7fe      	b.n	8002a2c <ADC1_2_IRQHandler>

08002a2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a38:	2003      	movs	r0, #3
 8002a3a:	f001 ff2f 	bl	800489c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f000 f80e 	bl	8002a60 <HAL_InitTick>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	71fb      	strb	r3, [r7, #7]
 8002a4e:	e001      	b.n	8002a54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a50:	f7ff fb8a 	bl	8002168 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a54:	79fb      	ldrb	r3, [r7, #7]

}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002a6c:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <HAL_InitTick+0x68>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d022      	beq.n	8002aba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a74:	4b15      	ldr	r3, [pc, #84]	; (8002acc <HAL_InitTick+0x6c>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <HAL_InitTick+0x68>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a80:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f001 ff3a 	bl	8004902 <HAL_SYSTICK_Config>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10f      	bne.n	8002ab4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b0f      	cmp	r3, #15
 8002a98:	d809      	bhi.n	8002aae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa2:	f001 ff06 	bl	80048b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <HAL_InitTick+0x70>)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	e007      	b.n	8002abe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
 8002ab2:	e004      	b.n	8002abe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
 8002ab8:	e001      	b.n	8002abe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20000014 	.word	0x20000014
 8002acc:	2000000c 	.word	0x2000000c
 8002ad0:	20000010 	.word	0x20000010

08002ad4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_IncTick+0x1c>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_IncTick+0x20>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	4a03      	ldr	r2, [pc, #12]	; (8002af0 <HAL_IncTick+0x1c>)
 8002ae4:	6013      	str	r3, [r2, #0]
}
 8002ae6:	bf00      	nop
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	200037a0 	.word	0x200037a0
 8002af4:	20000014 	.word	0x20000014

08002af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return uwTick;
 8002afc:	4b03      	ldr	r3, [pc, #12]	; (8002b0c <HAL_GetTick+0x14>)
 8002afe:	681b      	ldr	r3, [r3, #0]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	200037a0 	.word	0x200037a0

08002b10 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b20:	4904      	ldr	r1, [pc, #16]	; (8002b34 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	600b      	str	r3, [r1, #0]
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	40010030 	.word	0x40010030

08002b38 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002b40:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 0202 	bic.w	r2, r3, #2
 8002b48:	4904      	ldr	r1, [pc, #16]	; (8002b5c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	600b      	str	r3, [r1, #0]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	40010030 	.word	0x40010030

08002b60 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002b66:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a0e      	ldr	r2, [pc, #56]	; (8002ba4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002b72:	f7ff ffc1 	bl	8002af8 <HAL_GetTick>
 8002b76:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8002b78:	e008      	b.n	8002b8c <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8002b7a:	f7ff ffbd 	bl	8002af8 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b0a      	cmp	r3, #10
 8002b86:	d901      	bls.n	8002b8c <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e006      	b.n	8002b9a <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40010030 	.word	0x40010030

08002ba8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	609a      	str	r2, [r3, #8]
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	609a      	str	r2, [r3, #8]
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	3360      	adds	r3, #96	; 0x60
 8002c22:	461a      	mov	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <LL_ADC_SetOffset+0x44>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002c48:	bf00      	nop
 8002c4a:	371c      	adds	r7, #28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	03fff000 	.word	0x03fff000

08002c58 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3360      	adds	r3, #96	; 0x60
 8002c66:	461a      	mov	r2, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3360      	adds	r3, #96	; 0x60
 8002c94:	461a      	mov	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002cae:	bf00      	nop
 8002cb0:	371c      	adds	r7, #28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b087      	sub	sp, #28
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	3360      	adds	r3, #96	; 0x60
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002ce4:	bf00      	nop
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	3360      	adds	r3, #96	; 0x60
 8002d00:	461a      	mov	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	431a      	orrs	r2, r3
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002d1a:	bf00      	nop
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	615a      	str	r2, [r3, #20]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b087      	sub	sp, #28
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	3330      	adds	r3, #48	; 0x30
 8002d82:	461a      	mov	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	4413      	add	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f003 031f 	and.w	r3, r3, #31
 8002d9c:	211f      	movs	r1, #31
 8002d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	401a      	ands	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	0e9b      	lsrs	r3, r3, #26
 8002daa:	f003 011f 	and.w	r1, r3, #31
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	fa01 f303 	lsl.w	r3, r1, r3
 8002db8:	431a      	orrs	r2, r3
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b087      	sub	sp, #28
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	60f8      	str	r0, [r7, #12]
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3314      	adds	r3, #20
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	0e5b      	lsrs	r3, r3, #25
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	4413      	add	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	0d1b      	lsrs	r3, r3, #20
 8002df2:	f003 031f 	and.w	r3, r3, #31
 8002df6:	2107      	movs	r1, #7
 8002df8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	401a      	ands	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	0d1b      	lsrs	r3, r3, #20
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e14:	bf00      	nop
 8002e16:	371c      	adds	r7, #28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f003 0318 	and.w	r3, r3, #24
 8002e42:	4908      	ldr	r1, [pc, #32]	; (8002e64 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002e44:	40d9      	lsrs	r1, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	400b      	ands	r3, r1
 8002e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	0007ffff 	.word	0x0007ffff

08002e68 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 031f 	and.w	r3, r3, #31
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002e94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6093      	str	r3, [r2, #8]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ebc:	d101      	bne.n	8002ec2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002ee0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ee4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f0c:	d101      	bne.n	8002f12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f34:	f043 0201 	orr.w	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f5c:	f043 0202 	orr.w	r2, r3, #2
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <LL_ADC_IsEnabled+0x18>
 8002f84:	2301      	movs	r3, #1
 8002f86:	e000      	b.n	8002f8a <LL_ADC_IsEnabled+0x1a>
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d101      	bne.n	8002fae <LL_ADC_IsDisableOngoing+0x18>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <LL_ADC_IsDisableOngoing+0x1a>
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fd0:	f043 0204 	orr.w	r2, r3, #4
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ff4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ff8:	f043 0210 	orr.w	r2, r3, #16
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b04      	cmp	r3, #4
 800301e:	d101      	bne.n	8003024 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003042:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003046:	f043 0220 	orr.w	r2, r3, #32
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b08      	cmp	r3, #8
 800306c:	d101      	bne.n	8003072 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003080:	b590      	push	{r4, r7, lr}
 8003082:	b089      	sub	sp, #36	; 0x24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e1a9      	b.n	80033ee <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d109      	bne.n	80030bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff f889 	bl	80021c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fef1 	bl	8002ea8 <LL_ADC_IsDeepPowerDownEnabled>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d004      	beq.n	80030d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fed7 	bl	8002e84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff ff0c 	bl	8002ef8 <LL_ADC_IsInternalRegulatorEnabled>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d115      	bne.n	8003112 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fef0 	bl	8002ed0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030f0:	4b9c      	ldr	r3, [pc, #624]	; (8003364 <HAL_ADC_Init+0x2e4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	099b      	lsrs	r3, r3, #6
 80030f6:	4a9c      	ldr	r2, [pc, #624]	; (8003368 <HAL_ADC_Init+0x2e8>)
 80030f8:	fba2 2303 	umull	r2, r3, r2, r3
 80030fc:	099b      	lsrs	r3, r3, #6
 80030fe:	3301      	adds	r3, #1
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003104:	e002      	b.n	800310c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	3b01      	subs	r3, #1
 800310a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f9      	bne.n	8003106 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff feee 	bl	8002ef8 <LL_ADC_IsInternalRegulatorEnabled>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10d      	bne.n	800313e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003126:	f043 0210 	orr.w	r2, r3, #16
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003132:	f043 0201 	orr.w	r2, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff ff62 	bl	800300c <LL_ADC_REG_IsConversionOngoing>
 8003148:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314e:	f003 0310 	and.w	r3, r3, #16
 8003152:	2b00      	cmp	r3, #0
 8003154:	f040 8142 	bne.w	80033dc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2b00      	cmp	r3, #0
 800315c:	f040 813e 	bne.w	80033dc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003164:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003168:	f043 0202 	orr.w	r2, r3, #2
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff fefb 	bl	8002f70 <LL_ADC_IsEnabled>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d141      	bne.n	8003204 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003188:	d004      	beq.n	8003194 <HAL_ADC_Init+0x114>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a77      	ldr	r2, [pc, #476]	; (800336c <HAL_ADC_Init+0x2ec>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d10f      	bne.n	80031b4 <HAL_ADC_Init+0x134>
 8003194:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003198:	f7ff feea 	bl	8002f70 <LL_ADC_IsEnabled>
 800319c:	4604      	mov	r4, r0
 800319e:	4873      	ldr	r0, [pc, #460]	; (800336c <HAL_ADC_Init+0x2ec>)
 80031a0:	f7ff fee6 	bl	8002f70 <LL_ADC_IsEnabled>
 80031a4:	4603      	mov	r3, r0
 80031a6:	4323      	orrs	r3, r4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	e012      	b.n	80031da <HAL_ADC_Init+0x15a>
 80031b4:	486e      	ldr	r0, [pc, #440]	; (8003370 <HAL_ADC_Init+0x2f0>)
 80031b6:	f7ff fedb 	bl	8002f70 <LL_ADC_IsEnabled>
 80031ba:	4604      	mov	r4, r0
 80031bc:	486d      	ldr	r0, [pc, #436]	; (8003374 <HAL_ADC_Init+0x2f4>)
 80031be:	f7ff fed7 	bl	8002f70 <LL_ADC_IsEnabled>
 80031c2:	4603      	mov	r3, r0
 80031c4:	431c      	orrs	r4, r3
 80031c6:	486c      	ldr	r0, [pc, #432]	; (8003378 <HAL_ADC_Init+0x2f8>)
 80031c8:	f7ff fed2 	bl	8002f70 <LL_ADC_IsEnabled>
 80031cc:	4603      	mov	r3, r0
 80031ce:	4323      	orrs	r3, r4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	bf0c      	ite	eq
 80031d4:	2301      	moveq	r3, #1
 80031d6:	2300      	movne	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d012      	beq.n	8003204 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031e6:	d004      	beq.n	80031f2 <HAL_ADC_Init+0x172>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a5f      	ldr	r2, [pc, #380]	; (800336c <HAL_ADC_Init+0x2ec>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d101      	bne.n	80031f6 <HAL_ADC_Init+0x176>
 80031f2:	4a62      	ldr	r2, [pc, #392]	; (800337c <HAL_ADC_Init+0x2fc>)
 80031f4:	e000      	b.n	80031f8 <HAL_ADC_Init+0x178>
 80031f6:	4a62      	ldr	r2, [pc, #392]	; (8003380 <HAL_ADC_Init+0x300>)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4619      	mov	r1, r3
 80031fe:	4610      	mov	r0, r2
 8003200:	f7ff fcd2 	bl	8002ba8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	7f5b      	ldrb	r3, [r3, #29]
 8003208:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800320e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003214:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800321a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003222:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003224:	4313      	orrs	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800322e:	2b01      	cmp	r3, #1
 8003230:	d106      	bne.n	8003240 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003236:	3b01      	subs	r3, #1
 8003238:	045b      	lsls	r3, r3, #17
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4313      	orrs	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	2b00      	cmp	r3, #0
 8003246:	d009      	beq.n	800325c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4313      	orrs	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	4b48      	ldr	r3, [pc, #288]	; (8003384 <HAL_ADC_Init+0x304>)
 8003264:	4013      	ands	r3, r2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	69b9      	ldr	r1, [r7, #24]
 800326c:	430b      	orrs	r3, r1
 800326e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fee5 	bl	800305a <LL_ADC_INJ_IsConversionOngoing>
 8003290:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d17f      	bne.n	8003398 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d17c      	bne.n	8003398 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80032a2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032aa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032ba:	f023 0302 	bic.w	r3, r3, #2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6812      	ldr	r2, [r2, #0]
 80032c2:	69b9      	ldr	r1, [r7, #24]
 80032c4:	430b      	orrs	r3, r1
 80032c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d017      	beq.n	8003300 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80032de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80032e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80032ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6911      	ldr	r1, [r2, #16]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	430b      	orrs	r3, r1
 80032fa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80032fe:	e013      	b.n	8003328 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800330e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003320:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003324:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800332e:	2b01      	cmp	r3, #1
 8003330:	d12a      	bne.n	8003388 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800333c:	f023 0304 	bic.w	r3, r3, #4
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003348:	4311      	orrs	r1, r2
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800334e:	4311      	orrs	r1, r2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003354:	430a      	orrs	r2, r1
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0201 	orr.w	r2, r2, #1
 8003360:	611a      	str	r2, [r3, #16]
 8003362:	e019      	b.n	8003398 <HAL_ADC_Init+0x318>
 8003364:	2000000c 	.word	0x2000000c
 8003368:	053e2d63 	.word	0x053e2d63
 800336c:	50000100 	.word	0x50000100
 8003370:	50000400 	.word	0x50000400
 8003374:	50000500 	.word	0x50000500
 8003378:	50000600 	.word	0x50000600
 800337c:	50000300 	.word	0x50000300
 8003380:	50000700 	.word	0x50000700
 8003384:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0201 	bic.w	r2, r2, #1
 8003396:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d10c      	bne.n	80033ba <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f023 010f 	bic.w	r1, r3, #15
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	1e5a      	subs	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
 80033b8:	e007      	b.n	80033ca <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 020f 	bic.w	r2, r2, #15
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ce:	f023 0303 	bic.w	r3, r3, #3
 80033d2:	f043 0201 	orr.w	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80033da:	e007      	b.n	80033ec <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e0:	f043 0210 	orr.w	r2, r3, #16
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3724      	adds	r7, #36	; 0x24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd90      	pop	{r4, r7, pc}
 80033f6:	bf00      	nop

080033f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800340c:	d004      	beq.n	8003418 <HAL_ADC_Start_DMA+0x20>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a5a      	ldr	r2, [pc, #360]	; (800357c <HAL_ADC_Start_DMA+0x184>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d101      	bne.n	800341c <HAL_ADC_Start_DMA+0x24>
 8003418:	4b59      	ldr	r3, [pc, #356]	; (8003580 <HAL_ADC_Start_DMA+0x188>)
 800341a:	e000      	b.n	800341e <HAL_ADC_Start_DMA+0x26>
 800341c:	4b59      	ldr	r3, [pc, #356]	; (8003584 <HAL_ADC_Start_DMA+0x18c>)
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fd22 	bl	8002e68 <LL_ADC_GetMultimode>
 8003424:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff fdee 	bl	800300c <LL_ADC_REG_IsConversionOngoing>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	f040 809b 	bne.w	800356e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_ADC_Start_DMA+0x4e>
 8003442:	2302      	movs	r3, #2
 8003444:	e096      	b.n	8003574 <HAL_ADC_Start_DMA+0x17c>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a4d      	ldr	r2, [pc, #308]	; (8003588 <HAL_ADC_Start_DMA+0x190>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d008      	beq.n	800346a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	2b05      	cmp	r3, #5
 8003462:	d002      	beq.n	800346a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	2b09      	cmp	r3, #9
 8003468:	d17a      	bne.n	8003560 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 fe00 	bl	8004070 <ADC_Enable>
 8003470:	4603      	mov	r3, r0
 8003472:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003474:	7dfb      	ldrb	r3, [r7, #23]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d16d      	bne.n	8003556 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003482:	f023 0301 	bic.w	r3, r3, #1
 8003486:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a3a      	ldr	r2, [pc, #232]	; (800357c <HAL_ADC_Start_DMA+0x184>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d009      	beq.n	80034ac <HAL_ADC_Start_DMA+0xb4>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a3b      	ldr	r2, [pc, #236]	; (800358c <HAL_ADC_Start_DMA+0x194>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d002      	beq.n	80034a8 <HAL_ADC_Start_DMA+0xb0>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	e003      	b.n	80034b0 <HAL_ADC_Start_DMA+0xb8>
 80034a8:	4b39      	ldr	r3, [pc, #228]	; (8003590 <HAL_ADC_Start_DMA+0x198>)
 80034aa:	e001      	b.n	80034b0 <HAL_ADC_Start_DMA+0xb8>
 80034ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d002      	beq.n	80034be <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d105      	bne.n	80034ca <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d006      	beq.n	80034e4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034da:	f023 0206 	bic.w	r2, r3, #6
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	661a      	str	r2, [r3, #96]	; 0x60
 80034e2:	e002      	b.n	80034ea <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ee:	4a29      	ldr	r2, [pc, #164]	; (8003594 <HAL_ADC_Start_DMA+0x19c>)
 80034f0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f6:	4a28      	ldr	r2, [pc, #160]	; (8003598 <HAL_ADC_Start_DMA+0x1a0>)
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fe:	4a27      	ldr	r2, [pc, #156]	; (800359c <HAL_ADC_Start_DMA+0x1a4>)
 8003500:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	221c      	movs	r2, #28
 8003508:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0210 	orr.w	r2, r2, #16
 8003520:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 0201 	orr.w	r2, r2, #1
 8003530:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3340      	adds	r3, #64	; 0x40
 800353c:	4619      	mov	r1, r3
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f001 fd07 	bl	8004f54 <HAL_DMA_Start_IT>
 8003546:	4603      	mov	r3, r0
 8003548:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff fd34 	bl	8002fbc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003554:	e00d      	b.n	8003572 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800355e:	e008      	b.n	8003572 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800356c:	e001      	b.n	8003572 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800356e:	2302      	movs	r3, #2
 8003570:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003572:	7dfb      	ldrb	r3, [r7, #23]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	50000100 	.word	0x50000100
 8003580:	50000300 	.word	0x50000300
 8003584:	50000700 	.word	0x50000700
 8003588:	50000600 	.word	0x50000600
 800358c:	50000500 	.word	0x50000500
 8003590:	50000400 	.word	0x50000400
 8003594:	0800425b 	.word	0x0800425b
 8003598:	08004333 	.word	0x08004333
 800359c:	0800434f 	.word	0x0800434f

080035a0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_ADC_Stop_DMA+0x16>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e051      	b.n	800365a <HAL_ADC_Stop_DMA+0xba>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80035be:	2103      	movs	r1, #3
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 fc99 	bl	8003ef8 <ADC_ConversionStop>
 80035c6:	4603      	mov	r3, r0
 80035c8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d13f      	bne.n	8003650 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0201 	bic.w	r2, r2, #1
 80035de:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d10f      	bne.n	800360e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 fd29 	bl	800504a <HAL_DMA_Abort>
 80035f8:	4603      	mov	r3, r0
 80035fa:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003606:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0210 	bic.w	r2, r2, #16
 800361c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d105      	bne.n	8003630 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fdb9 	bl	800419c <ADC_Disable>
 800362a:	4603      	mov	r3, r0
 800362c:	73fb      	strb	r3, [r7, #15]
 800362e:	e002      	b.n	8003636 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fdb3 	bl	800419c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d109      	bne.n	8003650 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003640:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003644:	f023 0301 	bic.w	r3, r3, #1
 8003648:	f043 0201 	orr.w	r2, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003658:	7bfb      	ldrb	r3, [r7, #15]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
	...

08003678 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b0b6      	sub	sp, #216	; 0xd8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003692:	2b01      	cmp	r3, #1
 8003694:	d102      	bne.n	800369c <HAL_ADC_ConfigChannel+0x24>
 8003696:	2302      	movs	r3, #2
 8003698:	f000 bc13 	b.w	8003ec2 <HAL_ADC_ConfigChannel+0x84a>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff fcaf 	bl	800300c <LL_ADC_REG_IsConversionOngoing>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f040 83f3 	bne.w	8003e9c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6859      	ldr	r1, [r3, #4]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	f7ff fb55 	bl	8002d72 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff fc9d 	bl	800300c <LL_ADC_REG_IsConversionOngoing>
 80036d2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fcbd 	bl	800305a <LL_ADC_INJ_IsConversionOngoing>
 80036e0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f040 81d9 	bne.w	8003aa0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f040 81d4 	bne.w	8003aa0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003700:	d10f      	bne.n	8003722 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2200      	movs	r2, #0
 800370c:	4619      	mov	r1, r3
 800370e:	f7ff fb5c 	bl	8002dca <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff fb03 	bl	8002d26 <LL_ADC_SetSamplingTimeCommonConfig>
 8003720:	e00e      	b.n	8003740 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	6819      	ldr	r1, [r3, #0]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	461a      	mov	r2, r3
 8003730:	f7ff fb4b 	bl	8002dca <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2100      	movs	r1, #0
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff faf3 	bl	8002d26 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	695a      	ldr	r2, [r3, #20]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	08db      	lsrs	r3, r3, #3
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	2b04      	cmp	r3, #4
 8003760:	d022      	beq.n	80037a8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6919      	ldr	r1, [r3, #16]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003772:	f7ff fa4d 	bl	8002c10 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6919      	ldr	r1, [r3, #16]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	461a      	mov	r2, r3
 8003784:	f7ff fa99 	bl	8002cba <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6818      	ldr	r0, [r3, #0]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003794:	2b01      	cmp	r3, #1
 8003796:	d102      	bne.n	800379e <HAL_ADC_ConfigChannel+0x126>
 8003798:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800379c:	e000      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x128>
 800379e:	2300      	movs	r3, #0
 80037a0:	461a      	mov	r2, r3
 80037a2:	f7ff faa5 	bl	8002cf0 <LL_ADC_SetOffsetSaturation>
 80037a6:	e17b      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2100      	movs	r1, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff fa52 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10a      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x15c>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff fa47 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 80037ca:	4603      	mov	r3, r0
 80037cc:	0e9b      	lsrs	r3, r3, #26
 80037ce:	f003 021f 	and.w	r2, r3, #31
 80037d2:	e01e      	b.n	8003812 <HAL_ADC_ConfigChannel+0x19a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2100      	movs	r1, #0
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff fa3c 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80037ea:	fa93 f3a3 	rbit	r3, r3
 80037ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80037f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80037fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003802:	2320      	movs	r3, #32
 8003804:	e004      	b.n	8003810 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003806:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800381a:	2b00      	cmp	r3, #0
 800381c:	d105      	bne.n	800382a <HAL_ADC_ConfigChannel+0x1b2>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	0e9b      	lsrs	r3, r3, #26
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	e018      	b.n	800385c <HAL_ADC_ConfigChannel+0x1e4>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003832:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003836:	fa93 f3a3 	rbit	r3, r3
 800383a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800383e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003842:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003846:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800384e:	2320      	movs	r3, #32
 8003850:	e004      	b.n	800385c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003852:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003856:	fab3 f383 	clz	r3, r3
 800385a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800385c:	429a      	cmp	r2, r3
 800385e:	d106      	bne.n	800386e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2200      	movs	r2, #0
 8003866:	2100      	movs	r1, #0
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff fa0b 	bl	8002c84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2101      	movs	r1, #1
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff f9ef 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 800387a:	4603      	mov	r3, r0
 800387c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10a      	bne.n	800389a <HAL_ADC_ConfigChannel+0x222>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2101      	movs	r1, #1
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff f9e4 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 8003890:	4603      	mov	r3, r0
 8003892:	0e9b      	lsrs	r3, r3, #26
 8003894:	f003 021f 	and.w	r2, r3, #31
 8003898:	e01e      	b.n	80038d8 <HAL_ADC_ConfigChannel+0x260>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2101      	movs	r1, #1
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff f9d9 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 80038a6:	4603      	mov	r3, r0
 80038a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038b0:	fa93 f3a3 	rbit	r3, r3
 80038b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80038b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80038c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80038c8:	2320      	movs	r3, #32
 80038ca:	e004      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80038cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80038d0:	fab3 f383 	clz	r3, r3
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d105      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x278>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	0e9b      	lsrs	r3, r3, #26
 80038ea:	f003 031f 	and.w	r3, r3, #31
 80038ee:	e018      	b.n	8003922 <HAL_ADC_ConfigChannel+0x2aa>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038fc:	fa93 f3a3 	rbit	r3, r3
 8003900:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003904:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003908:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800390c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003914:	2320      	movs	r3, #32
 8003916:	e004      	b.n	8003922 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003918:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800391c:	fab3 f383 	clz	r3, r3
 8003920:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003922:	429a      	cmp	r2, r3
 8003924:	d106      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2200      	movs	r2, #0
 800392c:	2101      	movs	r1, #1
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff f9a8 	bl	8002c84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2102      	movs	r1, #2
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff f98c 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 8003940:	4603      	mov	r3, r0
 8003942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10a      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x2e8>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2102      	movs	r1, #2
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff f981 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 8003956:	4603      	mov	r3, r0
 8003958:	0e9b      	lsrs	r3, r3, #26
 800395a:	f003 021f 	and.w	r2, r3, #31
 800395e:	e01e      	b.n	800399e <HAL_ADC_ConfigChannel+0x326>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2102      	movs	r1, #2
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff f976 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 800396c:	4603      	mov	r3, r0
 800396e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003972:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800397e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003982:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003986:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800398e:	2320      	movs	r3, #32
 8003990:	e004      	b.n	800399c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003992:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003996:	fab3 f383 	clz	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d105      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x33e>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	0e9b      	lsrs	r3, r3, #26
 80039b0:	f003 031f 	and.w	r3, r3, #31
 80039b4:	e016      	b.n	80039e4 <HAL_ADC_ConfigChannel+0x36c>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039c2:	fa93 f3a3 	rbit	r3, r3
 80039c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80039c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80039ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80039d6:	2320      	movs	r3, #32
 80039d8:	e004      	b.n	80039e4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80039da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039de:	fab3 f383 	clz	r3, r3
 80039e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d106      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2200      	movs	r2, #0
 80039ee:	2102      	movs	r1, #2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff f947 	bl	8002c84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2103      	movs	r1, #3
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff f92b 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x3aa>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2103      	movs	r1, #3
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff f920 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	0e9b      	lsrs	r3, r3, #26
 8003a1c:	f003 021f 	and.w	r2, r3, #31
 8003a20:	e017      	b.n	8003a52 <HAL_ADC_ConfigChannel+0x3da>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2103      	movs	r1, #3
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff f915 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a34:	fa93 f3a3 	rbit	r3, r3
 8003a38:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003a3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a3c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003a3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003a44:	2320      	movs	r3, #32
 8003a46:	e003      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003a48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a4a:	fab3 f383 	clz	r3, r3
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d105      	bne.n	8003a6a <HAL_ADC_ConfigChannel+0x3f2>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	0e9b      	lsrs	r3, r3, #26
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	e011      	b.n	8003a8e <HAL_ADC_ConfigChannel+0x416>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a72:	fa93 f3a3 	rbit	r3, r3
 8003a76:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003a82:	2320      	movs	r3, #32
 8003a84:	e003      	b.n	8003a8e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a88:	fab3 f383 	clz	r3, r3
 8003a8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d106      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2200      	movs	r2, #0
 8003a98:	2103      	movs	r1, #3
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff f8f2 	bl	8002c84 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fa63 	bl	8002f70 <LL_ADC_IsEnabled>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f040 813d 	bne.w	8003d2c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6819      	ldr	r1, [r3, #0]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f7ff f9ae 	bl	8002e20 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4aa2      	ldr	r2, [pc, #648]	; (8003d54 <HAL_ADC_ConfigChannel+0x6dc>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	f040 812e 	bne.w	8003d2c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10b      	bne.n	8003af8 <HAL_ADC_ConfigChannel+0x480>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	0e9b      	lsrs	r3, r3, #26
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	f003 031f 	and.w	r3, r3, #31
 8003aec:	2b09      	cmp	r3, #9
 8003aee:	bf94      	ite	ls
 8003af0:	2301      	movls	r3, #1
 8003af2:	2300      	movhi	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	e019      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x4b4>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b00:	fa93 f3a3 	rbit	r3, r3
 8003b04:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b08:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003b0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003b10:	2320      	movs	r3, #32
 8003b12:	e003      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003b14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	f003 031f 	and.w	r3, r3, #31
 8003b22:	2b09      	cmp	r3, #9
 8003b24:	bf94      	ite	ls
 8003b26:	2301      	movls	r3, #1
 8003b28:	2300      	movhi	r3, #0
 8003b2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d079      	beq.n	8003c24 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d107      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0x4d4>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	0e9b      	lsrs	r3, r3, #26
 8003b42:	3301      	adds	r3, #1
 8003b44:	069b      	lsls	r3, r3, #26
 8003b46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b4a:	e015      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x500>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b54:	fa93 f3a3 	rbit	r3, r3
 8003b58:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b5c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003b64:	2320      	movs	r3, #32
 8003b66:	e003      	b.n	8003b70 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b6a:	fab3 f383 	clz	r3, r3
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	3301      	adds	r3, #1
 8003b72:	069b      	lsls	r3, r3, #26
 8003b74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d109      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x520>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	0e9b      	lsrs	r3, r3, #26
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	f003 031f 	and.w	r3, r3, #31
 8003b90:	2101      	movs	r1, #1
 8003b92:	fa01 f303 	lsl.w	r3, r1, r3
 8003b96:	e017      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x550>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ba0:	fa93 f3a3 	rbit	r3, r3
 8003ba4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ba8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003bb0:	2320      	movs	r3, #32
 8003bb2:	e003      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bb6:	fab3 f383 	clz	r3, r3
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	f003 031f 	and.w	r3, r3, #31
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc8:	ea42 0103 	orr.w	r1, r2, r3
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10a      	bne.n	8003bee <HAL_ADC_ConfigChannel+0x576>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	0e9b      	lsrs	r3, r3, #26
 8003bde:	3301      	adds	r3, #1
 8003be0:	f003 021f 	and.w	r2, r3, #31
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	051b      	lsls	r3, r3, #20
 8003bec:	e018      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x5a8>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf6:	fa93 f3a3 	rbit	r3, r3
 8003bfa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003c06:	2320      	movs	r3, #32
 8003c08:	e003      	b.n	8003c12 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c0c:	fab3 f383 	clz	r3, r3
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	3301      	adds	r3, #1
 8003c14:	f003 021f 	and.w	r2, r3, #31
 8003c18:	4613      	mov	r3, r2
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	4413      	add	r3, r2
 8003c1e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c20:	430b      	orrs	r3, r1
 8003c22:	e07e      	b.n	8003d22 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d107      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x5c8>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	0e9b      	lsrs	r3, r3, #26
 8003c36:	3301      	adds	r3, #1
 8003c38:	069b      	lsls	r3, r3, #26
 8003c3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c3e:	e015      	b.n	8003c6c <HAL_ADC_ConfigChannel+0x5f4>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c48:	fa93 f3a3 	rbit	r3, r3
 8003c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c50:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003c58:	2320      	movs	r3, #32
 8003c5a:	e003      	b.n	8003c64 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5e:	fab3 f383 	clz	r3, r3
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	3301      	adds	r3, #1
 8003c66:	069b      	lsls	r3, r3, #26
 8003c68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d109      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0x614>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	0e9b      	lsrs	r3, r3, #26
 8003c7e:	3301      	adds	r3, #1
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	2101      	movs	r1, #1
 8003c86:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8a:	e017      	b.n	8003cbc <HAL_ADC_ConfigChannel+0x644>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	fa93 f3a3 	rbit	r3, r3
 8003c98:	61fb      	str	r3, [r7, #28]
  return result;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003ca4:	2320      	movs	r3, #32
 8003ca6:	e003      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	fab3 f383 	clz	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	f003 031f 	and.w	r3, r3, #31
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cbc:	ea42 0103 	orr.w	r1, r2, r3
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10d      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x670>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	0e9b      	lsrs	r3, r3, #26
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	f003 021f 	and.w	r2, r3, #31
 8003cd8:	4613      	mov	r3, r2
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4413      	add	r3, r2
 8003cde:	3b1e      	subs	r3, #30
 8003ce0:	051b      	lsls	r3, r3, #20
 8003ce2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ce6:	e01b      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x6a8>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	fa93 f3a3 	rbit	r3, r3
 8003cf4:	613b      	str	r3, [r7, #16]
  return result;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003d00:	2320      	movs	r3, #32
 8003d02:	e003      	b.n	8003d0c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	fab3 f383 	clz	r3, r3
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	f003 021f 	and.w	r2, r3, #31
 8003d12:	4613      	mov	r3, r2
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	4413      	add	r3, r2
 8003d18:	3b1e      	subs	r3, #30
 8003d1a:	051b      	lsls	r3, r3, #20
 8003d1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d20:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d26:	4619      	mov	r1, r3
 8003d28:	f7ff f84f 	bl	8002dca <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <HAL_ADC_ConfigChannel+0x6e0>)
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 80be 	beq.w	8003eb6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d42:	d004      	beq.n	8003d4e <HAL_ADC_ConfigChannel+0x6d6>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a04      	ldr	r2, [pc, #16]	; (8003d5c <HAL_ADC_ConfigChannel+0x6e4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d10a      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x6ec>
 8003d4e:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <HAL_ADC_ConfigChannel+0x6e8>)
 8003d50:	e009      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x6ee>
 8003d52:	bf00      	nop
 8003d54:	407f0000 	.word	0x407f0000
 8003d58:	80080000 	.word	0x80080000
 8003d5c:	50000100 	.word	0x50000100
 8003d60:	50000300 	.word	0x50000300
 8003d64:	4b59      	ldr	r3, [pc, #356]	; (8003ecc <HAL_ADC_ConfigChannel+0x854>)
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fe ff44 	bl	8002bf4 <LL_ADC_GetCommonPathInternalCh>
 8003d6c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a56      	ldr	r2, [pc, #344]	; (8003ed0 <HAL_ADC_ConfigChannel+0x858>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d004      	beq.n	8003d84 <HAL_ADC_ConfigChannel+0x70c>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a55      	ldr	r2, [pc, #340]	; (8003ed4 <HAL_ADC_ConfigChannel+0x85c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d13a      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003d84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d134      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d98:	d005      	beq.n	8003da6 <HAL_ADC_ConfigChannel+0x72e>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a4e      	ldr	r2, [pc, #312]	; (8003ed8 <HAL_ADC_ConfigChannel+0x860>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	f040 8085 	bne.w	8003eb0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dae:	d004      	beq.n	8003dba <HAL_ADC_ConfigChannel+0x742>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a49      	ldr	r2, [pc, #292]	; (8003edc <HAL_ADC_ConfigChannel+0x864>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d101      	bne.n	8003dbe <HAL_ADC_ConfigChannel+0x746>
 8003dba:	4a49      	ldr	r2, [pc, #292]	; (8003ee0 <HAL_ADC_ConfigChannel+0x868>)
 8003dbc:	e000      	b.n	8003dc0 <HAL_ADC_ConfigChannel+0x748>
 8003dbe:	4a43      	ldr	r2, [pc, #268]	; (8003ecc <HAL_ADC_ConfigChannel+0x854>)
 8003dc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	f7fe feff 	bl	8002bce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dd0:	4b44      	ldr	r3, [pc, #272]	; (8003ee4 <HAL_ADC_ConfigChannel+0x86c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	099b      	lsrs	r3, r3, #6
 8003dd6:	4a44      	ldr	r2, [pc, #272]	; (8003ee8 <HAL_ADC_ConfigChannel+0x870>)
 8003dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ddc:	099b      	lsrs	r3, r3, #6
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	4613      	mov	r3, r2
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003dea:	e002      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1f9      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003df8:	e05a      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a3b      	ldr	r2, [pc, #236]	; (8003eec <HAL_ADC_ConfigChannel+0x874>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d125      	bne.n	8003e50 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d11f      	bne.n	8003e50 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a31      	ldr	r2, [pc, #196]	; (8003edc <HAL_ADC_ConfigChannel+0x864>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d104      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x7ac>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a34      	ldr	r2, [pc, #208]	; (8003ef0 <HAL_ADC_ConfigChannel+0x878>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d047      	beq.n	8003eb4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e2c:	d004      	beq.n	8003e38 <HAL_ADC_ConfigChannel+0x7c0>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a2a      	ldr	r2, [pc, #168]	; (8003edc <HAL_ADC_ConfigChannel+0x864>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d101      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x7c4>
 8003e38:	4a29      	ldr	r2, [pc, #164]	; (8003ee0 <HAL_ADC_ConfigChannel+0x868>)
 8003e3a:	e000      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x7c6>
 8003e3c:	4a23      	ldr	r2, [pc, #140]	; (8003ecc <HAL_ADC_ConfigChannel+0x854>)
 8003e3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e46:	4619      	mov	r1, r3
 8003e48:	4610      	mov	r0, r2
 8003e4a:	f7fe fec0 	bl	8002bce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e4e:	e031      	b.n	8003eb4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a27      	ldr	r2, [pc, #156]	; (8003ef4 <HAL_ADC_ConfigChannel+0x87c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d12d      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d127      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a1c      	ldr	r2, [pc, #112]	; (8003edc <HAL_ADC_ConfigChannel+0x864>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d022      	beq.n	8003eb6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e78:	d004      	beq.n	8003e84 <HAL_ADC_ConfigChannel+0x80c>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a17      	ldr	r2, [pc, #92]	; (8003edc <HAL_ADC_ConfigChannel+0x864>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d101      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x810>
 8003e84:	4a16      	ldr	r2, [pc, #88]	; (8003ee0 <HAL_ADC_ConfigChannel+0x868>)
 8003e86:	e000      	b.n	8003e8a <HAL_ADC_ConfigChannel+0x812>
 8003e88:	4a10      	ldr	r2, [pc, #64]	; (8003ecc <HAL_ADC_ConfigChannel+0x854>)
 8003e8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e92:	4619      	mov	r1, r3
 8003e94:	4610      	mov	r0, r2
 8003e96:	f7fe fe9a 	bl	8002bce <LL_ADC_SetCommonPathInternalCh>
 8003e9a:	e00c      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea0:	f043 0220 	orr.w	r2, r3, #32
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003eae:	e002      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003eb0:	bf00      	nop
 8003eb2:	e000      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003eb4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ebe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	37d8      	adds	r7, #216	; 0xd8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	50000700 	.word	0x50000700
 8003ed0:	c3210000 	.word	0xc3210000
 8003ed4:	90c00010 	.word	0x90c00010
 8003ed8:	50000600 	.word	0x50000600
 8003edc:	50000100 	.word	0x50000100
 8003ee0:	50000300 	.word	0x50000300
 8003ee4:	2000000c 	.word	0x2000000c
 8003ee8:	053e2d63 	.word	0x053e2d63
 8003eec:	c7520000 	.word	0xc7520000
 8003ef0:	50000500 	.word	0x50000500
 8003ef4:	cb840000 	.word	0xcb840000

08003ef8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff f87c 	bl	800300c <LL_ADC_REG_IsConversionOngoing>
 8003f14:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff f89d 	bl	800305a <LL_ADC_INJ_IsConversionOngoing>
 8003f20:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d103      	bne.n	8003f30 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 8098 	beq.w	8004060 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d02a      	beq.n	8003f94 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	7f5b      	ldrb	r3, [r3, #29]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d126      	bne.n	8003f94 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	7f1b      	ldrb	r3, [r3, #28]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d122      	bne.n	8003f94 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003f52:	e014      	b.n	8003f7e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	4a45      	ldr	r2, [pc, #276]	; (800406c <ADC_ConversionStop+0x174>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d90d      	bls.n	8003f78 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f60:	f043 0210 	orr.w	r2, r3, #16
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f6c:	f043 0201 	orr.w	r2, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e074      	b.n	8004062 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f88:	2b40      	cmp	r3, #64	; 0x40
 8003f8a:	d1e3      	bne.n	8003f54 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2240      	movs	r2, #64	; 0x40
 8003f92:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d014      	beq.n	8003fc4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff f834 	bl	800300c <LL_ADC_REG_IsConversionOngoing>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00c      	beq.n	8003fc4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fe fff1 	bl	8002f96 <LL_ADC_IsDisableOngoing>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d104      	bne.n	8003fc4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff f810 	bl	8002fe4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d014      	beq.n	8003ff4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff f843 	bl	800305a <LL_ADC_INJ_IsConversionOngoing>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00c      	beq.n	8003ff4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fe ffd9 	bl	8002f96 <LL_ADC_IsDisableOngoing>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d104      	bne.n	8003ff4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7ff f81f 	bl	8003032 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d005      	beq.n	8004006 <ADC_ConversionStop+0x10e>
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d105      	bne.n	800400c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004000:	230c      	movs	r3, #12
 8004002:	617b      	str	r3, [r7, #20]
        break;
 8004004:	e005      	b.n	8004012 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004006:	2308      	movs	r3, #8
 8004008:	617b      	str	r3, [r7, #20]
        break;
 800400a:	e002      	b.n	8004012 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800400c:	2304      	movs	r3, #4
 800400e:	617b      	str	r3, [r7, #20]
        break;
 8004010:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004012:	f7fe fd71 	bl	8002af8 <HAL_GetTick>
 8004016:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004018:	e01b      	b.n	8004052 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800401a:	f7fe fd6d 	bl	8002af8 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b05      	cmp	r3, #5
 8004026:	d914      	bls.n	8004052 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	4013      	ands	r3, r2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00d      	beq.n	8004052 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403a:	f043 0210 	orr.w	r2, r3, #16
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004046:	f043 0201 	orr.w	r2, r3, #1
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e007      	b.n	8004062 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	4013      	ands	r3, r2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1dc      	bne.n	800401a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3720      	adds	r7, #32
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	a33fffff 	.word	0xa33fffff

08004070 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004078:	2300      	movs	r3, #0
 800407a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f7fe ff75 	bl	8002f70 <LL_ADC_IsEnabled>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d176      	bne.n	800417a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	4b3c      	ldr	r3, [pc, #240]	; (8004184 <ADC_Enable+0x114>)
 8004094:	4013      	ands	r3, r2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00d      	beq.n	80040b6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409e:	f043 0210 	orr.w	r2, r3, #16
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040aa:	f043 0201 	orr.w	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e062      	b.n	800417c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fe ff30 	bl	8002f20 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040c8:	d004      	beq.n	80040d4 <ADC_Enable+0x64>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a2e      	ldr	r2, [pc, #184]	; (8004188 <ADC_Enable+0x118>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d101      	bne.n	80040d8 <ADC_Enable+0x68>
 80040d4:	4b2d      	ldr	r3, [pc, #180]	; (800418c <ADC_Enable+0x11c>)
 80040d6:	e000      	b.n	80040da <ADC_Enable+0x6a>
 80040d8:	4b2d      	ldr	r3, [pc, #180]	; (8004190 <ADC_Enable+0x120>)
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fe fd8a 	bl	8002bf4 <LL_ADC_GetCommonPathInternalCh>
 80040e0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80040e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d013      	beq.n	8004112 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040ea:	4b2a      	ldr	r3, [pc, #168]	; (8004194 <ADC_Enable+0x124>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	099b      	lsrs	r3, r3, #6
 80040f0:	4a29      	ldr	r2, [pc, #164]	; (8004198 <ADC_Enable+0x128>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	099b      	lsrs	r3, r3, #6
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	4613      	mov	r3, r2
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004104:	e002      	b.n	800410c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	3b01      	subs	r3, #1
 800410a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f9      	bne.n	8004106 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004112:	f7fe fcf1 	bl	8002af8 <HAL_GetTick>
 8004116:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004118:	e028      	b.n	800416c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7fe ff26 	bl	8002f70 <LL_ADC_IsEnabled>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d104      	bne.n	8004134 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f7fe fef6 	bl	8002f20 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004134:	f7fe fce0 	bl	8002af8 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d914      	bls.n	800416c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b01      	cmp	r3, #1
 800414e:	d00d      	beq.n	800416c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004154:	f043 0210 	orr.w	r2, r3, #16
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004160:	f043 0201 	orr.w	r2, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e007      	b.n	800417c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b01      	cmp	r3, #1
 8004178:	d1cf      	bne.n	800411a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	8000003f 	.word	0x8000003f
 8004188:	50000100 	.word	0x50000100
 800418c:	50000300 	.word	0x50000300
 8004190:	50000700 	.word	0x50000700
 8004194:	2000000c 	.word	0x2000000c
 8004198:	053e2d63 	.word	0x053e2d63

0800419c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fe fef4 	bl	8002f96 <LL_ADC_IsDisableOngoing>
 80041ae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fe fedb 	bl	8002f70 <LL_ADC_IsEnabled>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d047      	beq.n	8004250 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d144      	bne.n	8004250 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 030d 	and.w	r3, r3, #13
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d10c      	bne.n	80041ee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fe feb5 	bl	8002f48 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2203      	movs	r2, #3
 80041e4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041e6:	f7fe fc87 	bl	8002af8 <HAL_GetTick>
 80041ea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80041ec:	e029      	b.n	8004242 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f2:	f043 0210 	orr.w	r2, r3, #16
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041fe:	f043 0201 	orr.w	r2, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e023      	b.n	8004252 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800420a:	f7fe fc75 	bl	8002af8 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d914      	bls.n	8004242 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00d      	beq.n	8004242 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422a:	f043 0210 	orr.w	r2, r3, #16
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004236:	f043 0201 	orr.w	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e007      	b.n	8004252 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1dc      	bne.n	800420a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004270:	2b00      	cmp	r3, #0
 8004272:	d14b      	bne.n	800430c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004278:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d021      	beq.n	80042d2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7fe fd5a 	bl	8002d4c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d032      	beq.n	8004304 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d12b      	bne.n	8004304 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d11f      	bne.n	8004304 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c8:	f043 0201 	orr.w	r2, r3, #1
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80042d0:	e018      	b.n	8004304 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d111      	bne.n	8004304 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d105      	bne.n	8004304 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fc:	f043 0201 	orr.w	r2, r3, #1
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f7fd fdc9 	bl	8001e9c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800430a:	e00e      	b.n	800432a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f7ff f9a2 	bl	8003662 <HAL_ADC_ErrorCallback>
}
 800431e:	e004      	b.n	800432a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	4798      	blx	r3
}
 800432a:	bf00      	nop
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f7fd fd69 	bl	8001e18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004346:	bf00      	nop
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004360:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800436c:	f043 0204 	orr.w	r2, r3, #4
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f7ff f974 	bl	8003662 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800437a:	bf00      	nop
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <LL_ADC_IsEnabled>:
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <LL_ADC_IsEnabled+0x18>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <LL_ADC_IsEnabled+0x1a>
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <LL_ADC_StartCalibration>:
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80043ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	609a      	str	r2, [r3, #8]
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <LL_ADC_IsCalibrationOnGoing>:
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043ee:	d101      	bne.n	80043f4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <LL_ADC_REG_IsConversionOngoing>:
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	2b04      	cmp	r3, #4
 8004414:	d101      	bne.n	800441a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004432:	2300      	movs	r3, #0
 8004434:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_ADCEx_Calibration_Start+0x1c>
 8004440:	2302      	movs	r3, #2
 8004442:	e04d      	b.n	80044e0 <HAL_ADCEx_Calibration_Start+0xb8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff fea5 	bl	800419c <ADC_Disable>
 8004452:	4603      	mov	r3, r0
 8004454:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004456:	7bfb      	ldrb	r3, [r7, #15]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d136      	bne.n	80044ca <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004460:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004464:	f023 0302 	bic.w	r3, r3, #2
 8004468:	f043 0202 	orr.w	r2, r3, #2
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6839      	ldr	r1, [r7, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff ff96 	bl	80043a8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800447c:	e014      	b.n	80044a8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	3301      	adds	r3, #1
 8004482:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4a18      	ldr	r2, [pc, #96]	; (80044e8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d90d      	bls.n	80044a8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004490:	f023 0312 	bic.w	r3, r3, #18
 8004494:	f043 0210 	orr.w	r2, r3, #16
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e01b      	b.n	80044e0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff ff94 	bl	80043da <LL_ADC_IsCalibrationOnGoing>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e2      	bne.n	800447e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044bc:	f023 0303 	bic.w	r3, r3, #3
 80044c0:	f043 0201 	orr.w	r2, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80044c8:	e005      	b.n	80044d6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ce:	f043 0210 	orr.w	r2, r3, #16
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80044de:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	0004de01 	.word	0x0004de01

080044ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80044ec:	b590      	push	{r4, r7, lr}
 80044ee:	b0a1      	sub	sp, #132	; 0x84
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004506:	2302      	movs	r3, #2
 8004508:	e0e7      	b.n	80046da <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004512:	2300      	movs	r3, #0
 8004514:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004516:	2300      	movs	r3, #0
 8004518:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004522:	d102      	bne.n	800452a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004524:	4b6f      	ldr	r3, [pc, #444]	; (80046e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004526:	60bb      	str	r3, [r7, #8]
 8004528:	e009      	b.n	800453e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a6e      	ldr	r2, [pc, #440]	; (80046e8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d102      	bne.n	800453a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004534:	4b6d      	ldr	r3, [pc, #436]	; (80046ec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004536:	60bb      	str	r3, [r7, #8]
 8004538:	e001      	b.n	800453e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800453a:	2300      	movs	r3, #0
 800453c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10b      	bne.n	800455c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004548:	f043 0220 	orr.w	r2, r3, #32
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0be      	b.n	80046da <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff ff4f 	bl	8004402 <LL_ADC_REG_IsConversionOngoing>
 8004564:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff ff49 	bl	8004402 <LL_ADC_REG_IsConversionOngoing>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	f040 80a0 	bne.w	80046b8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800457a:	2b00      	cmp	r3, #0
 800457c:	f040 809c 	bne.w	80046b8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004588:	d004      	beq.n	8004594 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a55      	ldr	r2, [pc, #340]	; (80046e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d101      	bne.n	8004598 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004594:	4b56      	ldr	r3, [pc, #344]	; (80046f0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004596:	e000      	b.n	800459a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004598:	4b56      	ldr	r3, [pc, #344]	; (80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800459a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d04b      	beq.n	800463c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80045a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	6859      	ldr	r1, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045b6:	035b      	lsls	r3, r3, #13
 80045b8:	430b      	orrs	r3, r1
 80045ba:	431a      	orrs	r2, r3
 80045bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045be:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045c8:	d004      	beq.n	80045d4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a45      	ldr	r2, [pc, #276]	; (80046e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d10f      	bne.n	80045f4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80045d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80045d8:	f7ff fed3 	bl	8004382 <LL_ADC_IsEnabled>
 80045dc:	4604      	mov	r4, r0
 80045de:	4841      	ldr	r0, [pc, #260]	; (80046e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045e0:	f7ff fecf 	bl	8004382 <LL_ADC_IsEnabled>
 80045e4:	4603      	mov	r3, r0
 80045e6:	4323      	orrs	r3, r4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bf0c      	ite	eq
 80045ec:	2301      	moveq	r3, #1
 80045ee:	2300      	movne	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	e012      	b.n	800461a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80045f4:	483c      	ldr	r0, [pc, #240]	; (80046e8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80045f6:	f7ff fec4 	bl	8004382 <LL_ADC_IsEnabled>
 80045fa:	4604      	mov	r4, r0
 80045fc:	483b      	ldr	r0, [pc, #236]	; (80046ec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80045fe:	f7ff fec0 	bl	8004382 <LL_ADC_IsEnabled>
 8004602:	4603      	mov	r3, r0
 8004604:	431c      	orrs	r4, r3
 8004606:	483c      	ldr	r0, [pc, #240]	; (80046f8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004608:	f7ff febb 	bl	8004382 <LL_ADC_IsEnabled>
 800460c:	4603      	mov	r3, r0
 800460e:	4323      	orrs	r3, r4
 8004610:	2b00      	cmp	r3, #0
 8004612:	bf0c      	ite	eq
 8004614:	2301      	moveq	r3, #1
 8004616:	2300      	movne	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d056      	beq.n	80046cc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800461e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004626:	f023 030f 	bic.w	r3, r3, #15
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	6811      	ldr	r1, [r2, #0]
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	6892      	ldr	r2, [r2, #8]
 8004632:	430a      	orrs	r2, r1
 8004634:	431a      	orrs	r2, r3
 8004636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004638:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800463a:	e047      	b.n	80046cc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800463c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004646:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004650:	d004      	beq.n	800465c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a23      	ldr	r2, [pc, #140]	; (80046e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d10f      	bne.n	800467c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800465c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004660:	f7ff fe8f 	bl	8004382 <LL_ADC_IsEnabled>
 8004664:	4604      	mov	r4, r0
 8004666:	481f      	ldr	r0, [pc, #124]	; (80046e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004668:	f7ff fe8b 	bl	8004382 <LL_ADC_IsEnabled>
 800466c:	4603      	mov	r3, r0
 800466e:	4323      	orrs	r3, r4
 8004670:	2b00      	cmp	r3, #0
 8004672:	bf0c      	ite	eq
 8004674:	2301      	moveq	r3, #1
 8004676:	2300      	movne	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	e012      	b.n	80046a2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800467c:	481a      	ldr	r0, [pc, #104]	; (80046e8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800467e:	f7ff fe80 	bl	8004382 <LL_ADC_IsEnabled>
 8004682:	4604      	mov	r4, r0
 8004684:	4819      	ldr	r0, [pc, #100]	; (80046ec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004686:	f7ff fe7c 	bl	8004382 <LL_ADC_IsEnabled>
 800468a:	4603      	mov	r3, r0
 800468c:	431c      	orrs	r4, r3
 800468e:	481a      	ldr	r0, [pc, #104]	; (80046f8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004690:	f7ff fe77 	bl	8004382 <LL_ADC_IsEnabled>
 8004694:	4603      	mov	r3, r0
 8004696:	4323      	orrs	r3, r4
 8004698:	2b00      	cmp	r3, #0
 800469a:	bf0c      	ite	eq
 800469c:	2301      	moveq	r3, #1
 800469e:	2300      	movne	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d012      	beq.n	80046cc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80046a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80046ae:	f023 030f 	bic.w	r3, r3, #15
 80046b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80046b4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80046b6:	e009      	b.n	80046cc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046bc:	f043 0220 	orr.w	r2, r3, #32
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80046ca:	e000      	b.n	80046ce <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80046cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80046d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3784      	adds	r7, #132	; 0x84
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd90      	pop	{r4, r7, pc}
 80046e2:	bf00      	nop
 80046e4:	50000100 	.word	0x50000100
 80046e8:	50000400 	.word	0x50000400
 80046ec:	50000500 	.word	0x50000500
 80046f0:	50000300 	.word	0x50000300
 80046f4:	50000700 	.word	0x50000700
 80046f8:	50000600 	.word	0x50000600

080046fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800470c:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <__NVIC_SetPriorityGrouping+0x44>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004718:	4013      	ands	r3, r2
 800471a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800472c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800472e:	4a04      	ldr	r2, [pc, #16]	; (8004740 <__NVIC_SetPriorityGrouping+0x44>)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	60d3      	str	r3, [r2, #12]
}
 8004734:	bf00      	nop
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	e000ed00 	.word	0xe000ed00

08004744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004748:	4b04      	ldr	r3, [pc, #16]	; (800475c <__NVIC_GetPriorityGrouping+0x18>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	0a1b      	lsrs	r3, r3, #8
 800474e:	f003 0307 	and.w	r3, r3, #7
}
 8004752:	4618      	mov	r0, r3
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	e000ed00 	.word	0xe000ed00

08004760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	4603      	mov	r3, r0
 8004768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800476a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800476e:	2b00      	cmp	r3, #0
 8004770:	db0b      	blt.n	800478a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004772:	79fb      	ldrb	r3, [r7, #7]
 8004774:	f003 021f 	and.w	r2, r3, #31
 8004778:	4907      	ldr	r1, [pc, #28]	; (8004798 <__NVIC_EnableIRQ+0x38>)
 800477a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800477e:	095b      	lsrs	r3, r3, #5
 8004780:	2001      	movs	r0, #1
 8004782:	fa00 f202 	lsl.w	r2, r0, r2
 8004786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	e000e100 	.word	0xe000e100

0800479c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	6039      	str	r1, [r7, #0]
 80047a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	db0a      	blt.n	80047c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	490c      	ldr	r1, [pc, #48]	; (80047e8 <__NVIC_SetPriority+0x4c>)
 80047b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ba:	0112      	lsls	r2, r2, #4
 80047bc:	b2d2      	uxtb	r2, r2
 80047be:	440b      	add	r3, r1
 80047c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047c4:	e00a      	b.n	80047dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	4908      	ldr	r1, [pc, #32]	; (80047ec <__NVIC_SetPriority+0x50>)
 80047cc:	79fb      	ldrb	r3, [r7, #7]
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	3b04      	subs	r3, #4
 80047d4:	0112      	lsls	r2, r2, #4
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	440b      	add	r3, r1
 80047da:	761a      	strb	r2, [r3, #24]
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	e000e100 	.word	0xe000e100
 80047ec:	e000ed00 	.word	0xe000ed00

080047f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b089      	sub	sp, #36	; 0x24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	f1c3 0307 	rsb	r3, r3, #7
 800480a:	2b04      	cmp	r3, #4
 800480c:	bf28      	it	cs
 800480e:	2304      	movcs	r3, #4
 8004810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	3304      	adds	r3, #4
 8004816:	2b06      	cmp	r3, #6
 8004818:	d902      	bls.n	8004820 <NVIC_EncodePriority+0x30>
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	3b03      	subs	r3, #3
 800481e:	e000      	b.n	8004822 <NVIC_EncodePriority+0x32>
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004824:	f04f 32ff 	mov.w	r2, #4294967295
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	43da      	mvns	r2, r3
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	401a      	ands	r2, r3
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004838:	f04f 31ff 	mov.w	r1, #4294967295
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	fa01 f303 	lsl.w	r3, r1, r3
 8004842:	43d9      	mvns	r1, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004848:	4313      	orrs	r3, r2
         );
}
 800484a:	4618      	mov	r0, r3
 800484c:	3724      	adds	r7, #36	; 0x24
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
	...

08004858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3b01      	subs	r3, #1
 8004864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004868:	d301      	bcc.n	800486e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800486a:	2301      	movs	r3, #1
 800486c:	e00f      	b.n	800488e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800486e:	4a0a      	ldr	r2, [pc, #40]	; (8004898 <SysTick_Config+0x40>)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3b01      	subs	r3, #1
 8004874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004876:	210f      	movs	r1, #15
 8004878:	f04f 30ff 	mov.w	r0, #4294967295
 800487c:	f7ff ff8e 	bl	800479c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004880:	4b05      	ldr	r3, [pc, #20]	; (8004898 <SysTick_Config+0x40>)
 8004882:	2200      	movs	r2, #0
 8004884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004886:	4b04      	ldr	r3, [pc, #16]	; (8004898 <SysTick_Config+0x40>)
 8004888:	2207      	movs	r2, #7
 800488a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	e000e010 	.word	0xe000e010

0800489c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff ff29 	bl	80046fc <__NVIC_SetPriorityGrouping>
}
 80048aa:	bf00      	nop
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b086      	sub	sp, #24
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	4603      	mov	r3, r0
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	607a      	str	r2, [r7, #4]
 80048be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048c0:	f7ff ff40 	bl	8004744 <__NVIC_GetPriorityGrouping>
 80048c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	68b9      	ldr	r1, [r7, #8]
 80048ca:	6978      	ldr	r0, [r7, #20]
 80048cc:	f7ff ff90 	bl	80047f0 <NVIC_EncodePriority>
 80048d0:	4602      	mov	r2, r0
 80048d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048d6:	4611      	mov	r1, r2
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff ff5f 	bl	800479c <__NVIC_SetPriority>
}
 80048de:	bf00      	nop
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b082      	sub	sp, #8
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	4603      	mov	r3, r0
 80048ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff ff33 	bl	8004760 <__NVIC_EnableIRQ>
}
 80048fa:	bf00      	nop
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7ff ffa4 	bl	8004858 <SysTick_Config>
 8004910:	4603      	mov	r3, r0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b082      	sub	sp, #8
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e014      	b.n	8004956 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	791b      	ldrb	r3, [r3, #4]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d105      	bne.n	8004942 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7fd fe41 	bl	80025c4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2202      	movs	r2, #2
 8004946:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e056      	b.n	8004a22 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	795b      	ldrb	r3, [r3, #5]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_DAC_Start+0x20>
 800497c:	2302      	movs	r3, #2
 800497e:	e050      	b.n	8004a22 <HAL_DAC_Start+0xc2>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2202      	movs	r2, #2
 800498a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6819      	ldr	r1, [r3, #0]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	f003 0310 	and.w	r3, r3, #16
 8004998:	2201      	movs	r2, #1
 800499a:	409a      	lsls	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049a4:	4b22      	ldr	r3, [pc, #136]	; (8004a30 <HAL_DAC_Start+0xd0>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	099b      	lsrs	r3, r3, #6
 80049aa:	4a22      	ldr	r2, [pc, #136]	; (8004a34 <HAL_DAC_Start+0xd4>)
 80049ac:	fba2 2303 	umull	r2, r3, r2, r3
 80049b0:	099b      	lsrs	r3, r3, #6
 80049b2:	3301      	adds	r3, #1
 80049b4:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80049b6:	e002      	b.n	80049be <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1f9      	bne.n	80049b8 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10f      	bne.n	80049ea <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d11d      	bne.n	8004a14 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0201 	orr.w	r2, r2, #1
 80049e6:	605a      	str	r2, [r3, #4]
 80049e8:	e014      	b.n	8004a14 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	f003 0310 	and.w	r3, r3, #16
 80049fa:	2102      	movs	r1, #2
 80049fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d107      	bne.n	8004a14 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0202 	orr.w	r2, r2, #2
 8004a12:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	2000000c 	.word	0x2000000c
 8004a34:	053e2d63 	.word	0x053e2d63

08004a38 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004a46:	2300      	movs	r3, #0
 8004a48:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e018      	b.n	8004a86 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d105      	bne.n	8004a72 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3308      	adds	r3, #8
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	e004      	b.n	8004a7c <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4413      	add	r3, r2
 8004a78:	3314      	adds	r3, #20
 8004a7a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
	...

08004a94 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08a      	sub	sp, #40	; 0x28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <HAL_DAC_ConfigChannel+0x1c>
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e19e      	b.n	8004df2 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	795b      	ldrb	r3, [r3, #5]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <HAL_DAC_ConfigChannel+0x2c>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e198      	b.n	8004df2 <HAL_DAC_ConfigChannel+0x35e>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d17a      	bne.n	8004bca <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004ad4:	f7fe f810 	bl	8002af8 <HAL_GetTick>
 8004ad8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d13d      	bne.n	8004b5c <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ae0:	e018      	b.n	8004b14 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004ae2:	f7fe f809 	bl	8002af8 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d911      	bls.n	8004b14 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f043 0208 	orr.w	r2, r3, #8
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2203      	movs	r2, #3
 8004b0e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e16e      	b.n	8004df2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1df      	bne.n	8004ae2 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b2a:	641a      	str	r2, [r3, #64]	; 0x40
 8004b2c:	e020      	b.n	8004b70 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004b2e:	f7fd ffe3 	bl	8002af8 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d90f      	bls.n	8004b5c <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	da0a      	bge.n	8004b5c <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f043 0208 	orr.w	r2, r3, #8
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2203      	movs	r2, #3
 8004b56:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e14a      	b.n	8004df2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	dbe3      	blt.n	8004b2e <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b6e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f003 0310 	and.w	r3, r3, #16
 8004b7c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004b80:	fa01 f303 	lsl.w	r3, r1, r3
 8004b84:	43db      	mvns	r3, r3
 8004b86:	ea02 0103 	and.w	r1, r2, r3
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f003 0310 	and.w	r3, r3, #16
 8004b94:	409a      	lsls	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f003 0310 	and.w	r3, r3, #16
 8004baa:	21ff      	movs	r1, #255	; 0xff
 8004bac:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	ea02 0103 	and.w	r1, r2, r3
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	409a      	lsls	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d11d      	bne.n	8004c0e <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	221f      	movs	r2, #31
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	43db      	mvns	r3, r3
 8004be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bea:	4013      	ands	r3, r2
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c02:	4313      	orrs	r3, r2
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c14:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2207      	movs	r2, #7
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	43db      	mvns	r3, r3
 8004c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c26:	4013      	ands	r3, r2
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d102      	bne.n	8004c38 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	623b      	str	r3, [r7, #32]
 8004c36:	e00f      	b.n	8004c58 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d102      	bne.n	8004c46 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004c40:	2301      	movs	r3, #1
 8004c42:	623b      	str	r3, [r7, #32]
 8004c44:	e008      	b.n	8004c58 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d102      	bne.n	8004c54 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	623b      	str	r3, [r7, #32]
 8004c52:	e001      	b.n	8004c58 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	6a3a      	ldr	r2, [r7, #32]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f003 0310 	and.w	r3, r3, #16
 8004c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	43db      	mvns	r3, r3
 8004c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	791b      	ldrb	r3, [r3, #4]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d102      	bne.n	8004c8c <HAL_DAC_ConfigChannel+0x1f8>
 8004c86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c8a:	e000      	b.n	8004c8e <HAL_DAC_ConfigChannel+0x1fa>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f003 0310 	and.w	r3, r3, #16
 8004c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	795b      	ldrb	r3, [r3, #5]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d102      	bne.n	8004cb8 <HAL_DAC_ConfigChannel+0x224>
 8004cb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cb6:	e000      	b.n	8004cba <HAL_DAC_ConfigChannel+0x226>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d114      	bne.n	8004cfa <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004cd0:	f003 fddc 	bl	800888c <HAL_RCC_GetHCLKFreq>
 8004cd4:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	4a48      	ldr	r2, [pc, #288]	; (8004dfc <HAL_DAC_ConfigChannel+0x368>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d904      	bls.n	8004ce8 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce6:	e00f      	b.n	8004d08 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	4a45      	ldr	r2, [pc, #276]	; (8004e00 <HAL_DAC_ConfigChannel+0x36c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d90a      	bls.n	8004d06 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf8:	e006      	b.n	8004d08 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d00:	4313      	orrs	r3, r2
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
 8004d04:	e000      	b.n	8004d08 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004d06:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d16:	4313      	orrs	r3, r2
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6819      	ldr	r1, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f003 0310 	and.w	r3, r3, #16
 8004d2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d32:	fa02 f303 	lsl.w	r3, r2, r3
 8004d36:	43da      	mvns	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	400a      	ands	r2, r1
 8004d3e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f003 0310 	and.w	r3, r3, #16
 8004d4e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004d52:	fa02 f303 	lsl.w	r3, r2, r3
 8004d56:	43db      	mvns	r3, r3
 8004d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d72:	4313      	orrs	r3, r2
 8004d74:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d7c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6819      	ldr	r1, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f003 0310 	and.w	r3, r3, #16
 8004d8a:	22c0      	movs	r2, #192	; 0xc0
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	43da      	mvns	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	400a      	ands	r2, r1
 8004d98:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	089b      	lsrs	r3, r3, #2
 8004da0:	f003 030f 	and.w	r3, r3, #15
 8004da4:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	089b      	lsrs	r3, r3, #2
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f003 0310 	and.w	r3, r3, #16
 8004dc4:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dcc:	43db      	mvns	r3, r3
 8004dce:	ea02 0103 	and.w	r1, r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f003 0310 	and.w	r3, r3, #16
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	409a      	lsls	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2201      	movs	r2, #1
 8004de8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004df0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3728      	adds	r7, #40	; 0x28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	09896800 	.word	0x09896800
 8004e00:	04c4b400 	.word	0x04c4b400

08004e04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e08d      	b.n	8004f32 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	4b47      	ldr	r3, [pc, #284]	; (8004f3c <HAL_DMA_Init+0x138>)
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d80f      	bhi.n	8004e42 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	461a      	mov	r2, r3
 8004e28:	4b45      	ldr	r3, [pc, #276]	; (8004f40 <HAL_DMA_Init+0x13c>)
 8004e2a:	4413      	add	r3, r2
 8004e2c:	4a45      	ldr	r2, [pc, #276]	; (8004f44 <HAL_DMA_Init+0x140>)
 8004e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e32:	091b      	lsrs	r3, r3, #4
 8004e34:	009a      	lsls	r2, r3, #2
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a42      	ldr	r2, [pc, #264]	; (8004f48 <HAL_DMA_Init+0x144>)
 8004e3e:	641a      	str	r2, [r3, #64]	; 0x40
 8004e40:	e00e      	b.n	8004e60 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	461a      	mov	r2, r3
 8004e48:	4b40      	ldr	r3, [pc, #256]	; (8004f4c <HAL_DMA_Init+0x148>)
 8004e4a:	4413      	add	r3, r2
 8004e4c:	4a3d      	ldr	r2, [pc, #244]	; (8004f44 <HAL_DMA_Init+0x140>)
 8004e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e52:	091b      	lsrs	r3, r3, #4
 8004e54:	009a      	lsls	r2, r3, #2
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a3c      	ldr	r2, [pc, #240]	; (8004f50 <HAL_DMA_Init+0x14c>)
 8004e5e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 fa10 	bl	80052d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ec0:	d102      	bne.n	8004ec8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004edc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d010      	beq.n	8004f08 <HAL_DMA_Init+0x104>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d80c      	bhi.n	8004f08 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fa30 	bl	8005354 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004f04:	605a      	str	r2, [r3, #4]
 8004f06:	e008      	b.n	8004f1a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40020407 	.word	0x40020407
 8004f40:	bffdfff8 	.word	0xbffdfff8
 8004f44:	cccccccd 	.word	0xcccccccd
 8004f48:	40020000 	.word	0x40020000
 8004f4c:	bffdfbf8 	.word	0xbffdfbf8
 8004f50:	40020400 	.word	0x40020400

08004f54 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f62:	2300      	movs	r3, #0
 8004f64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d101      	bne.n	8004f74 <HAL_DMA_Start_IT+0x20>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e066      	b.n	8005042 <HAL_DMA_Start_IT+0xee>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d155      	bne.n	8005034 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0201 	bic.w	r2, r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	68b9      	ldr	r1, [r7, #8]
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 f954 	bl	800525a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d008      	beq.n	8004fcc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 020e 	orr.w	r2, r2, #14
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	e00f      	b.n	8004fec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0204 	bic.w	r2, r2, #4
 8004fda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 020a 	orr.w	r2, r2, #10
 8004fea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d007      	beq.n	800500a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005008:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500e:	2b00      	cmp	r3, #0
 8005010:	d007      	beq.n	8005022 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005020:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0201 	orr.w	r2, r2, #1
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	e005      	b.n	8005040 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800503c:	2302      	movs	r3, #2
 800503e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005040:	7dfb      	ldrb	r3, [r7, #23]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800504a:	b480      	push	{r7}
 800504c:	b085      	sub	sp, #20
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d005      	beq.n	800506e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2204      	movs	r2, #4
 8005066:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	73fb      	strb	r3, [r7, #15]
 800506c:	e037      	b.n	80050de <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 020e 	bic.w	r2, r2, #14
 800507c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800508c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0201 	bic.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a2:	f003 021f 	and.w	r2, r3, #31
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	2101      	movs	r1, #1
 80050ac:	fa01 f202 	lsl.w	r2, r1, r2
 80050b0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80050ba:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00c      	beq.n	80050de <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050d2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80050dc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005118:	f003 031f 	and.w	r3, r3, #31
 800511c:	2204      	movs	r2, #4
 800511e:	409a      	lsls	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4013      	ands	r3, r2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d026      	beq.n	8005176 <HAL_DMA_IRQHandler+0x7a>
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b00      	cmp	r3, #0
 8005130:	d021      	beq.n	8005176 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0320 	and.w	r3, r3, #32
 800513c:	2b00      	cmp	r3, #0
 800513e:	d107      	bne.n	8005150 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0204 	bic.w	r2, r2, #4
 800514e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005154:	f003 021f 	and.w	r2, r3, #31
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	2104      	movs	r1, #4
 800515e:	fa01 f202 	lsl.w	r2, r1, r2
 8005162:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005168:	2b00      	cmp	r3, #0
 800516a:	d071      	beq.n	8005250 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005174:	e06c      	b.n	8005250 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517a:	f003 031f 	and.w	r3, r3, #31
 800517e:	2202      	movs	r2, #2
 8005180:	409a      	lsls	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4013      	ands	r3, r2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d02e      	beq.n	80051e8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d029      	beq.n	80051e8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0320 	and.w	r3, r3, #32
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10b      	bne.n	80051ba <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 020a 	bic.w	r2, r2, #10
 80051b0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051be:	f003 021f 	and.w	r2, r3, #31
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	2102      	movs	r1, #2
 80051c8:	fa01 f202 	lsl.w	r2, r1, r2
 80051cc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d038      	beq.n	8005250 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80051e6:	e033      	b.n	8005250 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ec:	f003 031f 	and.w	r3, r3, #31
 80051f0:	2208      	movs	r2, #8
 80051f2:	409a      	lsls	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4013      	ands	r3, r2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d02a      	beq.n	8005252 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f003 0308 	and.w	r3, r3, #8
 8005202:	2b00      	cmp	r3, #0
 8005204:	d025      	beq.n	8005252 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 020e 	bic.w	r2, r2, #14
 8005214:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521a:	f003 021f 	and.w	r2, r3, #31
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	2101      	movs	r1, #1
 8005224:	fa01 f202 	lsl.w	r2, r1, r2
 8005228:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005244:	2b00      	cmp	r3, #0
 8005246:	d004      	beq.n	8005252 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005250:	bf00      	nop
 8005252:	bf00      	nop
}
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800525a:	b480      	push	{r7}
 800525c:	b085      	sub	sp, #20
 800525e:	af00      	add	r7, sp, #0
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	607a      	str	r2, [r7, #4]
 8005266:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005270:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005276:	2b00      	cmp	r3, #0
 8005278:	d004      	beq.n	8005284 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005282:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005288:	f003 021f 	and.w	r2, r3, #31
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	2101      	movs	r1, #1
 8005292:	fa01 f202 	lsl.w	r2, r1, r2
 8005296:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	2b10      	cmp	r3, #16
 80052a6:	d108      	bne.n	80052ba <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80052b8:	e007      	b.n	80052ca <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	60da      	str	r2, [r3, #12]
}
 80052ca:	bf00      	nop
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
	...

080052d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	461a      	mov	r2, r3
 80052e6:	4b16      	ldr	r3, [pc, #88]	; (8005340 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d802      	bhi.n	80052f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80052ec:	4b15      	ldr	r3, [pc, #84]	; (8005344 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	e001      	b.n	80052f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80052f2:	4b15      	ldr	r3, [pc, #84]	; (8005348 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80052f4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	3b08      	subs	r3, #8
 8005302:	4a12      	ldr	r2, [pc, #72]	; (800534c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005304:	fba2 2303 	umull	r2, r3, r2, r3
 8005308:	091b      	lsrs	r3, r3, #4
 800530a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005310:	089b      	lsrs	r3, r3, #2
 8005312:	009a      	lsls	r2, r3, #2
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	4413      	add	r3, r2
 8005318:	461a      	mov	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a0b      	ldr	r2, [pc, #44]	; (8005350 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005322:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f003 031f 	and.w	r3, r3, #31
 800532a:	2201      	movs	r2, #1
 800532c:	409a      	lsls	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40020407 	.word	0x40020407
 8005344:	40020800 	.word	0x40020800
 8005348:	40020820 	.word	0x40020820
 800534c:	cccccccd 	.word	0xcccccccd
 8005350:	40020880 	.word	0x40020880

08005354 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4b0b      	ldr	r3, [pc, #44]	; (8005394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005368:	4413      	add	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	461a      	mov	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a08      	ldr	r2, [pc, #32]	; (8005398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005376:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3b01      	subs	r3, #1
 800537c:	f003 031f 	and.w	r3, r3, #31
 8005380:	2201      	movs	r2, #1
 8005382:	409a      	lsls	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005388:	bf00      	nop
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	1000823f 	.word	0x1000823f
 8005398:	40020940 	.word	0x40020940

0800539c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80053aa:	e15a      	b.n	8005662 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	2101      	movs	r1, #1
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	fa01 f303 	lsl.w	r3, r1, r3
 80053b8:	4013      	ands	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 814c 	beq.w	800565c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f003 0303 	and.w	r3, r3, #3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d005      	beq.n	80053dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d130      	bne.n	800543e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	2203      	movs	r2, #3
 80053e8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ec:	43db      	mvns	r3, r3
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	4013      	ands	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	68da      	ldr	r2, [r3, #12]
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005412:	2201      	movs	r2, #1
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	43db      	mvns	r3, r3
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	4013      	ands	r3, r2
 8005420:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	091b      	lsrs	r3, r3, #4
 8005428:	f003 0201 	and.w	r2, r3, #1
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	fa02 f303 	lsl.w	r3, r2, r3
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	2b03      	cmp	r3, #3
 8005448:	d017      	beq.n	800547a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	2203      	movs	r2, #3
 8005456:	fa02 f303 	lsl.w	r3, r2, r3
 800545a:	43db      	mvns	r3, r3
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	4013      	ands	r3, r2
 8005460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	689a      	ldr	r2, [r3, #8]
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	4313      	orrs	r3, r2
 8005472:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d123      	bne.n	80054ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	08da      	lsrs	r2, r3, #3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3208      	adds	r2, #8
 800548e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005492:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	220f      	movs	r2, #15
 800549e:	fa02 f303 	lsl.w	r3, r2, r3
 80054a2:	43db      	mvns	r3, r3
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	4013      	ands	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	691a      	ldr	r2, [r3, #16]
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f003 0307 	and.w	r3, r3, #7
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4313      	orrs	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	08da      	lsrs	r2, r3, #3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3208      	adds	r2, #8
 80054c8:	6939      	ldr	r1, [r7, #16]
 80054ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	2203      	movs	r2, #3
 80054da:	fa02 f303 	lsl.w	r3, r2, r3
 80054de:	43db      	mvns	r3, r3
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	4013      	ands	r3, r2
 80054e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f003 0203 	and.w	r2, r3, #3
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	fa02 f303 	lsl.w	r3, r2, r3
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 80a6 	beq.w	800565c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005510:	4b5b      	ldr	r3, [pc, #364]	; (8005680 <HAL_GPIO_Init+0x2e4>)
 8005512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005514:	4a5a      	ldr	r2, [pc, #360]	; (8005680 <HAL_GPIO_Init+0x2e4>)
 8005516:	f043 0301 	orr.w	r3, r3, #1
 800551a:	6613      	str	r3, [r2, #96]	; 0x60
 800551c:	4b58      	ldr	r3, [pc, #352]	; (8005680 <HAL_GPIO_Init+0x2e4>)
 800551e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	60bb      	str	r3, [r7, #8]
 8005526:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005528:	4a56      	ldr	r2, [pc, #344]	; (8005684 <HAL_GPIO_Init+0x2e8>)
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	089b      	lsrs	r3, r3, #2
 800552e:	3302      	adds	r3, #2
 8005530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005534:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f003 0303 	and.w	r3, r3, #3
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	220f      	movs	r2, #15
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	43db      	mvns	r3, r3
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4013      	ands	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005552:	d01f      	beq.n	8005594 <HAL_GPIO_Init+0x1f8>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a4c      	ldr	r2, [pc, #304]	; (8005688 <HAL_GPIO_Init+0x2ec>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d019      	beq.n	8005590 <HAL_GPIO_Init+0x1f4>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a4b      	ldr	r2, [pc, #300]	; (800568c <HAL_GPIO_Init+0x2f0>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d013      	beq.n	800558c <HAL_GPIO_Init+0x1f0>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a4a      	ldr	r2, [pc, #296]	; (8005690 <HAL_GPIO_Init+0x2f4>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d00d      	beq.n	8005588 <HAL_GPIO_Init+0x1ec>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a49      	ldr	r2, [pc, #292]	; (8005694 <HAL_GPIO_Init+0x2f8>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d007      	beq.n	8005584 <HAL_GPIO_Init+0x1e8>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a48      	ldr	r2, [pc, #288]	; (8005698 <HAL_GPIO_Init+0x2fc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d101      	bne.n	8005580 <HAL_GPIO_Init+0x1e4>
 800557c:	2305      	movs	r3, #5
 800557e:	e00a      	b.n	8005596 <HAL_GPIO_Init+0x1fa>
 8005580:	2306      	movs	r3, #6
 8005582:	e008      	b.n	8005596 <HAL_GPIO_Init+0x1fa>
 8005584:	2304      	movs	r3, #4
 8005586:	e006      	b.n	8005596 <HAL_GPIO_Init+0x1fa>
 8005588:	2303      	movs	r3, #3
 800558a:	e004      	b.n	8005596 <HAL_GPIO_Init+0x1fa>
 800558c:	2302      	movs	r3, #2
 800558e:	e002      	b.n	8005596 <HAL_GPIO_Init+0x1fa>
 8005590:	2301      	movs	r3, #1
 8005592:	e000      	b.n	8005596 <HAL_GPIO_Init+0x1fa>
 8005594:	2300      	movs	r3, #0
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	f002 0203 	and.w	r2, r2, #3
 800559c:	0092      	lsls	r2, r2, #2
 800559e:	4093      	lsls	r3, r2
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055a6:	4937      	ldr	r1, [pc, #220]	; (8005684 <HAL_GPIO_Init+0x2e8>)
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	089b      	lsrs	r3, r3, #2
 80055ac:	3302      	adds	r3, #2
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055b4:	4b39      	ldr	r3, [pc, #228]	; (800569c <HAL_GPIO_Init+0x300>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	43db      	mvns	r3, r3
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	4013      	ands	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80055d8:	4a30      	ldr	r2, [pc, #192]	; (800569c <HAL_GPIO_Init+0x300>)
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80055de:	4b2f      	ldr	r3, [pc, #188]	; (800569c <HAL_GPIO_Init+0x300>)
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	43db      	mvns	r3, r3
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4013      	ands	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4313      	orrs	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005602:	4a26      	ldr	r2, [pc, #152]	; (800569c <HAL_GPIO_Init+0x300>)
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005608:	4b24      	ldr	r3, [pc, #144]	; (800569c <HAL_GPIO_Init+0x300>)
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	43db      	mvns	r3, r3
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4013      	ands	r3, r2
 8005616:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800562c:	4a1b      	ldr	r2, [pc, #108]	; (800569c <HAL_GPIO_Init+0x300>)
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005632:	4b1a      	ldr	r3, [pc, #104]	; (800569c <HAL_GPIO_Init+0x300>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	43db      	mvns	r3, r3
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4013      	ands	r3, r2
 8005640:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005656:	4a11      	ldr	r2, [pc, #68]	; (800569c <HAL_GPIO_Init+0x300>)
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	3301      	adds	r3, #1
 8005660:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	fa22 f303 	lsr.w	r3, r2, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	f47f ae9d 	bne.w	80053ac <HAL_GPIO_Init+0x10>
  }
}
 8005672:	bf00      	nop
 8005674:	bf00      	nop
 8005676:	371c      	adds	r7, #28
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	40021000 	.word	0x40021000
 8005684:	40010000 	.word	0x40010000
 8005688:	48000400 	.word	0x48000400
 800568c:	48000800 	.word	0x48000800
 8005690:	48000c00 	.word	0x48000c00
 8005694:	48001000 	.word	0x48001000
 8005698:	48001400 	.word	0x48001400
 800569c:	40010400 	.word	0x40010400

080056a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	460b      	mov	r3, r1
 80056aa:	807b      	strh	r3, [r7, #2]
 80056ac:	4613      	mov	r3, r2
 80056ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056b0:	787b      	ldrb	r3, [r7, #1]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80056b6:	887a      	ldrh	r2, [r7, #2]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80056bc:	e002      	b.n	80056c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80056be:	887a      	ldrh	r2, [r7, #2]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	4603      	mov	r3, r0
 80056d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80056da:	4b08      	ldr	r3, [pc, #32]	; (80056fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056dc:	695a      	ldr	r2, [r3, #20]
 80056de:	88fb      	ldrh	r3, [r7, #6]
 80056e0:	4013      	ands	r3, r2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d006      	beq.n	80056f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80056e6:	4a05      	ldr	r2, [pc, #20]	; (80056fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056e8:	88fb      	ldrh	r3, [r7, #6]
 80056ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80056ec:	88fb      	ldrh	r3, [r7, #6]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 f806 	bl	8005700 <HAL_GPIO_EXTI_Callback>
  }
}
 80056f4:	bf00      	nop
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	40010400 	.word	0x40010400

08005700 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	4603      	mov	r3, r0
 8005708:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b082      	sub	sp, #8
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e08d      	b.n	8005844 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d106      	bne.n	8005742 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7fc ff7f 	bl	8002640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2224      	movs	r2, #36	; 0x24
 8005746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0201 	bic.w	r2, r2, #1
 8005758:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005766:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689a      	ldr	r2, [r3, #8]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005776:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d107      	bne.n	8005790 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800578c:	609a      	str	r2, [r3, #8]
 800578e:	e006      	b.n	800579e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800579c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d108      	bne.n	80057b8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057b4:	605a      	str	r2, [r3, #4]
 80057b6:	e007      	b.n	80057c8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057c6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6812      	ldr	r2, [r2, #0]
 80057d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80057d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057da:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057ea:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	69d9      	ldr	r1, [r3, #28]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1a      	ldr	r2, [r3, #32]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f042 0201 	orr.w	r2, r2, #1
 8005824:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b088      	sub	sp, #32
 8005850:	af02      	add	r7, sp, #8
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	4608      	mov	r0, r1
 8005856:	4611      	mov	r1, r2
 8005858:	461a      	mov	r2, r3
 800585a:	4603      	mov	r3, r0
 800585c:	817b      	strh	r3, [r7, #10]
 800585e:	460b      	mov	r3, r1
 8005860:	813b      	strh	r3, [r7, #8]
 8005862:	4613      	mov	r3, r2
 8005864:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b20      	cmp	r3, #32
 8005870:	f040 80f9 	bne.w	8005a66 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <HAL_I2C_Mem_Write+0x34>
 800587a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800587c:	2b00      	cmp	r3, #0
 800587e:	d105      	bne.n	800588c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005886:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e0ed      	b.n	8005a68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005892:	2b01      	cmp	r3, #1
 8005894:	d101      	bne.n	800589a <HAL_I2C_Mem_Write+0x4e>
 8005896:	2302      	movs	r3, #2
 8005898:	e0e6      	b.n	8005a68 <HAL_I2C_Mem_Write+0x21c>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058a2:	f7fd f929 	bl	8002af8 <HAL_GetTick>
 80058a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	2319      	movs	r3, #25
 80058ae:	2201      	movs	r2, #1
 80058b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 fac3 	bl	8005e40 <I2C_WaitOnFlagUntilTimeout>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e0d1      	b.n	8005a68 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2221      	movs	r2, #33	; 0x21
 80058c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2240      	movs	r2, #64	; 0x40
 80058d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a3a      	ldr	r2, [r7, #32]
 80058de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80058e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058ec:	88f8      	ldrh	r0, [r7, #6]
 80058ee:	893a      	ldrh	r2, [r7, #8]
 80058f0:	8979      	ldrh	r1, [r7, #10]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	9301      	str	r3, [sp, #4]
 80058f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	4603      	mov	r3, r0
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f9d3 	bl	8005ca8 <I2C_RequestMemoryWrite>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d005      	beq.n	8005914 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e0a9      	b.n	8005a68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005918:	b29b      	uxth	r3, r3
 800591a:	2bff      	cmp	r3, #255	; 0xff
 800591c:	d90e      	bls.n	800593c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	22ff      	movs	r2, #255	; 0xff
 8005922:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005928:	b2da      	uxtb	r2, r3
 800592a:	8979      	ldrh	r1, [r7, #10]
 800592c:	2300      	movs	r3, #0
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 fc47 	bl	80061c8 <I2C_TransferConfig>
 800593a:	e00f      	b.n	800595c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005940:	b29a      	uxth	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800594a:	b2da      	uxtb	r2, r3
 800594c:	8979      	ldrh	r1, [r7, #10]
 800594e:	2300      	movs	r3, #0
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 fc36 	bl	80061c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 fac6 	bl	8005ef2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e07b      	b.n	8005a68 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	781a      	ldrb	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	1c5a      	adds	r2, r3, #1
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800598a:	b29b      	uxth	r3, r3
 800598c:	3b01      	subs	r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005998:	3b01      	subs	r3, #1
 800599a:	b29a      	uxth	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d034      	beq.n	8005a14 <HAL_I2C_Mem_Write+0x1c8>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d130      	bne.n	8005a14 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	2200      	movs	r2, #0
 80059ba:	2180      	movs	r1, #128	; 0x80
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 fa3f 	bl	8005e40 <I2C_WaitOnFlagUntilTimeout>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e04d      	b.n	8005a68 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2bff      	cmp	r3, #255	; 0xff
 80059d4:	d90e      	bls.n	80059f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	22ff      	movs	r2, #255	; 0xff
 80059da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	8979      	ldrh	r1, [r7, #10]
 80059e4:	2300      	movs	r3, #0
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 fbeb 	bl	80061c8 <I2C_TransferConfig>
 80059f2:	e00f      	b.n	8005a14 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	8979      	ldrh	r1, [r7, #10]
 8005a06:	2300      	movs	r3, #0
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 fbda 	bl	80061c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d19e      	bne.n	800595c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 faac 	bl	8005f80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e01a      	b.n	8005a68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2220      	movs	r2, #32
 8005a38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6859      	ldr	r1, [r3, #4]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	4b0a      	ldr	r3, [pc, #40]	; (8005a70 <HAL_I2C_Mem_Write+0x224>)
 8005a46:	400b      	ands	r3, r1
 8005a48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	e000      	b.n	8005a68 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005a66:	2302      	movs	r3, #2
  }
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	fe00e800 	.word	0xfe00e800

08005a74 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b088      	sub	sp, #32
 8005a78:	af02      	add	r7, sp, #8
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	4608      	mov	r0, r1
 8005a7e:	4611      	mov	r1, r2
 8005a80:	461a      	mov	r2, r3
 8005a82:	4603      	mov	r3, r0
 8005a84:	817b      	strh	r3, [r7, #10]
 8005a86:	460b      	mov	r3, r1
 8005a88:	813b      	strh	r3, [r7, #8]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b20      	cmp	r3, #32
 8005a98:	f040 80fd 	bne.w	8005c96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <HAL_I2C_Mem_Read+0x34>
 8005aa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d105      	bne.n	8005ab4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e0f1      	b.n	8005c98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d101      	bne.n	8005ac2 <HAL_I2C_Mem_Read+0x4e>
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e0ea      	b.n	8005c98 <HAL_I2C_Mem_Read+0x224>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005aca:	f7fd f815 	bl	8002af8 <HAL_GetTick>
 8005ace:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	2319      	movs	r3, #25
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 f9af 	bl	8005e40 <I2C_WaitOnFlagUntilTimeout>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e0d5      	b.n	8005c98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2222      	movs	r2, #34	; 0x22
 8005af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2240      	movs	r2, #64	; 0x40
 8005af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6a3a      	ldr	r2, [r7, #32]
 8005b06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b14:	88f8      	ldrh	r0, [r7, #6]
 8005b16:	893a      	ldrh	r2, [r7, #8]
 8005b18:	8979      	ldrh	r1, [r7, #10]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	9301      	str	r3, [sp, #4]
 8005b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	4603      	mov	r3, r0
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 f913 	bl	8005d50 <I2C_RequestMemoryRead>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d005      	beq.n	8005b3c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e0ad      	b.n	8005c98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	2bff      	cmp	r3, #255	; 0xff
 8005b44:	d90e      	bls.n	8005b64 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	22ff      	movs	r2, #255	; 0xff
 8005b4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	8979      	ldrh	r1, [r7, #10]
 8005b54:	4b52      	ldr	r3, [pc, #328]	; (8005ca0 <HAL_I2C_Mem_Read+0x22c>)
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 fb33 	bl	80061c8 <I2C_TransferConfig>
 8005b62:	e00f      	b.n	8005b84 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	8979      	ldrh	r1, [r7, #10]
 8005b76:	4b4a      	ldr	r3, [pc, #296]	; (8005ca0 <HAL_I2C_Mem_Read+0x22c>)
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 fb22 	bl	80061c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	2104      	movs	r1, #4
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 f956 	bl	8005e40 <I2C_WaitOnFlagUntilTimeout>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e07c      	b.n	8005c98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d034      	beq.n	8005c44 <HAL_I2C_Mem_Read+0x1d0>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d130      	bne.n	8005c44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be8:	2200      	movs	r2, #0
 8005bea:	2180      	movs	r1, #128	; 0x80
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 f927 	bl	8005e40 <I2C_WaitOnFlagUntilTimeout>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e04d      	b.n	8005c98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2bff      	cmp	r3, #255	; 0xff
 8005c04:	d90e      	bls.n	8005c24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	22ff      	movs	r2, #255	; 0xff
 8005c0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	8979      	ldrh	r1, [r7, #10]
 8005c14:	2300      	movs	r3, #0
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 fad3 	bl	80061c8 <I2C_TransferConfig>
 8005c22:	e00f      	b.n	8005c44 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c32:	b2da      	uxtb	r2, r3
 8005c34:	8979      	ldrh	r1, [r7, #10]
 8005c36:	2300      	movs	r3, #0
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 fac2 	bl	80061c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d19a      	bne.n	8005b84 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 f994 	bl	8005f80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e01a      	b.n	8005c98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2220      	movs	r2, #32
 8005c68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6859      	ldr	r1, [r3, #4]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	4b0b      	ldr	r3, [pc, #44]	; (8005ca4 <HAL_I2C_Mem_Read+0x230>)
 8005c76:	400b      	ands	r3, r1
 8005c78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	e000      	b.n	8005c98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005c96:	2302      	movs	r3, #2
  }
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	80002400 	.word	0x80002400
 8005ca4:	fe00e800 	.word	0xfe00e800

08005ca8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	4608      	mov	r0, r1
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	817b      	strh	r3, [r7, #10]
 8005cba:	460b      	mov	r3, r1
 8005cbc:	813b      	strh	r3, [r7, #8]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005cc2:	88fb      	ldrh	r3, [r7, #6]
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	8979      	ldrh	r1, [r7, #10]
 8005cc8:	4b20      	ldr	r3, [pc, #128]	; (8005d4c <I2C_RequestMemoryWrite+0xa4>)
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 fa79 	bl	80061c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cd6:	69fa      	ldr	r2, [r7, #28]
 8005cd8:	69b9      	ldr	r1, [r7, #24]
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 f909 	bl	8005ef2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e02c      	b.n	8005d44 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cea:	88fb      	ldrh	r3, [r7, #6]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d105      	bne.n	8005cfc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cf0:	893b      	ldrh	r3, [r7, #8]
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	629a      	str	r2, [r3, #40]	; 0x28
 8005cfa:	e015      	b.n	8005d28 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005cfc:	893b      	ldrh	r3, [r7, #8]
 8005cfe:	0a1b      	lsrs	r3, r3, #8
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d0a:	69fa      	ldr	r2, [r7, #28]
 8005d0c:	69b9      	ldr	r1, [r7, #24]
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 f8ef 	bl	8005ef2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e012      	b.n	8005d44 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d1e:	893b      	ldrh	r3, [r7, #8]
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	2180      	movs	r1, #128	; 0x80
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 f884 	bl	8005e40 <I2C_WaitOnFlagUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e000      	b.n	8005d44 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	80002000 	.word	0x80002000

08005d50 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af02      	add	r7, sp, #8
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	4608      	mov	r0, r1
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	4603      	mov	r3, r0
 8005d60:	817b      	strh	r3, [r7, #10]
 8005d62:	460b      	mov	r3, r1
 8005d64:	813b      	strh	r3, [r7, #8]
 8005d66:	4613      	mov	r3, r2
 8005d68:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005d6a:	88fb      	ldrh	r3, [r7, #6]
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	8979      	ldrh	r1, [r7, #10]
 8005d70:	4b20      	ldr	r3, [pc, #128]	; (8005df4 <I2C_RequestMemoryRead+0xa4>)
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	2300      	movs	r3, #0
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 fa26 	bl	80061c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d7c:	69fa      	ldr	r2, [r7, #28]
 8005d7e:	69b9      	ldr	r1, [r7, #24]
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 f8b6 	bl	8005ef2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e02c      	b.n	8005dea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d90:	88fb      	ldrh	r3, [r7, #6]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d105      	bne.n	8005da2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d96:	893b      	ldrh	r3, [r7, #8]
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	629a      	str	r2, [r3, #40]	; 0x28
 8005da0:	e015      	b.n	8005dce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005da2:	893b      	ldrh	r3, [r7, #8]
 8005da4:	0a1b      	lsrs	r3, r3, #8
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005db0:	69fa      	ldr	r2, [r7, #28]
 8005db2:	69b9      	ldr	r1, [r7, #24]
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 f89c 	bl	8005ef2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e012      	b.n	8005dea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005dc4:	893b      	ldrh	r3, [r7, #8]
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2140      	movs	r1, #64	; 0x40
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 f831 	bl	8005e40 <I2C_WaitOnFlagUntilTimeout>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e000      	b.n	8005dea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	80002000 	.word	0x80002000

08005df8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d103      	bne.n	8005e16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2200      	movs	r2, #0
 8005e14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d007      	beq.n	8005e34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0201 	orr.w	r2, r2, #1
 8005e32:	619a      	str	r2, [r3, #24]
  }
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	603b      	str	r3, [r7, #0]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e50:	e03b      	b.n	8005eca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	6839      	ldr	r1, [r7, #0]
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 f8d6 	bl	8006008 <I2C_IsErrorOccurred>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e041      	b.n	8005eea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6c:	d02d      	beq.n	8005eca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e6e:	f7fc fe43 	bl	8002af8 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d302      	bcc.n	8005e84 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d122      	bne.n	8005eca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699a      	ldr	r2, [r3, #24]
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	bf0c      	ite	eq
 8005e94:	2301      	moveq	r3, #1
 8005e96:	2300      	movne	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	79fb      	ldrb	r3, [r7, #7]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d113      	bne.n	8005eca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea6:	f043 0220 	orr.w	r2, r3, #32
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e00f      	b.n	8005eea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	699a      	ldr	r2, [r3, #24]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	bf0c      	ite	eq
 8005eda:	2301      	moveq	r3, #1
 8005edc:	2300      	movne	r3, #0
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	79fb      	ldrb	r3, [r7, #7]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d0b4      	beq.n	8005e52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b084      	sub	sp, #16
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	60f8      	str	r0, [r7, #12]
 8005efa:	60b9      	str	r1, [r7, #8]
 8005efc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005efe:	e033      	b.n	8005f68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	68b9      	ldr	r1, [r7, #8]
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 f87f 	bl	8006008 <I2C_IsErrorOccurred>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e031      	b.n	8005f78 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1a:	d025      	beq.n	8005f68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f1c:	f7fc fdec 	bl	8002af8 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d302      	bcc.n	8005f32 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d11a      	bne.n	8005f68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d013      	beq.n	8005f68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f44:	f043 0220 	orr.w	r2, r3, #32
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e007      	b.n	8005f78 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d1c4      	bne.n	8005f00 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f8c:	e02f      	b.n	8005fee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	68b9      	ldr	r1, [r7, #8]
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f000 f838 	bl	8006008 <I2C_IsErrorOccurred>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e02d      	b.n	8005ffe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fa2:	f7fc fda9 	bl	8002af8 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d302      	bcc.n	8005fb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d11a      	bne.n	8005fee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	f003 0320 	and.w	r3, r3, #32
 8005fc2:	2b20      	cmp	r3, #32
 8005fc4:	d013      	beq.n	8005fee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fca:	f043 0220 	orr.w	r2, r3, #32
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e007      	b.n	8005ffe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	f003 0320 	and.w	r3, r3, #32
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d1c8      	bne.n	8005f8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08a      	sub	sp, #40	; 0x28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006014:	2300      	movs	r3, #0
 8006016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006022:	2300      	movs	r3, #0
 8006024:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	f003 0310 	and.w	r3, r3, #16
 8006030:	2b00      	cmp	r3, #0
 8006032:	d068      	beq.n	8006106 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2210      	movs	r2, #16
 800603a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800603c:	e049      	b.n	80060d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006044:	d045      	beq.n	80060d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006046:	f7fc fd57 	bl	8002af8 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	429a      	cmp	r2, r3
 8006054:	d302      	bcc.n	800605c <I2C_IsErrorOccurred+0x54>
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d13a      	bne.n	80060d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006066:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800606e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800607a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800607e:	d121      	bne.n	80060c4 <I2C_IsErrorOccurred+0xbc>
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006086:	d01d      	beq.n	80060c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006088:	7cfb      	ldrb	r3, [r7, #19]
 800608a:	2b20      	cmp	r3, #32
 800608c:	d01a      	beq.n	80060c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800609c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800609e:	f7fc fd2b 	bl	8002af8 <HAL_GetTick>
 80060a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060a4:	e00e      	b.n	80060c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80060a6:	f7fc fd27 	bl	8002af8 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b19      	cmp	r3, #25
 80060b2:	d907      	bls.n	80060c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	f043 0320 	orr.w	r3, r3, #32
 80060ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80060c2:	e006      	b.n	80060d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	f003 0320 	and.w	r3, r3, #32
 80060ce:	2b20      	cmp	r3, #32
 80060d0:	d1e9      	bne.n	80060a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	f003 0320 	and.w	r3, r3, #32
 80060dc:	2b20      	cmp	r3, #32
 80060de:	d003      	beq.n	80060e8 <I2C_IsErrorOccurred+0xe0>
 80060e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d0aa      	beq.n	800603e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80060e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d103      	bne.n	80060f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2220      	movs	r2, #32
 80060f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	f043 0304 	orr.w	r3, r3, #4
 80060fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00b      	beq.n	8006130 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	f043 0301 	orr.w	r3, r3, #1
 800611e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006128:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00b      	beq.n	8006152 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	f043 0308 	orr.w	r3, r3, #8
 8006140:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800614a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00b      	beq.n	8006174 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	f043 0302 	orr.w	r3, r3, #2
 8006162:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800616c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006178:	2b00      	cmp	r3, #0
 800617a:	d01c      	beq.n	80061b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f7ff fe3b 	bl	8005df8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6859      	ldr	r1, [r3, #4]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	4b0d      	ldr	r3, [pc, #52]	; (80061c4 <I2C_IsErrorOccurred+0x1bc>)
 800618e:	400b      	ands	r3, r1
 8006190:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	431a      	orrs	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80061b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3728      	adds	r7, #40	; 0x28
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	fe00e800 	.word	0xfe00e800

080061c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b087      	sub	sp, #28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	607b      	str	r3, [r7, #4]
 80061d2:	460b      	mov	r3, r1
 80061d4:	817b      	strh	r3, [r7, #10]
 80061d6:	4613      	mov	r3, r2
 80061d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061da:	897b      	ldrh	r3, [r7, #10]
 80061dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80061e0:	7a7b      	ldrb	r3, [r7, #9]
 80061e2:	041b      	lsls	r3, r3, #16
 80061e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	0d5b      	lsrs	r3, r3, #21
 8006202:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006206:	4b08      	ldr	r3, [pc, #32]	; (8006228 <I2C_TransferConfig+0x60>)
 8006208:	430b      	orrs	r3, r1
 800620a:	43db      	mvns	r3, r3
 800620c:	ea02 0103 	and.w	r1, r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	430a      	orrs	r2, r1
 8006218:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800621a:	bf00      	nop
 800621c:	371c      	adds	r7, #28
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	03ff63ff 	.word	0x03ff63ff

0800622c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b20      	cmp	r3, #32
 8006240:	d138      	bne.n	80062b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800624c:	2302      	movs	r3, #2
 800624e:	e032      	b.n	80062b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2224      	movs	r2, #36	; 0x24
 800625c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0201 	bic.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800627e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6819      	ldr	r1, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0201 	orr.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	e000      	b.n	80062b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062b4:	2302      	movs	r3, #2
  }
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b085      	sub	sp, #20
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b20      	cmp	r3, #32
 80062d6:	d139      	bne.n	800634c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d101      	bne.n	80062e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80062e2:	2302      	movs	r3, #2
 80062e4:	e033      	b.n	800634e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2224      	movs	r2, #36	; 0x24
 80062f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0201 	bic.w	r2, r2, #1
 8006304:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006314:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 0201 	orr.w	r2, r2, #1
 8006336:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2220      	movs	r2, #32
 800633c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	e000      	b.n	800634e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800634c:	2302      	movs	r3, #2
  }
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e0c0      	b.n	80064ee <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	d106      	bne.n	8006386 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f007 fb01 	bl	800d988 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2203      	movs	r2, #3
 800638a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4618      	mov	r0, r3
 8006394:	f003 f92d 	bl	80095f2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006398:	2300      	movs	r3, #0
 800639a:	73fb      	strb	r3, [r7, #15]
 800639c:	e03e      	b.n	800641c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800639e:	7bfa      	ldrb	r2, [r7, #15]
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	440b      	add	r3, r1
 80063ac:	3311      	adds	r3, #17
 80063ae:	2201      	movs	r2, #1
 80063b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80063b2:	7bfa      	ldrb	r2, [r7, #15]
 80063b4:	6879      	ldr	r1, [r7, #4]
 80063b6:	4613      	mov	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	440b      	add	r3, r1
 80063c0:	3310      	adds	r3, #16
 80063c2:	7bfa      	ldrb	r2, [r7, #15]
 80063c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80063c6:	7bfa      	ldrb	r2, [r7, #15]
 80063c8:	6879      	ldr	r1, [r7, #4]
 80063ca:	4613      	mov	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	00db      	lsls	r3, r3, #3
 80063d2:	440b      	add	r3, r1
 80063d4:	3313      	adds	r3, #19
 80063d6:	2200      	movs	r2, #0
 80063d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80063da:	7bfa      	ldrb	r2, [r7, #15]
 80063dc:	6879      	ldr	r1, [r7, #4]
 80063de:	4613      	mov	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	00db      	lsls	r3, r3, #3
 80063e6:	440b      	add	r3, r1
 80063e8:	3320      	adds	r3, #32
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80063ee:	7bfa      	ldrb	r2, [r7, #15]
 80063f0:	6879      	ldr	r1, [r7, #4]
 80063f2:	4613      	mov	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	440b      	add	r3, r1
 80063fc:	3324      	adds	r3, #36	; 0x24
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006402:	7bfb      	ldrb	r3, [r7, #15]
 8006404:	6879      	ldr	r1, [r7, #4]
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	4613      	mov	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	440b      	add	r3, r1
 8006412:	2200      	movs	r2, #0
 8006414:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	3301      	adds	r3, #1
 800641a:	73fb      	strb	r3, [r7, #15]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	791b      	ldrb	r3, [r3, #4]
 8006420:	7bfa      	ldrb	r2, [r7, #15]
 8006422:	429a      	cmp	r2, r3
 8006424:	d3bb      	bcc.n	800639e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006426:	2300      	movs	r3, #0
 8006428:	73fb      	strb	r3, [r7, #15]
 800642a:	e044      	b.n	80064b6 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800642c:	7bfa      	ldrb	r2, [r7, #15]
 800642e:	6879      	ldr	r1, [r7, #4]
 8006430:	4613      	mov	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	440b      	add	r3, r1
 800643a:	f203 1351 	addw	r3, r3, #337	; 0x151
 800643e:	2200      	movs	r2, #0
 8006440:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006442:	7bfa      	ldrb	r2, [r7, #15]
 8006444:	6879      	ldr	r1, [r7, #4]
 8006446:	4613      	mov	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	00db      	lsls	r3, r3, #3
 800644e:	440b      	add	r3, r1
 8006450:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006454:	7bfa      	ldrb	r2, [r7, #15]
 8006456:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006458:	7bfa      	ldrb	r2, [r7, #15]
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	4613      	mov	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	440b      	add	r3, r1
 8006466:	f203 1353 	addw	r3, r3, #339	; 0x153
 800646a:	2200      	movs	r2, #0
 800646c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800646e:	7bfa      	ldrb	r2, [r7, #15]
 8006470:	6879      	ldr	r1, [r7, #4]
 8006472:	4613      	mov	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	00db      	lsls	r3, r3, #3
 800647a:	440b      	add	r3, r1
 800647c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8006480:	2200      	movs	r2, #0
 8006482:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006484:	7bfa      	ldrb	r2, [r7, #15]
 8006486:	6879      	ldr	r1, [r7, #4]
 8006488:	4613      	mov	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	440b      	add	r3, r1
 8006492:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006496:	2200      	movs	r2, #0
 8006498:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800649a:	7bfa      	ldrb	r2, [r7, #15]
 800649c:	6879      	ldr	r1, [r7, #4]
 800649e:	4613      	mov	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	00db      	lsls	r3, r3, #3
 80064a6:	440b      	add	r3, r1
 80064a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
 80064b2:	3301      	adds	r3, #1
 80064b4:	73fb      	strb	r3, [r7, #15]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	791b      	ldrb	r3, [r3, #4]
 80064ba:	7bfa      	ldrb	r2, [r7, #15]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d3b5      	bcc.n	800642c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6818      	ldr	r0, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3304      	adds	r3, #4
 80064c8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80064cc:	f003 f8ac 	bl	8009628 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	7a9b      	ldrb	r3, [r3, #10]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d102      	bne.n	80064ec <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f001 fc41 	bl	8007d6e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b082      	sub	sp, #8
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8006504:	2b01      	cmp	r3, #1
 8006506:	d101      	bne.n	800650c <HAL_PCD_Start+0x16>
 8006508:	2302      	movs	r3, #2
 800650a:	e012      	b.n	8006532 <HAL_PCD_Start+0x3c>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4618      	mov	r0, r3
 800651a:	f003 f853 	bl	80095c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4618      	mov	r0, r3
 8006524:	f005 fb13 	bl	800bb4e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b084      	sub	sp, #16
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4618      	mov	r0, r3
 8006548:	f005 fb18 	bl	800bb7c <USB_ReadInterrupts>
 800654c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d003      	beq.n	8006560 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fb04 	bl	8006b66 <PCD_EP_ISR_Handler>

    return;
 800655e:	e110      	b.n	8006782 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006566:	2b00      	cmp	r3, #0
 8006568:	d013      	beq.n	8006592 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006572:	b29a      	uxth	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800657c:	b292      	uxth	r2, r2
 800657e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f007 fa99 	bl	800daba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006588:	2100      	movs	r1, #0
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f8fc 	bl	8006788 <HAL_PCD_SetAddress>

    return;
 8006590:	e0f7      	b.n	8006782 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00c      	beq.n	80065b6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065ae:	b292      	uxth	r2, r2
 80065b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80065b4:	e0e5      	b.n	8006782 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00c      	beq.n	80065da <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065d2:	b292      	uxth	r2, r2
 80065d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80065d8:	e0d3      	b.n	8006782 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d034      	beq.n	800664e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0204 	bic.w	r2, r2, #4
 80065f6:	b292      	uxth	r2, r2
 80065f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006604:	b29a      	uxth	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0208 	bic.w	r2, r2, #8
 800660e:	b292      	uxth	r2, r2
 8006610:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800661a:	2b01      	cmp	r3, #1
 800661c:	d107      	bne.n	800662e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006626:	2100      	movs	r1, #0
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f007 fc39 	bl	800dea0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f007 fa7c 	bl	800db2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800663c:	b29a      	uxth	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006646:	b292      	uxth	r2, r2
 8006648:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800664c:	e099      	b.n	8006782 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006654:	2b00      	cmp	r3, #0
 8006656:	d027      	beq.n	80066a8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006660:	b29a      	uxth	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f042 0208 	orr.w	r2, r2, #8
 800666a:	b292      	uxth	r2, r2
 800666c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006678:	b29a      	uxth	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006682:	b292      	uxth	r2, r2
 8006684:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006690:	b29a      	uxth	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f042 0204 	orr.w	r2, r2, #4
 800669a:	b292      	uxth	r2, r2
 800669c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f007 fa29 	bl	800daf8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80066a6:	e06c      	b.n	8006782 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d040      	beq.n	8006734 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066c4:	b292      	uxth	r2, r2
 80066c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d12b      	bne.n	800672c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80066dc:	b29a      	uxth	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f042 0204 	orr.w	r2, r2, #4
 80066e6:	b292      	uxth	r2, r2
 80066e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f042 0208 	orr.w	r2, r2, #8
 80066fe:	b292      	uxth	r2, r2
 8006700:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006714:	b29b      	uxth	r3, r3
 8006716:	089b      	lsrs	r3, r3, #2
 8006718:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006722:	2101      	movs	r1, #1
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f007 fbbb 	bl	800dea0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800672a:	e02a      	b.n	8006782 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f007 f9e3 	bl	800daf8 <HAL_PCD_SuspendCallback>
    return;
 8006732:	e026      	b.n	8006782 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00f      	beq.n	800675e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006746:	b29a      	uxth	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006750:	b292      	uxth	r2, r2
 8006752:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f007 f9a1 	bl	800da9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800675c:	e011      	b.n	8006782 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00c      	beq.n	8006782 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006770:	b29a      	uxth	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800677a:	b292      	uxth	r2, r2
 800677c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006780:	bf00      	nop
  }
}
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	460b      	mov	r3, r1
 8006792:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800679a:	2b01      	cmp	r3, #1
 800679c:	d101      	bne.n	80067a2 <HAL_PCD_SetAddress+0x1a>
 800679e:	2302      	movs	r3, #2
 80067a0:	e012      	b.n	80067c8 <HAL_PCD_SetAddress+0x40>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	78fa      	ldrb	r2, [r7, #3]
 80067ae:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	78fa      	ldrb	r2, [r7, #3]
 80067b6:	4611      	mov	r1, r2
 80067b8:	4618      	mov	r0, r3
 80067ba:	f005 f9b4 	bl	800bb26 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3708      	adds	r7, #8
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	4608      	mov	r0, r1
 80067da:	4611      	mov	r1, r2
 80067dc:	461a      	mov	r2, r3
 80067de:	4603      	mov	r3, r0
 80067e0:	70fb      	strb	r3, [r7, #3]
 80067e2:	460b      	mov	r3, r1
 80067e4:	803b      	strh	r3, [r7, #0]
 80067e6:	4613      	mov	r3, r2
 80067e8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80067ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	da0e      	bge.n	8006814 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067f6:	78fb      	ldrb	r3, [r7, #3]
 80067f8:	f003 0207 	and.w	r2, r3, #7
 80067fc:	4613      	mov	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	3310      	adds	r3, #16
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	4413      	add	r3, r2
 800680a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2201      	movs	r2, #1
 8006810:	705a      	strb	r2, [r3, #1]
 8006812:	e00e      	b.n	8006832 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	f003 0207 	and.w	r2, r3, #7
 800681a:	4613      	mov	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	00db      	lsls	r3, r3, #3
 8006822:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	4413      	add	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006832:	78fb      	ldrb	r3, [r7, #3]
 8006834:	f003 0307 	and.w	r3, r3, #7
 8006838:	b2da      	uxtb	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800683e:	883a      	ldrh	r2, [r7, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	78ba      	ldrb	r2, [r7, #2]
 8006848:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800684a:	78bb      	ldrb	r3, [r7, #2]
 800684c:	2b02      	cmp	r3, #2
 800684e:	d102      	bne.n	8006856 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800685c:	2b01      	cmp	r3, #1
 800685e:	d101      	bne.n	8006864 <HAL_PCD_EP_Open+0x94>
 8006860:	2302      	movs	r3, #2
 8006862:	e00e      	b.n	8006882 <HAL_PCD_EP_Open+0xb2>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68f9      	ldr	r1, [r7, #12]
 8006872:	4618      	mov	r0, r3
 8006874:	f002 fef6 	bl	8009664 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8006880:	7afb      	ldrb	r3, [r7, #11]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b084      	sub	sp, #16
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	460b      	mov	r3, r1
 8006894:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006896:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800689a:	2b00      	cmp	r3, #0
 800689c:	da0e      	bge.n	80068bc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800689e:	78fb      	ldrb	r3, [r7, #3]
 80068a0:	f003 0207 	and.w	r2, r3, #7
 80068a4:	4613      	mov	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	00db      	lsls	r3, r3, #3
 80068ac:	3310      	adds	r3, #16
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	4413      	add	r3, r2
 80068b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2201      	movs	r2, #1
 80068b8:	705a      	strb	r2, [r3, #1]
 80068ba:	e00e      	b.n	80068da <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068bc:	78fb      	ldrb	r3, [r7, #3]
 80068be:	f003 0207 	and.w	r2, r3, #7
 80068c2:	4613      	mov	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	4413      	add	r3, r2
 80068d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80068da:	78fb      	ldrb	r3, [r7, #3]
 80068dc:	f003 0307 	and.w	r3, r3, #7
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d101      	bne.n	80068f4 <HAL_PCD_EP_Close+0x6a>
 80068f0:	2302      	movs	r3, #2
 80068f2:	e00e      	b.n	8006912 <HAL_PCD_EP_Close+0x88>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68f9      	ldr	r1, [r7, #12]
 8006902:	4618      	mov	r0, r3
 8006904:	f003 fa72 	bl	8009dec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b086      	sub	sp, #24
 800691e:	af00      	add	r7, sp, #0
 8006920:	60f8      	str	r0, [r7, #12]
 8006922:	607a      	str	r2, [r7, #4]
 8006924:	603b      	str	r3, [r7, #0]
 8006926:	460b      	mov	r3, r1
 8006928:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800692a:	7afb      	ldrb	r3, [r7, #11]
 800692c:	f003 0207 	and.w	r2, r3, #7
 8006930:	4613      	mov	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	00db      	lsls	r3, r3, #3
 8006938:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2200      	movs	r2, #0
 8006952:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	2200      	movs	r2, #0
 8006958:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800695a:	7afb      	ldrb	r3, [r7, #11]
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	b2da      	uxtb	r2, r3
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6979      	ldr	r1, [r7, #20]
 800696c:	4618      	mov	r0, r3
 800696e:	f003 fc2a 	bl	800a1c6 <USB_EPStartXfer>

  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3718      	adds	r7, #24
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	460b      	mov	r3, r1
 8006986:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006988:	78fb      	ldrb	r3, [r7, #3]
 800698a:	f003 0207 	and.w	r2, r3, #7
 800698e:	6879      	ldr	r1, [r7, #4]
 8006990:	4613      	mov	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	00db      	lsls	r3, r3, #3
 8006998:	440b      	add	r3, r1
 800699a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800699e:	681b      	ldr	r3, [r3, #0]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	607a      	str	r2, [r7, #4]
 80069b6:	603b      	str	r3, [r7, #0]
 80069b8:	460b      	mov	r3, r1
 80069ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069bc:	7afb      	ldrb	r3, [r7, #11]
 80069be:	f003 0207 	and.w	r2, r3, #7
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	00db      	lsls	r3, r3, #3
 80069ca:	3310      	adds	r3, #16
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	4413      	add	r3, r2
 80069d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2200      	movs	r2, #0
 80069f0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2201      	movs	r2, #1
 80069f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069f8:	7afb      	ldrb	r3, [r7, #11]
 80069fa:	f003 0307 	and.w	r3, r3, #7
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6979      	ldr	r1, [r7, #20]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f003 fbdb 	bl	800a1c6 <USB_EPStartXfer>

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b084      	sub	sp, #16
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
 8006a22:	460b      	mov	r3, r1
 8006a24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006a26:	78fb      	ldrb	r3, [r7, #3]
 8006a28:	f003 0307 	and.w	r3, r3, #7
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	7912      	ldrb	r2, [r2, #4]
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d901      	bls.n	8006a38 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e03e      	b.n	8006ab6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006a38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	da0e      	bge.n	8006a5e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a40:	78fb      	ldrb	r3, [r7, #3]
 8006a42:	f003 0207 	and.w	r2, r3, #7
 8006a46:	4613      	mov	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	00db      	lsls	r3, r3, #3
 8006a4e:	3310      	adds	r3, #16
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	4413      	add	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	705a      	strb	r2, [r3, #1]
 8006a5c:	e00c      	b.n	8006a78 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006a5e:	78fa      	ldrb	r2, [r7, #3]
 8006a60:	4613      	mov	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	00db      	lsls	r3, r3, #3
 8006a68:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	4413      	add	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a7e:	78fb      	ldrb	r3, [r7, #3]
 8006a80:	f003 0307 	and.w	r3, r3, #7
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d101      	bne.n	8006a98 <HAL_PCD_EP_SetStall+0x7e>
 8006a94:	2302      	movs	r3, #2
 8006a96:	e00e      	b.n	8006ab6 <HAL_PCD_EP_SetStall+0x9c>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68f9      	ldr	r1, [r7, #12]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f004 ff3e 	bl	800b928 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006aca:	78fb      	ldrb	r3, [r7, #3]
 8006acc:	f003 030f 	and.w	r3, r3, #15
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	7912      	ldrb	r2, [r2, #4]
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d901      	bls.n	8006adc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e040      	b.n	8006b5e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006adc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	da0e      	bge.n	8006b02 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ae4:	78fb      	ldrb	r3, [r7, #3]
 8006ae6:	f003 0207 	and.w	r2, r3, #7
 8006aea:	4613      	mov	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	3310      	adds	r3, #16
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	4413      	add	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2201      	movs	r2, #1
 8006afe:	705a      	strb	r2, [r3, #1]
 8006b00:	e00e      	b.n	8006b20 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b02:	78fb      	ldrb	r3, [r7, #3]
 8006b04:	f003 0207 	and.w	r2, r3, #7
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	4413      	add	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b26:	78fb      	ldrb	r3, [r7, #3]
 8006b28:	f003 0307 	and.w	r3, r3, #7
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <HAL_PCD_EP_ClrStall+0x82>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e00e      	b.n	8006b5e <HAL_PCD_EP_ClrStall+0xa0>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68f9      	ldr	r1, [r7, #12]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f004 ff3b 	bl	800b9ca <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b096      	sub	sp, #88	; 0x58
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006b6e:	e3ae      	b.n	80072ce <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b78:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006b7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	f003 030f 	and.w	r3, r3, #15
 8006b86:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8006b8a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f040 8170 	bne.w	8006e74 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006b94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006b98:	f003 0310 	and.w	r3, r3, #16
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d14d      	bne.n	8006c3c <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb0:	81fb      	strh	r3, [r7, #14]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	89fb      	ldrh	r3, [r7, #14]
 8006bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	3310      	adds	r3, #16
 8006bc8:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	00db      	lsls	r3, r3, #3
 8006bdc:	4413      	add	r3, r2
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	6812      	ldr	r2, [r2, #0]
 8006be2:	4413      	add	r3, r2
 8006be4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bf0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bf4:	695a      	ldr	r2, [r3, #20]
 8006bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	441a      	add	r2, r3
 8006bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bfe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006c00:	2100      	movs	r1, #0
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f006 ff31 	bl	800da6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	7b1b      	ldrb	r3, [r3, #12]
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 835d 	beq.w	80072ce <PCD_EP_ISR_Handler+0x768>
 8006c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f040 8358 	bne.w	80072ce <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	7b1b      	ldrb	r3, [r3, #12]
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c28:	b2da      	uxtb	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	b292      	uxth	r2, r2
 8006c30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	731a      	strb	r2, [r3, #12]
 8006c3a:	e348      	b.n	80072ce <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c42:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006c4e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d032      	beq.n	8006cc0 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	461a      	mov	r2, r3
 8006c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	4413      	add	r3, r2
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	6812      	ldr	r2, [r2, #0]
 8006c72:	4413      	add	r3, r2
 8006c74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c80:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6818      	ldr	r0, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8006c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c8e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c92:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	f004 ffc3 	bl	800bc20 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	823b      	strh	r3, [r7, #16]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	8a3a      	ldrh	r2, [r7, #16]
 8006cb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006cb4:	b292      	uxth	r2, r2
 8006cb6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f006 fea9 	bl	800da10 <HAL_PCD_SetupStageCallback>
 8006cbe:	e306      	b.n	80072ce <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006cc0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f280 8302 	bge.w	80072ce <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	881b      	ldrh	r3, [r3, #0]
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	83fb      	strh	r3, [r7, #30]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	8bfa      	ldrh	r2, [r7, #30]
 8006ce0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ce4:	b292      	uxth	r2, r2
 8006ce6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	00db      	lsls	r3, r3, #3
 8006cfa:	4413      	add	r3, r2
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	6812      	ldr	r2, [r2, #0]
 8006d00:	4413      	add	r3, r2
 8006d02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d06:	881b      	ldrh	r3, [r3, #0]
 8006d08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d0e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d12:	69db      	ldr	r3, [r3, #28]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d019      	beq.n	8006d4c <PCD_EP_ISR_Handler+0x1e6>
 8006d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d015      	beq.n	8006d4c <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6818      	ldr	r0, [r3, #0]
 8006d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d26:	6959      	ldr	r1, [r3, #20]
 8006d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d2a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d2e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	f004 ff75 	bl	800bc20 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d38:	695a      	ldr	r2, [r3, #20]
 8006d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	441a      	add	r2, r3
 8006d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d42:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006d44:	2100      	movs	r1, #0
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f006 fe74 	bl	800da34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006d56:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f040 82b5 	bne.w	80072ce <PCD_EP_ISR_Handler+0x768>
 8006d64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006d68:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006d6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d70:	f000 82ad 	beq.w	80072ce <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	61bb      	str	r3, [r7, #24]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	461a      	mov	r2, r3
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	4413      	add	r3, r2
 8006d8a:	61bb      	str	r3, [r7, #24]
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	881b      	ldrh	r3, [r3, #0]
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	801a      	strh	r2, [r3, #0]
 8006da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	2b3e      	cmp	r3, #62	; 0x3e
 8006daa:	d91d      	bls.n	8006de8 <PCD_EP_ISR_Handler+0x282>
 8006dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	095b      	lsrs	r3, r3, #5
 8006db2:	647b      	str	r3, [r7, #68]	; 0x44
 8006db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	f003 031f 	and.w	r3, r3, #31
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d102      	bne.n	8006dc6 <PCD_EP_ISR_Handler+0x260>
 8006dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	029b      	lsls	r3, r3, #10
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	801a      	strh	r2, [r3, #0]
 8006de6:	e026      	b.n	8006e36 <PCD_EP_ISR_Handler+0x2d0>
 8006de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10a      	bne.n	8006e06 <PCD_EP_ISR_Handler+0x2a0>
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	801a      	strh	r2, [r3, #0]
 8006e04:	e017      	b.n	8006e36 <PCD_EP_ISR_Handler+0x2d0>
 8006e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	085b      	lsrs	r3, r3, #1
 8006e0c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <PCD_EP_ISR_Handler+0x2ba>
 8006e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	029b      	lsls	r3, r3, #10
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	881b      	ldrh	r3, [r3, #0]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e46:	827b      	strh	r3, [r7, #18]
 8006e48:	8a7b      	ldrh	r3, [r7, #18]
 8006e4a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e4e:	827b      	strh	r3, [r7, #18]
 8006e50:	8a7b      	ldrh	r3, [r7, #18]
 8006e52:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e56:	827b      	strh	r3, [r7, #18]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	8a7b      	ldrh	r3, [r7, #18]
 8006e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	8013      	strh	r3, [r2, #0]
 8006e72:	e22c      	b.n	80072ce <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006e88:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f280 80f6 	bge.w	800707e <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	461a      	mov	r2, r3
 8006e98:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006ec0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ec4:	b292      	uxth	r2, r2
 8006ec6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006ec8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8006ecc:	4613      	mov	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4413      	add	r3, r2
 8006ed2:	00db      	lsls	r3, r3, #3
 8006ed4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	4413      	add	r3, r2
 8006edc:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ee0:	7b1b      	ldrb	r3, [r3, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d123      	bne.n	8006f2e <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	00db      	lsls	r3, r3, #3
 8006ef8:	4413      	add	r3, r2
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	6812      	ldr	r2, [r2, #0]
 8006efe:	4413      	add	r3, r2
 8006f00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f0a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8006f0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 808e 	beq.w	8007034 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6818      	ldr	r0, [r3, #0]
 8006f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f1e:	6959      	ldr	r1, [r3, #20]
 8006f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f22:	88da      	ldrh	r2, [r3, #6]
 8006f24:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006f28:	f004 fe7a 	bl	800bc20 <USB_ReadPMA>
 8006f2c:	e082      	b.n	8007034 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f30:	78db      	ldrb	r3, [r3, #3]
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d10a      	bne.n	8006f4c <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006f36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f9d3 	bl	80072ea <HAL_PCD_EP_DB_Receive>
 8006f44:	4603      	mov	r3, r0
 8006f46:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006f4a:	e073      	b.n	8007034 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	461a      	mov	r2, r3
 8006f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f66:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	441a      	add	r2, r3
 8006f78:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	461a      	mov	r2, r3
 8006f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4413      	add	r3, r2
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d022      	beq.n	8006ff0 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	00db      	lsls	r3, r3, #3
 8006fbc:	4413      	add	r3, r2
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	6812      	ldr	r2, [r2, #0]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fce:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8006fd2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d02c      	beq.n	8007034 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fe0:	6959      	ldr	r1, [r3, #20]
 8006fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fe4:	891a      	ldrh	r2, [r3, #8]
 8006fe6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006fea:	f004 fe19 	bl	800bc20 <USB_ReadPMA>
 8006fee:	e021      	b.n	8007034 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	00db      	lsls	r3, r3, #3
 8007002:	4413      	add	r3, r2
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	6812      	ldr	r2, [r2, #0]
 8007008:	4413      	add	r3, r2
 800700a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007014:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8007018:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800701c:	2b00      	cmp	r3, #0
 800701e:	d009      	beq.n	8007034 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6818      	ldr	r0, [r3, #0]
 8007024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007026:	6959      	ldr	r1, [r3, #20]
 8007028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800702a:	895a      	ldrh	r2, [r3, #10]
 800702c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007030:	f004 fdf6 	bl	800bc20 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007036:	69da      	ldr	r2, [r3, #28]
 8007038:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800703c:	441a      	add	r2, r3
 800703e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007040:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007044:	695a      	ldr	r2, [r3, #20]
 8007046:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800704a:	441a      	add	r2, r3
 800704c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800704e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d005      	beq.n	8007064 <PCD_EP_ISR_Handler+0x4fe>
 8007058:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800705c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	429a      	cmp	r2, r3
 8007062:	d206      	bcs.n	8007072 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	4619      	mov	r1, r3
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f006 fce2 	bl	800da34 <HAL_PCD_DataOutStageCallback>
 8007070:	e005      	b.n	800707e <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007078:	4618      	mov	r0, r3
 800707a:	f003 f8a4 	bl	800a1c6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800707e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007086:	2b00      	cmp	r3, #0
 8007088:	f000 8121 	beq.w	80072ce <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800708c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8007090:	4613      	mov	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4413      	add	r3, r2
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	3310      	adds	r3, #16
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	4413      	add	r3, r2
 800709e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	461a      	mov	r2, r3
 80070a6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80070b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	461a      	mov	r2, r3
 80070c4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	441a      	add	r2, r3
 80070cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80070d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070d8:	b29b      	uxth	r3, r3
 80070da:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80070dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070de:	78db      	ldrb	r3, [r3, #3]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	f040 80a2 	bne.w	800722a <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 80070e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070e8:	2200      	movs	r2, #0
 80070ea:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80070ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070ee:	7b1b      	ldrb	r3, [r3, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 8093 	beq.w	800721c <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80070f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80070fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d046      	beq.n	8007190 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007104:	785b      	ldrb	r3, [r3, #1]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d126      	bne.n	8007158 <PCD_EP_ISR_Handler+0x5f2>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	627b      	str	r3, [r7, #36]	; 0x24
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007118:	b29b      	uxth	r3, r3
 800711a:	461a      	mov	r2, r3
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	4413      	add	r3, r2
 8007120:	627b      	str	r3, [r7, #36]	; 0x24
 8007122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	00da      	lsls	r2, r3, #3
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	4413      	add	r3, r2
 800712c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007130:	623b      	str	r3, [r7, #32]
 8007132:	6a3b      	ldr	r3, [r7, #32]
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	b29b      	uxth	r3, r3
 8007138:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800713c:	b29a      	uxth	r2, r3
 800713e:	6a3b      	ldr	r3, [r7, #32]
 8007140:	801a      	strh	r2, [r3, #0]
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	b29b      	uxth	r3, r3
 8007148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800714c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007150:	b29a      	uxth	r2, r3
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	801a      	strh	r2, [r3, #0]
 8007156:	e061      	b.n	800721c <PCD_EP_ISR_Handler+0x6b6>
 8007158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800715a:	785b      	ldrb	r3, [r3, #1]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d15d      	bne.n	800721c <PCD_EP_ISR_Handler+0x6b6>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800716e:	b29b      	uxth	r3, r3
 8007170:	461a      	mov	r2, r3
 8007172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007174:	4413      	add	r3, r2
 8007176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	00da      	lsls	r2, r3, #3
 800717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007180:	4413      	add	r3, r2
 8007182:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007186:	62bb      	str	r3, [r7, #40]	; 0x28
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	2200      	movs	r2, #0
 800718c:	801a      	strh	r2, [r3, #0]
 800718e:	e045      	b.n	800721c <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007198:	785b      	ldrb	r3, [r3, #1]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d126      	bne.n	80071ec <PCD_EP_ISR_Handler+0x686>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	637b      	str	r3, [r7, #52]	; 0x34
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	461a      	mov	r2, r3
 80071b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b2:	4413      	add	r3, r2
 80071b4:	637b      	str	r3, [r7, #52]	; 0x34
 80071b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	00da      	lsls	r2, r3, #3
 80071bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071be:	4413      	add	r3, r2
 80071c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071c4:	633b      	str	r3, [r7, #48]	; 0x30
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	881b      	ldrh	r3, [r3, #0]
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	801a      	strh	r2, [r3, #0]
 80071d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	b29b      	uxth	r3, r3
 80071dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e8:	801a      	strh	r2, [r3, #0]
 80071ea:	e017      	b.n	800721c <PCD_EP_ISR_Handler+0x6b6>
 80071ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071ee:	785b      	ldrb	r3, [r3, #1]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d113      	bne.n	800721c <PCD_EP_ISR_Handler+0x6b6>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	461a      	mov	r2, r3
 8007200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007202:	4413      	add	r3, r2
 8007204:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	00da      	lsls	r2, r3, #3
 800720c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800720e:	4413      	add	r3, r2
 8007210:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007214:	63bb      	str	r3, [r7, #56]	; 0x38
 8007216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007218:	2200      	movs	r2, #0
 800721a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800721c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	4619      	mov	r1, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f006 fc21 	bl	800da6a <HAL_PCD_DataInStageCallback>
 8007228:	e051      	b.n	80072ce <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800722a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800722e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007232:	2b00      	cmp	r3, #0
 8007234:	d144      	bne.n	80072c0 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800723e:	b29b      	uxth	r3, r3
 8007240:	461a      	mov	r2, r3
 8007242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	00db      	lsls	r3, r3, #3
 8007248:	4413      	add	r3, r2
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	6812      	ldr	r2, [r2, #0]
 800724e:	4413      	add	r3, r2
 8007250:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007254:	881b      	ldrh	r3, [r3, #0]
 8007256:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800725a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800725e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007260:	699a      	ldr	r2, [r3, #24]
 8007262:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007266:	429a      	cmp	r2, r3
 8007268:	d907      	bls.n	800727a <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800726a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800726c:	699a      	ldr	r2, [r3, #24]
 800726e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007272:	1ad2      	subs	r2, r2, r3
 8007274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007276:	619a      	str	r2, [r3, #24]
 8007278:	e002      	b.n	8007280 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800727a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800727c:	2200      	movs	r2, #0
 800727e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d106      	bne.n	8007296 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f006 fbeb 	bl	800da6a <HAL_PCD_DataInStageCallback>
 8007294:	e01b      	b.n	80072ce <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007298:	695a      	ldr	r2, [r3, #20]
 800729a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800729e:	441a      	add	r2, r3
 80072a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072a2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80072a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072a6:	69da      	ldr	r2, [r3, #28]
 80072a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80072ac:	441a      	add	r2, r3
 80072ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072b0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072b8:	4618      	mov	r0, r3
 80072ba:	f002 ff84 	bl	800a1c6 <USB_EPStartXfer>
 80072be:	e006      	b.n	80072ce <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80072c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80072c4:	461a      	mov	r2, r3
 80072c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f917 	bl	80074fc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	b21b      	sxth	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f6ff ac48 	blt.w	8006b70 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3758      	adds	r7, #88	; 0x58
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b088      	sub	sp, #32
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	4613      	mov	r3, r2
 80072f6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80072f8:	88fb      	ldrh	r3, [r7, #6]
 80072fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d07c      	beq.n	80073fc <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800730a:	b29b      	uxth	r3, r3
 800730c:	461a      	mov	r2, r3
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	00db      	lsls	r3, r3, #3
 8007314:	4413      	add	r3, r2
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	6812      	ldr	r2, [r2, #0]
 800731a:	4413      	add	r3, r2
 800731c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007320:	881b      	ldrh	r3, [r3, #0]
 8007322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007326:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	699a      	ldr	r2, [r3, #24]
 800732c:	8b7b      	ldrh	r3, [r7, #26]
 800732e:	429a      	cmp	r2, r3
 8007330:	d306      	bcc.n	8007340 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	699a      	ldr	r2, [r3, #24]
 8007336:	8b7b      	ldrh	r3, [r7, #26]
 8007338:	1ad2      	subs	r2, r2, r3
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	619a      	str	r2, [r3, #24]
 800733e:	e002      	b.n	8007346 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	2200      	movs	r2, #0
 8007344:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d123      	bne.n	8007396 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4413      	add	r3, r2
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	b29b      	uxth	r3, r3
 8007360:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007368:	833b      	strh	r3, [r7, #24]
 800736a:	8b3b      	ldrh	r3, [r7, #24]
 800736c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007370:	833b      	strh	r3, [r7, #24]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	461a      	mov	r2, r3
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	441a      	add	r2, r3
 8007380:	8b3b      	ldrh	r3, [r7, #24]
 8007382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800738a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800738e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007392:	b29b      	uxth	r3, r3
 8007394:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007396:	88fb      	ldrh	r3, [r7, #6]
 8007398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739c:	2b00      	cmp	r3, #0
 800739e:	d01f      	beq.n	80073e0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	461a      	mov	r2, r3
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ba:	82fb      	strh	r3, [r7, #22]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	461a      	mov	r2, r3
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	441a      	add	r2, r3
 80073ca:	8afb      	ldrh	r3, [r7, #22]
 80073cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073dc:	b29b      	uxth	r3, r3
 80073de:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80073e0:	8b7b      	ldrh	r3, [r7, #26]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 8085 	beq.w	80074f2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6818      	ldr	r0, [r3, #0]
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	6959      	ldr	r1, [r3, #20]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	891a      	ldrh	r2, [r3, #8]
 80073f4:	8b7b      	ldrh	r3, [r7, #26]
 80073f6:	f004 fc13 	bl	800bc20 <USB_ReadPMA>
 80073fa:	e07a      	b.n	80074f2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007404:	b29b      	uxth	r3, r3
 8007406:	461a      	mov	r2, r3
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	00db      	lsls	r3, r3, #3
 800740e:	4413      	add	r3, r2
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	6812      	ldr	r2, [r2, #0]
 8007414:	4413      	add	r3, r2
 8007416:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800741a:	881b      	ldrh	r3, [r3, #0]
 800741c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007420:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	699a      	ldr	r2, [r3, #24]
 8007426:	8b7b      	ldrh	r3, [r7, #26]
 8007428:	429a      	cmp	r2, r3
 800742a:	d306      	bcc.n	800743a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	699a      	ldr	r2, [r3, #24]
 8007430:	8b7b      	ldrh	r3, [r7, #26]
 8007432:	1ad2      	subs	r2, r2, r3
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	619a      	str	r2, [r3, #24]
 8007438:	e002      	b.n	8007440 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	2200      	movs	r2, #0
 800743e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d123      	bne.n	8007490 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	b29b      	uxth	r3, r3
 800745a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800745e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007462:	83fb      	strh	r3, [r7, #30]
 8007464:	8bfb      	ldrh	r3, [r7, #30]
 8007466:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800746a:	83fb      	strh	r3, [r7, #30]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	461a      	mov	r2, r3
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	441a      	add	r2, r3
 800747a:	8bfb      	ldrh	r3, [r7, #30]
 800747c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800748c:	b29b      	uxth	r3, r3
 800748e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007490:	88fb      	ldrh	r3, [r7, #6]
 8007492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007496:	2b00      	cmp	r3, #0
 8007498:	d11f      	bne.n	80074da <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b4:	83bb      	strh	r3, [r7, #28]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	441a      	add	r2, r3
 80074c4:	8bbb      	ldrh	r3, [r7, #28]
 80074c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80074da:	8b7b      	ldrh	r3, [r7, #26]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d008      	beq.n	80074f2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6818      	ldr	r0, [r3, #0]
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	6959      	ldr	r1, [r3, #20]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	895a      	ldrh	r2, [r3, #10]
 80074ec:	8b7b      	ldrh	r3, [r7, #26]
 80074ee:	f004 fb97 	bl	800bc20 <USB_ReadPMA>
    }
  }

  return count;
 80074f2:	8b7b      	ldrh	r3, [r7, #26]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3720      	adds	r7, #32
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b0a4      	sub	sp, #144	; 0x90
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	4613      	mov	r3, r2
 8007508:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800750a:	88fb      	ldrh	r3, [r7, #6]
 800750c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007510:	2b00      	cmp	r3, #0
 8007512:	f000 81db 	beq.w	80078cc <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800751e:	b29b      	uxth	r3, r3
 8007520:	461a      	mov	r2, r3
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	00db      	lsls	r3, r3, #3
 8007528:	4413      	add	r3, r2
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	6812      	ldr	r2, [r2, #0]
 800752e:	4413      	add	r3, r2
 8007530:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007534:	881b      	ldrh	r3, [r3, #0]
 8007536:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800753a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	699a      	ldr	r2, [r3, #24]
 8007542:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007546:	429a      	cmp	r2, r3
 8007548:	d907      	bls.n	800755a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	699a      	ldr	r2, [r3, #24]
 800754e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007552:	1ad2      	subs	r2, r2, r3
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	619a      	str	r2, [r3, #24]
 8007558:	e002      	b.n	8007560 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	2200      	movs	r2, #0
 800755e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	2b00      	cmp	r3, #0
 8007566:	f040 80b9 	bne.w	80076dc <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	785b      	ldrb	r3, [r3, #1]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d126      	bne.n	80075c0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007580:	b29b      	uxth	r3, r3
 8007582:	461a      	mov	r2, r3
 8007584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007586:	4413      	add	r3, r2
 8007588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	00da      	lsls	r2, r3, #3
 8007590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007592:	4413      	add	r3, r2
 8007594:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007598:	62bb      	str	r3, [r7, #40]	; 0x28
 800759a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759c:	881b      	ldrh	r3, [r3, #0]
 800759e:	b29b      	uxth	r3, r3
 80075a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a8:	801a      	strh	r2, [r3, #0]
 80075aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075bc:	801a      	strh	r2, [r3, #0]
 80075be:	e01a      	b.n	80075f6 <HAL_PCD_EP_DB_Transmit+0xfa>
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	785b      	ldrb	r3, [r3, #1]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d116      	bne.n	80075f6 <HAL_PCD_EP_DB_Transmit+0xfa>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	637b      	str	r3, [r7, #52]	; 0x34
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	461a      	mov	r2, r3
 80075da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075dc:	4413      	add	r3, r2
 80075de:	637b      	str	r3, [r7, #52]	; 0x34
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	00da      	lsls	r2, r3, #3
 80075e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e8:	4413      	add	r3, r2
 80075ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075ee:	633b      	str	r3, [r7, #48]	; 0x30
 80075f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f2:	2200      	movs	r2, #0
 80075f4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	627b      	str	r3, [r7, #36]	; 0x24
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	785b      	ldrb	r3, [r3, #1]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d126      	bne.n	8007652 <HAL_PCD_EP_DB_Transmit+0x156>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	61fb      	str	r3, [r7, #28]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007612:	b29b      	uxth	r3, r3
 8007614:	461a      	mov	r2, r3
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	4413      	add	r3, r2
 800761a:	61fb      	str	r3, [r7, #28]
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	00da      	lsls	r2, r3, #3
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	4413      	add	r3, r2
 8007626:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800762a:	61bb      	str	r3, [r7, #24]
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	881b      	ldrh	r3, [r3, #0]
 8007630:	b29b      	uxth	r3, r3
 8007632:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007636:	b29a      	uxth	r2, r3
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	801a      	strh	r2, [r3, #0]
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	881b      	ldrh	r3, [r3, #0]
 8007640:	b29b      	uxth	r3, r3
 8007642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800764a:	b29a      	uxth	r2, r3
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	801a      	strh	r2, [r3, #0]
 8007650:	e017      	b.n	8007682 <HAL_PCD_EP_DB_Transmit+0x186>
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	785b      	ldrb	r3, [r3, #1]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d113      	bne.n	8007682 <HAL_PCD_EP_DB_Transmit+0x186>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007662:	b29b      	uxth	r3, r3
 8007664:	461a      	mov	r2, r3
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007668:	4413      	add	r3, r2
 800766a:	627b      	str	r3, [r7, #36]	; 0x24
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	00da      	lsls	r2, r3, #3
 8007672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007674:	4413      	add	r3, r2
 8007676:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800767a:	623b      	str	r3, [r7, #32]
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	2200      	movs	r2, #0
 8007680:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	4619      	mov	r1, r3
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f006 f9ee 	bl	800da6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800768e:	88fb      	ldrh	r3, [r7, #6]
 8007690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 82fa 	beq.w	8007c8e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	461a      	mov	r2, r3
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4413      	add	r3, r2
 80076a8:	881b      	ldrh	r3, [r3, #0]
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b4:	82fb      	strh	r3, [r7, #22]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	461a      	mov	r2, r3
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	441a      	add	r2, r3
 80076c4:	8afb      	ldrh	r3, [r7, #22]
 80076c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	8013      	strh	r3, [r2, #0]
 80076da:	e2d8      	b.n	8007c8e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80076dc:	88fb      	ldrh	r3, [r7, #6]
 80076de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d021      	beq.n	800772a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	461a      	mov	r2, r3
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007700:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	461a      	mov	r2, r3
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	441a      	add	r2, r3
 8007712:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800771a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800771e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007726:	b29b      	uxth	r3, r3
 8007728:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007730:	2b01      	cmp	r3, #1
 8007732:	f040 82ac 	bne.w	8007c8e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	695a      	ldr	r2, [r3, #20]
 800773a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800773e:	441a      	add	r2, r3
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	69da      	ldr	r2, [r3, #28]
 8007748:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800774c:	441a      	add	r2, r3
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	6a1a      	ldr	r2, [r3, #32]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	429a      	cmp	r2, r3
 800775c:	d30b      	bcc.n	8007776 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	6a1a      	ldr	r2, [r3, #32]
 800776a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800776e:	1ad2      	subs	r2, r2, r3
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	621a      	str	r2, [r3, #32]
 8007774:	e017      	b.n	80077a6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d108      	bne.n	8007790 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800777e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007782:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800778e:	e00a      	b.n	80077a6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	6a1b      	ldr	r3, [r3, #32]
 800779c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2200      	movs	r2, #0
 80077a4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	785b      	ldrb	r3, [r3, #1]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d165      	bne.n	800787a <HAL_PCD_EP_DB_Transmit+0x37e>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077bc:	b29b      	uxth	r3, r3
 80077be:	461a      	mov	r2, r3
 80077c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077c2:	4413      	add	r3, r2
 80077c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	00da      	lsls	r2, r3, #3
 80077cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ce:	4413      	add	r3, r2
 80077d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80077d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e4:	801a      	strh	r2, [r3, #0]
 80077e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077ea:	2b3e      	cmp	r3, #62	; 0x3e
 80077ec:	d91d      	bls.n	800782a <HAL_PCD_EP_DB_Transmit+0x32e>
 80077ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077f2:	095b      	lsrs	r3, r3, #5
 80077f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80077f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077fa:	f003 031f 	and.w	r3, r3, #31
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d102      	bne.n	8007808 <HAL_PCD_EP_DB_Transmit+0x30c>
 8007802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007804:	3b01      	subs	r3, #1
 8007806:	64bb      	str	r3, [r7, #72]	; 0x48
 8007808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780a:	881b      	ldrh	r3, [r3, #0]
 800780c:	b29a      	uxth	r2, r3
 800780e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007810:	b29b      	uxth	r3, r3
 8007812:	029b      	lsls	r3, r3, #10
 8007814:	b29b      	uxth	r3, r3
 8007816:	4313      	orrs	r3, r2
 8007818:	b29b      	uxth	r3, r3
 800781a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800781e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007822:	b29a      	uxth	r2, r3
 8007824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007826:	801a      	strh	r2, [r3, #0]
 8007828:	e044      	b.n	80078b4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800782a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10a      	bne.n	8007848 <HAL_PCD_EP_DB_Transmit+0x34c>
 8007832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007834:	881b      	ldrh	r3, [r3, #0]
 8007836:	b29b      	uxth	r3, r3
 8007838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800783c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007840:	b29a      	uxth	r2, r3
 8007842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007844:	801a      	strh	r2, [r3, #0]
 8007846:	e035      	b.n	80078b4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007848:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800784c:	085b      	lsrs	r3, r3, #1
 800784e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007850:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <HAL_PCD_EP_DB_Transmit+0x366>
 800785c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800785e:	3301      	adds	r3, #1
 8007860:	64bb      	str	r3, [r7, #72]	; 0x48
 8007862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007864:	881b      	ldrh	r3, [r3, #0]
 8007866:	b29a      	uxth	r2, r3
 8007868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800786a:	b29b      	uxth	r3, r3
 800786c:	029b      	lsls	r3, r3, #10
 800786e:	b29b      	uxth	r3, r3
 8007870:	4313      	orrs	r3, r2
 8007872:	b29a      	uxth	r2, r3
 8007874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007876:	801a      	strh	r2, [r3, #0]
 8007878:	e01c      	b.n	80078b4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	785b      	ldrb	r3, [r3, #1]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d118      	bne.n	80078b4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	647b      	str	r3, [r7, #68]	; 0x44
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007890:	b29b      	uxth	r3, r3
 8007892:	461a      	mov	r2, r3
 8007894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007896:	4413      	add	r3, r2
 8007898:	647b      	str	r3, [r7, #68]	; 0x44
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	00da      	lsls	r2, r3, #3
 80078a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078a2:	4413      	add	r3, r2
 80078a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078a8:	643b      	str	r3, [r7, #64]	; 0x40
 80078aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078b2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6818      	ldr	r0, [r3, #0]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	6959      	ldr	r1, [r3, #20]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	891a      	ldrh	r2, [r3, #8]
 80078c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	f004 f969 	bl	800bb9c <USB_WritePMA>
 80078ca:	e1e0      	b.n	8007c8e <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	461a      	mov	r2, r3
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	00db      	lsls	r3, r3, #3
 80078de:	4413      	add	r3, r2
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	6812      	ldr	r2, [r2, #0]
 80078e4:	4413      	add	r3, r2
 80078e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078ea:	881b      	ldrh	r3, [r3, #0]
 80078ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078f0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	699a      	ldr	r2, [r3, #24]
 80078f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d307      	bcc.n	8007910 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	699a      	ldr	r2, [r3, #24]
 8007904:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007908:	1ad2      	subs	r2, r2, r3
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	619a      	str	r2, [r3, #24]
 800790e:	e002      	b.n	8007916 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2200      	movs	r2, #0
 8007914:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	2b00      	cmp	r3, #0
 800791c:	f040 80c0 	bne.w	8007aa0 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	785b      	ldrb	r3, [r3, #1]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d126      	bne.n	8007976 <HAL_PCD_EP_DB_Transmit+0x47a>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007936:	b29b      	uxth	r3, r3
 8007938:	461a      	mov	r2, r3
 800793a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800793c:	4413      	add	r3, r2
 800793e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	00da      	lsls	r2, r3, #3
 8007946:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007948:	4413      	add	r3, r2
 800794a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800794e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	b29b      	uxth	r3, r3
 8007956:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800795a:	b29a      	uxth	r2, r3
 800795c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800795e:	801a      	strh	r2, [r3, #0]
 8007960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007962:	881b      	ldrh	r3, [r3, #0]
 8007964:	b29b      	uxth	r3, r3
 8007966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800796a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800796e:	b29a      	uxth	r2, r3
 8007970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007972:	801a      	strh	r2, [r3, #0]
 8007974:	e01a      	b.n	80079ac <HAL_PCD_EP_DB_Transmit+0x4b0>
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	785b      	ldrb	r3, [r3, #1]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d116      	bne.n	80079ac <HAL_PCD_EP_DB_Transmit+0x4b0>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	667b      	str	r3, [r7, #100]	; 0x64
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800798c:	b29b      	uxth	r3, r3
 800798e:	461a      	mov	r2, r3
 8007990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007992:	4413      	add	r3, r2
 8007994:	667b      	str	r3, [r7, #100]	; 0x64
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	00da      	lsls	r2, r3, #3
 800799c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800799e:	4413      	add	r3, r2
 80079a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079a4:	663b      	str	r3, [r7, #96]	; 0x60
 80079a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079a8:	2200      	movs	r2, #0
 80079aa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	677b      	str	r3, [r7, #116]	; 0x74
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	785b      	ldrb	r3, [r3, #1]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d12b      	bne.n	8007a12 <HAL_PCD_EP_DB_Transmit+0x516>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	461a      	mov	r2, r3
 80079cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ce:	4413      	add	r3, r2
 80079d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	00da      	lsls	r2, r3, #3
 80079d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079da:	4413      	add	r3, r2
 80079dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079f6:	801a      	strh	r2, [r3, #0]
 80079f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a0e:	801a      	strh	r2, [r3, #0]
 8007a10:	e017      	b.n	8007a42 <HAL_PCD_EP_DB_Transmit+0x546>
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	785b      	ldrb	r3, [r3, #1]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d113      	bne.n	8007a42 <HAL_PCD_EP_DB_Transmit+0x546>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	461a      	mov	r2, r3
 8007a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a28:	4413      	add	r3, r2
 8007a2a:	677b      	str	r3, [r7, #116]	; 0x74
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	00da      	lsls	r2, r3, #3
 8007a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a34:	4413      	add	r3, r2
 8007a36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a3a:	673b      	str	r3, [r7, #112]	; 0x70
 8007a3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a3e:	2200      	movs	r2, #0
 8007a40:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	4619      	mov	r1, r3
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f006 f80e 	bl	800da6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007a4e:	88fb      	ldrh	r3, [r7, #6]
 8007a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f040 811a 	bne.w	8007c8e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	881b      	ldrh	r3, [r3, #0]
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a74:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	441a      	add	r2, r3
 8007a86:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8007a8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	8013      	strh	r3, [r2, #0]
 8007a9e:	e0f6      	b.n	8007c8e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007aa0:	88fb      	ldrh	r3, [r7, #6]
 8007aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d121      	bne.n	8007aee <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4413      	add	r3, r2
 8007ab8:	881b      	ldrh	r3, [r3, #0]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	461a      	mov	r2, r3
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	441a      	add	r2, r3
 8007ad6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ae2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	f040 80ca 	bne.w	8007c8e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	695a      	ldr	r2, [r3, #20]
 8007afe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007b02:	441a      	add	r2, r3
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	69da      	ldr	r2, [r3, #28]
 8007b0c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007b10:	441a      	add	r2, r3
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	6a1a      	ldr	r2, [r3, #32]
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d30b      	bcc.n	8007b3a <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	6a1a      	ldr	r2, [r3, #32]
 8007b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b32:	1ad2      	subs	r2, r2, r3
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	621a      	str	r2, [r3, #32]
 8007b38:	e017      	b.n	8007b6a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d108      	bne.n	8007b54 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8007b42:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007b46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007b52:	e00a      	b.n	8007b6a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	6a1b      	ldr	r3, [r3, #32]
 8007b58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	657b      	str	r3, [r7, #84]	; 0x54
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	785b      	ldrb	r3, [r3, #1]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d165      	bne.n	8007c44 <HAL_PCD_EP_DB_Transmit+0x748>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	461a      	mov	r2, r3
 8007b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b8c:	4413      	add	r3, r2
 8007b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	00da      	lsls	r2, r3, #3
 8007b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b98:	4413      	add	r3, r2
 8007b9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ba2:	881b      	ldrh	r3, [r3, #0]
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bae:	801a      	strh	r2, [r3, #0]
 8007bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bb4:	2b3e      	cmp	r3, #62	; 0x3e
 8007bb6:	d91d      	bls.n	8007bf4 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8007bb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bbc:	095b      	lsrs	r3, r3, #5
 8007bbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bc4:	f003 031f 	and.w	r3, r3, #31
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d102      	bne.n	8007bd2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8007bcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bd4:	881b      	ldrh	r3, [r3, #0]
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	029b      	lsls	r3, r3, #10
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	4313      	orrs	r3, r2
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bf0:	801a      	strh	r2, [r3, #0]
 8007bf2:	e041      	b.n	8007c78 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10a      	bne.n	8007c12 <HAL_PCD_EP_DB_Transmit+0x716>
 8007bfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bfe:	881b      	ldrh	r3, [r3, #0]
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c0e:	801a      	strh	r2, [r3, #0]
 8007c10:	e032      	b.n	8007c78 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007c12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c16:	085b      	lsrs	r3, r3, #1
 8007c18:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d002      	beq.n	8007c2c <HAL_PCD_EP_DB_Transmit+0x730>
 8007c26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c28:	3301      	adds	r3, #1
 8007c2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c2e:	881b      	ldrh	r3, [r3, #0]
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	029b      	lsls	r3, r3, #10
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c40:	801a      	strh	r2, [r3, #0]
 8007c42:	e019      	b.n	8007c78 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	785b      	ldrb	r3, [r3, #1]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d115      	bne.n	8007c78 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	461a      	mov	r2, r3
 8007c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c5a:	4413      	add	r3, r2
 8007c5c:	657b      	str	r3, [r7, #84]	; 0x54
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	00da      	lsls	r2, r3, #3
 8007c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c66:	4413      	add	r3, r2
 8007c68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c6c:	653b      	str	r3, [r7, #80]	; 0x50
 8007c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c76:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6818      	ldr	r0, [r3, #0]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	6959      	ldr	r1, [r3, #20]
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	895a      	ldrh	r2, [r3, #10]
 8007c84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	f003 ff87 	bl	800bb9c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	461a      	mov	r2, r3
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	881b      	ldrh	r3, [r3, #0]
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ca8:	82bb      	strh	r3, [r7, #20]
 8007caa:	8abb      	ldrh	r3, [r7, #20]
 8007cac:	f083 0310 	eor.w	r3, r3, #16
 8007cb0:	82bb      	strh	r3, [r7, #20]
 8007cb2:	8abb      	ldrh	r3, [r7, #20]
 8007cb4:	f083 0320 	eor.w	r3, r3, #32
 8007cb8:	82bb      	strh	r3, [r7, #20]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	441a      	add	r2, r3
 8007cc8:	8abb      	ldrh	r3, [r7, #20]
 8007cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3790      	adds	r7, #144	; 0x90
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	607b      	str	r3, [r7, #4]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	817b      	strh	r3, [r7, #10]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007cfa:	897b      	ldrh	r3, [r7, #10]
 8007cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00b      	beq.n	8007d1e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d06:	897b      	ldrh	r3, [r7, #10]
 8007d08:	f003 0207 	and.w	r2, r3, #7
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4413      	add	r3, r2
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	3310      	adds	r3, #16
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	4413      	add	r3, r2
 8007d1a:	617b      	str	r3, [r7, #20]
 8007d1c:	e009      	b.n	8007d32 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007d1e:	897a      	ldrh	r2, [r7, #10]
 8007d20:	4613      	mov	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	00db      	lsls	r3, r3, #3
 8007d28:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	4413      	add	r3, r2
 8007d30:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007d32:	893b      	ldrh	r3, [r7, #8]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d107      	bne.n	8007d48 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	80da      	strh	r2, [r3, #6]
 8007d46:	e00b      	b.n	8007d60 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	0c1b      	lsrs	r3, r3, #16
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	371c      	adds	r7, #28
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b085      	sub	sp, #20
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	f043 0301 	orr.w	r3, r3, #1
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	f043 0302 	orr.w	r3, r3, #2
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3714      	adds	r7, #20
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
	...

08007dc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d141      	bne.n	8007e56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007dd2:	4b4b      	ldr	r3, [pc, #300]	; (8007f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dde:	d131      	bne.n	8007e44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007de0:	4b47      	ldr	r3, [pc, #284]	; (8007f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007de6:	4a46      	ldr	r2, [pc, #280]	; (8007f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007df0:	4b43      	ldr	r3, [pc, #268]	; (8007f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007df8:	4a41      	ldr	r2, [pc, #260]	; (8007f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007dfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007e00:	4b40      	ldr	r3, [pc, #256]	; (8007f04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2232      	movs	r2, #50	; 0x32
 8007e06:	fb02 f303 	mul.w	r3, r2, r3
 8007e0a:	4a3f      	ldr	r2, [pc, #252]	; (8007f08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e10:	0c9b      	lsrs	r3, r3, #18
 8007e12:	3301      	adds	r3, #1
 8007e14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e16:	e002      	b.n	8007e1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e1e:	4b38      	ldr	r3, [pc, #224]	; (8007f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e2a:	d102      	bne.n	8007e32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1f2      	bne.n	8007e18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007e32:	4b33      	ldr	r3, [pc, #204]	; (8007f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e34:	695b      	ldr	r3, [r3, #20]
 8007e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e3e:	d158      	bne.n	8007ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e057      	b.n	8007ef4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007e44:	4b2e      	ldr	r3, [pc, #184]	; (8007f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e4a:	4a2d      	ldr	r2, [pc, #180]	; (8007f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007e54:	e04d      	b.n	8007ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e5c:	d141      	bne.n	8007ee2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007e5e:	4b28      	ldr	r3, [pc, #160]	; (8007f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e6a:	d131      	bne.n	8007ed0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007e6c:	4b24      	ldr	r3, [pc, #144]	; (8007f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e72:	4a23      	ldr	r2, [pc, #140]	; (8007f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e7c:	4b20      	ldr	r3, [pc, #128]	; (8007f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007e84:	4a1e      	ldr	r2, [pc, #120]	; (8007f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007e8c:	4b1d      	ldr	r3, [pc, #116]	; (8007f04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2232      	movs	r2, #50	; 0x32
 8007e92:	fb02 f303 	mul.w	r3, r2, r3
 8007e96:	4a1c      	ldr	r2, [pc, #112]	; (8007f08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007e98:	fba2 2303 	umull	r2, r3, r2, r3
 8007e9c:	0c9b      	lsrs	r3, r3, #18
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ea2:	e002      	b.n	8007eaa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007eaa:	4b15      	ldr	r3, [pc, #84]	; (8007f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eb6:	d102      	bne.n	8007ebe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1f2      	bne.n	8007ea4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007ebe:	4b10      	ldr	r3, [pc, #64]	; (8007f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eca:	d112      	bne.n	8007ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e011      	b.n	8007ef4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ed0:	4b0b      	ldr	r3, [pc, #44]	; (8007f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ed6:	4a0a      	ldr	r2, [pc, #40]	; (8007f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007edc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007ee0:	e007      	b.n	8007ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007ee2:	4b07      	ldr	r3, [pc, #28]	; (8007f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007eea:	4a05      	ldr	r2, [pc, #20]	; (8007f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007eec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ef0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	40007000 	.word	0x40007000
 8007f04:	2000000c 	.word	0x2000000c
 8007f08:	431bde83 	.word	0x431bde83

08007f0c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007f10:	4b05      	ldr	r3, [pc, #20]	; (8007f28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	4a04      	ldr	r2, [pc, #16]	; (8007f28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007f16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f1a:	6093      	str	r3, [r2, #8]
}
 8007f1c:	bf00      	nop
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	40007000 	.word	0x40007000

08007f2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b088      	sub	sp, #32
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e2fe      	b.n	800853c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d075      	beq.n	8008036 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f4a:	4b97      	ldr	r3, [pc, #604]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f003 030c 	and.w	r3, r3, #12
 8007f52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f54:	4b94      	ldr	r3, [pc, #592]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f003 0303 	and.w	r3, r3, #3
 8007f5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	2b0c      	cmp	r3, #12
 8007f62:	d102      	bne.n	8007f6a <HAL_RCC_OscConfig+0x3e>
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	2b03      	cmp	r3, #3
 8007f68:	d002      	beq.n	8007f70 <HAL_RCC_OscConfig+0x44>
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	2b08      	cmp	r3, #8
 8007f6e:	d10b      	bne.n	8007f88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f70:	4b8d      	ldr	r3, [pc, #564]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d05b      	beq.n	8008034 <HAL_RCC_OscConfig+0x108>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d157      	bne.n	8008034 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e2d9      	b.n	800853c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f90:	d106      	bne.n	8007fa0 <HAL_RCC_OscConfig+0x74>
 8007f92:	4b85      	ldr	r3, [pc, #532]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a84      	ldr	r2, [pc, #528]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 8007f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f9c:	6013      	str	r3, [r2, #0]
 8007f9e:	e01d      	b.n	8007fdc <HAL_RCC_OscConfig+0xb0>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fa8:	d10c      	bne.n	8007fc4 <HAL_RCC_OscConfig+0x98>
 8007faa:	4b7f      	ldr	r3, [pc, #508]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a7e      	ldr	r2, [pc, #504]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 8007fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007fb4:	6013      	str	r3, [r2, #0]
 8007fb6:	4b7c      	ldr	r3, [pc, #496]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a7b      	ldr	r2, [pc, #492]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 8007fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fc0:	6013      	str	r3, [r2, #0]
 8007fc2:	e00b      	b.n	8007fdc <HAL_RCC_OscConfig+0xb0>
 8007fc4:	4b78      	ldr	r3, [pc, #480]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a77      	ldr	r2, [pc, #476]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 8007fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fce:	6013      	str	r3, [r2, #0]
 8007fd0:	4b75      	ldr	r3, [pc, #468]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a74      	ldr	r2, [pc, #464]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 8007fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d013      	beq.n	800800c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe4:	f7fa fd88 	bl	8002af8 <HAL_GetTick>
 8007fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007fea:	e008      	b.n	8007ffe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fec:	f7fa fd84 	bl	8002af8 <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	2b64      	cmp	r3, #100	; 0x64
 8007ff8:	d901      	bls.n	8007ffe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e29e      	b.n	800853c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ffe:	4b6a      	ldr	r3, [pc, #424]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d0f0      	beq.n	8007fec <HAL_RCC_OscConfig+0xc0>
 800800a:	e014      	b.n	8008036 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800800c:	f7fa fd74 	bl	8002af8 <HAL_GetTick>
 8008010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008012:	e008      	b.n	8008026 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008014:	f7fa fd70 	bl	8002af8 <HAL_GetTick>
 8008018:	4602      	mov	r2, r0
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	2b64      	cmp	r3, #100	; 0x64
 8008020:	d901      	bls.n	8008026 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e28a      	b.n	800853c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008026:	4b60      	ldr	r3, [pc, #384]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1f0      	bne.n	8008014 <HAL_RCC_OscConfig+0xe8>
 8008032:	e000      	b.n	8008036 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0302 	and.w	r3, r3, #2
 800803e:	2b00      	cmp	r3, #0
 8008040:	d075      	beq.n	800812e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008042:	4b59      	ldr	r3, [pc, #356]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	f003 030c 	and.w	r3, r3, #12
 800804a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800804c:	4b56      	ldr	r3, [pc, #344]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	f003 0303 	and.w	r3, r3, #3
 8008054:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	2b0c      	cmp	r3, #12
 800805a:	d102      	bne.n	8008062 <HAL_RCC_OscConfig+0x136>
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	2b02      	cmp	r3, #2
 8008060:	d002      	beq.n	8008068 <HAL_RCC_OscConfig+0x13c>
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	2b04      	cmp	r3, #4
 8008066:	d11f      	bne.n	80080a8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008068:	4b4f      	ldr	r3, [pc, #316]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008070:	2b00      	cmp	r3, #0
 8008072:	d005      	beq.n	8008080 <HAL_RCC_OscConfig+0x154>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d101      	bne.n	8008080 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e25d      	b.n	800853c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008080:	4b49      	ldr	r3, [pc, #292]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	061b      	lsls	r3, r3, #24
 800808e:	4946      	ldr	r1, [pc, #280]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 8008090:	4313      	orrs	r3, r2
 8008092:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008094:	4b45      	ldr	r3, [pc, #276]	; (80081ac <HAL_RCC_OscConfig+0x280>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4618      	mov	r0, r3
 800809a:	f7fa fce1 	bl	8002a60 <HAL_InitTick>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d043      	beq.n	800812c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e249      	b.n	800853c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d023      	beq.n	80080f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080b0:	4b3d      	ldr	r3, [pc, #244]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a3c      	ldr	r2, [pc, #240]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 80080b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080bc:	f7fa fd1c 	bl	8002af8 <HAL_GetTick>
 80080c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80080c2:	e008      	b.n	80080d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080c4:	f7fa fd18 	bl	8002af8 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d901      	bls.n	80080d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e232      	b.n	800853c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80080d6:	4b34      	ldr	r3, [pc, #208]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d0f0      	beq.n	80080c4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080e2:	4b31      	ldr	r3, [pc, #196]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	061b      	lsls	r3, r3, #24
 80080f0:	492d      	ldr	r1, [pc, #180]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 80080f2:	4313      	orrs	r3, r2
 80080f4:	604b      	str	r3, [r1, #4]
 80080f6:	e01a      	b.n	800812e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080f8:	4b2b      	ldr	r3, [pc, #172]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a2a      	ldr	r2, [pc, #168]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 80080fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008104:	f7fa fcf8 	bl	8002af8 <HAL_GetTick>
 8008108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800810a:	e008      	b.n	800811e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800810c:	f7fa fcf4 	bl	8002af8 <HAL_GetTick>
 8008110:	4602      	mov	r2, r0
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	2b02      	cmp	r3, #2
 8008118:	d901      	bls.n	800811e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e20e      	b.n	800853c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800811e:	4b22      	ldr	r3, [pc, #136]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1f0      	bne.n	800810c <HAL_RCC_OscConfig+0x1e0>
 800812a:	e000      	b.n	800812e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800812c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0308 	and.w	r3, r3, #8
 8008136:	2b00      	cmp	r3, #0
 8008138:	d041      	beq.n	80081be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d01c      	beq.n	800817c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008142:	4b19      	ldr	r3, [pc, #100]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 8008144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008148:	4a17      	ldr	r2, [pc, #92]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 800814a:	f043 0301 	orr.w	r3, r3, #1
 800814e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008152:	f7fa fcd1 	bl	8002af8 <HAL_GetTick>
 8008156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008158:	e008      	b.n	800816c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800815a:	f7fa fccd 	bl	8002af8 <HAL_GetTick>
 800815e:	4602      	mov	r2, r0
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	2b02      	cmp	r3, #2
 8008166:	d901      	bls.n	800816c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e1e7      	b.n	800853c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800816c:	4b0e      	ldr	r3, [pc, #56]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 800816e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008172:	f003 0302 	and.w	r3, r3, #2
 8008176:	2b00      	cmp	r3, #0
 8008178:	d0ef      	beq.n	800815a <HAL_RCC_OscConfig+0x22e>
 800817a:	e020      	b.n	80081be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800817c:	4b0a      	ldr	r3, [pc, #40]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 800817e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008182:	4a09      	ldr	r2, [pc, #36]	; (80081a8 <HAL_RCC_OscConfig+0x27c>)
 8008184:	f023 0301 	bic.w	r3, r3, #1
 8008188:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800818c:	f7fa fcb4 	bl	8002af8 <HAL_GetTick>
 8008190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008192:	e00d      	b.n	80081b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008194:	f7fa fcb0 	bl	8002af8 <HAL_GetTick>
 8008198:	4602      	mov	r2, r0
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d906      	bls.n	80081b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e1ca      	b.n	800853c <HAL_RCC_OscConfig+0x610>
 80081a6:	bf00      	nop
 80081a8:	40021000 	.word	0x40021000
 80081ac:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80081b0:	4b8c      	ldr	r3, [pc, #560]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 80081b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081b6:	f003 0302 	and.w	r3, r3, #2
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1ea      	bne.n	8008194 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0304 	and.w	r3, r3, #4
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f000 80a6 	beq.w	8008318 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081cc:	2300      	movs	r3, #0
 80081ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80081d0:	4b84      	ldr	r3, [pc, #528]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 80081d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d101      	bne.n	80081e0 <HAL_RCC_OscConfig+0x2b4>
 80081dc:	2301      	movs	r3, #1
 80081de:	e000      	b.n	80081e2 <HAL_RCC_OscConfig+0x2b6>
 80081e0:	2300      	movs	r3, #0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00d      	beq.n	8008202 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081e6:	4b7f      	ldr	r3, [pc, #508]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 80081e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ea:	4a7e      	ldr	r2, [pc, #504]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 80081ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081f0:	6593      	str	r3, [r2, #88]	; 0x58
 80081f2:	4b7c      	ldr	r3, [pc, #496]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 80081f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80081fe:	2301      	movs	r3, #1
 8008200:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008202:	4b79      	ldr	r3, [pc, #484]	; (80083e8 <HAL_RCC_OscConfig+0x4bc>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800820a:	2b00      	cmp	r3, #0
 800820c:	d118      	bne.n	8008240 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800820e:	4b76      	ldr	r3, [pc, #472]	; (80083e8 <HAL_RCC_OscConfig+0x4bc>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a75      	ldr	r2, [pc, #468]	; (80083e8 <HAL_RCC_OscConfig+0x4bc>)
 8008214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800821a:	f7fa fc6d 	bl	8002af8 <HAL_GetTick>
 800821e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008220:	e008      	b.n	8008234 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008222:	f7fa fc69 	bl	8002af8 <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	2b02      	cmp	r3, #2
 800822e:	d901      	bls.n	8008234 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008230:	2303      	movs	r3, #3
 8008232:	e183      	b.n	800853c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008234:	4b6c      	ldr	r3, [pc, #432]	; (80083e8 <HAL_RCC_OscConfig+0x4bc>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800823c:	2b00      	cmp	r3, #0
 800823e:	d0f0      	beq.n	8008222 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d108      	bne.n	800825a <HAL_RCC_OscConfig+0x32e>
 8008248:	4b66      	ldr	r3, [pc, #408]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 800824a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800824e:	4a65      	ldr	r2, [pc, #404]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 8008250:	f043 0301 	orr.w	r3, r3, #1
 8008254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008258:	e024      	b.n	80082a4 <HAL_RCC_OscConfig+0x378>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	2b05      	cmp	r3, #5
 8008260:	d110      	bne.n	8008284 <HAL_RCC_OscConfig+0x358>
 8008262:	4b60      	ldr	r3, [pc, #384]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 8008264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008268:	4a5e      	ldr	r2, [pc, #376]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 800826a:	f043 0304 	orr.w	r3, r3, #4
 800826e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008272:	4b5c      	ldr	r3, [pc, #368]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 8008274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008278:	4a5a      	ldr	r2, [pc, #360]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 800827a:	f043 0301 	orr.w	r3, r3, #1
 800827e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008282:	e00f      	b.n	80082a4 <HAL_RCC_OscConfig+0x378>
 8008284:	4b57      	ldr	r3, [pc, #348]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 8008286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800828a:	4a56      	ldr	r2, [pc, #344]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 800828c:	f023 0301 	bic.w	r3, r3, #1
 8008290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008294:	4b53      	ldr	r3, [pc, #332]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 8008296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800829a:	4a52      	ldr	r2, [pc, #328]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 800829c:	f023 0304 	bic.w	r3, r3, #4
 80082a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d016      	beq.n	80082da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082ac:	f7fa fc24 	bl	8002af8 <HAL_GetTick>
 80082b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082b2:	e00a      	b.n	80082ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082b4:	f7fa fc20 	bl	8002af8 <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	f241 3288 	movw	r2, #5000	; 0x1388
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d901      	bls.n	80082ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e138      	b.n	800853c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082ca:	4b46      	ldr	r3, [pc, #280]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 80082cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d0:	f003 0302 	and.w	r3, r3, #2
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d0ed      	beq.n	80082b4 <HAL_RCC_OscConfig+0x388>
 80082d8:	e015      	b.n	8008306 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082da:	f7fa fc0d 	bl	8002af8 <HAL_GetTick>
 80082de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80082e0:	e00a      	b.n	80082f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082e2:	f7fa fc09 	bl	8002af8 <HAL_GetTick>
 80082e6:	4602      	mov	r2, r0
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d901      	bls.n	80082f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	e121      	b.n	800853c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80082f8:	4b3a      	ldr	r3, [pc, #232]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 80082fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082fe:	f003 0302 	and.w	r3, r3, #2
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1ed      	bne.n	80082e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008306:	7ffb      	ldrb	r3, [r7, #31]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d105      	bne.n	8008318 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800830c:	4b35      	ldr	r3, [pc, #212]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 800830e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008310:	4a34      	ldr	r2, [pc, #208]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 8008312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008316:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0320 	and.w	r3, r3, #32
 8008320:	2b00      	cmp	r3, #0
 8008322:	d03c      	beq.n	800839e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d01c      	beq.n	8008366 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800832c:	4b2d      	ldr	r3, [pc, #180]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 800832e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008332:	4a2c      	ldr	r2, [pc, #176]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 8008334:	f043 0301 	orr.w	r3, r3, #1
 8008338:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800833c:	f7fa fbdc 	bl	8002af8 <HAL_GetTick>
 8008340:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008342:	e008      	b.n	8008356 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008344:	f7fa fbd8 	bl	8002af8 <HAL_GetTick>
 8008348:	4602      	mov	r2, r0
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	2b02      	cmp	r3, #2
 8008350:	d901      	bls.n	8008356 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008352:	2303      	movs	r3, #3
 8008354:	e0f2      	b.n	800853c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008356:	4b23      	ldr	r3, [pc, #140]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 8008358:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800835c:	f003 0302 	and.w	r3, r3, #2
 8008360:	2b00      	cmp	r3, #0
 8008362:	d0ef      	beq.n	8008344 <HAL_RCC_OscConfig+0x418>
 8008364:	e01b      	b.n	800839e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008366:	4b1f      	ldr	r3, [pc, #124]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 8008368:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800836c:	4a1d      	ldr	r2, [pc, #116]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 800836e:	f023 0301 	bic.w	r3, r3, #1
 8008372:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008376:	f7fa fbbf 	bl	8002af8 <HAL_GetTick>
 800837a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800837c:	e008      	b.n	8008390 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800837e:	f7fa fbbb 	bl	8002af8 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	2b02      	cmp	r3, #2
 800838a:	d901      	bls.n	8008390 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e0d5      	b.n	800853c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008390:	4b14      	ldr	r3, [pc, #80]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 8008392:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008396:	f003 0302 	and.w	r3, r3, #2
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1ef      	bne.n	800837e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	69db      	ldr	r3, [r3, #28]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f000 80c9 	beq.w	800853a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80083a8:	4b0e      	ldr	r3, [pc, #56]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	f003 030c 	and.w	r3, r3, #12
 80083b0:	2b0c      	cmp	r3, #12
 80083b2:	f000 8083 	beq.w	80084bc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	69db      	ldr	r3, [r3, #28]
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d15e      	bne.n	800847c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083be:	4b09      	ldr	r3, [pc, #36]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a08      	ldr	r2, [pc, #32]	; (80083e4 <HAL_RCC_OscConfig+0x4b8>)
 80083c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083ca:	f7fa fb95 	bl	8002af8 <HAL_GetTick>
 80083ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083d0:	e00c      	b.n	80083ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083d2:	f7fa fb91 	bl	8002af8 <HAL_GetTick>
 80083d6:	4602      	mov	r2, r0
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	1ad3      	subs	r3, r2, r3
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d905      	bls.n	80083ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e0ab      	b.n	800853c <HAL_RCC_OscConfig+0x610>
 80083e4:	40021000 	.word	0x40021000
 80083e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083ec:	4b55      	ldr	r3, [pc, #340]	; (8008544 <HAL_RCC_OscConfig+0x618>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d1ec      	bne.n	80083d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80083f8:	4b52      	ldr	r3, [pc, #328]	; (8008544 <HAL_RCC_OscConfig+0x618>)
 80083fa:	68da      	ldr	r2, [r3, #12]
 80083fc:	4b52      	ldr	r3, [pc, #328]	; (8008548 <HAL_RCC_OscConfig+0x61c>)
 80083fe:	4013      	ands	r3, r2
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	6a11      	ldr	r1, [r2, #32]
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008408:	3a01      	subs	r2, #1
 800840a:	0112      	lsls	r2, r2, #4
 800840c:	4311      	orrs	r1, r2
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008412:	0212      	lsls	r2, r2, #8
 8008414:	4311      	orrs	r1, r2
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800841a:	0852      	lsrs	r2, r2, #1
 800841c:	3a01      	subs	r2, #1
 800841e:	0552      	lsls	r2, r2, #21
 8008420:	4311      	orrs	r1, r2
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008426:	0852      	lsrs	r2, r2, #1
 8008428:	3a01      	subs	r2, #1
 800842a:	0652      	lsls	r2, r2, #25
 800842c:	4311      	orrs	r1, r2
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008432:	06d2      	lsls	r2, r2, #27
 8008434:	430a      	orrs	r2, r1
 8008436:	4943      	ldr	r1, [pc, #268]	; (8008544 <HAL_RCC_OscConfig+0x618>)
 8008438:	4313      	orrs	r3, r2
 800843a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800843c:	4b41      	ldr	r3, [pc, #260]	; (8008544 <HAL_RCC_OscConfig+0x618>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a40      	ldr	r2, [pc, #256]	; (8008544 <HAL_RCC_OscConfig+0x618>)
 8008442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008446:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008448:	4b3e      	ldr	r3, [pc, #248]	; (8008544 <HAL_RCC_OscConfig+0x618>)
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	4a3d      	ldr	r2, [pc, #244]	; (8008544 <HAL_RCC_OscConfig+0x618>)
 800844e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008452:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008454:	f7fa fb50 	bl	8002af8 <HAL_GetTick>
 8008458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800845a:	e008      	b.n	800846e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800845c:	f7fa fb4c 	bl	8002af8 <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	2b02      	cmp	r3, #2
 8008468:	d901      	bls.n	800846e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800846a:	2303      	movs	r3, #3
 800846c:	e066      	b.n	800853c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800846e:	4b35      	ldr	r3, [pc, #212]	; (8008544 <HAL_RCC_OscConfig+0x618>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d0f0      	beq.n	800845c <HAL_RCC_OscConfig+0x530>
 800847a:	e05e      	b.n	800853a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800847c:	4b31      	ldr	r3, [pc, #196]	; (8008544 <HAL_RCC_OscConfig+0x618>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a30      	ldr	r2, [pc, #192]	; (8008544 <HAL_RCC_OscConfig+0x618>)
 8008482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008488:	f7fa fb36 	bl	8002af8 <HAL_GetTick>
 800848c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800848e:	e008      	b.n	80084a2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008490:	f7fa fb32 	bl	8002af8 <HAL_GetTick>
 8008494:	4602      	mov	r2, r0
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	2b02      	cmp	r3, #2
 800849c:	d901      	bls.n	80084a2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e04c      	b.n	800853c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084a2:	4b28      	ldr	r3, [pc, #160]	; (8008544 <HAL_RCC_OscConfig+0x618>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1f0      	bne.n	8008490 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80084ae:	4b25      	ldr	r3, [pc, #148]	; (8008544 <HAL_RCC_OscConfig+0x618>)
 80084b0:	68da      	ldr	r2, [r3, #12]
 80084b2:	4924      	ldr	r1, [pc, #144]	; (8008544 <HAL_RCC_OscConfig+0x618>)
 80084b4:	4b25      	ldr	r3, [pc, #148]	; (800854c <HAL_RCC_OscConfig+0x620>)
 80084b6:	4013      	ands	r3, r2
 80084b8:	60cb      	str	r3, [r1, #12]
 80084ba:	e03e      	b.n	800853a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	69db      	ldr	r3, [r3, #28]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d101      	bne.n	80084c8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e039      	b.n	800853c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80084c8:	4b1e      	ldr	r3, [pc, #120]	; (8008544 <HAL_RCC_OscConfig+0x618>)
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f003 0203 	and.w	r2, r3, #3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a1b      	ldr	r3, [r3, #32]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d12c      	bne.n	8008536 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e6:	3b01      	subs	r3, #1
 80084e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d123      	bne.n	8008536 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d11b      	bne.n	8008536 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008508:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800850a:	429a      	cmp	r2, r3
 800850c:	d113      	bne.n	8008536 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008518:	085b      	lsrs	r3, r3, #1
 800851a:	3b01      	subs	r3, #1
 800851c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800851e:	429a      	cmp	r2, r3
 8008520:	d109      	bne.n	8008536 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800852c:	085b      	lsrs	r3, r3, #1
 800852e:	3b01      	subs	r3, #1
 8008530:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008532:	429a      	cmp	r2, r3
 8008534:	d001      	beq.n	800853a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e000      	b.n	800853c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3720      	adds	r7, #32
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	40021000 	.word	0x40021000
 8008548:	019f800c 	.word	0x019f800c
 800854c:	feeefffc 	.word	0xfeeefffc

08008550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800855a:	2300      	movs	r3, #0
 800855c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d101      	bne.n	8008568 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e11e      	b.n	80087a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008568:	4b91      	ldr	r3, [pc, #580]	; (80087b0 <HAL_RCC_ClockConfig+0x260>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 030f 	and.w	r3, r3, #15
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	429a      	cmp	r2, r3
 8008574:	d910      	bls.n	8008598 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008576:	4b8e      	ldr	r3, [pc, #568]	; (80087b0 <HAL_RCC_ClockConfig+0x260>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f023 020f 	bic.w	r2, r3, #15
 800857e:	498c      	ldr	r1, [pc, #560]	; (80087b0 <HAL_RCC_ClockConfig+0x260>)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	4313      	orrs	r3, r2
 8008584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008586:	4b8a      	ldr	r3, [pc, #552]	; (80087b0 <HAL_RCC_ClockConfig+0x260>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 030f 	and.w	r3, r3, #15
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	429a      	cmp	r2, r3
 8008592:	d001      	beq.n	8008598 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	e106      	b.n	80087a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 0301 	and.w	r3, r3, #1
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d073      	beq.n	800868c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	d129      	bne.n	8008600 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80085ac:	4b81      	ldr	r3, [pc, #516]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d101      	bne.n	80085bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e0f4      	b.n	80087a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80085bc:	f000 f972 	bl	80088a4 <RCC_GetSysClockFreqFromPLLSource>
 80085c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	4a7c      	ldr	r2, [pc, #496]	; (80087b8 <HAL_RCC_ClockConfig+0x268>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d93f      	bls.n	800864a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80085ca:	4b7a      	ldr	r3, [pc, #488]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d009      	beq.n	80085ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d033      	beq.n	800864a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d12f      	bne.n	800864a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80085ea:	4b72      	ldr	r3, [pc, #456]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085f2:	4a70      	ldr	r2, [pc, #448]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 80085f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80085fa:	2380      	movs	r3, #128	; 0x80
 80085fc:	617b      	str	r3, [r7, #20]
 80085fe:	e024      	b.n	800864a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	2b02      	cmp	r3, #2
 8008606:	d107      	bne.n	8008618 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008608:	4b6a      	ldr	r3, [pc, #424]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d109      	bne.n	8008628 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e0c6      	b.n	80087a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008618:	4b66      	ldr	r3, [pc, #408]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008620:	2b00      	cmp	r3, #0
 8008622:	d101      	bne.n	8008628 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e0be      	b.n	80087a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008628:	f000 f8ce 	bl	80087c8 <HAL_RCC_GetSysClockFreq>
 800862c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	4a61      	ldr	r2, [pc, #388]	; (80087b8 <HAL_RCC_ClockConfig+0x268>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d909      	bls.n	800864a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008636:	4b5f      	ldr	r3, [pc, #380]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800863e:	4a5d      	ldr	r2, [pc, #372]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 8008640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008644:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008646:	2380      	movs	r3, #128	; 0x80
 8008648:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800864a:	4b5a      	ldr	r3, [pc, #360]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f023 0203 	bic.w	r2, r3, #3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	4957      	ldr	r1, [pc, #348]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 8008658:	4313      	orrs	r3, r2
 800865a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800865c:	f7fa fa4c 	bl	8002af8 <HAL_GetTick>
 8008660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008662:	e00a      	b.n	800867a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008664:	f7fa fa48 	bl	8002af8 <HAL_GetTick>
 8008668:	4602      	mov	r2, r0
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008672:	4293      	cmp	r3, r2
 8008674:	d901      	bls.n	800867a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e095      	b.n	80087a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800867a:	4b4e      	ldr	r3, [pc, #312]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f003 020c 	and.w	r2, r3, #12
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	429a      	cmp	r2, r3
 800868a:	d1eb      	bne.n	8008664 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 0302 	and.w	r3, r3, #2
 8008694:	2b00      	cmp	r3, #0
 8008696:	d023      	beq.n	80086e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 0304 	and.w	r3, r3, #4
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d005      	beq.n	80086b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80086a4:	4b43      	ldr	r3, [pc, #268]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	4a42      	ldr	r2, [pc, #264]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 80086aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80086ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 0308 	and.w	r3, r3, #8
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d007      	beq.n	80086cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80086bc:	4b3d      	ldr	r3, [pc, #244]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80086c4:	4a3b      	ldr	r2, [pc, #236]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 80086c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80086ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086cc:	4b39      	ldr	r3, [pc, #228]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	4936      	ldr	r1, [pc, #216]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 80086da:	4313      	orrs	r3, r2
 80086dc:	608b      	str	r3, [r1, #8]
 80086de:	e008      	b.n	80086f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	2b80      	cmp	r3, #128	; 0x80
 80086e4:	d105      	bne.n	80086f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80086e6:	4b33      	ldr	r3, [pc, #204]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	4a32      	ldr	r2, [pc, #200]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 80086ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80086f2:	4b2f      	ldr	r3, [pc, #188]	; (80087b0 <HAL_RCC_ClockConfig+0x260>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 030f 	and.w	r3, r3, #15
 80086fa:	683a      	ldr	r2, [r7, #0]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d21d      	bcs.n	800873c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008700:	4b2b      	ldr	r3, [pc, #172]	; (80087b0 <HAL_RCC_ClockConfig+0x260>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f023 020f 	bic.w	r2, r3, #15
 8008708:	4929      	ldr	r1, [pc, #164]	; (80087b0 <HAL_RCC_ClockConfig+0x260>)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	4313      	orrs	r3, r2
 800870e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008710:	f7fa f9f2 	bl	8002af8 <HAL_GetTick>
 8008714:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008716:	e00a      	b.n	800872e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008718:	f7fa f9ee 	bl	8002af8 <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	f241 3288 	movw	r2, #5000	; 0x1388
 8008726:	4293      	cmp	r3, r2
 8008728:	d901      	bls.n	800872e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e03b      	b.n	80087a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800872e:	4b20      	ldr	r3, [pc, #128]	; (80087b0 <HAL_RCC_ClockConfig+0x260>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 030f 	and.w	r3, r3, #15
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	429a      	cmp	r2, r3
 800873a:	d1ed      	bne.n	8008718 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 0304 	and.w	r3, r3, #4
 8008744:	2b00      	cmp	r3, #0
 8008746:	d008      	beq.n	800875a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008748:	4b1a      	ldr	r3, [pc, #104]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	4917      	ldr	r1, [pc, #92]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 8008756:	4313      	orrs	r3, r2
 8008758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 0308 	and.w	r3, r3, #8
 8008762:	2b00      	cmp	r3, #0
 8008764:	d009      	beq.n	800877a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008766:	4b13      	ldr	r3, [pc, #76]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	00db      	lsls	r3, r3, #3
 8008774:	490f      	ldr	r1, [pc, #60]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 8008776:	4313      	orrs	r3, r2
 8008778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800877a:	f000 f825 	bl	80087c8 <HAL_RCC_GetSysClockFreq>
 800877e:	4602      	mov	r2, r0
 8008780:	4b0c      	ldr	r3, [pc, #48]	; (80087b4 <HAL_RCC_ClockConfig+0x264>)
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	091b      	lsrs	r3, r3, #4
 8008786:	f003 030f 	and.w	r3, r3, #15
 800878a:	490c      	ldr	r1, [pc, #48]	; (80087bc <HAL_RCC_ClockConfig+0x26c>)
 800878c:	5ccb      	ldrb	r3, [r1, r3]
 800878e:	f003 031f 	and.w	r3, r3, #31
 8008792:	fa22 f303 	lsr.w	r3, r2, r3
 8008796:	4a0a      	ldr	r2, [pc, #40]	; (80087c0 <HAL_RCC_ClockConfig+0x270>)
 8008798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800879a:	4b0a      	ldr	r3, [pc, #40]	; (80087c4 <HAL_RCC_ClockConfig+0x274>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fa f95e 	bl	8002a60 <HAL_InitTick>
 80087a4:	4603      	mov	r3, r0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3718      	adds	r7, #24
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	40022000 	.word	0x40022000
 80087b4:	40021000 	.word	0x40021000
 80087b8:	04c4b400 	.word	0x04c4b400
 80087bc:	08011f60 	.word	0x08011f60
 80087c0:	2000000c 	.word	0x2000000c
 80087c4:	20000010 	.word	0x20000010

080087c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b087      	sub	sp, #28
 80087cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80087ce:	4b2c      	ldr	r3, [pc, #176]	; (8008880 <HAL_RCC_GetSysClockFreq+0xb8>)
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f003 030c 	and.w	r3, r3, #12
 80087d6:	2b04      	cmp	r3, #4
 80087d8:	d102      	bne.n	80087e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80087da:	4b2a      	ldr	r3, [pc, #168]	; (8008884 <HAL_RCC_GetSysClockFreq+0xbc>)
 80087dc:	613b      	str	r3, [r7, #16]
 80087de:	e047      	b.n	8008870 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80087e0:	4b27      	ldr	r3, [pc, #156]	; (8008880 <HAL_RCC_GetSysClockFreq+0xb8>)
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	f003 030c 	and.w	r3, r3, #12
 80087e8:	2b08      	cmp	r3, #8
 80087ea:	d102      	bne.n	80087f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80087ec:	4b26      	ldr	r3, [pc, #152]	; (8008888 <HAL_RCC_GetSysClockFreq+0xc0>)
 80087ee:	613b      	str	r3, [r7, #16]
 80087f0:	e03e      	b.n	8008870 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80087f2:	4b23      	ldr	r3, [pc, #140]	; (8008880 <HAL_RCC_GetSysClockFreq+0xb8>)
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f003 030c 	and.w	r3, r3, #12
 80087fa:	2b0c      	cmp	r3, #12
 80087fc:	d136      	bne.n	800886c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80087fe:	4b20      	ldr	r3, [pc, #128]	; (8008880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	f003 0303 	and.w	r3, r3, #3
 8008806:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008808:	4b1d      	ldr	r3, [pc, #116]	; (8008880 <HAL_RCC_GetSysClockFreq+0xb8>)
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	091b      	lsrs	r3, r3, #4
 800880e:	f003 030f 	and.w	r3, r3, #15
 8008812:	3301      	adds	r3, #1
 8008814:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2b03      	cmp	r3, #3
 800881a:	d10c      	bne.n	8008836 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800881c:	4a1a      	ldr	r2, [pc, #104]	; (8008888 <HAL_RCC_GetSysClockFreq+0xc0>)
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	fbb2 f3f3 	udiv	r3, r2, r3
 8008824:	4a16      	ldr	r2, [pc, #88]	; (8008880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008826:	68d2      	ldr	r2, [r2, #12]
 8008828:	0a12      	lsrs	r2, r2, #8
 800882a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800882e:	fb02 f303 	mul.w	r3, r2, r3
 8008832:	617b      	str	r3, [r7, #20]
      break;
 8008834:	e00c      	b.n	8008850 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008836:	4a13      	ldr	r2, [pc, #76]	; (8008884 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	fbb2 f3f3 	udiv	r3, r2, r3
 800883e:	4a10      	ldr	r2, [pc, #64]	; (8008880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008840:	68d2      	ldr	r2, [r2, #12]
 8008842:	0a12      	lsrs	r2, r2, #8
 8008844:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008848:	fb02 f303 	mul.w	r3, r2, r3
 800884c:	617b      	str	r3, [r7, #20]
      break;
 800884e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008850:	4b0b      	ldr	r3, [pc, #44]	; (8008880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	0e5b      	lsrs	r3, r3, #25
 8008856:	f003 0303 	and.w	r3, r3, #3
 800885a:	3301      	adds	r3, #1
 800885c:	005b      	lsls	r3, r3, #1
 800885e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008860:	697a      	ldr	r2, [r7, #20]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	fbb2 f3f3 	udiv	r3, r2, r3
 8008868:	613b      	str	r3, [r7, #16]
 800886a:	e001      	b.n	8008870 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800886c:	2300      	movs	r3, #0
 800886e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008870:	693b      	ldr	r3, [r7, #16]
}
 8008872:	4618      	mov	r0, r3
 8008874:	371c      	adds	r7, #28
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	40021000 	.word	0x40021000
 8008884:	00f42400 	.word	0x00f42400
 8008888:	007a1200 	.word	0x007a1200

0800888c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800888c:	b480      	push	{r7}
 800888e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008890:	4b03      	ldr	r3, [pc, #12]	; (80088a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008892:	681b      	ldr	r3, [r3, #0]
}
 8008894:	4618      	mov	r0, r3
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	2000000c 	.word	0x2000000c

080088a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b087      	sub	sp, #28
 80088a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80088aa:	4b1e      	ldr	r3, [pc, #120]	; (8008924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	f003 0303 	and.w	r3, r3, #3
 80088b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80088b4:	4b1b      	ldr	r3, [pc, #108]	; (8008924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	091b      	lsrs	r3, r3, #4
 80088ba:	f003 030f 	and.w	r3, r3, #15
 80088be:	3301      	adds	r3, #1
 80088c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	2b03      	cmp	r3, #3
 80088c6:	d10c      	bne.n	80088e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80088c8:	4a17      	ldr	r2, [pc, #92]	; (8008928 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d0:	4a14      	ldr	r2, [pc, #80]	; (8008924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80088d2:	68d2      	ldr	r2, [r2, #12]
 80088d4:	0a12      	lsrs	r2, r2, #8
 80088d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80088da:	fb02 f303 	mul.w	r3, r2, r3
 80088de:	617b      	str	r3, [r7, #20]
    break;
 80088e0:	e00c      	b.n	80088fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80088e2:	4a12      	ldr	r2, [pc, #72]	; (800892c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ea:	4a0e      	ldr	r2, [pc, #56]	; (8008924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80088ec:	68d2      	ldr	r2, [r2, #12]
 80088ee:	0a12      	lsrs	r2, r2, #8
 80088f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80088f4:	fb02 f303 	mul.w	r3, r2, r3
 80088f8:	617b      	str	r3, [r7, #20]
    break;
 80088fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80088fc:	4b09      	ldr	r3, [pc, #36]	; (8008924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	0e5b      	lsrs	r3, r3, #25
 8008902:	f003 0303 	and.w	r3, r3, #3
 8008906:	3301      	adds	r3, #1
 8008908:	005b      	lsls	r3, r3, #1
 800890a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800890c:	697a      	ldr	r2, [r7, #20]
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	fbb2 f3f3 	udiv	r3, r2, r3
 8008914:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008916:	687b      	ldr	r3, [r7, #4]
}
 8008918:	4618      	mov	r0, r3
 800891a:	371c      	adds	r7, #28
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr
 8008924:	40021000 	.word	0x40021000
 8008928:	007a1200 	.word	0x007a1200
 800892c:	00f42400 	.word	0x00f42400

08008930 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008938:	2300      	movs	r3, #0
 800893a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800893c:	2300      	movs	r3, #0
 800893e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008948:	2b00      	cmp	r3, #0
 800894a:	f000 8098 	beq.w	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800894e:	2300      	movs	r3, #0
 8008950:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008952:	4b43      	ldr	r3, [pc, #268]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10d      	bne.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800895e:	4b40      	ldr	r3, [pc, #256]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008962:	4a3f      	ldr	r2, [pc, #252]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008968:	6593      	str	r3, [r2, #88]	; 0x58
 800896a:	4b3d      	ldr	r3, [pc, #244]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800896c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800896e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008972:	60bb      	str	r3, [r7, #8]
 8008974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008976:	2301      	movs	r3, #1
 8008978:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800897a:	4b3a      	ldr	r3, [pc, #232]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a39      	ldr	r2, [pc, #228]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008984:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008986:	f7fa f8b7 	bl	8002af8 <HAL_GetTick>
 800898a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800898c:	e009      	b.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800898e:	f7fa f8b3 	bl	8002af8 <HAL_GetTick>
 8008992:	4602      	mov	r2, r0
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	2b02      	cmp	r3, #2
 800899a:	d902      	bls.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800899c:	2303      	movs	r3, #3
 800899e:	74fb      	strb	r3, [r7, #19]
        break;
 80089a0:	e005      	b.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80089a2:	4b30      	ldr	r3, [pc, #192]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d0ef      	beq.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80089ae:	7cfb      	ldrb	r3, [r7, #19]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d159      	bne.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80089b4:	4b2a      	ldr	r3, [pc, #168]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d01e      	beq.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d019      	beq.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80089d0:	4b23      	ldr	r3, [pc, #140]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80089dc:	4b20      	ldr	r3, [pc, #128]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089e2:	4a1f      	ldr	r2, [pc, #124]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089ec:	4b1c      	ldr	r3, [pc, #112]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089f2:	4a1b      	ldr	r2, [pc, #108]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80089fc:	4a18      	ldr	r2, [pc, #96]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	f003 0301 	and.w	r3, r3, #1
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d016      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a0e:	f7fa f873 	bl	8002af8 <HAL_GetTick>
 8008a12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a14:	e00b      	b.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a16:	f7fa f86f 	bl	8002af8 <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d902      	bls.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	74fb      	strb	r3, [r7, #19]
            break;
 8008a2c:	e006      	b.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a2e:	4b0c      	ldr	r3, [pc, #48]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a34:	f003 0302 	and.w	r3, r3, #2
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d0ec      	beq.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008a3c:	7cfb      	ldrb	r3, [r7, #19]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10b      	bne.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a42:	4b07      	ldr	r3, [pc, #28]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a50:	4903      	ldr	r1, [pc, #12]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008a58:	e008      	b.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a5a:	7cfb      	ldrb	r3, [r7, #19]
 8008a5c:	74bb      	strb	r3, [r7, #18]
 8008a5e:	e005      	b.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008a60:	40021000 	.word	0x40021000
 8008a64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a68:	7cfb      	ldrb	r3, [r7, #19]
 8008a6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a6c:	7c7b      	ldrb	r3, [r7, #17]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d105      	bne.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a72:	4ba7      	ldr	r3, [pc, #668]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a76:	4aa6      	ldr	r2, [pc, #664]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a7c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 0301 	and.w	r3, r3, #1
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00a      	beq.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a8a:	4ba1      	ldr	r3, [pc, #644]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a90:	f023 0203 	bic.w	r2, r3, #3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	499d      	ldr	r1, [pc, #628]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 0302 	and.w	r3, r3, #2
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00a      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008aac:	4b98      	ldr	r3, [pc, #608]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ab2:	f023 020c 	bic.w	r2, r3, #12
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	4995      	ldr	r1, [pc, #596]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008abc:	4313      	orrs	r3, r2
 8008abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 0304 	and.w	r3, r3, #4
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00a      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008ace:	4b90      	ldr	r3, [pc, #576]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ad4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	498c      	ldr	r1, [pc, #560]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0308 	and.w	r3, r3, #8
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00a      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008af0:	4b87      	ldr	r3, [pc, #540]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008af6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	4984      	ldr	r1, [pc, #528]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b00:	4313      	orrs	r3, r2
 8008b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 0310 	and.w	r3, r3, #16
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00a      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008b12:	4b7f      	ldr	r3, [pc, #508]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	695b      	ldr	r3, [r3, #20]
 8008b20:	497b      	ldr	r1, [pc, #492]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b22:	4313      	orrs	r3, r2
 8008b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0320 	and.w	r3, r3, #32
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00a      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b34:	4b76      	ldr	r3, [pc, #472]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	699b      	ldr	r3, [r3, #24]
 8008b42:	4973      	ldr	r1, [pc, #460]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b44:	4313      	orrs	r3, r2
 8008b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00a      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008b56:	4b6e      	ldr	r3, [pc, #440]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	69db      	ldr	r3, [r3, #28]
 8008b64:	496a      	ldr	r1, [pc, #424]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b66:	4313      	orrs	r3, r2
 8008b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00a      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008b78:	4b65      	ldr	r3, [pc, #404]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	4962      	ldr	r1, [pc, #392]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00a      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008b9a:	4b5d      	ldr	r3, [pc, #372]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ba0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba8:	4959      	ldr	r1, [pc, #356]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008baa:	4313      	orrs	r3, r2
 8008bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00a      	beq.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008bbc:	4b54      	ldr	r3, [pc, #336]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008bc2:	f023 0203 	bic.w	r2, r3, #3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bca:	4951      	ldr	r1, [pc, #324]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00a      	beq.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008bde:	4b4c      	ldr	r3, [pc, #304]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008be4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bec:	4948      	ldr	r1, [pc, #288]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d015      	beq.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c00:	4b43      	ldr	r3, [pc, #268]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0e:	4940      	ldr	r1, [pc, #256]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c10:	4313      	orrs	r3, r2
 8008c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c1e:	d105      	bne.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c20:	4b3b      	ldr	r3, [pc, #236]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	4a3a      	ldr	r2, [pc, #232]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c2a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d015      	beq.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008c38:	4b35      	ldr	r3, [pc, #212]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c46:	4932      	ldr	r1, [pc, #200]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c56:	d105      	bne.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c58:	4b2d      	ldr	r3, [pc, #180]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	4a2c      	ldr	r2, [pc, #176]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c62:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d015      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008c70:	4b27      	ldr	r3, [pc, #156]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7e:	4924      	ldr	r1, [pc, #144]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c80:	4313      	orrs	r3, r2
 8008c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c8e:	d105      	bne.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c90:	4b1f      	ldr	r3, [pc, #124]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	4a1e      	ldr	r2, [pc, #120]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c9a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d015      	beq.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ca8:	4b19      	ldr	r3, [pc, #100]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb6:	4916      	ldr	r1, [pc, #88]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cc6:	d105      	bne.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008cc8:	4b11      	ldr	r3, [pc, #68]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	4a10      	ldr	r2, [pc, #64]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cd2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d019      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008ce0:	4b0b      	ldr	r3, [pc, #44]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ce6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cee:	4908      	ldr	r1, [pc, #32]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cfe:	d109      	bne.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d00:	4b03      	ldr	r3, [pc, #12]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	4a02      	ldr	r2, [pc, #8]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d0a:	60d3      	str	r3, [r2, #12]
 8008d0c:	e002      	b.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008d0e:	bf00      	nop
 8008d10:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d015      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008d20:	4b29      	ldr	r3, [pc, #164]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d2e:	4926      	ldr	r1, [pc, #152]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d30:	4313      	orrs	r3, r2
 8008d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d3e:	d105      	bne.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008d40:	4b21      	ldr	r3, [pc, #132]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	4a20      	ldr	r2, [pc, #128]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d4a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d015      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008d58:	4b1b      	ldr	r3, [pc, #108]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d5e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d66:	4918      	ldr	r1, [pc, #96]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d76:	d105      	bne.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008d78:	4b13      	ldr	r3, [pc, #76]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	4a12      	ldr	r2, [pc, #72]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d82:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d015      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008d90:	4b0d      	ldr	r3, [pc, #52]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008d96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d9e:	490a      	ldr	r1, [pc, #40]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008da0:	4313      	orrs	r3, r2
 8008da2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008daa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dae:	d105      	bne.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008db0:	4b05      	ldr	r3, [pc, #20]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	4a04      	ldr	r2, [pc, #16]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008db6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008dba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008dbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3718      	adds	r7, #24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	40021000 	.word	0x40021000

08008dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e049      	b.n	8008e72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d106      	bne.n	8008df8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7f9 fc7e 	bl	80026f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	3304      	adds	r3, #4
 8008e08:	4619      	mov	r1, r3
 8008e0a:	4610      	mov	r0, r2
 8008e0c:	f000 f9f4 	bl	80091f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
	...

08008e7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d001      	beq.n	8008e94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	e054      	b.n	8008f3e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2202      	movs	r2, #2
 8008e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68da      	ldr	r2, [r3, #12]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f042 0201 	orr.w	r2, r2, #1
 8008eaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a26      	ldr	r2, [pc, #152]	; (8008f4c <HAL_TIM_Base_Start_IT+0xd0>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d022      	beq.n	8008efc <HAL_TIM_Base_Start_IT+0x80>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ebe:	d01d      	beq.n	8008efc <HAL_TIM_Base_Start_IT+0x80>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a22      	ldr	r2, [pc, #136]	; (8008f50 <HAL_TIM_Base_Start_IT+0xd4>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d018      	beq.n	8008efc <HAL_TIM_Base_Start_IT+0x80>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a21      	ldr	r2, [pc, #132]	; (8008f54 <HAL_TIM_Base_Start_IT+0xd8>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d013      	beq.n	8008efc <HAL_TIM_Base_Start_IT+0x80>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a1f      	ldr	r2, [pc, #124]	; (8008f58 <HAL_TIM_Base_Start_IT+0xdc>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d00e      	beq.n	8008efc <HAL_TIM_Base_Start_IT+0x80>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a1e      	ldr	r2, [pc, #120]	; (8008f5c <HAL_TIM_Base_Start_IT+0xe0>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d009      	beq.n	8008efc <HAL_TIM_Base_Start_IT+0x80>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a1c      	ldr	r2, [pc, #112]	; (8008f60 <HAL_TIM_Base_Start_IT+0xe4>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d004      	beq.n	8008efc <HAL_TIM_Base_Start_IT+0x80>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a1b      	ldr	r2, [pc, #108]	; (8008f64 <HAL_TIM_Base_Start_IT+0xe8>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d115      	bne.n	8008f28 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	689a      	ldr	r2, [r3, #8]
 8008f02:	4b19      	ldr	r3, [pc, #100]	; (8008f68 <HAL_TIM_Base_Start_IT+0xec>)
 8008f04:	4013      	ands	r3, r2
 8008f06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2b06      	cmp	r3, #6
 8008f0c:	d015      	beq.n	8008f3a <HAL_TIM_Base_Start_IT+0xbe>
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f14:	d011      	beq.n	8008f3a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f042 0201 	orr.w	r2, r2, #1
 8008f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f26:	e008      	b.n	8008f3a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f042 0201 	orr.w	r2, r2, #1
 8008f36:	601a      	str	r2, [r3, #0]
 8008f38:	e000      	b.n	8008f3c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3714      	adds	r7, #20
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	40012c00 	.word	0x40012c00
 8008f50:	40000400 	.word	0x40000400
 8008f54:	40000800 	.word	0x40000800
 8008f58:	40000c00 	.word	0x40000c00
 8008f5c:	40013400 	.word	0x40013400
 8008f60:	40014000 	.word	0x40014000
 8008f64:	40015000 	.word	0x40015000
 8008f68:	00010007 	.word	0x00010007

08008f6c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68da      	ldr	r2, [r3, #12]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f022 0201 	bic.w	r2, r2, #1
 8008f82:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	6a1a      	ldr	r2, [r3, #32]
 8008f8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8008f8e:	4013      	ands	r3, r2
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10f      	bne.n	8008fb4 <HAL_TIM_Base_Stop_IT+0x48>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6a1a      	ldr	r2, [r3, #32]
 8008f9a:	f244 4344 	movw	r3, #17476	; 0x4444
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d107      	bne.n	8008fb4 <HAL_TIM_Base_Stop_IT+0x48>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f022 0201 	bic.w	r2, r2, #1
 8008fb2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	370c      	adds	r7, #12
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
	...

08008fcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d101      	bne.n	8008fe8 <HAL_TIM_ConfigClockSource+0x1c>
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	e0f6      	b.n	80091d6 <HAL_TIM_ConfigClockSource+0x20a>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009006:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800900a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009012:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a6f      	ldr	r2, [pc, #444]	; (80091e0 <HAL_TIM_ConfigClockSource+0x214>)
 8009022:	4293      	cmp	r3, r2
 8009024:	f000 80c1 	beq.w	80091aa <HAL_TIM_ConfigClockSource+0x1de>
 8009028:	4a6d      	ldr	r2, [pc, #436]	; (80091e0 <HAL_TIM_ConfigClockSource+0x214>)
 800902a:	4293      	cmp	r3, r2
 800902c:	f200 80c6 	bhi.w	80091bc <HAL_TIM_ConfigClockSource+0x1f0>
 8009030:	4a6c      	ldr	r2, [pc, #432]	; (80091e4 <HAL_TIM_ConfigClockSource+0x218>)
 8009032:	4293      	cmp	r3, r2
 8009034:	f000 80b9 	beq.w	80091aa <HAL_TIM_ConfigClockSource+0x1de>
 8009038:	4a6a      	ldr	r2, [pc, #424]	; (80091e4 <HAL_TIM_ConfigClockSource+0x218>)
 800903a:	4293      	cmp	r3, r2
 800903c:	f200 80be 	bhi.w	80091bc <HAL_TIM_ConfigClockSource+0x1f0>
 8009040:	4a69      	ldr	r2, [pc, #420]	; (80091e8 <HAL_TIM_ConfigClockSource+0x21c>)
 8009042:	4293      	cmp	r3, r2
 8009044:	f000 80b1 	beq.w	80091aa <HAL_TIM_ConfigClockSource+0x1de>
 8009048:	4a67      	ldr	r2, [pc, #412]	; (80091e8 <HAL_TIM_ConfigClockSource+0x21c>)
 800904a:	4293      	cmp	r3, r2
 800904c:	f200 80b6 	bhi.w	80091bc <HAL_TIM_ConfigClockSource+0x1f0>
 8009050:	4a66      	ldr	r2, [pc, #408]	; (80091ec <HAL_TIM_ConfigClockSource+0x220>)
 8009052:	4293      	cmp	r3, r2
 8009054:	f000 80a9 	beq.w	80091aa <HAL_TIM_ConfigClockSource+0x1de>
 8009058:	4a64      	ldr	r2, [pc, #400]	; (80091ec <HAL_TIM_ConfigClockSource+0x220>)
 800905a:	4293      	cmp	r3, r2
 800905c:	f200 80ae 	bhi.w	80091bc <HAL_TIM_ConfigClockSource+0x1f0>
 8009060:	4a63      	ldr	r2, [pc, #396]	; (80091f0 <HAL_TIM_ConfigClockSource+0x224>)
 8009062:	4293      	cmp	r3, r2
 8009064:	f000 80a1 	beq.w	80091aa <HAL_TIM_ConfigClockSource+0x1de>
 8009068:	4a61      	ldr	r2, [pc, #388]	; (80091f0 <HAL_TIM_ConfigClockSource+0x224>)
 800906a:	4293      	cmp	r3, r2
 800906c:	f200 80a6 	bhi.w	80091bc <HAL_TIM_ConfigClockSource+0x1f0>
 8009070:	4a60      	ldr	r2, [pc, #384]	; (80091f4 <HAL_TIM_ConfigClockSource+0x228>)
 8009072:	4293      	cmp	r3, r2
 8009074:	f000 8099 	beq.w	80091aa <HAL_TIM_ConfigClockSource+0x1de>
 8009078:	4a5e      	ldr	r2, [pc, #376]	; (80091f4 <HAL_TIM_ConfigClockSource+0x228>)
 800907a:	4293      	cmp	r3, r2
 800907c:	f200 809e 	bhi.w	80091bc <HAL_TIM_ConfigClockSource+0x1f0>
 8009080:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009084:	f000 8091 	beq.w	80091aa <HAL_TIM_ConfigClockSource+0x1de>
 8009088:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800908c:	f200 8096 	bhi.w	80091bc <HAL_TIM_ConfigClockSource+0x1f0>
 8009090:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009094:	f000 8089 	beq.w	80091aa <HAL_TIM_ConfigClockSource+0x1de>
 8009098:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800909c:	f200 808e 	bhi.w	80091bc <HAL_TIM_ConfigClockSource+0x1f0>
 80090a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090a4:	d03e      	beq.n	8009124 <HAL_TIM_ConfigClockSource+0x158>
 80090a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090aa:	f200 8087 	bhi.w	80091bc <HAL_TIM_ConfigClockSource+0x1f0>
 80090ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090b2:	f000 8086 	beq.w	80091c2 <HAL_TIM_ConfigClockSource+0x1f6>
 80090b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090ba:	d87f      	bhi.n	80091bc <HAL_TIM_ConfigClockSource+0x1f0>
 80090bc:	2b70      	cmp	r3, #112	; 0x70
 80090be:	d01a      	beq.n	80090f6 <HAL_TIM_ConfigClockSource+0x12a>
 80090c0:	2b70      	cmp	r3, #112	; 0x70
 80090c2:	d87b      	bhi.n	80091bc <HAL_TIM_ConfigClockSource+0x1f0>
 80090c4:	2b60      	cmp	r3, #96	; 0x60
 80090c6:	d050      	beq.n	800916a <HAL_TIM_ConfigClockSource+0x19e>
 80090c8:	2b60      	cmp	r3, #96	; 0x60
 80090ca:	d877      	bhi.n	80091bc <HAL_TIM_ConfigClockSource+0x1f0>
 80090cc:	2b50      	cmp	r3, #80	; 0x50
 80090ce:	d03c      	beq.n	800914a <HAL_TIM_ConfigClockSource+0x17e>
 80090d0:	2b50      	cmp	r3, #80	; 0x50
 80090d2:	d873      	bhi.n	80091bc <HAL_TIM_ConfigClockSource+0x1f0>
 80090d4:	2b40      	cmp	r3, #64	; 0x40
 80090d6:	d058      	beq.n	800918a <HAL_TIM_ConfigClockSource+0x1be>
 80090d8:	2b40      	cmp	r3, #64	; 0x40
 80090da:	d86f      	bhi.n	80091bc <HAL_TIM_ConfigClockSource+0x1f0>
 80090dc:	2b30      	cmp	r3, #48	; 0x30
 80090de:	d064      	beq.n	80091aa <HAL_TIM_ConfigClockSource+0x1de>
 80090e0:	2b30      	cmp	r3, #48	; 0x30
 80090e2:	d86b      	bhi.n	80091bc <HAL_TIM_ConfigClockSource+0x1f0>
 80090e4:	2b20      	cmp	r3, #32
 80090e6:	d060      	beq.n	80091aa <HAL_TIM_ConfigClockSource+0x1de>
 80090e8:	2b20      	cmp	r3, #32
 80090ea:	d867      	bhi.n	80091bc <HAL_TIM_ConfigClockSource+0x1f0>
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d05c      	beq.n	80091aa <HAL_TIM_ConfigClockSource+0x1de>
 80090f0:	2b10      	cmp	r3, #16
 80090f2:	d05a      	beq.n	80091aa <HAL_TIM_ConfigClockSource+0x1de>
 80090f4:	e062      	b.n	80091bc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009106:	f000 f9a7 	bl	8009458 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009118:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68ba      	ldr	r2, [r7, #8]
 8009120:	609a      	str	r2, [r3, #8]
      break;
 8009122:	e04f      	b.n	80091c4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009134:	f000 f990 	bl	8009458 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	689a      	ldr	r2, [r3, #8]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009146:	609a      	str	r2, [r3, #8]
      break;
 8009148:	e03c      	b.n	80091c4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009156:	461a      	mov	r2, r3
 8009158:	f000 f902 	bl	8009360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2150      	movs	r1, #80	; 0x50
 8009162:	4618      	mov	r0, r3
 8009164:	f000 f95b 	bl	800941e <TIM_ITRx_SetConfig>
      break;
 8009168:	e02c      	b.n	80091c4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009176:	461a      	mov	r2, r3
 8009178:	f000 f921 	bl	80093be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2160      	movs	r1, #96	; 0x60
 8009182:	4618      	mov	r0, r3
 8009184:	f000 f94b 	bl	800941e <TIM_ITRx_SetConfig>
      break;
 8009188:	e01c      	b.n	80091c4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009196:	461a      	mov	r2, r3
 8009198:	f000 f8e2 	bl	8009360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2140      	movs	r1, #64	; 0x40
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 f93b 	bl	800941e <TIM_ITRx_SetConfig>
      break;
 80091a8:	e00c      	b.n	80091c4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4619      	mov	r1, r3
 80091b4:	4610      	mov	r0, r2
 80091b6:	f000 f932 	bl	800941e <TIM_ITRx_SetConfig>
      break;
 80091ba:	e003      	b.n	80091c4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	73fb      	strb	r3, [r7, #15]
      break;
 80091c0:	e000      	b.n	80091c4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80091c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	00100070 	.word	0x00100070
 80091e4:	00100060 	.word	0x00100060
 80091e8:	00100050 	.word	0x00100050
 80091ec:	00100040 	.word	0x00100040
 80091f0:	00100030 	.word	0x00100030
 80091f4:	00100020 	.word	0x00100020

080091f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a4c      	ldr	r2, [pc, #304]	; (800933c <TIM_Base_SetConfig+0x144>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d017      	beq.n	8009240 <TIM_Base_SetConfig+0x48>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009216:	d013      	beq.n	8009240 <TIM_Base_SetConfig+0x48>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a49      	ldr	r2, [pc, #292]	; (8009340 <TIM_Base_SetConfig+0x148>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d00f      	beq.n	8009240 <TIM_Base_SetConfig+0x48>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a48      	ldr	r2, [pc, #288]	; (8009344 <TIM_Base_SetConfig+0x14c>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d00b      	beq.n	8009240 <TIM_Base_SetConfig+0x48>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a47      	ldr	r2, [pc, #284]	; (8009348 <TIM_Base_SetConfig+0x150>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d007      	beq.n	8009240 <TIM_Base_SetConfig+0x48>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a46      	ldr	r2, [pc, #280]	; (800934c <TIM_Base_SetConfig+0x154>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d003      	beq.n	8009240 <TIM_Base_SetConfig+0x48>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a45      	ldr	r2, [pc, #276]	; (8009350 <TIM_Base_SetConfig+0x158>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d108      	bne.n	8009252 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	4313      	orrs	r3, r2
 8009250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a39      	ldr	r2, [pc, #228]	; (800933c <TIM_Base_SetConfig+0x144>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d023      	beq.n	80092a2 <TIM_Base_SetConfig+0xaa>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009260:	d01f      	beq.n	80092a2 <TIM_Base_SetConfig+0xaa>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a36      	ldr	r2, [pc, #216]	; (8009340 <TIM_Base_SetConfig+0x148>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d01b      	beq.n	80092a2 <TIM_Base_SetConfig+0xaa>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a35      	ldr	r2, [pc, #212]	; (8009344 <TIM_Base_SetConfig+0x14c>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d017      	beq.n	80092a2 <TIM_Base_SetConfig+0xaa>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a34      	ldr	r2, [pc, #208]	; (8009348 <TIM_Base_SetConfig+0x150>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d013      	beq.n	80092a2 <TIM_Base_SetConfig+0xaa>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a33      	ldr	r2, [pc, #204]	; (800934c <TIM_Base_SetConfig+0x154>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d00f      	beq.n	80092a2 <TIM_Base_SetConfig+0xaa>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a33      	ldr	r2, [pc, #204]	; (8009354 <TIM_Base_SetConfig+0x15c>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d00b      	beq.n	80092a2 <TIM_Base_SetConfig+0xaa>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a32      	ldr	r2, [pc, #200]	; (8009358 <TIM_Base_SetConfig+0x160>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d007      	beq.n	80092a2 <TIM_Base_SetConfig+0xaa>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a31      	ldr	r2, [pc, #196]	; (800935c <TIM_Base_SetConfig+0x164>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d003      	beq.n	80092a2 <TIM_Base_SetConfig+0xaa>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4a2c      	ldr	r2, [pc, #176]	; (8009350 <TIM_Base_SetConfig+0x158>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d108      	bne.n	80092b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	695b      	ldr	r3, [r3, #20]
 80092be:	4313      	orrs	r3, r2
 80092c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	689a      	ldr	r2, [r3, #8]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a18      	ldr	r2, [pc, #96]	; (800933c <TIM_Base_SetConfig+0x144>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d013      	beq.n	8009308 <TIM_Base_SetConfig+0x110>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a1a      	ldr	r2, [pc, #104]	; (800934c <TIM_Base_SetConfig+0x154>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d00f      	beq.n	8009308 <TIM_Base_SetConfig+0x110>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4a1a      	ldr	r2, [pc, #104]	; (8009354 <TIM_Base_SetConfig+0x15c>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d00b      	beq.n	8009308 <TIM_Base_SetConfig+0x110>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a19      	ldr	r2, [pc, #100]	; (8009358 <TIM_Base_SetConfig+0x160>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d007      	beq.n	8009308 <TIM_Base_SetConfig+0x110>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a18      	ldr	r2, [pc, #96]	; (800935c <TIM_Base_SetConfig+0x164>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d003      	beq.n	8009308 <TIM_Base_SetConfig+0x110>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4a13      	ldr	r2, [pc, #76]	; (8009350 <TIM_Base_SetConfig+0x158>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d103      	bne.n	8009310 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	691a      	ldr	r2, [r3, #16]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	f003 0301 	and.w	r3, r3, #1
 800931e:	2b01      	cmp	r3, #1
 8009320:	d105      	bne.n	800932e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	f023 0201 	bic.w	r2, r3, #1
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	611a      	str	r2, [r3, #16]
  }
}
 800932e:	bf00      	nop
 8009330:	3714      	adds	r7, #20
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	40012c00 	.word	0x40012c00
 8009340:	40000400 	.word	0x40000400
 8009344:	40000800 	.word	0x40000800
 8009348:	40000c00 	.word	0x40000c00
 800934c:	40013400 	.word	0x40013400
 8009350:	40015000 	.word	0x40015000
 8009354:	40014000 	.word	0x40014000
 8009358:	40014400 	.word	0x40014400
 800935c:	40014800 	.word	0x40014800

08009360 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009360:	b480      	push	{r7}
 8009362:	b087      	sub	sp, #28
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6a1b      	ldr	r3, [r3, #32]
 8009370:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	f023 0201 	bic.w	r2, r3, #1
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	699b      	ldr	r3, [r3, #24]
 8009382:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800938a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	011b      	lsls	r3, r3, #4
 8009390:	693a      	ldr	r2, [r7, #16]
 8009392:	4313      	orrs	r3, r2
 8009394:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f023 030a 	bic.w	r3, r3, #10
 800939c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800939e:	697a      	ldr	r2, [r7, #20]
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	693a      	ldr	r2, [r7, #16]
 80093aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	697a      	ldr	r2, [r7, #20]
 80093b0:	621a      	str	r2, [r3, #32]
}
 80093b2:	bf00      	nop
 80093b4:	371c      	adds	r7, #28
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr

080093be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093be:	b480      	push	{r7}
 80093c0:	b087      	sub	sp, #28
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	60f8      	str	r0, [r7, #12]
 80093c6:	60b9      	str	r1, [r7, #8]
 80093c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6a1b      	ldr	r3, [r3, #32]
 80093ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6a1b      	ldr	r3, [r3, #32]
 80093d4:	f023 0210 	bic.w	r2, r3, #16
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80093e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	031b      	lsls	r3, r3, #12
 80093ee:	693a      	ldr	r2, [r7, #16]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80093fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	011b      	lsls	r3, r3, #4
 8009400:	697a      	ldr	r2, [r7, #20]
 8009402:	4313      	orrs	r3, r2
 8009404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	693a      	ldr	r2, [r7, #16]
 800940a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	697a      	ldr	r2, [r7, #20]
 8009410:	621a      	str	r2, [r3, #32]
}
 8009412:	bf00      	nop
 8009414:	371c      	adds	r7, #28
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800941e:	b480      	push	{r7}
 8009420:	b085      	sub	sp, #20
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009438:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800943a:	683a      	ldr	r2, [r7, #0]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	4313      	orrs	r3, r2
 8009440:	f043 0307 	orr.w	r3, r3, #7
 8009444:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	609a      	str	r2, [r3, #8]
}
 800944c:	bf00      	nop
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009458:	b480      	push	{r7}
 800945a:	b087      	sub	sp, #28
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
 8009464:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009472:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	021a      	lsls	r2, r3, #8
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	431a      	orrs	r2, r3
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	4313      	orrs	r3, r2
 8009480:	697a      	ldr	r2, [r7, #20]
 8009482:	4313      	orrs	r3, r2
 8009484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	697a      	ldr	r2, [r7, #20]
 800948a:	609a      	str	r2, [r3, #8]
}
 800948c:	bf00      	nop
 800948e:	371c      	adds	r7, #28
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d101      	bne.n	80094b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094ac:	2302      	movs	r3, #2
 80094ae:	e074      	b.n	800959a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2202      	movs	r2, #2
 80094bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a34      	ldr	r2, [pc, #208]	; (80095a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d009      	beq.n	80094ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a33      	ldr	r2, [pc, #204]	; (80095ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d004      	beq.n	80094ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a31      	ldr	r2, [pc, #196]	; (80095b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d108      	bne.n	8009500 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80094f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800950a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	4313      	orrs	r3, r2
 8009514:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a21      	ldr	r2, [pc, #132]	; (80095a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d022      	beq.n	800956e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009530:	d01d      	beq.n	800956e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a1f      	ldr	r2, [pc, #124]	; (80095b4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d018      	beq.n	800956e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a1d      	ldr	r2, [pc, #116]	; (80095b8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d013      	beq.n	800956e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a1c      	ldr	r2, [pc, #112]	; (80095bc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d00e      	beq.n	800956e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a15      	ldr	r2, [pc, #84]	; (80095ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d009      	beq.n	800956e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a18      	ldr	r2, [pc, #96]	; (80095c0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d004      	beq.n	800956e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a11      	ldr	r2, [pc, #68]	; (80095b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d10c      	bne.n	8009588 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009574:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	4313      	orrs	r3, r2
 800957e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68ba      	ldr	r2, [r7, #8]
 8009586:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3714      	adds	r7, #20
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop
 80095a8:	40012c00 	.word	0x40012c00
 80095ac:	40013400 	.word	0x40013400
 80095b0:	40015000 	.word	0x40015000
 80095b4:	40000400 	.word	0x40000400
 80095b8:	40000800 	.word	0x40000800
 80095bc:	40000c00 	.word	0x40000c00
 80095c0:	40014000 	.word	0x40014000

080095c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80095d4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80095d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	b29a      	uxth	r2, r3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3714      	adds	r7, #20
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80095f2:	b480      	push	{r7}
 80095f4:	b085      	sub	sp, #20
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80095fa:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80095fe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009606:	b29a      	uxth	r2, r3
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	b29b      	uxth	r3, r3
 800960c:	43db      	mvns	r3, r3
 800960e:	b29b      	uxth	r3, r3
 8009610:	4013      	ands	r3, r2
 8009612:	b29a      	uxth	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3714      	adds	r7, #20
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	1d3b      	adds	r3, r7, #4
 8009632:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2201      	movs	r2, #1
 800963a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2200      	movs	r2, #0
 8009642:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3714      	adds	r7, #20
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009664:	b480      	push	{r7}
 8009666:	b09d      	sub	sp, #116	; 0x74
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	4413      	add	r3, r2
 800967e:	881b      	ldrh	r3, [r3, #0]
 8009680:	b29b      	uxth	r3, r3
 8009682:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800968a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	78db      	ldrb	r3, [r3, #3]
 8009692:	2b03      	cmp	r3, #3
 8009694:	d81f      	bhi.n	80096d6 <USB_ActivateEndpoint+0x72>
 8009696:	a201      	add	r2, pc, #4	; (adr r2, 800969c <USB_ActivateEndpoint+0x38>)
 8009698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969c:	080096ad 	.word	0x080096ad
 80096a0:	080096c9 	.word	0x080096c9
 80096a4:	080096df 	.word	0x080096df
 80096a8:	080096bb 	.word	0x080096bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80096ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80096b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80096b8:	e012      	b.n	80096e0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80096ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096be:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80096c2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80096c6:	e00b      	b.n	80096e0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80096c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80096d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80096d4:	e004      	b.n	80096e0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80096dc:	e000      	b.n	80096e0 <USB_ActivateEndpoint+0x7c>
      break;
 80096de:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	441a      	add	r2, r3
 80096ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096fe:	b29b      	uxth	r3, r3
 8009700:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	4413      	add	r3, r2
 800970c:	881b      	ldrh	r3, [r3, #0]
 800970e:	b29b      	uxth	r3, r3
 8009710:	b21b      	sxth	r3, r3
 8009712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800971a:	b21a      	sxth	r2, r3
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	b21b      	sxth	r3, r3
 8009722:	4313      	orrs	r3, r2
 8009724:	b21b      	sxth	r3, r3
 8009726:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	441a      	add	r2, r3
 8009734:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800973c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009748:	b29b      	uxth	r3, r3
 800974a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	7b1b      	ldrb	r3, [r3, #12]
 8009750:	2b00      	cmp	r3, #0
 8009752:	f040 8178 	bne.w	8009a46 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	785b      	ldrb	r3, [r3, #1]
 800975a:	2b00      	cmp	r3, #0
 800975c:	f000 8084 	beq.w	8009868 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	61bb      	str	r3, [r7, #24]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800976a:	b29b      	uxth	r3, r3
 800976c:	461a      	mov	r2, r3
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	4413      	add	r3, r2
 8009772:	61bb      	str	r3, [r7, #24]
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	00da      	lsls	r2, r3, #3
 800977a:	69bb      	ldr	r3, [r7, #24]
 800977c:	4413      	add	r3, r2
 800977e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009782:	617b      	str	r3, [r7, #20]
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	88db      	ldrh	r3, [r3, #6]
 8009788:	085b      	lsrs	r3, r3, #1
 800978a:	b29b      	uxth	r3, r3
 800978c:	005b      	lsls	r3, r3, #1
 800978e:	b29a      	uxth	r2, r3
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	4413      	add	r3, r2
 800979e:	881b      	ldrh	r3, [r3, #0]
 80097a0:	827b      	strh	r3, [r7, #18]
 80097a2:	8a7b      	ldrh	r3, [r7, #18]
 80097a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d01b      	beq.n	80097e4 <USB_ActivateEndpoint+0x180>
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	4413      	add	r3, r2
 80097b6:	881b      	ldrh	r3, [r3, #0]
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097c2:	823b      	strh	r3, [r7, #16]
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	441a      	add	r2, r3
 80097ce:	8a3b      	ldrh	r3, [r7, #16]
 80097d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	78db      	ldrb	r3, [r3, #3]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d020      	beq.n	800982e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	4413      	add	r3, r2
 80097f6:	881b      	ldrh	r3, [r3, #0]
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009802:	81bb      	strh	r3, [r7, #12]
 8009804:	89bb      	ldrh	r3, [r7, #12]
 8009806:	f083 0320 	eor.w	r3, r3, #32
 800980a:	81bb      	strh	r3, [r7, #12]
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	441a      	add	r2, r3
 8009816:	89bb      	ldrh	r3, [r7, #12]
 8009818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800981c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009828:	b29b      	uxth	r3, r3
 800982a:	8013      	strh	r3, [r2, #0]
 800982c:	e2d5      	b.n	8009dda <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	4413      	add	r3, r2
 8009838:	881b      	ldrh	r3, [r3, #0]
 800983a:	b29b      	uxth	r3, r3
 800983c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009844:	81fb      	strh	r3, [r7, #14]
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	441a      	add	r2, r3
 8009850:	89fb      	ldrh	r3, [r7, #14]
 8009852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009856:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800985a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800985e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009862:	b29b      	uxth	r3, r3
 8009864:	8013      	strh	r3, [r2, #0]
 8009866:	e2b8      	b.n	8009dda <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	633b      	str	r3, [r7, #48]	; 0x30
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009872:	b29b      	uxth	r3, r3
 8009874:	461a      	mov	r2, r3
 8009876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009878:	4413      	add	r3, r2
 800987a:	633b      	str	r3, [r7, #48]	; 0x30
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	00da      	lsls	r2, r3, #3
 8009882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009884:	4413      	add	r3, r2
 8009886:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800988a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	88db      	ldrh	r3, [r3, #6]
 8009890:	085b      	lsrs	r3, r3, #1
 8009892:	b29b      	uxth	r3, r3
 8009894:	005b      	lsls	r3, r3, #1
 8009896:	b29a      	uxth	r2, r3
 8009898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	62bb      	str	r3, [r7, #40]	; 0x28
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	461a      	mov	r2, r3
 80098aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ac:	4413      	add	r3, r2
 80098ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	00da      	lsls	r2, r3, #3
 80098b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b8:	4413      	add	r3, r2
 80098ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80098be:	627b      	str	r3, [r7, #36]	; 0x24
 80098c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c2:	881b      	ldrh	r3, [r3, #0]
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ce:	801a      	strh	r2, [r3, #0]
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	2b3e      	cmp	r3, #62	; 0x3e
 80098d6:	d91d      	bls.n	8009914 <USB_ActivateEndpoint+0x2b0>
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	095b      	lsrs	r3, r3, #5
 80098de:	66bb      	str	r3, [r7, #104]	; 0x68
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	f003 031f 	and.w	r3, r3, #31
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d102      	bne.n	80098f2 <USB_ActivateEndpoint+0x28e>
 80098ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098ee:	3b01      	subs	r3, #1
 80098f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80098f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f4:	881b      	ldrh	r3, [r3, #0]
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	029b      	lsls	r3, r3, #10
 80098fe:	b29b      	uxth	r3, r3
 8009900:	4313      	orrs	r3, r2
 8009902:	b29b      	uxth	r3, r3
 8009904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800990c:	b29a      	uxth	r2, r3
 800990e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009910:	801a      	strh	r2, [r3, #0]
 8009912:	e026      	b.n	8009962 <USB_ActivateEndpoint+0x2fe>
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d10a      	bne.n	8009932 <USB_ActivateEndpoint+0x2ce>
 800991c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991e:	881b      	ldrh	r3, [r3, #0]
 8009920:	b29b      	uxth	r3, r3
 8009922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800992a:	b29a      	uxth	r2, r3
 800992c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992e:	801a      	strh	r2, [r3, #0]
 8009930:	e017      	b.n	8009962 <USB_ActivateEndpoint+0x2fe>
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	085b      	lsrs	r3, r3, #1
 8009938:	66bb      	str	r3, [r7, #104]	; 0x68
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	f003 0301 	and.w	r3, r3, #1
 8009942:	2b00      	cmp	r3, #0
 8009944:	d002      	beq.n	800994c <USB_ActivateEndpoint+0x2e8>
 8009946:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009948:	3301      	adds	r3, #1
 800994a:	66bb      	str	r3, [r7, #104]	; 0x68
 800994c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994e:	881b      	ldrh	r3, [r3, #0]
 8009950:	b29a      	uxth	r2, r3
 8009952:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009954:	b29b      	uxth	r3, r3
 8009956:	029b      	lsls	r3, r3, #10
 8009958:	b29b      	uxth	r3, r3
 800995a:	4313      	orrs	r3, r2
 800995c:	b29a      	uxth	r2, r3
 800995e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009960:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4413      	add	r3, r2
 800996c:	881b      	ldrh	r3, [r3, #0]
 800996e:	847b      	strh	r3, [r7, #34]	; 0x22
 8009970:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009976:	2b00      	cmp	r3, #0
 8009978:	d01b      	beq.n	80099b2 <USB_ActivateEndpoint+0x34e>
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4413      	add	r3, r2
 8009984:	881b      	ldrh	r3, [r3, #0]
 8009986:	b29b      	uxth	r3, r3
 8009988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800998c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009990:	843b      	strh	r3, [r7, #32]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	441a      	add	r2, r3
 800999c:	8c3b      	ldrh	r3, [r7, #32]
 800999e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80099aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d124      	bne.n	8009a04 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	881b      	ldrh	r3, [r3, #0]
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099d0:	83bb      	strh	r3, [r7, #28]
 80099d2:	8bbb      	ldrh	r3, [r7, #28]
 80099d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80099d8:	83bb      	strh	r3, [r7, #28]
 80099da:	8bbb      	ldrh	r3, [r7, #28]
 80099dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80099e0:	83bb      	strh	r3, [r7, #28]
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	441a      	add	r2, r3
 80099ec:	8bbb      	ldrh	r3, [r7, #28]
 80099ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	8013      	strh	r3, [r2, #0]
 8009a02:	e1ea      	b.n	8009dda <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	4413      	add	r3, r2
 8009a0e:	881b      	ldrh	r3, [r3, #0]
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a1a:	83fb      	strh	r3, [r7, #30]
 8009a1c:	8bfb      	ldrh	r3, [r7, #30]
 8009a1e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009a22:	83fb      	strh	r3, [r7, #30]
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	441a      	add	r2, r3
 8009a2e:	8bfb      	ldrh	r3, [r7, #30]
 8009a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	8013      	strh	r3, [r2, #0]
 8009a44:	e1c9      	b.n	8009dda <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	78db      	ldrb	r3, [r3, #3]
 8009a4a:	2b02      	cmp	r3, #2
 8009a4c:	d11e      	bne.n	8009a8c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	881b      	ldrh	r3, [r3, #0]
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a64:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	441a      	add	r2, r3
 8009a72:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a7e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	8013      	strh	r3, [r2, #0]
 8009a8a:	e01d      	b.n	8009ac8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	4413      	add	r3, r2
 8009a96:	881b      	ldrh	r3, [r3, #0]
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aa2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	441a      	add	r2, r3
 8009ab0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ad8:	4413      	add	r3, r2
 8009ada:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	00da      	lsls	r2, r3, #3
 8009ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ae4:	4413      	add	r3, r2
 8009ae6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009aea:	65bb      	str	r3, [r7, #88]	; 0x58
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	891b      	ldrh	r3, [r3, #8]
 8009af0:	085b      	lsrs	r3, r3, #1
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	005b      	lsls	r3, r3, #1
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009afa:	801a      	strh	r2, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	657b      	str	r3, [r7, #84]	; 0x54
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	461a      	mov	r2, r3
 8009b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b0c:	4413      	add	r3, r2
 8009b0e:	657b      	str	r3, [r7, #84]	; 0x54
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	00da      	lsls	r2, r3, #3
 8009b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b18:	4413      	add	r3, r2
 8009b1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b1e:	653b      	str	r3, [r7, #80]	; 0x50
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	895b      	ldrh	r3, [r3, #10]
 8009b24:	085b      	lsrs	r3, r3, #1
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	005b      	lsls	r3, r3, #1
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b2e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	785b      	ldrb	r3, [r3, #1]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f040 8093 	bne.w	8009c60 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	4413      	add	r3, r2
 8009b44:	881b      	ldrh	r3, [r3, #0]
 8009b46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009b4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d01b      	beq.n	8009b8e <USB_ActivateEndpoint+0x52a>
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4413      	add	r3, r2
 8009b60:	881b      	ldrh	r3, [r3, #0]
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b6c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	441a      	add	r2, r3
 8009b78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	4413      	add	r3, r2
 8009b98:	881b      	ldrh	r3, [r3, #0]
 8009b9a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009b9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d01b      	beq.n	8009bde <USB_ActivateEndpoint+0x57a>
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	4413      	add	r3, r2
 8009bb0:	881b      	ldrh	r3, [r3, #0]
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bbc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	441a      	add	r2, r3
 8009bc8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	4413      	add	r3, r2
 8009be8:	881b      	ldrh	r3, [r3, #0]
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bf4:	873b      	strh	r3, [r7, #56]	; 0x38
 8009bf6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009bf8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009bfc:	873b      	strh	r3, [r7, #56]	; 0x38
 8009bfe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009c00:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c04:	873b      	strh	r3, [r7, #56]	; 0x38
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	441a      	add	r2, r3
 8009c10:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4413      	add	r3, r2
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c3c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	441a      	add	r2, r3
 8009c48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	8013      	strh	r3, [r2, #0]
 8009c5e:	e0bc      	b.n	8009dda <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	4413      	add	r3, r2
 8009c6a:	881b      	ldrh	r3, [r3, #0]
 8009c6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009c70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d01d      	beq.n	8009cb8 <USB_ActivateEndpoint+0x654>
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	4413      	add	r3, r2
 8009c86:	881b      	ldrh	r3, [r3, #0]
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c92:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	441a      	add	r2, r3
 8009ca0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4413      	add	r3, r2
 8009cc2:	881b      	ldrh	r3, [r3, #0]
 8009cc4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009cc8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d01d      	beq.n	8009d10 <USB_ActivateEndpoint+0x6ac>
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	4413      	add	r3, r2
 8009cde:	881b      	ldrh	r3, [r3, #0]
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	441a      	add	r2, r3
 8009cf8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	78db      	ldrb	r3, [r3, #3]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d024      	beq.n	8009d62 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	4413      	add	r3, r2
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d2e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009d32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009d36:	f083 0320 	eor.w	r3, r3, #32
 8009d3a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	441a      	add	r2, r3
 8009d48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	8013      	strh	r3, [r2, #0]
 8009d60:	e01d      	b.n	8009d9e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	4413      	add	r3, r2
 8009d6c:	881b      	ldrh	r3, [r3, #0]
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d78:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	441a      	add	r2, r3
 8009d86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4413      	add	r3, r2
 8009da8:	881b      	ldrh	r3, [r3, #0]
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009db4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	441a      	add	r2, r3
 8009dc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009dda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3774      	adds	r7, #116	; 0x74
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop

08009dec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b08d      	sub	sp, #52	; 0x34
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	7b1b      	ldrb	r3, [r3, #12]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f040 808e 	bne.w	8009f1c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	785b      	ldrb	r3, [r3, #1]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d044      	beq.n	8009e92 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	4413      	add	r3, r2
 8009e12:	881b      	ldrh	r3, [r3, #0]
 8009e14:	81bb      	strh	r3, [r7, #12]
 8009e16:	89bb      	ldrh	r3, [r7, #12]
 8009e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d01b      	beq.n	8009e58 <USB_DeactivateEndpoint+0x6c>
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4413      	add	r3, r2
 8009e2a:	881b      	ldrh	r3, [r3, #0]
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e36:	817b      	strh	r3, [r7, #10]
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	441a      	add	r2, r3
 8009e42:	897b      	ldrh	r3, [r7, #10]
 8009e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	4413      	add	r3, r2
 8009e62:	881b      	ldrh	r3, [r3, #0]
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e6e:	813b      	strh	r3, [r7, #8]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	441a      	add	r2, r3
 8009e7a:	893b      	ldrh	r3, [r7, #8]
 8009e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	8013      	strh	r3, [r2, #0]
 8009e90:	e192      	b.n	800a1b8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	4413      	add	r3, r2
 8009e9c:	881b      	ldrh	r3, [r3, #0]
 8009e9e:	827b      	strh	r3, [r7, #18]
 8009ea0:	8a7b      	ldrh	r3, [r7, #18]
 8009ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d01b      	beq.n	8009ee2 <USB_DeactivateEndpoint+0xf6>
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4413      	add	r3, r2
 8009eb4:	881b      	ldrh	r3, [r3, #0]
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ec0:	823b      	strh	r3, [r7, #16]
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	441a      	add	r2, r3
 8009ecc:	8a3b      	ldrh	r3, [r7, #16]
 8009ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ed6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	4413      	add	r3, r2
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ef8:	81fb      	strh	r3, [r7, #14]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	441a      	add	r2, r3
 8009f04:	89fb      	ldrh	r3, [r7, #14]
 8009f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	8013      	strh	r3, [r2, #0]
 8009f1a:	e14d      	b.n	800a1b8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	785b      	ldrb	r3, [r3, #1]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f040 80a5 	bne.w	800a070 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	4413      	add	r3, r2
 8009f30:	881b      	ldrh	r3, [r3, #0]
 8009f32:	843b      	strh	r3, [r7, #32]
 8009f34:	8c3b      	ldrh	r3, [r7, #32]
 8009f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d01b      	beq.n	8009f76 <USB_DeactivateEndpoint+0x18a>
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	4413      	add	r3, r2
 8009f48:	881b      	ldrh	r3, [r3, #0]
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f54:	83fb      	strh	r3, [r7, #30]
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	441a      	add	r2, r3
 8009f60:	8bfb      	ldrh	r3, [r7, #30]
 8009f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4413      	add	r3, r2
 8009f80:	881b      	ldrh	r3, [r3, #0]
 8009f82:	83bb      	strh	r3, [r7, #28]
 8009f84:	8bbb      	ldrh	r3, [r7, #28]
 8009f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d01b      	beq.n	8009fc6 <USB_DeactivateEndpoint+0x1da>
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4413      	add	r3, r2
 8009f98:	881b      	ldrh	r3, [r3, #0]
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fa4:	837b      	strh	r3, [r7, #26]
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	441a      	add	r2, r3
 8009fb0:	8b7b      	ldrh	r3, [r7, #26]
 8009fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4413      	add	r3, r2
 8009fd0:	881b      	ldrh	r3, [r3, #0]
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fdc:	833b      	strh	r3, [r7, #24]
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	441a      	add	r2, r3
 8009fe8:	8b3b      	ldrh	r3, [r7, #24]
 8009fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ff6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4413      	add	r3, r2
 800a008:	881b      	ldrh	r3, [r3, #0]
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a014:	82fb      	strh	r3, [r7, #22]
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	441a      	add	r2, r3
 800a020:	8afb      	ldrh	r3, [r7, #22]
 800a022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a02a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a02e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a032:	b29b      	uxth	r3, r3
 800a034:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	4413      	add	r3, r2
 800a040:	881b      	ldrh	r3, [r3, #0]
 800a042:	b29b      	uxth	r3, r3
 800a044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a04c:	82bb      	strh	r3, [r7, #20]
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	441a      	add	r2, r3
 800a058:	8abb      	ldrh	r3, [r7, #20]
 800a05a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a05e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	8013      	strh	r3, [r2, #0]
 800a06e:	e0a3      	b.n	800a1b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	4413      	add	r3, r2
 800a07a:	881b      	ldrh	r3, [r3, #0]
 800a07c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a07e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a084:	2b00      	cmp	r3, #0
 800a086:	d01b      	beq.n	800a0c0 <USB_DeactivateEndpoint+0x2d4>
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4413      	add	r3, r2
 800a092:	881b      	ldrh	r3, [r3, #0]
 800a094:	b29b      	uxth	r3, r3
 800a096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a09a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a09e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	441a      	add	r2, r3
 800a0aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a0ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4413      	add	r3, r2
 800a0ca:	881b      	ldrh	r3, [r3, #0]
 800a0cc:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a0ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a0d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d01b      	beq.n	800a110 <USB_DeactivateEndpoint+0x324>
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4413      	add	r3, r2
 800a0e2:	881b      	ldrh	r3, [r3, #0]
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0ee:	853b      	strh	r3, [r7, #40]	; 0x28
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	441a      	add	r2, r3
 800a0fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a0fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a108:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4413      	add	r3, r2
 800a11a:	881b      	ldrh	r3, [r3, #0]
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a126:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	441a      	add	r2, r3
 800a132:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a13c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a144:	b29b      	uxth	r3, r3
 800a146:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	4413      	add	r3, r2
 800a152:	881b      	ldrh	r3, [r3, #0]
 800a154:	b29b      	uxth	r3, r3
 800a156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a15a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a15e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	441a      	add	r2, r3
 800a16a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a16c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a170:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	4413      	add	r3, r2
 800a18a:	881b      	ldrh	r3, [r3, #0]
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a196:	847b      	strh	r3, [r7, #34]	; 0x22
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	441a      	add	r2, r3
 800a1a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a1a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3734      	adds	r7, #52	; 0x34
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr

0800a1c6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b0c2      	sub	sp, #264	; 0x108
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1d4:	6018      	str	r0, [r3, #0]
 800a1d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1de:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a1e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	785b      	ldrb	r3, [r3, #1]
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	f040 86b7 	bne.w	800af60 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a1f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	699a      	ldr	r2, [r3, #24]
 800a1fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d908      	bls.n	800a220 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a20e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a21e:	e007      	b.n	800a230 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	699b      	ldr	r3, [r3, #24]
 800a22c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	7b1b      	ldrb	r3, [r3, #12]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d13a      	bne.n	800a2b6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	6959      	ldr	r1, [r3, #20]
 800a24c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	88da      	ldrh	r2, [r3, #6]
 800a258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a262:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a266:	6800      	ldr	r0, [r0, #0]
 800a268:	f001 fc98 	bl	800bb9c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a26c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	613b      	str	r3, [r7, #16]
 800a278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a27c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a286:	b29b      	uxth	r3, r3
 800a288:	461a      	mov	r2, r3
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	4413      	add	r3, r2
 800a28e:	613b      	str	r3, [r7, #16]
 800a290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	00da      	lsls	r2, r3, #3
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a2a6:	60fb      	str	r3, [r7, #12]
 800a2a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	801a      	strh	r2, [r3, #0]
 800a2b2:	f000 be1f 	b.w	800aef4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a2b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	78db      	ldrb	r3, [r3, #3]
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	f040 8462 	bne.w	800ab8c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a2c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	6a1a      	ldr	r2, [r3, #32]
 800a2d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	f240 83df 	bls.w	800aaa4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a2e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	4413      	add	r3, r2
 800a300:	881b      	ldrh	r3, [r3, #0]
 800a302:	b29b      	uxth	r3, r3
 800a304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a30c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a314:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a31e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	441a      	add	r2, r3
 800a32a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a32e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a336:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a33a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a33e:	b29b      	uxth	r3, r3
 800a340:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	6a1a      	ldr	r2, [r3, #32]
 800a34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a352:	1ad2      	subs	r2, r2, r3
 800a354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a364:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a36e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	4413      	add	r3, r2
 800a37a:	881b      	ldrh	r3, [r3, #0]
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a382:	2b00      	cmp	r3, #0
 800a384:	f000 81c7 	beq.w	800a716 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a38c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	633b      	str	r3, [r7, #48]	; 0x30
 800a394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	785b      	ldrb	r3, [r3, #1]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d177      	bne.n	800a494 <USB_EPStartXfer+0x2ce>
 800a3a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c4:	4413      	add	r3, r2
 800a3c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	00da      	lsls	r2, r3, #3
 800a3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d8:	4413      	add	r3, r2
 800a3da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a3de:	627b      	str	r3, [r7, #36]	; 0x24
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e2:	881b      	ldrh	r3, [r3, #0]
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3ea:	b29a      	uxth	r2, r3
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ee:	801a      	strh	r2, [r3, #0]
 800a3f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3f4:	2b3e      	cmp	r3, #62	; 0x3e
 800a3f6:	d921      	bls.n	800a43c <USB_EPStartXfer+0x276>
 800a3f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3fc:	095b      	lsrs	r3, r3, #5
 800a3fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a406:	f003 031f 	and.w	r3, r3, #31
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d104      	bne.n	800a418 <USB_EPStartXfer+0x252>
 800a40e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a412:	3b01      	subs	r3, #1
 800a414:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41a:	881b      	ldrh	r3, [r3, #0]
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a422:	b29b      	uxth	r3, r3
 800a424:	029b      	lsls	r3, r3, #10
 800a426:	b29b      	uxth	r3, r3
 800a428:	4313      	orrs	r3, r2
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a434:	b29a      	uxth	r2, r3
 800a436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a438:	801a      	strh	r2, [r3, #0]
 800a43a:	e050      	b.n	800a4de <USB_EPStartXfer+0x318>
 800a43c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10a      	bne.n	800a45a <USB_EPStartXfer+0x294>
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	881b      	ldrh	r3, [r3, #0]
 800a448:	b29b      	uxth	r3, r3
 800a44a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a44e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a452:	b29a      	uxth	r2, r3
 800a454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a456:	801a      	strh	r2, [r3, #0]
 800a458:	e041      	b.n	800a4de <USB_EPStartXfer+0x318>
 800a45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a45e:	085b      	lsrs	r3, r3, #1
 800a460:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a468:	f003 0301 	and.w	r3, r3, #1
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d004      	beq.n	800a47a <USB_EPStartXfer+0x2b4>
 800a470:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a474:	3301      	adds	r3, #1
 800a476:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47c:	881b      	ldrh	r3, [r3, #0]
 800a47e:	b29a      	uxth	r2, r3
 800a480:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a484:	b29b      	uxth	r3, r3
 800a486:	029b      	lsls	r3, r3, #10
 800a488:	b29b      	uxth	r3, r3
 800a48a:	4313      	orrs	r3, r2
 800a48c:	b29a      	uxth	r2, r3
 800a48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a490:	801a      	strh	r2, [r3, #0]
 800a492:	e024      	b.n	800a4de <USB_EPStartXfer+0x318>
 800a494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	785b      	ldrb	r3, [r3, #1]
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d11c      	bne.n	800a4de <USB_EPStartXfer+0x318>
 800a4a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b8:	4413      	add	r3, r2
 800a4ba:	633b      	str	r3, [r7, #48]	; 0x30
 800a4bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	00da      	lsls	r2, r3, #3
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4cc:	4413      	add	r3, r2
 800a4ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a4de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	895b      	ldrh	r3, [r3, #10]
 800a4ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	6959      	ldr	r1, [r3, #20]
 800a4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a504:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a508:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a50c:	6800      	ldr	r0, [r0, #0]
 800a50e:	f001 fb45 	bl	800bb9c <USB_WritePMA>
            ep->xfer_buff += len;
 800a512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	695a      	ldr	r2, [r3, #20]
 800a51e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a522:	441a      	add	r2, r3
 800a524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	6a1a      	ldr	r2, [r3, #32]
 800a53c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d90f      	bls.n	800a56c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a54c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	6a1a      	ldr	r2, [r3, #32]
 800a558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a55c:	1ad2      	subs	r2, r2, r3
 800a55e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	621a      	str	r2, [r3, #32]
 800a56a:	e00e      	b.n	800a58a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a56c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	6a1b      	ldr	r3, [r3, #32]
 800a578:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a57c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2200      	movs	r2, #0
 800a588:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a58a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a58e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	785b      	ldrb	r3, [r3, #1]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d177      	bne.n	800a68a <USB_EPStartXfer+0x4c4>
 800a59a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a59e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	61bb      	str	r3, [r7, #24]
 800a5a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	61bb      	str	r3, [r7, #24]
 800a5be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	00da      	lsls	r2, r3, #3
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a5d4:	617b      	str	r3, [r7, #20]
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	881b      	ldrh	r3, [r3, #0]
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5e0:	b29a      	uxth	r2, r3
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	801a      	strh	r2, [r3, #0]
 800a5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ea:	2b3e      	cmp	r3, #62	; 0x3e
 800a5ec:	d921      	bls.n	800a632 <USB_EPStartXfer+0x46c>
 800a5ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5f2:	095b      	lsrs	r3, r3, #5
 800a5f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5fc:	f003 031f 	and.w	r3, r3, #31
 800a600:	2b00      	cmp	r3, #0
 800a602:	d104      	bne.n	800a60e <USB_EPStartXfer+0x448>
 800a604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a608:	3b01      	subs	r3, #1
 800a60a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	881b      	ldrh	r3, [r3, #0]
 800a612:	b29a      	uxth	r2, r3
 800a614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a618:	b29b      	uxth	r3, r3
 800a61a:	029b      	lsls	r3, r3, #10
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	4313      	orrs	r3, r2
 800a620:	b29b      	uxth	r3, r3
 800a622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	801a      	strh	r2, [r3, #0]
 800a630:	e056      	b.n	800a6e0 <USB_EPStartXfer+0x51a>
 800a632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10a      	bne.n	800a650 <USB_EPStartXfer+0x48a>
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	881b      	ldrh	r3, [r3, #0]
 800a63e:	b29b      	uxth	r3, r3
 800a640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a648:	b29a      	uxth	r2, r3
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	801a      	strh	r2, [r3, #0]
 800a64e:	e047      	b.n	800a6e0 <USB_EPStartXfer+0x51a>
 800a650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a654:	085b      	lsrs	r3, r3, #1
 800a656:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a65a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a65e:	f003 0301 	and.w	r3, r3, #1
 800a662:	2b00      	cmp	r3, #0
 800a664:	d004      	beq.n	800a670 <USB_EPStartXfer+0x4aa>
 800a666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a66a:	3301      	adds	r3, #1
 800a66c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	881b      	ldrh	r3, [r3, #0]
 800a674:	b29a      	uxth	r2, r3
 800a676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	029b      	lsls	r3, r3, #10
 800a67e:	b29b      	uxth	r3, r3
 800a680:	4313      	orrs	r3, r2
 800a682:	b29a      	uxth	r2, r3
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	801a      	strh	r2, [r3, #0]
 800a688:	e02a      	b.n	800a6e0 <USB_EPStartXfer+0x51a>
 800a68a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a68e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	785b      	ldrb	r3, [r3, #1]
 800a696:	2b01      	cmp	r3, #1
 800a698:	d122      	bne.n	800a6e0 <USB_EPStartXfer+0x51a>
 800a69a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a69e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	623b      	str	r3, [r7, #32]
 800a6a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	6a3b      	ldr	r3, [r7, #32]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	623b      	str	r3, [r7, #32]
 800a6be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	00da      	lsls	r2, r3, #3
 800a6cc:	6a3b      	ldr	r3, [r7, #32]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a6d4:	61fb      	str	r3, [r7, #28]
 800a6d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6da:	b29a      	uxth	r2, r3
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a6e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	891b      	ldrh	r3, [r3, #8]
 800a6ec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a6f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	6959      	ldr	r1, [r3, #20]
 800a6fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a700:	b29b      	uxth	r3, r3
 800a702:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a706:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a70a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a70e:	6800      	ldr	r0, [r0, #0]
 800a710:	f001 fa44 	bl	800bb9c <USB_WritePMA>
 800a714:	e3ee      	b.n	800aef4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a71a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	785b      	ldrb	r3, [r3, #1]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d177      	bne.n	800a816 <USB_EPStartXfer+0x650>
 800a726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a72a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	64bb      	str	r3, [r7, #72]	; 0x48
 800a732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a740:	b29b      	uxth	r3, r3
 800a742:	461a      	mov	r2, r3
 800a744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a746:	4413      	add	r3, r2
 800a748:	64bb      	str	r3, [r7, #72]	; 0x48
 800a74a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a74e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	00da      	lsls	r2, r3, #3
 800a758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a75a:	4413      	add	r3, r2
 800a75c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a760:	647b      	str	r3, [r7, #68]	; 0x44
 800a762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a764:	881b      	ldrh	r3, [r3, #0]
 800a766:	b29b      	uxth	r3, r3
 800a768:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a76c:	b29a      	uxth	r2, r3
 800a76e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a770:	801a      	strh	r2, [r3, #0]
 800a772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a776:	2b3e      	cmp	r3, #62	; 0x3e
 800a778:	d921      	bls.n	800a7be <USB_EPStartXfer+0x5f8>
 800a77a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a77e:	095b      	lsrs	r3, r3, #5
 800a780:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a788:	f003 031f 	and.w	r3, r3, #31
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d104      	bne.n	800a79a <USB_EPStartXfer+0x5d4>
 800a790:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a794:	3b01      	subs	r3, #1
 800a796:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a79a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a79c:	881b      	ldrh	r3, [r3, #0]
 800a79e:	b29a      	uxth	r2, r3
 800a7a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	029b      	lsls	r3, r3, #10
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7b6:	b29a      	uxth	r2, r3
 800a7b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7ba:	801a      	strh	r2, [r3, #0]
 800a7bc:	e056      	b.n	800a86c <USB_EPStartXfer+0x6a6>
 800a7be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10a      	bne.n	800a7dc <USB_EPStartXfer+0x616>
 800a7c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7c8:	881b      	ldrh	r3, [r3, #0]
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7d4:	b29a      	uxth	r2, r3
 800a7d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7d8:	801a      	strh	r2, [r3, #0]
 800a7da:	e047      	b.n	800a86c <USB_EPStartXfer+0x6a6>
 800a7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7e0:	085b      	lsrs	r3, r3, #1
 800a7e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a7e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ea:	f003 0301 	and.w	r3, r3, #1
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d004      	beq.n	800a7fc <USB_EPStartXfer+0x636>
 800a7f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a7fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7fe:	881b      	ldrh	r3, [r3, #0]
 800a800:	b29a      	uxth	r2, r3
 800a802:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a806:	b29b      	uxth	r3, r3
 800a808:	029b      	lsls	r3, r3, #10
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	4313      	orrs	r3, r2
 800a80e:	b29a      	uxth	r2, r3
 800a810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a812:	801a      	strh	r2, [r3, #0]
 800a814:	e02a      	b.n	800a86c <USB_EPStartXfer+0x6a6>
 800a816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a81a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	785b      	ldrb	r3, [r3, #1]
 800a822:	2b01      	cmp	r3, #1
 800a824:	d122      	bne.n	800a86c <USB_EPStartXfer+0x6a6>
 800a826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a82a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	653b      	str	r3, [r7, #80]	; 0x50
 800a832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a836:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a840:	b29b      	uxth	r3, r3
 800a842:	461a      	mov	r2, r3
 800a844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a846:	4413      	add	r3, r2
 800a848:	653b      	str	r3, [r7, #80]	; 0x50
 800a84a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a84e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	00da      	lsls	r2, r3, #3
 800a858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a85a:	4413      	add	r3, r2
 800a85c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a860:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a866:	b29a      	uxth	r2, r3
 800a868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a86a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a86c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	891b      	ldrh	r3, [r3, #8]
 800a878:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a87c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	6959      	ldr	r1, [r3, #20]
 800a888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a892:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a896:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a89a:	6800      	ldr	r0, [r0, #0]
 800a89c:	f001 f97e 	bl	800bb9c <USB_WritePMA>
            ep->xfer_buff += len;
 800a8a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	695a      	ldr	r2, [r3, #20]
 800a8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b0:	441a      	add	r2, r3
 800a8b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a8be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	6a1a      	ldr	r2, [r3, #32]
 800a8ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d90f      	bls.n	800a8fa <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a8da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	6a1a      	ldr	r2, [r3, #32]
 800a8e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ea:	1ad2      	subs	r2, r2, r3
 800a8ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	621a      	str	r2, [r3, #32]
 800a8f8:	e00e      	b.n	800a918 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800a8fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	6a1b      	ldr	r3, [r3, #32]
 800a906:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a90a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a90e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2200      	movs	r2, #0
 800a916:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a91c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	643b      	str	r3, [r7, #64]	; 0x40
 800a924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	785b      	ldrb	r3, [r3, #1]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d177      	bne.n	800aa24 <USB_EPStartXfer+0x85e>
 800a934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a938:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a944:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a94e:	b29b      	uxth	r3, r3
 800a950:	461a      	mov	r2, r3
 800a952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a954:	4413      	add	r3, r2
 800a956:	63bb      	str	r3, [r7, #56]	; 0x38
 800a958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a95c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	00da      	lsls	r2, r3, #3
 800a966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a968:	4413      	add	r3, r2
 800a96a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a96e:	637b      	str	r3, [r7, #52]	; 0x34
 800a970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a972:	881b      	ldrh	r3, [r3, #0]
 800a974:	b29b      	uxth	r3, r3
 800a976:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a97e:	801a      	strh	r2, [r3, #0]
 800a980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a984:	2b3e      	cmp	r3, #62	; 0x3e
 800a986:	d921      	bls.n	800a9cc <USB_EPStartXfer+0x806>
 800a988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a98c:	095b      	lsrs	r3, r3, #5
 800a98e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a996:	f003 031f 	and.w	r3, r3, #31
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d104      	bne.n	800a9a8 <USB_EPStartXfer+0x7e2>
 800a99e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9a2:	3b01      	subs	r3, #1
 800a9a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a9a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9aa:	881b      	ldrh	r3, [r3, #0]
 800a9ac:	b29a      	uxth	r2, r3
 800a9ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	029b      	lsls	r3, r3, #10
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c8:	801a      	strh	r2, [r3, #0]
 800a9ca:	e050      	b.n	800aa6e <USB_EPStartXfer+0x8a8>
 800a9cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10a      	bne.n	800a9ea <USB_EPStartXfer+0x824>
 800a9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9d6:	881b      	ldrh	r3, [r3, #0]
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9e2:	b29a      	uxth	r2, r3
 800a9e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9e6:	801a      	strh	r2, [r3, #0]
 800a9e8:	e041      	b.n	800aa6e <USB_EPStartXfer+0x8a8>
 800a9ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ee:	085b      	lsrs	r3, r3, #1
 800a9f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a9f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f8:	f003 0301 	and.w	r3, r3, #1
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d004      	beq.n	800aa0a <USB_EPStartXfer+0x844>
 800aa00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa04:	3301      	adds	r3, #1
 800aa06:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aa0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa0c:	881b      	ldrh	r3, [r3, #0]
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	029b      	lsls	r3, r3, #10
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	b29a      	uxth	r2, r3
 800aa1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa20:	801a      	strh	r2, [r3, #0]
 800aa22:	e024      	b.n	800aa6e <USB_EPStartXfer+0x8a8>
 800aa24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	785b      	ldrb	r3, [r3, #1]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d11c      	bne.n	800aa6e <USB_EPStartXfer+0x8a8>
 800aa34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	461a      	mov	r2, r3
 800aa46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa48:	4413      	add	r3, r2
 800aa4a:	643b      	str	r3, [r7, #64]	; 0x40
 800aa4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	00da      	lsls	r2, r3, #3
 800aa5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa5c:	4413      	add	r3, r2
 800aa5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa6c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800aa6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	895b      	ldrh	r3, [r3, #10]
 800aa7a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	6959      	ldr	r1, [r3, #20]
 800aa8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aa94:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aa98:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aa9c:	6800      	ldr	r0, [r0, #0]
 800aa9e:	f001 f87d 	bl	800bb9c <USB_WritePMA>
 800aaa2:	e227      	b.n	800aef4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800aaa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	6a1b      	ldr	r3, [r3, #32]
 800aab0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800aab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aab8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	4413      	add	r3, r2
 800aace:	881b      	ldrh	r3, [r3, #0]
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800aad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aada:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800aade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aae2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	441a      	add	r2, r3
 800aaf8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800aafc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ab10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab30:	4413      	add	r3, r2
 800ab32:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	00da      	lsls	r2, r3, #3
 800ab42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab44:	4413      	add	r3, r2
 800ab46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab4a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab50:	b29a      	uxth	r2, r3
 800ab52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab54:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ab56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	891b      	ldrh	r3, [r3, #8]
 800ab62:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	6959      	ldr	r1, [r3, #20]
 800ab72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ab7c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ab80:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ab84:	6800      	ldr	r0, [r0, #0]
 800ab86:	f001 f809 	bl	800bb9c <USB_WritePMA>
 800ab8a:	e1b3      	b.n	800aef4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ab8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	6a1a      	ldr	r2, [r3, #32]
 800ab98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab9c:	1ad2      	subs	r2, r2, r3
 800ab9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800abaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	4413      	add	r3, r2
 800abc4:	881b      	ldrh	r3, [r3, #0]
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f000 80c6 	beq.w	800ad5e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800abd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	673b      	str	r3, [r7, #112]	; 0x70
 800abde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	785b      	ldrb	r3, [r3, #1]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d177      	bne.n	800acde <USB_EPStartXfer+0xb18>
 800abee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	66bb      	str	r3, [r7, #104]	; 0x68
 800abfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac0e:	4413      	add	r3, r2
 800ac10:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	00da      	lsls	r2, r3, #3
 800ac20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac22:	4413      	add	r3, r2
 800ac24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac28:	667b      	str	r3, [r7, #100]	; 0x64
 800ac2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac2c:	881b      	ldrh	r3, [r3, #0]
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac38:	801a      	strh	r2, [r3, #0]
 800ac3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac3e:	2b3e      	cmp	r3, #62	; 0x3e
 800ac40:	d921      	bls.n	800ac86 <USB_EPStartXfer+0xac0>
 800ac42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac46:	095b      	lsrs	r3, r3, #5
 800ac48:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac50:	f003 031f 	and.w	r3, r3, #31
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d104      	bne.n	800ac62 <USB_EPStartXfer+0xa9c>
 800ac58:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac5c:	3b01      	subs	r3, #1
 800ac5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac64:	881b      	ldrh	r3, [r3, #0]
 800ac66:	b29a      	uxth	r2, r3
 800ac68:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	029b      	lsls	r3, r3, #10
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	4313      	orrs	r3, r2
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac82:	801a      	strh	r2, [r3, #0]
 800ac84:	e050      	b.n	800ad28 <USB_EPStartXfer+0xb62>
 800ac86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d10a      	bne.n	800aca4 <USB_EPStartXfer+0xade>
 800ac8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac90:	881b      	ldrh	r3, [r3, #0]
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac9c:	b29a      	uxth	r2, r3
 800ac9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aca0:	801a      	strh	r2, [r3, #0]
 800aca2:	e041      	b.n	800ad28 <USB_EPStartXfer+0xb62>
 800aca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca8:	085b      	lsrs	r3, r3, #1
 800acaa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800acae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb2:	f003 0301 	and.w	r3, r3, #1
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d004      	beq.n	800acc4 <USB_EPStartXfer+0xafe>
 800acba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800acbe:	3301      	adds	r3, #1
 800acc0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800acc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acc6:	881b      	ldrh	r3, [r3, #0]
 800acc8:	b29a      	uxth	r2, r3
 800acca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800acce:	b29b      	uxth	r3, r3
 800acd0:	029b      	lsls	r3, r3, #10
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	4313      	orrs	r3, r2
 800acd6:	b29a      	uxth	r2, r3
 800acd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acda:	801a      	strh	r2, [r3, #0]
 800acdc:	e024      	b.n	800ad28 <USB_EPStartXfer+0xb62>
 800acde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ace2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	785b      	ldrb	r3, [r3, #1]
 800acea:	2b01      	cmp	r3, #1
 800acec:	d11c      	bne.n	800ad28 <USB_EPStartXfer+0xb62>
 800acee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	461a      	mov	r2, r3
 800ad00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad02:	4413      	add	r3, r2
 800ad04:	673b      	str	r3, [r7, #112]	; 0x70
 800ad06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	00da      	lsls	r2, r3, #3
 800ad14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad16:	4413      	add	r3, r2
 800ad18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ad1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad26:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ad28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	895b      	ldrh	r3, [r3, #10]
 800ad34:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	6959      	ldr	r1, [r3, #20]
 800ad44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ad4e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ad52:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ad56:	6800      	ldr	r0, [r0, #0]
 800ad58:	f000 ff20 	bl	800bb9c <USB_WritePMA>
 800ad5c:	e0ca      	b.n	800aef4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	785b      	ldrb	r3, [r3, #1]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d177      	bne.n	800ae5e <USB_EPStartXfer+0xc98>
 800ad6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ad7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad8e:	4413      	add	r3, r2
 800ad90:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ad92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	00da      	lsls	r2, r3, #3
 800ada0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ada2:	4413      	add	r3, r2
 800ada4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ada8:	67bb      	str	r3, [r7, #120]	; 0x78
 800adaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adac:	881b      	ldrh	r3, [r3, #0]
 800adae:	b29b      	uxth	r3, r3
 800adb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800adb4:	b29a      	uxth	r2, r3
 800adb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adb8:	801a      	strh	r2, [r3, #0]
 800adba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adbe:	2b3e      	cmp	r3, #62	; 0x3e
 800adc0:	d921      	bls.n	800ae06 <USB_EPStartXfer+0xc40>
 800adc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adc6:	095b      	lsrs	r3, r3, #5
 800adc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800adcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800add0:	f003 031f 	and.w	r3, r3, #31
 800add4:	2b00      	cmp	r3, #0
 800add6:	d104      	bne.n	800ade2 <USB_EPStartXfer+0xc1c>
 800add8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800addc:	3b01      	subs	r3, #1
 800adde:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ade2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ade4:	881b      	ldrh	r3, [r3, #0]
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800adec:	b29b      	uxth	r3, r3
 800adee:	029b      	lsls	r3, r3, #10
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	4313      	orrs	r3, r2
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adfe:	b29a      	uxth	r2, r3
 800ae00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae02:	801a      	strh	r2, [r3, #0]
 800ae04:	e05c      	b.n	800aec0 <USB_EPStartXfer+0xcfa>
 800ae06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d10a      	bne.n	800ae24 <USB_EPStartXfer+0xc5e>
 800ae0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae10:	881b      	ldrh	r3, [r3, #0]
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae1c:	b29a      	uxth	r2, r3
 800ae1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae20:	801a      	strh	r2, [r3, #0]
 800ae22:	e04d      	b.n	800aec0 <USB_EPStartXfer+0xcfa>
 800ae24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae28:	085b      	lsrs	r3, r3, #1
 800ae2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ae2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae32:	f003 0301 	and.w	r3, r3, #1
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d004      	beq.n	800ae44 <USB_EPStartXfer+0xc7e>
 800ae3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ae3e:	3301      	adds	r3, #1
 800ae40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ae44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae46:	881b      	ldrh	r3, [r3, #0]
 800ae48:	b29a      	uxth	r2, r3
 800ae4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	029b      	lsls	r3, r3, #10
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	4313      	orrs	r3, r2
 800ae56:	b29a      	uxth	r2, r3
 800ae58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae5a:	801a      	strh	r2, [r3, #0]
 800ae5c:	e030      	b.n	800aec0 <USB_EPStartXfer+0xcfa>
 800ae5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	785b      	ldrb	r3, [r3, #1]
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d128      	bne.n	800aec0 <USB_EPStartXfer+0xcfa>
 800ae6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae92:	4413      	add	r3, r2
 800ae94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	00da      	lsls	r2, r3, #3
 800aea6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aeaa:	4413      	add	r3, r2
 800aeac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aeb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aeb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb8:	b29a      	uxth	r2, r3
 800aeba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aebe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	891b      	ldrh	r3, [r3, #8]
 800aecc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	6959      	ldr	r1, [r3, #20]
 800aedc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aee6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aeea:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aeee:	6800      	ldr	r0, [r0, #0]
 800aef0:	f000 fe54 	bl	800bb9c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800aef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aef8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	4413      	add	r3, r2
 800af0e:	881b      	ldrh	r3, [r3, #0]
 800af10:	b29b      	uxth	r3, r3
 800af12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af1a:	817b      	strh	r3, [r7, #10]
 800af1c:	897b      	ldrh	r3, [r7, #10]
 800af1e:	f083 0310 	eor.w	r3, r3, #16
 800af22:	817b      	strh	r3, [r7, #10]
 800af24:	897b      	ldrh	r3, [r7, #10]
 800af26:	f083 0320 	eor.w	r3, r3, #32
 800af2a:	817b      	strh	r3, [r7, #10]
 800af2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	441a      	add	r2, r3
 800af46:	897b      	ldrh	r3, [r7, #10]
 800af48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af58:	b29b      	uxth	r3, r3
 800af5a:	8013      	strh	r3, [r2, #0]
 800af5c:	f000 bcde 	b.w	800b91c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800af60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	7b1b      	ldrb	r3, [r3, #12]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f040 80bb 	bne.w	800b0e8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800af72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	699a      	ldr	r2, [r3, #24]
 800af7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	691b      	ldr	r3, [r3, #16]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d917      	bls.n	800afbe <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800af8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	691b      	ldr	r3, [r3, #16]
 800af9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800af9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	699a      	ldr	r2, [r3, #24]
 800afaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afae:	1ad2      	subs	r2, r2, r3
 800afb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	619a      	str	r2, [r3, #24]
 800afbc:	e00e      	b.n	800afdc <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800afbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	699b      	ldr	r3, [r3, #24]
 800afca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800afce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2200      	movs	r2, #0
 800afda:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800afdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afe0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800afea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aff8:	b29b      	uxth	r3, r3
 800affa:	461a      	mov	r2, r3
 800affc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b000:	4413      	add	r3, r2
 800b002:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b00a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	00da      	lsls	r2, r3, #3
 800b014:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b018:	4413      	add	r3, r2
 800b01a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b01e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b022:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b026:	881b      	ldrh	r3, [r3, #0]
 800b028:	b29b      	uxth	r3, r3
 800b02a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b02e:	b29a      	uxth	r2, r3
 800b030:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b034:	801a      	strh	r2, [r3, #0]
 800b036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b03a:	2b3e      	cmp	r3, #62	; 0x3e
 800b03c:	d924      	bls.n	800b088 <USB_EPStartXfer+0xec2>
 800b03e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b042:	095b      	lsrs	r3, r3, #5
 800b044:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b04c:	f003 031f 	and.w	r3, r3, #31
 800b050:	2b00      	cmp	r3, #0
 800b052:	d104      	bne.n	800b05e <USB_EPStartXfer+0xe98>
 800b054:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b058:	3b01      	subs	r3, #1
 800b05a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b05e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b062:	881b      	ldrh	r3, [r3, #0]
 800b064:	b29a      	uxth	r2, r3
 800b066:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	029b      	lsls	r3, r3, #10
 800b06e:	b29b      	uxth	r3, r3
 800b070:	4313      	orrs	r3, r2
 800b072:	b29b      	uxth	r3, r3
 800b074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b07c:	b29a      	uxth	r2, r3
 800b07e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b082:	801a      	strh	r2, [r3, #0]
 800b084:	f000 bc10 	b.w	800b8a8 <USB_EPStartXfer+0x16e2>
 800b088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d10c      	bne.n	800b0aa <USB_EPStartXfer+0xee4>
 800b090:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b094:	881b      	ldrh	r3, [r3, #0]
 800b096:	b29b      	uxth	r3, r3
 800b098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b09c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0a0:	b29a      	uxth	r2, r3
 800b0a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0a6:	801a      	strh	r2, [r3, #0]
 800b0a8:	e3fe      	b.n	800b8a8 <USB_EPStartXfer+0x16e2>
 800b0aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ae:	085b      	lsrs	r3, r3, #1
 800b0b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b0b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0b8:	f003 0301 	and.w	r3, r3, #1
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d004      	beq.n	800b0ca <USB_EPStartXfer+0xf04>
 800b0c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b0ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0ce:	881b      	ldrh	r3, [r3, #0]
 800b0d0:	b29a      	uxth	r2, r3
 800b0d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	029b      	lsls	r3, r3, #10
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	b29a      	uxth	r2, r3
 800b0e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0e4:	801a      	strh	r2, [r3, #0]
 800b0e6:	e3df      	b.n	800b8a8 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b0e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	78db      	ldrb	r3, [r3, #3]
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	f040 8218 	bne.w	800b52a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b0fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	785b      	ldrb	r3, [r3, #1]
 800b106:	2b00      	cmp	r3, #0
 800b108:	f040 809d 	bne.w	800b246 <USB_EPStartXfer+0x1080>
 800b10c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b110:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b11a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b11e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b128:	b29b      	uxth	r3, r3
 800b12a:	461a      	mov	r2, r3
 800b12c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b130:	4413      	add	r3, r2
 800b132:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b13a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	00da      	lsls	r2, r3, #3
 800b144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b148:	4413      	add	r3, r2
 800b14a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b14e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b152:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b156:	881b      	ldrh	r3, [r3, #0]
 800b158:	b29b      	uxth	r3, r3
 800b15a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b15e:	b29a      	uxth	r2, r3
 800b160:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b164:	801a      	strh	r2, [r3, #0]
 800b166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b16a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	691b      	ldr	r3, [r3, #16]
 800b172:	2b3e      	cmp	r3, #62	; 0x3e
 800b174:	d92b      	bls.n	800b1ce <USB_EPStartXfer+0x1008>
 800b176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b17a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	691b      	ldr	r3, [r3, #16]
 800b182:	095b      	lsrs	r3, r3, #5
 800b184:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b18c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	691b      	ldr	r3, [r3, #16]
 800b194:	f003 031f 	and.w	r3, r3, #31
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d104      	bne.n	800b1a6 <USB_EPStartXfer+0xfe0>
 800b19c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b1a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b1aa:	881b      	ldrh	r3, [r3, #0]
 800b1ac:	b29a      	uxth	r2, r3
 800b1ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	029b      	lsls	r3, r3, #10
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1c4:	b29a      	uxth	r2, r3
 800b1c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b1ca:	801a      	strh	r2, [r3, #0]
 800b1cc:	e070      	b.n	800b2b0 <USB_EPStartXfer+0x10ea>
 800b1ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	691b      	ldr	r3, [r3, #16]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d10c      	bne.n	800b1f8 <USB_EPStartXfer+0x1032>
 800b1de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b1e2:	881b      	ldrh	r3, [r3, #0]
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1ee:	b29a      	uxth	r2, r3
 800b1f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b1f4:	801a      	strh	r2, [r3, #0]
 800b1f6:	e05b      	b.n	800b2b0 <USB_EPStartXfer+0x10ea>
 800b1f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	085b      	lsrs	r3, r3, #1
 800b206:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b20a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b20e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	f003 0301 	and.w	r3, r3, #1
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d004      	beq.n	800b228 <USB_EPStartXfer+0x1062>
 800b21e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b222:	3301      	adds	r3, #1
 800b224:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b228:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b22c:	881b      	ldrh	r3, [r3, #0]
 800b22e:	b29a      	uxth	r2, r3
 800b230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b234:	b29b      	uxth	r3, r3
 800b236:	029b      	lsls	r3, r3, #10
 800b238:	b29b      	uxth	r3, r3
 800b23a:	4313      	orrs	r3, r2
 800b23c:	b29a      	uxth	r2, r3
 800b23e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b242:	801a      	strh	r2, [r3, #0]
 800b244:	e034      	b.n	800b2b0 <USB_EPStartXfer+0x10ea>
 800b246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b24a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	785b      	ldrb	r3, [r3, #1]
 800b252:	2b01      	cmp	r3, #1
 800b254:	d12c      	bne.n	800b2b0 <USB_EPStartXfer+0x10ea>
 800b256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b25a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b268:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b272:	b29b      	uxth	r3, r3
 800b274:	461a      	mov	r2, r3
 800b276:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b27a:	4413      	add	r3, r2
 800b27c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	00da      	lsls	r2, r3, #3
 800b28e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b292:	4413      	add	r3, r2
 800b294:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b298:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b29c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	691b      	ldr	r3, [r3, #16]
 800b2a8:	b29a      	uxth	r2, r3
 800b2aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b2ae:	801a      	strh	r2, [r3, #0]
 800b2b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b2be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	785b      	ldrb	r3, [r3, #1]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	f040 809d 	bne.w	800b40a <USB_EPStartXfer+0x1244>
 800b2d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b2de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b2f4:	4413      	add	r3, r2
 800b2f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b2fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	00da      	lsls	r2, r3, #3
 800b308:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b30c:	4413      	add	r3, r2
 800b30e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b312:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b316:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b31a:	881b      	ldrh	r3, [r3, #0]
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b322:	b29a      	uxth	r2, r3
 800b324:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b328:	801a      	strh	r2, [r3, #0]
 800b32a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b32e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	691b      	ldr	r3, [r3, #16]
 800b336:	2b3e      	cmp	r3, #62	; 0x3e
 800b338:	d92b      	bls.n	800b392 <USB_EPStartXfer+0x11cc>
 800b33a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b33e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	691b      	ldr	r3, [r3, #16]
 800b346:	095b      	lsrs	r3, r3, #5
 800b348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b34c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	f003 031f 	and.w	r3, r3, #31
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d104      	bne.n	800b36a <USB_EPStartXfer+0x11a4>
 800b360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b364:	3b01      	subs	r3, #1
 800b366:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b36a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b36e:	881b      	ldrh	r3, [r3, #0]
 800b370:	b29a      	uxth	r2, r3
 800b372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b376:	b29b      	uxth	r3, r3
 800b378:	029b      	lsls	r3, r3, #10
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	4313      	orrs	r3, r2
 800b37e:	b29b      	uxth	r3, r3
 800b380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b388:	b29a      	uxth	r2, r3
 800b38a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b38e:	801a      	strh	r2, [r3, #0]
 800b390:	e069      	b.n	800b466 <USB_EPStartXfer+0x12a0>
 800b392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	691b      	ldr	r3, [r3, #16]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d10c      	bne.n	800b3bc <USB_EPStartXfer+0x11f6>
 800b3a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3a6:	881b      	ldrh	r3, [r3, #0]
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3b2:	b29a      	uxth	r2, r3
 800b3b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3b8:	801a      	strh	r2, [r3, #0]
 800b3ba:	e054      	b.n	800b466 <USB_EPStartXfer+0x12a0>
 800b3bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	691b      	ldr	r3, [r3, #16]
 800b3c8:	085b      	lsrs	r3, r3, #1
 800b3ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b3ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	f003 0301 	and.w	r3, r3, #1
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d004      	beq.n	800b3ec <USB_EPStartXfer+0x1226>
 800b3e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b3ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3f0:	881b      	ldrh	r3, [r3, #0]
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	029b      	lsls	r3, r3, #10
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	4313      	orrs	r3, r2
 800b400:	b29a      	uxth	r2, r3
 800b402:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b406:	801a      	strh	r2, [r3, #0]
 800b408:	e02d      	b.n	800b466 <USB_EPStartXfer+0x12a0>
 800b40a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b40e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	785b      	ldrb	r3, [r3, #1]
 800b416:	2b01      	cmp	r3, #1
 800b418:	d125      	bne.n	800b466 <USB_EPStartXfer+0x12a0>
 800b41a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b41e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b428:	b29b      	uxth	r3, r3
 800b42a:	461a      	mov	r2, r3
 800b42c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b430:	4413      	add	r3, r2
 800b432:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b43a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	00da      	lsls	r2, r3, #3
 800b444:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b448:	4413      	add	r3, r2
 800b44a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b44e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	b29a      	uxth	r2, r3
 800b460:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b464:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b46a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	69db      	ldr	r3, [r3, #28]
 800b472:	2b00      	cmp	r3, #0
 800b474:	f000 8218 	beq.w	800b8a8 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b47c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	4413      	add	r3, r2
 800b492:	881b      	ldrh	r3, [r3, #0]
 800b494:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b498:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b49c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d005      	beq.n	800b4b0 <USB_EPStartXfer+0x12ea>
 800b4a4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b4a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d10d      	bne.n	800b4cc <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b4b0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b4b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	f040 81f5 	bne.w	800b8a8 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b4be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b4c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	f040 81ee 	bne.w	800b8a8 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b4cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	4413      	add	r3, r2
 800b4e6:	881b      	ldrh	r3, [r3, #0]
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4f2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b4f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	441a      	add	r2, r3
 800b510:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b51c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b520:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b524:	b29b      	uxth	r3, r3
 800b526:	8013      	strh	r3, [r2, #0]
 800b528:	e1be      	b.n	800b8a8 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b52a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b52e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	78db      	ldrb	r3, [r3, #3]
 800b536:	2b01      	cmp	r3, #1
 800b538:	f040 81b4 	bne.w	800b8a4 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b53c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	699a      	ldr	r2, [r3, #24]
 800b548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b54c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	691b      	ldr	r3, [r3, #16]
 800b554:	429a      	cmp	r2, r3
 800b556:	d917      	bls.n	800b588 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b55c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	691b      	ldr	r3, [r3, #16]
 800b564:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b56c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	699a      	ldr	r2, [r3, #24]
 800b574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b578:	1ad2      	subs	r2, r2, r3
 800b57a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b57e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	619a      	str	r2, [r3, #24]
 800b586:	e00e      	b.n	800b5a6 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b58c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	699b      	ldr	r3, [r3, #24]
 800b594:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b59c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b5a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	785b      	ldrb	r3, [r3, #1]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	f040 8085 	bne.w	800b6c2 <USB_EPStartXfer+0x14fc>
 800b5b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b5c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b5dc:	4413      	add	r3, r2
 800b5de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b5e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	00da      	lsls	r2, r3, #3
 800b5f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b5f4:	4413      	add	r3, r2
 800b5f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b5fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b5fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b602:	881b      	ldrh	r3, [r3, #0]
 800b604:	b29b      	uxth	r3, r3
 800b606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b60a:	b29a      	uxth	r2, r3
 800b60c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b610:	801a      	strh	r2, [r3, #0]
 800b612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b616:	2b3e      	cmp	r3, #62	; 0x3e
 800b618:	d923      	bls.n	800b662 <USB_EPStartXfer+0x149c>
 800b61a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b61e:	095b      	lsrs	r3, r3, #5
 800b620:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b628:	f003 031f 	and.w	r3, r3, #31
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d104      	bne.n	800b63a <USB_EPStartXfer+0x1474>
 800b630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b634:	3b01      	subs	r3, #1
 800b636:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b63a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b63e:	881b      	ldrh	r3, [r3, #0]
 800b640:	b29a      	uxth	r2, r3
 800b642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b646:	b29b      	uxth	r3, r3
 800b648:	029b      	lsls	r3, r3, #10
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	4313      	orrs	r3, r2
 800b64e:	b29b      	uxth	r3, r3
 800b650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b658:	b29a      	uxth	r2, r3
 800b65a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b65e:	801a      	strh	r2, [r3, #0]
 800b660:	e060      	b.n	800b724 <USB_EPStartXfer+0x155e>
 800b662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b666:	2b00      	cmp	r3, #0
 800b668:	d10c      	bne.n	800b684 <USB_EPStartXfer+0x14be>
 800b66a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b66e:	881b      	ldrh	r3, [r3, #0]
 800b670:	b29b      	uxth	r3, r3
 800b672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b67a:	b29a      	uxth	r2, r3
 800b67c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b680:	801a      	strh	r2, [r3, #0]
 800b682:	e04f      	b.n	800b724 <USB_EPStartXfer+0x155e>
 800b684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b688:	085b      	lsrs	r3, r3, #1
 800b68a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b68e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b692:	f003 0301 	and.w	r3, r3, #1
 800b696:	2b00      	cmp	r3, #0
 800b698:	d004      	beq.n	800b6a4 <USB_EPStartXfer+0x14de>
 800b69a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b69e:	3301      	adds	r3, #1
 800b6a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b6a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b6a8:	881b      	ldrh	r3, [r3, #0]
 800b6aa:	b29a      	uxth	r2, r3
 800b6ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	029b      	lsls	r3, r3, #10
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	b29a      	uxth	r2, r3
 800b6ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b6be:	801a      	strh	r2, [r3, #0]
 800b6c0:	e030      	b.n	800b724 <USB_EPStartXfer+0x155e>
 800b6c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	785b      	ldrb	r3, [r3, #1]
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d128      	bne.n	800b724 <USB_EPStartXfer+0x155e>
 800b6d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b6e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6f6:	4413      	add	r3, r2
 800b6f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b6fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	00da      	lsls	r2, r3, #3
 800b70a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b70e:	4413      	add	r3, r2
 800b710:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b71c:	b29a      	uxth	r2, r3
 800b71e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b722:	801a      	strh	r2, [r3, #0]
 800b724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b728:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	785b      	ldrb	r3, [r3, #1]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	f040 8085 	bne.w	800b84e <USB_EPStartXfer+0x1688>
 800b744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b748:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b756:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b760:	b29b      	uxth	r3, r3
 800b762:	461a      	mov	r2, r3
 800b764:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b768:	4413      	add	r3, r2
 800b76a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b76e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	00da      	lsls	r2, r3, #3
 800b77c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b780:	4413      	add	r3, r2
 800b782:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b786:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b78a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b78e:	881b      	ldrh	r3, [r3, #0]
 800b790:	b29b      	uxth	r3, r3
 800b792:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b796:	b29a      	uxth	r2, r3
 800b798:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b79c:	801a      	strh	r2, [r3, #0]
 800b79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a2:	2b3e      	cmp	r3, #62	; 0x3e
 800b7a4:	d923      	bls.n	800b7ee <USB_EPStartXfer+0x1628>
 800b7a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7aa:	095b      	lsrs	r3, r3, #5
 800b7ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b7b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7b4:	f003 031f 	and.w	r3, r3, #31
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d104      	bne.n	800b7c6 <USB_EPStartXfer+0x1600>
 800b7bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b7c0:	3b01      	subs	r3, #1
 800b7c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b7c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b7ca:	881b      	ldrh	r3, [r3, #0]
 800b7cc:	b29a      	uxth	r2, r3
 800b7ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	029b      	lsls	r3, r3, #10
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7e4:	b29a      	uxth	r2, r3
 800b7e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b7ea:	801a      	strh	r2, [r3, #0]
 800b7ec:	e05c      	b.n	800b8a8 <USB_EPStartXfer+0x16e2>
 800b7ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d10c      	bne.n	800b810 <USB_EPStartXfer+0x164a>
 800b7f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b7fa:	881b      	ldrh	r3, [r3, #0]
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b806:	b29a      	uxth	r2, r3
 800b808:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b80c:	801a      	strh	r2, [r3, #0]
 800b80e:	e04b      	b.n	800b8a8 <USB_EPStartXfer+0x16e2>
 800b810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b814:	085b      	lsrs	r3, r3, #1
 800b816:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b81a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b81e:	f003 0301 	and.w	r3, r3, #1
 800b822:	2b00      	cmp	r3, #0
 800b824:	d004      	beq.n	800b830 <USB_EPStartXfer+0x166a>
 800b826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b82a:	3301      	adds	r3, #1
 800b82c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b830:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b834:	881b      	ldrh	r3, [r3, #0]
 800b836:	b29a      	uxth	r2, r3
 800b838:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	029b      	lsls	r3, r3, #10
 800b840:	b29b      	uxth	r3, r3
 800b842:	4313      	orrs	r3, r2
 800b844:	b29a      	uxth	r2, r3
 800b846:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b84a:	801a      	strh	r2, [r3, #0]
 800b84c:	e02c      	b.n	800b8a8 <USB_EPStartXfer+0x16e2>
 800b84e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	785b      	ldrb	r3, [r3, #1]
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	d124      	bne.n	800b8a8 <USB_EPStartXfer+0x16e2>
 800b85e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b862:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	461a      	mov	r2, r3
 800b870:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b874:	4413      	add	r3, r2
 800b876:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b87a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b87e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	00da      	lsls	r2, r3, #3
 800b888:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b88c:	4413      	add	r3, r2
 800b88e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b892:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b89a:	b29a      	uxth	r2, r3
 800b89c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b8a0:	801a      	strh	r2, [r3, #0]
 800b8a2:	e001      	b.n	800b8a8 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	e03a      	b.n	800b91e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b8a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	4413      	add	r3, r2
 800b8c2:	881b      	ldrh	r3, [r3, #0]
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b8ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8ce:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b8d2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b8d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b8da:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b8de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b8e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b8e6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b8ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8f2:	681a      	ldr	r2, [r3, #0]
 800b8f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	441a      	add	r2, r3
 800b904:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b90c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b918:	b29b      	uxth	r3, r3
 800b91a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b928:	b480      	push	{r7}
 800b92a:	b085      	sub	sp, #20
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	785b      	ldrb	r3, [r3, #1]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d020      	beq.n	800b97c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b93a:	687a      	ldr	r2, [r7, #4]
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	009b      	lsls	r3, r3, #2
 800b942:	4413      	add	r3, r2
 800b944:	881b      	ldrh	r3, [r3, #0]
 800b946:	b29b      	uxth	r3, r3
 800b948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b94c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b950:	81bb      	strh	r3, [r7, #12]
 800b952:	89bb      	ldrh	r3, [r7, #12]
 800b954:	f083 0310 	eor.w	r3, r3, #16
 800b958:	81bb      	strh	r3, [r7, #12]
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	441a      	add	r2, r3
 800b964:	89bb      	ldrh	r3, [r7, #12]
 800b966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b96a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b96e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b976:	b29b      	uxth	r3, r3
 800b978:	8013      	strh	r3, [r2, #0]
 800b97a:	e01f      	b.n	800b9bc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	009b      	lsls	r3, r3, #2
 800b984:	4413      	add	r3, r2
 800b986:	881b      	ldrh	r3, [r3, #0]
 800b988:	b29b      	uxth	r3, r3
 800b98a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b98e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b992:	81fb      	strh	r3, [r7, #14]
 800b994:	89fb      	ldrh	r3, [r7, #14]
 800b996:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b99a:	81fb      	strh	r3, [r7, #14]
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	441a      	add	r2, r3
 800b9a6:	89fb      	ldrh	r3, [r7, #14]
 800b9a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3714      	adds	r7, #20
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr

0800b9ca <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b9ca:	b480      	push	{r7}
 800b9cc:	b087      	sub	sp, #28
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
 800b9d2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	7b1b      	ldrb	r3, [r3, #12]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	f040 809d 	bne.w	800bb18 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	785b      	ldrb	r3, [r3, #1]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d04c      	beq.n	800ba80 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	4413      	add	r3, r2
 800b9f0:	881b      	ldrh	r3, [r3, #0]
 800b9f2:	823b      	strh	r3, [r7, #16]
 800b9f4:	8a3b      	ldrh	r3, [r7, #16]
 800b9f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d01b      	beq.n	800ba36 <USB_EPClearStall+0x6c>
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	4413      	add	r3, r2
 800ba08:	881b      	ldrh	r3, [r3, #0]
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba14:	81fb      	strh	r3, [r7, #14]
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	009b      	lsls	r3, r3, #2
 800ba1e:	441a      	add	r2, r3
 800ba20:	89fb      	ldrh	r3, [r7, #14]
 800ba22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	78db      	ldrb	r3, [r3, #3]
 800ba3a:	2b01      	cmp	r3, #1
 800ba3c:	d06c      	beq.n	800bb18 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	4413      	add	r3, r2
 800ba48:	881b      	ldrh	r3, [r3, #0]
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba54:	81bb      	strh	r3, [r7, #12]
 800ba56:	89bb      	ldrh	r3, [r7, #12]
 800ba58:	f083 0320 	eor.w	r3, r3, #32
 800ba5c:	81bb      	strh	r3, [r7, #12]
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	441a      	add	r2, r3
 800ba68:	89bb      	ldrh	r3, [r7, #12]
 800ba6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	8013      	strh	r3, [r2, #0]
 800ba7e:	e04b      	b.n	800bb18 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4413      	add	r3, r2
 800ba8a:	881b      	ldrh	r3, [r3, #0]
 800ba8c:	82fb      	strh	r3, [r7, #22]
 800ba8e:	8afb      	ldrh	r3, [r7, #22]
 800ba90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d01b      	beq.n	800bad0 <USB_EPClearStall+0x106>
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	4413      	add	r3, r2
 800baa2:	881b      	ldrh	r3, [r3, #0]
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800baaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baae:	82bb      	strh	r3, [r7, #20]
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	441a      	add	r2, r3
 800baba:	8abb      	ldrh	r3, [r7, #20]
 800babc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bacc:	b29b      	uxth	r3, r3
 800bace:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bad0:	687a      	ldr	r2, [r7, #4]
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	4413      	add	r3, r2
 800bada:	881b      	ldrh	r3, [r3, #0]
 800badc:	b29b      	uxth	r3, r3
 800bade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bae6:	827b      	strh	r3, [r7, #18]
 800bae8:	8a7b      	ldrh	r3, [r7, #18]
 800baea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800baee:	827b      	strh	r3, [r7, #18]
 800baf0:	8a7b      	ldrh	r3, [r7, #18]
 800baf2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800baf6:	827b      	strh	r3, [r7, #18]
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	441a      	add	r2, r3
 800bb02:	8a7b      	ldrh	r3, [r7, #18]
 800bb04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800bb18:	2300      	movs	r3, #0
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	371c      	adds	r7, #28
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr

0800bb26 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800bb26:	b480      	push	{r7}
 800bb28:	b083      	sub	sp, #12
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
 800bb2e:	460b      	mov	r3, r1
 800bb30:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800bb32:	78fb      	ldrb	r3, [r7, #3]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d103      	bne.n	800bb40 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2280      	movs	r2, #128	; 0x80
 800bb3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	370c      	adds	r7, #12
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr

0800bb4e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800bb4e:	b480      	push	{r7}
 800bb50:	b083      	sub	sp, #12
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800bb6e:	2300      	movs	r3, #0
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b085      	sub	sp, #20
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3714      	adds	r7, #20
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b08b      	sub	sp, #44	; 0x2c
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	60f8      	str	r0, [r7, #12]
 800bba4:	60b9      	str	r1, [r7, #8]
 800bba6:	4611      	mov	r1, r2
 800bba8:	461a      	mov	r2, r3
 800bbaa:	460b      	mov	r3, r1
 800bbac:	80fb      	strh	r3, [r7, #6]
 800bbae:	4613      	mov	r3, r2
 800bbb0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bbb2:	88bb      	ldrh	r3, [r7, #4]
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	085b      	lsrs	r3, r3, #1
 800bbb8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bbc2:	88fa      	ldrh	r2, [r7, #6]
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	4413      	add	r3, r2
 800bbc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bbcc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	627b      	str	r3, [r7, #36]	; 0x24
 800bbd2:	e01b      	b.n	800bc0c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800bbda:	69fb      	ldr	r3, [r7, #28]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	021b      	lsls	r3, r3, #8
 800bbe2:	b21a      	sxth	r2, r3
 800bbe4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	b21b      	sxth	r3, r3
 800bbec:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800bbee:	6a3b      	ldr	r3, [r7, #32]
 800bbf0:	8a7a      	ldrh	r2, [r7, #18]
 800bbf2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bbf4:	6a3b      	ldr	r3, [r7, #32]
 800bbf6:	3302      	adds	r3, #2
 800bbf8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800bbfa:	69fb      	ldr	r3, [r7, #28]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	3301      	adds	r3, #1
 800bc04:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc08:	3b01      	subs	r3, #1
 800bc0a:	627b      	str	r3, [r7, #36]	; 0x24
 800bc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d1e0      	bne.n	800bbd4 <USB_WritePMA+0x38>
  }
}
 800bc12:	bf00      	nop
 800bc14:	bf00      	nop
 800bc16:	372c      	adds	r7, #44	; 0x2c
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr

0800bc20 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b08b      	sub	sp, #44	; 0x2c
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	4611      	mov	r1, r2
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	460b      	mov	r3, r1
 800bc30:	80fb      	strh	r3, [r7, #6]
 800bc32:	4613      	mov	r3, r2
 800bc34:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bc36:	88bb      	ldrh	r3, [r7, #4]
 800bc38:	085b      	lsrs	r3, r3, #1
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bc46:	88fa      	ldrh	r2, [r7, #6]
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	4413      	add	r3, r2
 800bc4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc50:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	627b      	str	r3, [r7, #36]	; 0x24
 800bc56:	e018      	b.n	800bc8a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800bc58:	6a3b      	ldr	r3, [r7, #32]
 800bc5a:	881b      	ldrh	r3, [r3, #0]
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bc60:	6a3b      	ldr	r3, [r7, #32]
 800bc62:	3302      	adds	r3, #2
 800bc64:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	b2da      	uxtb	r2, r3
 800bc6a:	69fb      	ldr	r3, [r7, #28]
 800bc6c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	3301      	adds	r3, #1
 800bc72:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	0a1b      	lsrs	r3, r3, #8
 800bc78:	b2da      	uxtb	r2, r3
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bc7e:	69fb      	ldr	r3, [r7, #28]
 800bc80:	3301      	adds	r3, #1
 800bc82:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc86:	3b01      	subs	r3, #1
 800bc88:	627b      	str	r3, [r7, #36]	; 0x24
 800bc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d1e3      	bne.n	800bc58 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bc90:	88bb      	ldrh	r3, [r7, #4]
 800bc92:	f003 0301 	and.w	r3, r3, #1
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d007      	beq.n	800bcac <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800bc9c:	6a3b      	ldr	r3, [r7, #32]
 800bc9e:	881b      	ldrh	r3, [r3, #0]
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	b2da      	uxtb	r2, r3
 800bca8:	69fb      	ldr	r3, [r7, #28]
 800bcaa:	701a      	strb	r2, [r3, #0]
  }
}
 800bcac:	bf00      	nop
 800bcae:	372c      	adds	r7, #44	; 0x2c
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bcc4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bcc8:	f002 f920 	bl	800df0c <USBD_static_malloc>
 800bccc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d105      	bne.n	800bce0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bcdc:	2302      	movs	r3, #2
 800bcde:	e066      	b.n	800bdae <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	7c1b      	ldrb	r3, [r3, #16]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d119      	bne.n	800bd24 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bcf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bcf4:	2202      	movs	r2, #2
 800bcf6:	2181      	movs	r1, #129	; 0x81
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f001 ffae 	bl	800dc5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2201      	movs	r2, #1
 800bd02:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bd04:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd08:	2202      	movs	r2, #2
 800bd0a:	2101      	movs	r1, #1
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f001 ffa4 	bl	800dc5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2201      	movs	r2, #1
 800bd16:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2210      	movs	r2, #16
 800bd1e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bd22:	e016      	b.n	800bd52 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bd24:	2340      	movs	r3, #64	; 0x40
 800bd26:	2202      	movs	r2, #2
 800bd28:	2181      	movs	r1, #129	; 0x81
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f001 ff95 	bl	800dc5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2201      	movs	r2, #1
 800bd34:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bd36:	2340      	movs	r3, #64	; 0x40
 800bd38:	2202      	movs	r2, #2
 800bd3a:	2101      	movs	r1, #1
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f001 ff8c 	bl	800dc5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2201      	movs	r2, #1
 800bd46:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2210      	movs	r2, #16
 800bd4e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bd52:	2308      	movs	r3, #8
 800bd54:	2203      	movs	r2, #3
 800bd56:	2182      	movs	r1, #130	; 0x82
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f001 ff7e 	bl	800dc5a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2201      	movs	r2, #1
 800bd62:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2200      	movs	r2, #0
 800bd74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	7c1b      	ldrb	r3, [r3, #16]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d109      	bne.n	800bd9c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd92:	2101      	movs	r1, #1
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f002 f84f 	bl	800de38 <USBD_LL_PrepareReceive>
 800bd9a:	e007      	b.n	800bdac <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bda2:	2340      	movs	r3, #64	; 0x40
 800bda4:	2101      	movs	r1, #1
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f002 f846 	bl	800de38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bdac:	2300      	movs	r3, #0
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3710      	adds	r7, #16
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}

0800bdb6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bdb6:	b580      	push	{r7, lr}
 800bdb8:	b082      	sub	sp, #8
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bdc2:	2181      	movs	r1, #129	; 0x81
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f001 ff6e 	bl	800dca6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bdd0:	2101      	movs	r1, #1
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f001 ff67 	bl	800dca6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bde0:	2182      	movs	r1, #130	; 0x82
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f001 ff5f 	bl	800dca6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d00e      	beq.n	800be20 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be12:	4618      	mov	r0, r3
 800be14:	f002 f888 	bl	800df28 <USBD_static_free>
    pdev->pClassData = NULL;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800be20:	2300      	movs	r3, #0
}
 800be22:	4618      	mov	r0, r3
 800be24:	3708      	adds	r7, #8
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
	...

0800be2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b086      	sub	sp, #24
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be3c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800be3e:	2300      	movs	r3, #0
 800be40:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800be42:	2300      	movs	r3, #0
 800be44:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800be46:	2300      	movs	r3, #0
 800be48:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d101      	bne.n	800be54 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800be50:	2303      	movs	r3, #3
 800be52:	e0af      	b.n	800bfb4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d03f      	beq.n	800bee0 <USBD_CDC_Setup+0xb4>
 800be60:	2b20      	cmp	r3, #32
 800be62:	f040 809f 	bne.w	800bfa4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	88db      	ldrh	r3, [r3, #6]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d02e      	beq.n	800becc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	b25b      	sxtb	r3, r3
 800be74:	2b00      	cmp	r3, #0
 800be76:	da16      	bge.n	800bea6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	683a      	ldr	r2, [r7, #0]
 800be82:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800be84:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800be86:	683a      	ldr	r2, [r7, #0]
 800be88:	88d2      	ldrh	r2, [r2, #6]
 800be8a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	88db      	ldrh	r3, [r3, #6]
 800be90:	2b07      	cmp	r3, #7
 800be92:	bf28      	it	cs
 800be94:	2307      	movcs	r3, #7
 800be96:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	89fa      	ldrh	r2, [r7, #14]
 800be9c:	4619      	mov	r1, r3
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f001 facf 	bl	800d442 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800bea4:	e085      	b.n	800bfb2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	785a      	ldrb	r2, [r3, #1]
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	88db      	ldrh	r3, [r3, #6]
 800beb4:	b2da      	uxtb	r2, r3
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bebc:	6939      	ldr	r1, [r7, #16]
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	88db      	ldrh	r3, [r3, #6]
 800bec2:	461a      	mov	r2, r3
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f001 fae8 	bl	800d49a <USBD_CtlPrepareRx>
      break;
 800beca:	e072      	b.n	800bfb2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	683a      	ldr	r2, [r7, #0]
 800bed6:	7850      	ldrb	r0, [r2, #1]
 800bed8:	2200      	movs	r2, #0
 800beda:	6839      	ldr	r1, [r7, #0]
 800bedc:	4798      	blx	r3
      break;
 800bede:	e068      	b.n	800bfb2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	785b      	ldrb	r3, [r3, #1]
 800bee4:	2b0b      	cmp	r3, #11
 800bee6:	d852      	bhi.n	800bf8e <USBD_CDC_Setup+0x162>
 800bee8:	a201      	add	r2, pc, #4	; (adr r2, 800bef0 <USBD_CDC_Setup+0xc4>)
 800beea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beee:	bf00      	nop
 800bef0:	0800bf21 	.word	0x0800bf21
 800bef4:	0800bf9d 	.word	0x0800bf9d
 800bef8:	0800bf8f 	.word	0x0800bf8f
 800befc:	0800bf8f 	.word	0x0800bf8f
 800bf00:	0800bf8f 	.word	0x0800bf8f
 800bf04:	0800bf8f 	.word	0x0800bf8f
 800bf08:	0800bf8f 	.word	0x0800bf8f
 800bf0c:	0800bf8f 	.word	0x0800bf8f
 800bf10:	0800bf8f 	.word	0x0800bf8f
 800bf14:	0800bf8f 	.word	0x0800bf8f
 800bf18:	0800bf4b 	.word	0x0800bf4b
 800bf1c:	0800bf75 	.word	0x0800bf75
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	2b03      	cmp	r3, #3
 800bf2a:	d107      	bne.n	800bf3c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bf2c:	f107 030a 	add.w	r3, r7, #10
 800bf30:	2202      	movs	r2, #2
 800bf32:	4619      	mov	r1, r3
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f001 fa84 	bl	800d442 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bf3a:	e032      	b.n	800bfa2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f001 fa0e 	bl	800d360 <USBD_CtlError>
            ret = USBD_FAIL;
 800bf44:	2303      	movs	r3, #3
 800bf46:	75fb      	strb	r3, [r7, #23]
          break;
 800bf48:	e02b      	b.n	800bfa2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	2b03      	cmp	r3, #3
 800bf54:	d107      	bne.n	800bf66 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bf56:	f107 030d 	add.w	r3, r7, #13
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f001 fa6f 	bl	800d442 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bf64:	e01d      	b.n	800bfa2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bf66:	6839      	ldr	r1, [r7, #0]
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f001 f9f9 	bl	800d360 <USBD_CtlError>
            ret = USBD_FAIL;
 800bf6e:	2303      	movs	r3, #3
 800bf70:	75fb      	strb	r3, [r7, #23]
          break;
 800bf72:	e016      	b.n	800bfa2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	2b03      	cmp	r3, #3
 800bf7e:	d00f      	beq.n	800bfa0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800bf80:	6839      	ldr	r1, [r7, #0]
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f001 f9ec 	bl	800d360 <USBD_CtlError>
            ret = USBD_FAIL;
 800bf88:	2303      	movs	r3, #3
 800bf8a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bf8c:	e008      	b.n	800bfa0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bf8e:	6839      	ldr	r1, [r7, #0]
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f001 f9e5 	bl	800d360 <USBD_CtlError>
          ret = USBD_FAIL;
 800bf96:	2303      	movs	r3, #3
 800bf98:	75fb      	strb	r3, [r7, #23]
          break;
 800bf9a:	e002      	b.n	800bfa2 <USBD_CDC_Setup+0x176>
          break;
 800bf9c:	bf00      	nop
 800bf9e:	e008      	b.n	800bfb2 <USBD_CDC_Setup+0x186>
          break;
 800bfa0:	bf00      	nop
      }
      break;
 800bfa2:	e006      	b.n	800bfb2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800bfa4:	6839      	ldr	r1, [r7, #0]
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f001 f9da 	bl	800d360 <USBD_CtlError>
      ret = USBD_FAIL;
 800bfac:	2303      	movs	r3, #3
 800bfae:	75fb      	strb	r3, [r7, #23]
      break;
 800bfb0:	bf00      	nop
  }

  return (uint8_t)ret;
 800bfb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3718      	adds	r7, #24
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bfce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d101      	bne.n	800bfde <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bfda:	2303      	movs	r3, #3
 800bfdc:	e04f      	b.n	800c07e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfe4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bfe6:	78fa      	ldrb	r2, [r7, #3]
 800bfe8:	6879      	ldr	r1, [r7, #4]
 800bfea:	4613      	mov	r3, r2
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	4413      	add	r3, r2
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	440b      	add	r3, r1
 800bff4:	3318      	adds	r3, #24
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d029      	beq.n	800c050 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bffc:	78fa      	ldrb	r2, [r7, #3]
 800bffe:	6879      	ldr	r1, [r7, #4]
 800c000:	4613      	mov	r3, r2
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	4413      	add	r3, r2
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	440b      	add	r3, r1
 800c00a:	3318      	adds	r3, #24
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	78f9      	ldrb	r1, [r7, #3]
 800c010:	68f8      	ldr	r0, [r7, #12]
 800c012:	460b      	mov	r3, r1
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	440b      	add	r3, r1
 800c018:	00db      	lsls	r3, r3, #3
 800c01a:	4403      	add	r3, r0
 800c01c:	3320      	adds	r3, #32
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	fbb2 f1f3 	udiv	r1, r2, r3
 800c024:	fb01 f303 	mul.w	r3, r1, r3
 800c028:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d110      	bne.n	800c050 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c02e:	78fa      	ldrb	r2, [r7, #3]
 800c030:	6879      	ldr	r1, [r7, #4]
 800c032:	4613      	mov	r3, r2
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	4413      	add	r3, r2
 800c038:	009b      	lsls	r3, r3, #2
 800c03a:	440b      	add	r3, r1
 800c03c:	3318      	adds	r3, #24
 800c03e:	2200      	movs	r2, #0
 800c040:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c042:	78f9      	ldrb	r1, [r7, #3]
 800c044:	2300      	movs	r3, #0
 800c046:	2200      	movs	r2, #0
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f001 fed4 	bl	800ddf6 <USBD_LL_Transmit>
 800c04e:	e015      	b.n	800c07c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	2200      	movs	r2, #0
 800c054:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c05e:	691b      	ldr	r3, [r3, #16]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d00b      	beq.n	800c07c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c06a:	691b      	ldr	r3, [r3, #16]
 800c06c:	68ba      	ldr	r2, [r7, #8]
 800c06e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c072:	68ba      	ldr	r2, [r7, #8]
 800c074:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c078:	78fa      	ldrb	r2, [r7, #3]
 800c07a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c07c:	2300      	movs	r3, #0
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3710      	adds	r7, #16
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b084      	sub	sp, #16
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
 800c08e:	460b      	mov	r3, r1
 800c090:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c098:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d101      	bne.n	800c0a8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c0a4:	2303      	movs	r3, #3
 800c0a6:	e015      	b.n	800c0d4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c0a8:	78fb      	ldrb	r3, [r7, #3]
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f001 fee4 	bl	800de7a <USBD_LL_GetRxDataSize>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	68fa      	ldr	r2, [r7, #12]
 800c0c4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c0c8:	68fa      	ldr	r2, [r7, #12]
 800c0ca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c0ce:	4611      	mov	r1, r2
 800c0d0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c0d2:	2300      	movs	r3, #0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3710      	adds	r7, #16
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0ea:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d101      	bne.n	800c0f6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c0f2:	2303      	movs	r3, #3
 800c0f4:	e01b      	b.n	800c12e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d015      	beq.n	800c12c <USBD_CDC_EP0_RxReady+0x50>
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c106:	2bff      	cmp	r3, #255	; 0xff
 800c108:	d010      	beq.n	800c12c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c110:	689b      	ldr	r3, [r3, #8]
 800c112:	68fa      	ldr	r2, [r7, #12]
 800c114:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c118:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c11a:	68fa      	ldr	r2, [r7, #12]
 800c11c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c120:	b292      	uxth	r2, r2
 800c122:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	22ff      	movs	r2, #255	; 0xff
 800c128:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c12c:	2300      	movs	r3, #0
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
	...

0800c138 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c138:	b480      	push	{r7}
 800c13a:	b083      	sub	sp, #12
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2243      	movs	r2, #67	; 0x43
 800c144:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c146:	4b03      	ldr	r3, [pc, #12]	; (800c154 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c148:	4618      	mov	r0, r3
 800c14a:	370c      	adds	r7, #12
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr
 800c154:	200000a0 	.word	0x200000a0

0800c158 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c158:	b480      	push	{r7}
 800c15a:	b083      	sub	sp, #12
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2243      	movs	r2, #67	; 0x43
 800c164:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c166:	4b03      	ldr	r3, [pc, #12]	; (800c174 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c168:	4618      	mov	r0, r3
 800c16a:	370c      	adds	r7, #12
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr
 800c174:	2000005c 	.word	0x2000005c

0800c178 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c178:	b480      	push	{r7}
 800c17a:	b083      	sub	sp, #12
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2243      	movs	r2, #67	; 0x43
 800c184:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c186:	4b03      	ldr	r3, [pc, #12]	; (800c194 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c188:	4618      	mov	r0, r3
 800c18a:	370c      	adds	r7, #12
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr
 800c194:	200000e4 	.word	0x200000e4

0800c198 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c198:	b480      	push	{r7}
 800c19a:	b083      	sub	sp, #12
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	220a      	movs	r2, #10
 800c1a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c1a6:	4b03      	ldr	r3, [pc, #12]	; (800c1b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	370c      	adds	r7, #12
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr
 800c1b4:	20000018 	.word	0x20000018

0800c1b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b083      	sub	sp, #12
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d101      	bne.n	800c1cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c1c8:	2303      	movs	r3, #3
 800c1ca:	e004      	b.n	800c1d6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	683a      	ldr	r2, [r7, #0]
 800c1d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c1d4:	2300      	movs	r3, #0
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	370c      	adds	r7, #12
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr

0800c1e2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c1e2:	b480      	push	{r7}
 800c1e4:	b087      	sub	sp, #28
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	60f8      	str	r0, [r7, #12]
 800c1ea:	60b9      	str	r1, [r7, #8]
 800c1ec:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1f4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d101      	bne.n	800c200 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c1fc:	2303      	movs	r3, #3
 800c1fe:	e008      	b.n	800c212 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	68ba      	ldr	r2, [r7, #8]
 800c204:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c210:	2300      	movs	r3, #0
}
 800c212:	4618      	mov	r0, r3
 800c214:	371c      	adds	r7, #28
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr

0800c21e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c21e:	b480      	push	{r7}
 800c220:	b085      	sub	sp, #20
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
 800c226:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c22e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d101      	bne.n	800c23a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c236:	2303      	movs	r3, #3
 800c238:	e004      	b.n	800c244 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	683a      	ldr	r2, [r7, #0]
 800c23e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	3714      	adds	r7, #20
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c25e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c260:	2301      	movs	r3, #1
 800c262:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d101      	bne.n	800c272 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c26e:	2303      	movs	r3, #3
 800c270:	e01a      	b.n	800c2a8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d114      	bne.n	800c2a6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	2201      	movs	r2, #1
 800c280:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c29a:	2181      	movs	r1, #129	; 0x81
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f001 fdaa 	bl	800ddf6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c2a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3710      	adds	r7, #16
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d101      	bne.n	800c2ce <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c2ca:	2303      	movs	r3, #3
 800c2cc:	e016      	b.n	800c2fc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	7c1b      	ldrb	r3, [r3, #16]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d109      	bne.n	800c2ea <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c2dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2e0:	2101      	movs	r1, #1
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f001 fda8 	bl	800de38 <USBD_LL_PrepareReceive>
 800c2e8:	e007      	b.n	800c2fa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c2f0:	2340      	movs	r3, #64	; 0x40
 800c2f2:	2101      	movs	r1, #1
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f001 fd9f 	bl	800de38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c2fa:	2300      	movs	r3, #0
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3710      	adds	r7, #16
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}

0800c304 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b086      	sub	sp, #24
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	4613      	mov	r3, r2
 800c310:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d101      	bne.n	800c31c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c318:	2303      	movs	r3, #3
 800c31a:	e01f      	b.n	800c35c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2200      	movs	r2, #0
 800c320:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2200      	movs	r2, #0
 800c328:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2200      	movs	r2, #0
 800c330:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d003      	beq.n	800c342 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	68ba      	ldr	r2, [r7, #8]
 800c33e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2201      	movs	r2, #1
 800c346:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	79fa      	ldrb	r2, [r7, #7]
 800c34e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c350:	68f8      	ldr	r0, [r7, #12]
 800c352:	f001 fc07 	bl	800db64 <USBD_LL_Init>
 800c356:	4603      	mov	r3, r0
 800c358:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c35a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3718      	adds	r7, #24
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c36e:	2300      	movs	r3, #0
 800c370:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d101      	bne.n	800c37c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c378:	2303      	movs	r3, #3
 800c37a:	e016      	b.n	800c3aa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	683a      	ldr	r2, [r7, #0]
 800c380:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00b      	beq.n	800c3a8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c398:	f107 020e 	add.w	r2, r7, #14
 800c39c:	4610      	mov	r0, r2
 800c39e:	4798      	blx	r3
 800c3a0:	4602      	mov	r2, r0
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c3a8:	2300      	movs	r3, #0
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3710      	adds	r7, #16
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}

0800c3b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c3b2:	b580      	push	{r7, lr}
 800c3b4:	b082      	sub	sp, #8
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f001 fc32 	bl	800dc24 <USBD_LL_Start>
 800c3c0:	4603      	mov	r3, r0
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3708      	adds	r7, #8
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}

0800c3ca <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c3ca:	b480      	push	{r7}
 800c3cc:	b083      	sub	sp, #12
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c3d2:	2300      	movs	r3, #0
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	370c      	adds	r7, #12
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c3ec:	2303      	movs	r3, #3
 800c3ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d009      	beq.n	800c40e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	78fa      	ldrb	r2, [r7, #3]
 800c404:	4611      	mov	r1, r2
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	4798      	blx	r3
 800c40a:	4603      	mov	r3, r0
 800c40c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c410:	4618      	mov	r0, r3
 800c412:	3710      	adds	r7, #16
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	460b      	mov	r3, r1
 800c422:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d007      	beq.n	800c43e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	78fa      	ldrb	r2, [r7, #3]
 800c438:	4611      	mov	r1, r2
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	4798      	blx	r3
  }

  return USBD_OK;
 800c43e:	2300      	movs	r3, #0
}
 800c440:	4618      	mov	r0, r3
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c458:	6839      	ldr	r1, [r7, #0]
 800c45a:	4618      	mov	r0, r3
 800c45c:	f000 ff46 	bl	800d2ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2201      	movs	r2, #1
 800c464:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c46e:	461a      	mov	r2, r3
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c47c:	f003 031f 	and.w	r3, r3, #31
 800c480:	2b02      	cmp	r3, #2
 800c482:	d01a      	beq.n	800c4ba <USBD_LL_SetupStage+0x72>
 800c484:	2b02      	cmp	r3, #2
 800c486:	d822      	bhi.n	800c4ce <USBD_LL_SetupStage+0x86>
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d002      	beq.n	800c492 <USBD_LL_SetupStage+0x4a>
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d00a      	beq.n	800c4a6 <USBD_LL_SetupStage+0x5e>
 800c490:	e01d      	b.n	800c4ce <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c498:	4619      	mov	r1, r3
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 f9ee 	bl	800c87c <USBD_StdDevReq>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	73fb      	strb	r3, [r7, #15]
      break;
 800c4a4:	e020      	b.n	800c4e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 fa52 	bl	800c958 <USBD_StdItfReq>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	73fb      	strb	r3, [r7, #15]
      break;
 800c4b8:	e016      	b.n	800c4e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 fa91 	bl	800c9ea <USBD_StdEPReq>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	73fb      	strb	r3, [r7, #15]
      break;
 800c4cc:	e00c      	b.n	800c4e8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c4d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	4619      	mov	r1, r3
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f001 fc01 	bl	800dce4 <USBD_LL_StallEP>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	73fb      	strb	r3, [r7, #15]
      break;
 800c4e6:	bf00      	nop
  }

  return ret;
 800c4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3710      	adds	r7, #16
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}

0800c4f2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b086      	sub	sp, #24
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	60f8      	str	r0, [r7, #12]
 800c4fa:	460b      	mov	r3, r1
 800c4fc:	607a      	str	r2, [r7, #4]
 800c4fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c500:	7afb      	ldrb	r3, [r7, #11]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d138      	bne.n	800c578 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c50c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c514:	2b03      	cmp	r3, #3
 800c516:	d14a      	bne.n	800c5ae <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	689a      	ldr	r2, [r3, #8]
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	68db      	ldr	r3, [r3, #12]
 800c520:	429a      	cmp	r2, r3
 800c522:	d913      	bls.n	800c54c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	689a      	ldr	r2, [r3, #8]
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	1ad2      	subs	r2, r2, r3
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	68da      	ldr	r2, [r3, #12]
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	4293      	cmp	r3, r2
 800c53c:	bf28      	it	cs
 800c53e:	4613      	movcs	r3, r2
 800c540:	461a      	mov	r2, r3
 800c542:	6879      	ldr	r1, [r7, #4]
 800c544:	68f8      	ldr	r0, [r7, #12]
 800c546:	f000 ffc5 	bl	800d4d4 <USBD_CtlContinueRx>
 800c54a:	e030      	b.n	800c5ae <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c552:	b2db      	uxtb	r3, r3
 800c554:	2b03      	cmp	r3, #3
 800c556:	d10b      	bne.n	800c570 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c55e:	691b      	ldr	r3, [r3, #16]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d005      	beq.n	800c570 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c56a:	691b      	ldr	r3, [r3, #16]
 800c56c:	68f8      	ldr	r0, [r7, #12]
 800c56e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c570:	68f8      	ldr	r0, [r7, #12]
 800c572:	f000 ffc0 	bl	800d4f6 <USBD_CtlSendStatus>
 800c576:	e01a      	b.n	800c5ae <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	2b03      	cmp	r3, #3
 800c582:	d114      	bne.n	800c5ae <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c58a:	699b      	ldr	r3, [r3, #24]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d00e      	beq.n	800c5ae <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c596:	699b      	ldr	r3, [r3, #24]
 800c598:	7afa      	ldrb	r2, [r7, #11]
 800c59a:	4611      	mov	r1, r2
 800c59c:	68f8      	ldr	r0, [r7, #12]
 800c59e:	4798      	blx	r3
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c5a4:	7dfb      	ldrb	r3, [r7, #23]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d001      	beq.n	800c5ae <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c5aa:	7dfb      	ldrb	r3, [r7, #23]
 800c5ac:	e000      	b.n	800c5b0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c5ae:	2300      	movs	r3, #0
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3718      	adds	r7, #24
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b086      	sub	sp, #24
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	60f8      	str	r0, [r7, #12]
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	607a      	str	r2, [r7, #4]
 800c5c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c5c6:	7afb      	ldrb	r3, [r7, #11]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d16b      	bne.n	800c6a4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	3314      	adds	r3, #20
 800c5d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c5d8:	2b02      	cmp	r3, #2
 800c5da:	d156      	bne.n	800c68a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	689a      	ldr	r2, [r3, #8]
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d914      	bls.n	800c612 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	689a      	ldr	r2, [r3, #8]
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	68db      	ldr	r3, [r3, #12]
 800c5f0:	1ad2      	subs	r2, r2, r3
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	689b      	ldr	r3, [r3, #8]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	6879      	ldr	r1, [r7, #4]
 800c5fe:	68f8      	ldr	r0, [r7, #12]
 800c600:	f000 ff3a 	bl	800d478 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c604:	2300      	movs	r3, #0
 800c606:	2200      	movs	r2, #0
 800c608:	2100      	movs	r1, #0
 800c60a:	68f8      	ldr	r0, [r7, #12]
 800c60c:	f001 fc14 	bl	800de38 <USBD_LL_PrepareReceive>
 800c610:	e03b      	b.n	800c68a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	68da      	ldr	r2, [r3, #12]
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d11c      	bne.n	800c658 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	685a      	ldr	r2, [r3, #4]
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c626:	429a      	cmp	r2, r3
 800c628:	d316      	bcc.n	800c658 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	685a      	ldr	r2, [r3, #4]
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c634:	429a      	cmp	r2, r3
 800c636:	d20f      	bcs.n	800c658 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c638:	2200      	movs	r2, #0
 800c63a:	2100      	movs	r1, #0
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f000 ff1b 	bl	800d478 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2200      	movs	r2, #0
 800c646:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c64a:	2300      	movs	r3, #0
 800c64c:	2200      	movs	r2, #0
 800c64e:	2100      	movs	r1, #0
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	f001 fbf1 	bl	800de38 <USBD_LL_PrepareReceive>
 800c656:	e018      	b.n	800c68a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	2b03      	cmp	r3, #3
 800c662:	d10b      	bne.n	800c67c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c66a:	68db      	ldr	r3, [r3, #12]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d005      	beq.n	800c67c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c67c:	2180      	movs	r1, #128	; 0x80
 800c67e:	68f8      	ldr	r0, [r7, #12]
 800c680:	f001 fb30 	bl	800dce4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c684:	68f8      	ldr	r0, [r7, #12]
 800c686:	f000 ff49 	bl	800d51c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c690:	2b01      	cmp	r3, #1
 800c692:	d122      	bne.n	800c6da <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c694:	68f8      	ldr	r0, [r7, #12]
 800c696:	f7ff fe98 	bl	800c3ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2200      	movs	r2, #0
 800c69e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c6a2:	e01a      	b.n	800c6da <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	2b03      	cmp	r3, #3
 800c6ae:	d114      	bne.n	800c6da <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6b6:	695b      	ldr	r3, [r3, #20]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d00e      	beq.n	800c6da <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6c2:	695b      	ldr	r3, [r3, #20]
 800c6c4:	7afa      	ldrb	r2, [r7, #11]
 800c6c6:	4611      	mov	r1, r2
 800c6c8:	68f8      	ldr	r0, [r7, #12]
 800c6ca:	4798      	blx	r3
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c6d0:	7dfb      	ldrb	r3, [r7, #23]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d001      	beq.n	800c6da <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c6d6:	7dfb      	ldrb	r3, [r7, #23]
 800c6d8:	e000      	b.n	800c6dc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c6da:	2300      	movs	r3, #0
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3718      	adds	r7, #24
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b082      	sub	sp, #8
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2200      	movs	r2, #0
 800c700:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c710:	2b00      	cmp	r3, #0
 800c712:	d101      	bne.n	800c718 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c714:	2303      	movs	r3, #3
 800c716:	e02f      	b.n	800c778 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d00f      	beq.n	800c742 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d009      	beq.n	800c742 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	687a      	ldr	r2, [r7, #4]
 800c738:	6852      	ldr	r2, [r2, #4]
 800c73a:	b2d2      	uxtb	r2, r2
 800c73c:	4611      	mov	r1, r2
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c742:	2340      	movs	r3, #64	; 0x40
 800c744:	2200      	movs	r2, #0
 800c746:	2100      	movs	r1, #0
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f001 fa86 	bl	800dc5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2201      	movs	r2, #1
 800c752:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2240      	movs	r2, #64	; 0x40
 800c75a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c75e:	2340      	movs	r3, #64	; 0x40
 800c760:	2200      	movs	r2, #0
 800c762:	2180      	movs	r1, #128	; 0x80
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f001 fa78 	bl	800dc5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2201      	movs	r2, #1
 800c76e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2240      	movs	r2, #64	; 0x40
 800c774:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c776:	2300      	movs	r3, #0
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3708      	adds	r7, #8
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c780:	b480      	push	{r7}
 800c782:	b083      	sub	sp, #12
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	460b      	mov	r3, r1
 800c78a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	78fa      	ldrb	r2, [r7, #3]
 800c790:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c792:	2300      	movs	r3, #0
}
 800c794:	4618      	mov	r0, r3
 800c796:	370c      	adds	r7, #12
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr

0800c7a0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b083      	sub	sp, #12
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7ae:	b2da      	uxtb	r2, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2204      	movs	r2, #4
 800c7ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c7be:	2300      	movs	r3, #0
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	370c      	adds	r7, #12
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b083      	sub	sp, #12
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	2b04      	cmp	r3, #4
 800c7de:	d106      	bne.n	800c7ee <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c7e6:	b2da      	uxtb	r2, r3
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c7ee:	2300      	movs	r3, #0
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d101      	bne.n	800c812 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c80e:	2303      	movs	r3, #3
 800c810:	e012      	b.n	800c838 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c818:	b2db      	uxtb	r3, r3
 800c81a:	2b03      	cmp	r3, #3
 800c81c:	d10b      	bne.n	800c836 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c824:	69db      	ldr	r3, [r3, #28]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d005      	beq.n	800c836 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c830:	69db      	ldr	r3, [r3, #28]
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c836:	2300      	movs	r3, #0
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3708      	adds	r7, #8
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c840:	b480      	push	{r7}
 800c842:	b087      	sub	sp, #28
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	3301      	adds	r3, #1
 800c856:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c85e:	8a3b      	ldrh	r3, [r7, #16]
 800c860:	021b      	lsls	r3, r3, #8
 800c862:	b21a      	sxth	r2, r3
 800c864:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c868:	4313      	orrs	r3, r2
 800c86a:	b21b      	sxth	r3, r3
 800c86c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c86e:	89fb      	ldrh	r3, [r7, #14]
}
 800c870:	4618      	mov	r0, r3
 800c872:	371c      	adds	r7, #28
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr

0800c87c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c886:	2300      	movs	r3, #0
 800c888:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c892:	2b40      	cmp	r3, #64	; 0x40
 800c894:	d005      	beq.n	800c8a2 <USBD_StdDevReq+0x26>
 800c896:	2b40      	cmp	r3, #64	; 0x40
 800c898:	d853      	bhi.n	800c942 <USBD_StdDevReq+0xc6>
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d00b      	beq.n	800c8b6 <USBD_StdDevReq+0x3a>
 800c89e:	2b20      	cmp	r3, #32
 800c8a0:	d14f      	bne.n	800c942 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8a8:	689b      	ldr	r3, [r3, #8]
 800c8aa:	6839      	ldr	r1, [r7, #0]
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	4798      	blx	r3
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	73fb      	strb	r3, [r7, #15]
      break;
 800c8b4:	e04a      	b.n	800c94c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	785b      	ldrb	r3, [r3, #1]
 800c8ba:	2b09      	cmp	r3, #9
 800c8bc:	d83b      	bhi.n	800c936 <USBD_StdDevReq+0xba>
 800c8be:	a201      	add	r2, pc, #4	; (adr r2, 800c8c4 <USBD_StdDevReq+0x48>)
 800c8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c4:	0800c919 	.word	0x0800c919
 800c8c8:	0800c92d 	.word	0x0800c92d
 800c8cc:	0800c937 	.word	0x0800c937
 800c8d0:	0800c923 	.word	0x0800c923
 800c8d4:	0800c937 	.word	0x0800c937
 800c8d8:	0800c8f7 	.word	0x0800c8f7
 800c8dc:	0800c8ed 	.word	0x0800c8ed
 800c8e0:	0800c937 	.word	0x0800c937
 800c8e4:	0800c90f 	.word	0x0800c90f
 800c8e8:	0800c901 	.word	0x0800c901
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c8ec:	6839      	ldr	r1, [r7, #0]
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 f9de 	bl	800ccb0 <USBD_GetDescriptor>
          break;
 800c8f4:	e024      	b.n	800c940 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c8f6:	6839      	ldr	r1, [r7, #0]
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 fb6d 	bl	800cfd8 <USBD_SetAddress>
          break;
 800c8fe:	e01f      	b.n	800c940 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c900:	6839      	ldr	r1, [r7, #0]
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 fbac 	bl	800d060 <USBD_SetConfig>
 800c908:	4603      	mov	r3, r0
 800c90a:	73fb      	strb	r3, [r7, #15]
          break;
 800c90c:	e018      	b.n	800c940 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c90e:	6839      	ldr	r1, [r7, #0]
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f000 fc4b 	bl	800d1ac <USBD_GetConfig>
          break;
 800c916:	e013      	b.n	800c940 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c918:	6839      	ldr	r1, [r7, #0]
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 fc7c 	bl	800d218 <USBD_GetStatus>
          break;
 800c920:	e00e      	b.n	800c940 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c922:	6839      	ldr	r1, [r7, #0]
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f000 fcab 	bl	800d280 <USBD_SetFeature>
          break;
 800c92a:	e009      	b.n	800c940 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c92c:	6839      	ldr	r1, [r7, #0]
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f000 fcba 	bl	800d2a8 <USBD_ClrFeature>
          break;
 800c934:	e004      	b.n	800c940 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c936:	6839      	ldr	r1, [r7, #0]
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 fd11 	bl	800d360 <USBD_CtlError>
          break;
 800c93e:	bf00      	nop
      }
      break;
 800c940:	e004      	b.n	800c94c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c942:	6839      	ldr	r1, [r7, #0]
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 fd0b 	bl	800d360 <USBD_CtlError>
      break;
 800c94a:	bf00      	nop
  }

  return ret;
 800c94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3710      	adds	r7, #16
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop

0800c958 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c962:	2300      	movs	r3, #0
 800c964:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c96e:	2b40      	cmp	r3, #64	; 0x40
 800c970:	d005      	beq.n	800c97e <USBD_StdItfReq+0x26>
 800c972:	2b40      	cmp	r3, #64	; 0x40
 800c974:	d82f      	bhi.n	800c9d6 <USBD_StdItfReq+0x7e>
 800c976:	2b00      	cmp	r3, #0
 800c978:	d001      	beq.n	800c97e <USBD_StdItfReq+0x26>
 800c97a:	2b20      	cmp	r3, #32
 800c97c:	d12b      	bne.n	800c9d6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c984:	b2db      	uxtb	r3, r3
 800c986:	3b01      	subs	r3, #1
 800c988:	2b02      	cmp	r3, #2
 800c98a:	d81d      	bhi.n	800c9c8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	889b      	ldrh	r3, [r3, #4]
 800c990:	b2db      	uxtb	r3, r3
 800c992:	2b01      	cmp	r3, #1
 800c994:	d813      	bhi.n	800c9be <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	6839      	ldr	r1, [r7, #0]
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	4798      	blx	r3
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	88db      	ldrh	r3, [r3, #6]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d110      	bne.n	800c9d2 <USBD_StdItfReq+0x7a>
 800c9b0:	7bfb      	ldrb	r3, [r7, #15]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d10d      	bne.n	800c9d2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f000 fd9d 	bl	800d4f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c9bc:	e009      	b.n	800c9d2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c9be:	6839      	ldr	r1, [r7, #0]
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 fccd 	bl	800d360 <USBD_CtlError>
          break;
 800c9c6:	e004      	b.n	800c9d2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c9c8:	6839      	ldr	r1, [r7, #0]
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 fcc8 	bl	800d360 <USBD_CtlError>
          break;
 800c9d0:	e000      	b.n	800c9d4 <USBD_StdItfReq+0x7c>
          break;
 800c9d2:	bf00      	nop
      }
      break;
 800c9d4:	e004      	b.n	800c9e0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c9d6:	6839      	ldr	r1, [r7, #0]
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 fcc1 	bl	800d360 <USBD_CtlError>
      break;
 800c9de:	bf00      	nop
  }

  return ret;
 800c9e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3710      	adds	r7, #16
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b084      	sub	sp, #16
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
 800c9f2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	889b      	ldrh	r3, [r3, #4]
 800c9fc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca06:	2b40      	cmp	r3, #64	; 0x40
 800ca08:	d007      	beq.n	800ca1a <USBD_StdEPReq+0x30>
 800ca0a:	2b40      	cmp	r3, #64	; 0x40
 800ca0c:	f200 8145 	bhi.w	800cc9a <USBD_StdEPReq+0x2b0>
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d00c      	beq.n	800ca2e <USBD_StdEPReq+0x44>
 800ca14:	2b20      	cmp	r3, #32
 800ca16:	f040 8140 	bne.w	800cc9a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca20:	689b      	ldr	r3, [r3, #8]
 800ca22:	6839      	ldr	r1, [r7, #0]
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	4798      	blx	r3
 800ca28:	4603      	mov	r3, r0
 800ca2a:	73fb      	strb	r3, [r7, #15]
      break;
 800ca2c:	e13a      	b.n	800cca4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	785b      	ldrb	r3, [r3, #1]
 800ca32:	2b03      	cmp	r3, #3
 800ca34:	d007      	beq.n	800ca46 <USBD_StdEPReq+0x5c>
 800ca36:	2b03      	cmp	r3, #3
 800ca38:	f300 8129 	bgt.w	800cc8e <USBD_StdEPReq+0x2a4>
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d07f      	beq.n	800cb40 <USBD_StdEPReq+0x156>
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d03c      	beq.n	800cabe <USBD_StdEPReq+0xd4>
 800ca44:	e123      	b.n	800cc8e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	2b02      	cmp	r3, #2
 800ca50:	d002      	beq.n	800ca58 <USBD_StdEPReq+0x6e>
 800ca52:	2b03      	cmp	r3, #3
 800ca54:	d016      	beq.n	800ca84 <USBD_StdEPReq+0x9a>
 800ca56:	e02c      	b.n	800cab2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca58:	7bbb      	ldrb	r3, [r7, #14]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d00d      	beq.n	800ca7a <USBD_StdEPReq+0x90>
 800ca5e:	7bbb      	ldrb	r3, [r7, #14]
 800ca60:	2b80      	cmp	r3, #128	; 0x80
 800ca62:	d00a      	beq.n	800ca7a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca64:	7bbb      	ldrb	r3, [r7, #14]
 800ca66:	4619      	mov	r1, r3
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f001 f93b 	bl	800dce4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca6e:	2180      	movs	r1, #128	; 0x80
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f001 f937 	bl	800dce4 <USBD_LL_StallEP>
 800ca76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ca78:	e020      	b.n	800cabc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ca7a:	6839      	ldr	r1, [r7, #0]
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 fc6f 	bl	800d360 <USBD_CtlError>
              break;
 800ca82:	e01b      	b.n	800cabc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	885b      	ldrh	r3, [r3, #2]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d10e      	bne.n	800caaa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ca8c:	7bbb      	ldrb	r3, [r7, #14]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d00b      	beq.n	800caaa <USBD_StdEPReq+0xc0>
 800ca92:	7bbb      	ldrb	r3, [r7, #14]
 800ca94:	2b80      	cmp	r3, #128	; 0x80
 800ca96:	d008      	beq.n	800caaa <USBD_StdEPReq+0xc0>
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	88db      	ldrh	r3, [r3, #6]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d104      	bne.n	800caaa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800caa0:	7bbb      	ldrb	r3, [r7, #14]
 800caa2:	4619      	mov	r1, r3
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f001 f91d 	bl	800dce4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 fd23 	bl	800d4f6 <USBD_CtlSendStatus>

              break;
 800cab0:	e004      	b.n	800cabc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cab2:	6839      	ldr	r1, [r7, #0]
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 fc53 	bl	800d360 <USBD_CtlError>
              break;
 800caba:	bf00      	nop
          }
          break;
 800cabc:	e0ec      	b.n	800cc98 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	2b02      	cmp	r3, #2
 800cac8:	d002      	beq.n	800cad0 <USBD_StdEPReq+0xe6>
 800caca:	2b03      	cmp	r3, #3
 800cacc:	d016      	beq.n	800cafc <USBD_StdEPReq+0x112>
 800cace:	e030      	b.n	800cb32 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cad0:	7bbb      	ldrb	r3, [r7, #14]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d00d      	beq.n	800caf2 <USBD_StdEPReq+0x108>
 800cad6:	7bbb      	ldrb	r3, [r7, #14]
 800cad8:	2b80      	cmp	r3, #128	; 0x80
 800cada:	d00a      	beq.n	800caf2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cadc:	7bbb      	ldrb	r3, [r7, #14]
 800cade:	4619      	mov	r1, r3
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f001 f8ff 	bl	800dce4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cae6:	2180      	movs	r1, #128	; 0x80
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f001 f8fb 	bl	800dce4 <USBD_LL_StallEP>
 800caee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800caf0:	e025      	b.n	800cb3e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800caf2:	6839      	ldr	r1, [r7, #0]
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 fc33 	bl	800d360 <USBD_CtlError>
              break;
 800cafa:	e020      	b.n	800cb3e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	885b      	ldrh	r3, [r3, #2]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d11b      	bne.n	800cb3c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cb04:	7bbb      	ldrb	r3, [r7, #14]
 800cb06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d004      	beq.n	800cb18 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cb0e:	7bbb      	ldrb	r3, [r7, #14]
 800cb10:	4619      	mov	r1, r3
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f001 f905 	bl	800dd22 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f000 fcec 	bl	800d4f6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb24:	689b      	ldr	r3, [r3, #8]
 800cb26:	6839      	ldr	r1, [r7, #0]
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	4798      	blx	r3
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800cb30:	e004      	b.n	800cb3c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800cb32:	6839      	ldr	r1, [r7, #0]
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f000 fc13 	bl	800d360 <USBD_CtlError>
              break;
 800cb3a:	e000      	b.n	800cb3e <USBD_StdEPReq+0x154>
              break;
 800cb3c:	bf00      	nop
          }
          break;
 800cb3e:	e0ab      	b.n	800cc98 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	2b02      	cmp	r3, #2
 800cb4a:	d002      	beq.n	800cb52 <USBD_StdEPReq+0x168>
 800cb4c:	2b03      	cmp	r3, #3
 800cb4e:	d032      	beq.n	800cbb6 <USBD_StdEPReq+0x1cc>
 800cb50:	e097      	b.n	800cc82 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb52:	7bbb      	ldrb	r3, [r7, #14]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d007      	beq.n	800cb68 <USBD_StdEPReq+0x17e>
 800cb58:	7bbb      	ldrb	r3, [r7, #14]
 800cb5a:	2b80      	cmp	r3, #128	; 0x80
 800cb5c:	d004      	beq.n	800cb68 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800cb5e:	6839      	ldr	r1, [r7, #0]
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 fbfd 	bl	800d360 <USBD_CtlError>
                break;
 800cb66:	e091      	b.n	800cc8c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	da0b      	bge.n	800cb88 <USBD_StdEPReq+0x19e>
 800cb70:	7bbb      	ldrb	r3, [r7, #14]
 800cb72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb76:	4613      	mov	r3, r2
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	4413      	add	r3, r2
 800cb7c:	009b      	lsls	r3, r3, #2
 800cb7e:	3310      	adds	r3, #16
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	4413      	add	r3, r2
 800cb84:	3304      	adds	r3, #4
 800cb86:	e00b      	b.n	800cba0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cb88:	7bbb      	ldrb	r3, [r7, #14]
 800cb8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb8e:	4613      	mov	r3, r2
 800cb90:	009b      	lsls	r3, r3, #2
 800cb92:	4413      	add	r3, r2
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	3304      	adds	r3, #4
 800cba0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	2200      	movs	r2, #0
 800cba6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	2202      	movs	r2, #2
 800cbac:	4619      	mov	r1, r3
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 fc47 	bl	800d442 <USBD_CtlSendData>
              break;
 800cbb4:	e06a      	b.n	800cc8c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cbb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	da11      	bge.n	800cbe2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cbbe:	7bbb      	ldrb	r3, [r7, #14]
 800cbc0:	f003 020f 	and.w	r2, r3, #15
 800cbc4:	6879      	ldr	r1, [r7, #4]
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	4413      	add	r3, r2
 800cbcc:	009b      	lsls	r3, r3, #2
 800cbce:	440b      	add	r3, r1
 800cbd0:	3324      	adds	r3, #36	; 0x24
 800cbd2:	881b      	ldrh	r3, [r3, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d117      	bne.n	800cc08 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cbd8:	6839      	ldr	r1, [r7, #0]
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 fbc0 	bl	800d360 <USBD_CtlError>
                  break;
 800cbe0:	e054      	b.n	800cc8c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cbe2:	7bbb      	ldrb	r3, [r7, #14]
 800cbe4:	f003 020f 	and.w	r2, r3, #15
 800cbe8:	6879      	ldr	r1, [r7, #4]
 800cbea:	4613      	mov	r3, r2
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	4413      	add	r3, r2
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	440b      	add	r3, r1
 800cbf4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cbf8:	881b      	ldrh	r3, [r3, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d104      	bne.n	800cc08 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cbfe:	6839      	ldr	r1, [r7, #0]
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f000 fbad 	bl	800d360 <USBD_CtlError>
                  break;
 800cc06:	e041      	b.n	800cc8c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	da0b      	bge.n	800cc28 <USBD_StdEPReq+0x23e>
 800cc10:	7bbb      	ldrb	r3, [r7, #14]
 800cc12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc16:	4613      	mov	r3, r2
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	4413      	add	r3, r2
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	3310      	adds	r3, #16
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	4413      	add	r3, r2
 800cc24:	3304      	adds	r3, #4
 800cc26:	e00b      	b.n	800cc40 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cc28:	7bbb      	ldrb	r3, [r7, #14]
 800cc2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc2e:	4613      	mov	r3, r2
 800cc30:	009b      	lsls	r3, r3, #2
 800cc32:	4413      	add	r3, r2
 800cc34:	009b      	lsls	r3, r3, #2
 800cc36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	4413      	add	r3, r2
 800cc3e:	3304      	adds	r3, #4
 800cc40:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cc42:	7bbb      	ldrb	r3, [r7, #14]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d002      	beq.n	800cc4e <USBD_StdEPReq+0x264>
 800cc48:	7bbb      	ldrb	r3, [r7, #14]
 800cc4a:	2b80      	cmp	r3, #128	; 0x80
 800cc4c:	d103      	bne.n	800cc56 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	2200      	movs	r2, #0
 800cc52:	601a      	str	r2, [r3, #0]
 800cc54:	e00e      	b.n	800cc74 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cc56:	7bbb      	ldrb	r3, [r7, #14]
 800cc58:	4619      	mov	r1, r3
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f001 f880 	bl	800dd60 <USBD_LL_IsStallEP>
 800cc60:	4603      	mov	r3, r0
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d003      	beq.n	800cc6e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	2201      	movs	r2, #1
 800cc6a:	601a      	str	r2, [r3, #0]
 800cc6c:	e002      	b.n	800cc74 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	2200      	movs	r2, #0
 800cc72:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	2202      	movs	r2, #2
 800cc78:	4619      	mov	r1, r3
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 fbe1 	bl	800d442 <USBD_CtlSendData>
              break;
 800cc80:	e004      	b.n	800cc8c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cc82:	6839      	ldr	r1, [r7, #0]
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f000 fb6b 	bl	800d360 <USBD_CtlError>
              break;
 800cc8a:	bf00      	nop
          }
          break;
 800cc8c:	e004      	b.n	800cc98 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cc8e:	6839      	ldr	r1, [r7, #0]
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 fb65 	bl	800d360 <USBD_CtlError>
          break;
 800cc96:	bf00      	nop
      }
      break;
 800cc98:	e004      	b.n	800cca4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cc9a:	6839      	ldr	r1, [r7, #0]
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f000 fb5f 	bl	800d360 <USBD_CtlError>
      break;
 800cca2:	bf00      	nop
  }

  return ret;
 800cca4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3710      	adds	r7, #16
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
	...

0800ccb0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b084      	sub	sp, #16
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	885b      	ldrh	r3, [r3, #2]
 800ccca:	0a1b      	lsrs	r3, r3, #8
 800cccc:	b29b      	uxth	r3, r3
 800ccce:	3b01      	subs	r3, #1
 800ccd0:	2b0e      	cmp	r3, #14
 800ccd2:	f200 8152 	bhi.w	800cf7a <USBD_GetDescriptor+0x2ca>
 800ccd6:	a201      	add	r2, pc, #4	; (adr r2, 800ccdc <USBD_GetDescriptor+0x2c>)
 800ccd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccdc:	0800cd4d 	.word	0x0800cd4d
 800cce0:	0800cd65 	.word	0x0800cd65
 800cce4:	0800cda5 	.word	0x0800cda5
 800cce8:	0800cf7b 	.word	0x0800cf7b
 800ccec:	0800cf7b 	.word	0x0800cf7b
 800ccf0:	0800cf1b 	.word	0x0800cf1b
 800ccf4:	0800cf47 	.word	0x0800cf47
 800ccf8:	0800cf7b 	.word	0x0800cf7b
 800ccfc:	0800cf7b 	.word	0x0800cf7b
 800cd00:	0800cf7b 	.word	0x0800cf7b
 800cd04:	0800cf7b 	.word	0x0800cf7b
 800cd08:	0800cf7b 	.word	0x0800cf7b
 800cd0c:	0800cf7b 	.word	0x0800cf7b
 800cd10:	0800cf7b 	.word	0x0800cf7b
 800cd14:	0800cd19 	.word	0x0800cd19
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd1e:	69db      	ldr	r3, [r3, #28]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d00b      	beq.n	800cd3c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd2a:	69db      	ldr	r3, [r3, #28]
 800cd2c:	687a      	ldr	r2, [r7, #4]
 800cd2e:	7c12      	ldrb	r2, [r2, #16]
 800cd30:	f107 0108 	add.w	r1, r7, #8
 800cd34:	4610      	mov	r0, r2
 800cd36:	4798      	blx	r3
 800cd38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd3a:	e126      	b.n	800cf8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cd3c:	6839      	ldr	r1, [r7, #0]
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f000 fb0e 	bl	800d360 <USBD_CtlError>
        err++;
 800cd44:	7afb      	ldrb	r3, [r7, #11]
 800cd46:	3301      	adds	r3, #1
 800cd48:	72fb      	strb	r3, [r7, #11]
      break;
 800cd4a:	e11e      	b.n	800cf8a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	7c12      	ldrb	r2, [r2, #16]
 800cd58:	f107 0108 	add.w	r1, r7, #8
 800cd5c:	4610      	mov	r0, r2
 800cd5e:	4798      	blx	r3
 800cd60:	60f8      	str	r0, [r7, #12]
      break;
 800cd62:	e112      	b.n	800cf8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	7c1b      	ldrb	r3, [r3, #16]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d10d      	bne.n	800cd88 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd74:	f107 0208 	add.w	r2, r7, #8
 800cd78:	4610      	mov	r0, r2
 800cd7a:	4798      	blx	r3
 800cd7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	3301      	adds	r3, #1
 800cd82:	2202      	movs	r2, #2
 800cd84:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cd86:	e100      	b.n	800cf8a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd90:	f107 0208 	add.w	r2, r7, #8
 800cd94:	4610      	mov	r0, r2
 800cd96:	4798      	blx	r3
 800cd98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	2202      	movs	r2, #2
 800cda0:	701a      	strb	r2, [r3, #0]
      break;
 800cda2:	e0f2      	b.n	800cf8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	885b      	ldrh	r3, [r3, #2]
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	2b05      	cmp	r3, #5
 800cdac:	f200 80ac 	bhi.w	800cf08 <USBD_GetDescriptor+0x258>
 800cdb0:	a201      	add	r2, pc, #4	; (adr r2, 800cdb8 <USBD_GetDescriptor+0x108>)
 800cdb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb6:	bf00      	nop
 800cdb8:	0800cdd1 	.word	0x0800cdd1
 800cdbc:	0800ce05 	.word	0x0800ce05
 800cdc0:	0800ce39 	.word	0x0800ce39
 800cdc4:	0800ce6d 	.word	0x0800ce6d
 800cdc8:	0800cea1 	.word	0x0800cea1
 800cdcc:	0800ced5 	.word	0x0800ced5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdd6:	685b      	ldr	r3, [r3, #4]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d00b      	beq.n	800cdf4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	687a      	ldr	r2, [r7, #4]
 800cde6:	7c12      	ldrb	r2, [r2, #16]
 800cde8:	f107 0108 	add.w	r1, r7, #8
 800cdec:	4610      	mov	r0, r2
 800cdee:	4798      	blx	r3
 800cdf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdf2:	e091      	b.n	800cf18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cdf4:	6839      	ldr	r1, [r7, #0]
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f000 fab2 	bl	800d360 <USBD_CtlError>
            err++;
 800cdfc:	7afb      	ldrb	r3, [r7, #11]
 800cdfe:	3301      	adds	r3, #1
 800ce00:	72fb      	strb	r3, [r7, #11]
          break;
 800ce02:	e089      	b.n	800cf18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce0a:	689b      	ldr	r3, [r3, #8]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d00b      	beq.n	800ce28 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce16:	689b      	ldr	r3, [r3, #8]
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	7c12      	ldrb	r2, [r2, #16]
 800ce1c:	f107 0108 	add.w	r1, r7, #8
 800ce20:	4610      	mov	r0, r2
 800ce22:	4798      	blx	r3
 800ce24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce26:	e077      	b.n	800cf18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce28:	6839      	ldr	r1, [r7, #0]
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 fa98 	bl	800d360 <USBD_CtlError>
            err++;
 800ce30:	7afb      	ldrb	r3, [r7, #11]
 800ce32:	3301      	adds	r3, #1
 800ce34:	72fb      	strb	r3, [r7, #11]
          break;
 800ce36:	e06f      	b.n	800cf18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce3e:	68db      	ldr	r3, [r3, #12]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d00b      	beq.n	800ce5c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce4a:	68db      	ldr	r3, [r3, #12]
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	7c12      	ldrb	r2, [r2, #16]
 800ce50:	f107 0108 	add.w	r1, r7, #8
 800ce54:	4610      	mov	r0, r2
 800ce56:	4798      	blx	r3
 800ce58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce5a:	e05d      	b.n	800cf18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce5c:	6839      	ldr	r1, [r7, #0]
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 fa7e 	bl	800d360 <USBD_CtlError>
            err++;
 800ce64:	7afb      	ldrb	r3, [r7, #11]
 800ce66:	3301      	adds	r3, #1
 800ce68:	72fb      	strb	r3, [r7, #11]
          break;
 800ce6a:	e055      	b.n	800cf18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce72:	691b      	ldr	r3, [r3, #16]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d00b      	beq.n	800ce90 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce7e:	691b      	ldr	r3, [r3, #16]
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	7c12      	ldrb	r2, [r2, #16]
 800ce84:	f107 0108 	add.w	r1, r7, #8
 800ce88:	4610      	mov	r0, r2
 800ce8a:	4798      	blx	r3
 800ce8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce8e:	e043      	b.n	800cf18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce90:	6839      	ldr	r1, [r7, #0]
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f000 fa64 	bl	800d360 <USBD_CtlError>
            err++;
 800ce98:	7afb      	ldrb	r3, [r7, #11]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	72fb      	strb	r3, [r7, #11]
          break;
 800ce9e:	e03b      	b.n	800cf18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cea6:	695b      	ldr	r3, [r3, #20]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d00b      	beq.n	800cec4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceb2:	695b      	ldr	r3, [r3, #20]
 800ceb4:	687a      	ldr	r2, [r7, #4]
 800ceb6:	7c12      	ldrb	r2, [r2, #16]
 800ceb8:	f107 0108 	add.w	r1, r7, #8
 800cebc:	4610      	mov	r0, r2
 800cebe:	4798      	blx	r3
 800cec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cec2:	e029      	b.n	800cf18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cec4:	6839      	ldr	r1, [r7, #0]
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f000 fa4a 	bl	800d360 <USBD_CtlError>
            err++;
 800cecc:	7afb      	ldrb	r3, [r7, #11]
 800cece:	3301      	adds	r3, #1
 800ced0:	72fb      	strb	r3, [r7, #11]
          break;
 800ced2:	e021      	b.n	800cf18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceda:	699b      	ldr	r3, [r3, #24]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00b      	beq.n	800cef8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cee6:	699b      	ldr	r3, [r3, #24]
 800cee8:	687a      	ldr	r2, [r7, #4]
 800ceea:	7c12      	ldrb	r2, [r2, #16]
 800ceec:	f107 0108 	add.w	r1, r7, #8
 800cef0:	4610      	mov	r0, r2
 800cef2:	4798      	blx	r3
 800cef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cef6:	e00f      	b.n	800cf18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cef8:	6839      	ldr	r1, [r7, #0]
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 fa30 	bl	800d360 <USBD_CtlError>
            err++;
 800cf00:	7afb      	ldrb	r3, [r7, #11]
 800cf02:	3301      	adds	r3, #1
 800cf04:	72fb      	strb	r3, [r7, #11]
          break;
 800cf06:	e007      	b.n	800cf18 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cf08:	6839      	ldr	r1, [r7, #0]
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f000 fa28 	bl	800d360 <USBD_CtlError>
          err++;
 800cf10:	7afb      	ldrb	r3, [r7, #11]
 800cf12:	3301      	adds	r3, #1
 800cf14:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cf16:	bf00      	nop
      }
      break;
 800cf18:	e037      	b.n	800cf8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	7c1b      	ldrb	r3, [r3, #16]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d109      	bne.n	800cf36 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf2a:	f107 0208 	add.w	r2, r7, #8
 800cf2e:	4610      	mov	r0, r2
 800cf30:	4798      	blx	r3
 800cf32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf34:	e029      	b.n	800cf8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cf36:	6839      	ldr	r1, [r7, #0]
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 fa11 	bl	800d360 <USBD_CtlError>
        err++;
 800cf3e:	7afb      	ldrb	r3, [r7, #11]
 800cf40:	3301      	adds	r3, #1
 800cf42:	72fb      	strb	r3, [r7, #11]
      break;
 800cf44:	e021      	b.n	800cf8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	7c1b      	ldrb	r3, [r3, #16]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d10d      	bne.n	800cf6a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf56:	f107 0208 	add.w	r2, r7, #8
 800cf5a:	4610      	mov	r0, r2
 800cf5c:	4798      	blx	r3
 800cf5e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	3301      	adds	r3, #1
 800cf64:	2207      	movs	r2, #7
 800cf66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf68:	e00f      	b.n	800cf8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cf6a:	6839      	ldr	r1, [r7, #0]
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f000 f9f7 	bl	800d360 <USBD_CtlError>
        err++;
 800cf72:	7afb      	ldrb	r3, [r7, #11]
 800cf74:	3301      	adds	r3, #1
 800cf76:	72fb      	strb	r3, [r7, #11]
      break;
 800cf78:	e007      	b.n	800cf8a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cf7a:	6839      	ldr	r1, [r7, #0]
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f000 f9ef 	bl	800d360 <USBD_CtlError>
      err++;
 800cf82:	7afb      	ldrb	r3, [r7, #11]
 800cf84:	3301      	adds	r3, #1
 800cf86:	72fb      	strb	r3, [r7, #11]
      break;
 800cf88:	bf00      	nop
  }

  if (err != 0U)
 800cf8a:	7afb      	ldrb	r3, [r7, #11]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d11e      	bne.n	800cfce <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	88db      	ldrh	r3, [r3, #6]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d016      	beq.n	800cfc6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800cf98:	893b      	ldrh	r3, [r7, #8]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d00e      	beq.n	800cfbc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	88da      	ldrh	r2, [r3, #6]
 800cfa2:	893b      	ldrh	r3, [r7, #8]
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	bf28      	it	cs
 800cfa8:	4613      	movcs	r3, r2
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cfae:	893b      	ldrh	r3, [r7, #8]
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	68f9      	ldr	r1, [r7, #12]
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f000 fa44 	bl	800d442 <USBD_CtlSendData>
 800cfba:	e009      	b.n	800cfd0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cfbc:	6839      	ldr	r1, [r7, #0]
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 f9ce 	bl	800d360 <USBD_CtlError>
 800cfc4:	e004      	b.n	800cfd0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f000 fa95 	bl	800d4f6 <USBD_CtlSendStatus>
 800cfcc:	e000      	b.n	800cfd0 <USBD_GetDescriptor+0x320>
    return;
 800cfce:	bf00      	nop
  }
}
 800cfd0:	3710      	adds	r7, #16
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop

0800cfd8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	889b      	ldrh	r3, [r3, #4]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d131      	bne.n	800d04e <USBD_SetAddress+0x76>
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	88db      	ldrh	r3, [r3, #6]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d12d      	bne.n	800d04e <USBD_SetAddress+0x76>
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	885b      	ldrh	r3, [r3, #2]
 800cff6:	2b7f      	cmp	r3, #127	; 0x7f
 800cff8:	d829      	bhi.n	800d04e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	885b      	ldrh	r3, [r3, #2]
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d004:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d00c:	b2db      	uxtb	r3, r3
 800d00e:	2b03      	cmp	r3, #3
 800d010:	d104      	bne.n	800d01c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d012:	6839      	ldr	r1, [r7, #0]
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 f9a3 	bl	800d360 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d01a:	e01d      	b.n	800d058 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	7bfa      	ldrb	r2, [r7, #15]
 800d020:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d024:	7bfb      	ldrb	r3, [r7, #15]
 800d026:	4619      	mov	r1, r3
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 fec5 	bl	800ddb8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f000 fa61 	bl	800d4f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d034:	7bfb      	ldrb	r3, [r7, #15]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d004      	beq.n	800d044 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2202      	movs	r2, #2
 800d03e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d042:	e009      	b.n	800d058 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2201      	movs	r2, #1
 800d048:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d04c:	e004      	b.n	800d058 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d04e:	6839      	ldr	r1, [r7, #0]
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f000 f985 	bl	800d360 <USBD_CtlError>
  }
}
 800d056:	bf00      	nop
 800d058:	bf00      	nop
 800d05a:	3710      	adds	r7, #16
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d06a:	2300      	movs	r3, #0
 800d06c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	885b      	ldrh	r3, [r3, #2]
 800d072:	b2da      	uxtb	r2, r3
 800d074:	4b4c      	ldr	r3, [pc, #304]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d076:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d078:	4b4b      	ldr	r3, [pc, #300]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d905      	bls.n	800d08c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d080:	6839      	ldr	r1, [r7, #0]
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f000 f96c 	bl	800d360 <USBD_CtlError>
    return USBD_FAIL;
 800d088:	2303      	movs	r3, #3
 800d08a:	e088      	b.n	800d19e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d092:	b2db      	uxtb	r3, r3
 800d094:	2b02      	cmp	r3, #2
 800d096:	d002      	beq.n	800d09e <USBD_SetConfig+0x3e>
 800d098:	2b03      	cmp	r3, #3
 800d09a:	d025      	beq.n	800d0e8 <USBD_SetConfig+0x88>
 800d09c:	e071      	b.n	800d182 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d09e:	4b42      	ldr	r3, [pc, #264]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d01c      	beq.n	800d0e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d0a6:	4b40      	ldr	r3, [pc, #256]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d0b0:	4b3d      	ldr	r3, [pc, #244]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f7ff f992 	bl	800c3e0 <USBD_SetClassConfig>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d0c0:	7bfb      	ldrb	r3, [r7, #15]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d004      	beq.n	800d0d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d0c6:	6839      	ldr	r1, [r7, #0]
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 f949 	bl	800d360 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d0ce:	e065      	b.n	800d19c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 fa10 	bl	800d4f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2203      	movs	r2, #3
 800d0da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d0de:	e05d      	b.n	800d19c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f000 fa08 	bl	800d4f6 <USBD_CtlSendStatus>
      break;
 800d0e6:	e059      	b.n	800d19c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d0e8:	4b2f      	ldr	r3, [pc, #188]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d112      	bne.n	800d116 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2202      	movs	r2, #2
 800d0f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d0f8:	4b2b      	ldr	r3, [pc, #172]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d102:	4b29      	ldr	r3, [pc, #164]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	4619      	mov	r1, r3
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f7ff f985 	bl	800c418 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 f9f1 	bl	800d4f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d114:	e042      	b.n	800d19c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d116:	4b24      	ldr	r3, [pc, #144]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	461a      	mov	r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	429a      	cmp	r2, r3
 800d122:	d02a      	beq.n	800d17a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	685b      	ldr	r3, [r3, #4]
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	4619      	mov	r1, r3
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f7ff f973 	bl	800c418 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d132:	4b1d      	ldr	r3, [pc, #116]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	461a      	mov	r2, r3
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d13c:	4b1a      	ldr	r3, [pc, #104]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	4619      	mov	r1, r3
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f7ff f94c 	bl	800c3e0 <USBD_SetClassConfig>
 800d148:	4603      	mov	r3, r0
 800d14a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d14c:	7bfb      	ldrb	r3, [r7, #15]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d00f      	beq.n	800d172 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d152:	6839      	ldr	r1, [r7, #0]
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 f903 	bl	800d360 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	b2db      	uxtb	r3, r3
 800d160:	4619      	mov	r1, r3
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f7ff f958 	bl	800c418 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2202      	movs	r2, #2
 800d16c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d170:	e014      	b.n	800d19c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 f9bf 	bl	800d4f6 <USBD_CtlSendStatus>
      break;
 800d178:	e010      	b.n	800d19c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 f9bb 	bl	800d4f6 <USBD_CtlSendStatus>
      break;
 800d180:	e00c      	b.n	800d19c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d182:	6839      	ldr	r1, [r7, #0]
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 f8eb 	bl	800d360 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d18a:	4b07      	ldr	r3, [pc, #28]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	4619      	mov	r1, r3
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f7ff f941 	bl	800c418 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d196:	2303      	movs	r3, #3
 800d198:	73fb      	strb	r3, [r7, #15]
      break;
 800d19a:	bf00      	nop
  }

  return ret;
 800d19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3710      	adds	r7, #16
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	200037a4 	.word	0x200037a4

0800d1ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	88db      	ldrh	r3, [r3, #6]
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	d004      	beq.n	800d1c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d1be:	6839      	ldr	r1, [r7, #0]
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f000 f8cd 	bl	800d360 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d1c6:	e023      	b.n	800d210 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1ce:	b2db      	uxtb	r3, r3
 800d1d0:	2b02      	cmp	r3, #2
 800d1d2:	dc02      	bgt.n	800d1da <USBD_GetConfig+0x2e>
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	dc03      	bgt.n	800d1e0 <USBD_GetConfig+0x34>
 800d1d8:	e015      	b.n	800d206 <USBD_GetConfig+0x5a>
 800d1da:	2b03      	cmp	r3, #3
 800d1dc:	d00b      	beq.n	800d1f6 <USBD_GetConfig+0x4a>
 800d1de:	e012      	b.n	800d206 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	3308      	adds	r3, #8
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 f927 	bl	800d442 <USBD_CtlSendData>
        break;
 800d1f4:	e00c      	b.n	800d210 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	3304      	adds	r3, #4
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f000 f91f 	bl	800d442 <USBD_CtlSendData>
        break;
 800d204:	e004      	b.n	800d210 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d206:	6839      	ldr	r1, [r7, #0]
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f000 f8a9 	bl	800d360 <USBD_CtlError>
        break;
 800d20e:	bf00      	nop
}
 800d210:	bf00      	nop
 800d212:	3708      	adds	r7, #8
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d228:	b2db      	uxtb	r3, r3
 800d22a:	3b01      	subs	r3, #1
 800d22c:	2b02      	cmp	r3, #2
 800d22e:	d81e      	bhi.n	800d26e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	88db      	ldrh	r3, [r3, #6]
 800d234:	2b02      	cmp	r3, #2
 800d236:	d004      	beq.n	800d242 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d238:	6839      	ldr	r1, [r7, #0]
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f000 f890 	bl	800d360 <USBD_CtlError>
        break;
 800d240:	e01a      	b.n	800d278 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2201      	movs	r2, #1
 800d246:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d005      	beq.n	800d25e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	68db      	ldr	r3, [r3, #12]
 800d256:	f043 0202 	orr.w	r2, r3, #2
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	330c      	adds	r3, #12
 800d262:	2202      	movs	r2, #2
 800d264:	4619      	mov	r1, r3
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f000 f8eb 	bl	800d442 <USBD_CtlSendData>
      break;
 800d26c:	e004      	b.n	800d278 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d26e:	6839      	ldr	r1, [r7, #0]
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f000 f875 	bl	800d360 <USBD_CtlError>
      break;
 800d276:	bf00      	nop
  }
}
 800d278:	bf00      	nop
 800d27a:	3708      	adds	r7, #8
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	885b      	ldrh	r3, [r3, #2]
 800d28e:	2b01      	cmp	r3, #1
 800d290:	d106      	bne.n	800d2a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2201      	movs	r2, #1
 800d296:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 f92b 	bl	800d4f6 <USBD_CtlSendStatus>
  }
}
 800d2a0:	bf00      	nop
 800d2a2:	3708      	adds	r7, #8
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b082      	sub	sp, #8
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	3b01      	subs	r3, #1
 800d2bc:	2b02      	cmp	r3, #2
 800d2be:	d80b      	bhi.n	800d2d8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	885b      	ldrh	r3, [r3, #2]
 800d2c4:	2b01      	cmp	r3, #1
 800d2c6:	d10c      	bne.n	800d2e2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f000 f910 	bl	800d4f6 <USBD_CtlSendStatus>
      }
      break;
 800d2d6:	e004      	b.n	800d2e2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d2d8:	6839      	ldr	r1, [r7, #0]
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f000 f840 	bl	800d360 <USBD_CtlError>
      break;
 800d2e0:	e000      	b.n	800d2e4 <USBD_ClrFeature+0x3c>
      break;
 800d2e2:	bf00      	nop
  }
}
 800d2e4:	bf00      	nop
 800d2e6:	3708      	adds	r7, #8
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	781a      	ldrb	r2, [r3, #0]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	3301      	adds	r3, #1
 800d306:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	781a      	ldrb	r2, [r3, #0]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	3301      	adds	r3, #1
 800d314:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d316:	68f8      	ldr	r0, [r7, #12]
 800d318:	f7ff fa92 	bl	800c840 <SWAPBYTE>
 800d31c:	4603      	mov	r3, r0
 800d31e:	461a      	mov	r2, r3
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	3301      	adds	r3, #1
 800d328:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	3301      	adds	r3, #1
 800d32e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d330:	68f8      	ldr	r0, [r7, #12]
 800d332:	f7ff fa85 	bl	800c840 <SWAPBYTE>
 800d336:	4603      	mov	r3, r0
 800d338:	461a      	mov	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	3301      	adds	r3, #1
 800d342:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	3301      	adds	r3, #1
 800d348:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d34a:	68f8      	ldr	r0, [r7, #12]
 800d34c:	f7ff fa78 	bl	800c840 <SWAPBYTE>
 800d350:	4603      	mov	r3, r0
 800d352:	461a      	mov	r2, r3
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	80da      	strh	r2, [r3, #6]
}
 800d358:	bf00      	nop
 800d35a:	3710      	adds	r7, #16
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d36a:	2180      	movs	r1, #128	; 0x80
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f000 fcb9 	bl	800dce4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d372:	2100      	movs	r1, #0
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f000 fcb5 	bl	800dce4 <USBD_LL_StallEP>
}
 800d37a:	bf00      	nop
 800d37c:	3708      	adds	r7, #8
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}

0800d382 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d382:	b580      	push	{r7, lr}
 800d384:	b086      	sub	sp, #24
 800d386:	af00      	add	r7, sp, #0
 800d388:	60f8      	str	r0, [r7, #12]
 800d38a:	60b9      	str	r1, [r7, #8]
 800d38c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d38e:	2300      	movs	r3, #0
 800d390:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d036      	beq.n	800d406 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d39c:	6938      	ldr	r0, [r7, #16]
 800d39e:	f000 f836 	bl	800d40e <USBD_GetLen>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	3301      	adds	r3, #1
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	005b      	lsls	r3, r3, #1
 800d3aa:	b29a      	uxth	r2, r3
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d3b0:	7dfb      	ldrb	r3, [r7, #23]
 800d3b2:	68ba      	ldr	r2, [r7, #8]
 800d3b4:	4413      	add	r3, r2
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	7812      	ldrb	r2, [r2, #0]
 800d3ba:	701a      	strb	r2, [r3, #0]
  idx++;
 800d3bc:	7dfb      	ldrb	r3, [r7, #23]
 800d3be:	3301      	adds	r3, #1
 800d3c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d3c2:	7dfb      	ldrb	r3, [r7, #23]
 800d3c4:	68ba      	ldr	r2, [r7, #8]
 800d3c6:	4413      	add	r3, r2
 800d3c8:	2203      	movs	r2, #3
 800d3ca:	701a      	strb	r2, [r3, #0]
  idx++;
 800d3cc:	7dfb      	ldrb	r3, [r7, #23]
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d3d2:	e013      	b.n	800d3fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d3d4:	7dfb      	ldrb	r3, [r7, #23]
 800d3d6:	68ba      	ldr	r2, [r7, #8]
 800d3d8:	4413      	add	r3, r2
 800d3da:	693a      	ldr	r2, [r7, #16]
 800d3dc:	7812      	ldrb	r2, [r2, #0]
 800d3de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	613b      	str	r3, [r7, #16]
    idx++;
 800d3e6:	7dfb      	ldrb	r3, [r7, #23]
 800d3e8:	3301      	adds	r3, #1
 800d3ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d3ec:	7dfb      	ldrb	r3, [r7, #23]
 800d3ee:	68ba      	ldr	r2, [r7, #8]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	701a      	strb	r2, [r3, #0]
    idx++;
 800d3f6:	7dfb      	ldrb	r3, [r7, #23]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d1e7      	bne.n	800d3d4 <USBD_GetString+0x52>
 800d404:	e000      	b.n	800d408 <USBD_GetString+0x86>
    return;
 800d406:	bf00      	nop
  }
}
 800d408:	3718      	adds	r7, #24
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}

0800d40e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d40e:	b480      	push	{r7}
 800d410:	b085      	sub	sp, #20
 800d412:	af00      	add	r7, sp, #0
 800d414:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d416:	2300      	movs	r3, #0
 800d418:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d41e:	e005      	b.n	800d42c <USBD_GetLen+0x1e>
  {
    len++;
 800d420:	7bfb      	ldrb	r3, [r7, #15]
 800d422:	3301      	adds	r3, #1
 800d424:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	3301      	adds	r3, #1
 800d42a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d1f5      	bne.n	800d420 <USBD_GetLen+0x12>
  }

  return len;
 800d434:	7bfb      	ldrb	r3, [r7, #15]
}
 800d436:	4618      	mov	r0, r3
 800d438:	3714      	adds	r7, #20
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr

0800d442 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d442:	b580      	push	{r7, lr}
 800d444:	b084      	sub	sp, #16
 800d446:	af00      	add	r7, sp, #0
 800d448:	60f8      	str	r0, [r7, #12]
 800d44a:	60b9      	str	r1, [r7, #8]
 800d44c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2202      	movs	r2, #2
 800d452:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	687a      	ldr	r2, [r7, #4]
 800d45a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	68ba      	ldr	r2, [r7, #8]
 800d466:	2100      	movs	r1, #0
 800d468:	68f8      	ldr	r0, [r7, #12]
 800d46a:	f000 fcc4 	bl	800ddf6 <USBD_LL_Transmit>

  return USBD_OK;
 800d46e:	2300      	movs	r3, #0
}
 800d470:	4618      	mov	r0, r3
 800d472:	3710      	adds	r7, #16
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b084      	sub	sp, #16
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	68ba      	ldr	r2, [r7, #8]
 800d488:	2100      	movs	r1, #0
 800d48a:	68f8      	ldr	r0, [r7, #12]
 800d48c:	f000 fcb3 	bl	800ddf6 <USBD_LL_Transmit>

  return USBD_OK;
 800d490:	2300      	movs	r3, #0
}
 800d492:	4618      	mov	r0, r3
 800d494:	3710      	adds	r7, #16
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}

0800d49a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d49a:	b580      	push	{r7, lr}
 800d49c:	b084      	sub	sp, #16
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	60f8      	str	r0, [r7, #12]
 800d4a2:	60b9      	str	r1, [r7, #8]
 800d4a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2203      	movs	r2, #3
 800d4aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	687a      	ldr	r2, [r7, #4]
 800d4ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	68ba      	ldr	r2, [r7, #8]
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	68f8      	ldr	r0, [r7, #12]
 800d4c6:	f000 fcb7 	bl	800de38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4ca:	2300      	movs	r3, #0
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3710      	adds	r7, #16
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	60b9      	str	r1, [r7, #8]
 800d4de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	68ba      	ldr	r2, [r7, #8]
 800d4e4:	2100      	movs	r1, #0
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	f000 fca6 	bl	800de38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4ec:	2300      	movs	r3, #0
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3710      	adds	r7, #16
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}

0800d4f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d4f6:	b580      	push	{r7, lr}
 800d4f8:	b082      	sub	sp, #8
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2204      	movs	r2, #4
 800d502:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d506:	2300      	movs	r3, #0
 800d508:	2200      	movs	r2, #0
 800d50a:	2100      	movs	r1, #0
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 fc72 	bl	800ddf6 <USBD_LL_Transmit>

  return USBD_OK;
 800d512:	2300      	movs	r3, #0
}
 800d514:	4618      	mov	r0, r3
 800d516:	3708      	adds	r7, #8
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2205      	movs	r2, #5
 800d528:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d52c:	2300      	movs	r3, #0
 800d52e:	2200      	movs	r2, #0
 800d530:	2100      	movs	r1, #0
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 fc80 	bl	800de38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d538:	2300      	movs	r3, #0
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3708      	adds	r7, #8
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
	...

0800d544 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d548:	2200      	movs	r2, #0
 800d54a:	4912      	ldr	r1, [pc, #72]	; (800d594 <MX_USB_Device_Init+0x50>)
 800d54c:	4812      	ldr	r0, [pc, #72]	; (800d598 <MX_USB_Device_Init+0x54>)
 800d54e:	f7fe fed9 	bl	800c304 <USBD_Init>
 800d552:	4603      	mov	r3, r0
 800d554:	2b00      	cmp	r3, #0
 800d556:	d001      	beq.n	800d55c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d558:	f7f4 fe00 	bl	800215c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d55c:	490f      	ldr	r1, [pc, #60]	; (800d59c <MX_USB_Device_Init+0x58>)
 800d55e:	480e      	ldr	r0, [pc, #56]	; (800d598 <MX_USB_Device_Init+0x54>)
 800d560:	f7fe ff00 	bl	800c364 <USBD_RegisterClass>
 800d564:	4603      	mov	r3, r0
 800d566:	2b00      	cmp	r3, #0
 800d568:	d001      	beq.n	800d56e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d56a:	f7f4 fdf7 	bl	800215c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d56e:	490c      	ldr	r1, [pc, #48]	; (800d5a0 <MX_USB_Device_Init+0x5c>)
 800d570:	4809      	ldr	r0, [pc, #36]	; (800d598 <MX_USB_Device_Init+0x54>)
 800d572:	f7fe fe21 	bl	800c1b8 <USBD_CDC_RegisterInterface>
 800d576:	4603      	mov	r3, r0
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d001      	beq.n	800d580 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d57c:	f7f4 fdee 	bl	800215c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d580:	4805      	ldr	r0, [pc, #20]	; (800d598 <MX_USB_Device_Init+0x54>)
 800d582:	f7fe ff16 	bl	800c3b2 <USBD_Start>
 800d586:	4603      	mov	r3, r0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d001      	beq.n	800d590 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d58c:	f7f4 fde6 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d590:	bf00      	nop
 800d592:	bd80      	pop	{r7, pc}
 800d594:	2000013c 	.word	0x2000013c
 800d598:	200037a8 	.word	0x200037a8
 800d59c:	20000024 	.word	0x20000024
 800d5a0:	20000128 	.word	0x20000128

0800d5a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	4905      	ldr	r1, [pc, #20]	; (800d5c0 <CDC_Init_FS+0x1c>)
 800d5ac:	4805      	ldr	r0, [pc, #20]	; (800d5c4 <CDC_Init_FS+0x20>)
 800d5ae:	f7fe fe18 	bl	800c1e2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d5b2:	4905      	ldr	r1, [pc, #20]	; (800d5c8 <CDC_Init_FS+0x24>)
 800d5b4:	4803      	ldr	r0, [pc, #12]	; (800d5c4 <CDC_Init_FS+0x20>)
 800d5b6:	f7fe fe32 	bl	800c21e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d5ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	20004278 	.word	0x20004278
 800d5c4:	200037a8 	.word	0x200037a8
 800d5c8:	20003a78 	.word	0x20003a78

0800d5cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d5d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr

0800d5dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b083      	sub	sp, #12
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	6039      	str	r1, [r7, #0]
 800d5e6:	71fb      	strb	r3, [r7, #7]
 800d5e8:	4613      	mov	r3, r2
 800d5ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d5ec:	79fb      	ldrb	r3, [r7, #7]
 800d5ee:	2b23      	cmp	r3, #35	; 0x23
 800d5f0:	d84a      	bhi.n	800d688 <CDC_Control_FS+0xac>
 800d5f2:	a201      	add	r2, pc, #4	; (adr r2, 800d5f8 <CDC_Control_FS+0x1c>)
 800d5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5f8:	0800d689 	.word	0x0800d689
 800d5fc:	0800d689 	.word	0x0800d689
 800d600:	0800d689 	.word	0x0800d689
 800d604:	0800d689 	.word	0x0800d689
 800d608:	0800d689 	.word	0x0800d689
 800d60c:	0800d689 	.word	0x0800d689
 800d610:	0800d689 	.word	0x0800d689
 800d614:	0800d689 	.word	0x0800d689
 800d618:	0800d689 	.word	0x0800d689
 800d61c:	0800d689 	.word	0x0800d689
 800d620:	0800d689 	.word	0x0800d689
 800d624:	0800d689 	.word	0x0800d689
 800d628:	0800d689 	.word	0x0800d689
 800d62c:	0800d689 	.word	0x0800d689
 800d630:	0800d689 	.word	0x0800d689
 800d634:	0800d689 	.word	0x0800d689
 800d638:	0800d689 	.word	0x0800d689
 800d63c:	0800d689 	.word	0x0800d689
 800d640:	0800d689 	.word	0x0800d689
 800d644:	0800d689 	.word	0x0800d689
 800d648:	0800d689 	.word	0x0800d689
 800d64c:	0800d689 	.word	0x0800d689
 800d650:	0800d689 	.word	0x0800d689
 800d654:	0800d689 	.word	0x0800d689
 800d658:	0800d689 	.word	0x0800d689
 800d65c:	0800d689 	.word	0x0800d689
 800d660:	0800d689 	.word	0x0800d689
 800d664:	0800d689 	.word	0x0800d689
 800d668:	0800d689 	.word	0x0800d689
 800d66c:	0800d689 	.word	0x0800d689
 800d670:	0800d689 	.word	0x0800d689
 800d674:	0800d689 	.word	0x0800d689
 800d678:	0800d689 	.word	0x0800d689
 800d67c:	0800d689 	.word	0x0800d689
 800d680:	0800d689 	.word	0x0800d689
 800d684:	0800d689 	.word	0x0800d689
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d688:	bf00      	nop
  }

  return (USBD_OK);
 800d68a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	370c      	adds	r7, #12
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr

0800d698 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b084      	sub	sp, #16
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d6a2:	6879      	ldr	r1, [r7, #4]
 800d6a4:	4811      	ldr	r0, [pc, #68]	; (800d6ec <CDC_Receive_FS+0x54>)
 800d6a6:	f7fe fdba 	bl	800c21e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d6aa:	4810      	ldr	r0, [pc, #64]	; (800d6ec <CDC_Receive_FS+0x54>)
 800d6ac:	f7fe fe00 	bl	800c2b0 <USBD_CDC_ReceivePacket>

  memset (rx_buffer, '\0', USB_RX_BUFFER_SIZE);  // clear the buffer
 800d6b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d6b4:	2100      	movs	r1, #0
 800d6b6:	480e      	ldr	r0, [pc, #56]	; (800d6f0 <CDC_Receive_FS+0x58>)
 800d6b8:	f001 fa8d 	bl	800ebd6 <memset>
  uint8_t len = (uint8_t)*Len;
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	73fb      	strb	r3, [r7, #15]
  memcpy(rx_buffer, Buf, len);  // copy the data to the buffer
 800d6c2:	7bfb      	ldrb	r3, [r7, #15]
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	6879      	ldr	r1, [r7, #4]
 800d6c8:	4809      	ldr	r0, [pc, #36]	; (800d6f0 <CDC_Receive_FS+0x58>)
 800d6ca:	f001 fb72 	bl	800edb2 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800d6ce:	7bfb      	ldrb	r3, [r7, #15]
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	2100      	movs	r1, #0
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f001 fa7e 	bl	800ebd6 <memset>

  prog_state = CFG_RECEIVED;
 800d6da:	4b06      	ldr	r3, [pc, #24]	; (800d6f4 <CDC_Receive_FS+0x5c>)
 800d6dc:	2201      	movs	r2, #1
 800d6de:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800d6e0:	2300      	movs	r3, #0

  /* USER CODE END 6 */
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3710      	adds	r7, #16
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	200037a8 	.word	0x200037a8
 800d6f0:	200026b4 	.word	0x200026b4
 800d6f4:	200027b4 	.word	0x200027b4

0800d6f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	460b      	mov	r3, r1
 800d702:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d704:	2300      	movs	r3, #0
 800d706:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d708:	4b0d      	ldr	r3, [pc, #52]	; (800d740 <CDC_Transmit_FS+0x48>)
 800d70a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d70e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d716:	2b00      	cmp	r3, #0
 800d718:	d001      	beq.n	800d71e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d71a:	2301      	movs	r3, #1
 800d71c:	e00b      	b.n	800d736 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d71e:	887b      	ldrh	r3, [r7, #2]
 800d720:	461a      	mov	r2, r3
 800d722:	6879      	ldr	r1, [r7, #4]
 800d724:	4806      	ldr	r0, [pc, #24]	; (800d740 <CDC_Transmit_FS+0x48>)
 800d726:	f7fe fd5c 	bl	800c1e2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d72a:	4805      	ldr	r0, [pc, #20]	; (800d740 <CDC_Transmit_FS+0x48>)
 800d72c:	f7fe fd90 	bl	800c250 <USBD_CDC_TransmitPacket>
 800d730:	4603      	mov	r3, r0
 800d732:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d734:	7bfb      	ldrb	r3, [r7, #15]
}
 800d736:	4618      	mov	r0, r3
 800d738:	3710      	adds	r7, #16
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	200037a8 	.word	0x200037a8

0800d744 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d744:	b480      	push	{r7}
 800d746:	b087      	sub	sp, #28
 800d748:	af00      	add	r7, sp, #0
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	4613      	mov	r3, r2
 800d750:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d752:	2300      	movs	r3, #0
 800d754:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d756:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	371c      	adds	r7, #28
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr
	...

0800d768 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	4603      	mov	r3, r0
 800d770:	6039      	str	r1, [r7, #0]
 800d772:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	2212      	movs	r2, #18
 800d778:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800d77a:	4b03      	ldr	r3, [pc, #12]	; (800d788 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	370c      	adds	r7, #12
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr
 800d788:	2000015c 	.word	0x2000015c

0800d78c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b083      	sub	sp, #12
 800d790:	af00      	add	r7, sp, #0
 800d792:	4603      	mov	r3, r0
 800d794:	6039      	str	r1, [r7, #0]
 800d796:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	2204      	movs	r2, #4
 800d79c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d79e:	4b03      	ldr	r3, [pc, #12]	; (800d7ac <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	370c      	adds	r7, #12
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr
 800d7ac:	20000170 	.word	0x20000170

0800d7b0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b082      	sub	sp, #8
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	6039      	str	r1, [r7, #0]
 800d7ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d7bc:	79fb      	ldrb	r3, [r7, #7]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d105      	bne.n	800d7ce <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d7c2:	683a      	ldr	r2, [r7, #0]
 800d7c4:	4907      	ldr	r1, [pc, #28]	; (800d7e4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d7c6:	4808      	ldr	r0, [pc, #32]	; (800d7e8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d7c8:	f7ff fddb 	bl	800d382 <USBD_GetString>
 800d7cc:	e004      	b.n	800d7d8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d7ce:	683a      	ldr	r2, [r7, #0]
 800d7d0:	4904      	ldr	r1, [pc, #16]	; (800d7e4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d7d2:	4805      	ldr	r0, [pc, #20]	; (800d7e8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d7d4:	f7ff fdd5 	bl	800d382 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d7d8:	4b02      	ldr	r3, [pc, #8]	; (800d7e4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3708      	adds	r7, #8
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	20004a78 	.word	0x20004a78
 800d7e8:	08011da8 	.word	0x08011da8

0800d7ec <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	6039      	str	r1, [r7, #0]
 800d7f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d7f8:	683a      	ldr	r2, [r7, #0]
 800d7fa:	4904      	ldr	r1, [pc, #16]	; (800d80c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800d7fc:	4804      	ldr	r0, [pc, #16]	; (800d810 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800d7fe:	f7ff fdc0 	bl	800d382 <USBD_GetString>
  return USBD_StrDesc;
 800d802:	4b02      	ldr	r3, [pc, #8]	; (800d80c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800d804:	4618      	mov	r0, r3
 800d806:	3708      	adds	r7, #8
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}
 800d80c:	20004a78 	.word	0x20004a78
 800d810:	08011db8 	.word	0x08011db8

0800d814 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b082      	sub	sp, #8
 800d818:	af00      	add	r7, sp, #0
 800d81a:	4603      	mov	r3, r0
 800d81c:	6039      	str	r1, [r7, #0]
 800d81e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	221a      	movs	r2, #26
 800d824:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d826:	f000 f843 	bl	800d8b0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d82a:	4b02      	ldr	r3, [pc, #8]	; (800d834 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3708      	adds	r7, #8
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}
 800d834:	20000174 	.word	0x20000174

0800d838 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	4603      	mov	r3, r0
 800d840:	6039      	str	r1, [r7, #0]
 800d842:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d844:	79fb      	ldrb	r3, [r7, #7]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d105      	bne.n	800d856 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d84a:	683a      	ldr	r2, [r7, #0]
 800d84c:	4907      	ldr	r1, [pc, #28]	; (800d86c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d84e:	4808      	ldr	r0, [pc, #32]	; (800d870 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d850:	f7ff fd97 	bl	800d382 <USBD_GetString>
 800d854:	e004      	b.n	800d860 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d856:	683a      	ldr	r2, [r7, #0]
 800d858:	4904      	ldr	r1, [pc, #16]	; (800d86c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d85a:	4805      	ldr	r0, [pc, #20]	; (800d870 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d85c:	f7ff fd91 	bl	800d382 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d860:	4b02      	ldr	r3, [pc, #8]	; (800d86c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800d862:	4618      	mov	r0, r3
 800d864:	3708      	adds	r7, #8
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	20004a78 	.word	0x20004a78
 800d870:	08011dbc 	.word	0x08011dbc

0800d874 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b082      	sub	sp, #8
 800d878:	af00      	add	r7, sp, #0
 800d87a:	4603      	mov	r3, r0
 800d87c:	6039      	str	r1, [r7, #0]
 800d87e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d880:	79fb      	ldrb	r3, [r7, #7]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d105      	bne.n	800d892 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d886:	683a      	ldr	r2, [r7, #0]
 800d888:	4907      	ldr	r1, [pc, #28]	; (800d8a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d88a:	4808      	ldr	r0, [pc, #32]	; (800d8ac <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d88c:	f7ff fd79 	bl	800d382 <USBD_GetString>
 800d890:	e004      	b.n	800d89c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d892:	683a      	ldr	r2, [r7, #0]
 800d894:	4904      	ldr	r1, [pc, #16]	; (800d8a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d896:	4805      	ldr	r0, [pc, #20]	; (800d8ac <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d898:	f7ff fd73 	bl	800d382 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d89c:	4b02      	ldr	r3, [pc, #8]	; (800d8a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3708      	adds	r7, #8
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
 800d8a6:	bf00      	nop
 800d8a8:	20004a78 	.word	0x20004a78
 800d8ac:	08011dc8 	.word	0x08011dc8

0800d8b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d8b6:	4b0f      	ldr	r3, [pc, #60]	; (800d8f4 <Get_SerialNum+0x44>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d8bc:	4b0e      	ldr	r3, [pc, #56]	; (800d8f8 <Get_SerialNum+0x48>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d8c2:	4b0e      	ldr	r3, [pc, #56]	; (800d8fc <Get_SerialNum+0x4c>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d8c8:	68fa      	ldr	r2, [r7, #12]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	4413      	add	r3, r2
 800d8ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d009      	beq.n	800d8ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d8d6:	2208      	movs	r2, #8
 800d8d8:	4909      	ldr	r1, [pc, #36]	; (800d900 <Get_SerialNum+0x50>)
 800d8da:	68f8      	ldr	r0, [r7, #12]
 800d8dc:	f000 f814 	bl	800d908 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d8e0:	2204      	movs	r2, #4
 800d8e2:	4908      	ldr	r1, [pc, #32]	; (800d904 <Get_SerialNum+0x54>)
 800d8e4:	68b8      	ldr	r0, [r7, #8]
 800d8e6:	f000 f80f 	bl	800d908 <IntToUnicode>
  }
}
 800d8ea:	bf00      	nop
 800d8ec:	3710      	adds	r7, #16
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}
 800d8f2:	bf00      	nop
 800d8f4:	1fff7590 	.word	0x1fff7590
 800d8f8:	1fff7594 	.word	0x1fff7594
 800d8fc:	1fff7598 	.word	0x1fff7598
 800d900:	20000176 	.word	0x20000176
 800d904:	20000186 	.word	0x20000186

0800d908 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d908:	b480      	push	{r7}
 800d90a:	b087      	sub	sp, #28
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	60f8      	str	r0, [r7, #12]
 800d910:	60b9      	str	r1, [r7, #8]
 800d912:	4613      	mov	r3, r2
 800d914:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d916:	2300      	movs	r3, #0
 800d918:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d91a:	2300      	movs	r3, #0
 800d91c:	75fb      	strb	r3, [r7, #23]
 800d91e:	e027      	b.n	800d970 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	0f1b      	lsrs	r3, r3, #28
 800d924:	2b09      	cmp	r3, #9
 800d926:	d80b      	bhi.n	800d940 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	0f1b      	lsrs	r3, r3, #28
 800d92c:	b2da      	uxtb	r2, r3
 800d92e:	7dfb      	ldrb	r3, [r7, #23]
 800d930:	005b      	lsls	r3, r3, #1
 800d932:	4619      	mov	r1, r3
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	440b      	add	r3, r1
 800d938:	3230      	adds	r2, #48	; 0x30
 800d93a:	b2d2      	uxtb	r2, r2
 800d93c:	701a      	strb	r2, [r3, #0]
 800d93e:	e00a      	b.n	800d956 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	0f1b      	lsrs	r3, r3, #28
 800d944:	b2da      	uxtb	r2, r3
 800d946:	7dfb      	ldrb	r3, [r7, #23]
 800d948:	005b      	lsls	r3, r3, #1
 800d94a:	4619      	mov	r1, r3
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	440b      	add	r3, r1
 800d950:	3237      	adds	r2, #55	; 0x37
 800d952:	b2d2      	uxtb	r2, r2
 800d954:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	011b      	lsls	r3, r3, #4
 800d95a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d95c:	7dfb      	ldrb	r3, [r7, #23]
 800d95e:	005b      	lsls	r3, r3, #1
 800d960:	3301      	adds	r3, #1
 800d962:	68ba      	ldr	r2, [r7, #8]
 800d964:	4413      	add	r3, r2
 800d966:	2200      	movs	r2, #0
 800d968:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d96a:	7dfb      	ldrb	r3, [r7, #23]
 800d96c:	3301      	adds	r3, #1
 800d96e:	75fb      	strb	r3, [r7, #23]
 800d970:	7dfa      	ldrb	r2, [r7, #23]
 800d972:	79fb      	ldrb	r3, [r7, #7]
 800d974:	429a      	cmp	r2, r3
 800d976:	d3d3      	bcc.n	800d920 <IntToUnicode+0x18>
  }
}
 800d978:	bf00      	nop
 800d97a:	bf00      	nop
 800d97c:	371c      	adds	r7, #28
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr
	...

0800d988 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b098      	sub	sp, #96	; 0x60
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d990:	f107 030c 	add.w	r3, r7, #12
 800d994:	2254      	movs	r2, #84	; 0x54
 800d996:	2100      	movs	r1, #0
 800d998:	4618      	mov	r0, r3
 800d99a:	f001 f91c 	bl	800ebd6 <memset>
  if(pcdHandle->Instance==USB)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	4a19      	ldr	r2, [pc, #100]	; (800da08 <HAL_PCD_MspInit+0x80>)
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d12a      	bne.n	800d9fe <HAL_PCD_MspInit+0x76>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d9a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d9ac:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d9b2:	f107 030c 	add.w	r3, r7, #12
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7fa ffba 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d001      	beq.n	800d9c6 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800d9c2:	f7f4 fbcb 	bl	800215c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d9c6:	4b11      	ldr	r3, [pc, #68]	; (800da0c <HAL_PCD_MspInit+0x84>)
 800d9c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9ca:	4a10      	ldr	r2, [pc, #64]	; (800da0c <HAL_PCD_MspInit+0x84>)
 800d9cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d9d0:	6593      	str	r3, [r2, #88]	; 0x58
 800d9d2:	4b0e      	ldr	r3, [pc, #56]	; (800da0c <HAL_PCD_MspInit+0x84>)
 800d9d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d9da:	60bb      	str	r3, [r7, #8]
 800d9dc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800d9de:	2200      	movs	r2, #0
 800d9e0:	2100      	movs	r1, #0
 800d9e2:	2013      	movs	r0, #19
 800d9e4:	f7f6 ff65 	bl	80048b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800d9e8:	2013      	movs	r0, #19
 800d9ea:	f7f6 ff7c 	bl	80048e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	2100      	movs	r1, #0
 800d9f2:	2014      	movs	r0, #20
 800d9f4:	f7f6 ff5d 	bl	80048b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d9f8:	2014      	movs	r0, #20
 800d9fa:	f7f6 ff74 	bl	80048e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d9fe:	bf00      	nop
 800da00:	3760      	adds	r7, #96	; 0x60
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop
 800da08:	40005c00 	.word	0x40005c00
 800da0c:	40021000 	.word	0x40021000

0800da10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b082      	sub	sp, #8
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800da24:	4619      	mov	r1, r3
 800da26:	4610      	mov	r0, r2
 800da28:	f7fe fd0e 	bl	800c448 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800da2c:	bf00      	nop
 800da2e:	3708      	adds	r7, #8
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}

0800da34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b082      	sub	sp, #8
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	460b      	mov	r3, r1
 800da3e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800da46:	78fa      	ldrb	r2, [r7, #3]
 800da48:	6879      	ldr	r1, [r7, #4]
 800da4a:	4613      	mov	r3, r2
 800da4c:	009b      	lsls	r3, r3, #2
 800da4e:	4413      	add	r3, r2
 800da50:	00db      	lsls	r3, r3, #3
 800da52:	440b      	add	r3, r1
 800da54:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800da58:	681a      	ldr	r2, [r3, #0]
 800da5a:	78fb      	ldrb	r3, [r7, #3]
 800da5c:	4619      	mov	r1, r3
 800da5e:	f7fe fd48 	bl	800c4f2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800da62:	bf00      	nop
 800da64:	3708      	adds	r7, #8
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}

0800da6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da6a:	b580      	push	{r7, lr}
 800da6c:	b082      	sub	sp, #8
 800da6e:	af00      	add	r7, sp, #0
 800da70:	6078      	str	r0, [r7, #4]
 800da72:	460b      	mov	r3, r1
 800da74:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800da7c:	78fa      	ldrb	r2, [r7, #3]
 800da7e:	6879      	ldr	r1, [r7, #4]
 800da80:	4613      	mov	r3, r2
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	4413      	add	r3, r2
 800da86:	00db      	lsls	r3, r3, #3
 800da88:	440b      	add	r3, r1
 800da8a:	3324      	adds	r3, #36	; 0x24
 800da8c:	681a      	ldr	r2, [r3, #0]
 800da8e:	78fb      	ldrb	r3, [r7, #3]
 800da90:	4619      	mov	r1, r3
 800da92:	f7fe fd91 	bl	800c5b8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800da96:	bf00      	nop
 800da98:	3708      	adds	r7, #8
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}

0800da9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da9e:	b580      	push	{r7, lr}
 800daa0:	b082      	sub	sp, #8
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800daac:	4618      	mov	r0, r3
 800daae:	f7fe fea5 	bl	800c7fc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800dab2:	bf00      	nop
 800dab4:	3708      	adds	r7, #8
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}

0800daba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daba:	b580      	push	{r7, lr}
 800dabc:	b084      	sub	sp, #16
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dac2:	2301      	movs	r3, #1
 800dac4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	795b      	ldrb	r3, [r3, #5]
 800daca:	2b02      	cmp	r3, #2
 800dacc:	d001      	beq.n	800dad2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dace:	f7f4 fb45 	bl	800215c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dad8:	7bfa      	ldrb	r2, [r7, #15]
 800dada:	4611      	mov	r1, r2
 800dadc:	4618      	mov	r0, r3
 800dade:	f7fe fe4f 	bl	800c780 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dae8:	4618      	mov	r0, r3
 800daea:	f7fe fdfb 	bl	800c6e4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800daee:	bf00      	nop
 800daf0:	3710      	adds	r7, #16
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
	...

0800daf8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800db06:	4618      	mov	r0, r3
 800db08:	f7fe fe4a 	bl	800c7a0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	7a5b      	ldrb	r3, [r3, #9]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d005      	beq.n	800db20 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db14:	4b04      	ldr	r3, [pc, #16]	; (800db28 <HAL_PCD_SuspendCallback+0x30>)
 800db16:	691b      	ldr	r3, [r3, #16]
 800db18:	4a03      	ldr	r2, [pc, #12]	; (800db28 <HAL_PCD_SuspendCallback+0x30>)
 800db1a:	f043 0306 	orr.w	r3, r3, #6
 800db1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800db20:	bf00      	nop
 800db22:	3708      	adds	r7, #8
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}
 800db28:	e000ed00 	.word	0xe000ed00

0800db2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	7a5b      	ldrb	r3, [r3, #9]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d007      	beq.n	800db4c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db3c:	4b08      	ldr	r3, [pc, #32]	; (800db60 <HAL_PCD_ResumeCallback+0x34>)
 800db3e:	691b      	ldr	r3, [r3, #16]
 800db40:	4a07      	ldr	r2, [pc, #28]	; (800db60 <HAL_PCD_ResumeCallback+0x34>)
 800db42:	f023 0306 	bic.w	r3, r3, #6
 800db46:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800db48:	f000 f9f8 	bl	800df3c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800db52:	4618      	mov	r0, r3
 800db54:	f7fe fe3a 	bl	800c7cc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800db58:	bf00      	nop
 800db5a:	3708      	adds	r7, #8
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	e000ed00 	.word	0xe000ed00

0800db64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b082      	sub	sp, #8
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800db6c:	4a2b      	ldr	r2, [pc, #172]	; (800dc1c <USBD_LL_Init+0xb8>)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	4a29      	ldr	r2, [pc, #164]	; (800dc1c <USBD_LL_Init+0xb8>)
 800db78:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800db7c:	4b27      	ldr	r3, [pc, #156]	; (800dc1c <USBD_LL_Init+0xb8>)
 800db7e:	4a28      	ldr	r2, [pc, #160]	; (800dc20 <USBD_LL_Init+0xbc>)
 800db80:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800db82:	4b26      	ldr	r3, [pc, #152]	; (800dc1c <USBD_LL_Init+0xb8>)
 800db84:	2208      	movs	r2, #8
 800db86:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800db88:	4b24      	ldr	r3, [pc, #144]	; (800dc1c <USBD_LL_Init+0xb8>)
 800db8a:	2202      	movs	r2, #2
 800db8c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800db8e:	4b23      	ldr	r3, [pc, #140]	; (800dc1c <USBD_LL_Init+0xb8>)
 800db90:	2202      	movs	r2, #2
 800db92:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800db94:	4b21      	ldr	r3, [pc, #132]	; (800dc1c <USBD_LL_Init+0xb8>)
 800db96:	2200      	movs	r2, #0
 800db98:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800db9a:	4b20      	ldr	r3, [pc, #128]	; (800dc1c <USBD_LL_Init+0xb8>)
 800db9c:	2200      	movs	r2, #0
 800db9e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800dba0:	4b1e      	ldr	r3, [pc, #120]	; (800dc1c <USBD_LL_Init+0xb8>)
 800dba2:	2200      	movs	r2, #0
 800dba4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800dba6:	4b1d      	ldr	r3, [pc, #116]	; (800dc1c <USBD_LL_Init+0xb8>)
 800dba8:	2200      	movs	r2, #0
 800dbaa:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800dbac:	481b      	ldr	r0, [pc, #108]	; (800dc1c <USBD_LL_Init+0xb8>)
 800dbae:	f7f8 fbd4 	bl	800635a <HAL_PCD_Init>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d001      	beq.n	800dbbc <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800dbb8:	f7f4 fad0 	bl	800215c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dbc2:	2318      	movs	r3, #24
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	2100      	movs	r1, #0
 800dbc8:	f7fa f88e 	bl	8007ce8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dbd2:	2358      	movs	r3, #88	; 0x58
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	2180      	movs	r1, #128	; 0x80
 800dbd8:	f7fa f886 	bl	8007ce8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dbe2:	23c0      	movs	r3, #192	; 0xc0
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	2181      	movs	r1, #129	; 0x81
 800dbe8:	f7fa f87e 	bl	8007ce8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dbf2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	2101      	movs	r1, #1
 800dbfa:	f7fa f875 	bl	8007ce8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dc04:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc08:	2200      	movs	r2, #0
 800dc0a:	2182      	movs	r1, #130	; 0x82
 800dc0c:	f7fa f86c 	bl	8007ce8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800dc10:	2300      	movs	r3, #0
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3708      	adds	r7, #8
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
 800dc1a:	bf00      	nop
 800dc1c:	20004c78 	.word	0x20004c78
 800dc20:	40005c00 	.word	0x40005c00

0800dc24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc30:	2300      	movs	r3, #0
 800dc32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7f8 fc5b 	bl	80064f6 <HAL_PCD_Start>
 800dc40:	4603      	mov	r3, r0
 800dc42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc44:	7bfb      	ldrb	r3, [r7, #15]
 800dc46:	4618      	mov	r0, r3
 800dc48:	f000 f97e 	bl	800df48 <USBD_Get_USB_Status>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc50:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3710      	adds	r7, #16
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}

0800dc5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dc5a:	b580      	push	{r7, lr}
 800dc5c:	b084      	sub	sp, #16
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	6078      	str	r0, [r7, #4]
 800dc62:	4608      	mov	r0, r1
 800dc64:	4611      	mov	r1, r2
 800dc66:	461a      	mov	r2, r3
 800dc68:	4603      	mov	r3, r0
 800dc6a:	70fb      	strb	r3, [r7, #3]
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	70bb      	strb	r3, [r7, #2]
 800dc70:	4613      	mov	r3, r2
 800dc72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc74:	2300      	movs	r3, #0
 800dc76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dc82:	78bb      	ldrb	r3, [r7, #2]
 800dc84:	883a      	ldrh	r2, [r7, #0]
 800dc86:	78f9      	ldrb	r1, [r7, #3]
 800dc88:	f7f8 fda2 	bl	80067d0 <HAL_PCD_EP_Open>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc90:	7bfb      	ldrb	r3, [r7, #15]
 800dc92:	4618      	mov	r0, r3
 800dc94:	f000 f958 	bl	800df48 <USBD_Get_USB_Status>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3710      	adds	r7, #16
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}

0800dca6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dca6:	b580      	push	{r7, lr}
 800dca8:	b084      	sub	sp, #16
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	6078      	str	r0, [r7, #4]
 800dcae:	460b      	mov	r3, r1
 800dcb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dcc0:	78fa      	ldrb	r2, [r7, #3]
 800dcc2:	4611      	mov	r1, r2
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7f8 fde0 	bl	800688a <HAL_PCD_EP_Close>
 800dcca:	4603      	mov	r3, r0
 800dccc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcce:	7bfb      	ldrb	r3, [r7, #15]
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f000 f939 	bl	800df48 <USBD_Get_USB_Status>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcda:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3710      	adds	r7, #16
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b084      	sub	sp, #16
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	460b      	mov	r3, r1
 800dcee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dcfe:	78fa      	ldrb	r2, [r7, #3]
 800dd00:	4611      	mov	r1, r2
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7f8 fe89 	bl	8006a1a <HAL_PCD_EP_SetStall>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd0c:	7bfb      	ldrb	r3, [r7, #15]
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f000 f91a 	bl	800df48 <USBD_Get_USB_Status>
 800dd14:	4603      	mov	r3, r0
 800dd16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd18:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3710      	adds	r7, #16
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}

0800dd22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b084      	sub	sp, #16
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
 800dd2a:	460b      	mov	r3, r1
 800dd2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd32:	2300      	movs	r3, #0
 800dd34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dd3c:	78fa      	ldrb	r2, [r7, #3]
 800dd3e:	4611      	mov	r1, r2
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7f8 febc 	bl	8006abe <HAL_PCD_EP_ClrStall>
 800dd46:	4603      	mov	r3, r0
 800dd48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd4a:	7bfb      	ldrb	r3, [r7, #15]
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f000 f8fb 	bl	800df48 <USBD_Get_USB_Status>
 800dd52:	4603      	mov	r3, r0
 800dd54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd56:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3710      	adds	r7, #16
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd60:	b480      	push	{r7}
 800dd62:	b085      	sub	sp, #20
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	460b      	mov	r3, r1
 800dd6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dd72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dd74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	da0b      	bge.n	800dd94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dd7c:	78fb      	ldrb	r3, [r7, #3]
 800dd7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd82:	68f9      	ldr	r1, [r7, #12]
 800dd84:	4613      	mov	r3, r2
 800dd86:	009b      	lsls	r3, r3, #2
 800dd88:	4413      	add	r3, r2
 800dd8a:	00db      	lsls	r3, r3, #3
 800dd8c:	440b      	add	r3, r1
 800dd8e:	3312      	adds	r3, #18
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	e00b      	b.n	800ddac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dd94:	78fb      	ldrb	r3, [r7, #3]
 800dd96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd9a:	68f9      	ldr	r1, [r7, #12]
 800dd9c:	4613      	mov	r3, r2
 800dd9e:	009b      	lsls	r3, r3, #2
 800dda0:	4413      	add	r3, r2
 800dda2:	00db      	lsls	r3, r3, #3
 800dda4:	440b      	add	r3, r1
 800dda6:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800ddaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3714      	adds	r7, #20
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb6:	4770      	bx	lr

0800ddb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b084      	sub	sp, #16
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ddd2:	78fa      	ldrb	r2, [r7, #3]
 800ddd4:	4611      	mov	r1, r2
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f7f8 fcd6 	bl	8006788 <HAL_PCD_SetAddress>
 800dddc:	4603      	mov	r3, r0
 800ddde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dde0:	7bfb      	ldrb	r3, [r7, #15]
 800dde2:	4618      	mov	r0, r3
 800dde4:	f000 f8b0 	bl	800df48 <USBD_Get_USB_Status>
 800dde8:	4603      	mov	r3, r0
 800ddea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddec:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3710      	adds	r7, #16
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}

0800ddf6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ddf6:	b580      	push	{r7, lr}
 800ddf8:	b086      	sub	sp, #24
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	60f8      	str	r0, [r7, #12]
 800ddfe:	607a      	str	r2, [r7, #4]
 800de00:	603b      	str	r3, [r7, #0]
 800de02:	460b      	mov	r3, r1
 800de04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de06:	2300      	movs	r3, #0
 800de08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de0a:	2300      	movs	r3, #0
 800de0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800de14:	7af9      	ldrb	r1, [r7, #11]
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	687a      	ldr	r2, [r7, #4]
 800de1a:	f7f8 fdc7 	bl	80069ac <HAL_PCD_EP_Transmit>
 800de1e:	4603      	mov	r3, r0
 800de20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de22:	7dfb      	ldrb	r3, [r7, #23]
 800de24:	4618      	mov	r0, r3
 800de26:	f000 f88f 	bl	800df48 <USBD_Get_USB_Status>
 800de2a:	4603      	mov	r3, r0
 800de2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de2e:	7dbb      	ldrb	r3, [r7, #22]
}
 800de30:	4618      	mov	r0, r3
 800de32:	3718      	adds	r7, #24
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b086      	sub	sp, #24
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	607a      	str	r2, [r7, #4]
 800de42:	603b      	str	r3, [r7, #0]
 800de44:	460b      	mov	r3, r1
 800de46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de48:	2300      	movs	r3, #0
 800de4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de4c:	2300      	movs	r3, #0
 800de4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800de56:	7af9      	ldrb	r1, [r7, #11]
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	687a      	ldr	r2, [r7, #4]
 800de5c:	f7f8 fd5d 	bl	800691a <HAL_PCD_EP_Receive>
 800de60:	4603      	mov	r3, r0
 800de62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de64:	7dfb      	ldrb	r3, [r7, #23]
 800de66:	4618      	mov	r0, r3
 800de68:	f000 f86e 	bl	800df48 <USBD_Get_USB_Status>
 800de6c:	4603      	mov	r3, r0
 800de6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de70:	7dbb      	ldrb	r3, [r7, #22]
}
 800de72:	4618      	mov	r0, r3
 800de74:	3718      	adds	r7, #24
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b082      	sub	sp, #8
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
 800de82:	460b      	mov	r3, r1
 800de84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800de8c:	78fa      	ldrb	r2, [r7, #3]
 800de8e:	4611      	mov	r1, r2
 800de90:	4618      	mov	r0, r3
 800de92:	f7f8 fd73 	bl	800697c <HAL_PCD_EP_GetRxCount>
 800de96:	4603      	mov	r3, r0
}
 800de98:	4618      	mov	r0, r3
 800de9a:	3708      	adds	r7, #8
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b082      	sub	sp, #8
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	460b      	mov	r3, r1
 800deaa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800deac:	78fb      	ldrb	r3, [r7, #3]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d002      	beq.n	800deb8 <HAL_PCDEx_LPM_Callback+0x18>
 800deb2:	2b01      	cmp	r3, #1
 800deb4:	d013      	beq.n	800dede <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800deb6:	e023      	b.n	800df00 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	7a5b      	ldrb	r3, [r3, #9]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d007      	beq.n	800ded0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800dec0:	f000 f83c 	bl	800df3c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dec4:	4b10      	ldr	r3, [pc, #64]	; (800df08 <HAL_PCDEx_LPM_Callback+0x68>)
 800dec6:	691b      	ldr	r3, [r3, #16]
 800dec8:	4a0f      	ldr	r2, [pc, #60]	; (800df08 <HAL_PCDEx_LPM_Callback+0x68>)
 800deca:	f023 0306 	bic.w	r3, r3, #6
 800dece:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7fe fc78 	bl	800c7cc <USBD_LL_Resume>
    break;
 800dedc:	e010      	b.n	800df00 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7fe fc5b 	bl	800c7a0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	7a5b      	ldrb	r3, [r3, #9]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d005      	beq.n	800defe <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800def2:	4b05      	ldr	r3, [pc, #20]	; (800df08 <HAL_PCDEx_LPM_Callback+0x68>)
 800def4:	691b      	ldr	r3, [r3, #16]
 800def6:	4a04      	ldr	r2, [pc, #16]	; (800df08 <HAL_PCDEx_LPM_Callback+0x68>)
 800def8:	f043 0306 	orr.w	r3, r3, #6
 800defc:	6113      	str	r3, [r2, #16]
    break;
 800defe:	bf00      	nop
}
 800df00:	bf00      	nop
 800df02:	3708      	adds	r7, #8
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}
 800df08:	e000ed00 	.word	0xe000ed00

0800df0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b083      	sub	sp, #12
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800df14:	4b03      	ldr	r3, [pc, #12]	; (800df24 <USBD_static_malloc+0x18>)
}
 800df16:	4618      	mov	r0, r3
 800df18:	370c      	adds	r7, #12
 800df1a:	46bd      	mov	sp, r7
 800df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df20:	4770      	bx	lr
 800df22:	bf00      	nop
 800df24:	20004f54 	.word	0x20004f54

0800df28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800df28:	b480      	push	{r7}
 800df2a:	b083      	sub	sp, #12
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]

}
 800df30:	bf00      	nop
 800df32:	370c      	adds	r7, #12
 800df34:	46bd      	mov	sp, r7
 800df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3a:	4770      	bx	lr

0800df3c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800df40:	f7f2 ff90 	bl	8000e64 <SystemClock_Config>
}
 800df44:	bf00      	nop
 800df46:	bd80      	pop	{r7, pc}

0800df48 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800df48:	b480      	push	{r7}
 800df4a:	b085      	sub	sp, #20
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	4603      	mov	r3, r0
 800df50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df52:	2300      	movs	r3, #0
 800df54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800df56:	79fb      	ldrb	r3, [r7, #7]
 800df58:	2b03      	cmp	r3, #3
 800df5a:	d817      	bhi.n	800df8c <USBD_Get_USB_Status+0x44>
 800df5c:	a201      	add	r2, pc, #4	; (adr r2, 800df64 <USBD_Get_USB_Status+0x1c>)
 800df5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df62:	bf00      	nop
 800df64:	0800df75 	.word	0x0800df75
 800df68:	0800df7b 	.word	0x0800df7b
 800df6c:	0800df81 	.word	0x0800df81
 800df70:	0800df87 	.word	0x0800df87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800df74:	2300      	movs	r3, #0
 800df76:	73fb      	strb	r3, [r7, #15]
    break;
 800df78:	e00b      	b.n	800df92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df7a:	2303      	movs	r3, #3
 800df7c:	73fb      	strb	r3, [r7, #15]
    break;
 800df7e:	e008      	b.n	800df92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df80:	2301      	movs	r3, #1
 800df82:	73fb      	strb	r3, [r7, #15]
    break;
 800df84:	e005      	b.n	800df92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df86:	2303      	movs	r3, #3
 800df88:	73fb      	strb	r3, [r7, #15]
    break;
 800df8a:	e002      	b.n	800df92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800df8c:	2303      	movs	r3, #3
 800df8e:	73fb      	strb	r3, [r7, #15]
    break;
 800df90:	bf00      	nop
  }
  return usb_status;
 800df92:	7bfb      	ldrb	r3, [r7, #15]
}
 800df94:	4618      	mov	r0, r3
 800df96:	3714      	adds	r7, #20
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <atoi>:
 800dfa0:	220a      	movs	r2, #10
 800dfa2:	2100      	movs	r1, #0
 800dfa4:	f000 b882 	b.w	800e0ac <strtol>

0800dfa8 <_strtol_l.constprop.0>:
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfae:	d001      	beq.n	800dfb4 <_strtol_l.constprop.0+0xc>
 800dfb0:	2b24      	cmp	r3, #36	; 0x24
 800dfb2:	d906      	bls.n	800dfc2 <_strtol_l.constprop.0+0x1a>
 800dfb4:	f000 fed0 	bl	800ed58 <__errno>
 800dfb8:	2316      	movs	r3, #22
 800dfba:	6003      	str	r3, [r0, #0]
 800dfbc:	2000      	movs	r0, #0
 800dfbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfc2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e0a8 <_strtol_l.constprop.0+0x100>
 800dfc6:	460d      	mov	r5, r1
 800dfc8:	462e      	mov	r6, r5
 800dfca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dfce:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800dfd2:	f017 0708 	ands.w	r7, r7, #8
 800dfd6:	d1f7      	bne.n	800dfc8 <_strtol_l.constprop.0+0x20>
 800dfd8:	2c2d      	cmp	r4, #45	; 0x2d
 800dfda:	d132      	bne.n	800e042 <_strtol_l.constprop.0+0x9a>
 800dfdc:	782c      	ldrb	r4, [r5, #0]
 800dfde:	2701      	movs	r7, #1
 800dfe0:	1cb5      	adds	r5, r6, #2
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d05b      	beq.n	800e09e <_strtol_l.constprop.0+0xf6>
 800dfe6:	2b10      	cmp	r3, #16
 800dfe8:	d109      	bne.n	800dffe <_strtol_l.constprop.0+0x56>
 800dfea:	2c30      	cmp	r4, #48	; 0x30
 800dfec:	d107      	bne.n	800dffe <_strtol_l.constprop.0+0x56>
 800dfee:	782c      	ldrb	r4, [r5, #0]
 800dff0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dff4:	2c58      	cmp	r4, #88	; 0x58
 800dff6:	d14d      	bne.n	800e094 <_strtol_l.constprop.0+0xec>
 800dff8:	786c      	ldrb	r4, [r5, #1]
 800dffa:	2310      	movs	r3, #16
 800dffc:	3502      	adds	r5, #2
 800dffe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e002:	f108 38ff 	add.w	r8, r8, #4294967295
 800e006:	f04f 0e00 	mov.w	lr, #0
 800e00a:	fbb8 f9f3 	udiv	r9, r8, r3
 800e00e:	4676      	mov	r6, lr
 800e010:	fb03 8a19 	mls	sl, r3, r9, r8
 800e014:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e018:	f1bc 0f09 	cmp.w	ip, #9
 800e01c:	d816      	bhi.n	800e04c <_strtol_l.constprop.0+0xa4>
 800e01e:	4664      	mov	r4, ip
 800e020:	42a3      	cmp	r3, r4
 800e022:	dd24      	ble.n	800e06e <_strtol_l.constprop.0+0xc6>
 800e024:	f1be 3fff 	cmp.w	lr, #4294967295
 800e028:	d008      	beq.n	800e03c <_strtol_l.constprop.0+0x94>
 800e02a:	45b1      	cmp	r9, r6
 800e02c:	d31c      	bcc.n	800e068 <_strtol_l.constprop.0+0xc0>
 800e02e:	d101      	bne.n	800e034 <_strtol_l.constprop.0+0x8c>
 800e030:	45a2      	cmp	sl, r4
 800e032:	db19      	blt.n	800e068 <_strtol_l.constprop.0+0xc0>
 800e034:	fb06 4603 	mla	r6, r6, r3, r4
 800e038:	f04f 0e01 	mov.w	lr, #1
 800e03c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e040:	e7e8      	b.n	800e014 <_strtol_l.constprop.0+0x6c>
 800e042:	2c2b      	cmp	r4, #43	; 0x2b
 800e044:	bf04      	itt	eq
 800e046:	782c      	ldrbeq	r4, [r5, #0]
 800e048:	1cb5      	addeq	r5, r6, #2
 800e04a:	e7ca      	b.n	800dfe2 <_strtol_l.constprop.0+0x3a>
 800e04c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e050:	f1bc 0f19 	cmp.w	ip, #25
 800e054:	d801      	bhi.n	800e05a <_strtol_l.constprop.0+0xb2>
 800e056:	3c37      	subs	r4, #55	; 0x37
 800e058:	e7e2      	b.n	800e020 <_strtol_l.constprop.0+0x78>
 800e05a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e05e:	f1bc 0f19 	cmp.w	ip, #25
 800e062:	d804      	bhi.n	800e06e <_strtol_l.constprop.0+0xc6>
 800e064:	3c57      	subs	r4, #87	; 0x57
 800e066:	e7db      	b.n	800e020 <_strtol_l.constprop.0+0x78>
 800e068:	f04f 3eff 	mov.w	lr, #4294967295
 800e06c:	e7e6      	b.n	800e03c <_strtol_l.constprop.0+0x94>
 800e06e:	f1be 3fff 	cmp.w	lr, #4294967295
 800e072:	d105      	bne.n	800e080 <_strtol_l.constprop.0+0xd8>
 800e074:	2322      	movs	r3, #34	; 0x22
 800e076:	6003      	str	r3, [r0, #0]
 800e078:	4646      	mov	r6, r8
 800e07a:	b942      	cbnz	r2, 800e08e <_strtol_l.constprop.0+0xe6>
 800e07c:	4630      	mov	r0, r6
 800e07e:	e79e      	b.n	800dfbe <_strtol_l.constprop.0+0x16>
 800e080:	b107      	cbz	r7, 800e084 <_strtol_l.constprop.0+0xdc>
 800e082:	4276      	negs	r6, r6
 800e084:	2a00      	cmp	r2, #0
 800e086:	d0f9      	beq.n	800e07c <_strtol_l.constprop.0+0xd4>
 800e088:	f1be 0f00 	cmp.w	lr, #0
 800e08c:	d000      	beq.n	800e090 <_strtol_l.constprop.0+0xe8>
 800e08e:	1e69      	subs	r1, r5, #1
 800e090:	6011      	str	r1, [r2, #0]
 800e092:	e7f3      	b.n	800e07c <_strtol_l.constprop.0+0xd4>
 800e094:	2430      	movs	r4, #48	; 0x30
 800e096:	2b00      	cmp	r3, #0
 800e098:	d1b1      	bne.n	800dffe <_strtol_l.constprop.0+0x56>
 800e09a:	2308      	movs	r3, #8
 800e09c:	e7af      	b.n	800dffe <_strtol_l.constprop.0+0x56>
 800e09e:	2c30      	cmp	r4, #48	; 0x30
 800e0a0:	d0a5      	beq.n	800dfee <_strtol_l.constprop.0+0x46>
 800e0a2:	230a      	movs	r3, #10
 800e0a4:	e7ab      	b.n	800dffe <_strtol_l.constprop.0+0x56>
 800e0a6:	bf00      	nop
 800e0a8:	08011f71 	.word	0x08011f71

0800e0ac <strtol>:
 800e0ac:	4613      	mov	r3, r2
 800e0ae:	460a      	mov	r2, r1
 800e0b0:	4601      	mov	r1, r0
 800e0b2:	4802      	ldr	r0, [pc, #8]	; (800e0bc <strtol+0x10>)
 800e0b4:	6800      	ldr	r0, [r0, #0]
 800e0b6:	f7ff bf77 	b.w	800dfa8 <_strtol_l.constprop.0>
 800e0ba:	bf00      	nop
 800e0bc:	200001e8 	.word	0x200001e8

0800e0c0 <__cvt>:
 800e0c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0c4:	ec55 4b10 	vmov	r4, r5, d0
 800e0c8:	2d00      	cmp	r5, #0
 800e0ca:	460e      	mov	r6, r1
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	462b      	mov	r3, r5
 800e0d0:	bfbb      	ittet	lt
 800e0d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e0d6:	461d      	movlt	r5, r3
 800e0d8:	2300      	movge	r3, #0
 800e0da:	232d      	movlt	r3, #45	; 0x2d
 800e0dc:	700b      	strb	r3, [r1, #0]
 800e0de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e0e4:	4691      	mov	r9, r2
 800e0e6:	f023 0820 	bic.w	r8, r3, #32
 800e0ea:	bfbc      	itt	lt
 800e0ec:	4622      	movlt	r2, r4
 800e0ee:	4614      	movlt	r4, r2
 800e0f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e0f4:	d005      	beq.n	800e102 <__cvt+0x42>
 800e0f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e0fa:	d100      	bne.n	800e0fe <__cvt+0x3e>
 800e0fc:	3601      	adds	r6, #1
 800e0fe:	2102      	movs	r1, #2
 800e100:	e000      	b.n	800e104 <__cvt+0x44>
 800e102:	2103      	movs	r1, #3
 800e104:	ab03      	add	r3, sp, #12
 800e106:	9301      	str	r3, [sp, #4]
 800e108:	ab02      	add	r3, sp, #8
 800e10a:	9300      	str	r3, [sp, #0]
 800e10c:	ec45 4b10 	vmov	d0, r4, r5
 800e110:	4653      	mov	r3, sl
 800e112:	4632      	mov	r2, r6
 800e114:	f000 ff04 	bl	800ef20 <_dtoa_r>
 800e118:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e11c:	4607      	mov	r7, r0
 800e11e:	d102      	bne.n	800e126 <__cvt+0x66>
 800e120:	f019 0f01 	tst.w	r9, #1
 800e124:	d022      	beq.n	800e16c <__cvt+0xac>
 800e126:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e12a:	eb07 0906 	add.w	r9, r7, r6
 800e12e:	d110      	bne.n	800e152 <__cvt+0x92>
 800e130:	783b      	ldrb	r3, [r7, #0]
 800e132:	2b30      	cmp	r3, #48	; 0x30
 800e134:	d10a      	bne.n	800e14c <__cvt+0x8c>
 800e136:	2200      	movs	r2, #0
 800e138:	2300      	movs	r3, #0
 800e13a:	4620      	mov	r0, r4
 800e13c:	4629      	mov	r1, r5
 800e13e:	f7f2 fcfb 	bl	8000b38 <__aeabi_dcmpeq>
 800e142:	b918      	cbnz	r0, 800e14c <__cvt+0x8c>
 800e144:	f1c6 0601 	rsb	r6, r6, #1
 800e148:	f8ca 6000 	str.w	r6, [sl]
 800e14c:	f8da 3000 	ldr.w	r3, [sl]
 800e150:	4499      	add	r9, r3
 800e152:	2200      	movs	r2, #0
 800e154:	2300      	movs	r3, #0
 800e156:	4620      	mov	r0, r4
 800e158:	4629      	mov	r1, r5
 800e15a:	f7f2 fced 	bl	8000b38 <__aeabi_dcmpeq>
 800e15e:	b108      	cbz	r0, 800e164 <__cvt+0xa4>
 800e160:	f8cd 900c 	str.w	r9, [sp, #12]
 800e164:	2230      	movs	r2, #48	; 0x30
 800e166:	9b03      	ldr	r3, [sp, #12]
 800e168:	454b      	cmp	r3, r9
 800e16a:	d307      	bcc.n	800e17c <__cvt+0xbc>
 800e16c:	9b03      	ldr	r3, [sp, #12]
 800e16e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e170:	1bdb      	subs	r3, r3, r7
 800e172:	4638      	mov	r0, r7
 800e174:	6013      	str	r3, [r2, #0]
 800e176:	b004      	add	sp, #16
 800e178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e17c:	1c59      	adds	r1, r3, #1
 800e17e:	9103      	str	r1, [sp, #12]
 800e180:	701a      	strb	r2, [r3, #0]
 800e182:	e7f0      	b.n	800e166 <__cvt+0xa6>

0800e184 <__exponent>:
 800e184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e186:	4603      	mov	r3, r0
 800e188:	2900      	cmp	r1, #0
 800e18a:	bfb8      	it	lt
 800e18c:	4249      	neglt	r1, r1
 800e18e:	f803 2b02 	strb.w	r2, [r3], #2
 800e192:	bfb4      	ite	lt
 800e194:	222d      	movlt	r2, #45	; 0x2d
 800e196:	222b      	movge	r2, #43	; 0x2b
 800e198:	2909      	cmp	r1, #9
 800e19a:	7042      	strb	r2, [r0, #1]
 800e19c:	dd2a      	ble.n	800e1f4 <__exponent+0x70>
 800e19e:	f10d 0207 	add.w	r2, sp, #7
 800e1a2:	4617      	mov	r7, r2
 800e1a4:	260a      	movs	r6, #10
 800e1a6:	4694      	mov	ip, r2
 800e1a8:	fb91 f5f6 	sdiv	r5, r1, r6
 800e1ac:	fb06 1415 	mls	r4, r6, r5, r1
 800e1b0:	3430      	adds	r4, #48	; 0x30
 800e1b2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e1b6:	460c      	mov	r4, r1
 800e1b8:	2c63      	cmp	r4, #99	; 0x63
 800e1ba:	f102 32ff 	add.w	r2, r2, #4294967295
 800e1be:	4629      	mov	r1, r5
 800e1c0:	dcf1      	bgt.n	800e1a6 <__exponent+0x22>
 800e1c2:	3130      	adds	r1, #48	; 0x30
 800e1c4:	f1ac 0402 	sub.w	r4, ip, #2
 800e1c8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e1cc:	1c41      	adds	r1, r0, #1
 800e1ce:	4622      	mov	r2, r4
 800e1d0:	42ba      	cmp	r2, r7
 800e1d2:	d30a      	bcc.n	800e1ea <__exponent+0x66>
 800e1d4:	f10d 0209 	add.w	r2, sp, #9
 800e1d8:	eba2 020c 	sub.w	r2, r2, ip
 800e1dc:	42bc      	cmp	r4, r7
 800e1de:	bf88      	it	hi
 800e1e0:	2200      	movhi	r2, #0
 800e1e2:	4413      	add	r3, r2
 800e1e4:	1a18      	subs	r0, r3, r0
 800e1e6:	b003      	add	sp, #12
 800e1e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1ea:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e1ee:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e1f2:	e7ed      	b.n	800e1d0 <__exponent+0x4c>
 800e1f4:	2330      	movs	r3, #48	; 0x30
 800e1f6:	3130      	adds	r1, #48	; 0x30
 800e1f8:	7083      	strb	r3, [r0, #2]
 800e1fa:	70c1      	strb	r1, [r0, #3]
 800e1fc:	1d03      	adds	r3, r0, #4
 800e1fe:	e7f1      	b.n	800e1e4 <__exponent+0x60>

0800e200 <_printf_float>:
 800e200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e204:	ed2d 8b02 	vpush	{d8}
 800e208:	b08d      	sub	sp, #52	; 0x34
 800e20a:	460c      	mov	r4, r1
 800e20c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e210:	4616      	mov	r6, r2
 800e212:	461f      	mov	r7, r3
 800e214:	4605      	mov	r5, r0
 800e216:	f000 fd55 	bl	800ecc4 <_localeconv_r>
 800e21a:	f8d0 a000 	ldr.w	sl, [r0]
 800e21e:	4650      	mov	r0, sl
 800e220:	f7f2 f85e 	bl	80002e0 <strlen>
 800e224:	2300      	movs	r3, #0
 800e226:	930a      	str	r3, [sp, #40]	; 0x28
 800e228:	6823      	ldr	r3, [r4, #0]
 800e22a:	9305      	str	r3, [sp, #20]
 800e22c:	f8d8 3000 	ldr.w	r3, [r8]
 800e230:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e234:	3307      	adds	r3, #7
 800e236:	f023 0307 	bic.w	r3, r3, #7
 800e23a:	f103 0208 	add.w	r2, r3, #8
 800e23e:	f8c8 2000 	str.w	r2, [r8]
 800e242:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e246:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e24a:	9307      	str	r3, [sp, #28]
 800e24c:	f8cd 8018 	str.w	r8, [sp, #24]
 800e250:	ee08 0a10 	vmov	s16, r0
 800e254:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e258:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e25c:	4b9e      	ldr	r3, [pc, #632]	; (800e4d8 <_printf_float+0x2d8>)
 800e25e:	f04f 32ff 	mov.w	r2, #4294967295
 800e262:	f7f2 fc9b 	bl	8000b9c <__aeabi_dcmpun>
 800e266:	bb88      	cbnz	r0, 800e2cc <_printf_float+0xcc>
 800e268:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e26c:	4b9a      	ldr	r3, [pc, #616]	; (800e4d8 <_printf_float+0x2d8>)
 800e26e:	f04f 32ff 	mov.w	r2, #4294967295
 800e272:	f7f2 fc75 	bl	8000b60 <__aeabi_dcmple>
 800e276:	bb48      	cbnz	r0, 800e2cc <_printf_float+0xcc>
 800e278:	2200      	movs	r2, #0
 800e27a:	2300      	movs	r3, #0
 800e27c:	4640      	mov	r0, r8
 800e27e:	4649      	mov	r1, r9
 800e280:	f7f2 fc64 	bl	8000b4c <__aeabi_dcmplt>
 800e284:	b110      	cbz	r0, 800e28c <_printf_float+0x8c>
 800e286:	232d      	movs	r3, #45	; 0x2d
 800e288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e28c:	4a93      	ldr	r2, [pc, #588]	; (800e4dc <_printf_float+0x2dc>)
 800e28e:	4b94      	ldr	r3, [pc, #592]	; (800e4e0 <_printf_float+0x2e0>)
 800e290:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e294:	bf94      	ite	ls
 800e296:	4690      	movls	r8, r2
 800e298:	4698      	movhi	r8, r3
 800e29a:	2303      	movs	r3, #3
 800e29c:	6123      	str	r3, [r4, #16]
 800e29e:	9b05      	ldr	r3, [sp, #20]
 800e2a0:	f023 0304 	bic.w	r3, r3, #4
 800e2a4:	6023      	str	r3, [r4, #0]
 800e2a6:	f04f 0900 	mov.w	r9, #0
 800e2aa:	9700      	str	r7, [sp, #0]
 800e2ac:	4633      	mov	r3, r6
 800e2ae:	aa0b      	add	r2, sp, #44	; 0x2c
 800e2b0:	4621      	mov	r1, r4
 800e2b2:	4628      	mov	r0, r5
 800e2b4:	f000 f9da 	bl	800e66c <_printf_common>
 800e2b8:	3001      	adds	r0, #1
 800e2ba:	f040 8090 	bne.w	800e3de <_printf_float+0x1de>
 800e2be:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c2:	b00d      	add	sp, #52	; 0x34
 800e2c4:	ecbd 8b02 	vpop	{d8}
 800e2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2cc:	4642      	mov	r2, r8
 800e2ce:	464b      	mov	r3, r9
 800e2d0:	4640      	mov	r0, r8
 800e2d2:	4649      	mov	r1, r9
 800e2d4:	f7f2 fc62 	bl	8000b9c <__aeabi_dcmpun>
 800e2d8:	b140      	cbz	r0, 800e2ec <_printf_float+0xec>
 800e2da:	464b      	mov	r3, r9
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	bfbc      	itt	lt
 800e2e0:	232d      	movlt	r3, #45	; 0x2d
 800e2e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e2e6:	4a7f      	ldr	r2, [pc, #508]	; (800e4e4 <_printf_float+0x2e4>)
 800e2e8:	4b7f      	ldr	r3, [pc, #508]	; (800e4e8 <_printf_float+0x2e8>)
 800e2ea:	e7d1      	b.n	800e290 <_printf_float+0x90>
 800e2ec:	6863      	ldr	r3, [r4, #4]
 800e2ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e2f2:	9206      	str	r2, [sp, #24]
 800e2f4:	1c5a      	adds	r2, r3, #1
 800e2f6:	d13f      	bne.n	800e378 <_printf_float+0x178>
 800e2f8:	2306      	movs	r3, #6
 800e2fa:	6063      	str	r3, [r4, #4]
 800e2fc:	9b05      	ldr	r3, [sp, #20]
 800e2fe:	6861      	ldr	r1, [r4, #4]
 800e300:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e304:	2300      	movs	r3, #0
 800e306:	9303      	str	r3, [sp, #12]
 800e308:	ab0a      	add	r3, sp, #40	; 0x28
 800e30a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e30e:	ab09      	add	r3, sp, #36	; 0x24
 800e310:	ec49 8b10 	vmov	d0, r8, r9
 800e314:	9300      	str	r3, [sp, #0]
 800e316:	6022      	str	r2, [r4, #0]
 800e318:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e31c:	4628      	mov	r0, r5
 800e31e:	f7ff fecf 	bl	800e0c0 <__cvt>
 800e322:	9b06      	ldr	r3, [sp, #24]
 800e324:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e326:	2b47      	cmp	r3, #71	; 0x47
 800e328:	4680      	mov	r8, r0
 800e32a:	d108      	bne.n	800e33e <_printf_float+0x13e>
 800e32c:	1cc8      	adds	r0, r1, #3
 800e32e:	db02      	blt.n	800e336 <_printf_float+0x136>
 800e330:	6863      	ldr	r3, [r4, #4]
 800e332:	4299      	cmp	r1, r3
 800e334:	dd41      	ble.n	800e3ba <_printf_float+0x1ba>
 800e336:	f1ab 0302 	sub.w	r3, fp, #2
 800e33a:	fa5f fb83 	uxtb.w	fp, r3
 800e33e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e342:	d820      	bhi.n	800e386 <_printf_float+0x186>
 800e344:	3901      	subs	r1, #1
 800e346:	465a      	mov	r2, fp
 800e348:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e34c:	9109      	str	r1, [sp, #36]	; 0x24
 800e34e:	f7ff ff19 	bl	800e184 <__exponent>
 800e352:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e354:	1813      	adds	r3, r2, r0
 800e356:	2a01      	cmp	r2, #1
 800e358:	4681      	mov	r9, r0
 800e35a:	6123      	str	r3, [r4, #16]
 800e35c:	dc02      	bgt.n	800e364 <_printf_float+0x164>
 800e35e:	6822      	ldr	r2, [r4, #0]
 800e360:	07d2      	lsls	r2, r2, #31
 800e362:	d501      	bpl.n	800e368 <_printf_float+0x168>
 800e364:	3301      	adds	r3, #1
 800e366:	6123      	str	r3, [r4, #16]
 800e368:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d09c      	beq.n	800e2aa <_printf_float+0xaa>
 800e370:	232d      	movs	r3, #45	; 0x2d
 800e372:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e376:	e798      	b.n	800e2aa <_printf_float+0xaa>
 800e378:	9a06      	ldr	r2, [sp, #24]
 800e37a:	2a47      	cmp	r2, #71	; 0x47
 800e37c:	d1be      	bne.n	800e2fc <_printf_float+0xfc>
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d1bc      	bne.n	800e2fc <_printf_float+0xfc>
 800e382:	2301      	movs	r3, #1
 800e384:	e7b9      	b.n	800e2fa <_printf_float+0xfa>
 800e386:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e38a:	d118      	bne.n	800e3be <_printf_float+0x1be>
 800e38c:	2900      	cmp	r1, #0
 800e38e:	6863      	ldr	r3, [r4, #4]
 800e390:	dd0b      	ble.n	800e3aa <_printf_float+0x1aa>
 800e392:	6121      	str	r1, [r4, #16]
 800e394:	b913      	cbnz	r3, 800e39c <_printf_float+0x19c>
 800e396:	6822      	ldr	r2, [r4, #0]
 800e398:	07d0      	lsls	r0, r2, #31
 800e39a:	d502      	bpl.n	800e3a2 <_printf_float+0x1a2>
 800e39c:	3301      	adds	r3, #1
 800e39e:	440b      	add	r3, r1
 800e3a0:	6123      	str	r3, [r4, #16]
 800e3a2:	65a1      	str	r1, [r4, #88]	; 0x58
 800e3a4:	f04f 0900 	mov.w	r9, #0
 800e3a8:	e7de      	b.n	800e368 <_printf_float+0x168>
 800e3aa:	b913      	cbnz	r3, 800e3b2 <_printf_float+0x1b2>
 800e3ac:	6822      	ldr	r2, [r4, #0]
 800e3ae:	07d2      	lsls	r2, r2, #31
 800e3b0:	d501      	bpl.n	800e3b6 <_printf_float+0x1b6>
 800e3b2:	3302      	adds	r3, #2
 800e3b4:	e7f4      	b.n	800e3a0 <_printf_float+0x1a0>
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	e7f2      	b.n	800e3a0 <_printf_float+0x1a0>
 800e3ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e3be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3c0:	4299      	cmp	r1, r3
 800e3c2:	db05      	blt.n	800e3d0 <_printf_float+0x1d0>
 800e3c4:	6823      	ldr	r3, [r4, #0]
 800e3c6:	6121      	str	r1, [r4, #16]
 800e3c8:	07d8      	lsls	r0, r3, #31
 800e3ca:	d5ea      	bpl.n	800e3a2 <_printf_float+0x1a2>
 800e3cc:	1c4b      	adds	r3, r1, #1
 800e3ce:	e7e7      	b.n	800e3a0 <_printf_float+0x1a0>
 800e3d0:	2900      	cmp	r1, #0
 800e3d2:	bfd4      	ite	le
 800e3d4:	f1c1 0202 	rsble	r2, r1, #2
 800e3d8:	2201      	movgt	r2, #1
 800e3da:	4413      	add	r3, r2
 800e3dc:	e7e0      	b.n	800e3a0 <_printf_float+0x1a0>
 800e3de:	6823      	ldr	r3, [r4, #0]
 800e3e0:	055a      	lsls	r2, r3, #21
 800e3e2:	d407      	bmi.n	800e3f4 <_printf_float+0x1f4>
 800e3e4:	6923      	ldr	r3, [r4, #16]
 800e3e6:	4642      	mov	r2, r8
 800e3e8:	4631      	mov	r1, r6
 800e3ea:	4628      	mov	r0, r5
 800e3ec:	47b8      	blx	r7
 800e3ee:	3001      	adds	r0, #1
 800e3f0:	d12c      	bne.n	800e44c <_printf_float+0x24c>
 800e3f2:	e764      	b.n	800e2be <_printf_float+0xbe>
 800e3f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e3f8:	f240 80e0 	bls.w	800e5bc <_printf_float+0x3bc>
 800e3fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e400:	2200      	movs	r2, #0
 800e402:	2300      	movs	r3, #0
 800e404:	f7f2 fb98 	bl	8000b38 <__aeabi_dcmpeq>
 800e408:	2800      	cmp	r0, #0
 800e40a:	d034      	beq.n	800e476 <_printf_float+0x276>
 800e40c:	4a37      	ldr	r2, [pc, #220]	; (800e4ec <_printf_float+0x2ec>)
 800e40e:	2301      	movs	r3, #1
 800e410:	4631      	mov	r1, r6
 800e412:	4628      	mov	r0, r5
 800e414:	47b8      	blx	r7
 800e416:	3001      	adds	r0, #1
 800e418:	f43f af51 	beq.w	800e2be <_printf_float+0xbe>
 800e41c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e420:	429a      	cmp	r2, r3
 800e422:	db02      	blt.n	800e42a <_printf_float+0x22a>
 800e424:	6823      	ldr	r3, [r4, #0]
 800e426:	07d8      	lsls	r0, r3, #31
 800e428:	d510      	bpl.n	800e44c <_printf_float+0x24c>
 800e42a:	ee18 3a10 	vmov	r3, s16
 800e42e:	4652      	mov	r2, sl
 800e430:	4631      	mov	r1, r6
 800e432:	4628      	mov	r0, r5
 800e434:	47b8      	blx	r7
 800e436:	3001      	adds	r0, #1
 800e438:	f43f af41 	beq.w	800e2be <_printf_float+0xbe>
 800e43c:	f04f 0800 	mov.w	r8, #0
 800e440:	f104 091a 	add.w	r9, r4, #26
 800e444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e446:	3b01      	subs	r3, #1
 800e448:	4543      	cmp	r3, r8
 800e44a:	dc09      	bgt.n	800e460 <_printf_float+0x260>
 800e44c:	6823      	ldr	r3, [r4, #0]
 800e44e:	079b      	lsls	r3, r3, #30
 800e450:	f100 8107 	bmi.w	800e662 <_printf_float+0x462>
 800e454:	68e0      	ldr	r0, [r4, #12]
 800e456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e458:	4298      	cmp	r0, r3
 800e45a:	bfb8      	it	lt
 800e45c:	4618      	movlt	r0, r3
 800e45e:	e730      	b.n	800e2c2 <_printf_float+0xc2>
 800e460:	2301      	movs	r3, #1
 800e462:	464a      	mov	r2, r9
 800e464:	4631      	mov	r1, r6
 800e466:	4628      	mov	r0, r5
 800e468:	47b8      	blx	r7
 800e46a:	3001      	adds	r0, #1
 800e46c:	f43f af27 	beq.w	800e2be <_printf_float+0xbe>
 800e470:	f108 0801 	add.w	r8, r8, #1
 800e474:	e7e6      	b.n	800e444 <_printf_float+0x244>
 800e476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e478:	2b00      	cmp	r3, #0
 800e47a:	dc39      	bgt.n	800e4f0 <_printf_float+0x2f0>
 800e47c:	4a1b      	ldr	r2, [pc, #108]	; (800e4ec <_printf_float+0x2ec>)
 800e47e:	2301      	movs	r3, #1
 800e480:	4631      	mov	r1, r6
 800e482:	4628      	mov	r0, r5
 800e484:	47b8      	blx	r7
 800e486:	3001      	adds	r0, #1
 800e488:	f43f af19 	beq.w	800e2be <_printf_float+0xbe>
 800e48c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e490:	4313      	orrs	r3, r2
 800e492:	d102      	bne.n	800e49a <_printf_float+0x29a>
 800e494:	6823      	ldr	r3, [r4, #0]
 800e496:	07d9      	lsls	r1, r3, #31
 800e498:	d5d8      	bpl.n	800e44c <_printf_float+0x24c>
 800e49a:	ee18 3a10 	vmov	r3, s16
 800e49e:	4652      	mov	r2, sl
 800e4a0:	4631      	mov	r1, r6
 800e4a2:	4628      	mov	r0, r5
 800e4a4:	47b8      	blx	r7
 800e4a6:	3001      	adds	r0, #1
 800e4a8:	f43f af09 	beq.w	800e2be <_printf_float+0xbe>
 800e4ac:	f04f 0900 	mov.w	r9, #0
 800e4b0:	f104 0a1a 	add.w	sl, r4, #26
 800e4b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4b6:	425b      	negs	r3, r3
 800e4b8:	454b      	cmp	r3, r9
 800e4ba:	dc01      	bgt.n	800e4c0 <_printf_float+0x2c0>
 800e4bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4be:	e792      	b.n	800e3e6 <_printf_float+0x1e6>
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	4652      	mov	r2, sl
 800e4c4:	4631      	mov	r1, r6
 800e4c6:	4628      	mov	r0, r5
 800e4c8:	47b8      	blx	r7
 800e4ca:	3001      	adds	r0, #1
 800e4cc:	f43f aef7 	beq.w	800e2be <_printf_float+0xbe>
 800e4d0:	f109 0901 	add.w	r9, r9, #1
 800e4d4:	e7ee      	b.n	800e4b4 <_printf_float+0x2b4>
 800e4d6:	bf00      	nop
 800e4d8:	7fefffff 	.word	0x7fefffff
 800e4dc:	08012071 	.word	0x08012071
 800e4e0:	08012075 	.word	0x08012075
 800e4e4:	08012079 	.word	0x08012079
 800e4e8:	0801207d 	.word	0x0801207d
 800e4ec:	08012081 	.word	0x08012081
 800e4f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	bfa8      	it	ge
 800e4f8:	461a      	movge	r2, r3
 800e4fa:	2a00      	cmp	r2, #0
 800e4fc:	4691      	mov	r9, r2
 800e4fe:	dc37      	bgt.n	800e570 <_printf_float+0x370>
 800e500:	f04f 0b00 	mov.w	fp, #0
 800e504:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e508:	f104 021a 	add.w	r2, r4, #26
 800e50c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e50e:	9305      	str	r3, [sp, #20]
 800e510:	eba3 0309 	sub.w	r3, r3, r9
 800e514:	455b      	cmp	r3, fp
 800e516:	dc33      	bgt.n	800e580 <_printf_float+0x380>
 800e518:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e51c:	429a      	cmp	r2, r3
 800e51e:	db3b      	blt.n	800e598 <_printf_float+0x398>
 800e520:	6823      	ldr	r3, [r4, #0]
 800e522:	07da      	lsls	r2, r3, #31
 800e524:	d438      	bmi.n	800e598 <_printf_float+0x398>
 800e526:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e52a:	eba2 0903 	sub.w	r9, r2, r3
 800e52e:	9b05      	ldr	r3, [sp, #20]
 800e530:	1ad2      	subs	r2, r2, r3
 800e532:	4591      	cmp	r9, r2
 800e534:	bfa8      	it	ge
 800e536:	4691      	movge	r9, r2
 800e538:	f1b9 0f00 	cmp.w	r9, #0
 800e53c:	dc35      	bgt.n	800e5aa <_printf_float+0x3aa>
 800e53e:	f04f 0800 	mov.w	r8, #0
 800e542:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e546:	f104 0a1a 	add.w	sl, r4, #26
 800e54a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e54e:	1a9b      	subs	r3, r3, r2
 800e550:	eba3 0309 	sub.w	r3, r3, r9
 800e554:	4543      	cmp	r3, r8
 800e556:	f77f af79 	ble.w	800e44c <_printf_float+0x24c>
 800e55a:	2301      	movs	r3, #1
 800e55c:	4652      	mov	r2, sl
 800e55e:	4631      	mov	r1, r6
 800e560:	4628      	mov	r0, r5
 800e562:	47b8      	blx	r7
 800e564:	3001      	adds	r0, #1
 800e566:	f43f aeaa 	beq.w	800e2be <_printf_float+0xbe>
 800e56a:	f108 0801 	add.w	r8, r8, #1
 800e56e:	e7ec      	b.n	800e54a <_printf_float+0x34a>
 800e570:	4613      	mov	r3, r2
 800e572:	4631      	mov	r1, r6
 800e574:	4642      	mov	r2, r8
 800e576:	4628      	mov	r0, r5
 800e578:	47b8      	blx	r7
 800e57a:	3001      	adds	r0, #1
 800e57c:	d1c0      	bne.n	800e500 <_printf_float+0x300>
 800e57e:	e69e      	b.n	800e2be <_printf_float+0xbe>
 800e580:	2301      	movs	r3, #1
 800e582:	4631      	mov	r1, r6
 800e584:	4628      	mov	r0, r5
 800e586:	9205      	str	r2, [sp, #20]
 800e588:	47b8      	blx	r7
 800e58a:	3001      	adds	r0, #1
 800e58c:	f43f ae97 	beq.w	800e2be <_printf_float+0xbe>
 800e590:	9a05      	ldr	r2, [sp, #20]
 800e592:	f10b 0b01 	add.w	fp, fp, #1
 800e596:	e7b9      	b.n	800e50c <_printf_float+0x30c>
 800e598:	ee18 3a10 	vmov	r3, s16
 800e59c:	4652      	mov	r2, sl
 800e59e:	4631      	mov	r1, r6
 800e5a0:	4628      	mov	r0, r5
 800e5a2:	47b8      	blx	r7
 800e5a4:	3001      	adds	r0, #1
 800e5a6:	d1be      	bne.n	800e526 <_printf_float+0x326>
 800e5a8:	e689      	b.n	800e2be <_printf_float+0xbe>
 800e5aa:	9a05      	ldr	r2, [sp, #20]
 800e5ac:	464b      	mov	r3, r9
 800e5ae:	4442      	add	r2, r8
 800e5b0:	4631      	mov	r1, r6
 800e5b2:	4628      	mov	r0, r5
 800e5b4:	47b8      	blx	r7
 800e5b6:	3001      	adds	r0, #1
 800e5b8:	d1c1      	bne.n	800e53e <_printf_float+0x33e>
 800e5ba:	e680      	b.n	800e2be <_printf_float+0xbe>
 800e5bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5be:	2a01      	cmp	r2, #1
 800e5c0:	dc01      	bgt.n	800e5c6 <_printf_float+0x3c6>
 800e5c2:	07db      	lsls	r3, r3, #31
 800e5c4:	d53a      	bpl.n	800e63c <_printf_float+0x43c>
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	4642      	mov	r2, r8
 800e5ca:	4631      	mov	r1, r6
 800e5cc:	4628      	mov	r0, r5
 800e5ce:	47b8      	blx	r7
 800e5d0:	3001      	adds	r0, #1
 800e5d2:	f43f ae74 	beq.w	800e2be <_printf_float+0xbe>
 800e5d6:	ee18 3a10 	vmov	r3, s16
 800e5da:	4652      	mov	r2, sl
 800e5dc:	4631      	mov	r1, r6
 800e5de:	4628      	mov	r0, r5
 800e5e0:	47b8      	blx	r7
 800e5e2:	3001      	adds	r0, #1
 800e5e4:	f43f ae6b 	beq.w	800e2be <_printf_float+0xbe>
 800e5e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e5f4:	f7f2 faa0 	bl	8000b38 <__aeabi_dcmpeq>
 800e5f8:	b9d8      	cbnz	r0, 800e632 <_printf_float+0x432>
 800e5fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e5fe:	f108 0201 	add.w	r2, r8, #1
 800e602:	4631      	mov	r1, r6
 800e604:	4628      	mov	r0, r5
 800e606:	47b8      	blx	r7
 800e608:	3001      	adds	r0, #1
 800e60a:	d10e      	bne.n	800e62a <_printf_float+0x42a>
 800e60c:	e657      	b.n	800e2be <_printf_float+0xbe>
 800e60e:	2301      	movs	r3, #1
 800e610:	4652      	mov	r2, sl
 800e612:	4631      	mov	r1, r6
 800e614:	4628      	mov	r0, r5
 800e616:	47b8      	blx	r7
 800e618:	3001      	adds	r0, #1
 800e61a:	f43f ae50 	beq.w	800e2be <_printf_float+0xbe>
 800e61e:	f108 0801 	add.w	r8, r8, #1
 800e622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e624:	3b01      	subs	r3, #1
 800e626:	4543      	cmp	r3, r8
 800e628:	dcf1      	bgt.n	800e60e <_printf_float+0x40e>
 800e62a:	464b      	mov	r3, r9
 800e62c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e630:	e6da      	b.n	800e3e8 <_printf_float+0x1e8>
 800e632:	f04f 0800 	mov.w	r8, #0
 800e636:	f104 0a1a 	add.w	sl, r4, #26
 800e63a:	e7f2      	b.n	800e622 <_printf_float+0x422>
 800e63c:	2301      	movs	r3, #1
 800e63e:	4642      	mov	r2, r8
 800e640:	e7df      	b.n	800e602 <_printf_float+0x402>
 800e642:	2301      	movs	r3, #1
 800e644:	464a      	mov	r2, r9
 800e646:	4631      	mov	r1, r6
 800e648:	4628      	mov	r0, r5
 800e64a:	47b8      	blx	r7
 800e64c:	3001      	adds	r0, #1
 800e64e:	f43f ae36 	beq.w	800e2be <_printf_float+0xbe>
 800e652:	f108 0801 	add.w	r8, r8, #1
 800e656:	68e3      	ldr	r3, [r4, #12]
 800e658:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e65a:	1a5b      	subs	r3, r3, r1
 800e65c:	4543      	cmp	r3, r8
 800e65e:	dcf0      	bgt.n	800e642 <_printf_float+0x442>
 800e660:	e6f8      	b.n	800e454 <_printf_float+0x254>
 800e662:	f04f 0800 	mov.w	r8, #0
 800e666:	f104 0919 	add.w	r9, r4, #25
 800e66a:	e7f4      	b.n	800e656 <_printf_float+0x456>

0800e66c <_printf_common>:
 800e66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e670:	4616      	mov	r6, r2
 800e672:	4699      	mov	r9, r3
 800e674:	688a      	ldr	r2, [r1, #8]
 800e676:	690b      	ldr	r3, [r1, #16]
 800e678:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e67c:	4293      	cmp	r3, r2
 800e67e:	bfb8      	it	lt
 800e680:	4613      	movlt	r3, r2
 800e682:	6033      	str	r3, [r6, #0]
 800e684:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e688:	4607      	mov	r7, r0
 800e68a:	460c      	mov	r4, r1
 800e68c:	b10a      	cbz	r2, 800e692 <_printf_common+0x26>
 800e68e:	3301      	adds	r3, #1
 800e690:	6033      	str	r3, [r6, #0]
 800e692:	6823      	ldr	r3, [r4, #0]
 800e694:	0699      	lsls	r1, r3, #26
 800e696:	bf42      	ittt	mi
 800e698:	6833      	ldrmi	r3, [r6, #0]
 800e69a:	3302      	addmi	r3, #2
 800e69c:	6033      	strmi	r3, [r6, #0]
 800e69e:	6825      	ldr	r5, [r4, #0]
 800e6a0:	f015 0506 	ands.w	r5, r5, #6
 800e6a4:	d106      	bne.n	800e6b4 <_printf_common+0x48>
 800e6a6:	f104 0a19 	add.w	sl, r4, #25
 800e6aa:	68e3      	ldr	r3, [r4, #12]
 800e6ac:	6832      	ldr	r2, [r6, #0]
 800e6ae:	1a9b      	subs	r3, r3, r2
 800e6b0:	42ab      	cmp	r3, r5
 800e6b2:	dc26      	bgt.n	800e702 <_printf_common+0x96>
 800e6b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e6b8:	1e13      	subs	r3, r2, #0
 800e6ba:	6822      	ldr	r2, [r4, #0]
 800e6bc:	bf18      	it	ne
 800e6be:	2301      	movne	r3, #1
 800e6c0:	0692      	lsls	r2, r2, #26
 800e6c2:	d42b      	bmi.n	800e71c <_printf_common+0xb0>
 800e6c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e6c8:	4649      	mov	r1, r9
 800e6ca:	4638      	mov	r0, r7
 800e6cc:	47c0      	blx	r8
 800e6ce:	3001      	adds	r0, #1
 800e6d0:	d01e      	beq.n	800e710 <_printf_common+0xa4>
 800e6d2:	6823      	ldr	r3, [r4, #0]
 800e6d4:	6922      	ldr	r2, [r4, #16]
 800e6d6:	f003 0306 	and.w	r3, r3, #6
 800e6da:	2b04      	cmp	r3, #4
 800e6dc:	bf02      	ittt	eq
 800e6de:	68e5      	ldreq	r5, [r4, #12]
 800e6e0:	6833      	ldreq	r3, [r6, #0]
 800e6e2:	1aed      	subeq	r5, r5, r3
 800e6e4:	68a3      	ldr	r3, [r4, #8]
 800e6e6:	bf0c      	ite	eq
 800e6e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e6ec:	2500      	movne	r5, #0
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	bfc4      	itt	gt
 800e6f2:	1a9b      	subgt	r3, r3, r2
 800e6f4:	18ed      	addgt	r5, r5, r3
 800e6f6:	2600      	movs	r6, #0
 800e6f8:	341a      	adds	r4, #26
 800e6fa:	42b5      	cmp	r5, r6
 800e6fc:	d11a      	bne.n	800e734 <_printf_common+0xc8>
 800e6fe:	2000      	movs	r0, #0
 800e700:	e008      	b.n	800e714 <_printf_common+0xa8>
 800e702:	2301      	movs	r3, #1
 800e704:	4652      	mov	r2, sl
 800e706:	4649      	mov	r1, r9
 800e708:	4638      	mov	r0, r7
 800e70a:	47c0      	blx	r8
 800e70c:	3001      	adds	r0, #1
 800e70e:	d103      	bne.n	800e718 <_printf_common+0xac>
 800e710:	f04f 30ff 	mov.w	r0, #4294967295
 800e714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e718:	3501      	adds	r5, #1
 800e71a:	e7c6      	b.n	800e6aa <_printf_common+0x3e>
 800e71c:	18e1      	adds	r1, r4, r3
 800e71e:	1c5a      	adds	r2, r3, #1
 800e720:	2030      	movs	r0, #48	; 0x30
 800e722:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e726:	4422      	add	r2, r4
 800e728:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e72c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e730:	3302      	adds	r3, #2
 800e732:	e7c7      	b.n	800e6c4 <_printf_common+0x58>
 800e734:	2301      	movs	r3, #1
 800e736:	4622      	mov	r2, r4
 800e738:	4649      	mov	r1, r9
 800e73a:	4638      	mov	r0, r7
 800e73c:	47c0      	blx	r8
 800e73e:	3001      	adds	r0, #1
 800e740:	d0e6      	beq.n	800e710 <_printf_common+0xa4>
 800e742:	3601      	adds	r6, #1
 800e744:	e7d9      	b.n	800e6fa <_printf_common+0x8e>
	...

0800e748 <_printf_i>:
 800e748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e74c:	7e0f      	ldrb	r7, [r1, #24]
 800e74e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e750:	2f78      	cmp	r7, #120	; 0x78
 800e752:	4691      	mov	r9, r2
 800e754:	4680      	mov	r8, r0
 800e756:	460c      	mov	r4, r1
 800e758:	469a      	mov	sl, r3
 800e75a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e75e:	d807      	bhi.n	800e770 <_printf_i+0x28>
 800e760:	2f62      	cmp	r7, #98	; 0x62
 800e762:	d80a      	bhi.n	800e77a <_printf_i+0x32>
 800e764:	2f00      	cmp	r7, #0
 800e766:	f000 80d4 	beq.w	800e912 <_printf_i+0x1ca>
 800e76a:	2f58      	cmp	r7, #88	; 0x58
 800e76c:	f000 80c0 	beq.w	800e8f0 <_printf_i+0x1a8>
 800e770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e774:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e778:	e03a      	b.n	800e7f0 <_printf_i+0xa8>
 800e77a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e77e:	2b15      	cmp	r3, #21
 800e780:	d8f6      	bhi.n	800e770 <_printf_i+0x28>
 800e782:	a101      	add	r1, pc, #4	; (adr r1, 800e788 <_printf_i+0x40>)
 800e784:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e788:	0800e7e1 	.word	0x0800e7e1
 800e78c:	0800e7f5 	.word	0x0800e7f5
 800e790:	0800e771 	.word	0x0800e771
 800e794:	0800e771 	.word	0x0800e771
 800e798:	0800e771 	.word	0x0800e771
 800e79c:	0800e771 	.word	0x0800e771
 800e7a0:	0800e7f5 	.word	0x0800e7f5
 800e7a4:	0800e771 	.word	0x0800e771
 800e7a8:	0800e771 	.word	0x0800e771
 800e7ac:	0800e771 	.word	0x0800e771
 800e7b0:	0800e771 	.word	0x0800e771
 800e7b4:	0800e8f9 	.word	0x0800e8f9
 800e7b8:	0800e821 	.word	0x0800e821
 800e7bc:	0800e8b3 	.word	0x0800e8b3
 800e7c0:	0800e771 	.word	0x0800e771
 800e7c4:	0800e771 	.word	0x0800e771
 800e7c8:	0800e91b 	.word	0x0800e91b
 800e7cc:	0800e771 	.word	0x0800e771
 800e7d0:	0800e821 	.word	0x0800e821
 800e7d4:	0800e771 	.word	0x0800e771
 800e7d8:	0800e771 	.word	0x0800e771
 800e7dc:	0800e8bb 	.word	0x0800e8bb
 800e7e0:	682b      	ldr	r3, [r5, #0]
 800e7e2:	1d1a      	adds	r2, r3, #4
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	602a      	str	r2, [r5, #0]
 800e7e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e7ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	e09f      	b.n	800e934 <_printf_i+0x1ec>
 800e7f4:	6820      	ldr	r0, [r4, #0]
 800e7f6:	682b      	ldr	r3, [r5, #0]
 800e7f8:	0607      	lsls	r7, r0, #24
 800e7fa:	f103 0104 	add.w	r1, r3, #4
 800e7fe:	6029      	str	r1, [r5, #0]
 800e800:	d501      	bpl.n	800e806 <_printf_i+0xbe>
 800e802:	681e      	ldr	r6, [r3, #0]
 800e804:	e003      	b.n	800e80e <_printf_i+0xc6>
 800e806:	0646      	lsls	r6, r0, #25
 800e808:	d5fb      	bpl.n	800e802 <_printf_i+0xba>
 800e80a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e80e:	2e00      	cmp	r6, #0
 800e810:	da03      	bge.n	800e81a <_printf_i+0xd2>
 800e812:	232d      	movs	r3, #45	; 0x2d
 800e814:	4276      	negs	r6, r6
 800e816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e81a:	485a      	ldr	r0, [pc, #360]	; (800e984 <_printf_i+0x23c>)
 800e81c:	230a      	movs	r3, #10
 800e81e:	e012      	b.n	800e846 <_printf_i+0xfe>
 800e820:	682b      	ldr	r3, [r5, #0]
 800e822:	6820      	ldr	r0, [r4, #0]
 800e824:	1d19      	adds	r1, r3, #4
 800e826:	6029      	str	r1, [r5, #0]
 800e828:	0605      	lsls	r5, r0, #24
 800e82a:	d501      	bpl.n	800e830 <_printf_i+0xe8>
 800e82c:	681e      	ldr	r6, [r3, #0]
 800e82e:	e002      	b.n	800e836 <_printf_i+0xee>
 800e830:	0641      	lsls	r1, r0, #25
 800e832:	d5fb      	bpl.n	800e82c <_printf_i+0xe4>
 800e834:	881e      	ldrh	r6, [r3, #0]
 800e836:	4853      	ldr	r0, [pc, #332]	; (800e984 <_printf_i+0x23c>)
 800e838:	2f6f      	cmp	r7, #111	; 0x6f
 800e83a:	bf0c      	ite	eq
 800e83c:	2308      	moveq	r3, #8
 800e83e:	230a      	movne	r3, #10
 800e840:	2100      	movs	r1, #0
 800e842:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e846:	6865      	ldr	r5, [r4, #4]
 800e848:	60a5      	str	r5, [r4, #8]
 800e84a:	2d00      	cmp	r5, #0
 800e84c:	bfa2      	ittt	ge
 800e84e:	6821      	ldrge	r1, [r4, #0]
 800e850:	f021 0104 	bicge.w	r1, r1, #4
 800e854:	6021      	strge	r1, [r4, #0]
 800e856:	b90e      	cbnz	r6, 800e85c <_printf_i+0x114>
 800e858:	2d00      	cmp	r5, #0
 800e85a:	d04b      	beq.n	800e8f4 <_printf_i+0x1ac>
 800e85c:	4615      	mov	r5, r2
 800e85e:	fbb6 f1f3 	udiv	r1, r6, r3
 800e862:	fb03 6711 	mls	r7, r3, r1, r6
 800e866:	5dc7      	ldrb	r7, [r0, r7]
 800e868:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e86c:	4637      	mov	r7, r6
 800e86e:	42bb      	cmp	r3, r7
 800e870:	460e      	mov	r6, r1
 800e872:	d9f4      	bls.n	800e85e <_printf_i+0x116>
 800e874:	2b08      	cmp	r3, #8
 800e876:	d10b      	bne.n	800e890 <_printf_i+0x148>
 800e878:	6823      	ldr	r3, [r4, #0]
 800e87a:	07de      	lsls	r6, r3, #31
 800e87c:	d508      	bpl.n	800e890 <_printf_i+0x148>
 800e87e:	6923      	ldr	r3, [r4, #16]
 800e880:	6861      	ldr	r1, [r4, #4]
 800e882:	4299      	cmp	r1, r3
 800e884:	bfde      	ittt	le
 800e886:	2330      	movle	r3, #48	; 0x30
 800e888:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e88c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e890:	1b52      	subs	r2, r2, r5
 800e892:	6122      	str	r2, [r4, #16]
 800e894:	f8cd a000 	str.w	sl, [sp]
 800e898:	464b      	mov	r3, r9
 800e89a:	aa03      	add	r2, sp, #12
 800e89c:	4621      	mov	r1, r4
 800e89e:	4640      	mov	r0, r8
 800e8a0:	f7ff fee4 	bl	800e66c <_printf_common>
 800e8a4:	3001      	adds	r0, #1
 800e8a6:	d14a      	bne.n	800e93e <_printf_i+0x1f6>
 800e8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ac:	b004      	add	sp, #16
 800e8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8b2:	6823      	ldr	r3, [r4, #0]
 800e8b4:	f043 0320 	orr.w	r3, r3, #32
 800e8b8:	6023      	str	r3, [r4, #0]
 800e8ba:	4833      	ldr	r0, [pc, #204]	; (800e988 <_printf_i+0x240>)
 800e8bc:	2778      	movs	r7, #120	; 0x78
 800e8be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e8c2:	6823      	ldr	r3, [r4, #0]
 800e8c4:	6829      	ldr	r1, [r5, #0]
 800e8c6:	061f      	lsls	r7, r3, #24
 800e8c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800e8cc:	d402      	bmi.n	800e8d4 <_printf_i+0x18c>
 800e8ce:	065f      	lsls	r7, r3, #25
 800e8d0:	bf48      	it	mi
 800e8d2:	b2b6      	uxthmi	r6, r6
 800e8d4:	07df      	lsls	r7, r3, #31
 800e8d6:	bf48      	it	mi
 800e8d8:	f043 0320 	orrmi.w	r3, r3, #32
 800e8dc:	6029      	str	r1, [r5, #0]
 800e8de:	bf48      	it	mi
 800e8e0:	6023      	strmi	r3, [r4, #0]
 800e8e2:	b91e      	cbnz	r6, 800e8ec <_printf_i+0x1a4>
 800e8e4:	6823      	ldr	r3, [r4, #0]
 800e8e6:	f023 0320 	bic.w	r3, r3, #32
 800e8ea:	6023      	str	r3, [r4, #0]
 800e8ec:	2310      	movs	r3, #16
 800e8ee:	e7a7      	b.n	800e840 <_printf_i+0xf8>
 800e8f0:	4824      	ldr	r0, [pc, #144]	; (800e984 <_printf_i+0x23c>)
 800e8f2:	e7e4      	b.n	800e8be <_printf_i+0x176>
 800e8f4:	4615      	mov	r5, r2
 800e8f6:	e7bd      	b.n	800e874 <_printf_i+0x12c>
 800e8f8:	682b      	ldr	r3, [r5, #0]
 800e8fa:	6826      	ldr	r6, [r4, #0]
 800e8fc:	6961      	ldr	r1, [r4, #20]
 800e8fe:	1d18      	adds	r0, r3, #4
 800e900:	6028      	str	r0, [r5, #0]
 800e902:	0635      	lsls	r5, r6, #24
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	d501      	bpl.n	800e90c <_printf_i+0x1c4>
 800e908:	6019      	str	r1, [r3, #0]
 800e90a:	e002      	b.n	800e912 <_printf_i+0x1ca>
 800e90c:	0670      	lsls	r0, r6, #25
 800e90e:	d5fb      	bpl.n	800e908 <_printf_i+0x1c0>
 800e910:	8019      	strh	r1, [r3, #0]
 800e912:	2300      	movs	r3, #0
 800e914:	6123      	str	r3, [r4, #16]
 800e916:	4615      	mov	r5, r2
 800e918:	e7bc      	b.n	800e894 <_printf_i+0x14c>
 800e91a:	682b      	ldr	r3, [r5, #0]
 800e91c:	1d1a      	adds	r2, r3, #4
 800e91e:	602a      	str	r2, [r5, #0]
 800e920:	681d      	ldr	r5, [r3, #0]
 800e922:	6862      	ldr	r2, [r4, #4]
 800e924:	2100      	movs	r1, #0
 800e926:	4628      	mov	r0, r5
 800e928:	f7f1 fc8a 	bl	8000240 <memchr>
 800e92c:	b108      	cbz	r0, 800e932 <_printf_i+0x1ea>
 800e92e:	1b40      	subs	r0, r0, r5
 800e930:	6060      	str	r0, [r4, #4]
 800e932:	6863      	ldr	r3, [r4, #4]
 800e934:	6123      	str	r3, [r4, #16]
 800e936:	2300      	movs	r3, #0
 800e938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e93c:	e7aa      	b.n	800e894 <_printf_i+0x14c>
 800e93e:	6923      	ldr	r3, [r4, #16]
 800e940:	462a      	mov	r2, r5
 800e942:	4649      	mov	r1, r9
 800e944:	4640      	mov	r0, r8
 800e946:	47d0      	blx	sl
 800e948:	3001      	adds	r0, #1
 800e94a:	d0ad      	beq.n	800e8a8 <_printf_i+0x160>
 800e94c:	6823      	ldr	r3, [r4, #0]
 800e94e:	079b      	lsls	r3, r3, #30
 800e950:	d413      	bmi.n	800e97a <_printf_i+0x232>
 800e952:	68e0      	ldr	r0, [r4, #12]
 800e954:	9b03      	ldr	r3, [sp, #12]
 800e956:	4298      	cmp	r0, r3
 800e958:	bfb8      	it	lt
 800e95a:	4618      	movlt	r0, r3
 800e95c:	e7a6      	b.n	800e8ac <_printf_i+0x164>
 800e95e:	2301      	movs	r3, #1
 800e960:	4632      	mov	r2, r6
 800e962:	4649      	mov	r1, r9
 800e964:	4640      	mov	r0, r8
 800e966:	47d0      	blx	sl
 800e968:	3001      	adds	r0, #1
 800e96a:	d09d      	beq.n	800e8a8 <_printf_i+0x160>
 800e96c:	3501      	adds	r5, #1
 800e96e:	68e3      	ldr	r3, [r4, #12]
 800e970:	9903      	ldr	r1, [sp, #12]
 800e972:	1a5b      	subs	r3, r3, r1
 800e974:	42ab      	cmp	r3, r5
 800e976:	dcf2      	bgt.n	800e95e <_printf_i+0x216>
 800e978:	e7eb      	b.n	800e952 <_printf_i+0x20a>
 800e97a:	2500      	movs	r5, #0
 800e97c:	f104 0619 	add.w	r6, r4, #25
 800e980:	e7f5      	b.n	800e96e <_printf_i+0x226>
 800e982:	bf00      	nop
 800e984:	08012083 	.word	0x08012083
 800e988:	08012094 	.word	0x08012094

0800e98c <std>:
 800e98c:	2300      	movs	r3, #0
 800e98e:	b510      	push	{r4, lr}
 800e990:	4604      	mov	r4, r0
 800e992:	e9c0 3300 	strd	r3, r3, [r0]
 800e996:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e99a:	6083      	str	r3, [r0, #8]
 800e99c:	8181      	strh	r1, [r0, #12]
 800e99e:	6643      	str	r3, [r0, #100]	; 0x64
 800e9a0:	81c2      	strh	r2, [r0, #14]
 800e9a2:	6183      	str	r3, [r0, #24]
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	2208      	movs	r2, #8
 800e9a8:	305c      	adds	r0, #92	; 0x5c
 800e9aa:	f000 f914 	bl	800ebd6 <memset>
 800e9ae:	4b0d      	ldr	r3, [pc, #52]	; (800e9e4 <std+0x58>)
 800e9b0:	6263      	str	r3, [r4, #36]	; 0x24
 800e9b2:	4b0d      	ldr	r3, [pc, #52]	; (800e9e8 <std+0x5c>)
 800e9b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e9b6:	4b0d      	ldr	r3, [pc, #52]	; (800e9ec <std+0x60>)
 800e9b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e9ba:	4b0d      	ldr	r3, [pc, #52]	; (800e9f0 <std+0x64>)
 800e9bc:	6323      	str	r3, [r4, #48]	; 0x30
 800e9be:	4b0d      	ldr	r3, [pc, #52]	; (800e9f4 <std+0x68>)
 800e9c0:	6224      	str	r4, [r4, #32]
 800e9c2:	429c      	cmp	r4, r3
 800e9c4:	d006      	beq.n	800e9d4 <std+0x48>
 800e9c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e9ca:	4294      	cmp	r4, r2
 800e9cc:	d002      	beq.n	800e9d4 <std+0x48>
 800e9ce:	33d0      	adds	r3, #208	; 0xd0
 800e9d0:	429c      	cmp	r4, r3
 800e9d2:	d105      	bne.n	800e9e0 <std+0x54>
 800e9d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9dc:	f000 b9e6 	b.w	800edac <__retarget_lock_init_recursive>
 800e9e0:	bd10      	pop	{r4, pc}
 800e9e2:	bf00      	nop
 800e9e4:	0800eb51 	.word	0x0800eb51
 800e9e8:	0800eb73 	.word	0x0800eb73
 800e9ec:	0800ebab 	.word	0x0800ebab
 800e9f0:	0800ebcf 	.word	0x0800ebcf
 800e9f4:	20005174 	.word	0x20005174

0800e9f8 <stdio_exit_handler>:
 800e9f8:	4a02      	ldr	r2, [pc, #8]	; (800ea04 <stdio_exit_handler+0xc>)
 800e9fa:	4903      	ldr	r1, [pc, #12]	; (800ea08 <stdio_exit_handler+0x10>)
 800e9fc:	4803      	ldr	r0, [pc, #12]	; (800ea0c <stdio_exit_handler+0x14>)
 800e9fe:	f000 b869 	b.w	800ead4 <_fwalk_sglue>
 800ea02:	bf00      	nop
 800ea04:	20000190 	.word	0x20000190
 800ea08:	080107b9 	.word	0x080107b9
 800ea0c:	2000019c 	.word	0x2000019c

0800ea10 <cleanup_stdio>:
 800ea10:	6841      	ldr	r1, [r0, #4]
 800ea12:	4b0c      	ldr	r3, [pc, #48]	; (800ea44 <cleanup_stdio+0x34>)
 800ea14:	4299      	cmp	r1, r3
 800ea16:	b510      	push	{r4, lr}
 800ea18:	4604      	mov	r4, r0
 800ea1a:	d001      	beq.n	800ea20 <cleanup_stdio+0x10>
 800ea1c:	f001 fecc 	bl	80107b8 <_fflush_r>
 800ea20:	68a1      	ldr	r1, [r4, #8]
 800ea22:	4b09      	ldr	r3, [pc, #36]	; (800ea48 <cleanup_stdio+0x38>)
 800ea24:	4299      	cmp	r1, r3
 800ea26:	d002      	beq.n	800ea2e <cleanup_stdio+0x1e>
 800ea28:	4620      	mov	r0, r4
 800ea2a:	f001 fec5 	bl	80107b8 <_fflush_r>
 800ea2e:	68e1      	ldr	r1, [r4, #12]
 800ea30:	4b06      	ldr	r3, [pc, #24]	; (800ea4c <cleanup_stdio+0x3c>)
 800ea32:	4299      	cmp	r1, r3
 800ea34:	d004      	beq.n	800ea40 <cleanup_stdio+0x30>
 800ea36:	4620      	mov	r0, r4
 800ea38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea3c:	f001 bebc 	b.w	80107b8 <_fflush_r>
 800ea40:	bd10      	pop	{r4, pc}
 800ea42:	bf00      	nop
 800ea44:	20005174 	.word	0x20005174
 800ea48:	200051dc 	.word	0x200051dc
 800ea4c:	20005244 	.word	0x20005244

0800ea50 <global_stdio_init.part.0>:
 800ea50:	b510      	push	{r4, lr}
 800ea52:	4b0b      	ldr	r3, [pc, #44]	; (800ea80 <global_stdio_init.part.0+0x30>)
 800ea54:	4c0b      	ldr	r4, [pc, #44]	; (800ea84 <global_stdio_init.part.0+0x34>)
 800ea56:	4a0c      	ldr	r2, [pc, #48]	; (800ea88 <global_stdio_init.part.0+0x38>)
 800ea58:	601a      	str	r2, [r3, #0]
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	2104      	movs	r1, #4
 800ea60:	f7ff ff94 	bl	800e98c <std>
 800ea64:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ea68:	2201      	movs	r2, #1
 800ea6a:	2109      	movs	r1, #9
 800ea6c:	f7ff ff8e 	bl	800e98c <std>
 800ea70:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ea74:	2202      	movs	r2, #2
 800ea76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea7a:	2112      	movs	r1, #18
 800ea7c:	f7ff bf86 	b.w	800e98c <std>
 800ea80:	200052ac 	.word	0x200052ac
 800ea84:	20005174 	.word	0x20005174
 800ea88:	0800e9f9 	.word	0x0800e9f9

0800ea8c <__sfp_lock_acquire>:
 800ea8c:	4801      	ldr	r0, [pc, #4]	; (800ea94 <__sfp_lock_acquire+0x8>)
 800ea8e:	f000 b98e 	b.w	800edae <__retarget_lock_acquire_recursive>
 800ea92:	bf00      	nop
 800ea94:	200052b5 	.word	0x200052b5

0800ea98 <__sfp_lock_release>:
 800ea98:	4801      	ldr	r0, [pc, #4]	; (800eaa0 <__sfp_lock_release+0x8>)
 800ea9a:	f000 b989 	b.w	800edb0 <__retarget_lock_release_recursive>
 800ea9e:	bf00      	nop
 800eaa0:	200052b5 	.word	0x200052b5

0800eaa4 <__sinit>:
 800eaa4:	b510      	push	{r4, lr}
 800eaa6:	4604      	mov	r4, r0
 800eaa8:	f7ff fff0 	bl	800ea8c <__sfp_lock_acquire>
 800eaac:	6a23      	ldr	r3, [r4, #32]
 800eaae:	b11b      	cbz	r3, 800eab8 <__sinit+0x14>
 800eab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eab4:	f7ff bff0 	b.w	800ea98 <__sfp_lock_release>
 800eab8:	4b04      	ldr	r3, [pc, #16]	; (800eacc <__sinit+0x28>)
 800eaba:	6223      	str	r3, [r4, #32]
 800eabc:	4b04      	ldr	r3, [pc, #16]	; (800ead0 <__sinit+0x2c>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d1f5      	bne.n	800eab0 <__sinit+0xc>
 800eac4:	f7ff ffc4 	bl	800ea50 <global_stdio_init.part.0>
 800eac8:	e7f2      	b.n	800eab0 <__sinit+0xc>
 800eaca:	bf00      	nop
 800eacc:	0800ea11 	.word	0x0800ea11
 800ead0:	200052ac 	.word	0x200052ac

0800ead4 <_fwalk_sglue>:
 800ead4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ead8:	4607      	mov	r7, r0
 800eada:	4688      	mov	r8, r1
 800eadc:	4614      	mov	r4, r2
 800eade:	2600      	movs	r6, #0
 800eae0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eae4:	f1b9 0901 	subs.w	r9, r9, #1
 800eae8:	d505      	bpl.n	800eaf6 <_fwalk_sglue+0x22>
 800eaea:	6824      	ldr	r4, [r4, #0]
 800eaec:	2c00      	cmp	r4, #0
 800eaee:	d1f7      	bne.n	800eae0 <_fwalk_sglue+0xc>
 800eaf0:	4630      	mov	r0, r6
 800eaf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eaf6:	89ab      	ldrh	r3, [r5, #12]
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	d907      	bls.n	800eb0c <_fwalk_sglue+0x38>
 800eafc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eb00:	3301      	adds	r3, #1
 800eb02:	d003      	beq.n	800eb0c <_fwalk_sglue+0x38>
 800eb04:	4629      	mov	r1, r5
 800eb06:	4638      	mov	r0, r7
 800eb08:	47c0      	blx	r8
 800eb0a:	4306      	orrs	r6, r0
 800eb0c:	3568      	adds	r5, #104	; 0x68
 800eb0e:	e7e9      	b.n	800eae4 <_fwalk_sglue+0x10>

0800eb10 <siprintf>:
 800eb10:	b40e      	push	{r1, r2, r3}
 800eb12:	b500      	push	{lr}
 800eb14:	b09c      	sub	sp, #112	; 0x70
 800eb16:	ab1d      	add	r3, sp, #116	; 0x74
 800eb18:	9002      	str	r0, [sp, #8]
 800eb1a:	9006      	str	r0, [sp, #24]
 800eb1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eb20:	4809      	ldr	r0, [pc, #36]	; (800eb48 <siprintf+0x38>)
 800eb22:	9107      	str	r1, [sp, #28]
 800eb24:	9104      	str	r1, [sp, #16]
 800eb26:	4909      	ldr	r1, [pc, #36]	; (800eb4c <siprintf+0x3c>)
 800eb28:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb2c:	9105      	str	r1, [sp, #20]
 800eb2e:	6800      	ldr	r0, [r0, #0]
 800eb30:	9301      	str	r3, [sp, #4]
 800eb32:	a902      	add	r1, sp, #8
 800eb34:	f001 fcbc 	bl	80104b0 <_svfiprintf_r>
 800eb38:	9b02      	ldr	r3, [sp, #8]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	701a      	strb	r2, [r3, #0]
 800eb3e:	b01c      	add	sp, #112	; 0x70
 800eb40:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb44:	b003      	add	sp, #12
 800eb46:	4770      	bx	lr
 800eb48:	200001e8 	.word	0x200001e8
 800eb4c:	ffff0208 	.word	0xffff0208

0800eb50 <__sread>:
 800eb50:	b510      	push	{r4, lr}
 800eb52:	460c      	mov	r4, r1
 800eb54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb58:	f000 f8da 	bl	800ed10 <_read_r>
 800eb5c:	2800      	cmp	r0, #0
 800eb5e:	bfab      	itete	ge
 800eb60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eb62:	89a3      	ldrhlt	r3, [r4, #12]
 800eb64:	181b      	addge	r3, r3, r0
 800eb66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eb6a:	bfac      	ite	ge
 800eb6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800eb6e:	81a3      	strhlt	r3, [r4, #12]
 800eb70:	bd10      	pop	{r4, pc}

0800eb72 <__swrite>:
 800eb72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb76:	461f      	mov	r7, r3
 800eb78:	898b      	ldrh	r3, [r1, #12]
 800eb7a:	05db      	lsls	r3, r3, #23
 800eb7c:	4605      	mov	r5, r0
 800eb7e:	460c      	mov	r4, r1
 800eb80:	4616      	mov	r6, r2
 800eb82:	d505      	bpl.n	800eb90 <__swrite+0x1e>
 800eb84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb88:	2302      	movs	r3, #2
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	f000 f8ae 	bl	800ecec <_lseek_r>
 800eb90:	89a3      	ldrh	r3, [r4, #12]
 800eb92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb9a:	81a3      	strh	r3, [r4, #12]
 800eb9c:	4632      	mov	r2, r6
 800eb9e:	463b      	mov	r3, r7
 800eba0:	4628      	mov	r0, r5
 800eba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eba6:	f000 b8c5 	b.w	800ed34 <_write_r>

0800ebaa <__sseek>:
 800ebaa:	b510      	push	{r4, lr}
 800ebac:	460c      	mov	r4, r1
 800ebae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebb2:	f000 f89b 	bl	800ecec <_lseek_r>
 800ebb6:	1c43      	adds	r3, r0, #1
 800ebb8:	89a3      	ldrh	r3, [r4, #12]
 800ebba:	bf15      	itete	ne
 800ebbc:	6560      	strne	r0, [r4, #84]	; 0x54
 800ebbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ebc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ebc6:	81a3      	strheq	r3, [r4, #12]
 800ebc8:	bf18      	it	ne
 800ebca:	81a3      	strhne	r3, [r4, #12]
 800ebcc:	bd10      	pop	{r4, pc}

0800ebce <__sclose>:
 800ebce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebd2:	f000 b87b 	b.w	800eccc <_close_r>

0800ebd6 <memset>:
 800ebd6:	4402      	add	r2, r0
 800ebd8:	4603      	mov	r3, r0
 800ebda:	4293      	cmp	r3, r2
 800ebdc:	d100      	bne.n	800ebe0 <memset+0xa>
 800ebde:	4770      	bx	lr
 800ebe0:	f803 1b01 	strb.w	r1, [r3], #1
 800ebe4:	e7f9      	b.n	800ebda <memset+0x4>

0800ebe6 <strncpy>:
 800ebe6:	b510      	push	{r4, lr}
 800ebe8:	3901      	subs	r1, #1
 800ebea:	4603      	mov	r3, r0
 800ebec:	b132      	cbz	r2, 800ebfc <strncpy+0x16>
 800ebee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ebf2:	f803 4b01 	strb.w	r4, [r3], #1
 800ebf6:	3a01      	subs	r2, #1
 800ebf8:	2c00      	cmp	r4, #0
 800ebfa:	d1f7      	bne.n	800ebec <strncpy+0x6>
 800ebfc:	441a      	add	r2, r3
 800ebfe:	2100      	movs	r1, #0
 800ec00:	4293      	cmp	r3, r2
 800ec02:	d100      	bne.n	800ec06 <strncpy+0x20>
 800ec04:	bd10      	pop	{r4, pc}
 800ec06:	f803 1b01 	strb.w	r1, [r3], #1
 800ec0a:	e7f9      	b.n	800ec00 <strncpy+0x1a>

0800ec0c <strtok>:
 800ec0c:	4b16      	ldr	r3, [pc, #88]	; (800ec68 <strtok+0x5c>)
 800ec0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ec10:	681e      	ldr	r6, [r3, #0]
 800ec12:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800ec14:	4605      	mov	r5, r0
 800ec16:	b9fc      	cbnz	r4, 800ec58 <strtok+0x4c>
 800ec18:	2050      	movs	r0, #80	; 0x50
 800ec1a:	9101      	str	r1, [sp, #4]
 800ec1c:	f000 ffbe 	bl	800fb9c <malloc>
 800ec20:	9901      	ldr	r1, [sp, #4]
 800ec22:	6470      	str	r0, [r6, #68]	; 0x44
 800ec24:	4602      	mov	r2, r0
 800ec26:	b920      	cbnz	r0, 800ec32 <strtok+0x26>
 800ec28:	4b10      	ldr	r3, [pc, #64]	; (800ec6c <strtok+0x60>)
 800ec2a:	4811      	ldr	r0, [pc, #68]	; (800ec70 <strtok+0x64>)
 800ec2c:	215b      	movs	r1, #91	; 0x5b
 800ec2e:	f000 f8cf 	bl	800edd0 <__assert_func>
 800ec32:	e9c0 4400 	strd	r4, r4, [r0]
 800ec36:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ec3a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ec3e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ec42:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ec46:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ec4a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ec4e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ec52:	6184      	str	r4, [r0, #24]
 800ec54:	7704      	strb	r4, [r0, #28]
 800ec56:	6244      	str	r4, [r0, #36]	; 0x24
 800ec58:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	4628      	mov	r0, r5
 800ec5e:	b002      	add	sp, #8
 800ec60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec64:	f000 b806 	b.w	800ec74 <__strtok_r>
 800ec68:	200001e8 	.word	0x200001e8
 800ec6c:	080120a5 	.word	0x080120a5
 800ec70:	080120bc 	.word	0x080120bc

0800ec74 <__strtok_r>:
 800ec74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec76:	b908      	cbnz	r0, 800ec7c <__strtok_r+0x8>
 800ec78:	6810      	ldr	r0, [r2, #0]
 800ec7a:	b188      	cbz	r0, 800eca0 <__strtok_r+0x2c>
 800ec7c:	4604      	mov	r4, r0
 800ec7e:	4620      	mov	r0, r4
 800ec80:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ec84:	460f      	mov	r7, r1
 800ec86:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ec8a:	b91e      	cbnz	r6, 800ec94 <__strtok_r+0x20>
 800ec8c:	b965      	cbnz	r5, 800eca8 <__strtok_r+0x34>
 800ec8e:	6015      	str	r5, [r2, #0]
 800ec90:	4628      	mov	r0, r5
 800ec92:	e005      	b.n	800eca0 <__strtok_r+0x2c>
 800ec94:	42b5      	cmp	r5, r6
 800ec96:	d1f6      	bne.n	800ec86 <__strtok_r+0x12>
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d1f0      	bne.n	800ec7e <__strtok_r+0xa>
 800ec9c:	6014      	str	r4, [r2, #0]
 800ec9e:	7003      	strb	r3, [r0, #0]
 800eca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eca2:	461c      	mov	r4, r3
 800eca4:	e00c      	b.n	800ecc0 <__strtok_r+0x4c>
 800eca6:	b915      	cbnz	r5, 800ecae <__strtok_r+0x3a>
 800eca8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ecac:	460e      	mov	r6, r1
 800ecae:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ecb2:	42ab      	cmp	r3, r5
 800ecb4:	d1f7      	bne.n	800eca6 <__strtok_r+0x32>
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d0f3      	beq.n	800eca2 <__strtok_r+0x2e>
 800ecba:	2300      	movs	r3, #0
 800ecbc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ecc0:	6014      	str	r4, [r2, #0]
 800ecc2:	e7ed      	b.n	800eca0 <__strtok_r+0x2c>

0800ecc4 <_localeconv_r>:
 800ecc4:	4800      	ldr	r0, [pc, #0]	; (800ecc8 <_localeconv_r+0x4>)
 800ecc6:	4770      	bx	lr
 800ecc8:	200002dc 	.word	0x200002dc

0800eccc <_close_r>:
 800eccc:	b538      	push	{r3, r4, r5, lr}
 800ecce:	4d06      	ldr	r5, [pc, #24]	; (800ece8 <_close_r+0x1c>)
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	4604      	mov	r4, r0
 800ecd4:	4608      	mov	r0, r1
 800ecd6:	602b      	str	r3, [r5, #0]
 800ecd8:	f7f3 fe03 	bl	80028e2 <_close>
 800ecdc:	1c43      	adds	r3, r0, #1
 800ecde:	d102      	bne.n	800ece6 <_close_r+0x1a>
 800ece0:	682b      	ldr	r3, [r5, #0]
 800ece2:	b103      	cbz	r3, 800ece6 <_close_r+0x1a>
 800ece4:	6023      	str	r3, [r4, #0]
 800ece6:	bd38      	pop	{r3, r4, r5, pc}
 800ece8:	200052b0 	.word	0x200052b0

0800ecec <_lseek_r>:
 800ecec:	b538      	push	{r3, r4, r5, lr}
 800ecee:	4d07      	ldr	r5, [pc, #28]	; (800ed0c <_lseek_r+0x20>)
 800ecf0:	4604      	mov	r4, r0
 800ecf2:	4608      	mov	r0, r1
 800ecf4:	4611      	mov	r1, r2
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	602a      	str	r2, [r5, #0]
 800ecfa:	461a      	mov	r2, r3
 800ecfc:	f7f3 fe18 	bl	8002930 <_lseek>
 800ed00:	1c43      	adds	r3, r0, #1
 800ed02:	d102      	bne.n	800ed0a <_lseek_r+0x1e>
 800ed04:	682b      	ldr	r3, [r5, #0]
 800ed06:	b103      	cbz	r3, 800ed0a <_lseek_r+0x1e>
 800ed08:	6023      	str	r3, [r4, #0]
 800ed0a:	bd38      	pop	{r3, r4, r5, pc}
 800ed0c:	200052b0 	.word	0x200052b0

0800ed10 <_read_r>:
 800ed10:	b538      	push	{r3, r4, r5, lr}
 800ed12:	4d07      	ldr	r5, [pc, #28]	; (800ed30 <_read_r+0x20>)
 800ed14:	4604      	mov	r4, r0
 800ed16:	4608      	mov	r0, r1
 800ed18:	4611      	mov	r1, r2
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	602a      	str	r2, [r5, #0]
 800ed1e:	461a      	mov	r2, r3
 800ed20:	f7f3 fda6 	bl	8002870 <_read>
 800ed24:	1c43      	adds	r3, r0, #1
 800ed26:	d102      	bne.n	800ed2e <_read_r+0x1e>
 800ed28:	682b      	ldr	r3, [r5, #0]
 800ed2a:	b103      	cbz	r3, 800ed2e <_read_r+0x1e>
 800ed2c:	6023      	str	r3, [r4, #0]
 800ed2e:	bd38      	pop	{r3, r4, r5, pc}
 800ed30:	200052b0 	.word	0x200052b0

0800ed34 <_write_r>:
 800ed34:	b538      	push	{r3, r4, r5, lr}
 800ed36:	4d07      	ldr	r5, [pc, #28]	; (800ed54 <_write_r+0x20>)
 800ed38:	4604      	mov	r4, r0
 800ed3a:	4608      	mov	r0, r1
 800ed3c:	4611      	mov	r1, r2
 800ed3e:	2200      	movs	r2, #0
 800ed40:	602a      	str	r2, [r5, #0]
 800ed42:	461a      	mov	r2, r3
 800ed44:	f7f3 fdb1 	bl	80028aa <_write>
 800ed48:	1c43      	adds	r3, r0, #1
 800ed4a:	d102      	bne.n	800ed52 <_write_r+0x1e>
 800ed4c:	682b      	ldr	r3, [r5, #0]
 800ed4e:	b103      	cbz	r3, 800ed52 <_write_r+0x1e>
 800ed50:	6023      	str	r3, [r4, #0]
 800ed52:	bd38      	pop	{r3, r4, r5, pc}
 800ed54:	200052b0 	.word	0x200052b0

0800ed58 <__errno>:
 800ed58:	4b01      	ldr	r3, [pc, #4]	; (800ed60 <__errno+0x8>)
 800ed5a:	6818      	ldr	r0, [r3, #0]
 800ed5c:	4770      	bx	lr
 800ed5e:	bf00      	nop
 800ed60:	200001e8 	.word	0x200001e8

0800ed64 <__libc_init_array>:
 800ed64:	b570      	push	{r4, r5, r6, lr}
 800ed66:	4d0d      	ldr	r5, [pc, #52]	; (800ed9c <__libc_init_array+0x38>)
 800ed68:	4c0d      	ldr	r4, [pc, #52]	; (800eda0 <__libc_init_array+0x3c>)
 800ed6a:	1b64      	subs	r4, r4, r5
 800ed6c:	10a4      	asrs	r4, r4, #2
 800ed6e:	2600      	movs	r6, #0
 800ed70:	42a6      	cmp	r6, r4
 800ed72:	d109      	bne.n	800ed88 <__libc_init_array+0x24>
 800ed74:	4d0b      	ldr	r5, [pc, #44]	; (800eda4 <__libc_init_array+0x40>)
 800ed76:	4c0c      	ldr	r4, [pc, #48]	; (800eda8 <__libc_init_array+0x44>)
 800ed78:	f002 ffce 	bl	8011d18 <_init>
 800ed7c:	1b64      	subs	r4, r4, r5
 800ed7e:	10a4      	asrs	r4, r4, #2
 800ed80:	2600      	movs	r6, #0
 800ed82:	42a6      	cmp	r6, r4
 800ed84:	d105      	bne.n	800ed92 <__libc_init_array+0x2e>
 800ed86:	bd70      	pop	{r4, r5, r6, pc}
 800ed88:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed8c:	4798      	blx	r3
 800ed8e:	3601      	adds	r6, #1
 800ed90:	e7ee      	b.n	800ed70 <__libc_init_array+0xc>
 800ed92:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed96:	4798      	blx	r3
 800ed98:	3601      	adds	r6, #1
 800ed9a:	e7f2      	b.n	800ed82 <__libc_init_array+0x1e>
 800ed9c:	08012370 	.word	0x08012370
 800eda0:	08012370 	.word	0x08012370
 800eda4:	08012370 	.word	0x08012370
 800eda8:	08012374 	.word	0x08012374

0800edac <__retarget_lock_init_recursive>:
 800edac:	4770      	bx	lr

0800edae <__retarget_lock_acquire_recursive>:
 800edae:	4770      	bx	lr

0800edb0 <__retarget_lock_release_recursive>:
 800edb0:	4770      	bx	lr

0800edb2 <memcpy>:
 800edb2:	440a      	add	r2, r1
 800edb4:	4291      	cmp	r1, r2
 800edb6:	f100 33ff 	add.w	r3, r0, #4294967295
 800edba:	d100      	bne.n	800edbe <memcpy+0xc>
 800edbc:	4770      	bx	lr
 800edbe:	b510      	push	{r4, lr}
 800edc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800edc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800edc8:	4291      	cmp	r1, r2
 800edca:	d1f9      	bne.n	800edc0 <memcpy+0xe>
 800edcc:	bd10      	pop	{r4, pc}
	...

0800edd0 <__assert_func>:
 800edd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800edd2:	4614      	mov	r4, r2
 800edd4:	461a      	mov	r2, r3
 800edd6:	4b09      	ldr	r3, [pc, #36]	; (800edfc <__assert_func+0x2c>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	4605      	mov	r5, r0
 800eddc:	68d8      	ldr	r0, [r3, #12]
 800edde:	b14c      	cbz	r4, 800edf4 <__assert_func+0x24>
 800ede0:	4b07      	ldr	r3, [pc, #28]	; (800ee00 <__assert_func+0x30>)
 800ede2:	9100      	str	r1, [sp, #0]
 800ede4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ede8:	4906      	ldr	r1, [pc, #24]	; (800ee04 <__assert_func+0x34>)
 800edea:	462b      	mov	r3, r5
 800edec:	f001 fd0c 	bl	8010808 <fiprintf>
 800edf0:	f001 fd46 	bl	8010880 <abort>
 800edf4:	4b04      	ldr	r3, [pc, #16]	; (800ee08 <__assert_func+0x38>)
 800edf6:	461c      	mov	r4, r3
 800edf8:	e7f3      	b.n	800ede2 <__assert_func+0x12>
 800edfa:	bf00      	nop
 800edfc:	200001e8 	.word	0x200001e8
 800ee00:	08012116 	.word	0x08012116
 800ee04:	08012123 	.word	0x08012123
 800ee08:	08012151 	.word	0x08012151

0800ee0c <quorem>:
 800ee0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee10:	6903      	ldr	r3, [r0, #16]
 800ee12:	690c      	ldr	r4, [r1, #16]
 800ee14:	42a3      	cmp	r3, r4
 800ee16:	4607      	mov	r7, r0
 800ee18:	db7e      	blt.n	800ef18 <quorem+0x10c>
 800ee1a:	3c01      	subs	r4, #1
 800ee1c:	f101 0814 	add.w	r8, r1, #20
 800ee20:	f100 0514 	add.w	r5, r0, #20
 800ee24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee28:	9301      	str	r3, [sp, #4]
 800ee2a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ee2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee32:	3301      	adds	r3, #1
 800ee34:	429a      	cmp	r2, r3
 800ee36:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ee3a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ee3e:	fbb2 f6f3 	udiv	r6, r2, r3
 800ee42:	d331      	bcc.n	800eea8 <quorem+0x9c>
 800ee44:	f04f 0e00 	mov.w	lr, #0
 800ee48:	4640      	mov	r0, r8
 800ee4a:	46ac      	mov	ip, r5
 800ee4c:	46f2      	mov	sl, lr
 800ee4e:	f850 2b04 	ldr.w	r2, [r0], #4
 800ee52:	b293      	uxth	r3, r2
 800ee54:	fb06 e303 	mla	r3, r6, r3, lr
 800ee58:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ee5c:	0c1a      	lsrs	r2, r3, #16
 800ee5e:	b29b      	uxth	r3, r3
 800ee60:	ebaa 0303 	sub.w	r3, sl, r3
 800ee64:	f8dc a000 	ldr.w	sl, [ip]
 800ee68:	fa13 f38a 	uxtah	r3, r3, sl
 800ee6c:	fb06 220e 	mla	r2, r6, lr, r2
 800ee70:	9300      	str	r3, [sp, #0]
 800ee72:	9b00      	ldr	r3, [sp, #0]
 800ee74:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ee78:	b292      	uxth	r2, r2
 800ee7a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ee7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ee82:	f8bd 3000 	ldrh.w	r3, [sp]
 800ee86:	4581      	cmp	r9, r0
 800ee88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ee8c:	f84c 3b04 	str.w	r3, [ip], #4
 800ee90:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ee94:	d2db      	bcs.n	800ee4e <quorem+0x42>
 800ee96:	f855 300b 	ldr.w	r3, [r5, fp]
 800ee9a:	b92b      	cbnz	r3, 800eea8 <quorem+0x9c>
 800ee9c:	9b01      	ldr	r3, [sp, #4]
 800ee9e:	3b04      	subs	r3, #4
 800eea0:	429d      	cmp	r5, r3
 800eea2:	461a      	mov	r2, r3
 800eea4:	d32c      	bcc.n	800ef00 <quorem+0xf4>
 800eea6:	613c      	str	r4, [r7, #16]
 800eea8:	4638      	mov	r0, r7
 800eeaa:	f001 f9a7 	bl	80101fc <__mcmp>
 800eeae:	2800      	cmp	r0, #0
 800eeb0:	db22      	blt.n	800eef8 <quorem+0xec>
 800eeb2:	3601      	adds	r6, #1
 800eeb4:	4629      	mov	r1, r5
 800eeb6:	2000      	movs	r0, #0
 800eeb8:	f858 2b04 	ldr.w	r2, [r8], #4
 800eebc:	f8d1 c000 	ldr.w	ip, [r1]
 800eec0:	b293      	uxth	r3, r2
 800eec2:	1ac3      	subs	r3, r0, r3
 800eec4:	0c12      	lsrs	r2, r2, #16
 800eec6:	fa13 f38c 	uxtah	r3, r3, ip
 800eeca:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800eece:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eed8:	45c1      	cmp	r9, r8
 800eeda:	f841 3b04 	str.w	r3, [r1], #4
 800eede:	ea4f 4022 	mov.w	r0, r2, asr #16
 800eee2:	d2e9      	bcs.n	800eeb8 <quorem+0xac>
 800eee4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eee8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eeec:	b922      	cbnz	r2, 800eef8 <quorem+0xec>
 800eeee:	3b04      	subs	r3, #4
 800eef0:	429d      	cmp	r5, r3
 800eef2:	461a      	mov	r2, r3
 800eef4:	d30a      	bcc.n	800ef0c <quorem+0x100>
 800eef6:	613c      	str	r4, [r7, #16]
 800eef8:	4630      	mov	r0, r6
 800eefa:	b003      	add	sp, #12
 800eefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef00:	6812      	ldr	r2, [r2, #0]
 800ef02:	3b04      	subs	r3, #4
 800ef04:	2a00      	cmp	r2, #0
 800ef06:	d1ce      	bne.n	800eea6 <quorem+0x9a>
 800ef08:	3c01      	subs	r4, #1
 800ef0a:	e7c9      	b.n	800eea0 <quorem+0x94>
 800ef0c:	6812      	ldr	r2, [r2, #0]
 800ef0e:	3b04      	subs	r3, #4
 800ef10:	2a00      	cmp	r2, #0
 800ef12:	d1f0      	bne.n	800eef6 <quorem+0xea>
 800ef14:	3c01      	subs	r4, #1
 800ef16:	e7eb      	b.n	800eef0 <quorem+0xe4>
 800ef18:	2000      	movs	r0, #0
 800ef1a:	e7ee      	b.n	800eefa <quorem+0xee>
 800ef1c:	0000      	movs	r0, r0
	...

0800ef20 <_dtoa_r>:
 800ef20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef24:	ed2d 8b04 	vpush	{d8-d9}
 800ef28:	69c5      	ldr	r5, [r0, #28]
 800ef2a:	b093      	sub	sp, #76	; 0x4c
 800ef2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ef30:	ec57 6b10 	vmov	r6, r7, d0
 800ef34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ef38:	9107      	str	r1, [sp, #28]
 800ef3a:	4604      	mov	r4, r0
 800ef3c:	920a      	str	r2, [sp, #40]	; 0x28
 800ef3e:	930d      	str	r3, [sp, #52]	; 0x34
 800ef40:	b975      	cbnz	r5, 800ef60 <_dtoa_r+0x40>
 800ef42:	2010      	movs	r0, #16
 800ef44:	f000 fe2a 	bl	800fb9c <malloc>
 800ef48:	4602      	mov	r2, r0
 800ef4a:	61e0      	str	r0, [r4, #28]
 800ef4c:	b920      	cbnz	r0, 800ef58 <_dtoa_r+0x38>
 800ef4e:	4bae      	ldr	r3, [pc, #696]	; (800f208 <_dtoa_r+0x2e8>)
 800ef50:	21ef      	movs	r1, #239	; 0xef
 800ef52:	48ae      	ldr	r0, [pc, #696]	; (800f20c <_dtoa_r+0x2ec>)
 800ef54:	f7ff ff3c 	bl	800edd0 <__assert_func>
 800ef58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ef5c:	6005      	str	r5, [r0, #0]
 800ef5e:	60c5      	str	r5, [r0, #12]
 800ef60:	69e3      	ldr	r3, [r4, #28]
 800ef62:	6819      	ldr	r1, [r3, #0]
 800ef64:	b151      	cbz	r1, 800ef7c <_dtoa_r+0x5c>
 800ef66:	685a      	ldr	r2, [r3, #4]
 800ef68:	604a      	str	r2, [r1, #4]
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	4093      	lsls	r3, r2
 800ef6e:	608b      	str	r3, [r1, #8]
 800ef70:	4620      	mov	r0, r4
 800ef72:	f000 ff07 	bl	800fd84 <_Bfree>
 800ef76:	69e3      	ldr	r3, [r4, #28]
 800ef78:	2200      	movs	r2, #0
 800ef7a:	601a      	str	r2, [r3, #0]
 800ef7c:	1e3b      	subs	r3, r7, #0
 800ef7e:	bfbb      	ittet	lt
 800ef80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ef84:	9303      	strlt	r3, [sp, #12]
 800ef86:	2300      	movge	r3, #0
 800ef88:	2201      	movlt	r2, #1
 800ef8a:	bfac      	ite	ge
 800ef8c:	f8c8 3000 	strge.w	r3, [r8]
 800ef90:	f8c8 2000 	strlt.w	r2, [r8]
 800ef94:	4b9e      	ldr	r3, [pc, #632]	; (800f210 <_dtoa_r+0x2f0>)
 800ef96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ef9a:	ea33 0308 	bics.w	r3, r3, r8
 800ef9e:	d11b      	bne.n	800efd8 <_dtoa_r+0xb8>
 800efa0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800efa2:	f242 730f 	movw	r3, #9999	; 0x270f
 800efa6:	6013      	str	r3, [r2, #0]
 800efa8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800efac:	4333      	orrs	r3, r6
 800efae:	f000 8593 	beq.w	800fad8 <_dtoa_r+0xbb8>
 800efb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800efb4:	b963      	cbnz	r3, 800efd0 <_dtoa_r+0xb0>
 800efb6:	4b97      	ldr	r3, [pc, #604]	; (800f214 <_dtoa_r+0x2f4>)
 800efb8:	e027      	b.n	800f00a <_dtoa_r+0xea>
 800efba:	4b97      	ldr	r3, [pc, #604]	; (800f218 <_dtoa_r+0x2f8>)
 800efbc:	9300      	str	r3, [sp, #0]
 800efbe:	3308      	adds	r3, #8
 800efc0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800efc2:	6013      	str	r3, [r2, #0]
 800efc4:	9800      	ldr	r0, [sp, #0]
 800efc6:	b013      	add	sp, #76	; 0x4c
 800efc8:	ecbd 8b04 	vpop	{d8-d9}
 800efcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efd0:	4b90      	ldr	r3, [pc, #576]	; (800f214 <_dtoa_r+0x2f4>)
 800efd2:	9300      	str	r3, [sp, #0]
 800efd4:	3303      	adds	r3, #3
 800efd6:	e7f3      	b.n	800efc0 <_dtoa_r+0xa0>
 800efd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800efdc:	2200      	movs	r2, #0
 800efde:	ec51 0b17 	vmov	r0, r1, d7
 800efe2:	eeb0 8a47 	vmov.f32	s16, s14
 800efe6:	eef0 8a67 	vmov.f32	s17, s15
 800efea:	2300      	movs	r3, #0
 800efec:	f7f1 fda4 	bl	8000b38 <__aeabi_dcmpeq>
 800eff0:	4681      	mov	r9, r0
 800eff2:	b160      	cbz	r0, 800f00e <_dtoa_r+0xee>
 800eff4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eff6:	2301      	movs	r3, #1
 800eff8:	6013      	str	r3, [r2, #0]
 800effa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800effc:	2b00      	cmp	r3, #0
 800effe:	f000 8568 	beq.w	800fad2 <_dtoa_r+0xbb2>
 800f002:	4b86      	ldr	r3, [pc, #536]	; (800f21c <_dtoa_r+0x2fc>)
 800f004:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f006:	6013      	str	r3, [r2, #0]
 800f008:	3b01      	subs	r3, #1
 800f00a:	9300      	str	r3, [sp, #0]
 800f00c:	e7da      	b.n	800efc4 <_dtoa_r+0xa4>
 800f00e:	aa10      	add	r2, sp, #64	; 0x40
 800f010:	a911      	add	r1, sp, #68	; 0x44
 800f012:	4620      	mov	r0, r4
 800f014:	eeb0 0a48 	vmov.f32	s0, s16
 800f018:	eef0 0a68 	vmov.f32	s1, s17
 800f01c:	f001 f994 	bl	8010348 <__d2b>
 800f020:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f024:	4682      	mov	sl, r0
 800f026:	2d00      	cmp	r5, #0
 800f028:	d07f      	beq.n	800f12a <_dtoa_r+0x20a>
 800f02a:	ee18 3a90 	vmov	r3, s17
 800f02e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f032:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f036:	ec51 0b18 	vmov	r0, r1, d8
 800f03a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f03e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f042:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f046:	4619      	mov	r1, r3
 800f048:	2200      	movs	r2, #0
 800f04a:	4b75      	ldr	r3, [pc, #468]	; (800f220 <_dtoa_r+0x300>)
 800f04c:	f7f1 f954 	bl	80002f8 <__aeabi_dsub>
 800f050:	a367      	add	r3, pc, #412	; (adr r3, 800f1f0 <_dtoa_r+0x2d0>)
 800f052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f056:	f7f1 fb07 	bl	8000668 <__aeabi_dmul>
 800f05a:	a367      	add	r3, pc, #412	; (adr r3, 800f1f8 <_dtoa_r+0x2d8>)
 800f05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f060:	f7f1 f94c 	bl	80002fc <__adddf3>
 800f064:	4606      	mov	r6, r0
 800f066:	4628      	mov	r0, r5
 800f068:	460f      	mov	r7, r1
 800f06a:	f7f1 fa93 	bl	8000594 <__aeabi_i2d>
 800f06e:	a364      	add	r3, pc, #400	; (adr r3, 800f200 <_dtoa_r+0x2e0>)
 800f070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f074:	f7f1 faf8 	bl	8000668 <__aeabi_dmul>
 800f078:	4602      	mov	r2, r0
 800f07a:	460b      	mov	r3, r1
 800f07c:	4630      	mov	r0, r6
 800f07e:	4639      	mov	r1, r7
 800f080:	f7f1 f93c 	bl	80002fc <__adddf3>
 800f084:	4606      	mov	r6, r0
 800f086:	460f      	mov	r7, r1
 800f088:	f7f1 fd9e 	bl	8000bc8 <__aeabi_d2iz>
 800f08c:	2200      	movs	r2, #0
 800f08e:	4683      	mov	fp, r0
 800f090:	2300      	movs	r3, #0
 800f092:	4630      	mov	r0, r6
 800f094:	4639      	mov	r1, r7
 800f096:	f7f1 fd59 	bl	8000b4c <__aeabi_dcmplt>
 800f09a:	b148      	cbz	r0, 800f0b0 <_dtoa_r+0x190>
 800f09c:	4658      	mov	r0, fp
 800f09e:	f7f1 fa79 	bl	8000594 <__aeabi_i2d>
 800f0a2:	4632      	mov	r2, r6
 800f0a4:	463b      	mov	r3, r7
 800f0a6:	f7f1 fd47 	bl	8000b38 <__aeabi_dcmpeq>
 800f0aa:	b908      	cbnz	r0, 800f0b0 <_dtoa_r+0x190>
 800f0ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f0b0:	f1bb 0f16 	cmp.w	fp, #22
 800f0b4:	d857      	bhi.n	800f166 <_dtoa_r+0x246>
 800f0b6:	4b5b      	ldr	r3, [pc, #364]	; (800f224 <_dtoa_r+0x304>)
 800f0b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c0:	ec51 0b18 	vmov	r0, r1, d8
 800f0c4:	f7f1 fd42 	bl	8000b4c <__aeabi_dcmplt>
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	d04e      	beq.n	800f16a <_dtoa_r+0x24a>
 800f0cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	930c      	str	r3, [sp, #48]	; 0x30
 800f0d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f0d6:	1b5b      	subs	r3, r3, r5
 800f0d8:	1e5a      	subs	r2, r3, #1
 800f0da:	bf45      	ittet	mi
 800f0dc:	f1c3 0301 	rsbmi	r3, r3, #1
 800f0e0:	9305      	strmi	r3, [sp, #20]
 800f0e2:	2300      	movpl	r3, #0
 800f0e4:	2300      	movmi	r3, #0
 800f0e6:	9206      	str	r2, [sp, #24]
 800f0e8:	bf54      	ite	pl
 800f0ea:	9305      	strpl	r3, [sp, #20]
 800f0ec:	9306      	strmi	r3, [sp, #24]
 800f0ee:	f1bb 0f00 	cmp.w	fp, #0
 800f0f2:	db3c      	blt.n	800f16e <_dtoa_r+0x24e>
 800f0f4:	9b06      	ldr	r3, [sp, #24]
 800f0f6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f0fa:	445b      	add	r3, fp
 800f0fc:	9306      	str	r3, [sp, #24]
 800f0fe:	2300      	movs	r3, #0
 800f100:	9308      	str	r3, [sp, #32]
 800f102:	9b07      	ldr	r3, [sp, #28]
 800f104:	2b09      	cmp	r3, #9
 800f106:	d868      	bhi.n	800f1da <_dtoa_r+0x2ba>
 800f108:	2b05      	cmp	r3, #5
 800f10a:	bfc4      	itt	gt
 800f10c:	3b04      	subgt	r3, #4
 800f10e:	9307      	strgt	r3, [sp, #28]
 800f110:	9b07      	ldr	r3, [sp, #28]
 800f112:	f1a3 0302 	sub.w	r3, r3, #2
 800f116:	bfcc      	ite	gt
 800f118:	2500      	movgt	r5, #0
 800f11a:	2501      	movle	r5, #1
 800f11c:	2b03      	cmp	r3, #3
 800f11e:	f200 8085 	bhi.w	800f22c <_dtoa_r+0x30c>
 800f122:	e8df f003 	tbb	[pc, r3]
 800f126:	3b2e      	.short	0x3b2e
 800f128:	5839      	.short	0x5839
 800f12a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f12e:	441d      	add	r5, r3
 800f130:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f134:	2b20      	cmp	r3, #32
 800f136:	bfc1      	itttt	gt
 800f138:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f13c:	fa08 f803 	lslgt.w	r8, r8, r3
 800f140:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f144:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f148:	bfd6      	itet	le
 800f14a:	f1c3 0320 	rsble	r3, r3, #32
 800f14e:	ea48 0003 	orrgt.w	r0, r8, r3
 800f152:	fa06 f003 	lslle.w	r0, r6, r3
 800f156:	f7f1 fa0d 	bl	8000574 <__aeabi_ui2d>
 800f15a:	2201      	movs	r2, #1
 800f15c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f160:	3d01      	subs	r5, #1
 800f162:	920e      	str	r2, [sp, #56]	; 0x38
 800f164:	e76f      	b.n	800f046 <_dtoa_r+0x126>
 800f166:	2301      	movs	r3, #1
 800f168:	e7b3      	b.n	800f0d2 <_dtoa_r+0x1b2>
 800f16a:	900c      	str	r0, [sp, #48]	; 0x30
 800f16c:	e7b2      	b.n	800f0d4 <_dtoa_r+0x1b4>
 800f16e:	9b05      	ldr	r3, [sp, #20]
 800f170:	eba3 030b 	sub.w	r3, r3, fp
 800f174:	9305      	str	r3, [sp, #20]
 800f176:	f1cb 0300 	rsb	r3, fp, #0
 800f17a:	9308      	str	r3, [sp, #32]
 800f17c:	2300      	movs	r3, #0
 800f17e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f180:	e7bf      	b.n	800f102 <_dtoa_r+0x1e2>
 800f182:	2300      	movs	r3, #0
 800f184:	9309      	str	r3, [sp, #36]	; 0x24
 800f186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f188:	2b00      	cmp	r3, #0
 800f18a:	dc52      	bgt.n	800f232 <_dtoa_r+0x312>
 800f18c:	2301      	movs	r3, #1
 800f18e:	9301      	str	r3, [sp, #4]
 800f190:	9304      	str	r3, [sp, #16]
 800f192:	461a      	mov	r2, r3
 800f194:	920a      	str	r2, [sp, #40]	; 0x28
 800f196:	e00b      	b.n	800f1b0 <_dtoa_r+0x290>
 800f198:	2301      	movs	r3, #1
 800f19a:	e7f3      	b.n	800f184 <_dtoa_r+0x264>
 800f19c:	2300      	movs	r3, #0
 800f19e:	9309      	str	r3, [sp, #36]	; 0x24
 800f1a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1a2:	445b      	add	r3, fp
 800f1a4:	9301      	str	r3, [sp, #4]
 800f1a6:	3301      	adds	r3, #1
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	9304      	str	r3, [sp, #16]
 800f1ac:	bfb8      	it	lt
 800f1ae:	2301      	movlt	r3, #1
 800f1b0:	69e0      	ldr	r0, [r4, #28]
 800f1b2:	2100      	movs	r1, #0
 800f1b4:	2204      	movs	r2, #4
 800f1b6:	f102 0614 	add.w	r6, r2, #20
 800f1ba:	429e      	cmp	r6, r3
 800f1bc:	d93d      	bls.n	800f23a <_dtoa_r+0x31a>
 800f1be:	6041      	str	r1, [r0, #4]
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	f000 fd9f 	bl	800fd04 <_Balloc>
 800f1c6:	9000      	str	r0, [sp, #0]
 800f1c8:	2800      	cmp	r0, #0
 800f1ca:	d139      	bne.n	800f240 <_dtoa_r+0x320>
 800f1cc:	4b16      	ldr	r3, [pc, #88]	; (800f228 <_dtoa_r+0x308>)
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	f240 11af 	movw	r1, #431	; 0x1af
 800f1d4:	e6bd      	b.n	800ef52 <_dtoa_r+0x32>
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	e7e1      	b.n	800f19e <_dtoa_r+0x27e>
 800f1da:	2501      	movs	r5, #1
 800f1dc:	2300      	movs	r3, #0
 800f1de:	9307      	str	r3, [sp, #28]
 800f1e0:	9509      	str	r5, [sp, #36]	; 0x24
 800f1e2:	f04f 33ff 	mov.w	r3, #4294967295
 800f1e6:	9301      	str	r3, [sp, #4]
 800f1e8:	9304      	str	r3, [sp, #16]
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	2312      	movs	r3, #18
 800f1ee:	e7d1      	b.n	800f194 <_dtoa_r+0x274>
 800f1f0:	636f4361 	.word	0x636f4361
 800f1f4:	3fd287a7 	.word	0x3fd287a7
 800f1f8:	8b60c8b3 	.word	0x8b60c8b3
 800f1fc:	3fc68a28 	.word	0x3fc68a28
 800f200:	509f79fb 	.word	0x509f79fb
 800f204:	3fd34413 	.word	0x3fd34413
 800f208:	080120a5 	.word	0x080120a5
 800f20c:	0801215f 	.word	0x0801215f
 800f210:	7ff00000 	.word	0x7ff00000
 800f214:	0801215b 	.word	0x0801215b
 800f218:	08012152 	.word	0x08012152
 800f21c:	08012082 	.word	0x08012082
 800f220:	3ff80000 	.word	0x3ff80000
 800f224:	08012250 	.word	0x08012250
 800f228:	080121b7 	.word	0x080121b7
 800f22c:	2301      	movs	r3, #1
 800f22e:	9309      	str	r3, [sp, #36]	; 0x24
 800f230:	e7d7      	b.n	800f1e2 <_dtoa_r+0x2c2>
 800f232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f234:	9301      	str	r3, [sp, #4]
 800f236:	9304      	str	r3, [sp, #16]
 800f238:	e7ba      	b.n	800f1b0 <_dtoa_r+0x290>
 800f23a:	3101      	adds	r1, #1
 800f23c:	0052      	lsls	r2, r2, #1
 800f23e:	e7ba      	b.n	800f1b6 <_dtoa_r+0x296>
 800f240:	69e3      	ldr	r3, [r4, #28]
 800f242:	9a00      	ldr	r2, [sp, #0]
 800f244:	601a      	str	r2, [r3, #0]
 800f246:	9b04      	ldr	r3, [sp, #16]
 800f248:	2b0e      	cmp	r3, #14
 800f24a:	f200 80a8 	bhi.w	800f39e <_dtoa_r+0x47e>
 800f24e:	2d00      	cmp	r5, #0
 800f250:	f000 80a5 	beq.w	800f39e <_dtoa_r+0x47e>
 800f254:	f1bb 0f00 	cmp.w	fp, #0
 800f258:	dd38      	ble.n	800f2cc <_dtoa_r+0x3ac>
 800f25a:	4bc0      	ldr	r3, [pc, #768]	; (800f55c <_dtoa_r+0x63c>)
 800f25c:	f00b 020f 	and.w	r2, fp, #15
 800f260:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f264:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f268:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f26c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f270:	d019      	beq.n	800f2a6 <_dtoa_r+0x386>
 800f272:	4bbb      	ldr	r3, [pc, #748]	; (800f560 <_dtoa_r+0x640>)
 800f274:	ec51 0b18 	vmov	r0, r1, d8
 800f278:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f27c:	f7f1 fb1e 	bl	80008bc <__aeabi_ddiv>
 800f280:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f284:	f008 080f 	and.w	r8, r8, #15
 800f288:	2503      	movs	r5, #3
 800f28a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f560 <_dtoa_r+0x640>
 800f28e:	f1b8 0f00 	cmp.w	r8, #0
 800f292:	d10a      	bne.n	800f2aa <_dtoa_r+0x38a>
 800f294:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f298:	4632      	mov	r2, r6
 800f29a:	463b      	mov	r3, r7
 800f29c:	f7f1 fb0e 	bl	80008bc <__aeabi_ddiv>
 800f2a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f2a4:	e02b      	b.n	800f2fe <_dtoa_r+0x3de>
 800f2a6:	2502      	movs	r5, #2
 800f2a8:	e7ef      	b.n	800f28a <_dtoa_r+0x36a>
 800f2aa:	f018 0f01 	tst.w	r8, #1
 800f2ae:	d008      	beq.n	800f2c2 <_dtoa_r+0x3a2>
 800f2b0:	4630      	mov	r0, r6
 800f2b2:	4639      	mov	r1, r7
 800f2b4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f2b8:	f7f1 f9d6 	bl	8000668 <__aeabi_dmul>
 800f2bc:	3501      	adds	r5, #1
 800f2be:	4606      	mov	r6, r0
 800f2c0:	460f      	mov	r7, r1
 800f2c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f2c6:	f109 0908 	add.w	r9, r9, #8
 800f2ca:	e7e0      	b.n	800f28e <_dtoa_r+0x36e>
 800f2cc:	f000 809f 	beq.w	800f40e <_dtoa_r+0x4ee>
 800f2d0:	f1cb 0600 	rsb	r6, fp, #0
 800f2d4:	4ba1      	ldr	r3, [pc, #644]	; (800f55c <_dtoa_r+0x63c>)
 800f2d6:	4fa2      	ldr	r7, [pc, #648]	; (800f560 <_dtoa_r+0x640>)
 800f2d8:	f006 020f 	and.w	r2, r6, #15
 800f2dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e4:	ec51 0b18 	vmov	r0, r1, d8
 800f2e8:	f7f1 f9be 	bl	8000668 <__aeabi_dmul>
 800f2ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f2f0:	1136      	asrs	r6, r6, #4
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	2502      	movs	r5, #2
 800f2f6:	2e00      	cmp	r6, #0
 800f2f8:	d17e      	bne.n	800f3f8 <_dtoa_r+0x4d8>
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d1d0      	bne.n	800f2a0 <_dtoa_r+0x380>
 800f2fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f300:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f304:	2b00      	cmp	r3, #0
 800f306:	f000 8084 	beq.w	800f412 <_dtoa_r+0x4f2>
 800f30a:	4b96      	ldr	r3, [pc, #600]	; (800f564 <_dtoa_r+0x644>)
 800f30c:	2200      	movs	r2, #0
 800f30e:	4640      	mov	r0, r8
 800f310:	4649      	mov	r1, r9
 800f312:	f7f1 fc1b 	bl	8000b4c <__aeabi_dcmplt>
 800f316:	2800      	cmp	r0, #0
 800f318:	d07b      	beq.n	800f412 <_dtoa_r+0x4f2>
 800f31a:	9b04      	ldr	r3, [sp, #16]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d078      	beq.n	800f412 <_dtoa_r+0x4f2>
 800f320:	9b01      	ldr	r3, [sp, #4]
 800f322:	2b00      	cmp	r3, #0
 800f324:	dd39      	ble.n	800f39a <_dtoa_r+0x47a>
 800f326:	4b90      	ldr	r3, [pc, #576]	; (800f568 <_dtoa_r+0x648>)
 800f328:	2200      	movs	r2, #0
 800f32a:	4640      	mov	r0, r8
 800f32c:	4649      	mov	r1, r9
 800f32e:	f7f1 f99b 	bl	8000668 <__aeabi_dmul>
 800f332:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f336:	9e01      	ldr	r6, [sp, #4]
 800f338:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f33c:	3501      	adds	r5, #1
 800f33e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f342:	4628      	mov	r0, r5
 800f344:	f7f1 f926 	bl	8000594 <__aeabi_i2d>
 800f348:	4642      	mov	r2, r8
 800f34a:	464b      	mov	r3, r9
 800f34c:	f7f1 f98c 	bl	8000668 <__aeabi_dmul>
 800f350:	4b86      	ldr	r3, [pc, #536]	; (800f56c <_dtoa_r+0x64c>)
 800f352:	2200      	movs	r2, #0
 800f354:	f7f0 ffd2 	bl	80002fc <__adddf3>
 800f358:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f35c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f360:	9303      	str	r3, [sp, #12]
 800f362:	2e00      	cmp	r6, #0
 800f364:	d158      	bne.n	800f418 <_dtoa_r+0x4f8>
 800f366:	4b82      	ldr	r3, [pc, #520]	; (800f570 <_dtoa_r+0x650>)
 800f368:	2200      	movs	r2, #0
 800f36a:	4640      	mov	r0, r8
 800f36c:	4649      	mov	r1, r9
 800f36e:	f7f0 ffc3 	bl	80002f8 <__aeabi_dsub>
 800f372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f376:	4680      	mov	r8, r0
 800f378:	4689      	mov	r9, r1
 800f37a:	f7f1 fc05 	bl	8000b88 <__aeabi_dcmpgt>
 800f37e:	2800      	cmp	r0, #0
 800f380:	f040 8296 	bne.w	800f8b0 <_dtoa_r+0x990>
 800f384:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f388:	4640      	mov	r0, r8
 800f38a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f38e:	4649      	mov	r1, r9
 800f390:	f7f1 fbdc 	bl	8000b4c <__aeabi_dcmplt>
 800f394:	2800      	cmp	r0, #0
 800f396:	f040 8289 	bne.w	800f8ac <_dtoa_r+0x98c>
 800f39a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f39e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	f2c0 814e 	blt.w	800f642 <_dtoa_r+0x722>
 800f3a6:	f1bb 0f0e 	cmp.w	fp, #14
 800f3aa:	f300 814a 	bgt.w	800f642 <_dtoa_r+0x722>
 800f3ae:	4b6b      	ldr	r3, [pc, #428]	; (800f55c <_dtoa_r+0x63c>)
 800f3b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f3b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f3b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	f280 80dc 	bge.w	800f578 <_dtoa_r+0x658>
 800f3c0:	9b04      	ldr	r3, [sp, #16]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	f300 80d8 	bgt.w	800f578 <_dtoa_r+0x658>
 800f3c8:	f040 826f 	bne.w	800f8aa <_dtoa_r+0x98a>
 800f3cc:	4b68      	ldr	r3, [pc, #416]	; (800f570 <_dtoa_r+0x650>)
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	4640      	mov	r0, r8
 800f3d2:	4649      	mov	r1, r9
 800f3d4:	f7f1 f948 	bl	8000668 <__aeabi_dmul>
 800f3d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f3dc:	f7f1 fbca 	bl	8000b74 <__aeabi_dcmpge>
 800f3e0:	9e04      	ldr	r6, [sp, #16]
 800f3e2:	4637      	mov	r7, r6
 800f3e4:	2800      	cmp	r0, #0
 800f3e6:	f040 8245 	bne.w	800f874 <_dtoa_r+0x954>
 800f3ea:	9d00      	ldr	r5, [sp, #0]
 800f3ec:	2331      	movs	r3, #49	; 0x31
 800f3ee:	f805 3b01 	strb.w	r3, [r5], #1
 800f3f2:	f10b 0b01 	add.w	fp, fp, #1
 800f3f6:	e241      	b.n	800f87c <_dtoa_r+0x95c>
 800f3f8:	07f2      	lsls	r2, r6, #31
 800f3fa:	d505      	bpl.n	800f408 <_dtoa_r+0x4e8>
 800f3fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f400:	f7f1 f932 	bl	8000668 <__aeabi_dmul>
 800f404:	3501      	adds	r5, #1
 800f406:	2301      	movs	r3, #1
 800f408:	1076      	asrs	r6, r6, #1
 800f40a:	3708      	adds	r7, #8
 800f40c:	e773      	b.n	800f2f6 <_dtoa_r+0x3d6>
 800f40e:	2502      	movs	r5, #2
 800f410:	e775      	b.n	800f2fe <_dtoa_r+0x3de>
 800f412:	9e04      	ldr	r6, [sp, #16]
 800f414:	465f      	mov	r7, fp
 800f416:	e792      	b.n	800f33e <_dtoa_r+0x41e>
 800f418:	9900      	ldr	r1, [sp, #0]
 800f41a:	4b50      	ldr	r3, [pc, #320]	; (800f55c <_dtoa_r+0x63c>)
 800f41c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f420:	4431      	add	r1, r6
 800f422:	9102      	str	r1, [sp, #8]
 800f424:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f426:	eeb0 9a47 	vmov.f32	s18, s14
 800f42a:	eef0 9a67 	vmov.f32	s19, s15
 800f42e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f432:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f436:	2900      	cmp	r1, #0
 800f438:	d044      	beq.n	800f4c4 <_dtoa_r+0x5a4>
 800f43a:	494e      	ldr	r1, [pc, #312]	; (800f574 <_dtoa_r+0x654>)
 800f43c:	2000      	movs	r0, #0
 800f43e:	f7f1 fa3d 	bl	80008bc <__aeabi_ddiv>
 800f442:	ec53 2b19 	vmov	r2, r3, d9
 800f446:	f7f0 ff57 	bl	80002f8 <__aeabi_dsub>
 800f44a:	9d00      	ldr	r5, [sp, #0]
 800f44c:	ec41 0b19 	vmov	d9, r0, r1
 800f450:	4649      	mov	r1, r9
 800f452:	4640      	mov	r0, r8
 800f454:	f7f1 fbb8 	bl	8000bc8 <__aeabi_d2iz>
 800f458:	4606      	mov	r6, r0
 800f45a:	f7f1 f89b 	bl	8000594 <__aeabi_i2d>
 800f45e:	4602      	mov	r2, r0
 800f460:	460b      	mov	r3, r1
 800f462:	4640      	mov	r0, r8
 800f464:	4649      	mov	r1, r9
 800f466:	f7f0 ff47 	bl	80002f8 <__aeabi_dsub>
 800f46a:	3630      	adds	r6, #48	; 0x30
 800f46c:	f805 6b01 	strb.w	r6, [r5], #1
 800f470:	ec53 2b19 	vmov	r2, r3, d9
 800f474:	4680      	mov	r8, r0
 800f476:	4689      	mov	r9, r1
 800f478:	f7f1 fb68 	bl	8000b4c <__aeabi_dcmplt>
 800f47c:	2800      	cmp	r0, #0
 800f47e:	d164      	bne.n	800f54a <_dtoa_r+0x62a>
 800f480:	4642      	mov	r2, r8
 800f482:	464b      	mov	r3, r9
 800f484:	4937      	ldr	r1, [pc, #220]	; (800f564 <_dtoa_r+0x644>)
 800f486:	2000      	movs	r0, #0
 800f488:	f7f0 ff36 	bl	80002f8 <__aeabi_dsub>
 800f48c:	ec53 2b19 	vmov	r2, r3, d9
 800f490:	f7f1 fb5c 	bl	8000b4c <__aeabi_dcmplt>
 800f494:	2800      	cmp	r0, #0
 800f496:	f040 80b6 	bne.w	800f606 <_dtoa_r+0x6e6>
 800f49a:	9b02      	ldr	r3, [sp, #8]
 800f49c:	429d      	cmp	r5, r3
 800f49e:	f43f af7c 	beq.w	800f39a <_dtoa_r+0x47a>
 800f4a2:	4b31      	ldr	r3, [pc, #196]	; (800f568 <_dtoa_r+0x648>)
 800f4a4:	ec51 0b19 	vmov	r0, r1, d9
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	f7f1 f8dd 	bl	8000668 <__aeabi_dmul>
 800f4ae:	4b2e      	ldr	r3, [pc, #184]	; (800f568 <_dtoa_r+0x648>)
 800f4b0:	ec41 0b19 	vmov	d9, r0, r1
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	4640      	mov	r0, r8
 800f4b8:	4649      	mov	r1, r9
 800f4ba:	f7f1 f8d5 	bl	8000668 <__aeabi_dmul>
 800f4be:	4680      	mov	r8, r0
 800f4c0:	4689      	mov	r9, r1
 800f4c2:	e7c5      	b.n	800f450 <_dtoa_r+0x530>
 800f4c4:	ec51 0b17 	vmov	r0, r1, d7
 800f4c8:	f7f1 f8ce 	bl	8000668 <__aeabi_dmul>
 800f4cc:	9b02      	ldr	r3, [sp, #8]
 800f4ce:	9d00      	ldr	r5, [sp, #0]
 800f4d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f4d2:	ec41 0b19 	vmov	d9, r0, r1
 800f4d6:	4649      	mov	r1, r9
 800f4d8:	4640      	mov	r0, r8
 800f4da:	f7f1 fb75 	bl	8000bc8 <__aeabi_d2iz>
 800f4de:	4606      	mov	r6, r0
 800f4e0:	f7f1 f858 	bl	8000594 <__aeabi_i2d>
 800f4e4:	3630      	adds	r6, #48	; 0x30
 800f4e6:	4602      	mov	r2, r0
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	4640      	mov	r0, r8
 800f4ec:	4649      	mov	r1, r9
 800f4ee:	f7f0 ff03 	bl	80002f8 <__aeabi_dsub>
 800f4f2:	f805 6b01 	strb.w	r6, [r5], #1
 800f4f6:	9b02      	ldr	r3, [sp, #8]
 800f4f8:	429d      	cmp	r5, r3
 800f4fa:	4680      	mov	r8, r0
 800f4fc:	4689      	mov	r9, r1
 800f4fe:	f04f 0200 	mov.w	r2, #0
 800f502:	d124      	bne.n	800f54e <_dtoa_r+0x62e>
 800f504:	4b1b      	ldr	r3, [pc, #108]	; (800f574 <_dtoa_r+0x654>)
 800f506:	ec51 0b19 	vmov	r0, r1, d9
 800f50a:	f7f0 fef7 	bl	80002fc <__adddf3>
 800f50e:	4602      	mov	r2, r0
 800f510:	460b      	mov	r3, r1
 800f512:	4640      	mov	r0, r8
 800f514:	4649      	mov	r1, r9
 800f516:	f7f1 fb37 	bl	8000b88 <__aeabi_dcmpgt>
 800f51a:	2800      	cmp	r0, #0
 800f51c:	d173      	bne.n	800f606 <_dtoa_r+0x6e6>
 800f51e:	ec53 2b19 	vmov	r2, r3, d9
 800f522:	4914      	ldr	r1, [pc, #80]	; (800f574 <_dtoa_r+0x654>)
 800f524:	2000      	movs	r0, #0
 800f526:	f7f0 fee7 	bl	80002f8 <__aeabi_dsub>
 800f52a:	4602      	mov	r2, r0
 800f52c:	460b      	mov	r3, r1
 800f52e:	4640      	mov	r0, r8
 800f530:	4649      	mov	r1, r9
 800f532:	f7f1 fb0b 	bl	8000b4c <__aeabi_dcmplt>
 800f536:	2800      	cmp	r0, #0
 800f538:	f43f af2f 	beq.w	800f39a <_dtoa_r+0x47a>
 800f53c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f53e:	1e6b      	subs	r3, r5, #1
 800f540:	930f      	str	r3, [sp, #60]	; 0x3c
 800f542:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f546:	2b30      	cmp	r3, #48	; 0x30
 800f548:	d0f8      	beq.n	800f53c <_dtoa_r+0x61c>
 800f54a:	46bb      	mov	fp, r7
 800f54c:	e04a      	b.n	800f5e4 <_dtoa_r+0x6c4>
 800f54e:	4b06      	ldr	r3, [pc, #24]	; (800f568 <_dtoa_r+0x648>)
 800f550:	f7f1 f88a 	bl	8000668 <__aeabi_dmul>
 800f554:	4680      	mov	r8, r0
 800f556:	4689      	mov	r9, r1
 800f558:	e7bd      	b.n	800f4d6 <_dtoa_r+0x5b6>
 800f55a:	bf00      	nop
 800f55c:	08012250 	.word	0x08012250
 800f560:	08012228 	.word	0x08012228
 800f564:	3ff00000 	.word	0x3ff00000
 800f568:	40240000 	.word	0x40240000
 800f56c:	401c0000 	.word	0x401c0000
 800f570:	40140000 	.word	0x40140000
 800f574:	3fe00000 	.word	0x3fe00000
 800f578:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f57c:	9d00      	ldr	r5, [sp, #0]
 800f57e:	4642      	mov	r2, r8
 800f580:	464b      	mov	r3, r9
 800f582:	4630      	mov	r0, r6
 800f584:	4639      	mov	r1, r7
 800f586:	f7f1 f999 	bl	80008bc <__aeabi_ddiv>
 800f58a:	f7f1 fb1d 	bl	8000bc8 <__aeabi_d2iz>
 800f58e:	9001      	str	r0, [sp, #4]
 800f590:	f7f1 f800 	bl	8000594 <__aeabi_i2d>
 800f594:	4642      	mov	r2, r8
 800f596:	464b      	mov	r3, r9
 800f598:	f7f1 f866 	bl	8000668 <__aeabi_dmul>
 800f59c:	4602      	mov	r2, r0
 800f59e:	460b      	mov	r3, r1
 800f5a0:	4630      	mov	r0, r6
 800f5a2:	4639      	mov	r1, r7
 800f5a4:	f7f0 fea8 	bl	80002f8 <__aeabi_dsub>
 800f5a8:	9e01      	ldr	r6, [sp, #4]
 800f5aa:	9f04      	ldr	r7, [sp, #16]
 800f5ac:	3630      	adds	r6, #48	; 0x30
 800f5ae:	f805 6b01 	strb.w	r6, [r5], #1
 800f5b2:	9e00      	ldr	r6, [sp, #0]
 800f5b4:	1bae      	subs	r6, r5, r6
 800f5b6:	42b7      	cmp	r7, r6
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	460b      	mov	r3, r1
 800f5bc:	d134      	bne.n	800f628 <_dtoa_r+0x708>
 800f5be:	f7f0 fe9d 	bl	80002fc <__adddf3>
 800f5c2:	4642      	mov	r2, r8
 800f5c4:	464b      	mov	r3, r9
 800f5c6:	4606      	mov	r6, r0
 800f5c8:	460f      	mov	r7, r1
 800f5ca:	f7f1 fadd 	bl	8000b88 <__aeabi_dcmpgt>
 800f5ce:	b9c8      	cbnz	r0, 800f604 <_dtoa_r+0x6e4>
 800f5d0:	4642      	mov	r2, r8
 800f5d2:	464b      	mov	r3, r9
 800f5d4:	4630      	mov	r0, r6
 800f5d6:	4639      	mov	r1, r7
 800f5d8:	f7f1 faae 	bl	8000b38 <__aeabi_dcmpeq>
 800f5dc:	b110      	cbz	r0, 800f5e4 <_dtoa_r+0x6c4>
 800f5de:	9b01      	ldr	r3, [sp, #4]
 800f5e0:	07db      	lsls	r3, r3, #31
 800f5e2:	d40f      	bmi.n	800f604 <_dtoa_r+0x6e4>
 800f5e4:	4651      	mov	r1, sl
 800f5e6:	4620      	mov	r0, r4
 800f5e8:	f000 fbcc 	bl	800fd84 <_Bfree>
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f5f0:	702b      	strb	r3, [r5, #0]
 800f5f2:	f10b 0301 	add.w	r3, fp, #1
 800f5f6:	6013      	str	r3, [r2, #0]
 800f5f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	f43f ace2 	beq.w	800efc4 <_dtoa_r+0xa4>
 800f600:	601d      	str	r5, [r3, #0]
 800f602:	e4df      	b.n	800efc4 <_dtoa_r+0xa4>
 800f604:	465f      	mov	r7, fp
 800f606:	462b      	mov	r3, r5
 800f608:	461d      	mov	r5, r3
 800f60a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f60e:	2a39      	cmp	r2, #57	; 0x39
 800f610:	d106      	bne.n	800f620 <_dtoa_r+0x700>
 800f612:	9a00      	ldr	r2, [sp, #0]
 800f614:	429a      	cmp	r2, r3
 800f616:	d1f7      	bne.n	800f608 <_dtoa_r+0x6e8>
 800f618:	9900      	ldr	r1, [sp, #0]
 800f61a:	2230      	movs	r2, #48	; 0x30
 800f61c:	3701      	adds	r7, #1
 800f61e:	700a      	strb	r2, [r1, #0]
 800f620:	781a      	ldrb	r2, [r3, #0]
 800f622:	3201      	adds	r2, #1
 800f624:	701a      	strb	r2, [r3, #0]
 800f626:	e790      	b.n	800f54a <_dtoa_r+0x62a>
 800f628:	4ba3      	ldr	r3, [pc, #652]	; (800f8b8 <_dtoa_r+0x998>)
 800f62a:	2200      	movs	r2, #0
 800f62c:	f7f1 f81c 	bl	8000668 <__aeabi_dmul>
 800f630:	2200      	movs	r2, #0
 800f632:	2300      	movs	r3, #0
 800f634:	4606      	mov	r6, r0
 800f636:	460f      	mov	r7, r1
 800f638:	f7f1 fa7e 	bl	8000b38 <__aeabi_dcmpeq>
 800f63c:	2800      	cmp	r0, #0
 800f63e:	d09e      	beq.n	800f57e <_dtoa_r+0x65e>
 800f640:	e7d0      	b.n	800f5e4 <_dtoa_r+0x6c4>
 800f642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f644:	2a00      	cmp	r2, #0
 800f646:	f000 80ca 	beq.w	800f7de <_dtoa_r+0x8be>
 800f64a:	9a07      	ldr	r2, [sp, #28]
 800f64c:	2a01      	cmp	r2, #1
 800f64e:	f300 80ad 	bgt.w	800f7ac <_dtoa_r+0x88c>
 800f652:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f654:	2a00      	cmp	r2, #0
 800f656:	f000 80a5 	beq.w	800f7a4 <_dtoa_r+0x884>
 800f65a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f65e:	9e08      	ldr	r6, [sp, #32]
 800f660:	9d05      	ldr	r5, [sp, #20]
 800f662:	9a05      	ldr	r2, [sp, #20]
 800f664:	441a      	add	r2, r3
 800f666:	9205      	str	r2, [sp, #20]
 800f668:	9a06      	ldr	r2, [sp, #24]
 800f66a:	2101      	movs	r1, #1
 800f66c:	441a      	add	r2, r3
 800f66e:	4620      	mov	r0, r4
 800f670:	9206      	str	r2, [sp, #24]
 800f672:	f000 fc3d 	bl	800fef0 <__i2b>
 800f676:	4607      	mov	r7, r0
 800f678:	b165      	cbz	r5, 800f694 <_dtoa_r+0x774>
 800f67a:	9b06      	ldr	r3, [sp, #24]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	dd09      	ble.n	800f694 <_dtoa_r+0x774>
 800f680:	42ab      	cmp	r3, r5
 800f682:	9a05      	ldr	r2, [sp, #20]
 800f684:	bfa8      	it	ge
 800f686:	462b      	movge	r3, r5
 800f688:	1ad2      	subs	r2, r2, r3
 800f68a:	9205      	str	r2, [sp, #20]
 800f68c:	9a06      	ldr	r2, [sp, #24]
 800f68e:	1aed      	subs	r5, r5, r3
 800f690:	1ad3      	subs	r3, r2, r3
 800f692:	9306      	str	r3, [sp, #24]
 800f694:	9b08      	ldr	r3, [sp, #32]
 800f696:	b1f3      	cbz	r3, 800f6d6 <_dtoa_r+0x7b6>
 800f698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	f000 80a3 	beq.w	800f7e6 <_dtoa_r+0x8c6>
 800f6a0:	2e00      	cmp	r6, #0
 800f6a2:	dd10      	ble.n	800f6c6 <_dtoa_r+0x7a6>
 800f6a4:	4639      	mov	r1, r7
 800f6a6:	4632      	mov	r2, r6
 800f6a8:	4620      	mov	r0, r4
 800f6aa:	f000 fce1 	bl	8010070 <__pow5mult>
 800f6ae:	4652      	mov	r2, sl
 800f6b0:	4601      	mov	r1, r0
 800f6b2:	4607      	mov	r7, r0
 800f6b4:	4620      	mov	r0, r4
 800f6b6:	f000 fc31 	bl	800ff1c <__multiply>
 800f6ba:	4651      	mov	r1, sl
 800f6bc:	4680      	mov	r8, r0
 800f6be:	4620      	mov	r0, r4
 800f6c0:	f000 fb60 	bl	800fd84 <_Bfree>
 800f6c4:	46c2      	mov	sl, r8
 800f6c6:	9b08      	ldr	r3, [sp, #32]
 800f6c8:	1b9a      	subs	r2, r3, r6
 800f6ca:	d004      	beq.n	800f6d6 <_dtoa_r+0x7b6>
 800f6cc:	4651      	mov	r1, sl
 800f6ce:	4620      	mov	r0, r4
 800f6d0:	f000 fcce 	bl	8010070 <__pow5mult>
 800f6d4:	4682      	mov	sl, r0
 800f6d6:	2101      	movs	r1, #1
 800f6d8:	4620      	mov	r0, r4
 800f6da:	f000 fc09 	bl	800fef0 <__i2b>
 800f6de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	4606      	mov	r6, r0
 800f6e4:	f340 8081 	ble.w	800f7ea <_dtoa_r+0x8ca>
 800f6e8:	461a      	mov	r2, r3
 800f6ea:	4601      	mov	r1, r0
 800f6ec:	4620      	mov	r0, r4
 800f6ee:	f000 fcbf 	bl	8010070 <__pow5mult>
 800f6f2:	9b07      	ldr	r3, [sp, #28]
 800f6f4:	2b01      	cmp	r3, #1
 800f6f6:	4606      	mov	r6, r0
 800f6f8:	dd7a      	ble.n	800f7f0 <_dtoa_r+0x8d0>
 800f6fa:	f04f 0800 	mov.w	r8, #0
 800f6fe:	6933      	ldr	r3, [r6, #16]
 800f700:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f704:	6918      	ldr	r0, [r3, #16]
 800f706:	f000 fba5 	bl	800fe54 <__hi0bits>
 800f70a:	f1c0 0020 	rsb	r0, r0, #32
 800f70e:	9b06      	ldr	r3, [sp, #24]
 800f710:	4418      	add	r0, r3
 800f712:	f010 001f 	ands.w	r0, r0, #31
 800f716:	f000 8094 	beq.w	800f842 <_dtoa_r+0x922>
 800f71a:	f1c0 0320 	rsb	r3, r0, #32
 800f71e:	2b04      	cmp	r3, #4
 800f720:	f340 8085 	ble.w	800f82e <_dtoa_r+0x90e>
 800f724:	9b05      	ldr	r3, [sp, #20]
 800f726:	f1c0 001c 	rsb	r0, r0, #28
 800f72a:	4403      	add	r3, r0
 800f72c:	9305      	str	r3, [sp, #20]
 800f72e:	9b06      	ldr	r3, [sp, #24]
 800f730:	4403      	add	r3, r0
 800f732:	4405      	add	r5, r0
 800f734:	9306      	str	r3, [sp, #24]
 800f736:	9b05      	ldr	r3, [sp, #20]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	dd05      	ble.n	800f748 <_dtoa_r+0x828>
 800f73c:	4651      	mov	r1, sl
 800f73e:	461a      	mov	r2, r3
 800f740:	4620      	mov	r0, r4
 800f742:	f000 fcef 	bl	8010124 <__lshift>
 800f746:	4682      	mov	sl, r0
 800f748:	9b06      	ldr	r3, [sp, #24]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	dd05      	ble.n	800f75a <_dtoa_r+0x83a>
 800f74e:	4631      	mov	r1, r6
 800f750:	461a      	mov	r2, r3
 800f752:	4620      	mov	r0, r4
 800f754:	f000 fce6 	bl	8010124 <__lshift>
 800f758:	4606      	mov	r6, r0
 800f75a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d072      	beq.n	800f846 <_dtoa_r+0x926>
 800f760:	4631      	mov	r1, r6
 800f762:	4650      	mov	r0, sl
 800f764:	f000 fd4a 	bl	80101fc <__mcmp>
 800f768:	2800      	cmp	r0, #0
 800f76a:	da6c      	bge.n	800f846 <_dtoa_r+0x926>
 800f76c:	2300      	movs	r3, #0
 800f76e:	4651      	mov	r1, sl
 800f770:	220a      	movs	r2, #10
 800f772:	4620      	mov	r0, r4
 800f774:	f000 fb28 	bl	800fdc8 <__multadd>
 800f778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f77a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f77e:	4682      	mov	sl, r0
 800f780:	2b00      	cmp	r3, #0
 800f782:	f000 81b0 	beq.w	800fae6 <_dtoa_r+0xbc6>
 800f786:	2300      	movs	r3, #0
 800f788:	4639      	mov	r1, r7
 800f78a:	220a      	movs	r2, #10
 800f78c:	4620      	mov	r0, r4
 800f78e:	f000 fb1b 	bl	800fdc8 <__multadd>
 800f792:	9b01      	ldr	r3, [sp, #4]
 800f794:	2b00      	cmp	r3, #0
 800f796:	4607      	mov	r7, r0
 800f798:	f300 8096 	bgt.w	800f8c8 <_dtoa_r+0x9a8>
 800f79c:	9b07      	ldr	r3, [sp, #28]
 800f79e:	2b02      	cmp	r3, #2
 800f7a0:	dc59      	bgt.n	800f856 <_dtoa_r+0x936>
 800f7a2:	e091      	b.n	800f8c8 <_dtoa_r+0x9a8>
 800f7a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f7a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f7aa:	e758      	b.n	800f65e <_dtoa_r+0x73e>
 800f7ac:	9b04      	ldr	r3, [sp, #16]
 800f7ae:	1e5e      	subs	r6, r3, #1
 800f7b0:	9b08      	ldr	r3, [sp, #32]
 800f7b2:	42b3      	cmp	r3, r6
 800f7b4:	bfbf      	itttt	lt
 800f7b6:	9b08      	ldrlt	r3, [sp, #32]
 800f7b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f7ba:	9608      	strlt	r6, [sp, #32]
 800f7bc:	1af3      	sublt	r3, r6, r3
 800f7be:	bfb4      	ite	lt
 800f7c0:	18d2      	addlt	r2, r2, r3
 800f7c2:	1b9e      	subge	r6, r3, r6
 800f7c4:	9b04      	ldr	r3, [sp, #16]
 800f7c6:	bfbc      	itt	lt
 800f7c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f7ca:	2600      	movlt	r6, #0
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	bfb7      	itett	lt
 800f7d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f7d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f7d8:	1a9d      	sublt	r5, r3, r2
 800f7da:	2300      	movlt	r3, #0
 800f7dc:	e741      	b.n	800f662 <_dtoa_r+0x742>
 800f7de:	9e08      	ldr	r6, [sp, #32]
 800f7e0:	9d05      	ldr	r5, [sp, #20]
 800f7e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f7e4:	e748      	b.n	800f678 <_dtoa_r+0x758>
 800f7e6:	9a08      	ldr	r2, [sp, #32]
 800f7e8:	e770      	b.n	800f6cc <_dtoa_r+0x7ac>
 800f7ea:	9b07      	ldr	r3, [sp, #28]
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	dc19      	bgt.n	800f824 <_dtoa_r+0x904>
 800f7f0:	9b02      	ldr	r3, [sp, #8]
 800f7f2:	b9bb      	cbnz	r3, 800f824 <_dtoa_r+0x904>
 800f7f4:	9b03      	ldr	r3, [sp, #12]
 800f7f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f7fa:	b99b      	cbnz	r3, 800f824 <_dtoa_r+0x904>
 800f7fc:	9b03      	ldr	r3, [sp, #12]
 800f7fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f802:	0d1b      	lsrs	r3, r3, #20
 800f804:	051b      	lsls	r3, r3, #20
 800f806:	b183      	cbz	r3, 800f82a <_dtoa_r+0x90a>
 800f808:	9b05      	ldr	r3, [sp, #20]
 800f80a:	3301      	adds	r3, #1
 800f80c:	9305      	str	r3, [sp, #20]
 800f80e:	9b06      	ldr	r3, [sp, #24]
 800f810:	3301      	adds	r3, #1
 800f812:	9306      	str	r3, [sp, #24]
 800f814:	f04f 0801 	mov.w	r8, #1
 800f818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	f47f af6f 	bne.w	800f6fe <_dtoa_r+0x7de>
 800f820:	2001      	movs	r0, #1
 800f822:	e774      	b.n	800f70e <_dtoa_r+0x7ee>
 800f824:	f04f 0800 	mov.w	r8, #0
 800f828:	e7f6      	b.n	800f818 <_dtoa_r+0x8f8>
 800f82a:	4698      	mov	r8, r3
 800f82c:	e7f4      	b.n	800f818 <_dtoa_r+0x8f8>
 800f82e:	d082      	beq.n	800f736 <_dtoa_r+0x816>
 800f830:	9a05      	ldr	r2, [sp, #20]
 800f832:	331c      	adds	r3, #28
 800f834:	441a      	add	r2, r3
 800f836:	9205      	str	r2, [sp, #20]
 800f838:	9a06      	ldr	r2, [sp, #24]
 800f83a:	441a      	add	r2, r3
 800f83c:	441d      	add	r5, r3
 800f83e:	9206      	str	r2, [sp, #24]
 800f840:	e779      	b.n	800f736 <_dtoa_r+0x816>
 800f842:	4603      	mov	r3, r0
 800f844:	e7f4      	b.n	800f830 <_dtoa_r+0x910>
 800f846:	9b04      	ldr	r3, [sp, #16]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	dc37      	bgt.n	800f8bc <_dtoa_r+0x99c>
 800f84c:	9b07      	ldr	r3, [sp, #28]
 800f84e:	2b02      	cmp	r3, #2
 800f850:	dd34      	ble.n	800f8bc <_dtoa_r+0x99c>
 800f852:	9b04      	ldr	r3, [sp, #16]
 800f854:	9301      	str	r3, [sp, #4]
 800f856:	9b01      	ldr	r3, [sp, #4]
 800f858:	b963      	cbnz	r3, 800f874 <_dtoa_r+0x954>
 800f85a:	4631      	mov	r1, r6
 800f85c:	2205      	movs	r2, #5
 800f85e:	4620      	mov	r0, r4
 800f860:	f000 fab2 	bl	800fdc8 <__multadd>
 800f864:	4601      	mov	r1, r0
 800f866:	4606      	mov	r6, r0
 800f868:	4650      	mov	r0, sl
 800f86a:	f000 fcc7 	bl	80101fc <__mcmp>
 800f86e:	2800      	cmp	r0, #0
 800f870:	f73f adbb 	bgt.w	800f3ea <_dtoa_r+0x4ca>
 800f874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f876:	9d00      	ldr	r5, [sp, #0]
 800f878:	ea6f 0b03 	mvn.w	fp, r3
 800f87c:	f04f 0800 	mov.w	r8, #0
 800f880:	4631      	mov	r1, r6
 800f882:	4620      	mov	r0, r4
 800f884:	f000 fa7e 	bl	800fd84 <_Bfree>
 800f888:	2f00      	cmp	r7, #0
 800f88a:	f43f aeab 	beq.w	800f5e4 <_dtoa_r+0x6c4>
 800f88e:	f1b8 0f00 	cmp.w	r8, #0
 800f892:	d005      	beq.n	800f8a0 <_dtoa_r+0x980>
 800f894:	45b8      	cmp	r8, r7
 800f896:	d003      	beq.n	800f8a0 <_dtoa_r+0x980>
 800f898:	4641      	mov	r1, r8
 800f89a:	4620      	mov	r0, r4
 800f89c:	f000 fa72 	bl	800fd84 <_Bfree>
 800f8a0:	4639      	mov	r1, r7
 800f8a2:	4620      	mov	r0, r4
 800f8a4:	f000 fa6e 	bl	800fd84 <_Bfree>
 800f8a8:	e69c      	b.n	800f5e4 <_dtoa_r+0x6c4>
 800f8aa:	2600      	movs	r6, #0
 800f8ac:	4637      	mov	r7, r6
 800f8ae:	e7e1      	b.n	800f874 <_dtoa_r+0x954>
 800f8b0:	46bb      	mov	fp, r7
 800f8b2:	4637      	mov	r7, r6
 800f8b4:	e599      	b.n	800f3ea <_dtoa_r+0x4ca>
 800f8b6:	bf00      	nop
 800f8b8:	40240000 	.word	0x40240000
 800f8bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	f000 80c8 	beq.w	800fa54 <_dtoa_r+0xb34>
 800f8c4:	9b04      	ldr	r3, [sp, #16]
 800f8c6:	9301      	str	r3, [sp, #4]
 800f8c8:	2d00      	cmp	r5, #0
 800f8ca:	dd05      	ble.n	800f8d8 <_dtoa_r+0x9b8>
 800f8cc:	4639      	mov	r1, r7
 800f8ce:	462a      	mov	r2, r5
 800f8d0:	4620      	mov	r0, r4
 800f8d2:	f000 fc27 	bl	8010124 <__lshift>
 800f8d6:	4607      	mov	r7, r0
 800f8d8:	f1b8 0f00 	cmp.w	r8, #0
 800f8dc:	d05b      	beq.n	800f996 <_dtoa_r+0xa76>
 800f8de:	6879      	ldr	r1, [r7, #4]
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	f000 fa0f 	bl	800fd04 <_Balloc>
 800f8e6:	4605      	mov	r5, r0
 800f8e8:	b928      	cbnz	r0, 800f8f6 <_dtoa_r+0x9d6>
 800f8ea:	4b83      	ldr	r3, [pc, #524]	; (800faf8 <_dtoa_r+0xbd8>)
 800f8ec:	4602      	mov	r2, r0
 800f8ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f8f2:	f7ff bb2e 	b.w	800ef52 <_dtoa_r+0x32>
 800f8f6:	693a      	ldr	r2, [r7, #16]
 800f8f8:	3202      	adds	r2, #2
 800f8fa:	0092      	lsls	r2, r2, #2
 800f8fc:	f107 010c 	add.w	r1, r7, #12
 800f900:	300c      	adds	r0, #12
 800f902:	f7ff fa56 	bl	800edb2 <memcpy>
 800f906:	2201      	movs	r2, #1
 800f908:	4629      	mov	r1, r5
 800f90a:	4620      	mov	r0, r4
 800f90c:	f000 fc0a 	bl	8010124 <__lshift>
 800f910:	9b00      	ldr	r3, [sp, #0]
 800f912:	3301      	adds	r3, #1
 800f914:	9304      	str	r3, [sp, #16]
 800f916:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f91a:	4413      	add	r3, r2
 800f91c:	9308      	str	r3, [sp, #32]
 800f91e:	9b02      	ldr	r3, [sp, #8]
 800f920:	f003 0301 	and.w	r3, r3, #1
 800f924:	46b8      	mov	r8, r7
 800f926:	9306      	str	r3, [sp, #24]
 800f928:	4607      	mov	r7, r0
 800f92a:	9b04      	ldr	r3, [sp, #16]
 800f92c:	4631      	mov	r1, r6
 800f92e:	3b01      	subs	r3, #1
 800f930:	4650      	mov	r0, sl
 800f932:	9301      	str	r3, [sp, #4]
 800f934:	f7ff fa6a 	bl	800ee0c <quorem>
 800f938:	4641      	mov	r1, r8
 800f93a:	9002      	str	r0, [sp, #8]
 800f93c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f940:	4650      	mov	r0, sl
 800f942:	f000 fc5b 	bl	80101fc <__mcmp>
 800f946:	463a      	mov	r2, r7
 800f948:	9005      	str	r0, [sp, #20]
 800f94a:	4631      	mov	r1, r6
 800f94c:	4620      	mov	r0, r4
 800f94e:	f000 fc71 	bl	8010234 <__mdiff>
 800f952:	68c2      	ldr	r2, [r0, #12]
 800f954:	4605      	mov	r5, r0
 800f956:	bb02      	cbnz	r2, 800f99a <_dtoa_r+0xa7a>
 800f958:	4601      	mov	r1, r0
 800f95a:	4650      	mov	r0, sl
 800f95c:	f000 fc4e 	bl	80101fc <__mcmp>
 800f960:	4602      	mov	r2, r0
 800f962:	4629      	mov	r1, r5
 800f964:	4620      	mov	r0, r4
 800f966:	9209      	str	r2, [sp, #36]	; 0x24
 800f968:	f000 fa0c 	bl	800fd84 <_Bfree>
 800f96c:	9b07      	ldr	r3, [sp, #28]
 800f96e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f970:	9d04      	ldr	r5, [sp, #16]
 800f972:	ea43 0102 	orr.w	r1, r3, r2
 800f976:	9b06      	ldr	r3, [sp, #24]
 800f978:	4319      	orrs	r1, r3
 800f97a:	d110      	bne.n	800f99e <_dtoa_r+0xa7e>
 800f97c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f980:	d029      	beq.n	800f9d6 <_dtoa_r+0xab6>
 800f982:	9b05      	ldr	r3, [sp, #20]
 800f984:	2b00      	cmp	r3, #0
 800f986:	dd02      	ble.n	800f98e <_dtoa_r+0xa6e>
 800f988:	9b02      	ldr	r3, [sp, #8]
 800f98a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f98e:	9b01      	ldr	r3, [sp, #4]
 800f990:	f883 9000 	strb.w	r9, [r3]
 800f994:	e774      	b.n	800f880 <_dtoa_r+0x960>
 800f996:	4638      	mov	r0, r7
 800f998:	e7ba      	b.n	800f910 <_dtoa_r+0x9f0>
 800f99a:	2201      	movs	r2, #1
 800f99c:	e7e1      	b.n	800f962 <_dtoa_r+0xa42>
 800f99e:	9b05      	ldr	r3, [sp, #20]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	db04      	blt.n	800f9ae <_dtoa_r+0xa8e>
 800f9a4:	9907      	ldr	r1, [sp, #28]
 800f9a6:	430b      	orrs	r3, r1
 800f9a8:	9906      	ldr	r1, [sp, #24]
 800f9aa:	430b      	orrs	r3, r1
 800f9ac:	d120      	bne.n	800f9f0 <_dtoa_r+0xad0>
 800f9ae:	2a00      	cmp	r2, #0
 800f9b0:	dded      	ble.n	800f98e <_dtoa_r+0xa6e>
 800f9b2:	4651      	mov	r1, sl
 800f9b4:	2201      	movs	r2, #1
 800f9b6:	4620      	mov	r0, r4
 800f9b8:	f000 fbb4 	bl	8010124 <__lshift>
 800f9bc:	4631      	mov	r1, r6
 800f9be:	4682      	mov	sl, r0
 800f9c0:	f000 fc1c 	bl	80101fc <__mcmp>
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	dc03      	bgt.n	800f9d0 <_dtoa_r+0xab0>
 800f9c8:	d1e1      	bne.n	800f98e <_dtoa_r+0xa6e>
 800f9ca:	f019 0f01 	tst.w	r9, #1
 800f9ce:	d0de      	beq.n	800f98e <_dtoa_r+0xa6e>
 800f9d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f9d4:	d1d8      	bne.n	800f988 <_dtoa_r+0xa68>
 800f9d6:	9a01      	ldr	r2, [sp, #4]
 800f9d8:	2339      	movs	r3, #57	; 0x39
 800f9da:	7013      	strb	r3, [r2, #0]
 800f9dc:	462b      	mov	r3, r5
 800f9de:	461d      	mov	r5, r3
 800f9e0:	3b01      	subs	r3, #1
 800f9e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f9e6:	2a39      	cmp	r2, #57	; 0x39
 800f9e8:	d06c      	beq.n	800fac4 <_dtoa_r+0xba4>
 800f9ea:	3201      	adds	r2, #1
 800f9ec:	701a      	strb	r2, [r3, #0]
 800f9ee:	e747      	b.n	800f880 <_dtoa_r+0x960>
 800f9f0:	2a00      	cmp	r2, #0
 800f9f2:	dd07      	ble.n	800fa04 <_dtoa_r+0xae4>
 800f9f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f9f8:	d0ed      	beq.n	800f9d6 <_dtoa_r+0xab6>
 800f9fa:	9a01      	ldr	r2, [sp, #4]
 800f9fc:	f109 0301 	add.w	r3, r9, #1
 800fa00:	7013      	strb	r3, [r2, #0]
 800fa02:	e73d      	b.n	800f880 <_dtoa_r+0x960>
 800fa04:	9b04      	ldr	r3, [sp, #16]
 800fa06:	9a08      	ldr	r2, [sp, #32]
 800fa08:	f803 9c01 	strb.w	r9, [r3, #-1]
 800fa0c:	4293      	cmp	r3, r2
 800fa0e:	d043      	beq.n	800fa98 <_dtoa_r+0xb78>
 800fa10:	4651      	mov	r1, sl
 800fa12:	2300      	movs	r3, #0
 800fa14:	220a      	movs	r2, #10
 800fa16:	4620      	mov	r0, r4
 800fa18:	f000 f9d6 	bl	800fdc8 <__multadd>
 800fa1c:	45b8      	cmp	r8, r7
 800fa1e:	4682      	mov	sl, r0
 800fa20:	f04f 0300 	mov.w	r3, #0
 800fa24:	f04f 020a 	mov.w	r2, #10
 800fa28:	4641      	mov	r1, r8
 800fa2a:	4620      	mov	r0, r4
 800fa2c:	d107      	bne.n	800fa3e <_dtoa_r+0xb1e>
 800fa2e:	f000 f9cb 	bl	800fdc8 <__multadd>
 800fa32:	4680      	mov	r8, r0
 800fa34:	4607      	mov	r7, r0
 800fa36:	9b04      	ldr	r3, [sp, #16]
 800fa38:	3301      	adds	r3, #1
 800fa3a:	9304      	str	r3, [sp, #16]
 800fa3c:	e775      	b.n	800f92a <_dtoa_r+0xa0a>
 800fa3e:	f000 f9c3 	bl	800fdc8 <__multadd>
 800fa42:	4639      	mov	r1, r7
 800fa44:	4680      	mov	r8, r0
 800fa46:	2300      	movs	r3, #0
 800fa48:	220a      	movs	r2, #10
 800fa4a:	4620      	mov	r0, r4
 800fa4c:	f000 f9bc 	bl	800fdc8 <__multadd>
 800fa50:	4607      	mov	r7, r0
 800fa52:	e7f0      	b.n	800fa36 <_dtoa_r+0xb16>
 800fa54:	9b04      	ldr	r3, [sp, #16]
 800fa56:	9301      	str	r3, [sp, #4]
 800fa58:	9d00      	ldr	r5, [sp, #0]
 800fa5a:	4631      	mov	r1, r6
 800fa5c:	4650      	mov	r0, sl
 800fa5e:	f7ff f9d5 	bl	800ee0c <quorem>
 800fa62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fa66:	9b00      	ldr	r3, [sp, #0]
 800fa68:	f805 9b01 	strb.w	r9, [r5], #1
 800fa6c:	1aea      	subs	r2, r5, r3
 800fa6e:	9b01      	ldr	r3, [sp, #4]
 800fa70:	4293      	cmp	r3, r2
 800fa72:	dd07      	ble.n	800fa84 <_dtoa_r+0xb64>
 800fa74:	4651      	mov	r1, sl
 800fa76:	2300      	movs	r3, #0
 800fa78:	220a      	movs	r2, #10
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	f000 f9a4 	bl	800fdc8 <__multadd>
 800fa80:	4682      	mov	sl, r0
 800fa82:	e7ea      	b.n	800fa5a <_dtoa_r+0xb3a>
 800fa84:	9b01      	ldr	r3, [sp, #4]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	bfc8      	it	gt
 800fa8a:	461d      	movgt	r5, r3
 800fa8c:	9b00      	ldr	r3, [sp, #0]
 800fa8e:	bfd8      	it	le
 800fa90:	2501      	movle	r5, #1
 800fa92:	441d      	add	r5, r3
 800fa94:	f04f 0800 	mov.w	r8, #0
 800fa98:	4651      	mov	r1, sl
 800fa9a:	2201      	movs	r2, #1
 800fa9c:	4620      	mov	r0, r4
 800fa9e:	f000 fb41 	bl	8010124 <__lshift>
 800faa2:	4631      	mov	r1, r6
 800faa4:	4682      	mov	sl, r0
 800faa6:	f000 fba9 	bl	80101fc <__mcmp>
 800faaa:	2800      	cmp	r0, #0
 800faac:	dc96      	bgt.n	800f9dc <_dtoa_r+0xabc>
 800faae:	d102      	bne.n	800fab6 <_dtoa_r+0xb96>
 800fab0:	f019 0f01 	tst.w	r9, #1
 800fab4:	d192      	bne.n	800f9dc <_dtoa_r+0xabc>
 800fab6:	462b      	mov	r3, r5
 800fab8:	461d      	mov	r5, r3
 800faba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fabe:	2a30      	cmp	r2, #48	; 0x30
 800fac0:	d0fa      	beq.n	800fab8 <_dtoa_r+0xb98>
 800fac2:	e6dd      	b.n	800f880 <_dtoa_r+0x960>
 800fac4:	9a00      	ldr	r2, [sp, #0]
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d189      	bne.n	800f9de <_dtoa_r+0xabe>
 800faca:	f10b 0b01 	add.w	fp, fp, #1
 800face:	2331      	movs	r3, #49	; 0x31
 800fad0:	e796      	b.n	800fa00 <_dtoa_r+0xae0>
 800fad2:	4b0a      	ldr	r3, [pc, #40]	; (800fafc <_dtoa_r+0xbdc>)
 800fad4:	f7ff ba99 	b.w	800f00a <_dtoa_r+0xea>
 800fad8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fada:	2b00      	cmp	r3, #0
 800fadc:	f47f aa6d 	bne.w	800efba <_dtoa_r+0x9a>
 800fae0:	4b07      	ldr	r3, [pc, #28]	; (800fb00 <_dtoa_r+0xbe0>)
 800fae2:	f7ff ba92 	b.w	800f00a <_dtoa_r+0xea>
 800fae6:	9b01      	ldr	r3, [sp, #4]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	dcb5      	bgt.n	800fa58 <_dtoa_r+0xb38>
 800faec:	9b07      	ldr	r3, [sp, #28]
 800faee:	2b02      	cmp	r3, #2
 800faf0:	f73f aeb1 	bgt.w	800f856 <_dtoa_r+0x936>
 800faf4:	e7b0      	b.n	800fa58 <_dtoa_r+0xb38>
 800faf6:	bf00      	nop
 800faf8:	080121b7 	.word	0x080121b7
 800fafc:	08012081 	.word	0x08012081
 800fb00:	08012152 	.word	0x08012152

0800fb04 <_free_r>:
 800fb04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb06:	2900      	cmp	r1, #0
 800fb08:	d044      	beq.n	800fb94 <_free_r+0x90>
 800fb0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb0e:	9001      	str	r0, [sp, #4]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	f1a1 0404 	sub.w	r4, r1, #4
 800fb16:	bfb8      	it	lt
 800fb18:	18e4      	addlt	r4, r4, r3
 800fb1a:	f000 f8e7 	bl	800fcec <__malloc_lock>
 800fb1e:	4a1e      	ldr	r2, [pc, #120]	; (800fb98 <_free_r+0x94>)
 800fb20:	9801      	ldr	r0, [sp, #4]
 800fb22:	6813      	ldr	r3, [r2, #0]
 800fb24:	b933      	cbnz	r3, 800fb34 <_free_r+0x30>
 800fb26:	6063      	str	r3, [r4, #4]
 800fb28:	6014      	str	r4, [r2, #0]
 800fb2a:	b003      	add	sp, #12
 800fb2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb30:	f000 b8e2 	b.w	800fcf8 <__malloc_unlock>
 800fb34:	42a3      	cmp	r3, r4
 800fb36:	d908      	bls.n	800fb4a <_free_r+0x46>
 800fb38:	6825      	ldr	r5, [r4, #0]
 800fb3a:	1961      	adds	r1, r4, r5
 800fb3c:	428b      	cmp	r3, r1
 800fb3e:	bf01      	itttt	eq
 800fb40:	6819      	ldreq	r1, [r3, #0]
 800fb42:	685b      	ldreq	r3, [r3, #4]
 800fb44:	1949      	addeq	r1, r1, r5
 800fb46:	6021      	streq	r1, [r4, #0]
 800fb48:	e7ed      	b.n	800fb26 <_free_r+0x22>
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	b10b      	cbz	r3, 800fb54 <_free_r+0x50>
 800fb50:	42a3      	cmp	r3, r4
 800fb52:	d9fa      	bls.n	800fb4a <_free_r+0x46>
 800fb54:	6811      	ldr	r1, [r2, #0]
 800fb56:	1855      	adds	r5, r2, r1
 800fb58:	42a5      	cmp	r5, r4
 800fb5a:	d10b      	bne.n	800fb74 <_free_r+0x70>
 800fb5c:	6824      	ldr	r4, [r4, #0]
 800fb5e:	4421      	add	r1, r4
 800fb60:	1854      	adds	r4, r2, r1
 800fb62:	42a3      	cmp	r3, r4
 800fb64:	6011      	str	r1, [r2, #0]
 800fb66:	d1e0      	bne.n	800fb2a <_free_r+0x26>
 800fb68:	681c      	ldr	r4, [r3, #0]
 800fb6a:	685b      	ldr	r3, [r3, #4]
 800fb6c:	6053      	str	r3, [r2, #4]
 800fb6e:	440c      	add	r4, r1
 800fb70:	6014      	str	r4, [r2, #0]
 800fb72:	e7da      	b.n	800fb2a <_free_r+0x26>
 800fb74:	d902      	bls.n	800fb7c <_free_r+0x78>
 800fb76:	230c      	movs	r3, #12
 800fb78:	6003      	str	r3, [r0, #0]
 800fb7a:	e7d6      	b.n	800fb2a <_free_r+0x26>
 800fb7c:	6825      	ldr	r5, [r4, #0]
 800fb7e:	1961      	adds	r1, r4, r5
 800fb80:	428b      	cmp	r3, r1
 800fb82:	bf04      	itt	eq
 800fb84:	6819      	ldreq	r1, [r3, #0]
 800fb86:	685b      	ldreq	r3, [r3, #4]
 800fb88:	6063      	str	r3, [r4, #4]
 800fb8a:	bf04      	itt	eq
 800fb8c:	1949      	addeq	r1, r1, r5
 800fb8e:	6021      	streq	r1, [r4, #0]
 800fb90:	6054      	str	r4, [r2, #4]
 800fb92:	e7ca      	b.n	800fb2a <_free_r+0x26>
 800fb94:	b003      	add	sp, #12
 800fb96:	bd30      	pop	{r4, r5, pc}
 800fb98:	200052b8 	.word	0x200052b8

0800fb9c <malloc>:
 800fb9c:	4b02      	ldr	r3, [pc, #8]	; (800fba8 <malloc+0xc>)
 800fb9e:	4601      	mov	r1, r0
 800fba0:	6818      	ldr	r0, [r3, #0]
 800fba2:	f000 b823 	b.w	800fbec <_malloc_r>
 800fba6:	bf00      	nop
 800fba8:	200001e8 	.word	0x200001e8

0800fbac <sbrk_aligned>:
 800fbac:	b570      	push	{r4, r5, r6, lr}
 800fbae:	4e0e      	ldr	r6, [pc, #56]	; (800fbe8 <sbrk_aligned+0x3c>)
 800fbb0:	460c      	mov	r4, r1
 800fbb2:	6831      	ldr	r1, [r6, #0]
 800fbb4:	4605      	mov	r5, r0
 800fbb6:	b911      	cbnz	r1, 800fbbe <sbrk_aligned+0x12>
 800fbb8:	f000 fe52 	bl	8010860 <_sbrk_r>
 800fbbc:	6030      	str	r0, [r6, #0]
 800fbbe:	4621      	mov	r1, r4
 800fbc0:	4628      	mov	r0, r5
 800fbc2:	f000 fe4d 	bl	8010860 <_sbrk_r>
 800fbc6:	1c43      	adds	r3, r0, #1
 800fbc8:	d00a      	beq.n	800fbe0 <sbrk_aligned+0x34>
 800fbca:	1cc4      	adds	r4, r0, #3
 800fbcc:	f024 0403 	bic.w	r4, r4, #3
 800fbd0:	42a0      	cmp	r0, r4
 800fbd2:	d007      	beq.n	800fbe4 <sbrk_aligned+0x38>
 800fbd4:	1a21      	subs	r1, r4, r0
 800fbd6:	4628      	mov	r0, r5
 800fbd8:	f000 fe42 	bl	8010860 <_sbrk_r>
 800fbdc:	3001      	adds	r0, #1
 800fbde:	d101      	bne.n	800fbe4 <sbrk_aligned+0x38>
 800fbe0:	f04f 34ff 	mov.w	r4, #4294967295
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	bd70      	pop	{r4, r5, r6, pc}
 800fbe8:	200052bc 	.word	0x200052bc

0800fbec <_malloc_r>:
 800fbec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbf0:	1ccd      	adds	r5, r1, #3
 800fbf2:	f025 0503 	bic.w	r5, r5, #3
 800fbf6:	3508      	adds	r5, #8
 800fbf8:	2d0c      	cmp	r5, #12
 800fbfa:	bf38      	it	cc
 800fbfc:	250c      	movcc	r5, #12
 800fbfe:	2d00      	cmp	r5, #0
 800fc00:	4607      	mov	r7, r0
 800fc02:	db01      	blt.n	800fc08 <_malloc_r+0x1c>
 800fc04:	42a9      	cmp	r1, r5
 800fc06:	d905      	bls.n	800fc14 <_malloc_r+0x28>
 800fc08:	230c      	movs	r3, #12
 800fc0a:	603b      	str	r3, [r7, #0]
 800fc0c:	2600      	movs	r6, #0
 800fc0e:	4630      	mov	r0, r6
 800fc10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fce8 <_malloc_r+0xfc>
 800fc18:	f000 f868 	bl	800fcec <__malloc_lock>
 800fc1c:	f8d8 3000 	ldr.w	r3, [r8]
 800fc20:	461c      	mov	r4, r3
 800fc22:	bb5c      	cbnz	r4, 800fc7c <_malloc_r+0x90>
 800fc24:	4629      	mov	r1, r5
 800fc26:	4638      	mov	r0, r7
 800fc28:	f7ff ffc0 	bl	800fbac <sbrk_aligned>
 800fc2c:	1c43      	adds	r3, r0, #1
 800fc2e:	4604      	mov	r4, r0
 800fc30:	d155      	bne.n	800fcde <_malloc_r+0xf2>
 800fc32:	f8d8 4000 	ldr.w	r4, [r8]
 800fc36:	4626      	mov	r6, r4
 800fc38:	2e00      	cmp	r6, #0
 800fc3a:	d145      	bne.n	800fcc8 <_malloc_r+0xdc>
 800fc3c:	2c00      	cmp	r4, #0
 800fc3e:	d048      	beq.n	800fcd2 <_malloc_r+0xe6>
 800fc40:	6823      	ldr	r3, [r4, #0]
 800fc42:	4631      	mov	r1, r6
 800fc44:	4638      	mov	r0, r7
 800fc46:	eb04 0903 	add.w	r9, r4, r3
 800fc4a:	f000 fe09 	bl	8010860 <_sbrk_r>
 800fc4e:	4581      	cmp	r9, r0
 800fc50:	d13f      	bne.n	800fcd2 <_malloc_r+0xe6>
 800fc52:	6821      	ldr	r1, [r4, #0]
 800fc54:	1a6d      	subs	r5, r5, r1
 800fc56:	4629      	mov	r1, r5
 800fc58:	4638      	mov	r0, r7
 800fc5a:	f7ff ffa7 	bl	800fbac <sbrk_aligned>
 800fc5e:	3001      	adds	r0, #1
 800fc60:	d037      	beq.n	800fcd2 <_malloc_r+0xe6>
 800fc62:	6823      	ldr	r3, [r4, #0]
 800fc64:	442b      	add	r3, r5
 800fc66:	6023      	str	r3, [r4, #0]
 800fc68:	f8d8 3000 	ldr.w	r3, [r8]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d038      	beq.n	800fce2 <_malloc_r+0xf6>
 800fc70:	685a      	ldr	r2, [r3, #4]
 800fc72:	42a2      	cmp	r2, r4
 800fc74:	d12b      	bne.n	800fcce <_malloc_r+0xe2>
 800fc76:	2200      	movs	r2, #0
 800fc78:	605a      	str	r2, [r3, #4]
 800fc7a:	e00f      	b.n	800fc9c <_malloc_r+0xb0>
 800fc7c:	6822      	ldr	r2, [r4, #0]
 800fc7e:	1b52      	subs	r2, r2, r5
 800fc80:	d41f      	bmi.n	800fcc2 <_malloc_r+0xd6>
 800fc82:	2a0b      	cmp	r2, #11
 800fc84:	d917      	bls.n	800fcb6 <_malloc_r+0xca>
 800fc86:	1961      	adds	r1, r4, r5
 800fc88:	42a3      	cmp	r3, r4
 800fc8a:	6025      	str	r5, [r4, #0]
 800fc8c:	bf18      	it	ne
 800fc8e:	6059      	strne	r1, [r3, #4]
 800fc90:	6863      	ldr	r3, [r4, #4]
 800fc92:	bf08      	it	eq
 800fc94:	f8c8 1000 	streq.w	r1, [r8]
 800fc98:	5162      	str	r2, [r4, r5]
 800fc9a:	604b      	str	r3, [r1, #4]
 800fc9c:	4638      	mov	r0, r7
 800fc9e:	f104 060b 	add.w	r6, r4, #11
 800fca2:	f000 f829 	bl	800fcf8 <__malloc_unlock>
 800fca6:	f026 0607 	bic.w	r6, r6, #7
 800fcaa:	1d23      	adds	r3, r4, #4
 800fcac:	1af2      	subs	r2, r6, r3
 800fcae:	d0ae      	beq.n	800fc0e <_malloc_r+0x22>
 800fcb0:	1b9b      	subs	r3, r3, r6
 800fcb2:	50a3      	str	r3, [r4, r2]
 800fcb4:	e7ab      	b.n	800fc0e <_malloc_r+0x22>
 800fcb6:	42a3      	cmp	r3, r4
 800fcb8:	6862      	ldr	r2, [r4, #4]
 800fcba:	d1dd      	bne.n	800fc78 <_malloc_r+0x8c>
 800fcbc:	f8c8 2000 	str.w	r2, [r8]
 800fcc0:	e7ec      	b.n	800fc9c <_malloc_r+0xb0>
 800fcc2:	4623      	mov	r3, r4
 800fcc4:	6864      	ldr	r4, [r4, #4]
 800fcc6:	e7ac      	b.n	800fc22 <_malloc_r+0x36>
 800fcc8:	4634      	mov	r4, r6
 800fcca:	6876      	ldr	r6, [r6, #4]
 800fccc:	e7b4      	b.n	800fc38 <_malloc_r+0x4c>
 800fcce:	4613      	mov	r3, r2
 800fcd0:	e7cc      	b.n	800fc6c <_malloc_r+0x80>
 800fcd2:	230c      	movs	r3, #12
 800fcd4:	603b      	str	r3, [r7, #0]
 800fcd6:	4638      	mov	r0, r7
 800fcd8:	f000 f80e 	bl	800fcf8 <__malloc_unlock>
 800fcdc:	e797      	b.n	800fc0e <_malloc_r+0x22>
 800fcde:	6025      	str	r5, [r4, #0]
 800fce0:	e7dc      	b.n	800fc9c <_malloc_r+0xb0>
 800fce2:	605b      	str	r3, [r3, #4]
 800fce4:	deff      	udf	#255	; 0xff
 800fce6:	bf00      	nop
 800fce8:	200052b8 	.word	0x200052b8

0800fcec <__malloc_lock>:
 800fcec:	4801      	ldr	r0, [pc, #4]	; (800fcf4 <__malloc_lock+0x8>)
 800fcee:	f7ff b85e 	b.w	800edae <__retarget_lock_acquire_recursive>
 800fcf2:	bf00      	nop
 800fcf4:	200052b4 	.word	0x200052b4

0800fcf8 <__malloc_unlock>:
 800fcf8:	4801      	ldr	r0, [pc, #4]	; (800fd00 <__malloc_unlock+0x8>)
 800fcfa:	f7ff b859 	b.w	800edb0 <__retarget_lock_release_recursive>
 800fcfe:	bf00      	nop
 800fd00:	200052b4 	.word	0x200052b4

0800fd04 <_Balloc>:
 800fd04:	b570      	push	{r4, r5, r6, lr}
 800fd06:	69c6      	ldr	r6, [r0, #28]
 800fd08:	4604      	mov	r4, r0
 800fd0a:	460d      	mov	r5, r1
 800fd0c:	b976      	cbnz	r6, 800fd2c <_Balloc+0x28>
 800fd0e:	2010      	movs	r0, #16
 800fd10:	f7ff ff44 	bl	800fb9c <malloc>
 800fd14:	4602      	mov	r2, r0
 800fd16:	61e0      	str	r0, [r4, #28]
 800fd18:	b920      	cbnz	r0, 800fd24 <_Balloc+0x20>
 800fd1a:	4b18      	ldr	r3, [pc, #96]	; (800fd7c <_Balloc+0x78>)
 800fd1c:	4818      	ldr	r0, [pc, #96]	; (800fd80 <_Balloc+0x7c>)
 800fd1e:	216b      	movs	r1, #107	; 0x6b
 800fd20:	f7ff f856 	bl	800edd0 <__assert_func>
 800fd24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd28:	6006      	str	r6, [r0, #0]
 800fd2a:	60c6      	str	r6, [r0, #12]
 800fd2c:	69e6      	ldr	r6, [r4, #28]
 800fd2e:	68f3      	ldr	r3, [r6, #12]
 800fd30:	b183      	cbz	r3, 800fd54 <_Balloc+0x50>
 800fd32:	69e3      	ldr	r3, [r4, #28]
 800fd34:	68db      	ldr	r3, [r3, #12]
 800fd36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fd3a:	b9b8      	cbnz	r0, 800fd6c <_Balloc+0x68>
 800fd3c:	2101      	movs	r1, #1
 800fd3e:	fa01 f605 	lsl.w	r6, r1, r5
 800fd42:	1d72      	adds	r2, r6, #5
 800fd44:	0092      	lsls	r2, r2, #2
 800fd46:	4620      	mov	r0, r4
 800fd48:	f000 fda1 	bl	801088e <_calloc_r>
 800fd4c:	b160      	cbz	r0, 800fd68 <_Balloc+0x64>
 800fd4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fd52:	e00e      	b.n	800fd72 <_Balloc+0x6e>
 800fd54:	2221      	movs	r2, #33	; 0x21
 800fd56:	2104      	movs	r1, #4
 800fd58:	4620      	mov	r0, r4
 800fd5a:	f000 fd98 	bl	801088e <_calloc_r>
 800fd5e:	69e3      	ldr	r3, [r4, #28]
 800fd60:	60f0      	str	r0, [r6, #12]
 800fd62:	68db      	ldr	r3, [r3, #12]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d1e4      	bne.n	800fd32 <_Balloc+0x2e>
 800fd68:	2000      	movs	r0, #0
 800fd6a:	bd70      	pop	{r4, r5, r6, pc}
 800fd6c:	6802      	ldr	r2, [r0, #0]
 800fd6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fd72:	2300      	movs	r3, #0
 800fd74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fd78:	e7f7      	b.n	800fd6a <_Balloc+0x66>
 800fd7a:	bf00      	nop
 800fd7c:	080120a5 	.word	0x080120a5
 800fd80:	080121c8 	.word	0x080121c8

0800fd84 <_Bfree>:
 800fd84:	b570      	push	{r4, r5, r6, lr}
 800fd86:	69c6      	ldr	r6, [r0, #28]
 800fd88:	4605      	mov	r5, r0
 800fd8a:	460c      	mov	r4, r1
 800fd8c:	b976      	cbnz	r6, 800fdac <_Bfree+0x28>
 800fd8e:	2010      	movs	r0, #16
 800fd90:	f7ff ff04 	bl	800fb9c <malloc>
 800fd94:	4602      	mov	r2, r0
 800fd96:	61e8      	str	r0, [r5, #28]
 800fd98:	b920      	cbnz	r0, 800fda4 <_Bfree+0x20>
 800fd9a:	4b09      	ldr	r3, [pc, #36]	; (800fdc0 <_Bfree+0x3c>)
 800fd9c:	4809      	ldr	r0, [pc, #36]	; (800fdc4 <_Bfree+0x40>)
 800fd9e:	218f      	movs	r1, #143	; 0x8f
 800fda0:	f7ff f816 	bl	800edd0 <__assert_func>
 800fda4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fda8:	6006      	str	r6, [r0, #0]
 800fdaa:	60c6      	str	r6, [r0, #12]
 800fdac:	b13c      	cbz	r4, 800fdbe <_Bfree+0x3a>
 800fdae:	69eb      	ldr	r3, [r5, #28]
 800fdb0:	6862      	ldr	r2, [r4, #4]
 800fdb2:	68db      	ldr	r3, [r3, #12]
 800fdb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fdb8:	6021      	str	r1, [r4, #0]
 800fdba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fdbe:	bd70      	pop	{r4, r5, r6, pc}
 800fdc0:	080120a5 	.word	0x080120a5
 800fdc4:	080121c8 	.word	0x080121c8

0800fdc8 <__multadd>:
 800fdc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdcc:	690d      	ldr	r5, [r1, #16]
 800fdce:	4607      	mov	r7, r0
 800fdd0:	460c      	mov	r4, r1
 800fdd2:	461e      	mov	r6, r3
 800fdd4:	f101 0c14 	add.w	ip, r1, #20
 800fdd8:	2000      	movs	r0, #0
 800fdda:	f8dc 3000 	ldr.w	r3, [ip]
 800fdde:	b299      	uxth	r1, r3
 800fde0:	fb02 6101 	mla	r1, r2, r1, r6
 800fde4:	0c1e      	lsrs	r6, r3, #16
 800fde6:	0c0b      	lsrs	r3, r1, #16
 800fde8:	fb02 3306 	mla	r3, r2, r6, r3
 800fdec:	b289      	uxth	r1, r1
 800fdee:	3001      	adds	r0, #1
 800fdf0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fdf4:	4285      	cmp	r5, r0
 800fdf6:	f84c 1b04 	str.w	r1, [ip], #4
 800fdfa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fdfe:	dcec      	bgt.n	800fdda <__multadd+0x12>
 800fe00:	b30e      	cbz	r6, 800fe46 <__multadd+0x7e>
 800fe02:	68a3      	ldr	r3, [r4, #8]
 800fe04:	42ab      	cmp	r3, r5
 800fe06:	dc19      	bgt.n	800fe3c <__multadd+0x74>
 800fe08:	6861      	ldr	r1, [r4, #4]
 800fe0a:	4638      	mov	r0, r7
 800fe0c:	3101      	adds	r1, #1
 800fe0e:	f7ff ff79 	bl	800fd04 <_Balloc>
 800fe12:	4680      	mov	r8, r0
 800fe14:	b928      	cbnz	r0, 800fe22 <__multadd+0x5a>
 800fe16:	4602      	mov	r2, r0
 800fe18:	4b0c      	ldr	r3, [pc, #48]	; (800fe4c <__multadd+0x84>)
 800fe1a:	480d      	ldr	r0, [pc, #52]	; (800fe50 <__multadd+0x88>)
 800fe1c:	21ba      	movs	r1, #186	; 0xba
 800fe1e:	f7fe ffd7 	bl	800edd0 <__assert_func>
 800fe22:	6922      	ldr	r2, [r4, #16]
 800fe24:	3202      	adds	r2, #2
 800fe26:	f104 010c 	add.w	r1, r4, #12
 800fe2a:	0092      	lsls	r2, r2, #2
 800fe2c:	300c      	adds	r0, #12
 800fe2e:	f7fe ffc0 	bl	800edb2 <memcpy>
 800fe32:	4621      	mov	r1, r4
 800fe34:	4638      	mov	r0, r7
 800fe36:	f7ff ffa5 	bl	800fd84 <_Bfree>
 800fe3a:	4644      	mov	r4, r8
 800fe3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fe40:	3501      	adds	r5, #1
 800fe42:	615e      	str	r6, [r3, #20]
 800fe44:	6125      	str	r5, [r4, #16]
 800fe46:	4620      	mov	r0, r4
 800fe48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe4c:	080121b7 	.word	0x080121b7
 800fe50:	080121c8 	.word	0x080121c8

0800fe54 <__hi0bits>:
 800fe54:	0c03      	lsrs	r3, r0, #16
 800fe56:	041b      	lsls	r3, r3, #16
 800fe58:	b9d3      	cbnz	r3, 800fe90 <__hi0bits+0x3c>
 800fe5a:	0400      	lsls	r0, r0, #16
 800fe5c:	2310      	movs	r3, #16
 800fe5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fe62:	bf04      	itt	eq
 800fe64:	0200      	lsleq	r0, r0, #8
 800fe66:	3308      	addeq	r3, #8
 800fe68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fe6c:	bf04      	itt	eq
 800fe6e:	0100      	lsleq	r0, r0, #4
 800fe70:	3304      	addeq	r3, #4
 800fe72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fe76:	bf04      	itt	eq
 800fe78:	0080      	lsleq	r0, r0, #2
 800fe7a:	3302      	addeq	r3, #2
 800fe7c:	2800      	cmp	r0, #0
 800fe7e:	db05      	blt.n	800fe8c <__hi0bits+0x38>
 800fe80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fe84:	f103 0301 	add.w	r3, r3, #1
 800fe88:	bf08      	it	eq
 800fe8a:	2320      	moveq	r3, #32
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	4770      	bx	lr
 800fe90:	2300      	movs	r3, #0
 800fe92:	e7e4      	b.n	800fe5e <__hi0bits+0xa>

0800fe94 <__lo0bits>:
 800fe94:	6803      	ldr	r3, [r0, #0]
 800fe96:	f013 0207 	ands.w	r2, r3, #7
 800fe9a:	d00c      	beq.n	800feb6 <__lo0bits+0x22>
 800fe9c:	07d9      	lsls	r1, r3, #31
 800fe9e:	d422      	bmi.n	800fee6 <__lo0bits+0x52>
 800fea0:	079a      	lsls	r2, r3, #30
 800fea2:	bf49      	itett	mi
 800fea4:	085b      	lsrmi	r3, r3, #1
 800fea6:	089b      	lsrpl	r3, r3, #2
 800fea8:	6003      	strmi	r3, [r0, #0]
 800feaa:	2201      	movmi	r2, #1
 800feac:	bf5c      	itt	pl
 800feae:	6003      	strpl	r3, [r0, #0]
 800feb0:	2202      	movpl	r2, #2
 800feb2:	4610      	mov	r0, r2
 800feb4:	4770      	bx	lr
 800feb6:	b299      	uxth	r1, r3
 800feb8:	b909      	cbnz	r1, 800febe <__lo0bits+0x2a>
 800feba:	0c1b      	lsrs	r3, r3, #16
 800febc:	2210      	movs	r2, #16
 800febe:	b2d9      	uxtb	r1, r3
 800fec0:	b909      	cbnz	r1, 800fec6 <__lo0bits+0x32>
 800fec2:	3208      	adds	r2, #8
 800fec4:	0a1b      	lsrs	r3, r3, #8
 800fec6:	0719      	lsls	r1, r3, #28
 800fec8:	bf04      	itt	eq
 800feca:	091b      	lsreq	r3, r3, #4
 800fecc:	3204      	addeq	r2, #4
 800fece:	0799      	lsls	r1, r3, #30
 800fed0:	bf04      	itt	eq
 800fed2:	089b      	lsreq	r3, r3, #2
 800fed4:	3202      	addeq	r2, #2
 800fed6:	07d9      	lsls	r1, r3, #31
 800fed8:	d403      	bmi.n	800fee2 <__lo0bits+0x4e>
 800feda:	085b      	lsrs	r3, r3, #1
 800fedc:	f102 0201 	add.w	r2, r2, #1
 800fee0:	d003      	beq.n	800feea <__lo0bits+0x56>
 800fee2:	6003      	str	r3, [r0, #0]
 800fee4:	e7e5      	b.n	800feb2 <__lo0bits+0x1e>
 800fee6:	2200      	movs	r2, #0
 800fee8:	e7e3      	b.n	800feb2 <__lo0bits+0x1e>
 800feea:	2220      	movs	r2, #32
 800feec:	e7e1      	b.n	800feb2 <__lo0bits+0x1e>
	...

0800fef0 <__i2b>:
 800fef0:	b510      	push	{r4, lr}
 800fef2:	460c      	mov	r4, r1
 800fef4:	2101      	movs	r1, #1
 800fef6:	f7ff ff05 	bl	800fd04 <_Balloc>
 800fefa:	4602      	mov	r2, r0
 800fefc:	b928      	cbnz	r0, 800ff0a <__i2b+0x1a>
 800fefe:	4b05      	ldr	r3, [pc, #20]	; (800ff14 <__i2b+0x24>)
 800ff00:	4805      	ldr	r0, [pc, #20]	; (800ff18 <__i2b+0x28>)
 800ff02:	f240 1145 	movw	r1, #325	; 0x145
 800ff06:	f7fe ff63 	bl	800edd0 <__assert_func>
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	6144      	str	r4, [r0, #20]
 800ff0e:	6103      	str	r3, [r0, #16]
 800ff10:	bd10      	pop	{r4, pc}
 800ff12:	bf00      	nop
 800ff14:	080121b7 	.word	0x080121b7
 800ff18:	080121c8 	.word	0x080121c8

0800ff1c <__multiply>:
 800ff1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff20:	4691      	mov	r9, r2
 800ff22:	690a      	ldr	r2, [r1, #16]
 800ff24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ff28:	429a      	cmp	r2, r3
 800ff2a:	bfb8      	it	lt
 800ff2c:	460b      	movlt	r3, r1
 800ff2e:	460c      	mov	r4, r1
 800ff30:	bfbc      	itt	lt
 800ff32:	464c      	movlt	r4, r9
 800ff34:	4699      	movlt	r9, r3
 800ff36:	6927      	ldr	r7, [r4, #16]
 800ff38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ff3c:	68a3      	ldr	r3, [r4, #8]
 800ff3e:	6861      	ldr	r1, [r4, #4]
 800ff40:	eb07 060a 	add.w	r6, r7, sl
 800ff44:	42b3      	cmp	r3, r6
 800ff46:	b085      	sub	sp, #20
 800ff48:	bfb8      	it	lt
 800ff4a:	3101      	addlt	r1, #1
 800ff4c:	f7ff feda 	bl	800fd04 <_Balloc>
 800ff50:	b930      	cbnz	r0, 800ff60 <__multiply+0x44>
 800ff52:	4602      	mov	r2, r0
 800ff54:	4b44      	ldr	r3, [pc, #272]	; (8010068 <__multiply+0x14c>)
 800ff56:	4845      	ldr	r0, [pc, #276]	; (801006c <__multiply+0x150>)
 800ff58:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ff5c:	f7fe ff38 	bl	800edd0 <__assert_func>
 800ff60:	f100 0514 	add.w	r5, r0, #20
 800ff64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ff68:	462b      	mov	r3, r5
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	4543      	cmp	r3, r8
 800ff6e:	d321      	bcc.n	800ffb4 <__multiply+0x98>
 800ff70:	f104 0314 	add.w	r3, r4, #20
 800ff74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ff78:	f109 0314 	add.w	r3, r9, #20
 800ff7c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ff80:	9202      	str	r2, [sp, #8]
 800ff82:	1b3a      	subs	r2, r7, r4
 800ff84:	3a15      	subs	r2, #21
 800ff86:	f022 0203 	bic.w	r2, r2, #3
 800ff8a:	3204      	adds	r2, #4
 800ff8c:	f104 0115 	add.w	r1, r4, #21
 800ff90:	428f      	cmp	r7, r1
 800ff92:	bf38      	it	cc
 800ff94:	2204      	movcc	r2, #4
 800ff96:	9201      	str	r2, [sp, #4]
 800ff98:	9a02      	ldr	r2, [sp, #8]
 800ff9a:	9303      	str	r3, [sp, #12]
 800ff9c:	429a      	cmp	r2, r3
 800ff9e:	d80c      	bhi.n	800ffba <__multiply+0x9e>
 800ffa0:	2e00      	cmp	r6, #0
 800ffa2:	dd03      	ble.n	800ffac <__multiply+0x90>
 800ffa4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d05b      	beq.n	8010064 <__multiply+0x148>
 800ffac:	6106      	str	r6, [r0, #16]
 800ffae:	b005      	add	sp, #20
 800ffb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffb4:	f843 2b04 	str.w	r2, [r3], #4
 800ffb8:	e7d8      	b.n	800ff6c <__multiply+0x50>
 800ffba:	f8b3 a000 	ldrh.w	sl, [r3]
 800ffbe:	f1ba 0f00 	cmp.w	sl, #0
 800ffc2:	d024      	beq.n	801000e <__multiply+0xf2>
 800ffc4:	f104 0e14 	add.w	lr, r4, #20
 800ffc8:	46a9      	mov	r9, r5
 800ffca:	f04f 0c00 	mov.w	ip, #0
 800ffce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ffd2:	f8d9 1000 	ldr.w	r1, [r9]
 800ffd6:	fa1f fb82 	uxth.w	fp, r2
 800ffda:	b289      	uxth	r1, r1
 800ffdc:	fb0a 110b 	mla	r1, sl, fp, r1
 800ffe0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ffe4:	f8d9 2000 	ldr.w	r2, [r9]
 800ffe8:	4461      	add	r1, ip
 800ffea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ffee:	fb0a c20b 	mla	r2, sl, fp, ip
 800fff2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fff6:	b289      	uxth	r1, r1
 800fff8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fffc:	4577      	cmp	r7, lr
 800fffe:	f849 1b04 	str.w	r1, [r9], #4
 8010002:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010006:	d8e2      	bhi.n	800ffce <__multiply+0xb2>
 8010008:	9a01      	ldr	r2, [sp, #4]
 801000a:	f845 c002 	str.w	ip, [r5, r2]
 801000e:	9a03      	ldr	r2, [sp, #12]
 8010010:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010014:	3304      	adds	r3, #4
 8010016:	f1b9 0f00 	cmp.w	r9, #0
 801001a:	d021      	beq.n	8010060 <__multiply+0x144>
 801001c:	6829      	ldr	r1, [r5, #0]
 801001e:	f104 0c14 	add.w	ip, r4, #20
 8010022:	46ae      	mov	lr, r5
 8010024:	f04f 0a00 	mov.w	sl, #0
 8010028:	f8bc b000 	ldrh.w	fp, [ip]
 801002c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010030:	fb09 220b 	mla	r2, r9, fp, r2
 8010034:	4452      	add	r2, sl
 8010036:	b289      	uxth	r1, r1
 8010038:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801003c:	f84e 1b04 	str.w	r1, [lr], #4
 8010040:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010044:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010048:	f8be 1000 	ldrh.w	r1, [lr]
 801004c:	fb09 110a 	mla	r1, r9, sl, r1
 8010050:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010054:	4567      	cmp	r7, ip
 8010056:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801005a:	d8e5      	bhi.n	8010028 <__multiply+0x10c>
 801005c:	9a01      	ldr	r2, [sp, #4]
 801005e:	50a9      	str	r1, [r5, r2]
 8010060:	3504      	adds	r5, #4
 8010062:	e799      	b.n	800ff98 <__multiply+0x7c>
 8010064:	3e01      	subs	r6, #1
 8010066:	e79b      	b.n	800ffa0 <__multiply+0x84>
 8010068:	080121b7 	.word	0x080121b7
 801006c:	080121c8 	.word	0x080121c8

08010070 <__pow5mult>:
 8010070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010074:	4615      	mov	r5, r2
 8010076:	f012 0203 	ands.w	r2, r2, #3
 801007a:	4606      	mov	r6, r0
 801007c:	460f      	mov	r7, r1
 801007e:	d007      	beq.n	8010090 <__pow5mult+0x20>
 8010080:	4c25      	ldr	r4, [pc, #148]	; (8010118 <__pow5mult+0xa8>)
 8010082:	3a01      	subs	r2, #1
 8010084:	2300      	movs	r3, #0
 8010086:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801008a:	f7ff fe9d 	bl	800fdc8 <__multadd>
 801008e:	4607      	mov	r7, r0
 8010090:	10ad      	asrs	r5, r5, #2
 8010092:	d03d      	beq.n	8010110 <__pow5mult+0xa0>
 8010094:	69f4      	ldr	r4, [r6, #28]
 8010096:	b97c      	cbnz	r4, 80100b8 <__pow5mult+0x48>
 8010098:	2010      	movs	r0, #16
 801009a:	f7ff fd7f 	bl	800fb9c <malloc>
 801009e:	4602      	mov	r2, r0
 80100a0:	61f0      	str	r0, [r6, #28]
 80100a2:	b928      	cbnz	r0, 80100b0 <__pow5mult+0x40>
 80100a4:	4b1d      	ldr	r3, [pc, #116]	; (801011c <__pow5mult+0xac>)
 80100a6:	481e      	ldr	r0, [pc, #120]	; (8010120 <__pow5mult+0xb0>)
 80100a8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80100ac:	f7fe fe90 	bl	800edd0 <__assert_func>
 80100b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80100b4:	6004      	str	r4, [r0, #0]
 80100b6:	60c4      	str	r4, [r0, #12]
 80100b8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80100bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80100c0:	b94c      	cbnz	r4, 80100d6 <__pow5mult+0x66>
 80100c2:	f240 2171 	movw	r1, #625	; 0x271
 80100c6:	4630      	mov	r0, r6
 80100c8:	f7ff ff12 	bl	800fef0 <__i2b>
 80100cc:	2300      	movs	r3, #0
 80100ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80100d2:	4604      	mov	r4, r0
 80100d4:	6003      	str	r3, [r0, #0]
 80100d6:	f04f 0900 	mov.w	r9, #0
 80100da:	07eb      	lsls	r3, r5, #31
 80100dc:	d50a      	bpl.n	80100f4 <__pow5mult+0x84>
 80100de:	4639      	mov	r1, r7
 80100e0:	4622      	mov	r2, r4
 80100e2:	4630      	mov	r0, r6
 80100e4:	f7ff ff1a 	bl	800ff1c <__multiply>
 80100e8:	4639      	mov	r1, r7
 80100ea:	4680      	mov	r8, r0
 80100ec:	4630      	mov	r0, r6
 80100ee:	f7ff fe49 	bl	800fd84 <_Bfree>
 80100f2:	4647      	mov	r7, r8
 80100f4:	106d      	asrs	r5, r5, #1
 80100f6:	d00b      	beq.n	8010110 <__pow5mult+0xa0>
 80100f8:	6820      	ldr	r0, [r4, #0]
 80100fa:	b938      	cbnz	r0, 801010c <__pow5mult+0x9c>
 80100fc:	4622      	mov	r2, r4
 80100fe:	4621      	mov	r1, r4
 8010100:	4630      	mov	r0, r6
 8010102:	f7ff ff0b 	bl	800ff1c <__multiply>
 8010106:	6020      	str	r0, [r4, #0]
 8010108:	f8c0 9000 	str.w	r9, [r0]
 801010c:	4604      	mov	r4, r0
 801010e:	e7e4      	b.n	80100da <__pow5mult+0x6a>
 8010110:	4638      	mov	r0, r7
 8010112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010116:	bf00      	nop
 8010118:	08012318 	.word	0x08012318
 801011c:	080120a5 	.word	0x080120a5
 8010120:	080121c8 	.word	0x080121c8

08010124 <__lshift>:
 8010124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010128:	460c      	mov	r4, r1
 801012a:	6849      	ldr	r1, [r1, #4]
 801012c:	6923      	ldr	r3, [r4, #16]
 801012e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010132:	68a3      	ldr	r3, [r4, #8]
 8010134:	4607      	mov	r7, r0
 8010136:	4691      	mov	r9, r2
 8010138:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801013c:	f108 0601 	add.w	r6, r8, #1
 8010140:	42b3      	cmp	r3, r6
 8010142:	db0b      	blt.n	801015c <__lshift+0x38>
 8010144:	4638      	mov	r0, r7
 8010146:	f7ff fddd 	bl	800fd04 <_Balloc>
 801014a:	4605      	mov	r5, r0
 801014c:	b948      	cbnz	r0, 8010162 <__lshift+0x3e>
 801014e:	4602      	mov	r2, r0
 8010150:	4b28      	ldr	r3, [pc, #160]	; (80101f4 <__lshift+0xd0>)
 8010152:	4829      	ldr	r0, [pc, #164]	; (80101f8 <__lshift+0xd4>)
 8010154:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010158:	f7fe fe3a 	bl	800edd0 <__assert_func>
 801015c:	3101      	adds	r1, #1
 801015e:	005b      	lsls	r3, r3, #1
 8010160:	e7ee      	b.n	8010140 <__lshift+0x1c>
 8010162:	2300      	movs	r3, #0
 8010164:	f100 0114 	add.w	r1, r0, #20
 8010168:	f100 0210 	add.w	r2, r0, #16
 801016c:	4618      	mov	r0, r3
 801016e:	4553      	cmp	r3, sl
 8010170:	db33      	blt.n	80101da <__lshift+0xb6>
 8010172:	6920      	ldr	r0, [r4, #16]
 8010174:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010178:	f104 0314 	add.w	r3, r4, #20
 801017c:	f019 091f 	ands.w	r9, r9, #31
 8010180:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010184:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010188:	d02b      	beq.n	80101e2 <__lshift+0xbe>
 801018a:	f1c9 0e20 	rsb	lr, r9, #32
 801018e:	468a      	mov	sl, r1
 8010190:	2200      	movs	r2, #0
 8010192:	6818      	ldr	r0, [r3, #0]
 8010194:	fa00 f009 	lsl.w	r0, r0, r9
 8010198:	4310      	orrs	r0, r2
 801019a:	f84a 0b04 	str.w	r0, [sl], #4
 801019e:	f853 2b04 	ldr.w	r2, [r3], #4
 80101a2:	459c      	cmp	ip, r3
 80101a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80101a8:	d8f3      	bhi.n	8010192 <__lshift+0x6e>
 80101aa:	ebac 0304 	sub.w	r3, ip, r4
 80101ae:	3b15      	subs	r3, #21
 80101b0:	f023 0303 	bic.w	r3, r3, #3
 80101b4:	3304      	adds	r3, #4
 80101b6:	f104 0015 	add.w	r0, r4, #21
 80101ba:	4584      	cmp	ip, r0
 80101bc:	bf38      	it	cc
 80101be:	2304      	movcc	r3, #4
 80101c0:	50ca      	str	r2, [r1, r3]
 80101c2:	b10a      	cbz	r2, 80101c8 <__lshift+0xa4>
 80101c4:	f108 0602 	add.w	r6, r8, #2
 80101c8:	3e01      	subs	r6, #1
 80101ca:	4638      	mov	r0, r7
 80101cc:	612e      	str	r6, [r5, #16]
 80101ce:	4621      	mov	r1, r4
 80101d0:	f7ff fdd8 	bl	800fd84 <_Bfree>
 80101d4:	4628      	mov	r0, r5
 80101d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101da:	f842 0f04 	str.w	r0, [r2, #4]!
 80101de:	3301      	adds	r3, #1
 80101e0:	e7c5      	b.n	801016e <__lshift+0x4a>
 80101e2:	3904      	subs	r1, #4
 80101e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80101e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80101ec:	459c      	cmp	ip, r3
 80101ee:	d8f9      	bhi.n	80101e4 <__lshift+0xc0>
 80101f0:	e7ea      	b.n	80101c8 <__lshift+0xa4>
 80101f2:	bf00      	nop
 80101f4:	080121b7 	.word	0x080121b7
 80101f8:	080121c8 	.word	0x080121c8

080101fc <__mcmp>:
 80101fc:	b530      	push	{r4, r5, lr}
 80101fe:	6902      	ldr	r2, [r0, #16]
 8010200:	690c      	ldr	r4, [r1, #16]
 8010202:	1b12      	subs	r2, r2, r4
 8010204:	d10e      	bne.n	8010224 <__mcmp+0x28>
 8010206:	f100 0314 	add.w	r3, r0, #20
 801020a:	3114      	adds	r1, #20
 801020c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010210:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010214:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010218:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801021c:	42a5      	cmp	r5, r4
 801021e:	d003      	beq.n	8010228 <__mcmp+0x2c>
 8010220:	d305      	bcc.n	801022e <__mcmp+0x32>
 8010222:	2201      	movs	r2, #1
 8010224:	4610      	mov	r0, r2
 8010226:	bd30      	pop	{r4, r5, pc}
 8010228:	4283      	cmp	r3, r0
 801022a:	d3f3      	bcc.n	8010214 <__mcmp+0x18>
 801022c:	e7fa      	b.n	8010224 <__mcmp+0x28>
 801022e:	f04f 32ff 	mov.w	r2, #4294967295
 8010232:	e7f7      	b.n	8010224 <__mcmp+0x28>

08010234 <__mdiff>:
 8010234:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010238:	460c      	mov	r4, r1
 801023a:	4606      	mov	r6, r0
 801023c:	4611      	mov	r1, r2
 801023e:	4620      	mov	r0, r4
 8010240:	4690      	mov	r8, r2
 8010242:	f7ff ffdb 	bl	80101fc <__mcmp>
 8010246:	1e05      	subs	r5, r0, #0
 8010248:	d110      	bne.n	801026c <__mdiff+0x38>
 801024a:	4629      	mov	r1, r5
 801024c:	4630      	mov	r0, r6
 801024e:	f7ff fd59 	bl	800fd04 <_Balloc>
 8010252:	b930      	cbnz	r0, 8010262 <__mdiff+0x2e>
 8010254:	4b3a      	ldr	r3, [pc, #232]	; (8010340 <__mdiff+0x10c>)
 8010256:	4602      	mov	r2, r0
 8010258:	f240 2137 	movw	r1, #567	; 0x237
 801025c:	4839      	ldr	r0, [pc, #228]	; (8010344 <__mdiff+0x110>)
 801025e:	f7fe fdb7 	bl	800edd0 <__assert_func>
 8010262:	2301      	movs	r3, #1
 8010264:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010268:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801026c:	bfa4      	itt	ge
 801026e:	4643      	movge	r3, r8
 8010270:	46a0      	movge	r8, r4
 8010272:	4630      	mov	r0, r6
 8010274:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010278:	bfa6      	itte	ge
 801027a:	461c      	movge	r4, r3
 801027c:	2500      	movge	r5, #0
 801027e:	2501      	movlt	r5, #1
 8010280:	f7ff fd40 	bl	800fd04 <_Balloc>
 8010284:	b920      	cbnz	r0, 8010290 <__mdiff+0x5c>
 8010286:	4b2e      	ldr	r3, [pc, #184]	; (8010340 <__mdiff+0x10c>)
 8010288:	4602      	mov	r2, r0
 801028a:	f240 2145 	movw	r1, #581	; 0x245
 801028e:	e7e5      	b.n	801025c <__mdiff+0x28>
 8010290:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010294:	6926      	ldr	r6, [r4, #16]
 8010296:	60c5      	str	r5, [r0, #12]
 8010298:	f104 0914 	add.w	r9, r4, #20
 801029c:	f108 0514 	add.w	r5, r8, #20
 80102a0:	f100 0e14 	add.w	lr, r0, #20
 80102a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80102a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80102ac:	f108 0210 	add.w	r2, r8, #16
 80102b0:	46f2      	mov	sl, lr
 80102b2:	2100      	movs	r1, #0
 80102b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80102b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80102bc:	fa11 f88b 	uxtah	r8, r1, fp
 80102c0:	b299      	uxth	r1, r3
 80102c2:	0c1b      	lsrs	r3, r3, #16
 80102c4:	eba8 0801 	sub.w	r8, r8, r1
 80102c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80102cc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80102d0:	fa1f f888 	uxth.w	r8, r8
 80102d4:	1419      	asrs	r1, r3, #16
 80102d6:	454e      	cmp	r6, r9
 80102d8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80102dc:	f84a 3b04 	str.w	r3, [sl], #4
 80102e0:	d8e8      	bhi.n	80102b4 <__mdiff+0x80>
 80102e2:	1b33      	subs	r3, r6, r4
 80102e4:	3b15      	subs	r3, #21
 80102e6:	f023 0303 	bic.w	r3, r3, #3
 80102ea:	3304      	adds	r3, #4
 80102ec:	3415      	adds	r4, #21
 80102ee:	42a6      	cmp	r6, r4
 80102f0:	bf38      	it	cc
 80102f2:	2304      	movcc	r3, #4
 80102f4:	441d      	add	r5, r3
 80102f6:	4473      	add	r3, lr
 80102f8:	469e      	mov	lr, r3
 80102fa:	462e      	mov	r6, r5
 80102fc:	4566      	cmp	r6, ip
 80102fe:	d30e      	bcc.n	801031e <__mdiff+0xea>
 8010300:	f10c 0203 	add.w	r2, ip, #3
 8010304:	1b52      	subs	r2, r2, r5
 8010306:	f022 0203 	bic.w	r2, r2, #3
 801030a:	3d03      	subs	r5, #3
 801030c:	45ac      	cmp	ip, r5
 801030e:	bf38      	it	cc
 8010310:	2200      	movcc	r2, #0
 8010312:	4413      	add	r3, r2
 8010314:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010318:	b17a      	cbz	r2, 801033a <__mdiff+0x106>
 801031a:	6107      	str	r7, [r0, #16]
 801031c:	e7a4      	b.n	8010268 <__mdiff+0x34>
 801031e:	f856 8b04 	ldr.w	r8, [r6], #4
 8010322:	fa11 f288 	uxtah	r2, r1, r8
 8010326:	1414      	asrs	r4, r2, #16
 8010328:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801032c:	b292      	uxth	r2, r2
 801032e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010332:	f84e 2b04 	str.w	r2, [lr], #4
 8010336:	1421      	asrs	r1, r4, #16
 8010338:	e7e0      	b.n	80102fc <__mdiff+0xc8>
 801033a:	3f01      	subs	r7, #1
 801033c:	e7ea      	b.n	8010314 <__mdiff+0xe0>
 801033e:	bf00      	nop
 8010340:	080121b7 	.word	0x080121b7
 8010344:	080121c8 	.word	0x080121c8

08010348 <__d2b>:
 8010348:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801034c:	460f      	mov	r7, r1
 801034e:	2101      	movs	r1, #1
 8010350:	ec59 8b10 	vmov	r8, r9, d0
 8010354:	4616      	mov	r6, r2
 8010356:	f7ff fcd5 	bl	800fd04 <_Balloc>
 801035a:	4604      	mov	r4, r0
 801035c:	b930      	cbnz	r0, 801036c <__d2b+0x24>
 801035e:	4602      	mov	r2, r0
 8010360:	4b24      	ldr	r3, [pc, #144]	; (80103f4 <__d2b+0xac>)
 8010362:	4825      	ldr	r0, [pc, #148]	; (80103f8 <__d2b+0xb0>)
 8010364:	f240 310f 	movw	r1, #783	; 0x30f
 8010368:	f7fe fd32 	bl	800edd0 <__assert_func>
 801036c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010370:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010374:	bb2d      	cbnz	r5, 80103c2 <__d2b+0x7a>
 8010376:	9301      	str	r3, [sp, #4]
 8010378:	f1b8 0300 	subs.w	r3, r8, #0
 801037c:	d026      	beq.n	80103cc <__d2b+0x84>
 801037e:	4668      	mov	r0, sp
 8010380:	9300      	str	r3, [sp, #0]
 8010382:	f7ff fd87 	bl	800fe94 <__lo0bits>
 8010386:	e9dd 1200 	ldrd	r1, r2, [sp]
 801038a:	b1e8      	cbz	r0, 80103c8 <__d2b+0x80>
 801038c:	f1c0 0320 	rsb	r3, r0, #32
 8010390:	fa02 f303 	lsl.w	r3, r2, r3
 8010394:	430b      	orrs	r3, r1
 8010396:	40c2      	lsrs	r2, r0
 8010398:	6163      	str	r3, [r4, #20]
 801039a:	9201      	str	r2, [sp, #4]
 801039c:	9b01      	ldr	r3, [sp, #4]
 801039e:	61a3      	str	r3, [r4, #24]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	bf14      	ite	ne
 80103a4:	2202      	movne	r2, #2
 80103a6:	2201      	moveq	r2, #1
 80103a8:	6122      	str	r2, [r4, #16]
 80103aa:	b1bd      	cbz	r5, 80103dc <__d2b+0x94>
 80103ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80103b0:	4405      	add	r5, r0
 80103b2:	603d      	str	r5, [r7, #0]
 80103b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80103b8:	6030      	str	r0, [r6, #0]
 80103ba:	4620      	mov	r0, r4
 80103bc:	b003      	add	sp, #12
 80103be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80103c6:	e7d6      	b.n	8010376 <__d2b+0x2e>
 80103c8:	6161      	str	r1, [r4, #20]
 80103ca:	e7e7      	b.n	801039c <__d2b+0x54>
 80103cc:	a801      	add	r0, sp, #4
 80103ce:	f7ff fd61 	bl	800fe94 <__lo0bits>
 80103d2:	9b01      	ldr	r3, [sp, #4]
 80103d4:	6163      	str	r3, [r4, #20]
 80103d6:	3020      	adds	r0, #32
 80103d8:	2201      	movs	r2, #1
 80103da:	e7e5      	b.n	80103a8 <__d2b+0x60>
 80103dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80103e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80103e4:	6038      	str	r0, [r7, #0]
 80103e6:	6918      	ldr	r0, [r3, #16]
 80103e8:	f7ff fd34 	bl	800fe54 <__hi0bits>
 80103ec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80103f0:	e7e2      	b.n	80103b8 <__d2b+0x70>
 80103f2:	bf00      	nop
 80103f4:	080121b7 	.word	0x080121b7
 80103f8:	080121c8 	.word	0x080121c8

080103fc <__ssputs_r>:
 80103fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010400:	688e      	ldr	r6, [r1, #8]
 8010402:	461f      	mov	r7, r3
 8010404:	42be      	cmp	r6, r7
 8010406:	680b      	ldr	r3, [r1, #0]
 8010408:	4682      	mov	sl, r0
 801040a:	460c      	mov	r4, r1
 801040c:	4690      	mov	r8, r2
 801040e:	d82c      	bhi.n	801046a <__ssputs_r+0x6e>
 8010410:	898a      	ldrh	r2, [r1, #12]
 8010412:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010416:	d026      	beq.n	8010466 <__ssputs_r+0x6a>
 8010418:	6965      	ldr	r5, [r4, #20]
 801041a:	6909      	ldr	r1, [r1, #16]
 801041c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010420:	eba3 0901 	sub.w	r9, r3, r1
 8010424:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010428:	1c7b      	adds	r3, r7, #1
 801042a:	444b      	add	r3, r9
 801042c:	106d      	asrs	r5, r5, #1
 801042e:	429d      	cmp	r5, r3
 8010430:	bf38      	it	cc
 8010432:	461d      	movcc	r5, r3
 8010434:	0553      	lsls	r3, r2, #21
 8010436:	d527      	bpl.n	8010488 <__ssputs_r+0x8c>
 8010438:	4629      	mov	r1, r5
 801043a:	f7ff fbd7 	bl	800fbec <_malloc_r>
 801043e:	4606      	mov	r6, r0
 8010440:	b360      	cbz	r0, 801049c <__ssputs_r+0xa0>
 8010442:	6921      	ldr	r1, [r4, #16]
 8010444:	464a      	mov	r2, r9
 8010446:	f7fe fcb4 	bl	800edb2 <memcpy>
 801044a:	89a3      	ldrh	r3, [r4, #12]
 801044c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010454:	81a3      	strh	r3, [r4, #12]
 8010456:	6126      	str	r6, [r4, #16]
 8010458:	6165      	str	r5, [r4, #20]
 801045a:	444e      	add	r6, r9
 801045c:	eba5 0509 	sub.w	r5, r5, r9
 8010460:	6026      	str	r6, [r4, #0]
 8010462:	60a5      	str	r5, [r4, #8]
 8010464:	463e      	mov	r6, r7
 8010466:	42be      	cmp	r6, r7
 8010468:	d900      	bls.n	801046c <__ssputs_r+0x70>
 801046a:	463e      	mov	r6, r7
 801046c:	6820      	ldr	r0, [r4, #0]
 801046e:	4632      	mov	r2, r6
 8010470:	4641      	mov	r1, r8
 8010472:	f000 f9db 	bl	801082c <memmove>
 8010476:	68a3      	ldr	r3, [r4, #8]
 8010478:	1b9b      	subs	r3, r3, r6
 801047a:	60a3      	str	r3, [r4, #8]
 801047c:	6823      	ldr	r3, [r4, #0]
 801047e:	4433      	add	r3, r6
 8010480:	6023      	str	r3, [r4, #0]
 8010482:	2000      	movs	r0, #0
 8010484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010488:	462a      	mov	r2, r5
 801048a:	f000 fa28 	bl	80108de <_realloc_r>
 801048e:	4606      	mov	r6, r0
 8010490:	2800      	cmp	r0, #0
 8010492:	d1e0      	bne.n	8010456 <__ssputs_r+0x5a>
 8010494:	6921      	ldr	r1, [r4, #16]
 8010496:	4650      	mov	r0, sl
 8010498:	f7ff fb34 	bl	800fb04 <_free_r>
 801049c:	230c      	movs	r3, #12
 801049e:	f8ca 3000 	str.w	r3, [sl]
 80104a2:	89a3      	ldrh	r3, [r4, #12]
 80104a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104a8:	81a3      	strh	r3, [r4, #12]
 80104aa:	f04f 30ff 	mov.w	r0, #4294967295
 80104ae:	e7e9      	b.n	8010484 <__ssputs_r+0x88>

080104b0 <_svfiprintf_r>:
 80104b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b4:	4698      	mov	r8, r3
 80104b6:	898b      	ldrh	r3, [r1, #12]
 80104b8:	061b      	lsls	r3, r3, #24
 80104ba:	b09d      	sub	sp, #116	; 0x74
 80104bc:	4607      	mov	r7, r0
 80104be:	460d      	mov	r5, r1
 80104c0:	4614      	mov	r4, r2
 80104c2:	d50e      	bpl.n	80104e2 <_svfiprintf_r+0x32>
 80104c4:	690b      	ldr	r3, [r1, #16]
 80104c6:	b963      	cbnz	r3, 80104e2 <_svfiprintf_r+0x32>
 80104c8:	2140      	movs	r1, #64	; 0x40
 80104ca:	f7ff fb8f 	bl	800fbec <_malloc_r>
 80104ce:	6028      	str	r0, [r5, #0]
 80104d0:	6128      	str	r0, [r5, #16]
 80104d2:	b920      	cbnz	r0, 80104de <_svfiprintf_r+0x2e>
 80104d4:	230c      	movs	r3, #12
 80104d6:	603b      	str	r3, [r7, #0]
 80104d8:	f04f 30ff 	mov.w	r0, #4294967295
 80104dc:	e0d0      	b.n	8010680 <_svfiprintf_r+0x1d0>
 80104de:	2340      	movs	r3, #64	; 0x40
 80104e0:	616b      	str	r3, [r5, #20]
 80104e2:	2300      	movs	r3, #0
 80104e4:	9309      	str	r3, [sp, #36]	; 0x24
 80104e6:	2320      	movs	r3, #32
 80104e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80104ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80104f0:	2330      	movs	r3, #48	; 0x30
 80104f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010698 <_svfiprintf_r+0x1e8>
 80104f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80104fa:	f04f 0901 	mov.w	r9, #1
 80104fe:	4623      	mov	r3, r4
 8010500:	469a      	mov	sl, r3
 8010502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010506:	b10a      	cbz	r2, 801050c <_svfiprintf_r+0x5c>
 8010508:	2a25      	cmp	r2, #37	; 0x25
 801050a:	d1f9      	bne.n	8010500 <_svfiprintf_r+0x50>
 801050c:	ebba 0b04 	subs.w	fp, sl, r4
 8010510:	d00b      	beq.n	801052a <_svfiprintf_r+0x7a>
 8010512:	465b      	mov	r3, fp
 8010514:	4622      	mov	r2, r4
 8010516:	4629      	mov	r1, r5
 8010518:	4638      	mov	r0, r7
 801051a:	f7ff ff6f 	bl	80103fc <__ssputs_r>
 801051e:	3001      	adds	r0, #1
 8010520:	f000 80a9 	beq.w	8010676 <_svfiprintf_r+0x1c6>
 8010524:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010526:	445a      	add	r2, fp
 8010528:	9209      	str	r2, [sp, #36]	; 0x24
 801052a:	f89a 3000 	ldrb.w	r3, [sl]
 801052e:	2b00      	cmp	r3, #0
 8010530:	f000 80a1 	beq.w	8010676 <_svfiprintf_r+0x1c6>
 8010534:	2300      	movs	r3, #0
 8010536:	f04f 32ff 	mov.w	r2, #4294967295
 801053a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801053e:	f10a 0a01 	add.w	sl, sl, #1
 8010542:	9304      	str	r3, [sp, #16]
 8010544:	9307      	str	r3, [sp, #28]
 8010546:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801054a:	931a      	str	r3, [sp, #104]	; 0x68
 801054c:	4654      	mov	r4, sl
 801054e:	2205      	movs	r2, #5
 8010550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010554:	4850      	ldr	r0, [pc, #320]	; (8010698 <_svfiprintf_r+0x1e8>)
 8010556:	f7ef fe73 	bl	8000240 <memchr>
 801055a:	9a04      	ldr	r2, [sp, #16]
 801055c:	b9d8      	cbnz	r0, 8010596 <_svfiprintf_r+0xe6>
 801055e:	06d0      	lsls	r0, r2, #27
 8010560:	bf44      	itt	mi
 8010562:	2320      	movmi	r3, #32
 8010564:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010568:	0711      	lsls	r1, r2, #28
 801056a:	bf44      	itt	mi
 801056c:	232b      	movmi	r3, #43	; 0x2b
 801056e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010572:	f89a 3000 	ldrb.w	r3, [sl]
 8010576:	2b2a      	cmp	r3, #42	; 0x2a
 8010578:	d015      	beq.n	80105a6 <_svfiprintf_r+0xf6>
 801057a:	9a07      	ldr	r2, [sp, #28]
 801057c:	4654      	mov	r4, sl
 801057e:	2000      	movs	r0, #0
 8010580:	f04f 0c0a 	mov.w	ip, #10
 8010584:	4621      	mov	r1, r4
 8010586:	f811 3b01 	ldrb.w	r3, [r1], #1
 801058a:	3b30      	subs	r3, #48	; 0x30
 801058c:	2b09      	cmp	r3, #9
 801058e:	d94d      	bls.n	801062c <_svfiprintf_r+0x17c>
 8010590:	b1b0      	cbz	r0, 80105c0 <_svfiprintf_r+0x110>
 8010592:	9207      	str	r2, [sp, #28]
 8010594:	e014      	b.n	80105c0 <_svfiprintf_r+0x110>
 8010596:	eba0 0308 	sub.w	r3, r0, r8
 801059a:	fa09 f303 	lsl.w	r3, r9, r3
 801059e:	4313      	orrs	r3, r2
 80105a0:	9304      	str	r3, [sp, #16]
 80105a2:	46a2      	mov	sl, r4
 80105a4:	e7d2      	b.n	801054c <_svfiprintf_r+0x9c>
 80105a6:	9b03      	ldr	r3, [sp, #12]
 80105a8:	1d19      	adds	r1, r3, #4
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	9103      	str	r1, [sp, #12]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	bfbb      	ittet	lt
 80105b2:	425b      	neglt	r3, r3
 80105b4:	f042 0202 	orrlt.w	r2, r2, #2
 80105b8:	9307      	strge	r3, [sp, #28]
 80105ba:	9307      	strlt	r3, [sp, #28]
 80105bc:	bfb8      	it	lt
 80105be:	9204      	strlt	r2, [sp, #16]
 80105c0:	7823      	ldrb	r3, [r4, #0]
 80105c2:	2b2e      	cmp	r3, #46	; 0x2e
 80105c4:	d10c      	bne.n	80105e0 <_svfiprintf_r+0x130>
 80105c6:	7863      	ldrb	r3, [r4, #1]
 80105c8:	2b2a      	cmp	r3, #42	; 0x2a
 80105ca:	d134      	bne.n	8010636 <_svfiprintf_r+0x186>
 80105cc:	9b03      	ldr	r3, [sp, #12]
 80105ce:	1d1a      	adds	r2, r3, #4
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	9203      	str	r2, [sp, #12]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	bfb8      	it	lt
 80105d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80105dc:	3402      	adds	r4, #2
 80105de:	9305      	str	r3, [sp, #20]
 80105e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80106a8 <_svfiprintf_r+0x1f8>
 80105e4:	7821      	ldrb	r1, [r4, #0]
 80105e6:	2203      	movs	r2, #3
 80105e8:	4650      	mov	r0, sl
 80105ea:	f7ef fe29 	bl	8000240 <memchr>
 80105ee:	b138      	cbz	r0, 8010600 <_svfiprintf_r+0x150>
 80105f0:	9b04      	ldr	r3, [sp, #16]
 80105f2:	eba0 000a 	sub.w	r0, r0, sl
 80105f6:	2240      	movs	r2, #64	; 0x40
 80105f8:	4082      	lsls	r2, r0
 80105fa:	4313      	orrs	r3, r2
 80105fc:	3401      	adds	r4, #1
 80105fe:	9304      	str	r3, [sp, #16]
 8010600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010604:	4825      	ldr	r0, [pc, #148]	; (801069c <_svfiprintf_r+0x1ec>)
 8010606:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801060a:	2206      	movs	r2, #6
 801060c:	f7ef fe18 	bl	8000240 <memchr>
 8010610:	2800      	cmp	r0, #0
 8010612:	d038      	beq.n	8010686 <_svfiprintf_r+0x1d6>
 8010614:	4b22      	ldr	r3, [pc, #136]	; (80106a0 <_svfiprintf_r+0x1f0>)
 8010616:	bb1b      	cbnz	r3, 8010660 <_svfiprintf_r+0x1b0>
 8010618:	9b03      	ldr	r3, [sp, #12]
 801061a:	3307      	adds	r3, #7
 801061c:	f023 0307 	bic.w	r3, r3, #7
 8010620:	3308      	adds	r3, #8
 8010622:	9303      	str	r3, [sp, #12]
 8010624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010626:	4433      	add	r3, r6
 8010628:	9309      	str	r3, [sp, #36]	; 0x24
 801062a:	e768      	b.n	80104fe <_svfiprintf_r+0x4e>
 801062c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010630:	460c      	mov	r4, r1
 8010632:	2001      	movs	r0, #1
 8010634:	e7a6      	b.n	8010584 <_svfiprintf_r+0xd4>
 8010636:	2300      	movs	r3, #0
 8010638:	3401      	adds	r4, #1
 801063a:	9305      	str	r3, [sp, #20]
 801063c:	4619      	mov	r1, r3
 801063e:	f04f 0c0a 	mov.w	ip, #10
 8010642:	4620      	mov	r0, r4
 8010644:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010648:	3a30      	subs	r2, #48	; 0x30
 801064a:	2a09      	cmp	r2, #9
 801064c:	d903      	bls.n	8010656 <_svfiprintf_r+0x1a6>
 801064e:	2b00      	cmp	r3, #0
 8010650:	d0c6      	beq.n	80105e0 <_svfiprintf_r+0x130>
 8010652:	9105      	str	r1, [sp, #20]
 8010654:	e7c4      	b.n	80105e0 <_svfiprintf_r+0x130>
 8010656:	fb0c 2101 	mla	r1, ip, r1, r2
 801065a:	4604      	mov	r4, r0
 801065c:	2301      	movs	r3, #1
 801065e:	e7f0      	b.n	8010642 <_svfiprintf_r+0x192>
 8010660:	ab03      	add	r3, sp, #12
 8010662:	9300      	str	r3, [sp, #0]
 8010664:	462a      	mov	r2, r5
 8010666:	4b0f      	ldr	r3, [pc, #60]	; (80106a4 <_svfiprintf_r+0x1f4>)
 8010668:	a904      	add	r1, sp, #16
 801066a:	4638      	mov	r0, r7
 801066c:	f7fd fdc8 	bl	800e200 <_printf_float>
 8010670:	1c42      	adds	r2, r0, #1
 8010672:	4606      	mov	r6, r0
 8010674:	d1d6      	bne.n	8010624 <_svfiprintf_r+0x174>
 8010676:	89ab      	ldrh	r3, [r5, #12]
 8010678:	065b      	lsls	r3, r3, #25
 801067a:	f53f af2d 	bmi.w	80104d8 <_svfiprintf_r+0x28>
 801067e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010680:	b01d      	add	sp, #116	; 0x74
 8010682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010686:	ab03      	add	r3, sp, #12
 8010688:	9300      	str	r3, [sp, #0]
 801068a:	462a      	mov	r2, r5
 801068c:	4b05      	ldr	r3, [pc, #20]	; (80106a4 <_svfiprintf_r+0x1f4>)
 801068e:	a904      	add	r1, sp, #16
 8010690:	4638      	mov	r0, r7
 8010692:	f7fe f859 	bl	800e748 <_printf_i>
 8010696:	e7eb      	b.n	8010670 <_svfiprintf_r+0x1c0>
 8010698:	08012324 	.word	0x08012324
 801069c:	0801232e 	.word	0x0801232e
 80106a0:	0800e201 	.word	0x0800e201
 80106a4:	080103fd 	.word	0x080103fd
 80106a8:	0801232a 	.word	0x0801232a

080106ac <__sflush_r>:
 80106ac:	898a      	ldrh	r2, [r1, #12]
 80106ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106b2:	4605      	mov	r5, r0
 80106b4:	0710      	lsls	r0, r2, #28
 80106b6:	460c      	mov	r4, r1
 80106b8:	d458      	bmi.n	801076c <__sflush_r+0xc0>
 80106ba:	684b      	ldr	r3, [r1, #4]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	dc05      	bgt.n	80106cc <__sflush_r+0x20>
 80106c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	dc02      	bgt.n	80106cc <__sflush_r+0x20>
 80106c6:	2000      	movs	r0, #0
 80106c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80106ce:	2e00      	cmp	r6, #0
 80106d0:	d0f9      	beq.n	80106c6 <__sflush_r+0x1a>
 80106d2:	2300      	movs	r3, #0
 80106d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80106d8:	682f      	ldr	r7, [r5, #0]
 80106da:	6a21      	ldr	r1, [r4, #32]
 80106dc:	602b      	str	r3, [r5, #0]
 80106de:	d032      	beq.n	8010746 <__sflush_r+0x9a>
 80106e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80106e2:	89a3      	ldrh	r3, [r4, #12]
 80106e4:	075a      	lsls	r2, r3, #29
 80106e6:	d505      	bpl.n	80106f4 <__sflush_r+0x48>
 80106e8:	6863      	ldr	r3, [r4, #4]
 80106ea:	1ac0      	subs	r0, r0, r3
 80106ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80106ee:	b10b      	cbz	r3, 80106f4 <__sflush_r+0x48>
 80106f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80106f2:	1ac0      	subs	r0, r0, r3
 80106f4:	2300      	movs	r3, #0
 80106f6:	4602      	mov	r2, r0
 80106f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80106fa:	6a21      	ldr	r1, [r4, #32]
 80106fc:	4628      	mov	r0, r5
 80106fe:	47b0      	blx	r6
 8010700:	1c43      	adds	r3, r0, #1
 8010702:	89a3      	ldrh	r3, [r4, #12]
 8010704:	d106      	bne.n	8010714 <__sflush_r+0x68>
 8010706:	6829      	ldr	r1, [r5, #0]
 8010708:	291d      	cmp	r1, #29
 801070a:	d82b      	bhi.n	8010764 <__sflush_r+0xb8>
 801070c:	4a29      	ldr	r2, [pc, #164]	; (80107b4 <__sflush_r+0x108>)
 801070e:	410a      	asrs	r2, r1
 8010710:	07d6      	lsls	r6, r2, #31
 8010712:	d427      	bmi.n	8010764 <__sflush_r+0xb8>
 8010714:	2200      	movs	r2, #0
 8010716:	6062      	str	r2, [r4, #4]
 8010718:	04d9      	lsls	r1, r3, #19
 801071a:	6922      	ldr	r2, [r4, #16]
 801071c:	6022      	str	r2, [r4, #0]
 801071e:	d504      	bpl.n	801072a <__sflush_r+0x7e>
 8010720:	1c42      	adds	r2, r0, #1
 8010722:	d101      	bne.n	8010728 <__sflush_r+0x7c>
 8010724:	682b      	ldr	r3, [r5, #0]
 8010726:	b903      	cbnz	r3, 801072a <__sflush_r+0x7e>
 8010728:	6560      	str	r0, [r4, #84]	; 0x54
 801072a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801072c:	602f      	str	r7, [r5, #0]
 801072e:	2900      	cmp	r1, #0
 8010730:	d0c9      	beq.n	80106c6 <__sflush_r+0x1a>
 8010732:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010736:	4299      	cmp	r1, r3
 8010738:	d002      	beq.n	8010740 <__sflush_r+0x94>
 801073a:	4628      	mov	r0, r5
 801073c:	f7ff f9e2 	bl	800fb04 <_free_r>
 8010740:	2000      	movs	r0, #0
 8010742:	6360      	str	r0, [r4, #52]	; 0x34
 8010744:	e7c0      	b.n	80106c8 <__sflush_r+0x1c>
 8010746:	2301      	movs	r3, #1
 8010748:	4628      	mov	r0, r5
 801074a:	47b0      	blx	r6
 801074c:	1c41      	adds	r1, r0, #1
 801074e:	d1c8      	bne.n	80106e2 <__sflush_r+0x36>
 8010750:	682b      	ldr	r3, [r5, #0]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d0c5      	beq.n	80106e2 <__sflush_r+0x36>
 8010756:	2b1d      	cmp	r3, #29
 8010758:	d001      	beq.n	801075e <__sflush_r+0xb2>
 801075a:	2b16      	cmp	r3, #22
 801075c:	d101      	bne.n	8010762 <__sflush_r+0xb6>
 801075e:	602f      	str	r7, [r5, #0]
 8010760:	e7b1      	b.n	80106c6 <__sflush_r+0x1a>
 8010762:	89a3      	ldrh	r3, [r4, #12]
 8010764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010768:	81a3      	strh	r3, [r4, #12]
 801076a:	e7ad      	b.n	80106c8 <__sflush_r+0x1c>
 801076c:	690f      	ldr	r7, [r1, #16]
 801076e:	2f00      	cmp	r7, #0
 8010770:	d0a9      	beq.n	80106c6 <__sflush_r+0x1a>
 8010772:	0793      	lsls	r3, r2, #30
 8010774:	680e      	ldr	r6, [r1, #0]
 8010776:	bf08      	it	eq
 8010778:	694b      	ldreq	r3, [r1, #20]
 801077a:	600f      	str	r7, [r1, #0]
 801077c:	bf18      	it	ne
 801077e:	2300      	movne	r3, #0
 8010780:	eba6 0807 	sub.w	r8, r6, r7
 8010784:	608b      	str	r3, [r1, #8]
 8010786:	f1b8 0f00 	cmp.w	r8, #0
 801078a:	dd9c      	ble.n	80106c6 <__sflush_r+0x1a>
 801078c:	6a21      	ldr	r1, [r4, #32]
 801078e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010790:	4643      	mov	r3, r8
 8010792:	463a      	mov	r2, r7
 8010794:	4628      	mov	r0, r5
 8010796:	47b0      	blx	r6
 8010798:	2800      	cmp	r0, #0
 801079a:	dc06      	bgt.n	80107aa <__sflush_r+0xfe>
 801079c:	89a3      	ldrh	r3, [r4, #12]
 801079e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107a2:	81a3      	strh	r3, [r4, #12]
 80107a4:	f04f 30ff 	mov.w	r0, #4294967295
 80107a8:	e78e      	b.n	80106c8 <__sflush_r+0x1c>
 80107aa:	4407      	add	r7, r0
 80107ac:	eba8 0800 	sub.w	r8, r8, r0
 80107b0:	e7e9      	b.n	8010786 <__sflush_r+0xda>
 80107b2:	bf00      	nop
 80107b4:	dfbffffe 	.word	0xdfbffffe

080107b8 <_fflush_r>:
 80107b8:	b538      	push	{r3, r4, r5, lr}
 80107ba:	690b      	ldr	r3, [r1, #16]
 80107bc:	4605      	mov	r5, r0
 80107be:	460c      	mov	r4, r1
 80107c0:	b913      	cbnz	r3, 80107c8 <_fflush_r+0x10>
 80107c2:	2500      	movs	r5, #0
 80107c4:	4628      	mov	r0, r5
 80107c6:	bd38      	pop	{r3, r4, r5, pc}
 80107c8:	b118      	cbz	r0, 80107d2 <_fflush_r+0x1a>
 80107ca:	6a03      	ldr	r3, [r0, #32]
 80107cc:	b90b      	cbnz	r3, 80107d2 <_fflush_r+0x1a>
 80107ce:	f7fe f969 	bl	800eaa4 <__sinit>
 80107d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d0f3      	beq.n	80107c2 <_fflush_r+0xa>
 80107da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80107dc:	07d0      	lsls	r0, r2, #31
 80107de:	d404      	bmi.n	80107ea <_fflush_r+0x32>
 80107e0:	0599      	lsls	r1, r3, #22
 80107e2:	d402      	bmi.n	80107ea <_fflush_r+0x32>
 80107e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80107e6:	f7fe fae2 	bl	800edae <__retarget_lock_acquire_recursive>
 80107ea:	4628      	mov	r0, r5
 80107ec:	4621      	mov	r1, r4
 80107ee:	f7ff ff5d 	bl	80106ac <__sflush_r>
 80107f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80107f4:	07da      	lsls	r2, r3, #31
 80107f6:	4605      	mov	r5, r0
 80107f8:	d4e4      	bmi.n	80107c4 <_fflush_r+0xc>
 80107fa:	89a3      	ldrh	r3, [r4, #12]
 80107fc:	059b      	lsls	r3, r3, #22
 80107fe:	d4e1      	bmi.n	80107c4 <_fflush_r+0xc>
 8010800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010802:	f7fe fad5 	bl	800edb0 <__retarget_lock_release_recursive>
 8010806:	e7dd      	b.n	80107c4 <_fflush_r+0xc>

08010808 <fiprintf>:
 8010808:	b40e      	push	{r1, r2, r3}
 801080a:	b503      	push	{r0, r1, lr}
 801080c:	4601      	mov	r1, r0
 801080e:	ab03      	add	r3, sp, #12
 8010810:	4805      	ldr	r0, [pc, #20]	; (8010828 <fiprintf+0x20>)
 8010812:	f853 2b04 	ldr.w	r2, [r3], #4
 8010816:	6800      	ldr	r0, [r0, #0]
 8010818:	9301      	str	r3, [sp, #4]
 801081a:	f000 f8c5 	bl	80109a8 <_vfiprintf_r>
 801081e:	b002      	add	sp, #8
 8010820:	f85d eb04 	ldr.w	lr, [sp], #4
 8010824:	b003      	add	sp, #12
 8010826:	4770      	bx	lr
 8010828:	200001e8 	.word	0x200001e8

0801082c <memmove>:
 801082c:	4288      	cmp	r0, r1
 801082e:	b510      	push	{r4, lr}
 8010830:	eb01 0402 	add.w	r4, r1, r2
 8010834:	d902      	bls.n	801083c <memmove+0x10>
 8010836:	4284      	cmp	r4, r0
 8010838:	4623      	mov	r3, r4
 801083a:	d807      	bhi.n	801084c <memmove+0x20>
 801083c:	1e43      	subs	r3, r0, #1
 801083e:	42a1      	cmp	r1, r4
 8010840:	d008      	beq.n	8010854 <memmove+0x28>
 8010842:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010846:	f803 2f01 	strb.w	r2, [r3, #1]!
 801084a:	e7f8      	b.n	801083e <memmove+0x12>
 801084c:	4402      	add	r2, r0
 801084e:	4601      	mov	r1, r0
 8010850:	428a      	cmp	r2, r1
 8010852:	d100      	bne.n	8010856 <memmove+0x2a>
 8010854:	bd10      	pop	{r4, pc}
 8010856:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801085a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801085e:	e7f7      	b.n	8010850 <memmove+0x24>

08010860 <_sbrk_r>:
 8010860:	b538      	push	{r3, r4, r5, lr}
 8010862:	4d06      	ldr	r5, [pc, #24]	; (801087c <_sbrk_r+0x1c>)
 8010864:	2300      	movs	r3, #0
 8010866:	4604      	mov	r4, r0
 8010868:	4608      	mov	r0, r1
 801086a:	602b      	str	r3, [r5, #0]
 801086c:	f7f2 f86e 	bl	800294c <_sbrk>
 8010870:	1c43      	adds	r3, r0, #1
 8010872:	d102      	bne.n	801087a <_sbrk_r+0x1a>
 8010874:	682b      	ldr	r3, [r5, #0]
 8010876:	b103      	cbz	r3, 801087a <_sbrk_r+0x1a>
 8010878:	6023      	str	r3, [r4, #0]
 801087a:	bd38      	pop	{r3, r4, r5, pc}
 801087c:	200052b0 	.word	0x200052b0

08010880 <abort>:
 8010880:	b508      	push	{r3, lr}
 8010882:	2006      	movs	r0, #6
 8010884:	f000 fa68 	bl	8010d58 <raise>
 8010888:	2001      	movs	r0, #1
 801088a:	f7f1 ffe7 	bl	800285c <_exit>

0801088e <_calloc_r>:
 801088e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010890:	fba1 2402 	umull	r2, r4, r1, r2
 8010894:	b94c      	cbnz	r4, 80108aa <_calloc_r+0x1c>
 8010896:	4611      	mov	r1, r2
 8010898:	9201      	str	r2, [sp, #4]
 801089a:	f7ff f9a7 	bl	800fbec <_malloc_r>
 801089e:	9a01      	ldr	r2, [sp, #4]
 80108a0:	4605      	mov	r5, r0
 80108a2:	b930      	cbnz	r0, 80108b2 <_calloc_r+0x24>
 80108a4:	4628      	mov	r0, r5
 80108a6:	b003      	add	sp, #12
 80108a8:	bd30      	pop	{r4, r5, pc}
 80108aa:	220c      	movs	r2, #12
 80108ac:	6002      	str	r2, [r0, #0]
 80108ae:	2500      	movs	r5, #0
 80108b0:	e7f8      	b.n	80108a4 <_calloc_r+0x16>
 80108b2:	4621      	mov	r1, r4
 80108b4:	f7fe f98f 	bl	800ebd6 <memset>
 80108b8:	e7f4      	b.n	80108a4 <_calloc_r+0x16>

080108ba <__ascii_mbtowc>:
 80108ba:	b082      	sub	sp, #8
 80108bc:	b901      	cbnz	r1, 80108c0 <__ascii_mbtowc+0x6>
 80108be:	a901      	add	r1, sp, #4
 80108c0:	b142      	cbz	r2, 80108d4 <__ascii_mbtowc+0x1a>
 80108c2:	b14b      	cbz	r3, 80108d8 <__ascii_mbtowc+0x1e>
 80108c4:	7813      	ldrb	r3, [r2, #0]
 80108c6:	600b      	str	r3, [r1, #0]
 80108c8:	7812      	ldrb	r2, [r2, #0]
 80108ca:	1e10      	subs	r0, r2, #0
 80108cc:	bf18      	it	ne
 80108ce:	2001      	movne	r0, #1
 80108d0:	b002      	add	sp, #8
 80108d2:	4770      	bx	lr
 80108d4:	4610      	mov	r0, r2
 80108d6:	e7fb      	b.n	80108d0 <__ascii_mbtowc+0x16>
 80108d8:	f06f 0001 	mvn.w	r0, #1
 80108dc:	e7f8      	b.n	80108d0 <__ascii_mbtowc+0x16>

080108de <_realloc_r>:
 80108de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108e2:	4680      	mov	r8, r0
 80108e4:	4614      	mov	r4, r2
 80108e6:	460e      	mov	r6, r1
 80108e8:	b921      	cbnz	r1, 80108f4 <_realloc_r+0x16>
 80108ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108ee:	4611      	mov	r1, r2
 80108f0:	f7ff b97c 	b.w	800fbec <_malloc_r>
 80108f4:	b92a      	cbnz	r2, 8010902 <_realloc_r+0x24>
 80108f6:	f7ff f905 	bl	800fb04 <_free_r>
 80108fa:	4625      	mov	r5, r4
 80108fc:	4628      	mov	r0, r5
 80108fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010902:	f000 fa45 	bl	8010d90 <_malloc_usable_size_r>
 8010906:	4284      	cmp	r4, r0
 8010908:	4607      	mov	r7, r0
 801090a:	d802      	bhi.n	8010912 <_realloc_r+0x34>
 801090c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010910:	d812      	bhi.n	8010938 <_realloc_r+0x5a>
 8010912:	4621      	mov	r1, r4
 8010914:	4640      	mov	r0, r8
 8010916:	f7ff f969 	bl	800fbec <_malloc_r>
 801091a:	4605      	mov	r5, r0
 801091c:	2800      	cmp	r0, #0
 801091e:	d0ed      	beq.n	80108fc <_realloc_r+0x1e>
 8010920:	42bc      	cmp	r4, r7
 8010922:	4622      	mov	r2, r4
 8010924:	4631      	mov	r1, r6
 8010926:	bf28      	it	cs
 8010928:	463a      	movcs	r2, r7
 801092a:	f7fe fa42 	bl	800edb2 <memcpy>
 801092e:	4631      	mov	r1, r6
 8010930:	4640      	mov	r0, r8
 8010932:	f7ff f8e7 	bl	800fb04 <_free_r>
 8010936:	e7e1      	b.n	80108fc <_realloc_r+0x1e>
 8010938:	4635      	mov	r5, r6
 801093a:	e7df      	b.n	80108fc <_realloc_r+0x1e>

0801093c <__ascii_wctomb>:
 801093c:	b149      	cbz	r1, 8010952 <__ascii_wctomb+0x16>
 801093e:	2aff      	cmp	r2, #255	; 0xff
 8010940:	bf85      	ittet	hi
 8010942:	238a      	movhi	r3, #138	; 0x8a
 8010944:	6003      	strhi	r3, [r0, #0]
 8010946:	700a      	strbls	r2, [r1, #0]
 8010948:	f04f 30ff 	movhi.w	r0, #4294967295
 801094c:	bf98      	it	ls
 801094e:	2001      	movls	r0, #1
 8010950:	4770      	bx	lr
 8010952:	4608      	mov	r0, r1
 8010954:	4770      	bx	lr

08010956 <__sfputc_r>:
 8010956:	6893      	ldr	r3, [r2, #8]
 8010958:	3b01      	subs	r3, #1
 801095a:	2b00      	cmp	r3, #0
 801095c:	b410      	push	{r4}
 801095e:	6093      	str	r3, [r2, #8]
 8010960:	da08      	bge.n	8010974 <__sfputc_r+0x1e>
 8010962:	6994      	ldr	r4, [r2, #24]
 8010964:	42a3      	cmp	r3, r4
 8010966:	db01      	blt.n	801096c <__sfputc_r+0x16>
 8010968:	290a      	cmp	r1, #10
 801096a:	d103      	bne.n	8010974 <__sfputc_r+0x1e>
 801096c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010970:	f000 b934 	b.w	8010bdc <__swbuf_r>
 8010974:	6813      	ldr	r3, [r2, #0]
 8010976:	1c58      	adds	r0, r3, #1
 8010978:	6010      	str	r0, [r2, #0]
 801097a:	7019      	strb	r1, [r3, #0]
 801097c:	4608      	mov	r0, r1
 801097e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010982:	4770      	bx	lr

08010984 <__sfputs_r>:
 8010984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010986:	4606      	mov	r6, r0
 8010988:	460f      	mov	r7, r1
 801098a:	4614      	mov	r4, r2
 801098c:	18d5      	adds	r5, r2, r3
 801098e:	42ac      	cmp	r4, r5
 8010990:	d101      	bne.n	8010996 <__sfputs_r+0x12>
 8010992:	2000      	movs	r0, #0
 8010994:	e007      	b.n	80109a6 <__sfputs_r+0x22>
 8010996:	f814 1b01 	ldrb.w	r1, [r4], #1
 801099a:	463a      	mov	r2, r7
 801099c:	4630      	mov	r0, r6
 801099e:	f7ff ffda 	bl	8010956 <__sfputc_r>
 80109a2:	1c43      	adds	r3, r0, #1
 80109a4:	d1f3      	bne.n	801098e <__sfputs_r+0xa>
 80109a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080109a8 <_vfiprintf_r>:
 80109a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109ac:	460d      	mov	r5, r1
 80109ae:	b09d      	sub	sp, #116	; 0x74
 80109b0:	4614      	mov	r4, r2
 80109b2:	4698      	mov	r8, r3
 80109b4:	4606      	mov	r6, r0
 80109b6:	b118      	cbz	r0, 80109c0 <_vfiprintf_r+0x18>
 80109b8:	6a03      	ldr	r3, [r0, #32]
 80109ba:	b90b      	cbnz	r3, 80109c0 <_vfiprintf_r+0x18>
 80109bc:	f7fe f872 	bl	800eaa4 <__sinit>
 80109c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80109c2:	07d9      	lsls	r1, r3, #31
 80109c4:	d405      	bmi.n	80109d2 <_vfiprintf_r+0x2a>
 80109c6:	89ab      	ldrh	r3, [r5, #12]
 80109c8:	059a      	lsls	r2, r3, #22
 80109ca:	d402      	bmi.n	80109d2 <_vfiprintf_r+0x2a>
 80109cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80109ce:	f7fe f9ee 	bl	800edae <__retarget_lock_acquire_recursive>
 80109d2:	89ab      	ldrh	r3, [r5, #12]
 80109d4:	071b      	lsls	r3, r3, #28
 80109d6:	d501      	bpl.n	80109dc <_vfiprintf_r+0x34>
 80109d8:	692b      	ldr	r3, [r5, #16]
 80109da:	b99b      	cbnz	r3, 8010a04 <_vfiprintf_r+0x5c>
 80109dc:	4629      	mov	r1, r5
 80109de:	4630      	mov	r0, r6
 80109e0:	f000 f93a 	bl	8010c58 <__swsetup_r>
 80109e4:	b170      	cbz	r0, 8010a04 <_vfiprintf_r+0x5c>
 80109e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80109e8:	07dc      	lsls	r4, r3, #31
 80109ea:	d504      	bpl.n	80109f6 <_vfiprintf_r+0x4e>
 80109ec:	f04f 30ff 	mov.w	r0, #4294967295
 80109f0:	b01d      	add	sp, #116	; 0x74
 80109f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109f6:	89ab      	ldrh	r3, [r5, #12]
 80109f8:	0598      	lsls	r0, r3, #22
 80109fa:	d4f7      	bmi.n	80109ec <_vfiprintf_r+0x44>
 80109fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80109fe:	f7fe f9d7 	bl	800edb0 <__retarget_lock_release_recursive>
 8010a02:	e7f3      	b.n	80109ec <_vfiprintf_r+0x44>
 8010a04:	2300      	movs	r3, #0
 8010a06:	9309      	str	r3, [sp, #36]	; 0x24
 8010a08:	2320      	movs	r3, #32
 8010a0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010a0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a12:	2330      	movs	r3, #48	; 0x30
 8010a14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010bc8 <_vfiprintf_r+0x220>
 8010a18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010a1c:	f04f 0901 	mov.w	r9, #1
 8010a20:	4623      	mov	r3, r4
 8010a22:	469a      	mov	sl, r3
 8010a24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a28:	b10a      	cbz	r2, 8010a2e <_vfiprintf_r+0x86>
 8010a2a:	2a25      	cmp	r2, #37	; 0x25
 8010a2c:	d1f9      	bne.n	8010a22 <_vfiprintf_r+0x7a>
 8010a2e:	ebba 0b04 	subs.w	fp, sl, r4
 8010a32:	d00b      	beq.n	8010a4c <_vfiprintf_r+0xa4>
 8010a34:	465b      	mov	r3, fp
 8010a36:	4622      	mov	r2, r4
 8010a38:	4629      	mov	r1, r5
 8010a3a:	4630      	mov	r0, r6
 8010a3c:	f7ff ffa2 	bl	8010984 <__sfputs_r>
 8010a40:	3001      	adds	r0, #1
 8010a42:	f000 80a9 	beq.w	8010b98 <_vfiprintf_r+0x1f0>
 8010a46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a48:	445a      	add	r2, fp
 8010a4a:	9209      	str	r2, [sp, #36]	; 0x24
 8010a4c:	f89a 3000 	ldrb.w	r3, [sl]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	f000 80a1 	beq.w	8010b98 <_vfiprintf_r+0x1f0>
 8010a56:	2300      	movs	r3, #0
 8010a58:	f04f 32ff 	mov.w	r2, #4294967295
 8010a5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a60:	f10a 0a01 	add.w	sl, sl, #1
 8010a64:	9304      	str	r3, [sp, #16]
 8010a66:	9307      	str	r3, [sp, #28]
 8010a68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a6c:	931a      	str	r3, [sp, #104]	; 0x68
 8010a6e:	4654      	mov	r4, sl
 8010a70:	2205      	movs	r2, #5
 8010a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a76:	4854      	ldr	r0, [pc, #336]	; (8010bc8 <_vfiprintf_r+0x220>)
 8010a78:	f7ef fbe2 	bl	8000240 <memchr>
 8010a7c:	9a04      	ldr	r2, [sp, #16]
 8010a7e:	b9d8      	cbnz	r0, 8010ab8 <_vfiprintf_r+0x110>
 8010a80:	06d1      	lsls	r1, r2, #27
 8010a82:	bf44      	itt	mi
 8010a84:	2320      	movmi	r3, #32
 8010a86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a8a:	0713      	lsls	r3, r2, #28
 8010a8c:	bf44      	itt	mi
 8010a8e:	232b      	movmi	r3, #43	; 0x2b
 8010a90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a94:	f89a 3000 	ldrb.w	r3, [sl]
 8010a98:	2b2a      	cmp	r3, #42	; 0x2a
 8010a9a:	d015      	beq.n	8010ac8 <_vfiprintf_r+0x120>
 8010a9c:	9a07      	ldr	r2, [sp, #28]
 8010a9e:	4654      	mov	r4, sl
 8010aa0:	2000      	movs	r0, #0
 8010aa2:	f04f 0c0a 	mov.w	ip, #10
 8010aa6:	4621      	mov	r1, r4
 8010aa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010aac:	3b30      	subs	r3, #48	; 0x30
 8010aae:	2b09      	cmp	r3, #9
 8010ab0:	d94d      	bls.n	8010b4e <_vfiprintf_r+0x1a6>
 8010ab2:	b1b0      	cbz	r0, 8010ae2 <_vfiprintf_r+0x13a>
 8010ab4:	9207      	str	r2, [sp, #28]
 8010ab6:	e014      	b.n	8010ae2 <_vfiprintf_r+0x13a>
 8010ab8:	eba0 0308 	sub.w	r3, r0, r8
 8010abc:	fa09 f303 	lsl.w	r3, r9, r3
 8010ac0:	4313      	orrs	r3, r2
 8010ac2:	9304      	str	r3, [sp, #16]
 8010ac4:	46a2      	mov	sl, r4
 8010ac6:	e7d2      	b.n	8010a6e <_vfiprintf_r+0xc6>
 8010ac8:	9b03      	ldr	r3, [sp, #12]
 8010aca:	1d19      	adds	r1, r3, #4
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	9103      	str	r1, [sp, #12]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	bfbb      	ittet	lt
 8010ad4:	425b      	neglt	r3, r3
 8010ad6:	f042 0202 	orrlt.w	r2, r2, #2
 8010ada:	9307      	strge	r3, [sp, #28]
 8010adc:	9307      	strlt	r3, [sp, #28]
 8010ade:	bfb8      	it	lt
 8010ae0:	9204      	strlt	r2, [sp, #16]
 8010ae2:	7823      	ldrb	r3, [r4, #0]
 8010ae4:	2b2e      	cmp	r3, #46	; 0x2e
 8010ae6:	d10c      	bne.n	8010b02 <_vfiprintf_r+0x15a>
 8010ae8:	7863      	ldrb	r3, [r4, #1]
 8010aea:	2b2a      	cmp	r3, #42	; 0x2a
 8010aec:	d134      	bne.n	8010b58 <_vfiprintf_r+0x1b0>
 8010aee:	9b03      	ldr	r3, [sp, #12]
 8010af0:	1d1a      	adds	r2, r3, #4
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	9203      	str	r2, [sp, #12]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	bfb8      	it	lt
 8010afa:	f04f 33ff 	movlt.w	r3, #4294967295
 8010afe:	3402      	adds	r4, #2
 8010b00:	9305      	str	r3, [sp, #20]
 8010b02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010bd8 <_vfiprintf_r+0x230>
 8010b06:	7821      	ldrb	r1, [r4, #0]
 8010b08:	2203      	movs	r2, #3
 8010b0a:	4650      	mov	r0, sl
 8010b0c:	f7ef fb98 	bl	8000240 <memchr>
 8010b10:	b138      	cbz	r0, 8010b22 <_vfiprintf_r+0x17a>
 8010b12:	9b04      	ldr	r3, [sp, #16]
 8010b14:	eba0 000a 	sub.w	r0, r0, sl
 8010b18:	2240      	movs	r2, #64	; 0x40
 8010b1a:	4082      	lsls	r2, r0
 8010b1c:	4313      	orrs	r3, r2
 8010b1e:	3401      	adds	r4, #1
 8010b20:	9304      	str	r3, [sp, #16]
 8010b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b26:	4829      	ldr	r0, [pc, #164]	; (8010bcc <_vfiprintf_r+0x224>)
 8010b28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010b2c:	2206      	movs	r2, #6
 8010b2e:	f7ef fb87 	bl	8000240 <memchr>
 8010b32:	2800      	cmp	r0, #0
 8010b34:	d03f      	beq.n	8010bb6 <_vfiprintf_r+0x20e>
 8010b36:	4b26      	ldr	r3, [pc, #152]	; (8010bd0 <_vfiprintf_r+0x228>)
 8010b38:	bb1b      	cbnz	r3, 8010b82 <_vfiprintf_r+0x1da>
 8010b3a:	9b03      	ldr	r3, [sp, #12]
 8010b3c:	3307      	adds	r3, #7
 8010b3e:	f023 0307 	bic.w	r3, r3, #7
 8010b42:	3308      	adds	r3, #8
 8010b44:	9303      	str	r3, [sp, #12]
 8010b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b48:	443b      	add	r3, r7
 8010b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8010b4c:	e768      	b.n	8010a20 <_vfiprintf_r+0x78>
 8010b4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b52:	460c      	mov	r4, r1
 8010b54:	2001      	movs	r0, #1
 8010b56:	e7a6      	b.n	8010aa6 <_vfiprintf_r+0xfe>
 8010b58:	2300      	movs	r3, #0
 8010b5a:	3401      	adds	r4, #1
 8010b5c:	9305      	str	r3, [sp, #20]
 8010b5e:	4619      	mov	r1, r3
 8010b60:	f04f 0c0a 	mov.w	ip, #10
 8010b64:	4620      	mov	r0, r4
 8010b66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b6a:	3a30      	subs	r2, #48	; 0x30
 8010b6c:	2a09      	cmp	r2, #9
 8010b6e:	d903      	bls.n	8010b78 <_vfiprintf_r+0x1d0>
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d0c6      	beq.n	8010b02 <_vfiprintf_r+0x15a>
 8010b74:	9105      	str	r1, [sp, #20]
 8010b76:	e7c4      	b.n	8010b02 <_vfiprintf_r+0x15a>
 8010b78:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b7c:	4604      	mov	r4, r0
 8010b7e:	2301      	movs	r3, #1
 8010b80:	e7f0      	b.n	8010b64 <_vfiprintf_r+0x1bc>
 8010b82:	ab03      	add	r3, sp, #12
 8010b84:	9300      	str	r3, [sp, #0]
 8010b86:	462a      	mov	r2, r5
 8010b88:	4b12      	ldr	r3, [pc, #72]	; (8010bd4 <_vfiprintf_r+0x22c>)
 8010b8a:	a904      	add	r1, sp, #16
 8010b8c:	4630      	mov	r0, r6
 8010b8e:	f7fd fb37 	bl	800e200 <_printf_float>
 8010b92:	4607      	mov	r7, r0
 8010b94:	1c78      	adds	r0, r7, #1
 8010b96:	d1d6      	bne.n	8010b46 <_vfiprintf_r+0x19e>
 8010b98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010b9a:	07d9      	lsls	r1, r3, #31
 8010b9c:	d405      	bmi.n	8010baa <_vfiprintf_r+0x202>
 8010b9e:	89ab      	ldrh	r3, [r5, #12]
 8010ba0:	059a      	lsls	r2, r3, #22
 8010ba2:	d402      	bmi.n	8010baa <_vfiprintf_r+0x202>
 8010ba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ba6:	f7fe f903 	bl	800edb0 <__retarget_lock_release_recursive>
 8010baa:	89ab      	ldrh	r3, [r5, #12]
 8010bac:	065b      	lsls	r3, r3, #25
 8010bae:	f53f af1d 	bmi.w	80109ec <_vfiprintf_r+0x44>
 8010bb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010bb4:	e71c      	b.n	80109f0 <_vfiprintf_r+0x48>
 8010bb6:	ab03      	add	r3, sp, #12
 8010bb8:	9300      	str	r3, [sp, #0]
 8010bba:	462a      	mov	r2, r5
 8010bbc:	4b05      	ldr	r3, [pc, #20]	; (8010bd4 <_vfiprintf_r+0x22c>)
 8010bbe:	a904      	add	r1, sp, #16
 8010bc0:	4630      	mov	r0, r6
 8010bc2:	f7fd fdc1 	bl	800e748 <_printf_i>
 8010bc6:	e7e4      	b.n	8010b92 <_vfiprintf_r+0x1ea>
 8010bc8:	08012324 	.word	0x08012324
 8010bcc:	0801232e 	.word	0x0801232e
 8010bd0:	0800e201 	.word	0x0800e201
 8010bd4:	08010985 	.word	0x08010985
 8010bd8:	0801232a 	.word	0x0801232a

08010bdc <__swbuf_r>:
 8010bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bde:	460e      	mov	r6, r1
 8010be0:	4614      	mov	r4, r2
 8010be2:	4605      	mov	r5, r0
 8010be4:	b118      	cbz	r0, 8010bee <__swbuf_r+0x12>
 8010be6:	6a03      	ldr	r3, [r0, #32]
 8010be8:	b90b      	cbnz	r3, 8010bee <__swbuf_r+0x12>
 8010bea:	f7fd ff5b 	bl	800eaa4 <__sinit>
 8010bee:	69a3      	ldr	r3, [r4, #24]
 8010bf0:	60a3      	str	r3, [r4, #8]
 8010bf2:	89a3      	ldrh	r3, [r4, #12]
 8010bf4:	071a      	lsls	r2, r3, #28
 8010bf6:	d525      	bpl.n	8010c44 <__swbuf_r+0x68>
 8010bf8:	6923      	ldr	r3, [r4, #16]
 8010bfa:	b31b      	cbz	r3, 8010c44 <__swbuf_r+0x68>
 8010bfc:	6823      	ldr	r3, [r4, #0]
 8010bfe:	6922      	ldr	r2, [r4, #16]
 8010c00:	1a98      	subs	r0, r3, r2
 8010c02:	6963      	ldr	r3, [r4, #20]
 8010c04:	b2f6      	uxtb	r6, r6
 8010c06:	4283      	cmp	r3, r0
 8010c08:	4637      	mov	r7, r6
 8010c0a:	dc04      	bgt.n	8010c16 <__swbuf_r+0x3a>
 8010c0c:	4621      	mov	r1, r4
 8010c0e:	4628      	mov	r0, r5
 8010c10:	f7ff fdd2 	bl	80107b8 <_fflush_r>
 8010c14:	b9e0      	cbnz	r0, 8010c50 <__swbuf_r+0x74>
 8010c16:	68a3      	ldr	r3, [r4, #8]
 8010c18:	3b01      	subs	r3, #1
 8010c1a:	60a3      	str	r3, [r4, #8]
 8010c1c:	6823      	ldr	r3, [r4, #0]
 8010c1e:	1c5a      	adds	r2, r3, #1
 8010c20:	6022      	str	r2, [r4, #0]
 8010c22:	701e      	strb	r6, [r3, #0]
 8010c24:	6962      	ldr	r2, [r4, #20]
 8010c26:	1c43      	adds	r3, r0, #1
 8010c28:	429a      	cmp	r2, r3
 8010c2a:	d004      	beq.n	8010c36 <__swbuf_r+0x5a>
 8010c2c:	89a3      	ldrh	r3, [r4, #12]
 8010c2e:	07db      	lsls	r3, r3, #31
 8010c30:	d506      	bpl.n	8010c40 <__swbuf_r+0x64>
 8010c32:	2e0a      	cmp	r6, #10
 8010c34:	d104      	bne.n	8010c40 <__swbuf_r+0x64>
 8010c36:	4621      	mov	r1, r4
 8010c38:	4628      	mov	r0, r5
 8010c3a:	f7ff fdbd 	bl	80107b8 <_fflush_r>
 8010c3e:	b938      	cbnz	r0, 8010c50 <__swbuf_r+0x74>
 8010c40:	4638      	mov	r0, r7
 8010c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c44:	4621      	mov	r1, r4
 8010c46:	4628      	mov	r0, r5
 8010c48:	f000 f806 	bl	8010c58 <__swsetup_r>
 8010c4c:	2800      	cmp	r0, #0
 8010c4e:	d0d5      	beq.n	8010bfc <__swbuf_r+0x20>
 8010c50:	f04f 37ff 	mov.w	r7, #4294967295
 8010c54:	e7f4      	b.n	8010c40 <__swbuf_r+0x64>
	...

08010c58 <__swsetup_r>:
 8010c58:	b538      	push	{r3, r4, r5, lr}
 8010c5a:	4b2a      	ldr	r3, [pc, #168]	; (8010d04 <__swsetup_r+0xac>)
 8010c5c:	4605      	mov	r5, r0
 8010c5e:	6818      	ldr	r0, [r3, #0]
 8010c60:	460c      	mov	r4, r1
 8010c62:	b118      	cbz	r0, 8010c6c <__swsetup_r+0x14>
 8010c64:	6a03      	ldr	r3, [r0, #32]
 8010c66:	b90b      	cbnz	r3, 8010c6c <__swsetup_r+0x14>
 8010c68:	f7fd ff1c 	bl	800eaa4 <__sinit>
 8010c6c:	89a3      	ldrh	r3, [r4, #12]
 8010c6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010c72:	0718      	lsls	r0, r3, #28
 8010c74:	d422      	bmi.n	8010cbc <__swsetup_r+0x64>
 8010c76:	06d9      	lsls	r1, r3, #27
 8010c78:	d407      	bmi.n	8010c8a <__swsetup_r+0x32>
 8010c7a:	2309      	movs	r3, #9
 8010c7c:	602b      	str	r3, [r5, #0]
 8010c7e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010c82:	81a3      	strh	r3, [r4, #12]
 8010c84:	f04f 30ff 	mov.w	r0, #4294967295
 8010c88:	e034      	b.n	8010cf4 <__swsetup_r+0x9c>
 8010c8a:	0758      	lsls	r0, r3, #29
 8010c8c:	d512      	bpl.n	8010cb4 <__swsetup_r+0x5c>
 8010c8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c90:	b141      	cbz	r1, 8010ca4 <__swsetup_r+0x4c>
 8010c92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c96:	4299      	cmp	r1, r3
 8010c98:	d002      	beq.n	8010ca0 <__swsetup_r+0x48>
 8010c9a:	4628      	mov	r0, r5
 8010c9c:	f7fe ff32 	bl	800fb04 <_free_r>
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	6363      	str	r3, [r4, #52]	; 0x34
 8010ca4:	89a3      	ldrh	r3, [r4, #12]
 8010ca6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010caa:	81a3      	strh	r3, [r4, #12]
 8010cac:	2300      	movs	r3, #0
 8010cae:	6063      	str	r3, [r4, #4]
 8010cb0:	6923      	ldr	r3, [r4, #16]
 8010cb2:	6023      	str	r3, [r4, #0]
 8010cb4:	89a3      	ldrh	r3, [r4, #12]
 8010cb6:	f043 0308 	orr.w	r3, r3, #8
 8010cba:	81a3      	strh	r3, [r4, #12]
 8010cbc:	6923      	ldr	r3, [r4, #16]
 8010cbe:	b94b      	cbnz	r3, 8010cd4 <__swsetup_r+0x7c>
 8010cc0:	89a3      	ldrh	r3, [r4, #12]
 8010cc2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010cc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010cca:	d003      	beq.n	8010cd4 <__swsetup_r+0x7c>
 8010ccc:	4621      	mov	r1, r4
 8010cce:	4628      	mov	r0, r5
 8010cd0:	f000 f88c 	bl	8010dec <__smakebuf_r>
 8010cd4:	89a0      	ldrh	r0, [r4, #12]
 8010cd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010cda:	f010 0301 	ands.w	r3, r0, #1
 8010cde:	d00a      	beq.n	8010cf6 <__swsetup_r+0x9e>
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	60a3      	str	r3, [r4, #8]
 8010ce4:	6963      	ldr	r3, [r4, #20]
 8010ce6:	425b      	negs	r3, r3
 8010ce8:	61a3      	str	r3, [r4, #24]
 8010cea:	6923      	ldr	r3, [r4, #16]
 8010cec:	b943      	cbnz	r3, 8010d00 <__swsetup_r+0xa8>
 8010cee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010cf2:	d1c4      	bne.n	8010c7e <__swsetup_r+0x26>
 8010cf4:	bd38      	pop	{r3, r4, r5, pc}
 8010cf6:	0781      	lsls	r1, r0, #30
 8010cf8:	bf58      	it	pl
 8010cfa:	6963      	ldrpl	r3, [r4, #20]
 8010cfc:	60a3      	str	r3, [r4, #8]
 8010cfe:	e7f4      	b.n	8010cea <__swsetup_r+0x92>
 8010d00:	2000      	movs	r0, #0
 8010d02:	e7f7      	b.n	8010cf4 <__swsetup_r+0x9c>
 8010d04:	200001e8 	.word	0x200001e8

08010d08 <_raise_r>:
 8010d08:	291f      	cmp	r1, #31
 8010d0a:	b538      	push	{r3, r4, r5, lr}
 8010d0c:	4604      	mov	r4, r0
 8010d0e:	460d      	mov	r5, r1
 8010d10:	d904      	bls.n	8010d1c <_raise_r+0x14>
 8010d12:	2316      	movs	r3, #22
 8010d14:	6003      	str	r3, [r0, #0]
 8010d16:	f04f 30ff 	mov.w	r0, #4294967295
 8010d1a:	bd38      	pop	{r3, r4, r5, pc}
 8010d1c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010d1e:	b112      	cbz	r2, 8010d26 <_raise_r+0x1e>
 8010d20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d24:	b94b      	cbnz	r3, 8010d3a <_raise_r+0x32>
 8010d26:	4620      	mov	r0, r4
 8010d28:	f000 f830 	bl	8010d8c <_getpid_r>
 8010d2c:	462a      	mov	r2, r5
 8010d2e:	4601      	mov	r1, r0
 8010d30:	4620      	mov	r0, r4
 8010d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d36:	f000 b817 	b.w	8010d68 <_kill_r>
 8010d3a:	2b01      	cmp	r3, #1
 8010d3c:	d00a      	beq.n	8010d54 <_raise_r+0x4c>
 8010d3e:	1c59      	adds	r1, r3, #1
 8010d40:	d103      	bne.n	8010d4a <_raise_r+0x42>
 8010d42:	2316      	movs	r3, #22
 8010d44:	6003      	str	r3, [r0, #0]
 8010d46:	2001      	movs	r0, #1
 8010d48:	e7e7      	b.n	8010d1a <_raise_r+0x12>
 8010d4a:	2400      	movs	r4, #0
 8010d4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010d50:	4628      	mov	r0, r5
 8010d52:	4798      	blx	r3
 8010d54:	2000      	movs	r0, #0
 8010d56:	e7e0      	b.n	8010d1a <_raise_r+0x12>

08010d58 <raise>:
 8010d58:	4b02      	ldr	r3, [pc, #8]	; (8010d64 <raise+0xc>)
 8010d5a:	4601      	mov	r1, r0
 8010d5c:	6818      	ldr	r0, [r3, #0]
 8010d5e:	f7ff bfd3 	b.w	8010d08 <_raise_r>
 8010d62:	bf00      	nop
 8010d64:	200001e8 	.word	0x200001e8

08010d68 <_kill_r>:
 8010d68:	b538      	push	{r3, r4, r5, lr}
 8010d6a:	4d07      	ldr	r5, [pc, #28]	; (8010d88 <_kill_r+0x20>)
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	4604      	mov	r4, r0
 8010d70:	4608      	mov	r0, r1
 8010d72:	4611      	mov	r1, r2
 8010d74:	602b      	str	r3, [r5, #0]
 8010d76:	f7f1 fd61 	bl	800283c <_kill>
 8010d7a:	1c43      	adds	r3, r0, #1
 8010d7c:	d102      	bne.n	8010d84 <_kill_r+0x1c>
 8010d7e:	682b      	ldr	r3, [r5, #0]
 8010d80:	b103      	cbz	r3, 8010d84 <_kill_r+0x1c>
 8010d82:	6023      	str	r3, [r4, #0]
 8010d84:	bd38      	pop	{r3, r4, r5, pc}
 8010d86:	bf00      	nop
 8010d88:	200052b0 	.word	0x200052b0

08010d8c <_getpid_r>:
 8010d8c:	f7f1 bd4e 	b.w	800282c <_getpid>

08010d90 <_malloc_usable_size_r>:
 8010d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d94:	1f18      	subs	r0, r3, #4
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	bfbc      	itt	lt
 8010d9a:	580b      	ldrlt	r3, [r1, r0]
 8010d9c:	18c0      	addlt	r0, r0, r3
 8010d9e:	4770      	bx	lr

08010da0 <__swhatbuf_r>:
 8010da0:	b570      	push	{r4, r5, r6, lr}
 8010da2:	460c      	mov	r4, r1
 8010da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010da8:	2900      	cmp	r1, #0
 8010daa:	b096      	sub	sp, #88	; 0x58
 8010dac:	4615      	mov	r5, r2
 8010dae:	461e      	mov	r6, r3
 8010db0:	da0d      	bge.n	8010dce <__swhatbuf_r+0x2e>
 8010db2:	89a3      	ldrh	r3, [r4, #12]
 8010db4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010db8:	f04f 0100 	mov.w	r1, #0
 8010dbc:	bf0c      	ite	eq
 8010dbe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010dc2:	2340      	movne	r3, #64	; 0x40
 8010dc4:	2000      	movs	r0, #0
 8010dc6:	6031      	str	r1, [r6, #0]
 8010dc8:	602b      	str	r3, [r5, #0]
 8010dca:	b016      	add	sp, #88	; 0x58
 8010dcc:	bd70      	pop	{r4, r5, r6, pc}
 8010dce:	466a      	mov	r2, sp
 8010dd0:	f000 f848 	bl	8010e64 <_fstat_r>
 8010dd4:	2800      	cmp	r0, #0
 8010dd6:	dbec      	blt.n	8010db2 <__swhatbuf_r+0x12>
 8010dd8:	9901      	ldr	r1, [sp, #4]
 8010dda:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010dde:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010de2:	4259      	negs	r1, r3
 8010de4:	4159      	adcs	r1, r3
 8010de6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010dea:	e7eb      	b.n	8010dc4 <__swhatbuf_r+0x24>

08010dec <__smakebuf_r>:
 8010dec:	898b      	ldrh	r3, [r1, #12]
 8010dee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010df0:	079d      	lsls	r5, r3, #30
 8010df2:	4606      	mov	r6, r0
 8010df4:	460c      	mov	r4, r1
 8010df6:	d507      	bpl.n	8010e08 <__smakebuf_r+0x1c>
 8010df8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010dfc:	6023      	str	r3, [r4, #0]
 8010dfe:	6123      	str	r3, [r4, #16]
 8010e00:	2301      	movs	r3, #1
 8010e02:	6163      	str	r3, [r4, #20]
 8010e04:	b002      	add	sp, #8
 8010e06:	bd70      	pop	{r4, r5, r6, pc}
 8010e08:	ab01      	add	r3, sp, #4
 8010e0a:	466a      	mov	r2, sp
 8010e0c:	f7ff ffc8 	bl	8010da0 <__swhatbuf_r>
 8010e10:	9900      	ldr	r1, [sp, #0]
 8010e12:	4605      	mov	r5, r0
 8010e14:	4630      	mov	r0, r6
 8010e16:	f7fe fee9 	bl	800fbec <_malloc_r>
 8010e1a:	b948      	cbnz	r0, 8010e30 <__smakebuf_r+0x44>
 8010e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e20:	059a      	lsls	r2, r3, #22
 8010e22:	d4ef      	bmi.n	8010e04 <__smakebuf_r+0x18>
 8010e24:	f023 0303 	bic.w	r3, r3, #3
 8010e28:	f043 0302 	orr.w	r3, r3, #2
 8010e2c:	81a3      	strh	r3, [r4, #12]
 8010e2e:	e7e3      	b.n	8010df8 <__smakebuf_r+0xc>
 8010e30:	89a3      	ldrh	r3, [r4, #12]
 8010e32:	6020      	str	r0, [r4, #0]
 8010e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e38:	81a3      	strh	r3, [r4, #12]
 8010e3a:	9b00      	ldr	r3, [sp, #0]
 8010e3c:	6163      	str	r3, [r4, #20]
 8010e3e:	9b01      	ldr	r3, [sp, #4]
 8010e40:	6120      	str	r0, [r4, #16]
 8010e42:	b15b      	cbz	r3, 8010e5c <__smakebuf_r+0x70>
 8010e44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e48:	4630      	mov	r0, r6
 8010e4a:	f000 f81d 	bl	8010e88 <_isatty_r>
 8010e4e:	b128      	cbz	r0, 8010e5c <__smakebuf_r+0x70>
 8010e50:	89a3      	ldrh	r3, [r4, #12]
 8010e52:	f023 0303 	bic.w	r3, r3, #3
 8010e56:	f043 0301 	orr.w	r3, r3, #1
 8010e5a:	81a3      	strh	r3, [r4, #12]
 8010e5c:	89a3      	ldrh	r3, [r4, #12]
 8010e5e:	431d      	orrs	r5, r3
 8010e60:	81a5      	strh	r5, [r4, #12]
 8010e62:	e7cf      	b.n	8010e04 <__smakebuf_r+0x18>

08010e64 <_fstat_r>:
 8010e64:	b538      	push	{r3, r4, r5, lr}
 8010e66:	4d07      	ldr	r5, [pc, #28]	; (8010e84 <_fstat_r+0x20>)
 8010e68:	2300      	movs	r3, #0
 8010e6a:	4604      	mov	r4, r0
 8010e6c:	4608      	mov	r0, r1
 8010e6e:	4611      	mov	r1, r2
 8010e70:	602b      	str	r3, [r5, #0]
 8010e72:	f7f1 fd42 	bl	80028fa <_fstat>
 8010e76:	1c43      	adds	r3, r0, #1
 8010e78:	d102      	bne.n	8010e80 <_fstat_r+0x1c>
 8010e7a:	682b      	ldr	r3, [r5, #0]
 8010e7c:	b103      	cbz	r3, 8010e80 <_fstat_r+0x1c>
 8010e7e:	6023      	str	r3, [r4, #0]
 8010e80:	bd38      	pop	{r3, r4, r5, pc}
 8010e82:	bf00      	nop
 8010e84:	200052b0 	.word	0x200052b0

08010e88 <_isatty_r>:
 8010e88:	b538      	push	{r3, r4, r5, lr}
 8010e8a:	4d06      	ldr	r5, [pc, #24]	; (8010ea4 <_isatty_r+0x1c>)
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	4604      	mov	r4, r0
 8010e90:	4608      	mov	r0, r1
 8010e92:	602b      	str	r3, [r5, #0]
 8010e94:	f7f1 fd41 	bl	800291a <_isatty>
 8010e98:	1c43      	adds	r3, r0, #1
 8010e9a:	d102      	bne.n	8010ea2 <_isatty_r+0x1a>
 8010e9c:	682b      	ldr	r3, [r5, #0]
 8010e9e:	b103      	cbz	r3, 8010ea2 <_isatty_r+0x1a>
 8010ea0:	6023      	str	r3, [r4, #0]
 8010ea2:	bd38      	pop	{r3, r4, r5, pc}
 8010ea4:	200052b0 	.word	0x200052b0

08010ea8 <pow>:
 8010ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eaa:	ed2d 8b02 	vpush	{d8}
 8010eae:	eeb0 8a40 	vmov.f32	s16, s0
 8010eb2:	eef0 8a60 	vmov.f32	s17, s1
 8010eb6:	ec55 4b11 	vmov	r4, r5, d1
 8010eba:	f000 f871 	bl	8010fa0 <__ieee754_pow>
 8010ebe:	4622      	mov	r2, r4
 8010ec0:	462b      	mov	r3, r5
 8010ec2:	4620      	mov	r0, r4
 8010ec4:	4629      	mov	r1, r5
 8010ec6:	ec57 6b10 	vmov	r6, r7, d0
 8010eca:	f7ef fe67 	bl	8000b9c <__aeabi_dcmpun>
 8010ece:	2800      	cmp	r0, #0
 8010ed0:	d13b      	bne.n	8010f4a <pow+0xa2>
 8010ed2:	ec51 0b18 	vmov	r0, r1, d8
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	2300      	movs	r3, #0
 8010eda:	f7ef fe2d 	bl	8000b38 <__aeabi_dcmpeq>
 8010ede:	b1b8      	cbz	r0, 8010f10 <pow+0x68>
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	4620      	mov	r0, r4
 8010ee6:	4629      	mov	r1, r5
 8010ee8:	f7ef fe26 	bl	8000b38 <__aeabi_dcmpeq>
 8010eec:	2800      	cmp	r0, #0
 8010eee:	d146      	bne.n	8010f7e <pow+0xd6>
 8010ef0:	ec45 4b10 	vmov	d0, r4, r5
 8010ef4:	f000 f848 	bl	8010f88 <finite>
 8010ef8:	b338      	cbz	r0, 8010f4a <pow+0xa2>
 8010efa:	2200      	movs	r2, #0
 8010efc:	2300      	movs	r3, #0
 8010efe:	4620      	mov	r0, r4
 8010f00:	4629      	mov	r1, r5
 8010f02:	f7ef fe23 	bl	8000b4c <__aeabi_dcmplt>
 8010f06:	b300      	cbz	r0, 8010f4a <pow+0xa2>
 8010f08:	f7fd ff26 	bl	800ed58 <__errno>
 8010f0c:	2322      	movs	r3, #34	; 0x22
 8010f0e:	e01b      	b.n	8010f48 <pow+0xa0>
 8010f10:	ec47 6b10 	vmov	d0, r6, r7
 8010f14:	f000 f838 	bl	8010f88 <finite>
 8010f18:	b9e0      	cbnz	r0, 8010f54 <pow+0xac>
 8010f1a:	eeb0 0a48 	vmov.f32	s0, s16
 8010f1e:	eef0 0a68 	vmov.f32	s1, s17
 8010f22:	f000 f831 	bl	8010f88 <finite>
 8010f26:	b1a8      	cbz	r0, 8010f54 <pow+0xac>
 8010f28:	ec45 4b10 	vmov	d0, r4, r5
 8010f2c:	f000 f82c 	bl	8010f88 <finite>
 8010f30:	b180      	cbz	r0, 8010f54 <pow+0xac>
 8010f32:	4632      	mov	r2, r6
 8010f34:	463b      	mov	r3, r7
 8010f36:	4630      	mov	r0, r6
 8010f38:	4639      	mov	r1, r7
 8010f3a:	f7ef fe2f 	bl	8000b9c <__aeabi_dcmpun>
 8010f3e:	2800      	cmp	r0, #0
 8010f40:	d0e2      	beq.n	8010f08 <pow+0x60>
 8010f42:	f7fd ff09 	bl	800ed58 <__errno>
 8010f46:	2321      	movs	r3, #33	; 0x21
 8010f48:	6003      	str	r3, [r0, #0]
 8010f4a:	ecbd 8b02 	vpop	{d8}
 8010f4e:	ec47 6b10 	vmov	d0, r6, r7
 8010f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f54:	2200      	movs	r2, #0
 8010f56:	2300      	movs	r3, #0
 8010f58:	4630      	mov	r0, r6
 8010f5a:	4639      	mov	r1, r7
 8010f5c:	f7ef fdec 	bl	8000b38 <__aeabi_dcmpeq>
 8010f60:	2800      	cmp	r0, #0
 8010f62:	d0f2      	beq.n	8010f4a <pow+0xa2>
 8010f64:	eeb0 0a48 	vmov.f32	s0, s16
 8010f68:	eef0 0a68 	vmov.f32	s1, s17
 8010f6c:	f000 f80c 	bl	8010f88 <finite>
 8010f70:	2800      	cmp	r0, #0
 8010f72:	d0ea      	beq.n	8010f4a <pow+0xa2>
 8010f74:	ec45 4b10 	vmov	d0, r4, r5
 8010f78:	f000 f806 	bl	8010f88 <finite>
 8010f7c:	e7c3      	b.n	8010f06 <pow+0x5e>
 8010f7e:	4f01      	ldr	r7, [pc, #4]	; (8010f84 <pow+0xdc>)
 8010f80:	2600      	movs	r6, #0
 8010f82:	e7e2      	b.n	8010f4a <pow+0xa2>
 8010f84:	3ff00000 	.word	0x3ff00000

08010f88 <finite>:
 8010f88:	b082      	sub	sp, #8
 8010f8a:	ed8d 0b00 	vstr	d0, [sp]
 8010f8e:	9801      	ldr	r0, [sp, #4]
 8010f90:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010f94:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010f98:	0fc0      	lsrs	r0, r0, #31
 8010f9a:	b002      	add	sp, #8
 8010f9c:	4770      	bx	lr
	...

08010fa0 <__ieee754_pow>:
 8010fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fa4:	ed2d 8b06 	vpush	{d8-d10}
 8010fa8:	b089      	sub	sp, #36	; 0x24
 8010faa:	ed8d 1b00 	vstr	d1, [sp]
 8010fae:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010fb2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010fb6:	ea58 0102 	orrs.w	r1, r8, r2
 8010fba:	ec57 6b10 	vmov	r6, r7, d0
 8010fbe:	d115      	bne.n	8010fec <__ieee754_pow+0x4c>
 8010fc0:	19b3      	adds	r3, r6, r6
 8010fc2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010fc6:	4152      	adcs	r2, r2
 8010fc8:	4299      	cmp	r1, r3
 8010fca:	4b89      	ldr	r3, [pc, #548]	; (80111f0 <__ieee754_pow+0x250>)
 8010fcc:	4193      	sbcs	r3, r2
 8010fce:	f080 84d1 	bcs.w	8011974 <__ieee754_pow+0x9d4>
 8010fd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010fd6:	4630      	mov	r0, r6
 8010fd8:	4639      	mov	r1, r7
 8010fda:	f7ef f98f 	bl	80002fc <__adddf3>
 8010fde:	ec41 0b10 	vmov	d0, r0, r1
 8010fe2:	b009      	add	sp, #36	; 0x24
 8010fe4:	ecbd 8b06 	vpop	{d8-d10}
 8010fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fec:	4b81      	ldr	r3, [pc, #516]	; (80111f4 <__ieee754_pow+0x254>)
 8010fee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010ff2:	429c      	cmp	r4, r3
 8010ff4:	ee10 aa10 	vmov	sl, s0
 8010ff8:	463d      	mov	r5, r7
 8010ffa:	dc06      	bgt.n	801100a <__ieee754_pow+0x6a>
 8010ffc:	d101      	bne.n	8011002 <__ieee754_pow+0x62>
 8010ffe:	2e00      	cmp	r6, #0
 8011000:	d1e7      	bne.n	8010fd2 <__ieee754_pow+0x32>
 8011002:	4598      	cmp	r8, r3
 8011004:	dc01      	bgt.n	801100a <__ieee754_pow+0x6a>
 8011006:	d10f      	bne.n	8011028 <__ieee754_pow+0x88>
 8011008:	b172      	cbz	r2, 8011028 <__ieee754_pow+0x88>
 801100a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801100e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8011012:	ea55 050a 	orrs.w	r5, r5, sl
 8011016:	d1dc      	bne.n	8010fd2 <__ieee754_pow+0x32>
 8011018:	e9dd 3200 	ldrd	r3, r2, [sp]
 801101c:	18db      	adds	r3, r3, r3
 801101e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8011022:	4152      	adcs	r2, r2
 8011024:	429d      	cmp	r5, r3
 8011026:	e7d0      	b.n	8010fca <__ieee754_pow+0x2a>
 8011028:	2d00      	cmp	r5, #0
 801102a:	da3b      	bge.n	80110a4 <__ieee754_pow+0x104>
 801102c:	4b72      	ldr	r3, [pc, #456]	; (80111f8 <__ieee754_pow+0x258>)
 801102e:	4598      	cmp	r8, r3
 8011030:	dc51      	bgt.n	80110d6 <__ieee754_pow+0x136>
 8011032:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011036:	4598      	cmp	r8, r3
 8011038:	f340 84ab 	ble.w	8011992 <__ieee754_pow+0x9f2>
 801103c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011040:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011044:	2b14      	cmp	r3, #20
 8011046:	dd0f      	ble.n	8011068 <__ieee754_pow+0xc8>
 8011048:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801104c:	fa22 f103 	lsr.w	r1, r2, r3
 8011050:	fa01 f303 	lsl.w	r3, r1, r3
 8011054:	4293      	cmp	r3, r2
 8011056:	f040 849c 	bne.w	8011992 <__ieee754_pow+0x9f2>
 801105a:	f001 0101 	and.w	r1, r1, #1
 801105e:	f1c1 0302 	rsb	r3, r1, #2
 8011062:	9304      	str	r3, [sp, #16]
 8011064:	b182      	cbz	r2, 8011088 <__ieee754_pow+0xe8>
 8011066:	e05f      	b.n	8011128 <__ieee754_pow+0x188>
 8011068:	2a00      	cmp	r2, #0
 801106a:	d15b      	bne.n	8011124 <__ieee754_pow+0x184>
 801106c:	f1c3 0314 	rsb	r3, r3, #20
 8011070:	fa48 f103 	asr.w	r1, r8, r3
 8011074:	fa01 f303 	lsl.w	r3, r1, r3
 8011078:	4543      	cmp	r3, r8
 801107a:	f040 8487 	bne.w	801198c <__ieee754_pow+0x9ec>
 801107e:	f001 0101 	and.w	r1, r1, #1
 8011082:	f1c1 0302 	rsb	r3, r1, #2
 8011086:	9304      	str	r3, [sp, #16]
 8011088:	4b5c      	ldr	r3, [pc, #368]	; (80111fc <__ieee754_pow+0x25c>)
 801108a:	4598      	cmp	r8, r3
 801108c:	d132      	bne.n	80110f4 <__ieee754_pow+0x154>
 801108e:	f1b9 0f00 	cmp.w	r9, #0
 8011092:	f280 8477 	bge.w	8011984 <__ieee754_pow+0x9e4>
 8011096:	4959      	ldr	r1, [pc, #356]	; (80111fc <__ieee754_pow+0x25c>)
 8011098:	4632      	mov	r2, r6
 801109a:	463b      	mov	r3, r7
 801109c:	2000      	movs	r0, #0
 801109e:	f7ef fc0d 	bl	80008bc <__aeabi_ddiv>
 80110a2:	e79c      	b.n	8010fde <__ieee754_pow+0x3e>
 80110a4:	2300      	movs	r3, #0
 80110a6:	9304      	str	r3, [sp, #16]
 80110a8:	2a00      	cmp	r2, #0
 80110aa:	d13d      	bne.n	8011128 <__ieee754_pow+0x188>
 80110ac:	4b51      	ldr	r3, [pc, #324]	; (80111f4 <__ieee754_pow+0x254>)
 80110ae:	4598      	cmp	r8, r3
 80110b0:	d1ea      	bne.n	8011088 <__ieee754_pow+0xe8>
 80110b2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80110b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80110ba:	ea53 030a 	orrs.w	r3, r3, sl
 80110be:	f000 8459 	beq.w	8011974 <__ieee754_pow+0x9d4>
 80110c2:	4b4f      	ldr	r3, [pc, #316]	; (8011200 <__ieee754_pow+0x260>)
 80110c4:	429c      	cmp	r4, r3
 80110c6:	dd08      	ble.n	80110da <__ieee754_pow+0x13a>
 80110c8:	f1b9 0f00 	cmp.w	r9, #0
 80110cc:	f2c0 8456 	blt.w	801197c <__ieee754_pow+0x9dc>
 80110d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80110d4:	e783      	b.n	8010fde <__ieee754_pow+0x3e>
 80110d6:	2302      	movs	r3, #2
 80110d8:	e7e5      	b.n	80110a6 <__ieee754_pow+0x106>
 80110da:	f1b9 0f00 	cmp.w	r9, #0
 80110de:	f04f 0000 	mov.w	r0, #0
 80110e2:	f04f 0100 	mov.w	r1, #0
 80110e6:	f6bf af7a 	bge.w	8010fde <__ieee754_pow+0x3e>
 80110ea:	e9dd 0300 	ldrd	r0, r3, [sp]
 80110ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80110f2:	e774      	b.n	8010fde <__ieee754_pow+0x3e>
 80110f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80110f8:	d106      	bne.n	8011108 <__ieee754_pow+0x168>
 80110fa:	4632      	mov	r2, r6
 80110fc:	463b      	mov	r3, r7
 80110fe:	4630      	mov	r0, r6
 8011100:	4639      	mov	r1, r7
 8011102:	f7ef fab1 	bl	8000668 <__aeabi_dmul>
 8011106:	e76a      	b.n	8010fde <__ieee754_pow+0x3e>
 8011108:	4b3e      	ldr	r3, [pc, #248]	; (8011204 <__ieee754_pow+0x264>)
 801110a:	4599      	cmp	r9, r3
 801110c:	d10c      	bne.n	8011128 <__ieee754_pow+0x188>
 801110e:	2d00      	cmp	r5, #0
 8011110:	db0a      	blt.n	8011128 <__ieee754_pow+0x188>
 8011112:	ec47 6b10 	vmov	d0, r6, r7
 8011116:	b009      	add	sp, #36	; 0x24
 8011118:	ecbd 8b06 	vpop	{d8-d10}
 801111c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011120:	f000 bd20 	b.w	8011b64 <__ieee754_sqrt>
 8011124:	2300      	movs	r3, #0
 8011126:	9304      	str	r3, [sp, #16]
 8011128:	ec47 6b10 	vmov	d0, r6, r7
 801112c:	f000 fc62 	bl	80119f4 <fabs>
 8011130:	ec51 0b10 	vmov	r0, r1, d0
 8011134:	f1ba 0f00 	cmp.w	sl, #0
 8011138:	d129      	bne.n	801118e <__ieee754_pow+0x1ee>
 801113a:	b124      	cbz	r4, 8011146 <__ieee754_pow+0x1a6>
 801113c:	4b2f      	ldr	r3, [pc, #188]	; (80111fc <__ieee754_pow+0x25c>)
 801113e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8011142:	429a      	cmp	r2, r3
 8011144:	d123      	bne.n	801118e <__ieee754_pow+0x1ee>
 8011146:	f1b9 0f00 	cmp.w	r9, #0
 801114a:	da05      	bge.n	8011158 <__ieee754_pow+0x1b8>
 801114c:	4602      	mov	r2, r0
 801114e:	460b      	mov	r3, r1
 8011150:	2000      	movs	r0, #0
 8011152:	492a      	ldr	r1, [pc, #168]	; (80111fc <__ieee754_pow+0x25c>)
 8011154:	f7ef fbb2 	bl	80008bc <__aeabi_ddiv>
 8011158:	2d00      	cmp	r5, #0
 801115a:	f6bf af40 	bge.w	8010fde <__ieee754_pow+0x3e>
 801115e:	9b04      	ldr	r3, [sp, #16]
 8011160:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011164:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011168:	431c      	orrs	r4, r3
 801116a:	d108      	bne.n	801117e <__ieee754_pow+0x1de>
 801116c:	4602      	mov	r2, r0
 801116e:	460b      	mov	r3, r1
 8011170:	4610      	mov	r0, r2
 8011172:	4619      	mov	r1, r3
 8011174:	f7ef f8c0 	bl	80002f8 <__aeabi_dsub>
 8011178:	4602      	mov	r2, r0
 801117a:	460b      	mov	r3, r1
 801117c:	e78f      	b.n	801109e <__ieee754_pow+0xfe>
 801117e:	9b04      	ldr	r3, [sp, #16]
 8011180:	2b01      	cmp	r3, #1
 8011182:	f47f af2c 	bne.w	8010fde <__ieee754_pow+0x3e>
 8011186:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801118a:	4619      	mov	r1, r3
 801118c:	e727      	b.n	8010fde <__ieee754_pow+0x3e>
 801118e:	0feb      	lsrs	r3, r5, #31
 8011190:	3b01      	subs	r3, #1
 8011192:	9306      	str	r3, [sp, #24]
 8011194:	9a06      	ldr	r2, [sp, #24]
 8011196:	9b04      	ldr	r3, [sp, #16]
 8011198:	4313      	orrs	r3, r2
 801119a:	d102      	bne.n	80111a2 <__ieee754_pow+0x202>
 801119c:	4632      	mov	r2, r6
 801119e:	463b      	mov	r3, r7
 80111a0:	e7e6      	b.n	8011170 <__ieee754_pow+0x1d0>
 80111a2:	4b19      	ldr	r3, [pc, #100]	; (8011208 <__ieee754_pow+0x268>)
 80111a4:	4598      	cmp	r8, r3
 80111a6:	f340 80fb 	ble.w	80113a0 <__ieee754_pow+0x400>
 80111aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80111ae:	4598      	cmp	r8, r3
 80111b0:	4b13      	ldr	r3, [pc, #76]	; (8011200 <__ieee754_pow+0x260>)
 80111b2:	dd0c      	ble.n	80111ce <__ieee754_pow+0x22e>
 80111b4:	429c      	cmp	r4, r3
 80111b6:	dc0f      	bgt.n	80111d8 <__ieee754_pow+0x238>
 80111b8:	f1b9 0f00 	cmp.w	r9, #0
 80111bc:	da0f      	bge.n	80111de <__ieee754_pow+0x23e>
 80111be:	2000      	movs	r0, #0
 80111c0:	b009      	add	sp, #36	; 0x24
 80111c2:	ecbd 8b06 	vpop	{d8-d10}
 80111c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111ca:	f000 bcc2 	b.w	8011b52 <__math_oflow>
 80111ce:	429c      	cmp	r4, r3
 80111d0:	dbf2      	blt.n	80111b8 <__ieee754_pow+0x218>
 80111d2:	4b0a      	ldr	r3, [pc, #40]	; (80111fc <__ieee754_pow+0x25c>)
 80111d4:	429c      	cmp	r4, r3
 80111d6:	dd19      	ble.n	801120c <__ieee754_pow+0x26c>
 80111d8:	f1b9 0f00 	cmp.w	r9, #0
 80111dc:	dcef      	bgt.n	80111be <__ieee754_pow+0x21e>
 80111de:	2000      	movs	r0, #0
 80111e0:	b009      	add	sp, #36	; 0x24
 80111e2:	ecbd 8b06 	vpop	{d8-d10}
 80111e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111ea:	f000 bca9 	b.w	8011b40 <__math_uflow>
 80111ee:	bf00      	nop
 80111f0:	fff00000 	.word	0xfff00000
 80111f4:	7ff00000 	.word	0x7ff00000
 80111f8:	433fffff 	.word	0x433fffff
 80111fc:	3ff00000 	.word	0x3ff00000
 8011200:	3fefffff 	.word	0x3fefffff
 8011204:	3fe00000 	.word	0x3fe00000
 8011208:	41e00000 	.word	0x41e00000
 801120c:	4b60      	ldr	r3, [pc, #384]	; (8011390 <__ieee754_pow+0x3f0>)
 801120e:	2200      	movs	r2, #0
 8011210:	f7ef f872 	bl	80002f8 <__aeabi_dsub>
 8011214:	a354      	add	r3, pc, #336	; (adr r3, 8011368 <__ieee754_pow+0x3c8>)
 8011216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801121a:	4604      	mov	r4, r0
 801121c:	460d      	mov	r5, r1
 801121e:	f7ef fa23 	bl	8000668 <__aeabi_dmul>
 8011222:	a353      	add	r3, pc, #332	; (adr r3, 8011370 <__ieee754_pow+0x3d0>)
 8011224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011228:	4606      	mov	r6, r0
 801122a:	460f      	mov	r7, r1
 801122c:	4620      	mov	r0, r4
 801122e:	4629      	mov	r1, r5
 8011230:	f7ef fa1a 	bl	8000668 <__aeabi_dmul>
 8011234:	4b57      	ldr	r3, [pc, #348]	; (8011394 <__ieee754_pow+0x3f4>)
 8011236:	4682      	mov	sl, r0
 8011238:	468b      	mov	fp, r1
 801123a:	2200      	movs	r2, #0
 801123c:	4620      	mov	r0, r4
 801123e:	4629      	mov	r1, r5
 8011240:	f7ef fa12 	bl	8000668 <__aeabi_dmul>
 8011244:	4602      	mov	r2, r0
 8011246:	460b      	mov	r3, r1
 8011248:	a14b      	add	r1, pc, #300	; (adr r1, 8011378 <__ieee754_pow+0x3d8>)
 801124a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801124e:	f7ef f853 	bl	80002f8 <__aeabi_dsub>
 8011252:	4622      	mov	r2, r4
 8011254:	462b      	mov	r3, r5
 8011256:	f7ef fa07 	bl	8000668 <__aeabi_dmul>
 801125a:	4602      	mov	r2, r0
 801125c:	460b      	mov	r3, r1
 801125e:	2000      	movs	r0, #0
 8011260:	494d      	ldr	r1, [pc, #308]	; (8011398 <__ieee754_pow+0x3f8>)
 8011262:	f7ef f849 	bl	80002f8 <__aeabi_dsub>
 8011266:	4622      	mov	r2, r4
 8011268:	4680      	mov	r8, r0
 801126a:	4689      	mov	r9, r1
 801126c:	462b      	mov	r3, r5
 801126e:	4620      	mov	r0, r4
 8011270:	4629      	mov	r1, r5
 8011272:	f7ef f9f9 	bl	8000668 <__aeabi_dmul>
 8011276:	4602      	mov	r2, r0
 8011278:	460b      	mov	r3, r1
 801127a:	4640      	mov	r0, r8
 801127c:	4649      	mov	r1, r9
 801127e:	f7ef f9f3 	bl	8000668 <__aeabi_dmul>
 8011282:	a33f      	add	r3, pc, #252	; (adr r3, 8011380 <__ieee754_pow+0x3e0>)
 8011284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011288:	f7ef f9ee 	bl	8000668 <__aeabi_dmul>
 801128c:	4602      	mov	r2, r0
 801128e:	460b      	mov	r3, r1
 8011290:	4650      	mov	r0, sl
 8011292:	4659      	mov	r1, fp
 8011294:	f7ef f830 	bl	80002f8 <__aeabi_dsub>
 8011298:	4602      	mov	r2, r0
 801129a:	460b      	mov	r3, r1
 801129c:	4680      	mov	r8, r0
 801129e:	4689      	mov	r9, r1
 80112a0:	4630      	mov	r0, r6
 80112a2:	4639      	mov	r1, r7
 80112a4:	f7ef f82a 	bl	80002fc <__adddf3>
 80112a8:	2000      	movs	r0, #0
 80112aa:	4632      	mov	r2, r6
 80112ac:	463b      	mov	r3, r7
 80112ae:	4604      	mov	r4, r0
 80112b0:	460d      	mov	r5, r1
 80112b2:	f7ef f821 	bl	80002f8 <__aeabi_dsub>
 80112b6:	4602      	mov	r2, r0
 80112b8:	460b      	mov	r3, r1
 80112ba:	4640      	mov	r0, r8
 80112bc:	4649      	mov	r1, r9
 80112be:	f7ef f81b 	bl	80002f8 <__aeabi_dsub>
 80112c2:	9b04      	ldr	r3, [sp, #16]
 80112c4:	9a06      	ldr	r2, [sp, #24]
 80112c6:	3b01      	subs	r3, #1
 80112c8:	4313      	orrs	r3, r2
 80112ca:	4682      	mov	sl, r0
 80112cc:	468b      	mov	fp, r1
 80112ce:	f040 81e7 	bne.w	80116a0 <__ieee754_pow+0x700>
 80112d2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011388 <__ieee754_pow+0x3e8>
 80112d6:	eeb0 8a47 	vmov.f32	s16, s14
 80112da:	eef0 8a67 	vmov.f32	s17, s15
 80112de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80112e2:	2600      	movs	r6, #0
 80112e4:	4632      	mov	r2, r6
 80112e6:	463b      	mov	r3, r7
 80112e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80112ec:	f7ef f804 	bl	80002f8 <__aeabi_dsub>
 80112f0:	4622      	mov	r2, r4
 80112f2:	462b      	mov	r3, r5
 80112f4:	f7ef f9b8 	bl	8000668 <__aeabi_dmul>
 80112f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112fc:	4680      	mov	r8, r0
 80112fe:	4689      	mov	r9, r1
 8011300:	4650      	mov	r0, sl
 8011302:	4659      	mov	r1, fp
 8011304:	f7ef f9b0 	bl	8000668 <__aeabi_dmul>
 8011308:	4602      	mov	r2, r0
 801130a:	460b      	mov	r3, r1
 801130c:	4640      	mov	r0, r8
 801130e:	4649      	mov	r1, r9
 8011310:	f7ee fff4 	bl	80002fc <__adddf3>
 8011314:	4632      	mov	r2, r6
 8011316:	463b      	mov	r3, r7
 8011318:	4680      	mov	r8, r0
 801131a:	4689      	mov	r9, r1
 801131c:	4620      	mov	r0, r4
 801131e:	4629      	mov	r1, r5
 8011320:	f7ef f9a2 	bl	8000668 <__aeabi_dmul>
 8011324:	460b      	mov	r3, r1
 8011326:	4604      	mov	r4, r0
 8011328:	460d      	mov	r5, r1
 801132a:	4602      	mov	r2, r0
 801132c:	4649      	mov	r1, r9
 801132e:	4640      	mov	r0, r8
 8011330:	f7ee ffe4 	bl	80002fc <__adddf3>
 8011334:	4b19      	ldr	r3, [pc, #100]	; (801139c <__ieee754_pow+0x3fc>)
 8011336:	4299      	cmp	r1, r3
 8011338:	ec45 4b19 	vmov	d9, r4, r5
 801133c:	4606      	mov	r6, r0
 801133e:	460f      	mov	r7, r1
 8011340:	468b      	mov	fp, r1
 8011342:	f340 82f0 	ble.w	8011926 <__ieee754_pow+0x986>
 8011346:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801134a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801134e:	4303      	orrs	r3, r0
 8011350:	f000 81e4 	beq.w	801171c <__ieee754_pow+0x77c>
 8011354:	ec51 0b18 	vmov	r0, r1, d8
 8011358:	2200      	movs	r2, #0
 801135a:	2300      	movs	r3, #0
 801135c:	f7ef fbf6 	bl	8000b4c <__aeabi_dcmplt>
 8011360:	3800      	subs	r0, #0
 8011362:	bf18      	it	ne
 8011364:	2001      	movne	r0, #1
 8011366:	e72b      	b.n	80111c0 <__ieee754_pow+0x220>
 8011368:	60000000 	.word	0x60000000
 801136c:	3ff71547 	.word	0x3ff71547
 8011370:	f85ddf44 	.word	0xf85ddf44
 8011374:	3e54ae0b 	.word	0x3e54ae0b
 8011378:	55555555 	.word	0x55555555
 801137c:	3fd55555 	.word	0x3fd55555
 8011380:	652b82fe 	.word	0x652b82fe
 8011384:	3ff71547 	.word	0x3ff71547
 8011388:	00000000 	.word	0x00000000
 801138c:	bff00000 	.word	0xbff00000
 8011390:	3ff00000 	.word	0x3ff00000
 8011394:	3fd00000 	.word	0x3fd00000
 8011398:	3fe00000 	.word	0x3fe00000
 801139c:	408fffff 	.word	0x408fffff
 80113a0:	4bd5      	ldr	r3, [pc, #852]	; (80116f8 <__ieee754_pow+0x758>)
 80113a2:	402b      	ands	r3, r5
 80113a4:	2200      	movs	r2, #0
 80113a6:	b92b      	cbnz	r3, 80113b4 <__ieee754_pow+0x414>
 80113a8:	4bd4      	ldr	r3, [pc, #848]	; (80116fc <__ieee754_pow+0x75c>)
 80113aa:	f7ef f95d 	bl	8000668 <__aeabi_dmul>
 80113ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80113b2:	460c      	mov	r4, r1
 80113b4:	1523      	asrs	r3, r4, #20
 80113b6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80113ba:	4413      	add	r3, r2
 80113bc:	9305      	str	r3, [sp, #20]
 80113be:	4bd0      	ldr	r3, [pc, #832]	; (8011700 <__ieee754_pow+0x760>)
 80113c0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80113c4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80113c8:	429c      	cmp	r4, r3
 80113ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80113ce:	dd08      	ble.n	80113e2 <__ieee754_pow+0x442>
 80113d0:	4bcc      	ldr	r3, [pc, #816]	; (8011704 <__ieee754_pow+0x764>)
 80113d2:	429c      	cmp	r4, r3
 80113d4:	f340 8162 	ble.w	801169c <__ieee754_pow+0x6fc>
 80113d8:	9b05      	ldr	r3, [sp, #20]
 80113da:	3301      	adds	r3, #1
 80113dc:	9305      	str	r3, [sp, #20]
 80113de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80113e2:	2400      	movs	r4, #0
 80113e4:	00e3      	lsls	r3, r4, #3
 80113e6:	9307      	str	r3, [sp, #28]
 80113e8:	4bc7      	ldr	r3, [pc, #796]	; (8011708 <__ieee754_pow+0x768>)
 80113ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80113ee:	ed93 7b00 	vldr	d7, [r3]
 80113f2:	4629      	mov	r1, r5
 80113f4:	ec53 2b17 	vmov	r2, r3, d7
 80113f8:	eeb0 9a47 	vmov.f32	s18, s14
 80113fc:	eef0 9a67 	vmov.f32	s19, s15
 8011400:	4682      	mov	sl, r0
 8011402:	f7ee ff79 	bl	80002f8 <__aeabi_dsub>
 8011406:	4652      	mov	r2, sl
 8011408:	4606      	mov	r6, r0
 801140a:	460f      	mov	r7, r1
 801140c:	462b      	mov	r3, r5
 801140e:	ec51 0b19 	vmov	r0, r1, d9
 8011412:	f7ee ff73 	bl	80002fc <__adddf3>
 8011416:	4602      	mov	r2, r0
 8011418:	460b      	mov	r3, r1
 801141a:	2000      	movs	r0, #0
 801141c:	49bb      	ldr	r1, [pc, #748]	; (801170c <__ieee754_pow+0x76c>)
 801141e:	f7ef fa4d 	bl	80008bc <__aeabi_ddiv>
 8011422:	ec41 0b1a 	vmov	d10, r0, r1
 8011426:	4602      	mov	r2, r0
 8011428:	460b      	mov	r3, r1
 801142a:	4630      	mov	r0, r6
 801142c:	4639      	mov	r1, r7
 801142e:	f7ef f91b 	bl	8000668 <__aeabi_dmul>
 8011432:	2300      	movs	r3, #0
 8011434:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011438:	9302      	str	r3, [sp, #8]
 801143a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801143e:	46ab      	mov	fp, r5
 8011440:	106d      	asrs	r5, r5, #1
 8011442:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011446:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801144a:	ec41 0b18 	vmov	d8, r0, r1
 801144e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011452:	2200      	movs	r2, #0
 8011454:	4640      	mov	r0, r8
 8011456:	4649      	mov	r1, r9
 8011458:	4614      	mov	r4, r2
 801145a:	461d      	mov	r5, r3
 801145c:	f7ef f904 	bl	8000668 <__aeabi_dmul>
 8011460:	4602      	mov	r2, r0
 8011462:	460b      	mov	r3, r1
 8011464:	4630      	mov	r0, r6
 8011466:	4639      	mov	r1, r7
 8011468:	f7ee ff46 	bl	80002f8 <__aeabi_dsub>
 801146c:	ec53 2b19 	vmov	r2, r3, d9
 8011470:	4606      	mov	r6, r0
 8011472:	460f      	mov	r7, r1
 8011474:	4620      	mov	r0, r4
 8011476:	4629      	mov	r1, r5
 8011478:	f7ee ff3e 	bl	80002f8 <__aeabi_dsub>
 801147c:	4602      	mov	r2, r0
 801147e:	460b      	mov	r3, r1
 8011480:	4650      	mov	r0, sl
 8011482:	4659      	mov	r1, fp
 8011484:	f7ee ff38 	bl	80002f8 <__aeabi_dsub>
 8011488:	4642      	mov	r2, r8
 801148a:	464b      	mov	r3, r9
 801148c:	f7ef f8ec 	bl	8000668 <__aeabi_dmul>
 8011490:	4602      	mov	r2, r0
 8011492:	460b      	mov	r3, r1
 8011494:	4630      	mov	r0, r6
 8011496:	4639      	mov	r1, r7
 8011498:	f7ee ff2e 	bl	80002f8 <__aeabi_dsub>
 801149c:	ec53 2b1a 	vmov	r2, r3, d10
 80114a0:	f7ef f8e2 	bl	8000668 <__aeabi_dmul>
 80114a4:	ec53 2b18 	vmov	r2, r3, d8
 80114a8:	ec41 0b19 	vmov	d9, r0, r1
 80114ac:	ec51 0b18 	vmov	r0, r1, d8
 80114b0:	f7ef f8da 	bl	8000668 <__aeabi_dmul>
 80114b4:	a37c      	add	r3, pc, #496	; (adr r3, 80116a8 <__ieee754_pow+0x708>)
 80114b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ba:	4604      	mov	r4, r0
 80114bc:	460d      	mov	r5, r1
 80114be:	f7ef f8d3 	bl	8000668 <__aeabi_dmul>
 80114c2:	a37b      	add	r3, pc, #492	; (adr r3, 80116b0 <__ieee754_pow+0x710>)
 80114c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c8:	f7ee ff18 	bl	80002fc <__adddf3>
 80114cc:	4622      	mov	r2, r4
 80114ce:	462b      	mov	r3, r5
 80114d0:	f7ef f8ca 	bl	8000668 <__aeabi_dmul>
 80114d4:	a378      	add	r3, pc, #480	; (adr r3, 80116b8 <__ieee754_pow+0x718>)
 80114d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114da:	f7ee ff0f 	bl	80002fc <__adddf3>
 80114de:	4622      	mov	r2, r4
 80114e0:	462b      	mov	r3, r5
 80114e2:	f7ef f8c1 	bl	8000668 <__aeabi_dmul>
 80114e6:	a376      	add	r3, pc, #472	; (adr r3, 80116c0 <__ieee754_pow+0x720>)
 80114e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ec:	f7ee ff06 	bl	80002fc <__adddf3>
 80114f0:	4622      	mov	r2, r4
 80114f2:	462b      	mov	r3, r5
 80114f4:	f7ef f8b8 	bl	8000668 <__aeabi_dmul>
 80114f8:	a373      	add	r3, pc, #460	; (adr r3, 80116c8 <__ieee754_pow+0x728>)
 80114fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114fe:	f7ee fefd 	bl	80002fc <__adddf3>
 8011502:	4622      	mov	r2, r4
 8011504:	462b      	mov	r3, r5
 8011506:	f7ef f8af 	bl	8000668 <__aeabi_dmul>
 801150a:	a371      	add	r3, pc, #452	; (adr r3, 80116d0 <__ieee754_pow+0x730>)
 801150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011510:	f7ee fef4 	bl	80002fc <__adddf3>
 8011514:	4622      	mov	r2, r4
 8011516:	4606      	mov	r6, r0
 8011518:	460f      	mov	r7, r1
 801151a:	462b      	mov	r3, r5
 801151c:	4620      	mov	r0, r4
 801151e:	4629      	mov	r1, r5
 8011520:	f7ef f8a2 	bl	8000668 <__aeabi_dmul>
 8011524:	4602      	mov	r2, r0
 8011526:	460b      	mov	r3, r1
 8011528:	4630      	mov	r0, r6
 801152a:	4639      	mov	r1, r7
 801152c:	f7ef f89c 	bl	8000668 <__aeabi_dmul>
 8011530:	4642      	mov	r2, r8
 8011532:	4604      	mov	r4, r0
 8011534:	460d      	mov	r5, r1
 8011536:	464b      	mov	r3, r9
 8011538:	ec51 0b18 	vmov	r0, r1, d8
 801153c:	f7ee fede 	bl	80002fc <__adddf3>
 8011540:	ec53 2b19 	vmov	r2, r3, d9
 8011544:	f7ef f890 	bl	8000668 <__aeabi_dmul>
 8011548:	4622      	mov	r2, r4
 801154a:	462b      	mov	r3, r5
 801154c:	f7ee fed6 	bl	80002fc <__adddf3>
 8011550:	4642      	mov	r2, r8
 8011552:	4682      	mov	sl, r0
 8011554:	468b      	mov	fp, r1
 8011556:	464b      	mov	r3, r9
 8011558:	4640      	mov	r0, r8
 801155a:	4649      	mov	r1, r9
 801155c:	f7ef f884 	bl	8000668 <__aeabi_dmul>
 8011560:	4b6b      	ldr	r3, [pc, #428]	; (8011710 <__ieee754_pow+0x770>)
 8011562:	2200      	movs	r2, #0
 8011564:	4606      	mov	r6, r0
 8011566:	460f      	mov	r7, r1
 8011568:	f7ee fec8 	bl	80002fc <__adddf3>
 801156c:	4652      	mov	r2, sl
 801156e:	465b      	mov	r3, fp
 8011570:	f7ee fec4 	bl	80002fc <__adddf3>
 8011574:	2000      	movs	r0, #0
 8011576:	4604      	mov	r4, r0
 8011578:	460d      	mov	r5, r1
 801157a:	4602      	mov	r2, r0
 801157c:	460b      	mov	r3, r1
 801157e:	4640      	mov	r0, r8
 8011580:	4649      	mov	r1, r9
 8011582:	f7ef f871 	bl	8000668 <__aeabi_dmul>
 8011586:	4b62      	ldr	r3, [pc, #392]	; (8011710 <__ieee754_pow+0x770>)
 8011588:	4680      	mov	r8, r0
 801158a:	4689      	mov	r9, r1
 801158c:	2200      	movs	r2, #0
 801158e:	4620      	mov	r0, r4
 8011590:	4629      	mov	r1, r5
 8011592:	f7ee feb1 	bl	80002f8 <__aeabi_dsub>
 8011596:	4632      	mov	r2, r6
 8011598:	463b      	mov	r3, r7
 801159a:	f7ee fead 	bl	80002f8 <__aeabi_dsub>
 801159e:	4602      	mov	r2, r0
 80115a0:	460b      	mov	r3, r1
 80115a2:	4650      	mov	r0, sl
 80115a4:	4659      	mov	r1, fp
 80115a6:	f7ee fea7 	bl	80002f8 <__aeabi_dsub>
 80115aa:	ec53 2b18 	vmov	r2, r3, d8
 80115ae:	f7ef f85b 	bl	8000668 <__aeabi_dmul>
 80115b2:	4622      	mov	r2, r4
 80115b4:	4606      	mov	r6, r0
 80115b6:	460f      	mov	r7, r1
 80115b8:	462b      	mov	r3, r5
 80115ba:	ec51 0b19 	vmov	r0, r1, d9
 80115be:	f7ef f853 	bl	8000668 <__aeabi_dmul>
 80115c2:	4602      	mov	r2, r0
 80115c4:	460b      	mov	r3, r1
 80115c6:	4630      	mov	r0, r6
 80115c8:	4639      	mov	r1, r7
 80115ca:	f7ee fe97 	bl	80002fc <__adddf3>
 80115ce:	4606      	mov	r6, r0
 80115d0:	460f      	mov	r7, r1
 80115d2:	4602      	mov	r2, r0
 80115d4:	460b      	mov	r3, r1
 80115d6:	4640      	mov	r0, r8
 80115d8:	4649      	mov	r1, r9
 80115da:	f7ee fe8f 	bl	80002fc <__adddf3>
 80115de:	a33e      	add	r3, pc, #248	; (adr r3, 80116d8 <__ieee754_pow+0x738>)
 80115e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115e4:	2000      	movs	r0, #0
 80115e6:	4604      	mov	r4, r0
 80115e8:	460d      	mov	r5, r1
 80115ea:	f7ef f83d 	bl	8000668 <__aeabi_dmul>
 80115ee:	4642      	mov	r2, r8
 80115f0:	ec41 0b18 	vmov	d8, r0, r1
 80115f4:	464b      	mov	r3, r9
 80115f6:	4620      	mov	r0, r4
 80115f8:	4629      	mov	r1, r5
 80115fa:	f7ee fe7d 	bl	80002f8 <__aeabi_dsub>
 80115fe:	4602      	mov	r2, r0
 8011600:	460b      	mov	r3, r1
 8011602:	4630      	mov	r0, r6
 8011604:	4639      	mov	r1, r7
 8011606:	f7ee fe77 	bl	80002f8 <__aeabi_dsub>
 801160a:	a335      	add	r3, pc, #212	; (adr r3, 80116e0 <__ieee754_pow+0x740>)
 801160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011610:	f7ef f82a 	bl	8000668 <__aeabi_dmul>
 8011614:	a334      	add	r3, pc, #208	; (adr r3, 80116e8 <__ieee754_pow+0x748>)
 8011616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801161a:	4606      	mov	r6, r0
 801161c:	460f      	mov	r7, r1
 801161e:	4620      	mov	r0, r4
 8011620:	4629      	mov	r1, r5
 8011622:	f7ef f821 	bl	8000668 <__aeabi_dmul>
 8011626:	4602      	mov	r2, r0
 8011628:	460b      	mov	r3, r1
 801162a:	4630      	mov	r0, r6
 801162c:	4639      	mov	r1, r7
 801162e:	f7ee fe65 	bl	80002fc <__adddf3>
 8011632:	9a07      	ldr	r2, [sp, #28]
 8011634:	4b37      	ldr	r3, [pc, #220]	; (8011714 <__ieee754_pow+0x774>)
 8011636:	4413      	add	r3, r2
 8011638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801163c:	f7ee fe5e 	bl	80002fc <__adddf3>
 8011640:	4682      	mov	sl, r0
 8011642:	9805      	ldr	r0, [sp, #20]
 8011644:	468b      	mov	fp, r1
 8011646:	f7ee ffa5 	bl	8000594 <__aeabi_i2d>
 801164a:	9a07      	ldr	r2, [sp, #28]
 801164c:	4b32      	ldr	r3, [pc, #200]	; (8011718 <__ieee754_pow+0x778>)
 801164e:	4413      	add	r3, r2
 8011650:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011654:	4606      	mov	r6, r0
 8011656:	460f      	mov	r7, r1
 8011658:	4652      	mov	r2, sl
 801165a:	465b      	mov	r3, fp
 801165c:	ec51 0b18 	vmov	r0, r1, d8
 8011660:	f7ee fe4c 	bl	80002fc <__adddf3>
 8011664:	4642      	mov	r2, r8
 8011666:	464b      	mov	r3, r9
 8011668:	f7ee fe48 	bl	80002fc <__adddf3>
 801166c:	4632      	mov	r2, r6
 801166e:	463b      	mov	r3, r7
 8011670:	f7ee fe44 	bl	80002fc <__adddf3>
 8011674:	2000      	movs	r0, #0
 8011676:	4632      	mov	r2, r6
 8011678:	463b      	mov	r3, r7
 801167a:	4604      	mov	r4, r0
 801167c:	460d      	mov	r5, r1
 801167e:	f7ee fe3b 	bl	80002f8 <__aeabi_dsub>
 8011682:	4642      	mov	r2, r8
 8011684:	464b      	mov	r3, r9
 8011686:	f7ee fe37 	bl	80002f8 <__aeabi_dsub>
 801168a:	ec53 2b18 	vmov	r2, r3, d8
 801168e:	f7ee fe33 	bl	80002f8 <__aeabi_dsub>
 8011692:	4602      	mov	r2, r0
 8011694:	460b      	mov	r3, r1
 8011696:	4650      	mov	r0, sl
 8011698:	4659      	mov	r1, fp
 801169a:	e610      	b.n	80112be <__ieee754_pow+0x31e>
 801169c:	2401      	movs	r4, #1
 801169e:	e6a1      	b.n	80113e4 <__ieee754_pow+0x444>
 80116a0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80116f0 <__ieee754_pow+0x750>
 80116a4:	e617      	b.n	80112d6 <__ieee754_pow+0x336>
 80116a6:	bf00      	nop
 80116a8:	4a454eef 	.word	0x4a454eef
 80116ac:	3fca7e28 	.word	0x3fca7e28
 80116b0:	93c9db65 	.word	0x93c9db65
 80116b4:	3fcd864a 	.word	0x3fcd864a
 80116b8:	a91d4101 	.word	0xa91d4101
 80116bc:	3fd17460 	.word	0x3fd17460
 80116c0:	518f264d 	.word	0x518f264d
 80116c4:	3fd55555 	.word	0x3fd55555
 80116c8:	db6fabff 	.word	0xdb6fabff
 80116cc:	3fdb6db6 	.word	0x3fdb6db6
 80116d0:	33333303 	.word	0x33333303
 80116d4:	3fe33333 	.word	0x3fe33333
 80116d8:	e0000000 	.word	0xe0000000
 80116dc:	3feec709 	.word	0x3feec709
 80116e0:	dc3a03fd 	.word	0xdc3a03fd
 80116e4:	3feec709 	.word	0x3feec709
 80116e8:	145b01f5 	.word	0x145b01f5
 80116ec:	be3e2fe0 	.word	0xbe3e2fe0
 80116f0:	00000000 	.word	0x00000000
 80116f4:	3ff00000 	.word	0x3ff00000
 80116f8:	7ff00000 	.word	0x7ff00000
 80116fc:	43400000 	.word	0x43400000
 8011700:	0003988e 	.word	0x0003988e
 8011704:	000bb679 	.word	0x000bb679
 8011708:	08012340 	.word	0x08012340
 801170c:	3ff00000 	.word	0x3ff00000
 8011710:	40080000 	.word	0x40080000
 8011714:	08012360 	.word	0x08012360
 8011718:	08012350 	.word	0x08012350
 801171c:	a3b3      	add	r3, pc, #716	; (adr r3, 80119ec <__ieee754_pow+0xa4c>)
 801171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011722:	4640      	mov	r0, r8
 8011724:	4649      	mov	r1, r9
 8011726:	f7ee fde9 	bl	80002fc <__adddf3>
 801172a:	4622      	mov	r2, r4
 801172c:	ec41 0b1a 	vmov	d10, r0, r1
 8011730:	462b      	mov	r3, r5
 8011732:	4630      	mov	r0, r6
 8011734:	4639      	mov	r1, r7
 8011736:	f7ee fddf 	bl	80002f8 <__aeabi_dsub>
 801173a:	4602      	mov	r2, r0
 801173c:	460b      	mov	r3, r1
 801173e:	ec51 0b1a 	vmov	r0, r1, d10
 8011742:	f7ef fa21 	bl	8000b88 <__aeabi_dcmpgt>
 8011746:	2800      	cmp	r0, #0
 8011748:	f47f ae04 	bne.w	8011354 <__ieee754_pow+0x3b4>
 801174c:	4aa2      	ldr	r2, [pc, #648]	; (80119d8 <__ieee754_pow+0xa38>)
 801174e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011752:	4293      	cmp	r3, r2
 8011754:	f340 8107 	ble.w	8011966 <__ieee754_pow+0x9c6>
 8011758:	151b      	asrs	r3, r3, #20
 801175a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801175e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011762:	fa4a fa03 	asr.w	sl, sl, r3
 8011766:	44da      	add	sl, fp
 8011768:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801176c:	489b      	ldr	r0, [pc, #620]	; (80119dc <__ieee754_pow+0xa3c>)
 801176e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011772:	4108      	asrs	r0, r1
 8011774:	ea00 030a 	and.w	r3, r0, sl
 8011778:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801177c:	f1c1 0114 	rsb	r1, r1, #20
 8011780:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011784:	fa4a fa01 	asr.w	sl, sl, r1
 8011788:	f1bb 0f00 	cmp.w	fp, #0
 801178c:	f04f 0200 	mov.w	r2, #0
 8011790:	4620      	mov	r0, r4
 8011792:	4629      	mov	r1, r5
 8011794:	bfb8      	it	lt
 8011796:	f1ca 0a00 	rsblt	sl, sl, #0
 801179a:	f7ee fdad 	bl	80002f8 <__aeabi_dsub>
 801179e:	ec41 0b19 	vmov	d9, r0, r1
 80117a2:	4642      	mov	r2, r8
 80117a4:	464b      	mov	r3, r9
 80117a6:	ec51 0b19 	vmov	r0, r1, d9
 80117aa:	f7ee fda7 	bl	80002fc <__adddf3>
 80117ae:	a37a      	add	r3, pc, #488	; (adr r3, 8011998 <__ieee754_pow+0x9f8>)
 80117b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b4:	2000      	movs	r0, #0
 80117b6:	4604      	mov	r4, r0
 80117b8:	460d      	mov	r5, r1
 80117ba:	f7ee ff55 	bl	8000668 <__aeabi_dmul>
 80117be:	ec53 2b19 	vmov	r2, r3, d9
 80117c2:	4606      	mov	r6, r0
 80117c4:	460f      	mov	r7, r1
 80117c6:	4620      	mov	r0, r4
 80117c8:	4629      	mov	r1, r5
 80117ca:	f7ee fd95 	bl	80002f8 <__aeabi_dsub>
 80117ce:	4602      	mov	r2, r0
 80117d0:	460b      	mov	r3, r1
 80117d2:	4640      	mov	r0, r8
 80117d4:	4649      	mov	r1, r9
 80117d6:	f7ee fd8f 	bl	80002f8 <__aeabi_dsub>
 80117da:	a371      	add	r3, pc, #452	; (adr r3, 80119a0 <__ieee754_pow+0xa00>)
 80117dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e0:	f7ee ff42 	bl	8000668 <__aeabi_dmul>
 80117e4:	a370      	add	r3, pc, #448	; (adr r3, 80119a8 <__ieee754_pow+0xa08>)
 80117e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ea:	4680      	mov	r8, r0
 80117ec:	4689      	mov	r9, r1
 80117ee:	4620      	mov	r0, r4
 80117f0:	4629      	mov	r1, r5
 80117f2:	f7ee ff39 	bl	8000668 <__aeabi_dmul>
 80117f6:	4602      	mov	r2, r0
 80117f8:	460b      	mov	r3, r1
 80117fa:	4640      	mov	r0, r8
 80117fc:	4649      	mov	r1, r9
 80117fe:	f7ee fd7d 	bl	80002fc <__adddf3>
 8011802:	4604      	mov	r4, r0
 8011804:	460d      	mov	r5, r1
 8011806:	4602      	mov	r2, r0
 8011808:	460b      	mov	r3, r1
 801180a:	4630      	mov	r0, r6
 801180c:	4639      	mov	r1, r7
 801180e:	f7ee fd75 	bl	80002fc <__adddf3>
 8011812:	4632      	mov	r2, r6
 8011814:	463b      	mov	r3, r7
 8011816:	4680      	mov	r8, r0
 8011818:	4689      	mov	r9, r1
 801181a:	f7ee fd6d 	bl	80002f8 <__aeabi_dsub>
 801181e:	4602      	mov	r2, r0
 8011820:	460b      	mov	r3, r1
 8011822:	4620      	mov	r0, r4
 8011824:	4629      	mov	r1, r5
 8011826:	f7ee fd67 	bl	80002f8 <__aeabi_dsub>
 801182a:	4642      	mov	r2, r8
 801182c:	4606      	mov	r6, r0
 801182e:	460f      	mov	r7, r1
 8011830:	464b      	mov	r3, r9
 8011832:	4640      	mov	r0, r8
 8011834:	4649      	mov	r1, r9
 8011836:	f7ee ff17 	bl	8000668 <__aeabi_dmul>
 801183a:	a35d      	add	r3, pc, #372	; (adr r3, 80119b0 <__ieee754_pow+0xa10>)
 801183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011840:	4604      	mov	r4, r0
 8011842:	460d      	mov	r5, r1
 8011844:	f7ee ff10 	bl	8000668 <__aeabi_dmul>
 8011848:	a35b      	add	r3, pc, #364	; (adr r3, 80119b8 <__ieee754_pow+0xa18>)
 801184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801184e:	f7ee fd53 	bl	80002f8 <__aeabi_dsub>
 8011852:	4622      	mov	r2, r4
 8011854:	462b      	mov	r3, r5
 8011856:	f7ee ff07 	bl	8000668 <__aeabi_dmul>
 801185a:	a359      	add	r3, pc, #356	; (adr r3, 80119c0 <__ieee754_pow+0xa20>)
 801185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011860:	f7ee fd4c 	bl	80002fc <__adddf3>
 8011864:	4622      	mov	r2, r4
 8011866:	462b      	mov	r3, r5
 8011868:	f7ee fefe 	bl	8000668 <__aeabi_dmul>
 801186c:	a356      	add	r3, pc, #344	; (adr r3, 80119c8 <__ieee754_pow+0xa28>)
 801186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011872:	f7ee fd41 	bl	80002f8 <__aeabi_dsub>
 8011876:	4622      	mov	r2, r4
 8011878:	462b      	mov	r3, r5
 801187a:	f7ee fef5 	bl	8000668 <__aeabi_dmul>
 801187e:	a354      	add	r3, pc, #336	; (adr r3, 80119d0 <__ieee754_pow+0xa30>)
 8011880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011884:	f7ee fd3a 	bl	80002fc <__adddf3>
 8011888:	4622      	mov	r2, r4
 801188a:	462b      	mov	r3, r5
 801188c:	f7ee feec 	bl	8000668 <__aeabi_dmul>
 8011890:	4602      	mov	r2, r0
 8011892:	460b      	mov	r3, r1
 8011894:	4640      	mov	r0, r8
 8011896:	4649      	mov	r1, r9
 8011898:	f7ee fd2e 	bl	80002f8 <__aeabi_dsub>
 801189c:	4604      	mov	r4, r0
 801189e:	460d      	mov	r5, r1
 80118a0:	4602      	mov	r2, r0
 80118a2:	460b      	mov	r3, r1
 80118a4:	4640      	mov	r0, r8
 80118a6:	4649      	mov	r1, r9
 80118a8:	f7ee fede 	bl	8000668 <__aeabi_dmul>
 80118ac:	2200      	movs	r2, #0
 80118ae:	ec41 0b19 	vmov	d9, r0, r1
 80118b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80118b6:	4620      	mov	r0, r4
 80118b8:	4629      	mov	r1, r5
 80118ba:	f7ee fd1d 	bl	80002f8 <__aeabi_dsub>
 80118be:	4602      	mov	r2, r0
 80118c0:	460b      	mov	r3, r1
 80118c2:	ec51 0b19 	vmov	r0, r1, d9
 80118c6:	f7ee fff9 	bl	80008bc <__aeabi_ddiv>
 80118ca:	4632      	mov	r2, r6
 80118cc:	4604      	mov	r4, r0
 80118ce:	460d      	mov	r5, r1
 80118d0:	463b      	mov	r3, r7
 80118d2:	4640      	mov	r0, r8
 80118d4:	4649      	mov	r1, r9
 80118d6:	f7ee fec7 	bl	8000668 <__aeabi_dmul>
 80118da:	4632      	mov	r2, r6
 80118dc:	463b      	mov	r3, r7
 80118de:	f7ee fd0d 	bl	80002fc <__adddf3>
 80118e2:	4602      	mov	r2, r0
 80118e4:	460b      	mov	r3, r1
 80118e6:	4620      	mov	r0, r4
 80118e8:	4629      	mov	r1, r5
 80118ea:	f7ee fd05 	bl	80002f8 <__aeabi_dsub>
 80118ee:	4642      	mov	r2, r8
 80118f0:	464b      	mov	r3, r9
 80118f2:	f7ee fd01 	bl	80002f8 <__aeabi_dsub>
 80118f6:	460b      	mov	r3, r1
 80118f8:	4602      	mov	r2, r0
 80118fa:	4939      	ldr	r1, [pc, #228]	; (80119e0 <__ieee754_pow+0xa40>)
 80118fc:	2000      	movs	r0, #0
 80118fe:	f7ee fcfb 	bl	80002f8 <__aeabi_dsub>
 8011902:	ec41 0b10 	vmov	d0, r0, r1
 8011906:	ee10 3a90 	vmov	r3, s1
 801190a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801190e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011912:	da2b      	bge.n	801196c <__ieee754_pow+0x9cc>
 8011914:	4650      	mov	r0, sl
 8011916:	f000 f877 	bl	8011a08 <scalbn>
 801191a:	ec51 0b10 	vmov	r0, r1, d0
 801191e:	ec53 2b18 	vmov	r2, r3, d8
 8011922:	f7ff bbee 	b.w	8011102 <__ieee754_pow+0x162>
 8011926:	4b2f      	ldr	r3, [pc, #188]	; (80119e4 <__ieee754_pow+0xa44>)
 8011928:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801192c:	429e      	cmp	r6, r3
 801192e:	f77f af0d 	ble.w	801174c <__ieee754_pow+0x7ac>
 8011932:	4b2d      	ldr	r3, [pc, #180]	; (80119e8 <__ieee754_pow+0xa48>)
 8011934:	440b      	add	r3, r1
 8011936:	4303      	orrs	r3, r0
 8011938:	d009      	beq.n	801194e <__ieee754_pow+0x9ae>
 801193a:	ec51 0b18 	vmov	r0, r1, d8
 801193e:	2200      	movs	r2, #0
 8011940:	2300      	movs	r3, #0
 8011942:	f7ef f903 	bl	8000b4c <__aeabi_dcmplt>
 8011946:	3800      	subs	r0, #0
 8011948:	bf18      	it	ne
 801194a:	2001      	movne	r0, #1
 801194c:	e448      	b.n	80111e0 <__ieee754_pow+0x240>
 801194e:	4622      	mov	r2, r4
 8011950:	462b      	mov	r3, r5
 8011952:	f7ee fcd1 	bl	80002f8 <__aeabi_dsub>
 8011956:	4642      	mov	r2, r8
 8011958:	464b      	mov	r3, r9
 801195a:	f7ef f90b 	bl	8000b74 <__aeabi_dcmpge>
 801195e:	2800      	cmp	r0, #0
 8011960:	f43f aef4 	beq.w	801174c <__ieee754_pow+0x7ac>
 8011964:	e7e9      	b.n	801193a <__ieee754_pow+0x99a>
 8011966:	f04f 0a00 	mov.w	sl, #0
 801196a:	e71a      	b.n	80117a2 <__ieee754_pow+0x802>
 801196c:	ec51 0b10 	vmov	r0, r1, d0
 8011970:	4619      	mov	r1, r3
 8011972:	e7d4      	b.n	801191e <__ieee754_pow+0x97e>
 8011974:	491a      	ldr	r1, [pc, #104]	; (80119e0 <__ieee754_pow+0xa40>)
 8011976:	2000      	movs	r0, #0
 8011978:	f7ff bb31 	b.w	8010fde <__ieee754_pow+0x3e>
 801197c:	2000      	movs	r0, #0
 801197e:	2100      	movs	r1, #0
 8011980:	f7ff bb2d 	b.w	8010fde <__ieee754_pow+0x3e>
 8011984:	4630      	mov	r0, r6
 8011986:	4639      	mov	r1, r7
 8011988:	f7ff bb29 	b.w	8010fde <__ieee754_pow+0x3e>
 801198c:	9204      	str	r2, [sp, #16]
 801198e:	f7ff bb7b 	b.w	8011088 <__ieee754_pow+0xe8>
 8011992:	2300      	movs	r3, #0
 8011994:	f7ff bb65 	b.w	8011062 <__ieee754_pow+0xc2>
 8011998:	00000000 	.word	0x00000000
 801199c:	3fe62e43 	.word	0x3fe62e43
 80119a0:	fefa39ef 	.word	0xfefa39ef
 80119a4:	3fe62e42 	.word	0x3fe62e42
 80119a8:	0ca86c39 	.word	0x0ca86c39
 80119ac:	be205c61 	.word	0xbe205c61
 80119b0:	72bea4d0 	.word	0x72bea4d0
 80119b4:	3e663769 	.word	0x3e663769
 80119b8:	c5d26bf1 	.word	0xc5d26bf1
 80119bc:	3ebbbd41 	.word	0x3ebbbd41
 80119c0:	af25de2c 	.word	0xaf25de2c
 80119c4:	3f11566a 	.word	0x3f11566a
 80119c8:	16bebd93 	.word	0x16bebd93
 80119cc:	3f66c16c 	.word	0x3f66c16c
 80119d0:	5555553e 	.word	0x5555553e
 80119d4:	3fc55555 	.word	0x3fc55555
 80119d8:	3fe00000 	.word	0x3fe00000
 80119dc:	fff00000 	.word	0xfff00000
 80119e0:	3ff00000 	.word	0x3ff00000
 80119e4:	4090cbff 	.word	0x4090cbff
 80119e8:	3f6f3400 	.word	0x3f6f3400
 80119ec:	652b82fe 	.word	0x652b82fe
 80119f0:	3c971547 	.word	0x3c971547

080119f4 <fabs>:
 80119f4:	ec51 0b10 	vmov	r0, r1, d0
 80119f8:	ee10 2a10 	vmov	r2, s0
 80119fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011a00:	ec43 2b10 	vmov	d0, r2, r3
 8011a04:	4770      	bx	lr
	...

08011a08 <scalbn>:
 8011a08:	b570      	push	{r4, r5, r6, lr}
 8011a0a:	ec55 4b10 	vmov	r4, r5, d0
 8011a0e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011a12:	4606      	mov	r6, r0
 8011a14:	462b      	mov	r3, r5
 8011a16:	b999      	cbnz	r1, 8011a40 <scalbn+0x38>
 8011a18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011a1c:	4323      	orrs	r3, r4
 8011a1e:	d03f      	beq.n	8011aa0 <scalbn+0x98>
 8011a20:	4b35      	ldr	r3, [pc, #212]	; (8011af8 <scalbn+0xf0>)
 8011a22:	4629      	mov	r1, r5
 8011a24:	ee10 0a10 	vmov	r0, s0
 8011a28:	2200      	movs	r2, #0
 8011a2a:	f7ee fe1d 	bl	8000668 <__aeabi_dmul>
 8011a2e:	4b33      	ldr	r3, [pc, #204]	; (8011afc <scalbn+0xf4>)
 8011a30:	429e      	cmp	r6, r3
 8011a32:	4604      	mov	r4, r0
 8011a34:	460d      	mov	r5, r1
 8011a36:	da10      	bge.n	8011a5a <scalbn+0x52>
 8011a38:	a327      	add	r3, pc, #156	; (adr r3, 8011ad8 <scalbn+0xd0>)
 8011a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a3e:	e01f      	b.n	8011a80 <scalbn+0x78>
 8011a40:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011a44:	4291      	cmp	r1, r2
 8011a46:	d10c      	bne.n	8011a62 <scalbn+0x5a>
 8011a48:	ee10 2a10 	vmov	r2, s0
 8011a4c:	4620      	mov	r0, r4
 8011a4e:	4629      	mov	r1, r5
 8011a50:	f7ee fc54 	bl	80002fc <__adddf3>
 8011a54:	4604      	mov	r4, r0
 8011a56:	460d      	mov	r5, r1
 8011a58:	e022      	b.n	8011aa0 <scalbn+0x98>
 8011a5a:	460b      	mov	r3, r1
 8011a5c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011a60:	3936      	subs	r1, #54	; 0x36
 8011a62:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011a66:	4296      	cmp	r6, r2
 8011a68:	dd0d      	ble.n	8011a86 <scalbn+0x7e>
 8011a6a:	2d00      	cmp	r5, #0
 8011a6c:	a11c      	add	r1, pc, #112	; (adr r1, 8011ae0 <scalbn+0xd8>)
 8011a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a72:	da02      	bge.n	8011a7a <scalbn+0x72>
 8011a74:	a11c      	add	r1, pc, #112	; (adr r1, 8011ae8 <scalbn+0xe0>)
 8011a76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a7a:	a319      	add	r3, pc, #100	; (adr r3, 8011ae0 <scalbn+0xd8>)
 8011a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a80:	f7ee fdf2 	bl	8000668 <__aeabi_dmul>
 8011a84:	e7e6      	b.n	8011a54 <scalbn+0x4c>
 8011a86:	1872      	adds	r2, r6, r1
 8011a88:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011a8c:	428a      	cmp	r2, r1
 8011a8e:	dcec      	bgt.n	8011a6a <scalbn+0x62>
 8011a90:	2a00      	cmp	r2, #0
 8011a92:	dd08      	ble.n	8011aa6 <scalbn+0x9e>
 8011a94:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011a98:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011a9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011aa0:	ec45 4b10 	vmov	d0, r4, r5
 8011aa4:	bd70      	pop	{r4, r5, r6, pc}
 8011aa6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011aaa:	da08      	bge.n	8011abe <scalbn+0xb6>
 8011aac:	2d00      	cmp	r5, #0
 8011aae:	a10a      	add	r1, pc, #40	; (adr r1, 8011ad8 <scalbn+0xd0>)
 8011ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ab4:	dac0      	bge.n	8011a38 <scalbn+0x30>
 8011ab6:	a10e      	add	r1, pc, #56	; (adr r1, 8011af0 <scalbn+0xe8>)
 8011ab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011abc:	e7bc      	b.n	8011a38 <scalbn+0x30>
 8011abe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011ac2:	3236      	adds	r2, #54	; 0x36
 8011ac4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011ac8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011acc:	4620      	mov	r0, r4
 8011ace:	4b0c      	ldr	r3, [pc, #48]	; (8011b00 <scalbn+0xf8>)
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	e7d5      	b.n	8011a80 <scalbn+0x78>
 8011ad4:	f3af 8000 	nop.w
 8011ad8:	c2f8f359 	.word	0xc2f8f359
 8011adc:	01a56e1f 	.word	0x01a56e1f
 8011ae0:	8800759c 	.word	0x8800759c
 8011ae4:	7e37e43c 	.word	0x7e37e43c
 8011ae8:	8800759c 	.word	0x8800759c
 8011aec:	fe37e43c 	.word	0xfe37e43c
 8011af0:	c2f8f359 	.word	0xc2f8f359
 8011af4:	81a56e1f 	.word	0x81a56e1f
 8011af8:	43500000 	.word	0x43500000
 8011afc:	ffff3cb0 	.word	0xffff3cb0
 8011b00:	3c900000 	.word	0x3c900000

08011b04 <with_errno>:
 8011b04:	b570      	push	{r4, r5, r6, lr}
 8011b06:	4604      	mov	r4, r0
 8011b08:	460d      	mov	r5, r1
 8011b0a:	4616      	mov	r6, r2
 8011b0c:	f7fd f924 	bl	800ed58 <__errno>
 8011b10:	4629      	mov	r1, r5
 8011b12:	6006      	str	r6, [r0, #0]
 8011b14:	4620      	mov	r0, r4
 8011b16:	bd70      	pop	{r4, r5, r6, pc}

08011b18 <xflow>:
 8011b18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011b1a:	4614      	mov	r4, r2
 8011b1c:	461d      	mov	r5, r3
 8011b1e:	b108      	cbz	r0, 8011b24 <xflow+0xc>
 8011b20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011b24:	e9cd 2300 	strd	r2, r3, [sp]
 8011b28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011b2c:	4620      	mov	r0, r4
 8011b2e:	4629      	mov	r1, r5
 8011b30:	f7ee fd9a 	bl	8000668 <__aeabi_dmul>
 8011b34:	2222      	movs	r2, #34	; 0x22
 8011b36:	b003      	add	sp, #12
 8011b38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011b3c:	f7ff bfe2 	b.w	8011b04 <with_errno>

08011b40 <__math_uflow>:
 8011b40:	b508      	push	{r3, lr}
 8011b42:	2200      	movs	r2, #0
 8011b44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011b48:	f7ff ffe6 	bl	8011b18 <xflow>
 8011b4c:	ec41 0b10 	vmov	d0, r0, r1
 8011b50:	bd08      	pop	{r3, pc}

08011b52 <__math_oflow>:
 8011b52:	b508      	push	{r3, lr}
 8011b54:	2200      	movs	r2, #0
 8011b56:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8011b5a:	f7ff ffdd 	bl	8011b18 <xflow>
 8011b5e:	ec41 0b10 	vmov	d0, r0, r1
 8011b62:	bd08      	pop	{r3, pc}

08011b64 <__ieee754_sqrt>:
 8011b64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b68:	ec55 4b10 	vmov	r4, r5, d0
 8011b6c:	4e67      	ldr	r6, [pc, #412]	; (8011d0c <__ieee754_sqrt+0x1a8>)
 8011b6e:	43ae      	bics	r6, r5
 8011b70:	ee10 0a10 	vmov	r0, s0
 8011b74:	ee10 2a10 	vmov	r2, s0
 8011b78:	4629      	mov	r1, r5
 8011b7a:	462b      	mov	r3, r5
 8011b7c:	d10d      	bne.n	8011b9a <__ieee754_sqrt+0x36>
 8011b7e:	f7ee fd73 	bl	8000668 <__aeabi_dmul>
 8011b82:	4602      	mov	r2, r0
 8011b84:	460b      	mov	r3, r1
 8011b86:	4620      	mov	r0, r4
 8011b88:	4629      	mov	r1, r5
 8011b8a:	f7ee fbb7 	bl	80002fc <__adddf3>
 8011b8e:	4604      	mov	r4, r0
 8011b90:	460d      	mov	r5, r1
 8011b92:	ec45 4b10 	vmov	d0, r4, r5
 8011b96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b9a:	2d00      	cmp	r5, #0
 8011b9c:	dc0b      	bgt.n	8011bb6 <__ieee754_sqrt+0x52>
 8011b9e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011ba2:	4326      	orrs	r6, r4
 8011ba4:	d0f5      	beq.n	8011b92 <__ieee754_sqrt+0x2e>
 8011ba6:	b135      	cbz	r5, 8011bb6 <__ieee754_sqrt+0x52>
 8011ba8:	f7ee fba6 	bl	80002f8 <__aeabi_dsub>
 8011bac:	4602      	mov	r2, r0
 8011bae:	460b      	mov	r3, r1
 8011bb0:	f7ee fe84 	bl	80008bc <__aeabi_ddiv>
 8011bb4:	e7eb      	b.n	8011b8e <__ieee754_sqrt+0x2a>
 8011bb6:	1509      	asrs	r1, r1, #20
 8011bb8:	f000 808d 	beq.w	8011cd6 <__ieee754_sqrt+0x172>
 8011bbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011bc0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8011bc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011bc8:	07c9      	lsls	r1, r1, #31
 8011bca:	bf5c      	itt	pl
 8011bcc:	005b      	lslpl	r3, r3, #1
 8011bce:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8011bd2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011bd6:	bf58      	it	pl
 8011bd8:	0052      	lslpl	r2, r2, #1
 8011bda:	2500      	movs	r5, #0
 8011bdc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011be0:	1076      	asrs	r6, r6, #1
 8011be2:	0052      	lsls	r2, r2, #1
 8011be4:	f04f 0e16 	mov.w	lr, #22
 8011be8:	46ac      	mov	ip, r5
 8011bea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011bee:	eb0c 0001 	add.w	r0, ip, r1
 8011bf2:	4298      	cmp	r0, r3
 8011bf4:	bfde      	ittt	le
 8011bf6:	1a1b      	suble	r3, r3, r0
 8011bf8:	eb00 0c01 	addle.w	ip, r0, r1
 8011bfc:	186d      	addle	r5, r5, r1
 8011bfe:	005b      	lsls	r3, r3, #1
 8011c00:	f1be 0e01 	subs.w	lr, lr, #1
 8011c04:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011c08:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011c0c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011c10:	d1ed      	bne.n	8011bee <__ieee754_sqrt+0x8a>
 8011c12:	4674      	mov	r4, lr
 8011c14:	2720      	movs	r7, #32
 8011c16:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8011c1a:	4563      	cmp	r3, ip
 8011c1c:	eb01 000e 	add.w	r0, r1, lr
 8011c20:	dc02      	bgt.n	8011c28 <__ieee754_sqrt+0xc4>
 8011c22:	d113      	bne.n	8011c4c <__ieee754_sqrt+0xe8>
 8011c24:	4290      	cmp	r0, r2
 8011c26:	d811      	bhi.n	8011c4c <__ieee754_sqrt+0xe8>
 8011c28:	2800      	cmp	r0, #0
 8011c2a:	eb00 0e01 	add.w	lr, r0, r1
 8011c2e:	da57      	bge.n	8011ce0 <__ieee754_sqrt+0x17c>
 8011c30:	f1be 0f00 	cmp.w	lr, #0
 8011c34:	db54      	blt.n	8011ce0 <__ieee754_sqrt+0x17c>
 8011c36:	f10c 0801 	add.w	r8, ip, #1
 8011c3a:	eba3 030c 	sub.w	r3, r3, ip
 8011c3e:	4290      	cmp	r0, r2
 8011c40:	bf88      	it	hi
 8011c42:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011c46:	1a12      	subs	r2, r2, r0
 8011c48:	440c      	add	r4, r1
 8011c4a:	46c4      	mov	ip, r8
 8011c4c:	005b      	lsls	r3, r3, #1
 8011c4e:	3f01      	subs	r7, #1
 8011c50:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011c54:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011c58:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011c5c:	d1dd      	bne.n	8011c1a <__ieee754_sqrt+0xb6>
 8011c5e:	4313      	orrs	r3, r2
 8011c60:	d01b      	beq.n	8011c9a <__ieee754_sqrt+0x136>
 8011c62:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8011d10 <__ieee754_sqrt+0x1ac>
 8011c66:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8011d14 <__ieee754_sqrt+0x1b0>
 8011c6a:	e9da 0100 	ldrd	r0, r1, [sl]
 8011c6e:	e9db 2300 	ldrd	r2, r3, [fp]
 8011c72:	f7ee fb41 	bl	80002f8 <__aeabi_dsub>
 8011c76:	e9da 8900 	ldrd	r8, r9, [sl]
 8011c7a:	4602      	mov	r2, r0
 8011c7c:	460b      	mov	r3, r1
 8011c7e:	4640      	mov	r0, r8
 8011c80:	4649      	mov	r1, r9
 8011c82:	f7ee ff6d 	bl	8000b60 <__aeabi_dcmple>
 8011c86:	b140      	cbz	r0, 8011c9a <__ieee754_sqrt+0x136>
 8011c88:	f1b4 3fff 	cmp.w	r4, #4294967295
 8011c8c:	e9da 0100 	ldrd	r0, r1, [sl]
 8011c90:	e9db 2300 	ldrd	r2, r3, [fp]
 8011c94:	d126      	bne.n	8011ce4 <__ieee754_sqrt+0x180>
 8011c96:	3501      	adds	r5, #1
 8011c98:	463c      	mov	r4, r7
 8011c9a:	106a      	asrs	r2, r5, #1
 8011c9c:	0863      	lsrs	r3, r4, #1
 8011c9e:	07e9      	lsls	r1, r5, #31
 8011ca0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011ca4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011ca8:	bf48      	it	mi
 8011caa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011cae:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8011cb2:	461c      	mov	r4, r3
 8011cb4:	e76d      	b.n	8011b92 <__ieee754_sqrt+0x2e>
 8011cb6:	0ad3      	lsrs	r3, r2, #11
 8011cb8:	3815      	subs	r0, #21
 8011cba:	0552      	lsls	r2, r2, #21
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d0fa      	beq.n	8011cb6 <__ieee754_sqrt+0x152>
 8011cc0:	02dc      	lsls	r4, r3, #11
 8011cc2:	d50a      	bpl.n	8011cda <__ieee754_sqrt+0x176>
 8011cc4:	f1c1 0420 	rsb	r4, r1, #32
 8011cc8:	fa22 f404 	lsr.w	r4, r2, r4
 8011ccc:	1e4d      	subs	r5, r1, #1
 8011cce:	408a      	lsls	r2, r1
 8011cd0:	4323      	orrs	r3, r4
 8011cd2:	1b41      	subs	r1, r0, r5
 8011cd4:	e772      	b.n	8011bbc <__ieee754_sqrt+0x58>
 8011cd6:	4608      	mov	r0, r1
 8011cd8:	e7f0      	b.n	8011cbc <__ieee754_sqrt+0x158>
 8011cda:	005b      	lsls	r3, r3, #1
 8011cdc:	3101      	adds	r1, #1
 8011cde:	e7ef      	b.n	8011cc0 <__ieee754_sqrt+0x15c>
 8011ce0:	46e0      	mov	r8, ip
 8011ce2:	e7aa      	b.n	8011c3a <__ieee754_sqrt+0xd6>
 8011ce4:	f7ee fb0a 	bl	80002fc <__adddf3>
 8011ce8:	e9da 8900 	ldrd	r8, r9, [sl]
 8011cec:	4602      	mov	r2, r0
 8011cee:	460b      	mov	r3, r1
 8011cf0:	4640      	mov	r0, r8
 8011cf2:	4649      	mov	r1, r9
 8011cf4:	f7ee ff2a 	bl	8000b4c <__aeabi_dcmplt>
 8011cf8:	b120      	cbz	r0, 8011d04 <__ieee754_sqrt+0x1a0>
 8011cfa:	1ca0      	adds	r0, r4, #2
 8011cfc:	bf08      	it	eq
 8011cfe:	3501      	addeq	r5, #1
 8011d00:	3402      	adds	r4, #2
 8011d02:	e7ca      	b.n	8011c9a <__ieee754_sqrt+0x136>
 8011d04:	3401      	adds	r4, #1
 8011d06:	f024 0401 	bic.w	r4, r4, #1
 8011d0a:	e7c6      	b.n	8011c9a <__ieee754_sqrt+0x136>
 8011d0c:	7ff00000 	.word	0x7ff00000
 8011d10:	20000358 	.word	0x20000358
 8011d14:	20000360 	.word	0x20000360

08011d18 <_init>:
 8011d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d1a:	bf00      	nop
 8011d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d1e:	bc08      	pop	{r3}
 8011d20:	469e      	mov	lr, r3
 8011d22:	4770      	bx	lr

08011d24 <_fini>:
 8011d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d26:	bf00      	nop
 8011d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d2a:	bc08      	pop	{r3}
 8011d2c:	469e      	mov	lr, r3
 8011d2e:	4770      	bx	lr
